// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension ArchivalSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case archivalBackupArn = "ArchivalBackupArn"
        case archivalDateTime = "ArchivalDateTime"
        case archivalReason = "ArchivalReason"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let archivalBackupArn = archivalBackupArn {
            try encodeContainer.encode(archivalBackupArn, forKey: .archivalBackupArn)
        }
        if let archivalDateTime = archivalDateTime {
            try encodeContainer.encode(archivalDateTime.timeIntervalSince1970, forKey: .archivalDateTime)
        }
        if let archivalReason = archivalReason {
            try encodeContainer.encode(archivalReason, forKey: .archivalReason)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let archivalDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .archivalDateTime)
        archivalDateTime = archivalDateTimeDecoded
        let archivalReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .archivalReason)
        archivalReason = archivalReasonDecoded
        let archivalBackupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .archivalBackupArn)
        archivalBackupArn = archivalBackupArnDecoded
    }
}

extension ArchivalSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ArchivalSummary(archivalBackupArn: \(String(describing: archivalBackupArn)), archivalDateTime: \(String(describing: archivalDateTime)), archivalReason: \(String(describing: archivalReason)))"}
}

/// <p>Contains details of a table archival operation.</p>
public struct ArchivalSummary: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the backup the table was archived
    ///          to, when applicable in the archival reason. If you wish to restore this
    ///          backup to the same table name, you will need to delete the original
    ///          table.</p>
    public let archivalBackupArn: String?
    /// <p>The date and time when table archival was initiated by DynamoDB,
    ///          in UNIX epoch time format.</p>
    public let archivalDateTime: Date?
    /// <p>The reason DynamoDB archived the table. Currently, the only
    ///          possible value is:</p>
    ///
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>INACCESSIBLE_ENCRYPTION_CREDENTIALS</code> - The
    ///          table was archived due to the table's AWS KMS key being inaccessible
    ///          for more than seven days. An On-Demand backup was created at the archival
    ///          time.</p>
    ///             </li>
    ///          </ul>
    public let archivalReason: String?

    public init (
        archivalBackupArn: String? = nil,
        archivalDateTime: Date? = nil,
        archivalReason: String? = nil
    )
    {
        self.archivalBackupArn = archivalBackupArn
        self.archivalDateTime = archivalDateTime
        self.archivalReason = archivalReason
    }
}

public enum AttributeAction {
    case add
    case delete
    case put
    case sdkUnknown(String)
}

extension AttributeAction : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AttributeAction] {
        return [
            .add,
            .delete,
            .put,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .add: return "ADD"
        case .delete: return "DELETE"
        case .put: return "PUT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AttributeAction(rawValue: rawValue) ?? AttributeAction.sdkUnknown(rawValue)
    }
}

extension AttributeDefinition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributeName = "AttributeName"
        case attributeType = "AttributeType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeName = attributeName {
            try encodeContainer.encode(attributeName, forKey: .attributeName)
        }
        if let attributeType = attributeType {
            try encodeContainer.encode(attributeType.rawValue, forKey: .attributeType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
        let attributeTypeDecoded = try containerValues.decodeIfPresent(ScalarAttributeType.self, forKey: .attributeType)
        attributeType = attributeTypeDecoded
    }
}

extension AttributeDefinition: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AttributeDefinition(attributeName: \(String(describing: attributeName)), attributeType: \(String(describing: attributeType)))"}
}

/// <p>Represents an attribute for describing the key schema for the table and indexes.</p>
public struct AttributeDefinition: Equatable {
    /// <p>A name for the attribute.</p>
    public let attributeName: String?
    /// <p>The data type for the attribute, where:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>S</code> - the attribute is of type String</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>N</code> - the attribute is of type Number</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>B</code> - the attribute is of type Binary</p>
    ///             </li>
    ///          </ul>
    public let attributeType: ScalarAttributeType?

    public init (
        attributeName: String? = nil,
        attributeType: ScalarAttributeType? = nil
    )
    {
        self.attributeName = attributeName
        self.attributeType = attributeType
    }
}

extension AttributeValue: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case b = "B"
        case bOOL = "BOOL"
        case bS = "BS"
        case l = "L"
        case m = "M"
        case n = "N"
        case nS = "NS"
        case nULL = "NULL"
        case s = "S"
        case sS = "SS"
        case sdkUnknown
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .b(b):
                if let b = b {
                    try container.encode(b.base64EncodedString(), forKey: .b)
                }
            case let .bOOL(bOOL):
                if let bOOL = bOOL {
                    try container.encode(bOOL, forKey: .bOOL)
                }
            case let .bS(bS):
                if let bS = bS {
                    var bSContainer = container.nestedUnkeyedContainer(forKey: .bS)
                    for binarysetattributevalue0 in bS {
                        try bSContainer.encode(binarysetattributevalue0.base64EncodedString())
                    }
                }
            case let .l(l):
                if let l = l {
                    var lContainer = container.nestedUnkeyedContainer(forKey: .l)
                    for listattributevalue0 in l {
                        try lContainer.encode(listattributevalue0)
                    }
                }
            case let .m(m):
                if let m = m {
                    var mContainer = container.nestedContainer(keyedBy: Key.self, forKey: .m)
                    for (dictKey0, mapattributevalue0) in m {
                        try mContainer.encode(mapattributevalue0, forKey: Key(stringValue: dictKey0))
                    }
                }
            case let .n(n):
                if let n = n {
                    try container.encode(n, forKey: .n)
                }
            case let .nS(nS):
                if let nS = nS {
                    var nSContainer = container.nestedUnkeyedContainer(forKey: .nS)
                    for numbersetattributevalue0 in nS {
                        try nSContainer.encode(numbersetattributevalue0)
                    }
                }
            case let .nULL(nULL):
                if let nULL = nULL {
                    try container.encode(nULL, forKey: .nULL)
                }
            case let .s(s):
                if let s = s {
                    try container.encode(s, forKey: .s)
                }
            case let .sS(sS):
                if let sS = sS {
                    var sSContainer = container.nestedUnkeyedContainer(forKey: .sS)
                    for stringsetattributevalue0 in sS {
                        try sSContainer.encode(stringsetattributevalue0)
                    }
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let sDecoded = try values.decodeIfPresent(String.self, forKey: .s)
        if let s = sDecoded {
            self = .s(s)
            return
        }
        let nDecoded = try values.decodeIfPresent(String.self, forKey: .n)
        if let n = nDecoded {
            self = .n(n)
            return
        }
        let bDecoded = try values.decodeIfPresent(Data.self, forKey: .b)
        if let b = bDecoded {
            self = .b(b)
            return
        }
        let sSContainer = try values.decodeIfPresent([String?].self, forKey: .sS)
        var sSDecoded0:[String]? = nil
        if let sSContainer = sSContainer {
            sSDecoded0 = [String]()
            for string0 in sSContainer {
                if let string0 = string0 {
                    sSDecoded0?.append(string0)
                }
            }
        }
        if let sS = sSDecoded0 {
            self = .sS(sS)
            return
        }
        let nSContainer = try values.decodeIfPresent([String?].self, forKey: .nS)
        var nSDecoded0:[String]? = nil
        if let nSContainer = nSContainer {
            nSDecoded0 = [String]()
            for string0 in nSContainer {
                if let string0 = string0 {
                    nSDecoded0?.append(string0)
                }
            }
        }
        if let nS = nSDecoded0 {
            self = .nS(nS)
            return
        }
        let bSContainer = try values.decodeIfPresent([ClientRuntime.Data?].self, forKey: .bS)
        var bSDecoded0:[Data]? = nil
        if let bSContainer = bSContainer {
            bSDecoded0 = [Data]()
            for blob0 in bSContainer {
                if let blob0 = blob0 {
                    bSDecoded0?.append(blob0)
                }
            }
        }
        if let bS = bSDecoded0 {
            self = .bS(bS)
            return
        }
        let mContainer = try values.decodeIfPresent([String: AttributeValue?].self, forKey: .m)
        var mDecoded0: [String:AttributeValue]? = nil
        if let mContainer = mContainer {
            mDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in mContainer {
                if let attributevalue0 = attributevalue0 {
                    mDecoded0?[key0] = attributevalue0
                }
            }
        }
        if let m = mDecoded0 {
            self = .m(m)
            return
        }
        let lContainer = try values.decodeIfPresent([AttributeValue?].self, forKey: .l)
        var lDecoded0:[AttributeValue]? = nil
        if let lContainer = lContainer {
            lDecoded0 = [AttributeValue]()
            for union0 in lContainer {
                if let union0 = union0 {
                    lDecoded0?.append(union0)
                }
            }
        }
        if let l = lDecoded0 {
            self = .l(l)
            return
        }
        let nULLDecoded = try values.decodeIfPresent(Bool.self, forKey: .nULL)
        if let nULL = nULLDecoded {
            self = .nULL(nULL)
            return
        }
        let bOOLDecoded = try values.decodeIfPresent(Bool.self, forKey: .bOOL)
        if let bOOL = bOOLDecoded {
            self = .bOOL(bOOL)
            return
        }
        self = .sdkUnknown("")
    }
}

/// <p>Represents the data for an attribute.</p>
///          <p>Each attribute value is described as a name-value pair.  The name is the data type, and the value is the data itself.</p>
///          <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes">Data Types</a> in the
///                              <i>Amazon DynamoDB Developer Guide</i>.</p>
public enum AttributeValue: Equatable {
    /// <p>An attribute of type  String. For example:</p>
    ///          <p>
    ///             <code>"S": "Hello"</code>
    ///          </p>
    case s(String?)
    /// <p>An attribute of type Number.  For example:</p>
    ///          <p>
    ///             <code>"N": "123.45"</code>
    ///          </p>
    ///          <p>Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.</p>
    case n(String?)
    /// <p>An attribute of type Binary.  For example:</p>
    ///          <p>
    ///             <code>"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"</code>
    ///          </p>
    case b(Data?)
    /// <p>An attribute of type String Set.  For example:</p>
    ///          <p>
    ///             <code>"SS": ["Giraffe", "Hippo" ,"Zebra"]</code>
    ///          </p>
    case sS([String]?)
    /// <p>An attribute of type Number Set.  For example:</p>
    ///          <p>
    ///             <code>"NS": ["42.2", "-19", "7.5", "3.14"]</code>
    ///          </p>
    ///          <p>Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.</p>
    case nS([String]?)
    /// <p>An attribute of type Binary Set.  For example:</p>
    ///          <p>
    ///             <code>"BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]</code>
    ///          </p>
    case bS([Data]?)
    /// <p>An attribute of type Map.  For example:</p>
    ///          <p>
    ///             <code>"M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}</code>
    ///          </p>
    case m([String:AttributeValue]?)
    /// <p>An attribute of type List.  For example:</p>
    ///          <p>
    ///             <code>"L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]</code>
    ///          </p>
    case l([AttributeValue]?)
    /// <p>An attribute of type Null.  For example:</p>
    ///          <p>
    ///             <code>"NULL": true</code>
    ///          </p>
    case nULL(Bool?)
    /// <p>An attribute of type Boolean.  For example:</p>
    ///          <p>
    ///             <code>"BOOL": true</code>
    ///          </p>
    case bOOL(Bool?)
    case sdkUnknown(String?)
}

extension AttributeValueUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case action = "Action"
        case value = "Value"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(AttributeValue.self, forKey: .value)
        value = valueDecoded
        let actionDecoded = try containerValues.decodeIfPresent(AttributeAction.self, forKey: .action)
        action = actionDecoded
    }
}

extension AttributeValueUpdate: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AttributeValueUpdate(action: \(String(describing: action)), value: \(String(describing: value)))"}
}

/// <p>For the <code>UpdateItem</code> operation, represents the attributes to be modified, the action to
///       perform on each, and the new value for each.</p>
///          <note>
///             <p>You cannot use <code>UpdateItem</code> to update any primary key attributes. Instead, you will
///         need to delete the item, and then use <code>PutItem</code> to create a new item with new
///         attributes.</p>
///          </note>
///          <p>Attribute values cannot be null; string and binary type attributes must have lengths greater
///       than zero; and set type attributes must not be empty. Requests with empty values will be
///       rejected with a <code>ValidationException</code> exception.</p>
public struct AttributeValueUpdate: Equatable {
    /// <p>Specifies how to perform the update. Valid values are <code>PUT</code> (default), <code>DELETE</code>,
    ///       and <code>ADD</code>. The behavior depends on whether the specified primary key already exists
    ///       in the table.</p>
    ///
    ///          <p>
    ///             <b>If an item with the specified <i>Key</i> is found in the table:</b>
    ///          </p>
    ///
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>PUT</code> - Adds the specified attribute to the item. If the attribute already
    ///           exists, it is replaced by the new value. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DELETE</code> - If no value is specified, the attribute and its value are removed
    ///           from the item. The data type of the specified value must match the existing value's data
    ///           type.</p>
    ///                <p>If a <i>set</i> of values is specified, then those values are subtracted from the old
    ///           set. For example, if the attribute value was the set <code>[a,b,c]</code> and the
    ///             <code>DELETE</code> action specified <code>[a,c]</code>, then the final attribute value would
    ///           be <code>[b]</code>. Specifying an empty set is an error.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ADD</code> - If the attribute does not already exist, then the attribute and its
    ///           values are added to the item. If the attribute does exist, then the behavior of
    ///             <code>ADD</code> depends on the data type of the attribute:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>If the existing attribute is a number, and if <code>Value</code> is also a number, then the
    ///                 <code>Value</code> is mathematically added to the existing attribute. If <code>Value</code> is a
    ///               negative number, then it is subtracted from the existing attribute.</p>
    ///                      <note>
    ///                         <p> If you use <code>ADD</code> to increment or decrement a number value for an item
    ///                 that doesn't exist before the update, DynamoDB uses 0 as the initial value.</p>
    ///                         <p>In addition, if you use <code>ADD</code> to update an existing item, and intend to
    ///                 increment or decrement an attribute value which does not yet exist, DynamoDB uses
    ///                   <code>0</code> as the initial value. For example, suppose that the item you want
    ///                 to update does not yet have an attribute named <i>itemcount</i>, but you decide to
    ///                   <code>ADD</code> the number <code>3</code> to this attribute anyway, even though
    ///                 it currently does not exist. DynamoDB will create the <i>itemcount</i> attribute, set
    ///                 its initial value to <code>0</code>, and finally add <code>3</code> to it. The
    ///                 result will be a new <i>itemcount</i> attribute in the item, with a value of
    ///                   <code>3</code>.</p>
    ///                      </note>
    ///                   </li>
    ///                   <li>
    ///                      <p>If the existing data type is a set, and if the <code>Value</code> is also a set, then the
    ///                 <code>Value</code> is added to the existing set. (This is a <i>set</i> operation, not
    ///               mathematical addition.) For example, if the attribute value was the set
    ///                 <code>[1,2]</code>, and the <code>ADD</code> action specified <code>[3]</code>, then
    ///               the final attribute value would be <code>[1,2,3]</code>. An error occurs if an Add
    ///               action is specified for a set attribute and the attribute type specified does not
    ///               match the existing set type. </p>
    ///                      <p>Both sets must have the same primitive data type. For example, if the existing data
    ///               type is a set of strings, the <code>Value</code> must also be a set of strings. The same
    ///               holds true for number sets and binary sets.</p>
    ///                   </li>
    ///                </ul>
    ///                <p>This action is only valid for an existing attribute whose data type is number or is a
    ///           set. Do not use <code>ADD</code> for any other data types.</p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p>
    ///             <b>If no item with the specified <i>Key</i> is found:</b>
    ///          </p>
    ///
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>PUT</code> - DynamoDB creates a new item with the specified primary key, and then adds
    ///           the attribute. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DELETE</code> - Nothing happens; there is no attribute to delete.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ADD</code> - DynamoDB creates an item with the supplied primary key and number (or set
    ///           of numbers) for the attribute value. The only data types allowed are number and number
    ///           set; no other data types can be specified.</p>
    ///             </li>
    ///          </ul>
    public let action: AttributeAction?
    /// <p>Represents the data for an attribute.</p>
    ///          <p>Each attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes">Data Types</a> in the <i>Amazon DynamoDB Developer Guide</i>.
    ///       </p>
    public let value: AttributeValue?

    public init (
        action: AttributeAction? = nil,
        value: AttributeValue? = nil
    )
    {
        self.action = action
        self.value = value
    }
}

extension AutoScalingPolicyDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case policyName = "PolicyName"
        case targetTrackingScalingPolicyConfiguration = "TargetTrackingScalingPolicyConfiguration"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyName = policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
        if let targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfiguration {
            try encodeContainer.encode(targetTrackingScalingPolicyConfiguration, forKey: .targetTrackingScalingPolicyConfiguration)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let targetTrackingScalingPolicyConfigurationDecoded = try containerValues.decodeIfPresent(AutoScalingTargetTrackingScalingPolicyConfigurationDescription.self, forKey: .targetTrackingScalingPolicyConfiguration)
        targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfigurationDecoded
    }
}

extension AutoScalingPolicyDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AutoScalingPolicyDescription(policyName: \(String(describing: policyName)), targetTrackingScalingPolicyConfiguration: \(String(describing: targetTrackingScalingPolicyConfiguration)))"}
}

/// <p>Represents the properties of the scaling policy.</p>
public struct AutoScalingPolicyDescription: Equatable {
    /// <p>The name of the scaling policy.</p>
    public let policyName: String?
    /// <p>Represents a target tracking scaling policy configuration.</p>
    public let targetTrackingScalingPolicyConfiguration: AutoScalingTargetTrackingScalingPolicyConfigurationDescription?

    public init (
        policyName: String? = nil,
        targetTrackingScalingPolicyConfiguration: AutoScalingTargetTrackingScalingPolicyConfigurationDescription? = nil
    )
    {
        self.policyName = policyName
        self.targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfiguration
    }
}

extension AutoScalingPolicyUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case policyName = "PolicyName"
        case targetTrackingScalingPolicyConfiguration = "TargetTrackingScalingPolicyConfiguration"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyName = policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
        if let targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfiguration {
            try encodeContainer.encode(targetTrackingScalingPolicyConfiguration, forKey: .targetTrackingScalingPolicyConfiguration)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let targetTrackingScalingPolicyConfigurationDecoded = try containerValues.decodeIfPresent(AutoScalingTargetTrackingScalingPolicyConfigurationUpdate.self, forKey: .targetTrackingScalingPolicyConfiguration)
        targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfigurationDecoded
    }
}

extension AutoScalingPolicyUpdate: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AutoScalingPolicyUpdate(policyName: \(String(describing: policyName)), targetTrackingScalingPolicyConfiguration: \(String(describing: targetTrackingScalingPolicyConfiguration)))"}
}

/// <p>Represents the auto scaling policy to be modified.</p>
public struct AutoScalingPolicyUpdate: Equatable {
    /// <p>The name of the scaling policy.</p>
    public let policyName: String?
    /// <p>Represents a target tracking scaling policy configuration.</p>
    public let targetTrackingScalingPolicyConfiguration: AutoScalingTargetTrackingScalingPolicyConfigurationUpdate?

    public init (
        policyName: String? = nil,
        targetTrackingScalingPolicyConfiguration: AutoScalingTargetTrackingScalingPolicyConfigurationUpdate? = nil
    )
    {
        self.policyName = policyName
        self.targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfiguration
    }
}

extension AutoScalingSettingsDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoScalingDisabled = "AutoScalingDisabled"
        case autoScalingRoleArn = "AutoScalingRoleArn"
        case maximumUnits = "MaximumUnits"
        case minimumUnits = "MinimumUnits"
        case scalingPolicies = "ScalingPolicies"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingDisabled = autoScalingDisabled {
            try encodeContainer.encode(autoScalingDisabled, forKey: .autoScalingDisabled)
        }
        if let autoScalingRoleArn = autoScalingRoleArn {
            try encodeContainer.encode(autoScalingRoleArn, forKey: .autoScalingRoleArn)
        }
        if let maximumUnits = maximumUnits {
            try encodeContainer.encode(maximumUnits, forKey: .maximumUnits)
        }
        if let minimumUnits = minimumUnits {
            try encodeContainer.encode(minimumUnits, forKey: .minimumUnits)
        }
        if let scalingPolicies = scalingPolicies {
            var scalingPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scalingPolicies)
            for autoscalingpolicydescriptionlist0 in scalingPolicies {
                try scalingPoliciesContainer.encode(autoscalingpolicydescriptionlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minimumUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minimumUnits)
        minimumUnits = minimumUnitsDecoded
        let maximumUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumUnits)
        maximumUnits = maximumUnitsDecoded
        let autoScalingDisabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .autoScalingDisabled)
        autoScalingDisabled = autoScalingDisabledDecoded
        let autoScalingRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingRoleArn)
        autoScalingRoleArn = autoScalingRoleArnDecoded
        let scalingPoliciesContainer = try containerValues.decodeIfPresent([AutoScalingPolicyDescription?].self, forKey: .scalingPolicies)
        var scalingPoliciesDecoded0:[AutoScalingPolicyDescription]? = nil
        if let scalingPoliciesContainer = scalingPoliciesContainer {
            scalingPoliciesDecoded0 = [AutoScalingPolicyDescription]()
            for structure0 in scalingPoliciesContainer {
                if let structure0 = structure0 {
                    scalingPoliciesDecoded0?.append(structure0)
                }
            }
        }
        scalingPolicies = scalingPoliciesDecoded0
    }
}

extension AutoScalingSettingsDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AutoScalingSettingsDescription(autoScalingDisabled: \(String(describing: autoScalingDisabled)), autoScalingRoleArn: \(String(describing: autoScalingRoleArn)), maximumUnits: \(String(describing: maximumUnits)), minimumUnits: \(String(describing: minimumUnits)), scalingPolicies: \(String(describing: scalingPolicies)))"}
}

/// <p>Represents the auto scaling settings for a global table or global secondary
///          index.</p>
public struct AutoScalingSettingsDescription: Equatable {
    /// <p>Disabled auto scaling for this global table or global secondary index.</p>
    public let autoScalingDisabled: Bool?
    /// <p>Role ARN used for configuring the auto scaling policy.</p>
    public let autoScalingRoleArn: String?
    /// <p>The maximum capacity units that a global table or global secondary index should be scaled up to.</p>
    public let maximumUnits: Int?
    /// <p>The minimum capacity units that a global table or global secondary index should be scaled down to.</p>
    public let minimumUnits: Int?
    /// <p>Information about the scaling policies.</p>
    public let scalingPolicies: [AutoScalingPolicyDescription]?

    public init (
        autoScalingDisabled: Bool? = nil,
        autoScalingRoleArn: String? = nil,
        maximumUnits: Int? = nil,
        minimumUnits: Int? = nil,
        scalingPolicies: [AutoScalingPolicyDescription]? = nil
    )
    {
        self.autoScalingDisabled = autoScalingDisabled
        self.autoScalingRoleArn = autoScalingRoleArn
        self.maximumUnits = maximumUnits
        self.minimumUnits = minimumUnits
        self.scalingPolicies = scalingPolicies
    }
}

extension AutoScalingSettingsUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoScalingDisabled = "AutoScalingDisabled"
        case autoScalingRoleArn = "AutoScalingRoleArn"
        case maximumUnits = "MaximumUnits"
        case minimumUnits = "MinimumUnits"
        case scalingPolicyUpdate = "ScalingPolicyUpdate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingDisabled = autoScalingDisabled {
            try encodeContainer.encode(autoScalingDisabled, forKey: .autoScalingDisabled)
        }
        if let autoScalingRoleArn = autoScalingRoleArn {
            try encodeContainer.encode(autoScalingRoleArn, forKey: .autoScalingRoleArn)
        }
        if let maximumUnits = maximumUnits {
            try encodeContainer.encode(maximumUnits, forKey: .maximumUnits)
        }
        if let minimumUnits = minimumUnits {
            try encodeContainer.encode(minimumUnits, forKey: .minimumUnits)
        }
        if let scalingPolicyUpdate = scalingPolicyUpdate {
            try encodeContainer.encode(scalingPolicyUpdate, forKey: .scalingPolicyUpdate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minimumUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minimumUnits)
        minimumUnits = minimumUnitsDecoded
        let maximumUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumUnits)
        maximumUnits = maximumUnitsDecoded
        let autoScalingDisabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .autoScalingDisabled)
        autoScalingDisabled = autoScalingDisabledDecoded
        let autoScalingRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingRoleArn)
        autoScalingRoleArn = autoScalingRoleArnDecoded
        let scalingPolicyUpdateDecoded = try containerValues.decodeIfPresent(AutoScalingPolicyUpdate.self, forKey: .scalingPolicyUpdate)
        scalingPolicyUpdate = scalingPolicyUpdateDecoded
    }
}

extension AutoScalingSettingsUpdate: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AutoScalingSettingsUpdate(autoScalingDisabled: \(String(describing: autoScalingDisabled)), autoScalingRoleArn: \(String(describing: autoScalingRoleArn)), maximumUnits: \(String(describing: maximumUnits)), minimumUnits: \(String(describing: minimumUnits)), scalingPolicyUpdate: \(String(describing: scalingPolicyUpdate)))"}
}

/// <p>Represents the auto scaling settings to be modified for a global table or global
///          secondary index.</p>
public struct AutoScalingSettingsUpdate: Equatable {
    /// <p>Disabled auto scaling for this global table or global secondary index.</p>
    public let autoScalingDisabled: Bool?
    /// <p>Role ARN used for configuring auto scaling policy.</p>
    public let autoScalingRoleArn: String?
    /// <p>The maximum capacity units that a global table or global secondary index should be scaled up to.</p>
    public let maximumUnits: Int?
    /// <p>The minimum capacity units that a global table or global secondary index should be scaled down to.</p>
    public let minimumUnits: Int?
    /// <p>The scaling policy to apply for scaling target global table or global secondary index capacity units.</p>
    public let scalingPolicyUpdate: AutoScalingPolicyUpdate?

    public init (
        autoScalingDisabled: Bool? = nil,
        autoScalingRoleArn: String? = nil,
        maximumUnits: Int? = nil,
        minimumUnits: Int? = nil,
        scalingPolicyUpdate: AutoScalingPolicyUpdate? = nil
    )
    {
        self.autoScalingDisabled = autoScalingDisabled
        self.autoScalingRoleArn = autoScalingRoleArn
        self.maximumUnits = maximumUnits
        self.minimumUnits = minimumUnits
        self.scalingPolicyUpdate = scalingPolicyUpdate
    }
}

extension AutoScalingTargetTrackingScalingPolicyConfigurationDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case disableScaleIn = "DisableScaleIn"
        case scaleInCooldown = "ScaleInCooldown"
        case scaleOutCooldown = "ScaleOutCooldown"
        case targetValue = "TargetValue"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let disableScaleIn = disableScaleIn {
            try encodeContainer.encode(disableScaleIn, forKey: .disableScaleIn)
        }
        if let scaleInCooldown = scaleInCooldown {
            try encodeContainer.encode(scaleInCooldown, forKey: .scaleInCooldown)
        }
        if let scaleOutCooldown = scaleOutCooldown {
            try encodeContainer.encode(scaleOutCooldown, forKey: .scaleOutCooldown)
        }
        if let targetValue = targetValue {
            try encodeContainer.encode(targetValue, forKey: .targetValue)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let disableScaleInDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .disableScaleIn)
        disableScaleIn = disableScaleInDecoded
        let scaleInCooldownDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .scaleInCooldown)
        scaleInCooldown = scaleInCooldownDecoded
        let scaleOutCooldownDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .scaleOutCooldown)
        scaleOutCooldown = scaleOutCooldownDecoded
        let targetValueDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .targetValue)
        targetValue = targetValueDecoded
    }
}

extension AutoScalingTargetTrackingScalingPolicyConfigurationDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AutoScalingTargetTrackingScalingPolicyConfigurationDescription(disableScaleIn: \(String(describing: disableScaleIn)), scaleInCooldown: \(String(describing: scaleInCooldown)), scaleOutCooldown: \(String(describing: scaleOutCooldown)), targetValue: \(String(describing: targetValue)))"}
}

/// <p>Represents the properties of a target tracking scaling policy.</p>
public struct AutoScalingTargetTrackingScalingPolicyConfigurationDescription: Equatable {
    /// <p>Indicates whether scale in by the target tracking policy is disabled. If the value is true,
    ///       scale in is disabled and the target tracking policy won't remove capacity from the scalable resource.
    ///       Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource.
    ///       The default value is false.</p>
    public let disableScaleIn: Bool?
    /// <p>The amount of time, in seconds, after a scale in activity completes before another scale
    ///          in activity can start. The cooldown period is used to block subsequent scale in requests
    ///          until it has expired. You should scale in conservatively to protect your application's
    ///          availability. However, if another alarm triggers a scale out policy during the cooldown
    ///          period after a scale-in, application auto scaling scales out your scalable target
    ///          immediately. </p>
    public let scaleInCooldown: Int?
    /// <p>The amount of time, in seconds, after a scale out activity completes before another scale out
    ///       activity can start. While the cooldown period is in effect, the capacity that has been added
    ///       by the previous scale out event that initiated the cooldown is calculated as part of the
    ///       desired capacity for the next scale out. You should continuously (but not excessively)
    ///       scale out.</p>
    public let scaleOutCooldown: Int?
    /// <p>The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).</p>
    public let targetValue: Double?

    public init (
        disableScaleIn: Bool? = nil,
        scaleInCooldown: Int? = nil,
        scaleOutCooldown: Int? = nil,
        targetValue: Double? = nil
    )
    {
        self.disableScaleIn = disableScaleIn
        self.scaleInCooldown = scaleInCooldown
        self.scaleOutCooldown = scaleOutCooldown
        self.targetValue = targetValue
    }
}

extension AutoScalingTargetTrackingScalingPolicyConfigurationUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case disableScaleIn = "DisableScaleIn"
        case scaleInCooldown = "ScaleInCooldown"
        case scaleOutCooldown = "ScaleOutCooldown"
        case targetValue = "TargetValue"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let disableScaleIn = disableScaleIn {
            try encodeContainer.encode(disableScaleIn, forKey: .disableScaleIn)
        }
        if let scaleInCooldown = scaleInCooldown {
            try encodeContainer.encode(scaleInCooldown, forKey: .scaleInCooldown)
        }
        if let scaleOutCooldown = scaleOutCooldown {
            try encodeContainer.encode(scaleOutCooldown, forKey: .scaleOutCooldown)
        }
        if let targetValue = targetValue {
            try encodeContainer.encode(targetValue, forKey: .targetValue)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let disableScaleInDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .disableScaleIn)
        disableScaleIn = disableScaleInDecoded
        let scaleInCooldownDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .scaleInCooldown)
        scaleInCooldown = scaleInCooldownDecoded
        let scaleOutCooldownDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .scaleOutCooldown)
        scaleOutCooldown = scaleOutCooldownDecoded
        let targetValueDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .targetValue)
        targetValue = targetValueDecoded
    }
}

extension AutoScalingTargetTrackingScalingPolicyConfigurationUpdate: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AutoScalingTargetTrackingScalingPolicyConfigurationUpdate(disableScaleIn: \(String(describing: disableScaleIn)), scaleInCooldown: \(String(describing: scaleInCooldown)), scaleOutCooldown: \(String(describing: scaleOutCooldown)), targetValue: \(String(describing: targetValue)))"}
}

/// <p>Represents the settings of a target tracking scaling policy that will be modified.</p>
public struct AutoScalingTargetTrackingScalingPolicyConfigurationUpdate: Equatable {
    /// <p>Indicates whether scale in by the target tracking policy is disabled. If the value is true,
    ///       scale in is disabled and the target tracking policy won't remove capacity from the scalable resource.
    ///       Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource.
    ///       The default value is false.</p>
    public let disableScaleIn: Bool?
    /// <p>The amount of time, in seconds, after a scale in activity completes before another scale
    ///          in activity can start. The cooldown period is used to block subsequent scale in requests
    ///          until it has expired. You should scale in conservatively to protect your application's
    ///          availability. However, if another alarm triggers a scale out policy during the cooldown
    ///          period after a scale-in, application auto scaling scales out your scalable target
    ///          immediately. </p>
    public let scaleInCooldown: Int?
    /// <p>The amount of time, in seconds, after a scale out activity completes before another scale out
    ///       activity can start. While the cooldown period is in effect, the capacity that has been added
    ///       by the previous scale out event that initiated the cooldown is calculated as part of the
    ///       desired capacity for the next scale out. You should continuously (but not excessively)
    ///       scale out.</p>
    public let scaleOutCooldown: Int?
    /// <p>The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).</p>
    public let targetValue: Double?

    public init (
        disableScaleIn: Bool? = nil,
        scaleInCooldown: Int? = nil,
        scaleOutCooldown: Int? = nil,
        targetValue: Double? = nil
    )
    {
        self.disableScaleIn = disableScaleIn
        self.scaleInCooldown = scaleInCooldown
        self.scaleOutCooldown = scaleOutCooldown
        self.targetValue = targetValue
    }
}

extension BackupDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case backupDetails = "BackupDetails"
        case sourceTableDetails = "SourceTableDetails"
        case sourceTableFeatureDetails = "SourceTableFeatureDetails"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupDetails = backupDetails {
            try encodeContainer.encode(backupDetails, forKey: .backupDetails)
        }
        if let sourceTableDetails = sourceTableDetails {
            try encodeContainer.encode(sourceTableDetails, forKey: .sourceTableDetails)
        }
        if let sourceTableFeatureDetails = sourceTableFeatureDetails {
            try encodeContainer.encode(sourceTableFeatureDetails, forKey: .sourceTableFeatureDetails)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupDetailsDecoded = try containerValues.decodeIfPresent(BackupDetails.self, forKey: .backupDetails)
        backupDetails = backupDetailsDecoded
        let sourceTableDetailsDecoded = try containerValues.decodeIfPresent(SourceTableDetails.self, forKey: .sourceTableDetails)
        sourceTableDetails = sourceTableDetailsDecoded
        let sourceTableFeatureDetailsDecoded = try containerValues.decodeIfPresent(SourceTableFeatureDetails.self, forKey: .sourceTableFeatureDetails)
        sourceTableFeatureDetails = sourceTableFeatureDetailsDecoded
    }
}

extension BackupDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BackupDescription(backupDetails: \(String(describing: backupDetails)), sourceTableDetails: \(String(describing: sourceTableDetails)), sourceTableFeatureDetails: \(String(describing: sourceTableFeatureDetails)))"}
}

/// <p>Contains the description of the backup created for the table.</p>
public struct BackupDescription: Equatable {
    /// <p>Contains the details of the backup created for the table. </p>
    public let backupDetails: BackupDetails?
    /// <p>Contains the details of the table when the backup was created. </p>
    public let sourceTableDetails: SourceTableDetails?
    /// <p>Contains the details of the features enabled on the table when the backup was created. For example, LSIs, GSIs, streams, TTL.</p>
    public let sourceTableFeatureDetails: SourceTableFeatureDetails?

    public init (
        backupDetails: BackupDetails? = nil,
        sourceTableDetails: SourceTableDetails? = nil,
        sourceTableFeatureDetails: SourceTableFeatureDetails? = nil
    )
    {
        self.backupDetails = backupDetails
        self.sourceTableDetails = sourceTableDetails
        self.sourceTableFeatureDetails = sourceTableFeatureDetails
    }
}

extension BackupDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case backupArn = "BackupArn"
        case backupCreationDateTime = "BackupCreationDateTime"
        case backupExpiryDateTime = "BackupExpiryDateTime"
        case backupName = "BackupName"
        case backupSizeBytes = "BackupSizeBytes"
        case backupStatus = "BackupStatus"
        case backupType = "BackupType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupArn = backupArn {
            try encodeContainer.encode(backupArn, forKey: .backupArn)
        }
        if let backupCreationDateTime = backupCreationDateTime {
            try encodeContainer.encode(backupCreationDateTime.timeIntervalSince1970, forKey: .backupCreationDateTime)
        }
        if let backupExpiryDateTime = backupExpiryDateTime {
            try encodeContainer.encode(backupExpiryDateTime.timeIntervalSince1970, forKey: .backupExpiryDateTime)
        }
        if let backupName = backupName {
            try encodeContainer.encode(backupName, forKey: .backupName)
        }
        if let backupSizeBytes = backupSizeBytes {
            try encodeContainer.encode(backupSizeBytes, forKey: .backupSizeBytes)
        }
        if let backupStatus = backupStatus {
            try encodeContainer.encode(backupStatus.rawValue, forKey: .backupStatus)
        }
        if let backupType = backupType {
            try encodeContainer.encode(backupType.rawValue, forKey: .backupType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .backupArn)
        backupArn = backupArnDecoded
        let backupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .backupName)
        backupName = backupNameDecoded
        let backupSizeBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .backupSizeBytes)
        backupSizeBytes = backupSizeBytesDecoded
        let backupStatusDecoded = try containerValues.decodeIfPresent(BackupStatus.self, forKey: .backupStatus)
        backupStatus = backupStatusDecoded
        let backupTypeDecoded = try containerValues.decodeIfPresent(BackupType.self, forKey: .backupType)
        backupType = backupTypeDecoded
        let backupCreationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .backupCreationDateTime)
        backupCreationDateTime = backupCreationDateTimeDecoded
        let backupExpiryDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .backupExpiryDateTime)
        backupExpiryDateTime = backupExpiryDateTimeDecoded
    }
}

extension BackupDetails: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BackupDetails(backupArn: \(String(describing: backupArn)), backupCreationDateTime: \(String(describing: backupCreationDateTime)), backupExpiryDateTime: \(String(describing: backupExpiryDateTime)), backupName: \(String(describing: backupName)), backupSizeBytes: \(String(describing: backupSizeBytes)), backupStatus: \(String(describing: backupStatus)), backupType: \(String(describing: backupType)))"}
}

/// <p>Contains the details of the backup created for the table.</p>
public struct BackupDetails: Equatable {
    /// <p>ARN associated with the backup.</p>
    public let backupArn: String?
    /// <p>Time at which the backup was created. This is the request time of the backup. </p>
    public let backupCreationDateTime: Date?
    /// <p>Time at which the automatic on-demand backup created by DynamoDB will expire. This <code>SYSTEM</code>
    ///       on-demand backup expires automatically 35 days after its creation.</p>
    public let backupExpiryDateTime: Date?
    /// <p>Name of the requested backup.</p>
    public let backupName: String?
    /// <p>Size of the backup in bytes.</p>
    public let backupSizeBytes: Int?
    /// <p>Backup can be in one of the following states: CREATING, ACTIVE, DELETED. </p>
    public let backupStatus: BackupStatus?
    /// <p>BackupType:</p>
    ///           <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>USER</code> - You create and manage these using the on-demand backup feature.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>SYSTEM</code> - If you delete a table with point-in-time recovery enabled, a <code>SYSTEM</code> backup is automatically
    ///                 created and is retained for 35 days (at no additional cost). System backups allow you to restore the deleted
    /// 		table to the state it was in just before the point of deletion.
    /// 		</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>AWS_BACKUP</code> - On-demand backup created by you from AWS Backup service.</p>
    ///             </li>
    ///          </ul>
    public let backupType: BackupType?

    public init (
        backupArn: String? = nil,
        backupCreationDateTime: Date? = nil,
        backupExpiryDateTime: Date? = nil,
        backupName: String? = nil,
        backupSizeBytes: Int? = nil,
        backupStatus: BackupStatus? = nil,
        backupType: BackupType? = nil
    )
    {
        self.backupArn = backupArn
        self.backupCreationDateTime = backupCreationDateTime
        self.backupExpiryDateTime = backupExpiryDateTime
        self.backupName = backupName
        self.backupSizeBytes = backupSizeBytes
        self.backupStatus = backupStatus
        self.backupType = backupType
    }
}

extension BackupInUseException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BackupInUseException(message: \(String(describing: message)))"}
}

extension BackupInUseException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BackupInUseExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>There is another ongoing conflicting backup control plane operation on the table. The backup is either being created, deleted or restored to a table.</p>
public struct BackupInUseException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct BackupInUseExceptionBody: Equatable {
    public let message: String?
}

extension BackupInUseExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension BackupNotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BackupNotFoundException(message: \(String(describing: message)))"}
}

extension BackupNotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BackupNotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Backup not found for the given BackupARN. </p>
public struct BackupNotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct BackupNotFoundExceptionBody: Equatable {
    public let message: String?
}

extension BackupNotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum BackupStatus {
    case available
    case creating
    case deleted
    case sdkUnknown(String)
}

extension BackupStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BackupStatus] {
        return [
            .available,
            .creating,
            .deleted,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .available: return "AVAILABLE"
        case .creating: return "CREATING"
        case .deleted: return "DELETED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BackupStatus(rawValue: rawValue) ?? BackupStatus.sdkUnknown(rawValue)
    }
}

extension BackupSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case backupArn = "BackupArn"
        case backupCreationDateTime = "BackupCreationDateTime"
        case backupExpiryDateTime = "BackupExpiryDateTime"
        case backupName = "BackupName"
        case backupSizeBytes = "BackupSizeBytes"
        case backupStatus = "BackupStatus"
        case backupType = "BackupType"
        case tableArn = "TableArn"
        case tableId = "TableId"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupArn = backupArn {
            try encodeContainer.encode(backupArn, forKey: .backupArn)
        }
        if let backupCreationDateTime = backupCreationDateTime {
            try encodeContainer.encode(backupCreationDateTime.timeIntervalSince1970, forKey: .backupCreationDateTime)
        }
        if let backupExpiryDateTime = backupExpiryDateTime {
            try encodeContainer.encode(backupExpiryDateTime.timeIntervalSince1970, forKey: .backupExpiryDateTime)
        }
        if let backupName = backupName {
            try encodeContainer.encode(backupName, forKey: .backupName)
        }
        if let backupSizeBytes = backupSizeBytes {
            try encodeContainer.encode(backupSizeBytes, forKey: .backupSizeBytes)
        }
        if let backupStatus = backupStatus {
            try encodeContainer.encode(backupStatus.rawValue, forKey: .backupStatus)
        }
        if let backupType = backupType {
            try encodeContainer.encode(backupType.rawValue, forKey: .backupType)
        }
        if let tableArn = tableArn {
            try encodeContainer.encode(tableArn, forKey: .tableArn)
        }
        if let tableId = tableId {
            try encodeContainer.encode(tableId, forKey: .tableId)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let tableIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableId)
        tableId = tableIdDecoded
        let tableArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableArn)
        tableArn = tableArnDecoded
        let backupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .backupArn)
        backupArn = backupArnDecoded
        let backupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .backupName)
        backupName = backupNameDecoded
        let backupCreationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .backupCreationDateTime)
        backupCreationDateTime = backupCreationDateTimeDecoded
        let backupExpiryDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .backupExpiryDateTime)
        backupExpiryDateTime = backupExpiryDateTimeDecoded
        let backupStatusDecoded = try containerValues.decodeIfPresent(BackupStatus.self, forKey: .backupStatus)
        backupStatus = backupStatusDecoded
        let backupTypeDecoded = try containerValues.decodeIfPresent(BackupType.self, forKey: .backupType)
        backupType = backupTypeDecoded
        let backupSizeBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .backupSizeBytes)
        backupSizeBytes = backupSizeBytesDecoded
    }
}

extension BackupSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BackupSummary(backupArn: \(String(describing: backupArn)), backupCreationDateTime: \(String(describing: backupCreationDateTime)), backupExpiryDateTime: \(String(describing: backupExpiryDateTime)), backupName: \(String(describing: backupName)), backupSizeBytes: \(String(describing: backupSizeBytes)), backupStatus: \(String(describing: backupStatus)), backupType: \(String(describing: backupType)), tableArn: \(String(describing: tableArn)), tableId: \(String(describing: tableId)), tableName: \(String(describing: tableName)))"}
}

/// <p>Contains details for the backup.</p>
public struct BackupSummary: Equatable {
    /// <p>ARN associated with the backup.</p>
    public let backupArn: String?
    /// <p>Time at which the backup was created.</p>
    public let backupCreationDateTime: Date?
    /// <p>Time at which the automatic on-demand backup created by DynamoDB will expire. This
    ///             <code>SYSTEM</code> on-demand backup expires automatically 35 days after its
    ///          creation.</p>
    public let backupExpiryDateTime: Date?
    /// <p>Name of the specified backup.</p>
    public let backupName: String?
    /// <p>Size of the backup in bytes.</p>
    public let backupSizeBytes: Int?
    /// <p>Backup can be in one of the following states: CREATING, ACTIVE, DELETED.</p>
    public let backupStatus: BackupStatus?
    /// <p>BackupType:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>USER</code> - You create and manage these using the on-demand backup feature.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>SYSTEM</code> - If you delete a table with point-in-time recovery enabled, a <code>SYSTEM</code> backup is automatically
    ///                 created and is retained for 35 days (at no additional cost). System backups allow you to restore the deleted
    /// 		table to the state it was in just before the point of deletion.
    /// 		</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>AWS_BACKUP</code> - On-demand backup created by you from AWS Backup service.</p>
    ///             </li>
    ///          </ul>
    public let backupType: BackupType?
    /// <p>ARN associated with the table.</p>
    public let tableArn: String?
    /// <p>Unique identifier for the table.</p>
    public let tableId: String?
    /// <p>Name of the table.</p>
    public let tableName: String?

    public init (
        backupArn: String? = nil,
        backupCreationDateTime: Date? = nil,
        backupExpiryDateTime: Date? = nil,
        backupName: String? = nil,
        backupSizeBytes: Int? = nil,
        backupStatus: BackupStatus? = nil,
        backupType: BackupType? = nil,
        tableArn: String? = nil,
        tableId: String? = nil,
        tableName: String? = nil
    )
    {
        self.backupArn = backupArn
        self.backupCreationDateTime = backupCreationDateTime
        self.backupExpiryDateTime = backupExpiryDateTime
        self.backupName = backupName
        self.backupSizeBytes = backupSizeBytes
        self.backupStatus = backupStatus
        self.backupType = backupType
        self.tableArn = tableArn
        self.tableId = tableId
        self.tableName = tableName
    }
}

public enum BackupType {
    case awsBackup
    case system
    case user
    case sdkUnknown(String)
}

extension BackupType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BackupType] {
        return [
            .awsBackup,
            .system,
            .user,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .awsBackup: return "AWS_BACKUP"
        case .system: return "SYSTEM"
        case .user: return "USER"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BackupType(rawValue: rawValue) ?? BackupType.sdkUnknown(rawValue)
    }
}

public enum BackupTypeFilter {
    case all
    case awsBackup
    case system
    case user
    case sdkUnknown(String)
}

extension BackupTypeFilter : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BackupTypeFilter] {
        return [
            .all,
            .awsBackup,
            .system,
            .user,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .all: return "ALL"
        case .awsBackup: return "AWS_BACKUP"
        case .system: return "SYSTEM"
        case .user: return "USER"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BackupTypeFilter(rawValue: rawValue) ?? BackupTypeFilter.sdkUnknown(rawValue)
    }
}

public struct BatchExecuteStatementInputBodyMiddleware: Middleware {
    public let id: String = "BatchExecuteStatementInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchExecuteStatementInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchExecuteStatementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchExecuteStatementInput>
    public typealias MOutput = OperationOutput<BatchExecuteStatementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchExecuteStatementOutputError>
}

extension BatchExecuteStatementInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchExecuteStatementInput(statements: \(String(describing: statements)))"}
}

extension BatchExecuteStatementInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case statements = "Statements"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let statements = statements {
            var statementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statements)
            for partiqlbatchrequest0 in statements {
                try statementsContainer.encode(partiqlbatchrequest0)
            }
        }
    }
}

public struct BatchExecuteStatementInputHeadersMiddleware: Middleware {
    public let id: String = "BatchExecuteStatementInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchExecuteStatementInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchExecuteStatementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchExecuteStatementInput>
    public typealias MOutput = OperationOutput<BatchExecuteStatementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchExecuteStatementOutputError>
}

public struct BatchExecuteStatementInputQueryItemMiddleware: Middleware {
    public let id: String = "BatchExecuteStatementInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchExecuteStatementInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchExecuteStatementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchExecuteStatementInput>
    public typealias MOutput = OperationOutput<BatchExecuteStatementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchExecuteStatementOutputError>
}

public struct BatchExecuteStatementInput: Equatable {
    /// <p>
    /// The list of PartiQL statements representing the batch to run.
    /// </p>
    public let statements: [BatchStatementRequest]?

    public init (
        statements: [BatchStatementRequest]? = nil
    )
    {
        self.statements = statements
    }
}

struct BatchExecuteStatementInputBody: Equatable {
    public let statements: [BatchStatementRequest]?
}

extension BatchExecuteStatementInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case statements = "Statements"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statementsContainer = try containerValues.decodeIfPresent([BatchStatementRequest?].self, forKey: .statements)
        var statementsDecoded0:[BatchStatementRequest]? = nil
        if let statementsContainer = statementsContainer {
            statementsDecoded0 = [BatchStatementRequest]()
            for structure0 in statementsContainer {
                if let structure0 = structure0 {
                    statementsDecoded0?.append(structure0)
                }
            }
        }
        statements = statementsDecoded0
    }
}

extension BatchExecuteStatementOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchExecuteStatementOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchExecuteStatementOutputError: Equatable {
    case internalServerError(InternalServerError)
    case requestLimitExceeded(RequestLimitExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchExecuteStatementOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchExecuteStatementOutputResponse(responses: \(String(describing: responses)))"}
}

extension BatchExecuteStatementOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BatchExecuteStatementOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.responses = output.responses
        } else {
            self.responses = nil
        }
    }
}

public struct BatchExecuteStatementOutputResponse: Equatable {
    /// <p>
    /// The response to each PartiQL statement in the batch.
    /// </p>
    public let responses: [BatchStatementResponse]?

    public init (
        responses: [BatchStatementResponse]? = nil
    )
    {
        self.responses = responses
    }
}

struct BatchExecuteStatementOutputResponseBody: Equatable {
    public let responses: [BatchStatementResponse]?
}

extension BatchExecuteStatementOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case responses = "Responses"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let responsesContainer = try containerValues.decodeIfPresent([BatchStatementResponse?].self, forKey: .responses)
        var responsesDecoded0:[BatchStatementResponse]? = nil
        if let responsesContainer = responsesContainer {
            responsesDecoded0 = [BatchStatementResponse]()
            for structure0 in responsesContainer {
                if let structure0 = structure0 {
                    responsesDecoded0?.append(structure0)
                }
            }
        }
        responses = responsesDecoded0
    }
}

public struct BatchGetItemInputBodyMiddleware: Middleware {
    public let id: String = "BatchGetItemInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetItemInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetItemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetItemInput>
    public typealias MOutput = OperationOutput<BatchGetItemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetItemOutputError>
}

extension BatchGetItemInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchGetItemInput(requestItems: \(String(describing: requestItems)), returnConsumedCapacity: \(String(describing: returnConsumedCapacity)))"}
}

extension BatchGetItemInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case requestItems = "RequestItems"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let requestItems = requestItems {
            var requestItemsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .requestItems)
            for (dictKey0, batchgetrequestmap0) in requestItems {
                try requestItemsContainer.encode(batchgetrequestmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let returnConsumedCapacity = returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
    }
}

public struct BatchGetItemInputHeadersMiddleware: Middleware {
    public let id: String = "BatchGetItemInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetItemInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetItemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetItemInput>
    public typealias MOutput = OperationOutput<BatchGetItemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetItemOutputError>
}

public struct BatchGetItemInputQueryItemMiddleware: Middleware {
    public let id: String = "BatchGetItemInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetItemInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetItemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetItemInput>
    public typealias MOutput = OperationOutput<BatchGetItemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetItemOutputError>
}

/// <p>Represents the input of a <code>BatchGetItem</code> operation.</p>
public struct BatchGetItemInput: Equatable {
    /// <p>A map of one or more table names and, for each table, a map that describes one or more items to retrieve from that table. Each table name can be used only once per <code>BatchGetItem</code> request.</p>
    ///          <p>Each element in the map of items to retrieve consists of the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ConsistentRead</code> - If <code>true</code>, a strongly consistent read is used; if
    ///           <code>false</code> (the default), an eventually consistent read is used.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ExpressionAttributeNames</code> - One or more substitution tokens for attribute names in the <code>ProjectionExpression</code> parameter. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
    ///                   </li>
    ///                </ul>
    ///                <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>Percentile</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///                <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>{"#P":"Percentile"}</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///                <p>You could then use this substitution in an expression, as in this example:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>#P = :val</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///                <note>
    ///                   <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
    ///                </note>
    ///                <p>For more information about expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB
    ///                         Developer Guide</i>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Keys</code> - An array of primary key attribute values that define specific items in the
    ///           table. For each primary key, you must provide <i>all</i> of the key attributes. For
    ///           example, with a simple primary key, you only need to provide the partition key value. For a
    ///           composite key, you must provide <i>both</i> the partition key value and the sort key value.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>ProjectionExpression</code> - A string that identifies one or more
    ///                     attributes to retrieve from the table. These attributes can include scalars,
    ///                     sets, or elements of a JSON document. The attributes in the expression must be
    ///                     separated by commas.</p>
    ///                 <p>If no attribute names are specified, then all attributes are returned. If any
    ///                     of the requested attributes are not found, they do not appear in the
    ///                     result.</p>
    ///                <p>For more information, see
    ///                     <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>AttributesToGet</code> - This is a legacy parameter.  Use <code>ProjectionExpression</code> instead.  For more information, see
    ///                     <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.
    ///
    ///             </p>
    ///
    ///             </li>
    ///          </ul>
    public let requestItems: [String:KeysAndAttributes]?
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    ///                <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    ///             </li>
    ///          </ul>
    public let returnConsumedCapacity: ReturnConsumedCapacity?

    public init (
        requestItems: [String:KeysAndAttributes]? = nil,
        returnConsumedCapacity: ReturnConsumedCapacity? = nil
    )
    {
        self.requestItems = requestItems
        self.returnConsumedCapacity = returnConsumedCapacity
    }
}

struct BatchGetItemInputBody: Equatable {
    public let requestItems: [String:KeysAndAttributes]?
    public let returnConsumedCapacity: ReturnConsumedCapacity?
}

extension BatchGetItemInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case requestItems = "RequestItems"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestItemsContainer = try containerValues.decodeIfPresent([String: KeysAndAttributes?].self, forKey: .requestItems)
        var requestItemsDecoded0: [String:KeysAndAttributes]? = nil
        if let requestItemsContainer = requestItemsContainer {
            requestItemsDecoded0 = [String:KeysAndAttributes]()
            for (key0, keysandattributes0) in requestItemsContainer {
                if let keysandattributes0 = keysandattributes0 {
                    requestItemsDecoded0?[key0] = keysandattributes0
                }
            }
        }
        requestItems = requestItemsDecoded0
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
    }
}

extension BatchGetItemOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetItemOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchGetItemOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case requestLimitExceeded(RequestLimitExceeded)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetItemOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchGetItemOutputResponse(consumedCapacity: \(String(describing: consumedCapacity)), responses: \(String(describing: responses)), unprocessedKeys: \(String(describing: unprocessedKeys)))"}
}

extension BatchGetItemOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BatchGetItemOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.consumedCapacity = output.consumedCapacity
            self.responses = output.responses
            self.unprocessedKeys = output.unprocessedKeys
        } else {
            self.consumedCapacity = nil
            self.responses = nil
            self.unprocessedKeys = nil
        }
    }
}

/// <p>Represents the output of a <code>BatchGetItem</code> operation.</p>
public struct BatchGetItemOutputResponse: Equatable {
    /// <p>The read capacity units consumed by the entire <code>BatchGetItem</code> operation.</p>
    ///          <p>Each element consists of:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>TableName</code> - The table that consumed the provisioned throughput.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CapacityUnits</code> - The total number of capacity units consumed.</p>
    ///             </li>
    ///          </ul>
    public let consumedCapacity: [ConsumedCapacity]?
    /// <p>A map of table name to a list of items. Each object in <code>Responses</code> consists of a table
    ///       name, along with a map of attribute data consisting of the data type and attribute value.</p>
    public let responses: [String:[[String:AttributeValue]]]?
    /// <p>A map of tables and their respective keys that were not processed with the current response.
    ///       The <code>UnprocessedKeys</code> value is in the same form as <code>RequestItems</code>, so the value can
    ///       be provided directly to a subsequent <code>BatchGetItem</code> operation. For more information, see
    ///         <code>RequestItems</code> in the Request Parameters section.</p>
    ///          <p>Each element consists of:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Keys</code> - An array of primary key attribute values that define specific items in the
    ///           table.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                     <code>ProjectionExpression</code> - One or more attributes to be
    ///                     retrieved from the table or index. By default, all attributes are returned. If a
    ///                     requested attribute is not found, it does not appear in the result.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ConsistentRead</code> - The consistency of a read operation. If set to <code>true</code>,
    ///           then a strongly consistent read is used; otherwise, an eventually consistent read is
    ///           used.</p>
    ///             </li>
    ///          </ul>
    ///          <p>If there are no unprocessed keys remaining, the response contains an empty
    ///         <code>UnprocessedKeys</code> map.</p>
    public let unprocessedKeys: [String:KeysAndAttributes]?

    public init (
        consumedCapacity: [ConsumedCapacity]? = nil,
        responses: [String:[[String:AttributeValue]]]? = nil,
        unprocessedKeys: [String:KeysAndAttributes]? = nil
    )
    {
        self.consumedCapacity = consumedCapacity
        self.responses = responses
        self.unprocessedKeys = unprocessedKeys
    }
}

struct BatchGetItemOutputResponseBody: Equatable {
    public let responses: [String:[[String:AttributeValue]]]?
    public let unprocessedKeys: [String:KeysAndAttributes]?
    public let consumedCapacity: [ConsumedCapacity]?
}

extension BatchGetItemOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case consumedCapacity = "ConsumedCapacity"
        case responses = "Responses"
        case unprocessedKeys = "UnprocessedKeys"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let responsesContainer = try containerValues.decodeIfPresent([String: [[String: AttributeValue?]?]?].self, forKey: .responses)
        var responsesDecoded0: [String:[[String:AttributeValue]]]? = nil
        if let responsesContainer = responsesContainer {
            responsesDecoded0 = [String:[[String:AttributeValue]]]()
            for (key0, itemlist0) in responsesContainer {
                var itemlist0Decoded0: [[String: AttributeValue]]? = nil
                if let itemlist0 = itemlist0 {
                    itemlist0Decoded0 = [[String: AttributeValue]]()
                    for map1 in itemlist0 {
                        var itemlist0Decoded1: [String: AttributeValue]? = nil
                        if let map1 = map1 {
                            itemlist0Decoded1 = [String: AttributeValue]()
                            for (key2, attributevalue2) in map1 {
                                if let attributevalue2 = attributevalue2 {
                                    itemlist0Decoded1?[key2] = attributevalue2
                                }
                            }
                        }
                        if let itemlist0Decoded1 = itemlist0Decoded1 {
                            itemlist0Decoded0?.append(itemlist0Decoded1)
                        }
                    }
                }
                responsesDecoded0?[key0] = itemlist0Decoded0
            }
        }
        responses = responsesDecoded0
        let unprocessedKeysContainer = try containerValues.decodeIfPresent([String: KeysAndAttributes?].self, forKey: .unprocessedKeys)
        var unprocessedKeysDecoded0: [String:KeysAndAttributes]? = nil
        if let unprocessedKeysContainer = unprocessedKeysContainer {
            unprocessedKeysDecoded0 = [String:KeysAndAttributes]()
            for (key0, keysandattributes0) in unprocessedKeysContainer {
                if let keysandattributes0 = keysandattributes0 {
                    unprocessedKeysDecoded0?[key0] = keysandattributes0
                }
            }
        }
        unprocessedKeys = unprocessedKeysDecoded0
        let consumedCapacityContainer = try containerValues.decodeIfPresent([ConsumedCapacity?].self, forKey: .consumedCapacity)
        var consumedCapacityDecoded0:[ConsumedCapacity]? = nil
        if let consumedCapacityContainer = consumedCapacityContainer {
            consumedCapacityDecoded0 = [ConsumedCapacity]()
            for structure0 in consumedCapacityContainer {
                if let structure0 = structure0 {
                    consumedCapacityDecoded0?.append(structure0)
                }
            }
        }
        consumedCapacity = consumedCapacityDecoded0
    }
}

extension BatchStatementError: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(BatchStatementErrorCodeEnum.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension BatchStatementError: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchStatementError(code: \(String(describing: code)), message: \(String(describing: message)))"}
}

/// <p>
/// An error associated with a statement in a PartiQL batch that was run.
/// </p>
public struct BatchStatementError: Equatable {
    /// <p>
    /// The error code associated with the failed PartiQL batch statement.
    /// </p>
    public let code: BatchStatementErrorCodeEnum?
    /// <p>
    /// The error message associated with the PartiQL batch resposne.
    /// </p>
    public let message: String?

    public init (
        code: BatchStatementErrorCodeEnum? = nil,
        message: String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

public enum BatchStatementErrorCodeEnum {
    case accessdenied
    case conditionalcheckfailed
    case duplicateitem
    case internalservererror
    case itemcollectionsizelimitexceeded
    case provisionedthroughputexceeded
    case requestlimitexceeded
    case resourcenotfound
    case throttlingerror
    case transactionconflict
    case validationerror
    case sdkUnknown(String)
}

extension BatchStatementErrorCodeEnum : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BatchStatementErrorCodeEnum] {
        return [
            .accessdenied,
            .conditionalcheckfailed,
            .duplicateitem,
            .internalservererror,
            .itemcollectionsizelimitexceeded,
            .provisionedthroughputexceeded,
            .requestlimitexceeded,
            .resourcenotfound,
            .throttlingerror,
            .transactionconflict,
            .validationerror,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accessdenied: return "AccessDenied"
        case .conditionalcheckfailed: return "ConditionalCheckFailed"
        case .duplicateitem: return "DuplicateItem"
        case .internalservererror: return "InternalServerError"
        case .itemcollectionsizelimitexceeded: return "ItemCollectionSizeLimitExceeded"
        case .provisionedthroughputexceeded: return "ProvisionedThroughputExceeded"
        case .requestlimitexceeded: return "RequestLimitExceeded"
        case .resourcenotfound: return "ResourceNotFound"
        case .throttlingerror: return "ThrottlingError"
        case .transactionconflict: return "TransactionConflict"
        case .validationerror: return "ValidationError"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BatchStatementErrorCodeEnum(rawValue: rawValue) ?? BatchStatementErrorCodeEnum.sdkUnknown(rawValue)
    }
}

extension BatchStatementRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case consistentRead = "ConsistentRead"
        case parameters = "Parameters"
        case statement = "Statement"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let consistentRead = consistentRead {
            try encodeContainer.encode(consistentRead, forKey: .consistentRead)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parameters)
            for preparedstatementparameters0 in parameters {
                try parametersContainer.encode(preparedstatementparameters0)
            }
        }
        if let statement = statement {
            try encodeContainer.encode(statement, forKey: .statement)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statementDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statement)
        statement = statementDecoded
        let parametersContainer = try containerValues.decodeIfPresent([AttributeValue?].self, forKey: .parameters)
        var parametersDecoded0:[AttributeValue]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [AttributeValue]()
            for union0 in parametersContainer {
                if let union0 = union0 {
                    parametersDecoded0?.append(union0)
                }
            }
        }
        parameters = parametersDecoded0
        let consistentReadDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .consistentRead)
        consistentRead = consistentReadDecoded
    }
}

extension BatchStatementRequest: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchStatementRequest(consistentRead: \(String(describing: consistentRead)), parameters: \(String(describing: parameters)), statement: \(String(describing: statement)))"}
}

/// <p>
/// A PartiQL batch statement request.
/// </p>
public struct BatchStatementRequest: Equatable {
    /// <p>
    /// The read consistency of the PartiQL batch request.
    /// </p>
    public let consistentRead: Bool?
    /// <p>
    /// The parameters associated with a PartiQL statement in the batch request.
    /// </p>
    public let parameters: [AttributeValue]?
    /// <p>
    /// A valid PartiQL statement.
    /// </p>
    public let statement: String?

    public init (
        consistentRead: Bool? = nil,
        parameters: [AttributeValue]? = nil,
        statement: String? = nil
    )
    {
        self.consistentRead = consistentRead
        self.parameters = parameters
        self.statement = statement
    }
}

extension BatchStatementResponse: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case error = "Error"
        case item = "Item"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let error = error {
            try encodeContainer.encode(error, forKey: .error)
        }
        if let item = item {
            var itemContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .item)
            for (dictKey0, attributemap0) in item {
                try itemContainer.encode(attributemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorDecoded = try containerValues.decodeIfPresent(BatchStatementError.self, forKey: .error)
        error = errorDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let itemContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .item)
        var itemDecoded0: [String:AttributeValue]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in itemContainer {
                if let attributevalue0 = attributevalue0 {
                    itemDecoded0?[key0] = attributevalue0
                }
            }
        }
        item = itemDecoded0
    }
}

extension BatchStatementResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchStatementResponse(error: \(String(describing: error)), item: \(String(describing: item)), tableName: \(String(describing: tableName)))"}
}

/// <p>
/// A PartiQL batch statement response..
/// </p>
public struct BatchStatementResponse: Equatable {
    /// <p>
    /// The error associated with a failed PartiQL batch statement.
    /// </p>
    public let error: BatchStatementError?
    /// <p>
    /// A DynamoDB item associated with a BatchStatementResponse
    /// </p>
    public let item: [String:AttributeValue]?
    /// <p>
    /// The table name associated with a failed PartiQL batch statement.
    /// </p>
    public let tableName: String?

    public init (
        error: BatchStatementError? = nil,
        item: [String:AttributeValue]? = nil,
        tableName: String? = nil
    )
    {
        self.error = error
        self.item = item
        self.tableName = tableName
    }
}

public struct BatchWriteItemInputBodyMiddleware: Middleware {
    public let id: String = "BatchWriteItemInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchWriteItemInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchWriteItemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchWriteItemInput>
    public typealias MOutput = OperationOutput<BatchWriteItemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchWriteItemOutputError>
}

extension BatchWriteItemInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchWriteItemInput(requestItems: \(String(describing: requestItems)), returnConsumedCapacity: \(String(describing: returnConsumedCapacity)), returnItemCollectionMetrics: \(String(describing: returnItemCollectionMetrics)))"}
}

extension BatchWriteItemInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case requestItems = "RequestItems"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let requestItems = requestItems {
            var requestItemsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .requestItems)
            for (dictKey0, batchwriteitemrequestmap0) in requestItems {
                try requestItemsContainer.encode(batchwriteitemrequestmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let returnConsumedCapacity = returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let returnItemCollectionMetrics = returnItemCollectionMetrics {
            try encodeContainer.encode(returnItemCollectionMetrics.rawValue, forKey: .returnItemCollectionMetrics)
        }
    }
}

public struct BatchWriteItemInputHeadersMiddleware: Middleware {
    public let id: String = "BatchWriteItemInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchWriteItemInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchWriteItemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchWriteItemInput>
    public typealias MOutput = OperationOutput<BatchWriteItemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchWriteItemOutputError>
}

public struct BatchWriteItemInputQueryItemMiddleware: Middleware {
    public let id: String = "BatchWriteItemInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchWriteItemInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchWriteItemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchWriteItemInput>
    public typealias MOutput = OperationOutput<BatchWriteItemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchWriteItemOutputError>
}

/// <p>Represents the input of a <code>BatchWriteItem</code> operation.</p>
public struct BatchWriteItemInput: Equatable {
    /// <p>A map of one or more table names and, for each table, a list of operations to be performed
    ///         (<code>DeleteRequest</code> or <code>PutRequest</code>). Each element in the map consists of the
    ///       following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>DeleteRequest</code> - Perform a <code>DeleteItem</code> operation on the specified item. The
    ///           item to be deleted is identified by a <code>Key</code> subelement:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>Key</code> - A map of primary key attribute values that uniquely identify the item.
    ///                      Each entry in this map consists of an attribute name and an attribute value. For each
    ///                      primary key, you must provide <i>all</i> of the key attributes. For example, with a
    ///                      simple primary key, you only need to provide a value for the partition key. For a
    ///                      composite primary key, you must provide values for <i>both</i> the partition key and the sort key.</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>PutRequest</code> - Perform a <code>PutItem</code> operation on the specified item. The item to
    ///           be put is identified by an <code>Item</code> subelement:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                             <code>Item</code> - A map of attributes and their values. Each entry in
    ///                             this map consists of an attribute name and an attribute value. Attribute
    ///                             values must not be null; string and binary type attributes must have
    ///                             lengths greater than zero; and set type attributes must not be empty.
    ///                             Requests that contain empty values are rejected with a
    ///                                 <code>ValidationException</code> exception.</p>
    ///                      <p>If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    public let requestItems: [String:[WriteRequest]]?
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    ///                <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    ///             </li>
    ///          </ul>
    public let returnConsumedCapacity: ReturnConsumedCapacity?
    /// <p>Determines whether item collection metrics are returned.  If set to <code>SIZE</code>, the response includes statistics about item collections, if any, that were modified during
    ///       the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned.</p>
    public let returnItemCollectionMetrics: ReturnItemCollectionMetrics?

    public init (
        requestItems: [String:[WriteRequest]]? = nil,
        returnConsumedCapacity: ReturnConsumedCapacity? = nil,
        returnItemCollectionMetrics: ReturnItemCollectionMetrics? = nil
    )
    {
        self.requestItems = requestItems
        self.returnConsumedCapacity = returnConsumedCapacity
        self.returnItemCollectionMetrics = returnItemCollectionMetrics
    }
}

struct BatchWriteItemInputBody: Equatable {
    public let requestItems: [String:[WriteRequest]]?
    public let returnConsumedCapacity: ReturnConsumedCapacity?
    public let returnItemCollectionMetrics: ReturnItemCollectionMetrics?
}

extension BatchWriteItemInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case requestItems = "RequestItems"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestItemsContainer = try containerValues.decodeIfPresent([String: [WriteRequest?]?].self, forKey: .requestItems)
        var requestItemsDecoded0: [String:[WriteRequest]]? = nil
        if let requestItemsContainer = requestItemsContainer {
            requestItemsDecoded0 = [String:[WriteRequest]]()
            for (key0, writerequests0) in requestItemsContainer {
                var writerequests0Decoded0: [WriteRequest]? = nil
                if let writerequests0 = writerequests0 {
                    writerequests0Decoded0 = [WriteRequest]()
                    for structure1 in writerequests0 {
                        if let structure1 = structure1 {
                            writerequests0Decoded0?.append(structure1)
                        }
                    }
                }
                requestItemsDecoded0?[key0] = writerequests0Decoded0
            }
        }
        requestItems = requestItemsDecoded0
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
        let returnItemCollectionMetricsDecoded = try containerValues.decodeIfPresent(ReturnItemCollectionMetrics.self, forKey: .returnItemCollectionMetrics)
        returnItemCollectionMetrics = returnItemCollectionMetricsDecoded
    }
}

extension BatchWriteItemOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchWriteItemOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ItemCollectionSizeLimitExceededException" : self = .itemCollectionSizeLimitExceededException(try ItemCollectionSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchWriteItemOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case itemCollectionSizeLimitExceededException(ItemCollectionSizeLimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case requestLimitExceeded(RequestLimitExceeded)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchWriteItemOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchWriteItemOutputResponse(consumedCapacity: \(String(describing: consumedCapacity)), itemCollectionMetrics: \(String(describing: itemCollectionMetrics)), unprocessedItems: \(String(describing: unprocessedItems)))"}
}

extension BatchWriteItemOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BatchWriteItemOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.consumedCapacity = output.consumedCapacity
            self.itemCollectionMetrics = output.itemCollectionMetrics
            self.unprocessedItems = output.unprocessedItems
        } else {
            self.consumedCapacity = nil
            self.itemCollectionMetrics = nil
            self.unprocessedItems = nil
        }
    }
}

/// <p>Represents the output of a <code>BatchWriteItem</code> operation.</p>
public struct BatchWriteItemOutputResponse: Equatable {
    /// <p>The capacity units consumed by the entire <code>BatchWriteItem</code> operation.</p>
    ///          <p>Each element consists of:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>TableName</code> - The table that consumed the provisioned throughput.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CapacityUnits</code> - The total number of capacity units consumed.</p>
    ///             </li>
    ///          </ul>
    public let consumedCapacity: [ConsumedCapacity]?
    /// <p>A list of tables that were processed by <code>BatchWriteItem</code> and, for each table,
    ///       information about any item collections that were affected by individual <code>DeleteItem</code> or
    ///         <code>PutItem</code> operations.</p>
    ///          <p>Each entry consists of the following subelements:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ItemCollectionKey</code> - The partition key value of the item collection. This is the same as
    ///           the partition key value of the item.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SizeEstimateRangeGB</code> - An estimate of item collection size, expressed in GB. This is
    ///           a two-element array containing a lower bound and an upper bound for the estimate. The
    ///           estimate includes the size of all the items in the table, plus the size of all attributes
    ///           projected into all of the local secondary indexes on the table. Use this estimate to measure whether a
    ///           local secondary index is approaching its size limit.</p>
    ///                <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p>
    ///             </li>
    ///          </ul>
    public let itemCollectionMetrics: [String:[ItemCollectionMetrics]]?
    /// <p>A map of tables and requests against those tables that were not processed. The
    ///         <code>UnprocessedItems</code> value is in the same form as <code>RequestItems</code>, so you can provide
    ///       this value directly to a subsequent <code>BatchGetItem</code> operation. For more information, see
    ///         <code>RequestItems</code> in the Request Parameters section.</p>
    ///          <p>Each <code>UnprocessedItems</code> entry consists of a table name and, for that table, a list of
    ///       operations to perform (<code>DeleteRequest</code> or <code>PutRequest</code>).</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>DeleteRequest</code> - Perform a <code>DeleteItem</code> operation on the specified item. The
    ///           item to be deleted is identified by a <code>Key</code> subelement:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>Key</code> - A map of primary key attribute values that uniquely identify the item.
    ///               Each entry in this map consists of an attribute name and an attribute value.</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>PutRequest</code> - Perform a <code>PutItem</code> operation on the specified item. The item to
    ///           be put is identified by an <code>Item</code> subelement:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>Item</code> - A map of attributes and their values. Each entry in this map consists
    ///               of an attribute name and an attribute value. Attribute values must not be null; string
    ///               and binary type attributes must have lengths greater than zero; and set type
    ///               attributes must not be empty. Requests that contain empty values will be rejected with
    ///               a <code>ValidationException</code> exception.</p>
    ///                      <p>If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    ///          <p>If there are no unprocessed items remaining, the response contains an empty
    ///         <code>UnprocessedItems</code> map.</p>
    public let unprocessedItems: [String:[WriteRequest]]?

    public init (
        consumedCapacity: [ConsumedCapacity]? = nil,
        itemCollectionMetrics: [String:[ItemCollectionMetrics]]? = nil,
        unprocessedItems: [String:[WriteRequest]]? = nil
    )
    {
        self.consumedCapacity = consumedCapacity
        self.itemCollectionMetrics = itemCollectionMetrics
        self.unprocessedItems = unprocessedItems
    }
}

struct BatchWriteItemOutputResponseBody: Equatable {
    public let unprocessedItems: [String:[WriteRequest]]?
    public let itemCollectionMetrics: [String:[ItemCollectionMetrics]]?
    public let consumedCapacity: [ConsumedCapacity]?
}

extension BatchWriteItemOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case consumedCapacity = "ConsumedCapacity"
        case itemCollectionMetrics = "ItemCollectionMetrics"
        case unprocessedItems = "UnprocessedItems"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let unprocessedItemsContainer = try containerValues.decodeIfPresent([String: [WriteRequest?]?].self, forKey: .unprocessedItems)
        var unprocessedItemsDecoded0: [String:[WriteRequest]]? = nil
        if let unprocessedItemsContainer = unprocessedItemsContainer {
            unprocessedItemsDecoded0 = [String:[WriteRequest]]()
            for (key0, writerequests0) in unprocessedItemsContainer {
                var writerequests0Decoded0: [WriteRequest]? = nil
                if let writerequests0 = writerequests0 {
                    writerequests0Decoded0 = [WriteRequest]()
                    for structure1 in writerequests0 {
                        if let structure1 = structure1 {
                            writerequests0Decoded0?.append(structure1)
                        }
                    }
                }
                unprocessedItemsDecoded0?[key0] = writerequests0Decoded0
            }
        }
        unprocessedItems = unprocessedItemsDecoded0
        let itemCollectionMetricsContainer = try containerValues.decodeIfPresent([String: [ItemCollectionMetrics?]?].self, forKey: .itemCollectionMetrics)
        var itemCollectionMetricsDecoded0: [String:[ItemCollectionMetrics]]? = nil
        if let itemCollectionMetricsContainer = itemCollectionMetricsContainer {
            itemCollectionMetricsDecoded0 = [String:[ItemCollectionMetrics]]()
            for (key0, itemcollectionmetricsmultiple0) in itemCollectionMetricsContainer {
                var itemcollectionmetricsmultiple0Decoded0: [ItemCollectionMetrics]? = nil
                if let itemcollectionmetricsmultiple0 = itemcollectionmetricsmultiple0 {
                    itemcollectionmetricsmultiple0Decoded0 = [ItemCollectionMetrics]()
                    for structure1 in itemcollectionmetricsmultiple0 {
                        if let structure1 = structure1 {
                            itemcollectionmetricsmultiple0Decoded0?.append(structure1)
                        }
                    }
                }
                itemCollectionMetricsDecoded0?[key0] = itemcollectionmetricsmultiple0Decoded0
            }
        }
        itemCollectionMetrics = itemCollectionMetricsDecoded0
        let consumedCapacityContainer = try containerValues.decodeIfPresent([ConsumedCapacity?].self, forKey: .consumedCapacity)
        var consumedCapacityDecoded0:[ConsumedCapacity]? = nil
        if let consumedCapacityContainer = consumedCapacityContainer {
            consumedCapacityDecoded0 = [ConsumedCapacity]()
            for structure0 in consumedCapacityContainer {
                if let structure0 = structure0 {
                    consumedCapacityDecoded0?.append(structure0)
                }
            }
        }
        consumedCapacity = consumedCapacityDecoded0
    }
}

public enum BillingMode {
    case payPerRequest
    case provisioned
    case sdkUnknown(String)
}

extension BillingMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BillingMode] {
        return [
            .payPerRequest,
            .provisioned,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .payPerRequest: return "PAY_PER_REQUEST"
        case .provisioned: return "PROVISIONED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BillingMode(rawValue: rawValue) ?? BillingMode.sdkUnknown(rawValue)
    }
}

extension BillingModeSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case billingMode = "BillingMode"
        case lastUpdateToPayPerRequestDateTime = "LastUpdateToPayPerRequestDateTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let billingMode = billingMode {
            try encodeContainer.encode(billingMode.rawValue, forKey: .billingMode)
        }
        if let lastUpdateToPayPerRequestDateTime = lastUpdateToPayPerRequestDateTime {
            try encodeContainer.encode(lastUpdateToPayPerRequestDateTime.timeIntervalSince1970, forKey: .lastUpdateToPayPerRequestDateTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let billingModeDecoded = try containerValues.decodeIfPresent(BillingMode.self, forKey: .billingMode)
        billingMode = billingModeDecoded
        let lastUpdateToPayPerRequestDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdateToPayPerRequestDateTime)
        lastUpdateToPayPerRequestDateTime = lastUpdateToPayPerRequestDateTimeDecoded
    }
}

extension BillingModeSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BillingModeSummary(billingMode: \(String(describing: billingMode)), lastUpdateToPayPerRequestDateTime: \(String(describing: lastUpdateToPayPerRequestDateTime)))"}
}

/// <p>Contains the details for the read/write capacity mode.</p>
public struct BillingModeSummary: Equatable {
    /// <p>Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>PROVISIONED</code> - Sets the read/write capacity mode to <code>PROVISIONED</code>. We recommend using <code>PROVISIONED</code> for predictable workloads.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>PAY_PER_REQUEST</code> - Sets the read/write capacity mode to <code>PAY_PER_REQUEST</code>. We recommend using <code>PAY_PER_REQUEST</code> for unpredictable workloads.
    ///             </p>
    ///             </li>
    ///          </ul>
    public let billingMode: BillingMode?
    /// <p>Represents the time when <code>PAY_PER_REQUEST</code> was last set as the read/write capacity mode.</p>
    public let lastUpdateToPayPerRequestDateTime: Date?

    public init (
        billingMode: BillingMode? = nil,
        lastUpdateToPayPerRequestDateTime: Date? = nil
    )
    {
        self.billingMode = billingMode
        self.lastUpdateToPayPerRequestDateTime = lastUpdateToPayPerRequestDateTime
    }
}

extension CancellationReason: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case code = "Code"
        case item = "Item"
        case message = "Message"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let item = item {
            var itemContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .item)
            for (dictKey0, attributemap0) in item {
                try itemContainer.encode(attributemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .item)
        var itemDecoded0: [String:AttributeValue]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in itemContainer {
                if let attributevalue0 = attributevalue0 {
                    itemDecoded0?[key0] = attributevalue0
                }
            }
        }
        item = itemDecoded0
        let codeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CancellationReason: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CancellationReason(code: \(String(describing: code)), item: \(String(describing: item)), message: \(String(describing: message)))"}
}

/// <p>An ordered list of errors for each item in the request which caused the transaction
///      to get cancelled. The values of the list are ordered according to the ordering of the
///      <code>TransactWriteItems</code> request parameter. If no error
///      occurred for the associated item an error with a Null code and Null message will be present.
///      </p>
public struct CancellationReason: Equatable {
    /// <p>Status code for the result of the cancelled transaction.</p>
    public let code: String?
    /// <p>Item in the request which caused the transaction to get cancelled.</p>
    public let item: [String:AttributeValue]?
    /// <p>Cancellation reason message description.</p>
    public let message: String?

    public init (
        code: String? = nil,
        item: [String:AttributeValue]? = nil,
        message: String? = nil
    )
    {
        self.code = code
        self.item = item
        self.message = message
    }
}

extension Capacity: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case capacityUnits = "CapacityUnits"
        case readCapacityUnits = "ReadCapacityUnits"
        case writeCapacityUnits = "WriteCapacityUnits"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityUnits = capacityUnits {
            try encodeContainer.encode(capacityUnits, forKey: .capacityUnits)
        }
        if let readCapacityUnits = readCapacityUnits {
            try encodeContainer.encode(readCapacityUnits, forKey: .readCapacityUnits)
        }
        if let writeCapacityUnits = writeCapacityUnits {
            try encodeContainer.encode(writeCapacityUnits, forKey: .writeCapacityUnits)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let readCapacityUnitsDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .readCapacityUnits)
        readCapacityUnits = readCapacityUnitsDecoded
        let writeCapacityUnitsDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .writeCapacityUnits)
        writeCapacityUnits = writeCapacityUnitsDecoded
        let capacityUnitsDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .capacityUnits)
        capacityUnits = capacityUnitsDecoded
    }
}

extension Capacity: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Capacity(capacityUnits: \(String(describing: capacityUnits)), readCapacityUnits: \(String(describing: readCapacityUnits)), writeCapacityUnits: \(String(describing: writeCapacityUnits)))"}
}

/// <p>Represents the amount of provisioned throughput capacity consumed on a table or an index.</p>
public struct Capacity: Equatable {
    /// <p>The total number of capacity units consumed on a table or an index.</p>
    public let capacityUnits: Double?
    /// <p>The total number of read capacity units consumed on a table or an index.</p>
    public let readCapacityUnits: Double?
    /// <p>The total number of write capacity units consumed on a table or an index.</p>
    public let writeCapacityUnits: Double?

    public init (
        capacityUnits: Double? = nil,
        readCapacityUnits: Double? = nil,
        writeCapacityUnits: Double? = nil
    )
    {
        self.capacityUnits = capacityUnits
        self.readCapacityUnits = readCapacityUnits
        self.writeCapacityUnits = writeCapacityUnits
    }
}

public enum ComparisonOperator {
    case beginsWith
    case between
    case contains
    case eq
    case ge
    case gt
    case `in`
    case le
    case lt
    case ne
    case notContains
    case notNull
    case null
    case sdkUnknown(String)
}

extension ComparisonOperator : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ComparisonOperator] {
        return [
            .beginsWith,
            .between,
            .contains,
            .eq,
            .ge,
            .gt,
            .in,
            .le,
            .lt,
            .ne,
            .notContains,
            .notNull,
            .null,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .beginsWith: return "BEGINS_WITH"
        case .between: return "BETWEEN"
        case .contains: return "CONTAINS"
        case .eq: return "EQ"
        case .ge: return "GE"
        case .gt: return "GT"
        case .in: return "IN"
        case .le: return "LE"
        case .lt: return "LT"
        case .ne: return "NE"
        case .notContains: return "NOT_CONTAINS"
        case .notNull: return "NOT_NULL"
        case .null: return "NULL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ComparisonOperator(rawValue: rawValue) ?? ComparisonOperator.sdkUnknown(rawValue)
    }
}

extension Condition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributeValueList = "AttributeValueList"
        case comparisonOperator = "ComparisonOperator"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeValueList = attributeValueList {
            var attributeValueListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributeValueList)
            for attributevaluelist0 in attributeValueList {
                try attributeValueListContainer.encode(attributevaluelist0)
            }
        }
        if let comparisonOperator = comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeValueListContainer = try containerValues.decodeIfPresent([AttributeValue?].self, forKey: .attributeValueList)
        var attributeValueListDecoded0:[AttributeValue]? = nil
        if let attributeValueListContainer = attributeValueListContainer {
            attributeValueListDecoded0 = [AttributeValue]()
            for union0 in attributeValueListContainer {
                if let union0 = union0 {
                    attributeValueListDecoded0?.append(union0)
                }
            }
        }
        attributeValueList = attributeValueListDecoded0
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(ComparisonOperator.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
    }
}

extension Condition: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Condition(attributeValueList: \(String(describing: attributeValueList)), comparisonOperator: \(String(describing: comparisonOperator)))"}
}

/// <p>Represents the selection criteria for a <code>Query</code> or <code>Scan</code> operation:</p>
///          <ul>
///             <li>
///                <p>For a <code>Query</code> operation, <code>Condition</code> is used for specifying the
///             <code>KeyConditions</code> to use when querying a table or an index. For <code>KeyConditions</code>,
///           only the following comparison operators are supported:</p>
///                <p>
///                   <code>EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN</code>
///                </p>
///                <p>
///                   <code>Condition</code> is also used in a <code>QueryFilter</code>, which evaluates the query results
///           and returns only the desired values.</p>
///             </li>
///             <li>
///                <p>For a <code>Scan</code> operation, <code>Condition</code> is used in a <code>ScanFilter</code>, which
///           evaluates the scan results and returns only the desired values.</p>
///             </li>
///          </ul>
public struct Condition: Equatable {
    /// <p>One or more values to evaluate against the supplied attribute. The number of values in the
    ///       list depends on the <code>ComparisonOperator</code> being used.</p>
    ///          <p>For type Number, value comparisons are numeric.</p>
    ///          <p>String value comparisons for greater than, equals, or less than are based on ASCII character
    ///       code values. For example, <code>a</code> is greater than <code>A</code>, and <code>a</code>
    ///       is greater than <code>B</code>. For a list of code values, see <a href="http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters">http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.</p>
    ///          <p>For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values.</p>
    public let attributeValueList: [AttributeValue]?
    /// <p>A comparator for evaluating attributes. For example, equals, greater than, less than, etc.</p>
    ///          <p>The following comparison operators are available:</p>
    ///          <p>
    ///             <code>EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN</code>
    ///          </p>
    ///          <p>The following are descriptions of each comparison operator.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>EQ</code> : Equal. <code>EQ</code> is supported for all data types, including lists and maps.</p>
    ///                <p>
    ///                   <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> element of type String,
    ///           Number, Binary, String Set, Number Set, or Binary Set. If an item contains an <code>AttributeValue</code> element of a different
    ///           type than the one provided in the request, the value does not match. For example,
    ///             <code>{"S":"6"}</code> does not equal <code>{"N":"6"}</code>. Also,
    ///             <code>{"N":"6"}</code> does not equal <code>{"NS":["6", "2", "1"]}</code>.</p>
    ///                <p></p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NE</code> : Not equal. <code>NE</code> is supported for all data types, including lists and maps.</p>
    ///                <p>
    ///                   <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> of type String,
    ///           Number, Binary, String Set, Number Set, or Binary Set. If an item contains an <code>AttributeValue</code> of a different
    ///           type than the one provided in the request, the value does not match. For example,
    ///             <code>{"S":"6"}</code> does not equal <code>{"N":"6"}</code>. Also,
    ///             <code>{"N":"6"}</code> does not equal <code>{"NS":["6", "2", "1"]}</code>.</p>
    ///                <p></p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LE</code> : Less than or equal. </p>
    ///                <p>
    ///                   <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> element of type String,
    ///           Number, or Binary (not a set type). If an item contains an <code>AttributeValue</code> element of a different
    ///           type than the one provided in the request, the value does not match. For example,
    ///             <code>{"S":"6"}</code> does not equal <code>{"N":"6"}</code>. Also,
    ///             <code>{"N":"6"}</code> does not compare to <code>{"NS":["6", "2", "1"]}</code>.</p>
    ///                <p></p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LT</code> : Less than. </p>
    ///                <p>
    ///                   <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> of type String,
    ///           Number, or Binary (not a set type). If an item contains an <code>AttributeValue</code> element of a different
    ///           type than the one provided in the request, the value does not match. For example,
    ///             <code>{"S":"6"}</code> does not equal <code>{"N":"6"}</code>. Also,
    ///             <code>{"N":"6"}</code> does not compare to <code>{"NS":["6", "2", "1"]}</code>.</p>
    ///                <p></p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>GE</code> : Greater than or equal. </p>
    ///                <p>
    ///                   <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> element of type String,
    ///           Number, or Binary (not a set type). If an item contains an <code>AttributeValue</code> element of a different
    ///           type than the one provided in the request, the value does not match. For example,
    ///             <code>{"S":"6"}</code> does not equal <code>{"N":"6"}</code>. Also,
    ///             <code>{"N":"6"}</code> does not compare to <code>{"NS":["6", "2", "1"]}</code>.</p>
    ///                <p></p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>GT</code> : Greater than. </p>
    ///                <p>
    ///                   <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> element of type String,
    ///           Number, or Binary (not a set type). If an item contains an <code>AttributeValue</code> element of a different
    ///           type than the one provided in the request, the value does not match. For example,
    ///             <code>{"S":"6"}</code> does not equal <code>{"N":"6"}</code>. Also,
    ///             <code>{"N":"6"}</code> does not compare to <code>{"NS":["6", "2", "1"]}</code>.</p>
    ///                <p></p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NOT_NULL</code> : The attribute exists. <code>NOT_NULL</code> is supported for all data types, including lists and maps.</p>
    ///                <note>
    ///                   <p>This operator tests for the existence of an attribute, not its data type.  If the data type of attribute "<code>a</code>" is null, and you evaluate it using <code>NOT_NULL</code>, the result is a Boolean <code>true</code>. This result is because the attribute "<code>a</code>" exists; its data type is not relevant to the <code>NOT_NULL</code> comparison operator.</p>
    ///                </note>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NULL</code> : The attribute does not exist. <code>NULL</code> is supported for all data types, including lists and maps.</p>
    ///                <note>
    ///                   <p>This operator tests for the nonexistence of an attribute, not its data type.  If the data type of attribute "<code>a</code>" is null, and you evaluate it using <code>NULL</code>, the result is a Boolean <code>false</code>. This is because the attribute "<code>a</code>" exists; its data type is not relevant to the <code>NULL</code> comparison operator.</p>
    ///                </note>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CONTAINS</code> : Checks for a subsequence, or value in a set.</p>
    ///                <p>
    ///                   <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> element of type String,
    ///           Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then
    ///           the operator checks for a substring match. If the target attribute of the comparison is
    ///           of type Binary, then the operator looks for a subsequence of the target that matches the input.
    ///           If the target attribute of the comparison is a set ("<code>SS</code>", "<code>NS</code>", or "<code>BS</code>"), then the
    ///           operator evaluates to true if it finds an exact match with any member of the set.</p>
    ///                <p>CONTAINS is supported for lists: When evaluating "<code>a CONTAINS b</code>", "<code>a</code>" can be a list; however, "<code>b</code>" cannot be a set, a map, or a list.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NOT_CONTAINS</code> : Checks for absence of a subsequence, or absence of a value in
    ///           a set.</p>
    ///                <p>
    ///                   <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> element of type String,
    ///           Number, or Binary (not a set type). If the target attribute of the comparison is a String, then
    ///           the operator checks for the absence of a substring match. If the target attribute of the
    ///           comparison is Binary, then the operator checks for the absence of a subsequence of the
    ///           target that matches the input. If the target attribute of the comparison is a set ("<code>SS</code>",
    ///           "<code>NS</code>", or "<code>BS</code>"), then the operator evaluates to true if it <i>does not</i> find an exact match with any member of the set.</p>
    ///                <p>NOT_CONTAINS is supported for lists: When evaluating "<code>a NOT CONTAINS b</code>", "<code>a</code>" can be a list; however, "<code>b</code>" cannot be a set, a map, or a list.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>BEGINS_WITH</code> : Checks for a prefix. </p>
    ///                <p>
    ///                   <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> of type String or
    ///           Binary (not a Number or a set type). The target attribute of the comparison must be of type String or
    ///           Binary (not a Number or a set type).</p>
    ///                <p></p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>IN</code> : Checks for matching elements in a list.</p>
    ///                <p>
    ///                   <code>AttributeValueList</code> can contain one or more <code>AttributeValue</code>
    ///                elements of type String, Number, or Binary. These attributes are compared against an
    ///                existing attribute of an item. If any elements of the input are equal to the item
    ///                attribute, the expression evaluates to true.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>BETWEEN</code> : Greater than or equal to the first value, and less than or equal
    ///           to the second value. </p>
    ///                <p>
    ///                   <code>AttributeValueList</code> must contain two <code>AttributeValue</code> elements of the same
    ///           type, either String, Number, or Binary (not a set type). A target attribute matches if the
    ///           target value is greater than, or equal to, the first element and less than, or equal to,
    ///           the second element. If an item contains an <code>AttributeValue</code> element of a different type than
    ///           the one provided in the request, the value does not match. For example,
    ///             <code>{"S":"6"}</code> does not compare to <code>{"N":"6"}</code>. Also,
    ///             <code>{"N":"6"}</code> does not compare to <code>{"NS":["6", "2", "1"]}</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>For usage examples of <code>AttributeValueList</code> and <code>ComparisonOperator</code>, see
    ///     <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html">Legacy Conditional Parameters</a>
    ///       in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let comparisonOperator: ComparisonOperator?

    public init (
        attributeValueList: [AttributeValue]? = nil,
        comparisonOperator: ComparisonOperator? = nil
    )
    {
        self.attributeValueList = attributeValueList
        self.comparisonOperator = comparisonOperator
    }
}

extension ConditionCheck: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case conditionExpression = "ConditionExpression"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case key = "Key"
        case returnValuesOnConditionCheckFailure = "ReturnValuesOnConditionCheckFailure"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditionExpression = conditionExpression {
            try encodeContainer.encode(conditionExpression, forKey: .conditionExpression)
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionattributenamemap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionattributenamemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeValues = expressionAttributeValues {
            var expressionAttributeValuesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expressionAttributeValues)
            for (dictKey0, expressionattributevaluemap0) in expressionAttributeValues {
                try expressionAttributeValuesContainer.encode(expressionattributevaluemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let key = key {
            var keyContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .key)
            for (dictKey0, key0) in key {
                try keyContainer.encode(key0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure {
            try encodeContainer.encode(returnValuesOnConditionCheckFailure.rawValue, forKey: .returnValuesOnConditionCheckFailure)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .key)
        var keyDecoded0: [String:AttributeValue]? = nil
        if let keyContainer = keyContainer {
            keyDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in keyContainer {
                if let attributevalue0 = attributevalue0 {
                    keyDecoded0?[key0] = attributevalue0
                }
            }
        }
        key = keyDecoded0
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let conditionExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .conditionExpression)
        conditionExpression = conditionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [String:String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [String:String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
        let expressionAttributeValuesContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .expressionAttributeValues)
        var expressionAttributeValuesDecoded0: [String:AttributeValue]? = nil
        if let expressionAttributeValuesContainer = expressionAttributeValuesContainer {
            expressionAttributeValuesDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in expressionAttributeValuesContainer {
                if let attributevalue0 = attributevalue0 {
                    expressionAttributeValuesDecoded0?[key0] = attributevalue0
                }
            }
        }
        expressionAttributeValues = expressionAttributeValuesDecoded0
        let returnValuesOnConditionCheckFailureDecoded = try containerValues.decodeIfPresent(ReturnValuesOnConditionCheckFailure.self, forKey: .returnValuesOnConditionCheckFailure)
        returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailureDecoded
    }
}

extension ConditionCheck: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ConditionCheck(conditionExpression: \(String(describing: conditionExpression)), expressionAttributeNames: \(String(describing: expressionAttributeNames)), expressionAttributeValues: \(String(describing: expressionAttributeValues)), key: \(String(describing: key)), returnValuesOnConditionCheckFailure: \(String(describing: returnValuesOnConditionCheckFailure)), tableName: \(String(describing: tableName)))"}
}

/// <p>Represents a request to perform a check that an item exists or to check the condition of
///          specific attributes of the item.</p>
public struct ConditionCheck: Equatable {
    /// <p>A condition that must be satisfied in order for a conditional update to succeed.</p>
    public let conditionExpression: String?
    /// <p>One or more substitution tokens for attribute names in an expression.</p>
    public let expressionAttributeNames: [String:String]?
    /// <p>One or more values that can be substituted in an expression.</p>
    public let expressionAttributeValues: [String:AttributeValue]?
    /// <p>The primary key of the item to be checked. Each element consists of an
    ///       attribute name and a value for that attribute.</p>
    public let key: [String:AttributeValue]?
    /// <p>Use <code>ReturnValuesOnConditionCheckFailure</code> to
    ///         get the item attributes if the <code>ConditionCheck</code> condition fails.
    ///         For <code>ReturnValuesOnConditionCheckFailure</code>, the valid
    ///         values are: NONE and ALL_OLD.</p>
    public let returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure?
    /// <p>Name of the table for the check item request.</p>
    public let tableName: String?

    public init (
        conditionExpression: String? = nil,
        expressionAttributeNames: [String:String]? = nil,
        expressionAttributeValues: [String:AttributeValue]? = nil,
        key: [String:AttributeValue]? = nil,
        returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure? = nil,
        tableName: String? = nil
    )
    {
        self.conditionExpression = conditionExpression
        self.expressionAttributeNames = expressionAttributeNames
        self.expressionAttributeValues = expressionAttributeValues
        self.key = key
        self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
        self.tableName = tableName
    }
}

extension ConditionalCheckFailedException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ConditionalCheckFailedException(message: \(String(describing: message)))"}
}

extension ConditionalCheckFailedException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ConditionalCheckFailedExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A condition specified in the operation could not be evaluated.</p>
public struct ConditionalCheckFailedException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The conditional request failed.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ConditionalCheckFailedExceptionBody: Equatable {
    public let message: String?
}

extension ConditionalCheckFailedExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum ConditionalOperator {
    case and
    case or
    case sdkUnknown(String)
}

extension ConditionalOperator : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ConditionalOperator] {
        return [
            .and,
            .or,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .and: return "AND"
        case .or: return "OR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ConditionalOperator(rawValue: rawValue) ?? ConditionalOperator.sdkUnknown(rawValue)
    }
}

extension ConsumedCapacity: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case capacityUnits = "CapacityUnits"
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case localSecondaryIndexes = "LocalSecondaryIndexes"
        case readCapacityUnits = "ReadCapacityUnits"
        case table = "Table"
        case tableName = "TableName"
        case writeCapacityUnits = "WriteCapacityUnits"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityUnits = capacityUnits {
            try encodeContainer.encode(capacityUnits, forKey: .capacityUnits)
        }
        if let globalSecondaryIndexes = globalSecondaryIndexes {
            var globalSecondaryIndexesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .globalSecondaryIndexes)
            for (dictKey0, secondaryindexescapacitymap0) in globalSecondaryIndexes {
                try globalSecondaryIndexesContainer.encode(secondaryindexescapacitymap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let localSecondaryIndexes = localSecondaryIndexes {
            var localSecondaryIndexesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .localSecondaryIndexes)
            for (dictKey0, secondaryindexescapacitymap0) in localSecondaryIndexes {
                try localSecondaryIndexesContainer.encode(secondaryindexescapacitymap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let readCapacityUnits = readCapacityUnits {
            try encodeContainer.encode(readCapacityUnits, forKey: .readCapacityUnits)
        }
        if let table = table {
            try encodeContainer.encode(table, forKey: .table)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let writeCapacityUnits = writeCapacityUnits {
            try encodeContainer.encode(writeCapacityUnits, forKey: .writeCapacityUnits)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let capacityUnitsDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .capacityUnits)
        capacityUnits = capacityUnitsDecoded
        let readCapacityUnitsDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .readCapacityUnits)
        readCapacityUnits = readCapacityUnitsDecoded
        let writeCapacityUnitsDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .writeCapacityUnits)
        writeCapacityUnits = writeCapacityUnitsDecoded
        let tableDecoded = try containerValues.decodeIfPresent(Capacity.self, forKey: .table)
        table = tableDecoded
        let localSecondaryIndexesContainer = try containerValues.decodeIfPresent([String: Capacity?].self, forKey: .localSecondaryIndexes)
        var localSecondaryIndexesDecoded0: [String:Capacity]? = nil
        if let localSecondaryIndexesContainer = localSecondaryIndexesContainer {
            localSecondaryIndexesDecoded0 = [String:Capacity]()
            for (key0, capacity0) in localSecondaryIndexesContainer {
                if let capacity0 = capacity0 {
                    localSecondaryIndexesDecoded0?[key0] = capacity0
                }
            }
        }
        localSecondaryIndexes = localSecondaryIndexesDecoded0
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([String: Capacity?].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0: [String:Capacity]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [String:Capacity]()
            for (key0, capacity0) in globalSecondaryIndexesContainer {
                if let capacity0 = capacity0 {
                    globalSecondaryIndexesDecoded0?[key0] = capacity0
                }
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
    }
}

extension ConsumedCapacity: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ConsumedCapacity(capacityUnits: \(String(describing: capacityUnits)), globalSecondaryIndexes: \(String(describing: globalSecondaryIndexes)), localSecondaryIndexes: \(String(describing: localSecondaryIndexes)), readCapacityUnits: \(String(describing: readCapacityUnits)), table: \(String(describing: table)), tableName: \(String(describing: tableName)), writeCapacityUnits: \(String(describing: writeCapacityUnits)))"}
}

/// <p>The capacity units consumed by an operation. The data returned includes the total
///       provisioned throughput consumed, along with statistics for the table and any indexes involved
///       in the operation. <code>ConsumedCapacity</code> is only returned if the request asked for it.
///       For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned
///         Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
public struct ConsumedCapacity: Equatable {
    /// <p>The total number of capacity units consumed by the operation.</p>
    public let capacityUnits: Double?
    /// <p>The amount of throughput consumed on each global index affected by the operation.</p>
    public let globalSecondaryIndexes: [String:Capacity]?
    /// <p>The amount of throughput consumed on each local index affected by the operation.</p>
    public let localSecondaryIndexes: [String:Capacity]?
    /// <p>The total number of read capacity units consumed by the operation.</p>
    public let readCapacityUnits: Double?
    /// <p>The amount of throughput consumed on the table affected by the operation.</p>
    public let table: Capacity?
    /// <p>The name of the table that was affected by the operation.</p>
    public let tableName: String?
    /// <p>The total number of write capacity units consumed by the operation.</p>
    public let writeCapacityUnits: Double?

    public init (
        capacityUnits: Double? = nil,
        globalSecondaryIndexes: [String:Capacity]? = nil,
        localSecondaryIndexes: [String:Capacity]? = nil,
        readCapacityUnits: Double? = nil,
        table: Capacity? = nil,
        tableName: String? = nil,
        writeCapacityUnits: Double? = nil
    )
    {
        self.capacityUnits = capacityUnits
        self.globalSecondaryIndexes = globalSecondaryIndexes
        self.localSecondaryIndexes = localSecondaryIndexes
        self.readCapacityUnits = readCapacityUnits
        self.table = table
        self.tableName = tableName
        self.writeCapacityUnits = writeCapacityUnits
    }
}

extension ContinuousBackupsDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case continuousBackupsStatus = "ContinuousBackupsStatus"
        case pointInTimeRecoveryDescription = "PointInTimeRecoveryDescription"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let continuousBackupsStatus = continuousBackupsStatus {
            try encodeContainer.encode(continuousBackupsStatus.rawValue, forKey: .continuousBackupsStatus)
        }
        if let pointInTimeRecoveryDescription = pointInTimeRecoveryDescription {
            try encodeContainer.encode(pointInTimeRecoveryDescription, forKey: .pointInTimeRecoveryDescription)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let continuousBackupsStatusDecoded = try containerValues.decodeIfPresent(ContinuousBackupsStatus.self, forKey: .continuousBackupsStatus)
        continuousBackupsStatus = continuousBackupsStatusDecoded
        let pointInTimeRecoveryDescriptionDecoded = try containerValues.decodeIfPresent(PointInTimeRecoveryDescription.self, forKey: .pointInTimeRecoveryDescription)
        pointInTimeRecoveryDescription = pointInTimeRecoveryDescriptionDecoded
    }
}

extension ContinuousBackupsDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ContinuousBackupsDescription(continuousBackupsStatus: \(String(describing: continuousBackupsStatus)), pointInTimeRecoveryDescription: \(String(describing: pointInTimeRecoveryDescription)))"}
}

/// <p>Represents the continuous backups and point in time recovery settings on the table.</p>
public struct ContinuousBackupsDescription: Equatable {
    /// <p>
    ///             <code>ContinuousBackupsStatus</code> can be one of the following states: ENABLED,
    ///          DISABLED</p>
    public let continuousBackupsStatus: ContinuousBackupsStatus?
    /// <p>The description of the point in time recovery settings applied to the table.</p>
    public let pointInTimeRecoveryDescription: PointInTimeRecoveryDescription?

    public init (
        continuousBackupsStatus: ContinuousBackupsStatus? = nil,
        pointInTimeRecoveryDescription: PointInTimeRecoveryDescription? = nil
    )
    {
        self.continuousBackupsStatus = continuousBackupsStatus
        self.pointInTimeRecoveryDescription = pointInTimeRecoveryDescription
    }
}

public enum ContinuousBackupsStatus {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension ContinuousBackupsStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ContinuousBackupsStatus] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ContinuousBackupsStatus(rawValue: rawValue) ?? ContinuousBackupsStatus.sdkUnknown(rawValue)
    }
}

extension ContinuousBackupsUnavailableException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ContinuousBackupsUnavailableException(message: \(String(describing: message)))"}
}

extension ContinuousBackupsUnavailableException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ContinuousBackupsUnavailableExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Backups have not yet been enabled for this table.</p>
public struct ContinuousBackupsUnavailableException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ContinuousBackupsUnavailableExceptionBody: Equatable {
    public let message: String?
}

extension ContinuousBackupsUnavailableExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum ContributorInsightsAction {
    case disable
    case enable
    case sdkUnknown(String)
}

extension ContributorInsightsAction : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ContributorInsightsAction] {
        return [
            .disable,
            .enable,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disable: return "DISABLE"
        case .enable: return "ENABLE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ContributorInsightsAction(rawValue: rawValue) ?? ContributorInsightsAction.sdkUnknown(rawValue)
    }
}

public enum ContributorInsightsStatus {
    case disabled
    case disabling
    case enabled
    case enabling
    case failed
    case sdkUnknown(String)
}

extension ContributorInsightsStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ContributorInsightsStatus] {
        return [
            .disabled,
            .disabling,
            .enabled,
            .enabling,
            .failed,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .disabling: return "DISABLING"
        case .enabled: return "ENABLED"
        case .enabling: return "ENABLING"
        case .failed: return "FAILED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ContributorInsightsStatus(rawValue: rawValue) ?? ContributorInsightsStatus.sdkUnknown(rawValue)
    }
}

extension ContributorInsightsSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case contributorInsightsStatus = "ContributorInsightsStatus"
        case indexName = "IndexName"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contributorInsightsStatus = contributorInsightsStatus {
            try encodeContainer.encode(contributorInsightsStatus.rawValue, forKey: .contributorInsightsStatus)
        }
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let contributorInsightsStatusDecoded = try containerValues.decodeIfPresent(ContributorInsightsStatus.self, forKey: .contributorInsightsStatus)
        contributorInsightsStatus = contributorInsightsStatusDecoded
    }
}

extension ContributorInsightsSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ContributorInsightsSummary(contributorInsightsStatus: \(String(describing: contributorInsightsStatus)), indexName: \(String(describing: indexName)), tableName: \(String(describing: tableName)))"}
}

/// <p>Represents a Contributor Insights summary entry.</p>
public struct ContributorInsightsSummary: Equatable {
    /// <p>Describes the current status for contributor insights for the given table and index, if applicable.</p>
    public let contributorInsightsStatus: ContributorInsightsStatus?
    /// <p>Name of the index associated with the summary, if any.</p>
    public let indexName: String?
    /// <p>Name of the table associated with the summary.</p>
    public let tableName: String?

    public init (
        contributorInsightsStatus: ContributorInsightsStatus? = nil,
        indexName: String? = nil,
        tableName: String? = nil
    )
    {
        self.contributorInsightsStatus = contributorInsightsStatus
        self.indexName = indexName
        self.tableName = tableName
    }
}

public struct CreateBackupInputBodyMiddleware: Middleware {
    public let id: String = "CreateBackupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateBackupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateBackupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateBackupInput>
    public typealias MOutput = OperationOutput<CreateBackupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateBackupOutputError>
}

extension CreateBackupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateBackupInput(backupName: \(String(describing: backupName)), tableName: \(String(describing: tableName)))"}
}

extension CreateBackupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case backupName = "BackupName"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupName = backupName {
            try encodeContainer.encode(backupName, forKey: .backupName)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

public struct CreateBackupInputHeadersMiddleware: Middleware {
    public let id: String = "CreateBackupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateBackupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateBackupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateBackupInput>
    public typealias MOutput = OperationOutput<CreateBackupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateBackupOutputError>
}

public struct CreateBackupInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateBackupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateBackupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateBackupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateBackupInput>
    public typealias MOutput = OperationOutput<CreateBackupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateBackupOutputError>
}

public struct CreateBackupInput: Equatable {
    /// <p>Specified name for the backup.</p>
    public let backupName: String?
    /// <p>The name of the table.</p>
    public let tableName: String?

    public init (
        backupName: String? = nil,
        tableName: String? = nil
    )
    {
        self.backupName = backupName
        self.tableName = tableName
    }
}

struct CreateBackupInputBody: Equatable {
    public let tableName: String?
    public let backupName: String?
}

extension CreateBackupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case backupName = "BackupName"
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let backupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .backupName)
        backupName = backupNameDecoded
    }
}

extension CreateBackupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateBackupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BackupInUseException" : self = .backupInUseException(try BackupInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ContinuousBackupsUnavailableException" : self = .continuousBackupsUnavailableException(try ContinuousBackupsUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TableInUseException" : self = .tableInUseException(try TableInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TableNotFoundException" : self = .tableNotFoundException(try TableNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateBackupOutputError: Equatable {
    case backupInUseException(BackupInUseException)
    case continuousBackupsUnavailableException(ContinuousBackupsUnavailableException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case tableInUseException(TableInUseException)
    case tableNotFoundException(TableNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateBackupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateBackupOutputResponse(backupDetails: \(String(describing: backupDetails)))"}
}

extension CreateBackupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateBackupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.backupDetails = output.backupDetails
        } else {
            self.backupDetails = nil
        }
    }
}

public struct CreateBackupOutputResponse: Equatable {
    /// <p>Contains the details of the backup created for the table.</p>
    public let backupDetails: BackupDetails?

    public init (
        backupDetails: BackupDetails? = nil
    )
    {
        self.backupDetails = backupDetails
    }
}

struct CreateBackupOutputResponseBody: Equatable {
    public let backupDetails: BackupDetails?
}

extension CreateBackupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case backupDetails = "BackupDetails"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupDetailsDecoded = try containerValues.decodeIfPresent(BackupDetails.self, forKey: .backupDetails)
        backupDetails = backupDetailsDecoded
    }
}

extension CreateGlobalSecondaryIndexAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case indexName = "IndexName"
        case keySchema = "KeySchema"
        case projection = "Projection"
        case provisionedThroughput = "ProvisionedThroughput"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for keyschema0 in keySchema {
                try keySchemaContainer.encode(keyschema0)
            }
        }
        if let projection = projection {
            try encodeContainer.encode(projection, forKey: .projection)
        }
        if let provisionedThroughput = provisionedThroughput {
            try encodeContainer.encode(provisionedThroughput, forKey: .provisionedThroughput)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let projectionDecoded = try containerValues.decodeIfPresent(Projection.self, forKey: .projection)
        projection = projectionDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(ProvisionedThroughput.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
    }
}

extension CreateGlobalSecondaryIndexAction: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateGlobalSecondaryIndexAction(indexName: \(String(describing: indexName)), keySchema: \(String(describing: keySchema)), projection: \(String(describing: projection)), provisionedThroughput: \(String(describing: provisionedThroughput)))"}
}

/// <p>Represents a new global secondary index to be added to an existing table.</p>
public struct CreateGlobalSecondaryIndexAction: Equatable {
    /// <p>The name of the global secondary index to be created.</p>
    public let indexName: String?
    /// <p>The key schema for the global secondary index.</p>
    public let keySchema: [KeySchemaElement]?
    /// <p>Represents attributes that are copied (projected) from the table into an index. These
    ///          are in addition to the primary key attributes and index key attributes, which are
    ///          automatically projected.</p>
    public let projection: Projection?
    /// <p>Represents the provisioned throughput settings for the specified global secondary index.</p>
    ///          <p>For current minimum and maximum provisioned throughput values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let provisionedThroughput: ProvisionedThroughput?

    public init (
        indexName: String? = nil,
        keySchema: [KeySchemaElement]? = nil,
        projection: Projection? = nil,
        provisionedThroughput: ProvisionedThroughput? = nil
    )
    {
        self.indexName = indexName
        self.keySchema = keySchema
        self.projection = projection
        self.provisionedThroughput = provisionedThroughput
    }
}

public struct CreateGlobalTableInputBodyMiddleware: Middleware {
    public let id: String = "CreateGlobalTableInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGlobalTableInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGlobalTableOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGlobalTableInput>
    public typealias MOutput = OperationOutput<CreateGlobalTableOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGlobalTableOutputError>
}

extension CreateGlobalTableInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateGlobalTableInput(globalTableName: \(String(describing: globalTableName)), replicationGroup: \(String(describing: replicationGroup)))"}
}

extension CreateGlobalTableInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case globalTableName = "GlobalTableName"
        case replicationGroup = "ReplicationGroup"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalTableName = globalTableName {
            try encodeContainer.encode(globalTableName, forKey: .globalTableName)
        }
        if let replicationGroup = replicationGroup {
            var replicationGroupContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicationGroup)
            for replicalist0 in replicationGroup {
                try replicationGroupContainer.encode(replicalist0)
            }
        }
    }
}

public struct CreateGlobalTableInputHeadersMiddleware: Middleware {
    public let id: String = "CreateGlobalTableInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGlobalTableInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGlobalTableOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGlobalTableInput>
    public typealias MOutput = OperationOutput<CreateGlobalTableOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGlobalTableOutputError>
}

public struct CreateGlobalTableInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateGlobalTableInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGlobalTableInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGlobalTableOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGlobalTableInput>
    public typealias MOutput = OperationOutput<CreateGlobalTableOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGlobalTableOutputError>
}

public struct CreateGlobalTableInput: Equatable {
    /// <p>The global table name.</p>
    public let globalTableName: String?
    /// <p>The Regions where the global table needs to be created.</p>
    public let replicationGroup: [Replica]?

    public init (
        globalTableName: String? = nil,
        replicationGroup: [Replica]? = nil
    )
    {
        self.globalTableName = globalTableName
        self.replicationGroup = replicationGroup
    }
}

struct CreateGlobalTableInputBody: Equatable {
    public let globalTableName: String?
    public let replicationGroup: [Replica]?
}

extension CreateGlobalTableInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case globalTableName = "GlobalTableName"
        case replicationGroup = "ReplicationGroup"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .globalTableName)
        globalTableName = globalTableNameDecoded
        let replicationGroupContainer = try containerValues.decodeIfPresent([Replica?].self, forKey: .replicationGroup)
        var replicationGroupDecoded0:[Replica]? = nil
        if let replicationGroupContainer = replicationGroupContainer {
            replicationGroupDecoded0 = [Replica]()
            for structure0 in replicationGroupContainer {
                if let structure0 = structure0 {
                    replicationGroupDecoded0?.append(structure0)
                }
            }
        }
        replicationGroup = replicationGroupDecoded0
    }
}

extension CreateGlobalTableOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateGlobalTableOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "GlobalTableAlreadyExistsException" : self = .globalTableAlreadyExistsException(try GlobalTableAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TableNotFoundException" : self = .tableNotFoundException(try TableNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateGlobalTableOutputError: Equatable {
    case globalTableAlreadyExistsException(GlobalTableAlreadyExistsException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case tableNotFoundException(TableNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateGlobalTableOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateGlobalTableOutputResponse(globalTableDescription: \(String(describing: globalTableDescription)))"}
}

extension CreateGlobalTableOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateGlobalTableOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.globalTableDescription = output.globalTableDescription
        } else {
            self.globalTableDescription = nil
        }
    }
}

public struct CreateGlobalTableOutputResponse: Equatable {
    /// <p>Contains the details of the global table.</p>
    public let globalTableDescription: GlobalTableDescription?

    public init (
        globalTableDescription: GlobalTableDescription? = nil
    )
    {
        self.globalTableDescription = globalTableDescription
    }
}

struct CreateGlobalTableOutputResponseBody: Equatable {
    public let globalTableDescription: GlobalTableDescription?
}

extension CreateGlobalTableOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case globalTableDescription = "GlobalTableDescription"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTableDescriptionDecoded = try containerValues.decodeIfPresent(GlobalTableDescription.self, forKey: .globalTableDescription)
        globalTableDescription = globalTableDescriptionDecoded
    }
}

extension CreateReplicaAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case regionName = "RegionName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let regionName = regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .regionName)
        regionName = regionNameDecoded
    }
}

extension CreateReplicaAction: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateReplicaAction(regionName: \(String(describing: regionName)))"}
}

/// <p>Represents a replica to be added.</p>
public struct CreateReplicaAction: Equatable {
    /// <p>The Region of the replica to be added.</p>
    public let regionName: String?

    public init (
        regionName: String? = nil
    )
    {
        self.regionName = regionName
    }
}

extension CreateReplicationGroupMemberAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case kMSMasterKeyId = "KMSMasterKeyId"
        case provisionedThroughputOverride = "ProvisionedThroughputOverride"
        case regionName = "RegionName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalSecondaryIndexes = globalSecondaryIndexes {
            var globalSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexes)
            for replicaglobalsecondaryindexlist0 in globalSecondaryIndexes {
                try globalSecondaryIndexesContainer.encode(replicaglobalsecondaryindexlist0)
            }
        }
        if let kMSMasterKeyId = kMSMasterKeyId {
            try encodeContainer.encode(kMSMasterKeyId, forKey: .kMSMasterKeyId)
        }
        if let provisionedThroughputOverride = provisionedThroughputOverride {
            try encodeContainer.encode(provisionedThroughputOverride, forKey: .provisionedThroughputOverride)
        }
        if let regionName = regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .regionName)
        regionName = regionNameDecoded
        let kMSMasterKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kMSMasterKeyId)
        kMSMasterKeyId = kMSMasterKeyIdDecoded
        let provisionedThroughputOverrideDecoded = try containerValues.decodeIfPresent(ProvisionedThroughputOverride.self, forKey: .provisionedThroughputOverride)
        provisionedThroughputOverride = provisionedThroughputOverrideDecoded
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([ReplicaGlobalSecondaryIndex?].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0:[ReplicaGlobalSecondaryIndex]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [ReplicaGlobalSecondaryIndex]()
            for structure0 in globalSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
    }
}

extension CreateReplicationGroupMemberAction: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateReplicationGroupMemberAction(globalSecondaryIndexes: \(String(describing: globalSecondaryIndexes)), kMSMasterKeyId: \(String(describing: kMSMasterKeyId)), provisionedThroughputOverride: \(String(describing: provisionedThroughputOverride)), regionName: \(String(describing: regionName)))"}
}

/// <p>Represents a replica to be created.</p>
public struct CreateReplicationGroupMemberAction: Equatable {
    /// <p>Replica-specific global secondary index settings.</p>
    public let globalSecondaryIndexes: [ReplicaGlobalSecondaryIndex]?
    /// <p>The AWS KMS customer master key (CMK) that should be used for AWS KMS encryption
    ///          in the new replica. To specify a CMK, use its key ID, Amazon Resource Name (ARN),
    ///          alias name, or alias ARN. Note that you should only provide this parameter if the
    ///          key is different from the default DynamoDB KMS master key alias/aws/dynamodb.</p>
    public let kMSMasterKeyId: String?
    /// <p>Replica-specific provisioned throughput. If not specified, uses the source table's
    ///          provisioned throughput settings.</p>
    public let provisionedThroughputOverride: ProvisionedThroughputOverride?
    /// <p>The Region where the new replica will be created.</p>
    public let regionName: String?

    public init (
        globalSecondaryIndexes: [ReplicaGlobalSecondaryIndex]? = nil,
        kMSMasterKeyId: String? = nil,
        provisionedThroughputOverride: ProvisionedThroughputOverride? = nil,
        regionName: String? = nil
    )
    {
        self.globalSecondaryIndexes = globalSecondaryIndexes
        self.kMSMasterKeyId = kMSMasterKeyId
        self.provisionedThroughputOverride = provisionedThroughputOverride
        self.regionName = regionName
    }
}

public struct CreateTableInputBodyMiddleware: Middleware {
    public let id: String = "CreateTableInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateTableInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateTableOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateTableInput>
    public typealias MOutput = OperationOutput<CreateTableOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateTableOutputError>
}

extension CreateTableInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateTableInput(attributeDefinitions: \(String(describing: attributeDefinitions)), billingMode: \(String(describing: billingMode)), globalSecondaryIndexes: \(String(describing: globalSecondaryIndexes)), keySchema: \(String(describing: keySchema)), localSecondaryIndexes: \(String(describing: localSecondaryIndexes)), provisionedThroughput: \(String(describing: provisionedThroughput)), sSESpecification: \(String(describing: sSESpecification)), streamSpecification: \(String(describing: streamSpecification)), tableName: \(String(describing: tableName)), tags: \(String(describing: tags)))"}
}

extension CreateTableInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributeDefinitions = "AttributeDefinitions"
        case billingMode = "BillingMode"
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case keySchema = "KeySchema"
        case localSecondaryIndexes = "LocalSecondaryIndexes"
        case provisionedThroughput = "ProvisionedThroughput"
        case sSESpecification = "SSESpecification"
        case streamSpecification = "StreamSpecification"
        case tableName = "TableName"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeDefinitions = attributeDefinitions {
            var attributeDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributeDefinitions)
            for attributedefinitions0 in attributeDefinitions {
                try attributeDefinitionsContainer.encode(attributedefinitions0)
            }
        }
        if let billingMode = billingMode {
            try encodeContainer.encode(billingMode.rawValue, forKey: .billingMode)
        }
        if let globalSecondaryIndexes = globalSecondaryIndexes {
            var globalSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexes)
            for globalsecondaryindexlist0 in globalSecondaryIndexes {
                try globalSecondaryIndexesContainer.encode(globalsecondaryindexlist0)
            }
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for keyschema0 in keySchema {
                try keySchemaContainer.encode(keyschema0)
            }
        }
        if let localSecondaryIndexes = localSecondaryIndexes {
            var localSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .localSecondaryIndexes)
            for localsecondaryindexlist0 in localSecondaryIndexes {
                try localSecondaryIndexesContainer.encode(localsecondaryindexlist0)
            }
        }
        if let provisionedThroughput = provisionedThroughput {
            try encodeContainer.encode(provisionedThroughput, forKey: .provisionedThroughput)
        }
        if let sSESpecification = sSESpecification {
            try encodeContainer.encode(sSESpecification, forKey: .sSESpecification)
        }
        if let streamSpecification = streamSpecification {
            try encodeContainer.encode(streamSpecification, forKey: .streamSpecification)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateTableInputHeadersMiddleware: Middleware {
    public let id: String = "CreateTableInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateTableInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateTableOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateTableInput>
    public typealias MOutput = OperationOutput<CreateTableOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateTableOutputError>
}

public struct CreateTableInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateTableInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateTableInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateTableOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateTableInput>
    public typealias MOutput = OperationOutput<CreateTableOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateTableOutputError>
}

/// <p>Represents the input of a <code>CreateTable</code> operation.</p>
public struct CreateTableInput: Equatable {
    /// <p>An array of attributes that describe the key schema for the table and indexes.</p>
    public let attributeDefinitions: [AttributeDefinition]?
    /// <p>Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>PROVISIONED</code> - We recommend using <code>PROVISIONED</code> for predictable workloads. <code>PROVISIONED</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual">Provisioned Mode</a>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>PAY_PER_REQUEST</code> - We recommend using <code>PAY_PER_REQUEST</code> for unpredictable workloads. <code>PAY_PER_REQUEST</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand">On-Demand Mode</a>.
    ///             </p>
    ///             </li>
    ///          </ul>
    public let billingMode: BillingMode?
    /// <p>One or more global secondary indexes (the maximum is 20) to be created on the table. Each global secondary index in the array includes the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>IndexName</code> - The name of the global secondary index. Must be unique only for this table.</p>
    ///                <p></p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>KeySchema</code> - Specifies the key schema for the global secondary index.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Projection</code> - Specifies
    ///           attributes that are copied (projected) from the table into the index. These are in
    ///           addition to the primary key attributes and index key
    ///           attributes, which are automatically projected. Each
    ///           attribute specification is composed of:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>ProjectionType</code> - One
    ///               of the following:</p>
    ///                      <ul>
    ///                         <li>
    ///                            <p>
    ///                               <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the
    ///                   index.</p>
    ///                         </li>
    ///                         <li>
    ///                            <p>
    ///                                     <code>INCLUDE</code> - Only the specified table attributes are
    ///                                     projected into the index. The list of projected attributes is in
    ///                                         <code>NonKeyAttributes</code>.</p>
    ///                         </li>
    ///                         <li>
    ///                            <p>
    ///                               <code>ALL</code> - All of the table attributes are projected into the
    ///                   index.</p>
    ///                         </li>
    ///                      </ul>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>NonKeyAttributes</code> - A list of one or more non-key attribute names that are
    ///               projected into the secondary index. The total count of attributes provided in <code>NonKeyAttributes</code>, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ProvisionedThroughput</code> - The provisioned throughput settings for the global secondary index,
    ///           consisting of read and write capacity units.</p>
    ///             </li>
    ///          </ul>
    public let globalSecondaryIndexes: [GlobalSecondaryIndex]?
    /// <p>Specifies the attributes that make up the primary key for a table or an index. The attributes
    ///       in <code>KeySchema</code> must also be defined in the <code>AttributeDefinitions</code> array. For more
    ///       information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html">Data Model</a> in the
    ///         <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///          <p>Each <code>KeySchemaElement</code> in the array is composed of:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>AttributeName</code> - The name of this key attribute.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>KeyType</code> - The role that the key attribute will assume:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>HASH</code> - partition key</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>RANGE</code> - sort key</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>The partition key of an item is also known as its <i>hash
    ///                 attribute</i>. The term "hash attribute" derives from the DynamoDB usage of
    ///                 an internal hash function to evenly distribute data items across partitions, based
    ///                 on their partition key values.</p>
    ///             <p>The sort key of an item is also known as its <i>range attribute</i>.
    ///         The term "range attribute" derives from the way DynamoDB stores items with the same
    ///         partition key physically close together, in sorted order by the sort key value.</p>
    ///          </note>
    ///
    ///          <p>For a simple primary key (partition key), you must provide
    ///       exactly one element with a <code>KeyType</code> of <code>HASH</code>.</p>
    ///          <p>For a composite primary key (partition key and sort key), you must provide exactly two
    ///       elements, in this order: The first element must have a <code>KeyType</code> of <code>HASH</code>,
    ///       and the second element must have a <code>KeyType</code> of <code>RANGE</code>.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key">Working with Tables</a> in the <i>Amazon DynamoDB Developer
    ///                 Guide</i>.</p>
    public let keySchema: [KeySchemaElement]?
    /// <p>One or more local secondary indexes (the maximum is 5) to be created on the table. Each index is scoped to a given partition key value. There is a 10 GB size limit per partition key value; otherwise, the size of a local secondary index is unconstrained.</p>
    ///          <p>Each local secondary index in the array includes the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>IndexName</code> - The name of the local secondary index. Must be unique only for this table.</p>
    ///                <p></p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>KeySchema</code> - Specifies the key schema for the local secondary index. The key schema must begin with
    ///           the same partition key as the table.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Projection</code> - Specifies
    ///           attributes that are copied (projected) from the table into the index. These are in
    ///           addition to the primary key attributes and index key
    ///           attributes, which are automatically projected. Each
    ///           attribute specification is composed of:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>ProjectionType</code> - One
    ///               of the following:</p>
    ///                      <ul>
    ///                         <li>
    ///                            <p>
    ///                               <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the
    ///                   index.</p>
    ///                         </li>
    ///                         <li>
    ///                            <p>
    ///                                     <code>INCLUDE</code> - Only the specified table attributes are
    ///                                     projected into the index. The list of projected attributes is in
    ///                                         <code>NonKeyAttributes</code>.</p>
    ///                         </li>
    ///                         <li>
    ///                            <p>
    ///                               <code>ALL</code> - All of the table attributes are projected into the
    ///                   index.</p>
    ///                         </li>
    ///                      </ul>
    ///                   </li>
    ///                   <li>
    ///                         <p>
    ///                             <code>NonKeyAttributes</code> - A list of one or more non-key
    ///                             attribute names that are projected into the secondary index. The total
    ///                             count of attributes provided in <code>NonKeyAttributes</code>,
    ///                             summed across all of the secondary indexes, must not exceed 100. If you
    ///                             project the same attribute into two different indexes, this counts as
    ///                             two distinct attributes when determining the total.</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    public let localSecondaryIndexes: [LocalSecondaryIndex]?
    /// <p>Represents the provisioned throughput settings for a specified table or index. The
    ///             settings can be modified using the <code>UpdateTable</code> operation.</p>
    /// 		       <p> If you set BillingMode as <code>PROVISIONED</code>, you must specify this property. If you
    ///             set BillingMode as <code>PAY_PER_REQUEST</code>, you cannot specify this
    ///             property.</p>
    ///         <p>For current minimum and maximum provisioned throughput values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service,
    ///                 Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer
    ///                 Guide</i>.</p>
    public let provisionedThroughput: ProvisionedThroughput?
    /// <p>Represents the settings used to enable server-side encryption.</p>
    public let sSESpecification: SSESpecification?
    /// <p>The settings for DynamoDB Streams on the table. These settings consist of:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                     <code>StreamEnabled</code> - Indicates whether DynamoDB Streams is to be enabled
    ///                     (true) or disabled (false).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>StreamViewType</code> - When an item in the table is modified, <code>StreamViewType</code>
    ///           determines what information is written to the table's stream. Valid values for
    ///             <code>StreamViewType</code> are:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>KEYS_ONLY</code> - Only the key attributes of the modified item are written to the
    ///               stream.</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>NEW_IMAGE</code> - The entire item, as it appears after it was modified, is written
    ///             to the stream.</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>OLD_IMAGE</code> - The entire item, as it appeared before it was modified, is
    ///             written to the stream.</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>NEW_AND_OLD_IMAGES</code> - Both the new and the old item images of the item are
    ///             written to the stream.</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    public let streamSpecification: StreamSpecification?
    /// <p>The name of the table to create.</p>
    public let tableName: String?
    /// <p>A list of key-value pairs to label the table. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging for DynamoDB</a>.</p>
    public let tags: [Tag]?

    public init (
        attributeDefinitions: [AttributeDefinition]? = nil,
        billingMode: BillingMode? = nil,
        globalSecondaryIndexes: [GlobalSecondaryIndex]? = nil,
        keySchema: [KeySchemaElement]? = nil,
        localSecondaryIndexes: [LocalSecondaryIndex]? = nil,
        provisionedThroughput: ProvisionedThroughput? = nil,
        sSESpecification: SSESpecification? = nil,
        streamSpecification: StreamSpecification? = nil,
        tableName: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.attributeDefinitions = attributeDefinitions
        self.billingMode = billingMode
        self.globalSecondaryIndexes = globalSecondaryIndexes
        self.keySchema = keySchema
        self.localSecondaryIndexes = localSecondaryIndexes
        self.provisionedThroughput = provisionedThroughput
        self.sSESpecification = sSESpecification
        self.streamSpecification = streamSpecification
        self.tableName = tableName
        self.tags = tags
    }
}

struct CreateTableInputBody: Equatable {
    public let attributeDefinitions: [AttributeDefinition]?
    public let tableName: String?
    public let keySchema: [KeySchemaElement]?
    public let localSecondaryIndexes: [LocalSecondaryIndex]?
    public let globalSecondaryIndexes: [GlobalSecondaryIndex]?
    public let billingMode: BillingMode?
    public let provisionedThroughput: ProvisionedThroughput?
    public let streamSpecification: StreamSpecification?
    public let sSESpecification: SSESpecification?
    public let tags: [Tag]?
}

extension CreateTableInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attributeDefinitions = "AttributeDefinitions"
        case billingMode = "BillingMode"
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case keySchema = "KeySchema"
        case localSecondaryIndexes = "LocalSecondaryIndexes"
        case provisionedThroughput = "ProvisionedThroughput"
        case sSESpecification = "SSESpecification"
        case streamSpecification = "StreamSpecification"
        case tableName = "TableName"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeDefinitionsContainer = try containerValues.decodeIfPresent([AttributeDefinition?].self, forKey: .attributeDefinitions)
        var attributeDefinitionsDecoded0:[AttributeDefinition]? = nil
        if let attributeDefinitionsContainer = attributeDefinitionsContainer {
            attributeDefinitionsDecoded0 = [AttributeDefinition]()
            for structure0 in attributeDefinitionsContainer {
                if let structure0 = structure0 {
                    attributeDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        attributeDefinitions = attributeDefinitionsDecoded0
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let localSecondaryIndexesContainer = try containerValues.decodeIfPresent([LocalSecondaryIndex?].self, forKey: .localSecondaryIndexes)
        var localSecondaryIndexesDecoded0:[LocalSecondaryIndex]? = nil
        if let localSecondaryIndexesContainer = localSecondaryIndexesContainer {
            localSecondaryIndexesDecoded0 = [LocalSecondaryIndex]()
            for structure0 in localSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    localSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        localSecondaryIndexes = localSecondaryIndexesDecoded0
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([GlobalSecondaryIndex?].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0:[GlobalSecondaryIndex]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [GlobalSecondaryIndex]()
            for structure0 in globalSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
        let billingModeDecoded = try containerValues.decodeIfPresent(BillingMode.self, forKey: .billingMode)
        billingMode = billingModeDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(ProvisionedThroughput.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
        let streamSpecificationDecoded = try containerValues.decodeIfPresent(StreamSpecification.self, forKey: .streamSpecification)
        streamSpecification = streamSpecificationDecoded
        let sSESpecificationDecoded = try containerValues.decodeIfPresent(SSESpecification.self, forKey: .sSESpecification)
        sSESpecification = sSESpecificationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateTableOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateTableOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateTableOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case resourceInUseException(ResourceInUseException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateTableOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateTableOutputResponse(tableDescription: \(String(describing: tableDescription)))"}
}

extension CreateTableOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateTableOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.tableDescription = output.tableDescription
        } else {
            self.tableDescription = nil
        }
    }
}

/// <p>Represents the output of a <code>CreateTable</code> operation.</p>
public struct CreateTableOutputResponse: Equatable {
    /// <p>Represents the properties of the table.</p>
    public let tableDescription: TableDescription?

    public init (
        tableDescription: TableDescription? = nil
    )
    {
        self.tableDescription = tableDescription
    }
}

struct CreateTableOutputResponseBody: Equatable {
    public let tableDescription: TableDescription?
}

extension CreateTableOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tableDescription = "TableDescription"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableDescriptionDecoded = try containerValues.decodeIfPresent(TableDescription.self, forKey: .tableDescription)
        tableDescription = tableDescriptionDecoded
    }
}

extension Delete: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case conditionExpression = "ConditionExpression"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case key = "Key"
        case returnValuesOnConditionCheckFailure = "ReturnValuesOnConditionCheckFailure"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditionExpression = conditionExpression {
            try encodeContainer.encode(conditionExpression, forKey: .conditionExpression)
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionattributenamemap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionattributenamemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeValues = expressionAttributeValues {
            var expressionAttributeValuesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expressionAttributeValues)
            for (dictKey0, expressionattributevaluemap0) in expressionAttributeValues {
                try expressionAttributeValuesContainer.encode(expressionattributevaluemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let key = key {
            var keyContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .key)
            for (dictKey0, key0) in key {
                try keyContainer.encode(key0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure {
            try encodeContainer.encode(returnValuesOnConditionCheckFailure.rawValue, forKey: .returnValuesOnConditionCheckFailure)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .key)
        var keyDecoded0: [String:AttributeValue]? = nil
        if let keyContainer = keyContainer {
            keyDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in keyContainer {
                if let attributevalue0 = attributevalue0 {
                    keyDecoded0?[key0] = attributevalue0
                }
            }
        }
        key = keyDecoded0
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let conditionExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .conditionExpression)
        conditionExpression = conditionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [String:String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [String:String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
        let expressionAttributeValuesContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .expressionAttributeValues)
        var expressionAttributeValuesDecoded0: [String:AttributeValue]? = nil
        if let expressionAttributeValuesContainer = expressionAttributeValuesContainer {
            expressionAttributeValuesDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in expressionAttributeValuesContainer {
                if let attributevalue0 = attributevalue0 {
                    expressionAttributeValuesDecoded0?[key0] = attributevalue0
                }
            }
        }
        expressionAttributeValues = expressionAttributeValuesDecoded0
        let returnValuesOnConditionCheckFailureDecoded = try containerValues.decodeIfPresent(ReturnValuesOnConditionCheckFailure.self, forKey: .returnValuesOnConditionCheckFailure)
        returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailureDecoded
    }
}

extension Delete: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Delete(conditionExpression: \(String(describing: conditionExpression)), expressionAttributeNames: \(String(describing: expressionAttributeNames)), expressionAttributeValues: \(String(describing: expressionAttributeValues)), key: \(String(describing: key)), returnValuesOnConditionCheckFailure: \(String(describing: returnValuesOnConditionCheckFailure)), tableName: \(String(describing: tableName)))"}
}

/// <p>Represents a request to perform a <code>DeleteItem</code> operation.</p>
public struct Delete: Equatable {
    /// <p>A condition that must be satisfied in order for a conditional delete to succeed.</p>
    public let conditionExpression: String?
    /// <p>One or more substitution tokens for attribute names in an expression.</p>
    public let expressionAttributeNames: [String:String]?
    /// <p>One or more values that can be substituted in an expression.</p>
    public let expressionAttributeValues: [String:AttributeValue]?
    /// <p>The primary key of the item to be deleted. Each element consists of an
    ///       attribute name and a value for that attribute.</p>
    public let key: [String:AttributeValue]?
    /// <p>Use <code>ReturnValuesOnConditionCheckFailure</code> to
    ///         get the item attributes if the <code>Delete</code> condition fails.
    ///         For <code>ReturnValuesOnConditionCheckFailure</code>, the valid
    ///         values are: NONE and ALL_OLD.</p>
    public let returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure?
    /// <p>Name of the table in which the item to be deleted resides.</p>
    public let tableName: String?

    public init (
        conditionExpression: String? = nil,
        expressionAttributeNames: [String:String]? = nil,
        expressionAttributeValues: [String:AttributeValue]? = nil,
        key: [String:AttributeValue]? = nil,
        returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure? = nil,
        tableName: String? = nil
    )
    {
        self.conditionExpression = conditionExpression
        self.expressionAttributeNames = expressionAttributeNames
        self.expressionAttributeValues = expressionAttributeValues
        self.key = key
        self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
        self.tableName = tableName
    }
}

public struct DeleteBackupInputBodyMiddleware: Middleware {
    public let id: String = "DeleteBackupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteBackupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteBackupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteBackupInput>
    public typealias MOutput = OperationOutput<DeleteBackupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteBackupOutputError>
}

extension DeleteBackupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteBackupInput(backupArn: \(String(describing: backupArn)))"}
}

extension DeleteBackupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case backupArn = "BackupArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupArn = backupArn {
            try encodeContainer.encode(backupArn, forKey: .backupArn)
        }
    }
}

public struct DeleteBackupInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteBackupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteBackupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteBackupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteBackupInput>
    public typealias MOutput = OperationOutput<DeleteBackupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteBackupOutputError>
}

public struct DeleteBackupInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteBackupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteBackupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteBackupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteBackupInput>
    public typealias MOutput = OperationOutput<DeleteBackupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteBackupOutputError>
}

public struct DeleteBackupInput: Equatable {
    /// <p>The ARN associated with the backup.</p>
    public let backupArn: String?

    public init (
        backupArn: String? = nil
    )
    {
        self.backupArn = backupArn
    }
}

struct DeleteBackupInputBody: Equatable {
    public let backupArn: String?
}

extension DeleteBackupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case backupArn = "BackupArn"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .backupArn)
        backupArn = backupArnDecoded
    }
}

extension DeleteBackupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteBackupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BackupInUseException" : self = .backupInUseException(try BackupInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BackupNotFoundException" : self = .backupNotFoundException(try BackupNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteBackupOutputError: Equatable {
    case backupInUseException(BackupInUseException)
    case backupNotFoundException(BackupNotFoundException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBackupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteBackupOutputResponse(backupDescription: \(String(describing: backupDescription)))"}
}

extension DeleteBackupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeleteBackupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.backupDescription = output.backupDescription
        } else {
            self.backupDescription = nil
        }
    }
}

public struct DeleteBackupOutputResponse: Equatable {
    /// <p>Contains the description of the backup created for the table.</p>
    public let backupDescription: BackupDescription?

    public init (
        backupDescription: BackupDescription? = nil
    )
    {
        self.backupDescription = backupDescription
    }
}

struct DeleteBackupOutputResponseBody: Equatable {
    public let backupDescription: BackupDescription?
}

extension DeleteBackupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case backupDescription = "BackupDescription"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupDescriptionDecoded = try containerValues.decodeIfPresent(BackupDescription.self, forKey: .backupDescription)
        backupDescription = backupDescriptionDecoded
    }
}

extension DeleteGlobalSecondaryIndexAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case indexName = "IndexName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
    }
}

extension DeleteGlobalSecondaryIndexAction: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteGlobalSecondaryIndexAction(indexName: \(String(describing: indexName)))"}
}

/// <p>Represents a global secondary index to be deleted from an existing table.</p>
public struct DeleteGlobalSecondaryIndexAction: Equatable {
    /// <p>The name of the global secondary index to be deleted.</p>
    public let indexName: String?

    public init (
        indexName: String? = nil
    )
    {
        self.indexName = indexName
    }
}

public struct DeleteItemInputBodyMiddleware: Middleware {
    public let id: String = "DeleteItemInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteItemInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteItemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteItemInput>
    public typealias MOutput = OperationOutput<DeleteItemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteItemOutputError>
}

extension DeleteItemInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteItemInput(conditionExpression: \(String(describing: conditionExpression)), conditionalOperator: \(String(describing: conditionalOperator)), expected: \(String(describing: expected)), expressionAttributeNames: \(String(describing: expressionAttributeNames)), expressionAttributeValues: \(String(describing: expressionAttributeValues)), key: \(String(describing: key)), returnConsumedCapacity: \(String(describing: returnConsumedCapacity)), returnItemCollectionMetrics: \(String(describing: returnItemCollectionMetrics)), returnValues: \(String(describing: returnValues)), tableName: \(String(describing: tableName)))"}
}

extension DeleteItemInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case conditionExpression = "ConditionExpression"
        case conditionalOperator = "ConditionalOperator"
        case expected = "Expected"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case key = "Key"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
        case returnValues = "ReturnValues"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditionExpression = conditionExpression {
            try encodeContainer.encode(conditionExpression, forKey: .conditionExpression)
        }
        if let conditionalOperator = conditionalOperator {
            try encodeContainer.encode(conditionalOperator.rawValue, forKey: .conditionalOperator)
        }
        if let expected = expected {
            var expectedContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expected)
            for (dictKey0, expectedattributemap0) in expected {
                try expectedContainer.encode(expectedattributemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionattributenamemap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionattributenamemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeValues = expressionAttributeValues {
            var expressionAttributeValuesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expressionAttributeValues)
            for (dictKey0, expressionattributevaluemap0) in expressionAttributeValues {
                try expressionAttributeValuesContainer.encode(expressionattributevaluemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let key = key {
            var keyContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .key)
            for (dictKey0, key0) in key {
                try keyContainer.encode(key0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let returnConsumedCapacity = returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let returnItemCollectionMetrics = returnItemCollectionMetrics {
            try encodeContainer.encode(returnItemCollectionMetrics.rawValue, forKey: .returnItemCollectionMetrics)
        }
        if let returnValues = returnValues {
            try encodeContainer.encode(returnValues.rawValue, forKey: .returnValues)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

public struct DeleteItemInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteItemInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteItemInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteItemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteItemInput>
    public typealias MOutput = OperationOutput<DeleteItemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteItemOutputError>
}

public struct DeleteItemInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteItemInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteItemInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteItemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteItemInput>
    public typealias MOutput = OperationOutput<DeleteItemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteItemOutputError>
}

/// <p>Represents the input of a <code>DeleteItem</code> operation.</p>
public struct DeleteItemInput: Equatable {
    /// <p>A condition that must be satisfied in order for a conditional <code>DeleteItem</code> to
    ///       succeed.</p>
    ///          <p>An expression can contain any of the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Functions: <code>attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size</code>
    ///                </p>
    ///                <p>These function names are case-sensitive.</p>
    ///             </li>
    ///             <li>
    ///                <p>Comparison operators: <code>= | <> |
    ///             < | > | <= | >= |
    ///             BETWEEN | IN </code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p> Logical operators: <code>AND | OR | NOT</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>For more information about condition expressions, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer
    ///                 Guide</i>.</p>
    public let conditionExpression: String?
    /// <p>This is a legacy parameter.  Use <code>ConditionExpression</code> instead.  For more information, see
    ///           <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let conditionalOperator: ConditionalOperator?
    /// <p>This is a legacy parameter.  Use <code>ConditionExpression</code> instead.  For more information, see
    ///           <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html">Expected</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let expected: [String:ExpectedAttributeValue]?
    /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
    ///          <ul>
    ///             <li>
    ///                <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
    ///             </li>
    ///             <li>
    ///                <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
    ///             </li>
    ///             <li>
    ///                <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
    ///             </li>
    ///          </ul>
    ///          <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Percentile</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>{"#P":"Percentile"}</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>You could then use this substitution in an expression, as in this example:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>#P = :val</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
    ///          </note>
    ///          <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
    ///                 Guide</i>.</p>
    public let expressionAttributeNames: [String:String]?
    /// <p>One or more values that can be substituted in an expression.</p>
    ///          <p>Use the <b>:</b> (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the <i>ProductStatus</i> attribute was one of the following: </p>
    ///          <p>
    ///             <code>Available | Backordered | Discontinued</code>
    ///          </p>
    ///          <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>
    ///          <p>
    ///             <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code>
    ///          </p>
    ///          <p>You could then use these values in an expression, such as this:</p>
    ///          <p>
    ///             <code>ProductStatus IN (:avail, :back, :disc)</code>
    ///          </p>
    ///         <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer
    ///                 Guide</i>.</p>
    public let expressionAttributeValues: [String:AttributeValue]?
    /// <p>A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of
    ///       the item to delete.</p>
    ///          <p>For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</p>
    public let key: [String:AttributeValue]?
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    ///                <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    ///             </li>
    ///          </ul>
    public let returnConsumedCapacity: ReturnConsumedCapacity?
    /// <p>Determines whether item collection metrics are returned.  If set to <code>SIZE</code>, the response includes statistics about item collections, if any, that were modified during
    ///       the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned.</p>
    public let returnItemCollectionMetrics: ReturnItemCollectionMetrics?
    /// <p>Use <code>ReturnValues</code> if you want to get the item attributes as they appeared before they
    ///       were deleted. For <code>DeleteItem</code>, the valid values are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is
    ///             <code>NONE</code>, then nothing is returned. (This setting is the default for
    ///             <code>ReturnValues</code>.)</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ALL_OLD</code> - The content of the old item is returned.</p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>The <code>ReturnValues</code> parameter is used by several DynamoDB operations; however,
    ///         <code>DeleteItem</code> does not recognize any values other than <code>NONE</code> or
    ///         <code>ALL_OLD</code>.</p>
    ///          </note>
    public let returnValues: ReturnValue?
    /// <p>The name of the table from which to delete the item.</p>
    public let tableName: String?

    public init (
        conditionExpression: String? = nil,
        conditionalOperator: ConditionalOperator? = nil,
        expected: [String:ExpectedAttributeValue]? = nil,
        expressionAttributeNames: [String:String]? = nil,
        expressionAttributeValues: [String:AttributeValue]? = nil,
        key: [String:AttributeValue]? = nil,
        returnConsumedCapacity: ReturnConsumedCapacity? = nil,
        returnItemCollectionMetrics: ReturnItemCollectionMetrics? = nil,
        returnValues: ReturnValue? = nil,
        tableName: String? = nil
    )
    {
        self.conditionExpression = conditionExpression
        self.conditionalOperator = conditionalOperator
        self.expected = expected
        self.expressionAttributeNames = expressionAttributeNames
        self.expressionAttributeValues = expressionAttributeValues
        self.key = key
        self.returnConsumedCapacity = returnConsumedCapacity
        self.returnItemCollectionMetrics = returnItemCollectionMetrics
        self.returnValues = returnValues
        self.tableName = tableName
    }
}

struct DeleteItemInputBody: Equatable {
    public let tableName: String?
    public let key: [String:AttributeValue]?
    public let expected: [String:ExpectedAttributeValue]?
    public let conditionalOperator: ConditionalOperator?
    public let returnValues: ReturnValue?
    public let returnConsumedCapacity: ReturnConsumedCapacity?
    public let returnItemCollectionMetrics: ReturnItemCollectionMetrics?
    public let conditionExpression: String?
    public let expressionAttributeNames: [String:String]?
    public let expressionAttributeValues: [String:AttributeValue]?
}

extension DeleteItemInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case conditionExpression = "ConditionExpression"
        case conditionalOperator = "ConditionalOperator"
        case expected = "Expected"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case key = "Key"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
        case returnValues = "ReturnValues"
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let keyContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .key)
        var keyDecoded0: [String:AttributeValue]? = nil
        if let keyContainer = keyContainer {
            keyDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in keyContainer {
                if let attributevalue0 = attributevalue0 {
                    keyDecoded0?[key0] = attributevalue0
                }
            }
        }
        key = keyDecoded0
        let expectedContainer = try containerValues.decodeIfPresent([String: ExpectedAttributeValue?].self, forKey: .expected)
        var expectedDecoded0: [String:ExpectedAttributeValue]? = nil
        if let expectedContainer = expectedContainer {
            expectedDecoded0 = [String:ExpectedAttributeValue]()
            for (key0, expectedattributevalue0) in expectedContainer {
                if let expectedattributevalue0 = expectedattributevalue0 {
                    expectedDecoded0?[key0] = expectedattributevalue0
                }
            }
        }
        expected = expectedDecoded0
        let conditionalOperatorDecoded = try containerValues.decodeIfPresent(ConditionalOperator.self, forKey: .conditionalOperator)
        conditionalOperator = conditionalOperatorDecoded
        let returnValuesDecoded = try containerValues.decodeIfPresent(ReturnValue.self, forKey: .returnValues)
        returnValues = returnValuesDecoded
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
        let returnItemCollectionMetricsDecoded = try containerValues.decodeIfPresent(ReturnItemCollectionMetrics.self, forKey: .returnItemCollectionMetrics)
        returnItemCollectionMetrics = returnItemCollectionMetricsDecoded
        let conditionExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .conditionExpression)
        conditionExpression = conditionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [String:String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [String:String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
        let expressionAttributeValuesContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .expressionAttributeValues)
        var expressionAttributeValuesDecoded0: [String:AttributeValue]? = nil
        if let expressionAttributeValuesContainer = expressionAttributeValuesContainer {
            expressionAttributeValuesDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in expressionAttributeValuesContainer {
                if let attributevalue0 = attributevalue0 {
                    expressionAttributeValuesDecoded0?[key0] = attributevalue0
                }
            }
        }
        expressionAttributeValues = expressionAttributeValuesDecoded0
    }
}

extension DeleteItemOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteItemOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ConditionalCheckFailedException" : self = .conditionalCheckFailedException(try ConditionalCheckFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ItemCollectionSizeLimitExceededException" : self = .itemCollectionSizeLimitExceededException(try ItemCollectionSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TransactionConflictException" : self = .transactionConflictException(try TransactionConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteItemOutputError: Equatable {
    case conditionalCheckFailedException(ConditionalCheckFailedException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case itemCollectionSizeLimitExceededException(ItemCollectionSizeLimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case requestLimitExceeded(RequestLimitExceeded)
    case resourceNotFoundException(ResourceNotFoundException)
    case transactionConflictException(TransactionConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteItemOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteItemOutputResponse(attributes: \(String(describing: attributes)), consumedCapacity: \(String(describing: consumedCapacity)), itemCollectionMetrics: \(String(describing: itemCollectionMetrics)))"}
}

extension DeleteItemOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeleteItemOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.attributes = output.attributes
            self.consumedCapacity = output.consumedCapacity
            self.itemCollectionMetrics = output.itemCollectionMetrics
        } else {
            self.attributes = nil
            self.consumedCapacity = nil
            self.itemCollectionMetrics = nil
        }
    }
}

/// <p>Represents the output of a <code>DeleteItem</code> operation.</p>
public struct DeleteItemOutputResponse: Equatable {
    /// <p>A map of attribute names to <code>AttributeValue</code> objects, representing the item as it
    ///       appeared before the <code>DeleteItem</code> operation. This map appears in the response only if
    ///         <code>ReturnValues</code> was specified as <code>ALL_OLD</code> in the request.</p>
    public let attributes: [String:AttributeValue]?
    /// <p>The capacity units consumed by the <code>DeleteItem</code> operation. The data
    ///             returned includes the total provisioned throughput consumed, along with statistics for
    ///             the table and any indexes involved in the operation. <code>ConsumedCapacity</code> is
    ///             only returned if the <code>ReturnConsumedCapacity</code> parameter was specified. For
    ///             more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned Mode</a> in the <i>Amazon DynamoDB Developer
    ///                 Guide</i>.</p>
    public let consumedCapacity: ConsumedCapacity?
    /// <p>Information about item collections, if any, that were affected by the
    ///                 <code>DeleteItem</code> operation.
    ///                 <code>ItemCollectionMetrics</code> is only returned if the
    ///                 <code>ReturnItemCollectionMetrics</code> parameter was specified. If the
    ///             table does not have any local secondary indexes, this information is not returned in the
    ///             response.</p>
    ///          <p>Each <code>ItemCollectionMetrics</code>
    ///         element consists of:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ItemCollectionKey</code> - The partition key value of the item
    ///           collection. This is the same as the partition key value of the item itself.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SizeEstimateRangeGB</code> - An estimate of item collection size,
    ///           in gigabytes. This value is a two-element array
    ///           containing a lower bound and an upper bound for the
    ///           estimate. The estimate includes the size of all the
    ///           items in the table, plus the size of all attributes
    ///           projected into all of the local secondary indexes on that
    ///           table. Use this estimate to measure whether a local secondary index is approaching its size limit.</p>
    ///                <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p>
    ///             </li>
    ///          </ul>
    public let itemCollectionMetrics: ItemCollectionMetrics?

    public init (
        attributes: [String:AttributeValue]? = nil,
        consumedCapacity: ConsumedCapacity? = nil,
        itemCollectionMetrics: ItemCollectionMetrics? = nil
    )
    {
        self.attributes = attributes
        self.consumedCapacity = consumedCapacity
        self.itemCollectionMetrics = itemCollectionMetrics
    }
}

struct DeleteItemOutputResponseBody: Equatable {
    public let attributes: [String:AttributeValue]?
    public let consumedCapacity: ConsumedCapacity?
    public let itemCollectionMetrics: ItemCollectionMetrics?
}

extension DeleteItemOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attributes = "Attributes"
        case consumedCapacity = "ConsumedCapacity"
        case itemCollectionMetrics = "ItemCollectionMetrics"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributesContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .attributes)
        var attributesDecoded0: [String:AttributeValue]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in attributesContainer {
                if let attributevalue0 = attributevalue0 {
                    attributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        attributes = attributesDecoded0
        let consumedCapacityDecoded = try containerValues.decodeIfPresent(ConsumedCapacity.self, forKey: .consumedCapacity)
        consumedCapacity = consumedCapacityDecoded
        let itemCollectionMetricsDecoded = try containerValues.decodeIfPresent(ItemCollectionMetrics.self, forKey: .itemCollectionMetrics)
        itemCollectionMetrics = itemCollectionMetricsDecoded
    }
}

extension DeleteReplicaAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case regionName = "RegionName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let regionName = regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .regionName)
        regionName = regionNameDecoded
    }
}

extension DeleteReplicaAction: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteReplicaAction(regionName: \(String(describing: regionName)))"}
}

/// <p>Represents a replica to be removed.</p>
public struct DeleteReplicaAction: Equatable {
    /// <p>The Region of the replica to be removed.</p>
    public let regionName: String?

    public init (
        regionName: String? = nil
    )
    {
        self.regionName = regionName
    }
}

extension DeleteReplicationGroupMemberAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case regionName = "RegionName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let regionName = regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .regionName)
        regionName = regionNameDecoded
    }
}

extension DeleteReplicationGroupMemberAction: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteReplicationGroupMemberAction(regionName: \(String(describing: regionName)))"}
}

/// <p>Represents a replica to be deleted.</p>
public struct DeleteReplicationGroupMemberAction: Equatable {
    /// <p>The Region where the replica exists.</p>
    public let regionName: String?

    public init (
        regionName: String? = nil
    )
    {
        self.regionName = regionName
    }
}

extension DeleteRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case key = "Key"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            var keyContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .key)
            for (dictKey0, key0) in key {
                try keyContainer.encode(key0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .key)
        var keyDecoded0: [String:AttributeValue]? = nil
        if let keyContainer = keyContainer {
            keyDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in keyContainer {
                if let attributevalue0 = attributevalue0 {
                    keyDecoded0?[key0] = attributevalue0
                }
            }
        }
        key = keyDecoded0
    }
}

extension DeleteRequest: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteRequest(key: \(String(describing: key)))"}
}

/// <p>Represents a request to perform a <code>DeleteItem</code> operation on an item.</p>
public struct DeleteRequest: Equatable {
    /// <p>A map of attribute name to attribute values, representing the primary key of the item to delete. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema.</p>
    public let key: [String:AttributeValue]?

    public init (
        key: [String:AttributeValue]? = nil
    )
    {
        self.key = key
    }
}

public struct DeleteTableInputBodyMiddleware: Middleware {
    public let id: String = "DeleteTableInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteTableInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteTableOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteTableInput>
    public typealias MOutput = OperationOutput<DeleteTableOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteTableOutputError>
}

extension DeleteTableInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteTableInput(tableName: \(String(describing: tableName)))"}
}

extension DeleteTableInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

public struct DeleteTableInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteTableInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteTableInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteTableOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteTableInput>
    public typealias MOutput = OperationOutput<DeleteTableOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteTableOutputError>
}

public struct DeleteTableInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteTableInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteTableInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteTableOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteTableInput>
    public typealias MOutput = OperationOutput<DeleteTableOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteTableOutputError>
}

/// <p>Represents the input of a <code>DeleteTable</code> operation.</p>
public struct DeleteTableInput: Equatable {
    /// <p>The name of the table to delete.</p>
    public let tableName: String?

    public init (
        tableName: String? = nil
    )
    {
        self.tableName = tableName
    }
}

struct DeleteTableInputBody: Equatable {
    public let tableName: String?
}

extension DeleteTableInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
    }
}

extension DeleteTableOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteTableOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteTableOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTableOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteTableOutputResponse(tableDescription: \(String(describing: tableDescription)))"}
}

extension DeleteTableOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeleteTableOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.tableDescription = output.tableDescription
        } else {
            self.tableDescription = nil
        }
    }
}

/// <p>Represents the output of a <code>DeleteTable</code> operation.</p>
public struct DeleteTableOutputResponse: Equatable {
    /// <p>Represents the properties of a table.</p>
    public let tableDescription: TableDescription?

    public init (
        tableDescription: TableDescription? = nil
    )
    {
        self.tableDescription = tableDescription
    }
}

struct DeleteTableOutputResponseBody: Equatable {
    public let tableDescription: TableDescription?
}

extension DeleteTableOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tableDescription = "TableDescription"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableDescriptionDecoded = try containerValues.decodeIfPresent(TableDescription.self, forKey: .tableDescription)
        tableDescription = tableDescriptionDecoded
    }
}

public struct DescribeBackupInputBodyMiddleware: Middleware {
    public let id: String = "DescribeBackupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeBackupInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeBackupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeBackupInput>
    public typealias MOutput = OperationOutput<DescribeBackupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeBackupOutputError>
}

extension DescribeBackupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeBackupInput(backupArn: \(String(describing: backupArn)))"}
}

extension DescribeBackupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case backupArn = "BackupArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupArn = backupArn {
            try encodeContainer.encode(backupArn, forKey: .backupArn)
        }
    }
}

public struct DescribeBackupInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeBackupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeBackupInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeBackupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeBackupInput>
    public typealias MOutput = OperationOutput<DescribeBackupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeBackupOutputError>
}

public struct DescribeBackupInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeBackupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeBackupInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeBackupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeBackupInput>
    public typealias MOutput = OperationOutput<DescribeBackupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeBackupOutputError>
}

public struct DescribeBackupInput: Equatable {
    /// <p>The Amazon Resource Name (ARN) associated with the backup.</p>
    public let backupArn: String?

    public init (
        backupArn: String? = nil
    )
    {
        self.backupArn = backupArn
    }
}

struct DescribeBackupInputBody: Equatable {
    public let backupArn: String?
}

extension DescribeBackupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case backupArn = "BackupArn"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .backupArn)
        backupArn = backupArnDecoded
    }
}

extension DescribeBackupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeBackupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BackupNotFoundException" : self = .backupNotFoundException(try BackupNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeBackupOutputError: Equatable {
    case backupNotFoundException(BackupNotFoundException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeBackupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeBackupOutputResponse(backupDescription: \(String(describing: backupDescription)))"}
}

extension DescribeBackupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeBackupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.backupDescription = output.backupDescription
        } else {
            self.backupDescription = nil
        }
    }
}

public struct DescribeBackupOutputResponse: Equatable {
    /// <p>Contains the description of the backup created for the table.</p>
    public let backupDescription: BackupDescription?

    public init (
        backupDescription: BackupDescription? = nil
    )
    {
        self.backupDescription = backupDescription
    }
}

struct DescribeBackupOutputResponseBody: Equatable {
    public let backupDescription: BackupDescription?
}

extension DescribeBackupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case backupDescription = "BackupDescription"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupDescriptionDecoded = try containerValues.decodeIfPresent(BackupDescription.self, forKey: .backupDescription)
        backupDescription = backupDescriptionDecoded
    }
}

public struct DescribeContinuousBackupsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeContinuousBackupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeContinuousBackupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeContinuousBackupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeContinuousBackupsInput>
    public typealias MOutput = OperationOutput<DescribeContinuousBackupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeContinuousBackupsOutputError>
}

extension DescribeContinuousBackupsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeContinuousBackupsInput(tableName: \(String(describing: tableName)))"}
}

extension DescribeContinuousBackupsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

public struct DescribeContinuousBackupsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeContinuousBackupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeContinuousBackupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeContinuousBackupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeContinuousBackupsInput>
    public typealias MOutput = OperationOutput<DescribeContinuousBackupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeContinuousBackupsOutputError>
}

public struct DescribeContinuousBackupsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeContinuousBackupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeContinuousBackupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeContinuousBackupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeContinuousBackupsInput>
    public typealias MOutput = OperationOutput<DescribeContinuousBackupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeContinuousBackupsOutputError>
}

public struct DescribeContinuousBackupsInput: Equatable {
    /// <p>Name of the table for which the customer wants to check the continuous backups and point in time recovery settings.</p>
    public let tableName: String?

    public init (
        tableName: String? = nil
    )
    {
        self.tableName = tableName
    }
}

struct DescribeContinuousBackupsInputBody: Equatable {
    public let tableName: String?
}

extension DescribeContinuousBackupsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
    }
}

extension DescribeContinuousBackupsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeContinuousBackupsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TableNotFoundException" : self = .tableNotFoundException(try TableNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeContinuousBackupsOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case tableNotFoundException(TableNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeContinuousBackupsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeContinuousBackupsOutputResponse(continuousBackupsDescription: \(String(describing: continuousBackupsDescription)))"}
}

extension DescribeContinuousBackupsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeContinuousBackupsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.continuousBackupsDescription = output.continuousBackupsDescription
        } else {
            self.continuousBackupsDescription = nil
        }
    }
}

public struct DescribeContinuousBackupsOutputResponse: Equatable {
    /// <p>Represents the continuous backups and point in time recovery settings on the table.</p>
    public let continuousBackupsDescription: ContinuousBackupsDescription?

    public init (
        continuousBackupsDescription: ContinuousBackupsDescription? = nil
    )
    {
        self.continuousBackupsDescription = continuousBackupsDescription
    }
}

struct DescribeContinuousBackupsOutputResponseBody: Equatable {
    public let continuousBackupsDescription: ContinuousBackupsDescription?
}

extension DescribeContinuousBackupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case continuousBackupsDescription = "ContinuousBackupsDescription"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let continuousBackupsDescriptionDecoded = try containerValues.decodeIfPresent(ContinuousBackupsDescription.self, forKey: .continuousBackupsDescription)
        continuousBackupsDescription = continuousBackupsDescriptionDecoded
    }
}

public struct DescribeContributorInsightsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeContributorInsightsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeContributorInsightsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeContributorInsightsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeContributorInsightsInput>
    public typealias MOutput = OperationOutput<DescribeContributorInsightsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeContributorInsightsOutputError>
}

extension DescribeContributorInsightsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeContributorInsightsInput(indexName: \(String(describing: indexName)), tableName: \(String(describing: tableName)))"}
}

extension DescribeContributorInsightsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case indexName = "IndexName"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

public struct DescribeContributorInsightsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeContributorInsightsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeContributorInsightsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeContributorInsightsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeContributorInsightsInput>
    public typealias MOutput = OperationOutput<DescribeContributorInsightsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeContributorInsightsOutputError>
}

public struct DescribeContributorInsightsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeContributorInsightsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeContributorInsightsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeContributorInsightsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeContributorInsightsInput>
    public typealias MOutput = OperationOutput<DescribeContributorInsightsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeContributorInsightsOutputError>
}

public struct DescribeContributorInsightsInput: Equatable {
    /// <p>The name of the global secondary index to describe, if applicable.</p>
    public let indexName: String?
    /// <p>The name of the table to describe.</p>
    public let tableName: String?

    public init (
        indexName: String? = nil,
        tableName: String? = nil
    )
    {
        self.indexName = indexName
        self.tableName = tableName
    }
}

struct DescribeContributorInsightsInputBody: Equatable {
    public let tableName: String?
    public let indexName: String?
}

extension DescribeContributorInsightsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case indexName = "IndexName"
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
    }
}

extension DescribeContributorInsightsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeContributorInsightsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeContributorInsightsOutputError: Equatable {
    case internalServerError(InternalServerError)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeContributorInsightsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeContributorInsightsOutputResponse(contributorInsightsRuleList: \(String(describing: contributorInsightsRuleList)), contributorInsightsStatus: \(String(describing: contributorInsightsStatus)), failureException: \(String(describing: failureException)), indexName: \(String(describing: indexName)), lastUpdateDateTime: \(String(describing: lastUpdateDateTime)), tableName: \(String(describing: tableName)))"}
}

extension DescribeContributorInsightsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeContributorInsightsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.contributorInsightsRuleList = output.contributorInsightsRuleList
            self.contributorInsightsStatus = output.contributorInsightsStatus
            self.failureException = output.failureException
            self.indexName = output.indexName
            self.lastUpdateDateTime = output.lastUpdateDateTime
            self.tableName = output.tableName
        } else {
            self.contributorInsightsRuleList = nil
            self.contributorInsightsStatus = nil
            self.failureException = nil
            self.indexName = nil
            self.lastUpdateDateTime = nil
            self.tableName = nil
        }
    }
}

public struct DescribeContributorInsightsOutputResponse: Equatable {
    /// <p>List of names of the associated Alpine rules.</p>
    public let contributorInsightsRuleList: [String]?
    /// <p>Current Status contributor insights.</p>
    public let contributorInsightsStatus: ContributorInsightsStatus?
    /// <p>Returns information about the last failure that encountered.</p>
    ///          <p>The most common exceptions for a FAILED status are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>LimitExceededException - 	Per-account Amazon CloudWatch Contributor Insights rule limit reached. Please disable Contributor Insights for
    ///          other tables/indexes OR disable Contributor Insights rules before retrying.</p>
    ///             </li>
    ///             <li>
    ///                <p>AccessDeniedException - Amazon CloudWatch Contributor Insights rules cannot be modified due to insufficient permissions.</p>
    ///             </li>
    ///             <li>
    ///                <p>AccessDeniedException - Failed to create service-linked role for Contributor Insights due to insufficient permissions.</p>
    ///             </li>
    ///             <li>
    ///                <p>InternalServerError - Failed to create Amazon CloudWatch Contributor Insights rules. Please retry request.</p>
    ///             </li>
    ///          </ul>
    public let failureException: FailureException?
    /// <p>The name of the global secondary index being described.</p>
    public let indexName: String?
    /// <p>Timestamp of the last time the status was changed.</p>
    public let lastUpdateDateTime: Date?
    /// <p>The name of the table being described.</p>
    public let tableName: String?

    public init (
        contributorInsightsRuleList: [String]? = nil,
        contributorInsightsStatus: ContributorInsightsStatus? = nil,
        failureException: FailureException? = nil,
        indexName: String? = nil,
        lastUpdateDateTime: Date? = nil,
        tableName: String? = nil
    )
    {
        self.contributorInsightsRuleList = contributorInsightsRuleList
        self.contributorInsightsStatus = contributorInsightsStatus
        self.failureException = failureException
        self.indexName = indexName
        self.lastUpdateDateTime = lastUpdateDateTime
        self.tableName = tableName
    }
}

struct DescribeContributorInsightsOutputResponseBody: Equatable {
    public let tableName: String?
    public let indexName: String?
    public let contributorInsightsRuleList: [String]?
    public let contributorInsightsStatus: ContributorInsightsStatus?
    public let lastUpdateDateTime: Date?
    public let failureException: FailureException?
}

extension DescribeContributorInsightsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case contributorInsightsRuleList = "ContributorInsightsRuleList"
        case contributorInsightsStatus = "ContributorInsightsStatus"
        case failureException = "FailureException"
        case indexName = "IndexName"
        case lastUpdateDateTime = "LastUpdateDateTime"
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let contributorInsightsRuleListContainer = try containerValues.decodeIfPresent([String?].self, forKey: .contributorInsightsRuleList)
        var contributorInsightsRuleListDecoded0:[String]? = nil
        if let contributorInsightsRuleListContainer = contributorInsightsRuleListContainer {
            contributorInsightsRuleListDecoded0 = [String]()
            for string0 in contributorInsightsRuleListContainer {
                if let string0 = string0 {
                    contributorInsightsRuleListDecoded0?.append(string0)
                }
            }
        }
        contributorInsightsRuleList = contributorInsightsRuleListDecoded0
        let contributorInsightsStatusDecoded = try containerValues.decodeIfPresent(ContributorInsightsStatus.self, forKey: .contributorInsightsStatus)
        contributorInsightsStatus = contributorInsightsStatusDecoded
        let lastUpdateDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdateDateTime)
        lastUpdateDateTime = lastUpdateDateTimeDecoded
        let failureExceptionDecoded = try containerValues.decodeIfPresent(FailureException.self, forKey: .failureException)
        failureException = failureExceptionDecoded
    }
}

extension DescribeEndpointsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeEndpointsInput()"}
}

extension DescribeEndpointsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DescribeEndpointsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeEndpointsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeEndpointsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeEndpointsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeEndpointsInput>
    public typealias MOutput = OperationOutput<DescribeEndpointsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeEndpointsOutputError>
}

public struct DescribeEndpointsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeEndpointsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeEndpointsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeEndpointsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeEndpointsInput>
    public typealias MOutput = OperationOutput<DescribeEndpointsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeEndpointsOutputError>
}

public struct DescribeEndpointsInput: Equatable {

    public init() {}
}

struct DescribeEndpointsInputBody: Equatable {
}

extension DescribeEndpointsInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DescribeEndpointsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeEndpointsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeEndpointsOutputError: Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEndpointsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeEndpointsOutputResponse(endpoints: \(String(describing: endpoints)))"}
}

extension DescribeEndpointsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeEndpointsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.endpoints = output.endpoints
        } else {
            self.endpoints = nil
        }
    }
}

public struct DescribeEndpointsOutputResponse: Equatable {
    /// <p>List of endpoints.</p>
    public let endpoints: [Endpoint]?

    public init (
        endpoints: [Endpoint]? = nil
    )
    {
        self.endpoints = endpoints
    }
}

struct DescribeEndpointsOutputResponseBody: Equatable {
    public let endpoints: [Endpoint]?
}

extension DescribeEndpointsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case endpoints = "Endpoints"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointsContainer = try containerValues.decodeIfPresent([Endpoint?].self, forKey: .endpoints)
        var endpointsDecoded0:[Endpoint]? = nil
        if let endpointsContainer = endpointsContainer {
            endpointsDecoded0 = [Endpoint]()
            for structure0 in endpointsContainer {
                if let structure0 = structure0 {
                    endpointsDecoded0?.append(structure0)
                }
            }
        }
        endpoints = endpointsDecoded0
    }
}

public struct DescribeExportInputBodyMiddleware: Middleware {
    public let id: String = "DescribeExportInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeExportInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeExportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeExportInput>
    public typealias MOutput = OperationOutput<DescribeExportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeExportOutputError>
}

extension DescribeExportInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeExportInput(exportArn: \(String(describing: exportArn)))"}
}

extension DescribeExportInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case exportArn = "ExportArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exportArn = exportArn {
            try encodeContainer.encode(exportArn, forKey: .exportArn)
        }
    }
}

public struct DescribeExportInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeExportInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeExportInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeExportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeExportInput>
    public typealias MOutput = OperationOutput<DescribeExportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeExportOutputError>
}

public struct DescribeExportInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeExportInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeExportInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeExportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeExportInput>
    public typealias MOutput = OperationOutput<DescribeExportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeExportOutputError>
}

public struct DescribeExportInput: Equatable {
    /// <p>The Amazon Resource Name (ARN) associated with the export.</p>
    public let exportArn: String?

    public init (
        exportArn: String? = nil
    )
    {
        self.exportArn = exportArn
    }
}

struct DescribeExportInputBody: Equatable {
    public let exportArn: String?
}

extension DescribeExportInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case exportArn = "ExportArn"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .exportArn)
        exportArn = exportArnDecoded
    }
}

extension DescribeExportOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeExportOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ExportNotFoundException" : self = .exportNotFoundException(try ExportNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeExportOutputError: Equatable {
    case exportNotFoundException(ExportNotFoundException)
    case internalServerError(InternalServerError)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeExportOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeExportOutputResponse(exportDescription: \(String(describing: exportDescription)))"}
}

extension DescribeExportOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeExportOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.exportDescription = output.exportDescription
        } else {
            self.exportDescription = nil
        }
    }
}

public struct DescribeExportOutputResponse: Equatable {
    /// <p>Represents the properties of the export.</p>
    public let exportDescription: ExportDescription?

    public init (
        exportDescription: ExportDescription? = nil
    )
    {
        self.exportDescription = exportDescription
    }
}

struct DescribeExportOutputResponseBody: Equatable {
    public let exportDescription: ExportDescription?
}

extension DescribeExportOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case exportDescription = "ExportDescription"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportDescriptionDecoded = try containerValues.decodeIfPresent(ExportDescription.self, forKey: .exportDescription)
        exportDescription = exportDescriptionDecoded
    }
}

public struct DescribeGlobalTableInputBodyMiddleware: Middleware {
    public let id: String = "DescribeGlobalTableInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGlobalTableInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGlobalTableOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGlobalTableInput>
    public typealias MOutput = OperationOutput<DescribeGlobalTableOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGlobalTableOutputError>
}

extension DescribeGlobalTableInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeGlobalTableInput(globalTableName: \(String(describing: globalTableName)))"}
}

extension DescribeGlobalTableInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case globalTableName = "GlobalTableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalTableName = globalTableName {
            try encodeContainer.encode(globalTableName, forKey: .globalTableName)
        }
    }
}

public struct DescribeGlobalTableInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeGlobalTableInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGlobalTableInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGlobalTableOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGlobalTableInput>
    public typealias MOutput = OperationOutput<DescribeGlobalTableOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGlobalTableOutputError>
}

public struct DescribeGlobalTableInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeGlobalTableInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGlobalTableInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGlobalTableOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGlobalTableInput>
    public typealias MOutput = OperationOutput<DescribeGlobalTableOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGlobalTableOutputError>
}

public struct DescribeGlobalTableInput: Equatable {
    /// <p>The name of the global table.</p>
    public let globalTableName: String?

    public init (
        globalTableName: String? = nil
    )
    {
        self.globalTableName = globalTableName
    }
}

struct DescribeGlobalTableInputBody: Equatable {
    public let globalTableName: String?
}

extension DescribeGlobalTableInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case globalTableName = "GlobalTableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .globalTableName)
        globalTableName = globalTableNameDecoded
    }
}

extension DescribeGlobalTableOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeGlobalTableOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "GlobalTableNotFoundException" : self = .globalTableNotFoundException(try GlobalTableNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeGlobalTableOutputError: Equatable {
    case globalTableNotFoundException(GlobalTableNotFoundException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeGlobalTableOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeGlobalTableOutputResponse(globalTableDescription: \(String(describing: globalTableDescription)))"}
}

extension DescribeGlobalTableOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeGlobalTableOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.globalTableDescription = output.globalTableDescription
        } else {
            self.globalTableDescription = nil
        }
    }
}

public struct DescribeGlobalTableOutputResponse: Equatable {
    /// <p>Contains the details of the global table.</p>
    public let globalTableDescription: GlobalTableDescription?

    public init (
        globalTableDescription: GlobalTableDescription? = nil
    )
    {
        self.globalTableDescription = globalTableDescription
    }
}

struct DescribeGlobalTableOutputResponseBody: Equatable {
    public let globalTableDescription: GlobalTableDescription?
}

extension DescribeGlobalTableOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case globalTableDescription = "GlobalTableDescription"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTableDescriptionDecoded = try containerValues.decodeIfPresent(GlobalTableDescription.self, forKey: .globalTableDescription)
        globalTableDescription = globalTableDescriptionDecoded
    }
}

public struct DescribeGlobalTableSettingsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeGlobalTableSettingsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGlobalTableSettingsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGlobalTableSettingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGlobalTableSettingsInput>
    public typealias MOutput = OperationOutput<DescribeGlobalTableSettingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGlobalTableSettingsOutputError>
}

extension DescribeGlobalTableSettingsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeGlobalTableSettingsInput(globalTableName: \(String(describing: globalTableName)))"}
}

extension DescribeGlobalTableSettingsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case globalTableName = "GlobalTableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalTableName = globalTableName {
            try encodeContainer.encode(globalTableName, forKey: .globalTableName)
        }
    }
}

public struct DescribeGlobalTableSettingsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeGlobalTableSettingsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGlobalTableSettingsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGlobalTableSettingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGlobalTableSettingsInput>
    public typealias MOutput = OperationOutput<DescribeGlobalTableSettingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGlobalTableSettingsOutputError>
}

public struct DescribeGlobalTableSettingsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeGlobalTableSettingsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeGlobalTableSettingsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeGlobalTableSettingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeGlobalTableSettingsInput>
    public typealias MOutput = OperationOutput<DescribeGlobalTableSettingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeGlobalTableSettingsOutputError>
}

public struct DescribeGlobalTableSettingsInput: Equatable {
    /// <p>The name of the global table to describe.</p>
    public let globalTableName: String?

    public init (
        globalTableName: String? = nil
    )
    {
        self.globalTableName = globalTableName
    }
}

struct DescribeGlobalTableSettingsInputBody: Equatable {
    public let globalTableName: String?
}

extension DescribeGlobalTableSettingsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case globalTableName = "GlobalTableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .globalTableName)
        globalTableName = globalTableNameDecoded
    }
}

extension DescribeGlobalTableSettingsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeGlobalTableSettingsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "GlobalTableNotFoundException" : self = .globalTableNotFoundException(try GlobalTableNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeGlobalTableSettingsOutputError: Equatable {
    case globalTableNotFoundException(GlobalTableNotFoundException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeGlobalTableSettingsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeGlobalTableSettingsOutputResponse(globalTableName: \(String(describing: globalTableName)), replicaSettings: \(String(describing: replicaSettings)))"}
}

extension DescribeGlobalTableSettingsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeGlobalTableSettingsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.globalTableName = output.globalTableName
            self.replicaSettings = output.replicaSettings
        } else {
            self.globalTableName = nil
            self.replicaSettings = nil
        }
    }
}

public struct DescribeGlobalTableSettingsOutputResponse: Equatable {
    /// <p>The name of the global table.</p>
    public let globalTableName: String?
    /// <p>The Region-specific settings for the global table.</p>
    public let replicaSettings: [ReplicaSettingsDescription]?

    public init (
        globalTableName: String? = nil,
        replicaSettings: [ReplicaSettingsDescription]? = nil
    )
    {
        self.globalTableName = globalTableName
        self.replicaSettings = replicaSettings
    }
}

struct DescribeGlobalTableSettingsOutputResponseBody: Equatable {
    public let globalTableName: String?
    public let replicaSettings: [ReplicaSettingsDescription]?
}

extension DescribeGlobalTableSettingsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case globalTableName = "GlobalTableName"
        case replicaSettings = "ReplicaSettings"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .globalTableName)
        globalTableName = globalTableNameDecoded
        let replicaSettingsContainer = try containerValues.decodeIfPresent([ReplicaSettingsDescription?].self, forKey: .replicaSettings)
        var replicaSettingsDecoded0:[ReplicaSettingsDescription]? = nil
        if let replicaSettingsContainer = replicaSettingsContainer {
            replicaSettingsDecoded0 = [ReplicaSettingsDescription]()
            for structure0 in replicaSettingsContainer {
                if let structure0 = structure0 {
                    replicaSettingsDecoded0?.append(structure0)
                }
            }
        }
        replicaSettings = replicaSettingsDecoded0
    }
}

public struct DescribeKinesisStreamingDestinationInputBodyMiddleware: Middleware {
    public let id: String = "DescribeKinesisStreamingDestinationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeKinesisStreamingDestinationInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeKinesisStreamingDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeKinesisStreamingDestinationInput>
    public typealias MOutput = OperationOutput<DescribeKinesisStreamingDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeKinesisStreamingDestinationOutputError>
}

extension DescribeKinesisStreamingDestinationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeKinesisStreamingDestinationInput(tableName: \(String(describing: tableName)))"}
}

extension DescribeKinesisStreamingDestinationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

public struct DescribeKinesisStreamingDestinationInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeKinesisStreamingDestinationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeKinesisStreamingDestinationInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeKinesisStreamingDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeKinesisStreamingDestinationInput>
    public typealias MOutput = OperationOutput<DescribeKinesisStreamingDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeKinesisStreamingDestinationOutputError>
}

public struct DescribeKinesisStreamingDestinationInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeKinesisStreamingDestinationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeKinesisStreamingDestinationInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeKinesisStreamingDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeKinesisStreamingDestinationInput>
    public typealias MOutput = OperationOutput<DescribeKinesisStreamingDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeKinesisStreamingDestinationOutputError>
}

public struct DescribeKinesisStreamingDestinationInput: Equatable {
    /// <p>The name of the table being described.</p>
    public let tableName: String?

    public init (
        tableName: String? = nil
    )
    {
        self.tableName = tableName
    }
}

struct DescribeKinesisStreamingDestinationInputBody: Equatable {
    public let tableName: String?
}

extension DescribeKinesisStreamingDestinationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
    }
}

extension DescribeKinesisStreamingDestinationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeKinesisStreamingDestinationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeKinesisStreamingDestinationOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeKinesisStreamingDestinationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeKinesisStreamingDestinationOutputResponse(kinesisDataStreamDestinations: \(String(describing: kinesisDataStreamDestinations)), tableName: \(String(describing: tableName)))"}
}

extension DescribeKinesisStreamingDestinationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeKinesisStreamingDestinationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.kinesisDataStreamDestinations = output.kinesisDataStreamDestinations
            self.tableName = output.tableName
        } else {
            self.kinesisDataStreamDestinations = nil
            self.tableName = nil
        }
    }
}

public struct DescribeKinesisStreamingDestinationOutputResponse: Equatable {
    /// <p>The list of replica structures for the table being described.</p>
    public let kinesisDataStreamDestinations: [KinesisDataStreamDestination]?
    /// <p>The name of the table being described.</p>
    public let tableName: String?

    public init (
        kinesisDataStreamDestinations: [KinesisDataStreamDestination]? = nil,
        tableName: String? = nil
    )
    {
        self.kinesisDataStreamDestinations = kinesisDataStreamDestinations
        self.tableName = tableName
    }
}

struct DescribeKinesisStreamingDestinationOutputResponseBody: Equatable {
    public let tableName: String?
    public let kinesisDataStreamDestinations: [KinesisDataStreamDestination]?
}

extension DescribeKinesisStreamingDestinationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case kinesisDataStreamDestinations = "KinesisDataStreamDestinations"
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let kinesisDataStreamDestinationsContainer = try containerValues.decodeIfPresent([KinesisDataStreamDestination?].self, forKey: .kinesisDataStreamDestinations)
        var kinesisDataStreamDestinationsDecoded0:[KinesisDataStreamDestination]? = nil
        if let kinesisDataStreamDestinationsContainer = kinesisDataStreamDestinationsContainer {
            kinesisDataStreamDestinationsDecoded0 = [KinesisDataStreamDestination]()
            for structure0 in kinesisDataStreamDestinationsContainer {
                if let structure0 = structure0 {
                    kinesisDataStreamDestinationsDecoded0?.append(structure0)
                }
            }
        }
        kinesisDataStreamDestinations = kinesisDataStreamDestinationsDecoded0
    }
}

extension DescribeLimitsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeLimitsInput()"}
}

extension DescribeLimitsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DescribeLimitsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeLimitsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLimitsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLimitsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLimitsInput>
    public typealias MOutput = OperationOutput<DescribeLimitsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLimitsOutputError>
}

public struct DescribeLimitsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeLimitsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeLimitsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeLimitsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeLimitsInput>
    public typealias MOutput = OperationOutput<DescribeLimitsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeLimitsOutputError>
}

/// <p>Represents the input of a <code>DescribeLimits</code> operation. Has no content.</p>
public struct DescribeLimitsInput: Equatable {

    public init() {}
}

struct DescribeLimitsInputBody: Equatable {
}

extension DescribeLimitsInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DescribeLimitsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLimitsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLimitsOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLimitsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeLimitsOutputResponse(accountMaxReadCapacityUnits: \(String(describing: accountMaxReadCapacityUnits)), accountMaxWriteCapacityUnits: \(String(describing: accountMaxWriteCapacityUnits)), tableMaxReadCapacityUnits: \(String(describing: tableMaxReadCapacityUnits)), tableMaxWriteCapacityUnits: \(String(describing: tableMaxWriteCapacityUnits)))"}
}

extension DescribeLimitsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeLimitsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.accountMaxReadCapacityUnits = output.accountMaxReadCapacityUnits
            self.accountMaxWriteCapacityUnits = output.accountMaxWriteCapacityUnits
            self.tableMaxReadCapacityUnits = output.tableMaxReadCapacityUnits
            self.tableMaxWriteCapacityUnits = output.tableMaxWriteCapacityUnits
        } else {
            self.accountMaxReadCapacityUnits = nil
            self.accountMaxWriteCapacityUnits = nil
            self.tableMaxReadCapacityUnits = nil
            self.tableMaxWriteCapacityUnits = nil
        }
    }
}

/// <p>Represents the output of a <code>DescribeLimits</code> operation.</p>
public struct DescribeLimitsOutputResponse: Equatable {
    /// <p>The maximum total read capacity units that your account allows you to provision across
    ///             all of your tables in this Region.</p>
    public let accountMaxReadCapacityUnits: Int?
    /// <p>The maximum total write capacity units that your account allows you to provision across
    ///             all of your tables in this Region.</p>
    public let accountMaxWriteCapacityUnits: Int?
    /// <p>The maximum read capacity units that your account allows you to provision for a new
    ///             table that you are creating in this Region, including the read capacity units
    ///             provisioned for its global secondary indexes (GSIs).</p>
    public let tableMaxReadCapacityUnits: Int?
    /// <p>The maximum write capacity units that your account allows you to provision for a new
    ///             table that you are creating in this Region, including the write capacity units
    ///             provisioned for its global secondary indexes (GSIs).</p>
    public let tableMaxWriteCapacityUnits: Int?

    public init (
        accountMaxReadCapacityUnits: Int? = nil,
        accountMaxWriteCapacityUnits: Int? = nil,
        tableMaxReadCapacityUnits: Int? = nil,
        tableMaxWriteCapacityUnits: Int? = nil
    )
    {
        self.accountMaxReadCapacityUnits = accountMaxReadCapacityUnits
        self.accountMaxWriteCapacityUnits = accountMaxWriteCapacityUnits
        self.tableMaxReadCapacityUnits = tableMaxReadCapacityUnits
        self.tableMaxWriteCapacityUnits = tableMaxWriteCapacityUnits
    }
}

struct DescribeLimitsOutputResponseBody: Equatable {
    public let accountMaxReadCapacityUnits: Int?
    public let accountMaxWriteCapacityUnits: Int?
    public let tableMaxReadCapacityUnits: Int?
    public let tableMaxWriteCapacityUnits: Int?
}

extension DescribeLimitsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accountMaxReadCapacityUnits = "AccountMaxReadCapacityUnits"
        case accountMaxWriteCapacityUnits = "AccountMaxWriteCapacityUnits"
        case tableMaxReadCapacityUnits = "TableMaxReadCapacityUnits"
        case tableMaxWriteCapacityUnits = "TableMaxWriteCapacityUnits"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountMaxReadCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .accountMaxReadCapacityUnits)
        accountMaxReadCapacityUnits = accountMaxReadCapacityUnitsDecoded
        let accountMaxWriteCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .accountMaxWriteCapacityUnits)
        accountMaxWriteCapacityUnits = accountMaxWriteCapacityUnitsDecoded
        let tableMaxReadCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .tableMaxReadCapacityUnits)
        tableMaxReadCapacityUnits = tableMaxReadCapacityUnitsDecoded
        let tableMaxWriteCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .tableMaxWriteCapacityUnits)
        tableMaxWriteCapacityUnits = tableMaxWriteCapacityUnitsDecoded
    }
}

public struct DescribeTableInputBodyMiddleware: Middleware {
    public let id: String = "DescribeTableInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeTableInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeTableOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeTableInput>
    public typealias MOutput = OperationOutput<DescribeTableOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeTableOutputError>
}

extension DescribeTableInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeTableInput(tableName: \(String(describing: tableName)))"}
}

extension DescribeTableInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

public struct DescribeTableInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeTableInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeTableInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeTableOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeTableInput>
    public typealias MOutput = OperationOutput<DescribeTableOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeTableOutputError>
}

public struct DescribeTableInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeTableInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeTableInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeTableOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeTableInput>
    public typealias MOutput = OperationOutput<DescribeTableOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeTableOutputError>
}

/// <p>Represents the input of a <code>DescribeTable</code> operation.</p>
public struct DescribeTableInput: Equatable {
    /// <p>The name of the table to describe.</p>
    public let tableName: String?

    public init (
        tableName: String? = nil
    )
    {
        self.tableName = tableName
    }
}

struct DescribeTableInputBody: Equatable {
    public let tableName: String?
}

extension DescribeTableInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
    }
}

extension DescribeTableOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeTableOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeTableOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTableOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeTableOutputResponse(table: \(String(describing: table)))"}
}

extension DescribeTableOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeTableOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.table = output.table
        } else {
            self.table = nil
        }
    }
}

/// <p>Represents the output of a <code>DescribeTable</code> operation.</p>
public struct DescribeTableOutputResponse: Equatable {
    /// <p>The properties of the table.</p>
    public let table: TableDescription?

    public init (
        table: TableDescription? = nil
    )
    {
        self.table = table
    }
}

struct DescribeTableOutputResponseBody: Equatable {
    public let table: TableDescription?
}

extension DescribeTableOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case table = "Table"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableDecoded = try containerValues.decodeIfPresent(TableDescription.self, forKey: .table)
        table = tableDecoded
    }
}

public struct DescribeTableReplicaAutoScalingInputBodyMiddleware: Middleware {
    public let id: String = "DescribeTableReplicaAutoScalingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeTableReplicaAutoScalingInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeTableReplicaAutoScalingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeTableReplicaAutoScalingInput>
    public typealias MOutput = OperationOutput<DescribeTableReplicaAutoScalingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeTableReplicaAutoScalingOutputError>
}

extension DescribeTableReplicaAutoScalingInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeTableReplicaAutoScalingInput(tableName: \(String(describing: tableName)))"}
}

extension DescribeTableReplicaAutoScalingInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

public struct DescribeTableReplicaAutoScalingInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeTableReplicaAutoScalingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeTableReplicaAutoScalingInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeTableReplicaAutoScalingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeTableReplicaAutoScalingInput>
    public typealias MOutput = OperationOutput<DescribeTableReplicaAutoScalingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeTableReplicaAutoScalingOutputError>
}

public struct DescribeTableReplicaAutoScalingInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeTableReplicaAutoScalingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeTableReplicaAutoScalingInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeTableReplicaAutoScalingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeTableReplicaAutoScalingInput>
    public typealias MOutput = OperationOutput<DescribeTableReplicaAutoScalingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeTableReplicaAutoScalingOutputError>
}

public struct DescribeTableReplicaAutoScalingInput: Equatable {
    /// <p>The name of the table.</p>
    public let tableName: String?

    public init (
        tableName: String? = nil
    )
    {
        self.tableName = tableName
    }
}

struct DescribeTableReplicaAutoScalingInputBody: Equatable {
    public let tableName: String?
}

extension DescribeTableReplicaAutoScalingInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
    }
}

extension DescribeTableReplicaAutoScalingOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeTableReplicaAutoScalingOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeTableReplicaAutoScalingOutputError: Equatable {
    case internalServerError(InternalServerError)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTableReplicaAutoScalingOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeTableReplicaAutoScalingOutputResponse(tableAutoScalingDescription: \(String(describing: tableAutoScalingDescription)))"}
}

extension DescribeTableReplicaAutoScalingOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeTableReplicaAutoScalingOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.tableAutoScalingDescription = output.tableAutoScalingDescription
        } else {
            self.tableAutoScalingDescription = nil
        }
    }
}

public struct DescribeTableReplicaAutoScalingOutputResponse: Equatable {
    /// <p>Represents the auto scaling properties of the table.</p>
    public let tableAutoScalingDescription: TableAutoScalingDescription?

    public init (
        tableAutoScalingDescription: TableAutoScalingDescription? = nil
    )
    {
        self.tableAutoScalingDescription = tableAutoScalingDescription
    }
}

struct DescribeTableReplicaAutoScalingOutputResponseBody: Equatable {
    public let tableAutoScalingDescription: TableAutoScalingDescription?
}

extension DescribeTableReplicaAutoScalingOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tableAutoScalingDescription = "TableAutoScalingDescription"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableAutoScalingDescriptionDecoded = try containerValues.decodeIfPresent(TableAutoScalingDescription.self, forKey: .tableAutoScalingDescription)
        tableAutoScalingDescription = tableAutoScalingDescriptionDecoded
    }
}

public struct DescribeTimeToLiveInputBodyMiddleware: Middleware {
    public let id: String = "DescribeTimeToLiveInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeTimeToLiveInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeTimeToLiveOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeTimeToLiveInput>
    public typealias MOutput = OperationOutput<DescribeTimeToLiveOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeTimeToLiveOutputError>
}

extension DescribeTimeToLiveInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeTimeToLiveInput(tableName: \(String(describing: tableName)))"}
}

extension DescribeTimeToLiveInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

public struct DescribeTimeToLiveInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeTimeToLiveInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeTimeToLiveInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeTimeToLiveOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeTimeToLiveInput>
    public typealias MOutput = OperationOutput<DescribeTimeToLiveOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeTimeToLiveOutputError>
}

public struct DescribeTimeToLiveInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeTimeToLiveInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeTimeToLiveInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeTimeToLiveOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeTimeToLiveInput>
    public typealias MOutput = OperationOutput<DescribeTimeToLiveOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeTimeToLiveOutputError>
}

public struct DescribeTimeToLiveInput: Equatable {
    /// <p>The name of the table to be described.</p>
    public let tableName: String?

    public init (
        tableName: String? = nil
    )
    {
        self.tableName = tableName
    }
}

struct DescribeTimeToLiveInputBody: Equatable {
    public let tableName: String?
}

extension DescribeTimeToLiveInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
    }
}

extension DescribeTimeToLiveOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeTimeToLiveOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeTimeToLiveOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTimeToLiveOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeTimeToLiveOutputResponse(timeToLiveDescription: \(String(describing: timeToLiveDescription)))"}
}

extension DescribeTimeToLiveOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeTimeToLiveOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.timeToLiveDescription = output.timeToLiveDescription
        } else {
            self.timeToLiveDescription = nil
        }
    }
}

public struct DescribeTimeToLiveOutputResponse: Equatable {
    /// <p></p>
    public let timeToLiveDescription: TimeToLiveDescription?

    public init (
        timeToLiveDescription: TimeToLiveDescription? = nil
    )
    {
        self.timeToLiveDescription = timeToLiveDescription
    }
}

struct DescribeTimeToLiveOutputResponseBody: Equatable {
    public let timeToLiveDescription: TimeToLiveDescription?
}

extension DescribeTimeToLiveOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case timeToLiveDescription = "TimeToLiveDescription"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeToLiveDescriptionDecoded = try containerValues.decodeIfPresent(TimeToLiveDescription.self, forKey: .timeToLiveDescription)
        timeToLiveDescription = timeToLiveDescriptionDecoded
    }
}

public enum DestinationStatus {
    case active
    case disabled
    case disabling
    case enableFailed
    case enabling
    case sdkUnknown(String)
}

extension DestinationStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DestinationStatus] {
        return [
            .active,
            .disabled,
            .disabling,
            .enableFailed,
            .enabling,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .active: return "ACTIVE"
        case .disabled: return "DISABLED"
        case .disabling: return "DISABLING"
        case .enableFailed: return "ENABLE_FAILED"
        case .enabling: return "ENABLING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DestinationStatus(rawValue: rawValue) ?? DestinationStatus.sdkUnknown(rawValue)
    }
}

public struct DisableKinesisStreamingDestinationInputBodyMiddleware: Middleware {
    public let id: String = "DisableKinesisStreamingDestinationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DisableKinesisStreamingDestinationInput>,
                  next: H) -> Swift.Result<OperationOutput<DisableKinesisStreamingDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DisableKinesisStreamingDestinationInput>
    public typealias MOutput = OperationOutput<DisableKinesisStreamingDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DisableKinesisStreamingDestinationOutputError>
}

extension DisableKinesisStreamingDestinationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DisableKinesisStreamingDestinationInput(streamArn: \(String(describing: streamArn)), tableName: \(String(describing: tableName)))"}
}

extension DisableKinesisStreamingDestinationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case streamArn = "StreamArn"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let streamArn = streamArn {
            try encodeContainer.encode(streamArn, forKey: .streamArn)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

public struct DisableKinesisStreamingDestinationInputHeadersMiddleware: Middleware {
    public let id: String = "DisableKinesisStreamingDestinationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DisableKinesisStreamingDestinationInput>,
                  next: H) -> Swift.Result<OperationOutput<DisableKinesisStreamingDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DisableKinesisStreamingDestinationInput>
    public typealias MOutput = OperationOutput<DisableKinesisStreamingDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DisableKinesisStreamingDestinationOutputError>
}

public struct DisableKinesisStreamingDestinationInputQueryItemMiddleware: Middleware {
    public let id: String = "DisableKinesisStreamingDestinationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DisableKinesisStreamingDestinationInput>,
                  next: H) -> Swift.Result<OperationOutput<DisableKinesisStreamingDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DisableKinesisStreamingDestinationInput>
    public typealias MOutput = OperationOutput<DisableKinesisStreamingDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DisableKinesisStreamingDestinationOutputError>
}

public struct DisableKinesisStreamingDestinationInput: Equatable {
    /// <p>The ARN for a Kinesis data stream.</p>
    public let streamArn: String?
    /// <p>The name of the DynamoDB table.</p>
    public let tableName: String?

    public init (
        streamArn: String? = nil,
        tableName: String? = nil
    )
    {
        self.streamArn = streamArn
        self.tableName = tableName
    }
}

struct DisableKinesisStreamingDestinationInputBody: Equatable {
    public let tableName: String?
    public let streamArn: String?
}

extension DisableKinesisStreamingDestinationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case streamArn = "StreamArn"
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let streamArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamArn)
        streamArn = streamArnDecoded
    }
}

extension DisableKinesisStreamingDestinationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisableKinesisStreamingDestinationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisableKinesisStreamingDestinationOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableKinesisStreamingDestinationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DisableKinesisStreamingDestinationOutputResponse(destinationStatus: \(String(describing: destinationStatus)), streamArn: \(String(describing: streamArn)), tableName: \(String(describing: tableName)))"}
}

extension DisableKinesisStreamingDestinationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DisableKinesisStreamingDestinationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.destinationStatus = output.destinationStatus
            self.streamArn = output.streamArn
            self.tableName = output.tableName
        } else {
            self.destinationStatus = nil
            self.streamArn = nil
            self.tableName = nil
        }
    }
}

public struct DisableKinesisStreamingDestinationOutputResponse: Equatable {
    /// <p>The current status of the replication.</p>
    public let destinationStatus: DestinationStatus?
    /// <p>The ARN for the specific Kinesis data stream.</p>
    public let streamArn: String?
    /// <p>The name of the table being modified.</p>
    public let tableName: String?

    public init (
        destinationStatus: DestinationStatus? = nil,
        streamArn: String? = nil,
        tableName: String? = nil
    )
    {
        self.destinationStatus = destinationStatus
        self.streamArn = streamArn
        self.tableName = tableName
    }
}

struct DisableKinesisStreamingDestinationOutputResponseBody: Equatable {
    public let tableName: String?
    public let streamArn: String?
    public let destinationStatus: DestinationStatus?
}

extension DisableKinesisStreamingDestinationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case destinationStatus = "DestinationStatus"
        case streamArn = "StreamArn"
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let streamArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamArn)
        streamArn = streamArnDecoded
        let destinationStatusDecoded = try containerValues.decodeIfPresent(DestinationStatus.self, forKey: .destinationStatus)
        destinationStatus = destinationStatusDecoded
    }
}

extension DuplicateItemException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DuplicateItemException(message: \(String(describing: message)))"}
}

extension DuplicateItemException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DuplicateItemExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>
/// There was an attempt to insert an item with the same primary key as an item that already exists in the DynamoDB table.
/// </p>
public struct DuplicateItemException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DuplicateItemExceptionBody: Equatable {
    public let message: String?
}

extension DuplicateItemExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct EnableKinesisStreamingDestinationInputBodyMiddleware: Middleware {
    public let id: String = "EnableKinesisStreamingDestinationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<EnableKinesisStreamingDestinationInput>,
                  next: H) -> Swift.Result<OperationOutput<EnableKinesisStreamingDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<EnableKinesisStreamingDestinationInput>
    public typealias MOutput = OperationOutput<EnableKinesisStreamingDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<EnableKinesisStreamingDestinationOutputError>
}

extension EnableKinesisStreamingDestinationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EnableKinesisStreamingDestinationInput(streamArn: \(String(describing: streamArn)), tableName: \(String(describing: tableName)))"}
}

extension EnableKinesisStreamingDestinationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case streamArn = "StreamArn"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let streamArn = streamArn {
            try encodeContainer.encode(streamArn, forKey: .streamArn)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

public struct EnableKinesisStreamingDestinationInputHeadersMiddleware: Middleware {
    public let id: String = "EnableKinesisStreamingDestinationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<EnableKinesisStreamingDestinationInput>,
                  next: H) -> Swift.Result<OperationOutput<EnableKinesisStreamingDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<EnableKinesisStreamingDestinationInput>
    public typealias MOutput = OperationOutput<EnableKinesisStreamingDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<EnableKinesisStreamingDestinationOutputError>
}

public struct EnableKinesisStreamingDestinationInputQueryItemMiddleware: Middleware {
    public let id: String = "EnableKinesisStreamingDestinationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<EnableKinesisStreamingDestinationInput>,
                  next: H) -> Swift.Result<OperationOutput<EnableKinesisStreamingDestinationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<EnableKinesisStreamingDestinationInput>
    public typealias MOutput = OperationOutput<EnableKinesisStreamingDestinationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<EnableKinesisStreamingDestinationOutputError>
}

public struct EnableKinesisStreamingDestinationInput: Equatable {
    /// <p>The ARN for a Kinesis data stream.</p>
    public let streamArn: String?
    /// <p>The name of the DynamoDB table.</p>
    public let tableName: String?

    public init (
        streamArn: String? = nil,
        tableName: String? = nil
    )
    {
        self.streamArn = streamArn
        self.tableName = tableName
    }
}

struct EnableKinesisStreamingDestinationInputBody: Equatable {
    public let tableName: String?
    public let streamArn: String?
}

extension EnableKinesisStreamingDestinationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case streamArn = "StreamArn"
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let streamArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamArn)
        streamArn = streamArnDecoded
    }
}

extension EnableKinesisStreamingDestinationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension EnableKinesisStreamingDestinationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum EnableKinesisStreamingDestinationOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableKinesisStreamingDestinationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EnableKinesisStreamingDestinationOutputResponse(destinationStatus: \(String(describing: destinationStatus)), streamArn: \(String(describing: streamArn)), tableName: \(String(describing: tableName)))"}
}

extension EnableKinesisStreamingDestinationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: EnableKinesisStreamingDestinationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.destinationStatus = output.destinationStatus
            self.streamArn = output.streamArn
            self.tableName = output.tableName
        } else {
            self.destinationStatus = nil
            self.streamArn = nil
            self.tableName = nil
        }
    }
}

public struct EnableKinesisStreamingDestinationOutputResponse: Equatable {
    /// <p>The current status of the replication.</p>
    public let destinationStatus: DestinationStatus?
    /// <p>The ARN for the specific Kinesis data stream.</p>
    public let streamArn: String?
    /// <p>The name of the table being modified.</p>
    public let tableName: String?

    public init (
        destinationStatus: DestinationStatus? = nil,
        streamArn: String? = nil,
        tableName: String? = nil
    )
    {
        self.destinationStatus = destinationStatus
        self.streamArn = streamArn
        self.tableName = tableName
    }
}

struct EnableKinesisStreamingDestinationOutputResponseBody: Equatable {
    public let tableName: String?
    public let streamArn: String?
    public let destinationStatus: DestinationStatus?
}

extension EnableKinesisStreamingDestinationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case destinationStatus = "DestinationStatus"
        case streamArn = "StreamArn"
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let streamArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamArn)
        streamArn = streamArnDecoded
        let destinationStatusDecoded = try containerValues.decodeIfPresent(DestinationStatus.self, forKey: .destinationStatus)
        destinationStatus = destinationStatusDecoded
    }
}

extension Endpoint: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case address = "Address"
        case cachePeriodInMinutes = "CachePeriodInMinutes"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let address = address {
            try encodeContainer.encode(address, forKey: .address)
        }
        if cachePeriodInMinutes != 0 {
            try encodeContainer.encode(cachePeriodInMinutes, forKey: .cachePeriodInMinutes)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .address)
        address = addressDecoded
        let cachePeriodInMinutesDecoded = try containerValues.decode(Int.self, forKey: .cachePeriodInMinutes)
        cachePeriodInMinutes = cachePeriodInMinutesDecoded
    }
}

extension Endpoint: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Endpoint(address: \(String(describing: address)), cachePeriodInMinutes: \(String(describing: cachePeriodInMinutes)))"}
}

/// <p>An endpoint information details.</p>
public struct Endpoint: Equatable {
    /// <p>IP address of the endpoint.</p>
    public let address: String?
    /// <p>Endpoint cache time to live (TTL) value.</p>
    public let cachePeriodInMinutes: Int

    public init (
        address: String? = nil,
        cachePeriodInMinutes: Int = 0
    )
    {
        self.address = address
        self.cachePeriodInMinutes = cachePeriodInMinutes
    }
}

public struct ExecuteStatementInputBodyMiddleware: Middleware {
    public let id: String = "ExecuteStatementInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ExecuteStatementInput>,
                  next: H) -> Swift.Result<OperationOutput<ExecuteStatementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ExecuteStatementInput>
    public typealias MOutput = OperationOutput<ExecuteStatementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ExecuteStatementOutputError>
}

extension ExecuteStatementInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ExecuteStatementInput(consistentRead: \(String(describing: consistentRead)), nextToken: \(String(describing: nextToken)), parameters: \(String(describing: parameters)), statement: \(String(describing: statement)))"}
}

extension ExecuteStatementInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case consistentRead = "ConsistentRead"
        case nextToken = "NextToken"
        case parameters = "Parameters"
        case statement = "Statement"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let consistentRead = consistentRead {
            try encodeContainer.encode(consistentRead, forKey: .consistentRead)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parameters)
            for preparedstatementparameters0 in parameters {
                try parametersContainer.encode(preparedstatementparameters0)
            }
        }
        if let statement = statement {
            try encodeContainer.encode(statement, forKey: .statement)
        }
    }
}

public struct ExecuteStatementInputHeadersMiddleware: Middleware {
    public let id: String = "ExecuteStatementInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ExecuteStatementInput>,
                  next: H) -> Swift.Result<OperationOutput<ExecuteStatementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ExecuteStatementInput>
    public typealias MOutput = OperationOutput<ExecuteStatementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ExecuteStatementOutputError>
}

public struct ExecuteStatementInputQueryItemMiddleware: Middleware {
    public let id: String = "ExecuteStatementInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ExecuteStatementInput>,
                  next: H) -> Swift.Result<OperationOutput<ExecuteStatementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ExecuteStatementInput>
    public typealias MOutput = OperationOutput<ExecuteStatementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ExecuteStatementOutputError>
}

public struct ExecuteStatementInput: Equatable {
    /// <p>
    /// The consistency of a read operation. If set to <code>true</code>, then a strongly consistent read is used; otherwise, an eventually consistent read is used.
    /// </p>
    public let consistentRead: Bool?
    /// <p>
    /// Set this value to get remaining results, if <code>NextToken</code> was returned in the statement response.
    /// </p>
    public let nextToken: String?
    /// <p>
    /// The parameters for the PartiQL statement, if any.
    /// </p>
    public let parameters: [AttributeValue]?
    /// <p>
    /// The PartiQL statement representing the operation to run.
    /// </p>
    public let statement: String?

    public init (
        consistentRead: Bool? = nil,
        nextToken: String? = nil,
        parameters: [AttributeValue]? = nil,
        statement: String? = nil
    )
    {
        self.consistentRead = consistentRead
        self.nextToken = nextToken
        self.parameters = parameters
        self.statement = statement
    }
}

struct ExecuteStatementInputBody: Equatable {
    public let statement: String?
    public let parameters: [AttributeValue]?
    public let consistentRead: Bool?
    public let nextToken: String?
}

extension ExecuteStatementInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case consistentRead = "ConsistentRead"
        case nextToken = "NextToken"
        case parameters = "Parameters"
        case statement = "Statement"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statementDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statement)
        statement = statementDecoded
        let parametersContainer = try containerValues.decodeIfPresent([AttributeValue?].self, forKey: .parameters)
        var parametersDecoded0:[AttributeValue]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [AttributeValue]()
            for union0 in parametersContainer {
                if let union0 = union0 {
                    parametersDecoded0?.append(union0)
                }
            }
        }
        parameters = parametersDecoded0
        let consistentReadDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .consistentRead)
        consistentRead = consistentReadDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ExecuteStatementOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ExecuteStatementOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ConditionalCheckFailedException" : self = .conditionalCheckFailedException(try ConditionalCheckFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicateItemException" : self = .duplicateItemException(try DuplicateItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ItemCollectionSizeLimitExceededException" : self = .itemCollectionSizeLimitExceededException(try ItemCollectionSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TransactionConflictException" : self = .transactionConflictException(try TransactionConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ExecuteStatementOutputError: Equatable {
    case conditionalCheckFailedException(ConditionalCheckFailedException)
    case duplicateItemException(DuplicateItemException)
    case internalServerError(InternalServerError)
    case itemCollectionSizeLimitExceededException(ItemCollectionSizeLimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case requestLimitExceeded(RequestLimitExceeded)
    case resourceNotFoundException(ResourceNotFoundException)
    case transactionConflictException(TransactionConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExecuteStatementOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ExecuteStatementOutputResponse(items: \(String(describing: items)), nextToken: \(String(describing: nextToken)))"}
}

extension ExecuteStatementOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ExecuteStatementOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.items = output.items
            self.nextToken = output.nextToken
        } else {
            self.items = nil
            self.nextToken = nil
        }
    }
}

public struct ExecuteStatementOutputResponse: Equatable {
    /// <p>
    /// If a read operation was used, this property will contain the result of the reade operation; a map of attribute names and their values. For the write operations this value will be empty.
    /// </p>
    public let items: [[String:AttributeValue]]?
    /// <p>
    /// If the response of a read request exceeds the response payload limit DynamoDB will set this value in the response. If set, you can use that this value in the subsequent request to get the remaining results.
    /// </p>
    public let nextToken: String?

    public init (
        items: [[String:AttributeValue]]? = nil,
        nextToken: String? = nil
    )
    {
        self.items = items
        self.nextToken = nextToken
    }
}

struct ExecuteStatementOutputResponseBody: Equatable {
    public let items: [[String:AttributeValue]]?
    public let nextToken: String?
}

extension ExecuteStatementOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case items = "Items"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemsContainer = try containerValues.decodeIfPresent([[String: AttributeValue?]?].self, forKey: .items)
        var itemsDecoded0:[[String:AttributeValue]]? = nil
        if let itemsContainer = itemsContainer {
            itemsDecoded0 = [[String:AttributeValue]]()
            for map0 in itemsContainer {
                var itemsContainerDecoded0: [String: AttributeValue]? = nil
                if let map0 = map0 {
                    itemsContainerDecoded0 = [String: AttributeValue]()
                    for (key1, attributevalue1) in map0 {
                        if let attributevalue1 = attributevalue1 {
                            itemsContainerDecoded0?[key1] = attributevalue1
                        }
                    }
                }
                if let itemsContainerDecoded0 = itemsContainerDecoded0 {
                    itemsDecoded0?.append(itemsContainerDecoded0)
                }
            }
        }
        items = itemsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ExecuteTransactionInputBodyMiddleware: Middleware {
    public let id: String = "ExecuteTransactionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ExecuteTransactionInput>,
                  next: H) -> Swift.Result<OperationOutput<ExecuteTransactionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ExecuteTransactionInput>
    public typealias MOutput = OperationOutput<ExecuteTransactionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ExecuteTransactionOutputError>
}

extension ExecuteTransactionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ExecuteTransactionInput(clientRequestToken: \(String(describing: clientRequestToken)), transactStatements: \(String(describing: transactStatements)))"}
}

extension ExecuteTransactionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case transactStatements = "TransactStatements"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let transactStatements = transactStatements {
            var transactStatementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .transactStatements)
            for parameterizedstatements0 in transactStatements {
                try transactStatementsContainer.encode(parameterizedstatements0)
            }
        }
    }
}

public struct ExecuteTransactionInputHeadersMiddleware: Middleware {
    public let id: String = "ExecuteTransactionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ExecuteTransactionInput>,
                  next: H) -> Swift.Result<OperationOutput<ExecuteTransactionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ExecuteTransactionInput>
    public typealias MOutput = OperationOutput<ExecuteTransactionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ExecuteTransactionOutputError>
}

public struct ExecuteTransactionInputQueryItemMiddleware: Middleware {
    public let id: String = "ExecuteTransactionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ExecuteTransactionInput>,
                  next: H) -> Swift.Result<OperationOutput<ExecuteTransactionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ExecuteTransactionInput>
    public typealias MOutput = OperationOutput<ExecuteTransactionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ExecuteTransactionOutputError>
}

public struct ExecuteTransactionInput: Equatable {
    /// <p>
    /// Set this value to get remaining results, if <code>NextToken</code> was returned in the statement response.
    /// </p>
    public var clientRequestToken: String?
    /// <p>
    /// The list of PartiQL statements representing the transaction to run.
    /// </p>
    public let transactStatements: [ParameterizedStatement]?

    public init (
        clientRequestToken: String? = nil,
        transactStatements: [ParameterizedStatement]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.transactStatements = transactStatements
    }
}

struct ExecuteTransactionInputBody: Equatable {
    public let transactStatements: [ParameterizedStatement]?
    public let clientRequestToken: String?
}

extension ExecuteTransactionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case transactStatements = "TransactStatements"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transactStatementsContainer = try containerValues.decodeIfPresent([ParameterizedStatement?].self, forKey: .transactStatements)
        var transactStatementsDecoded0:[ParameterizedStatement]? = nil
        if let transactStatementsContainer = transactStatementsContainer {
            transactStatementsDecoded0 = [ParameterizedStatement]()
            for structure0 in transactStatementsContainer {
                if let structure0 = structure0 {
                    transactStatementsDecoded0?.append(structure0)
                }
            }
        }
        transactStatements = transactStatementsDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension ExecuteTransactionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ExecuteTransactionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TransactionCanceledException" : self = .transactionCanceledException(try TransactionCanceledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TransactionInProgressException" : self = .transactionInProgressException(try TransactionInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ExecuteTransactionOutputError: Equatable {
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerError(InternalServerError)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case requestLimitExceeded(RequestLimitExceeded)
    case resourceNotFoundException(ResourceNotFoundException)
    case transactionCanceledException(TransactionCanceledException)
    case transactionInProgressException(TransactionInProgressException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExecuteTransactionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ExecuteTransactionOutputResponse(responses: \(String(describing: responses)))"}
}

extension ExecuteTransactionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ExecuteTransactionOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.responses = output.responses
        } else {
            self.responses = nil
        }
    }
}

public struct ExecuteTransactionOutputResponse: Equatable {
    /// <p>
    /// The response to a PartiQL transaction.
    /// </p>
    public let responses: [ItemResponse]?

    public init (
        responses: [ItemResponse]? = nil
    )
    {
        self.responses = responses
    }
}

struct ExecuteTransactionOutputResponseBody: Equatable {
    public let responses: [ItemResponse]?
}

extension ExecuteTransactionOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case responses = "Responses"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let responsesContainer = try containerValues.decodeIfPresent([ItemResponse?].self, forKey: .responses)
        var responsesDecoded0:[ItemResponse]? = nil
        if let responsesContainer = responsesContainer {
            responsesDecoded0 = [ItemResponse]()
            for structure0 in responsesContainer {
                if let structure0 = structure0 {
                    responsesDecoded0?.append(structure0)
                }
            }
        }
        responses = responsesDecoded0
    }
}

extension ExpectedAttributeValue: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributeValueList = "AttributeValueList"
        case comparisonOperator = "ComparisonOperator"
        case exists = "Exists"
        case value = "Value"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeValueList = attributeValueList {
            var attributeValueListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributeValueList)
            for attributevaluelist0 in attributeValueList {
                try attributeValueListContainer.encode(attributevaluelist0)
            }
        }
        if let comparisonOperator = comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let exists = exists {
            try encodeContainer.encode(exists, forKey: .exists)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(AttributeValue.self, forKey: .value)
        value = valueDecoded
        let existsDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .exists)
        exists = existsDecoded
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(ComparisonOperator.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let attributeValueListContainer = try containerValues.decodeIfPresent([AttributeValue?].self, forKey: .attributeValueList)
        var attributeValueListDecoded0:[AttributeValue]? = nil
        if let attributeValueListContainer = attributeValueListContainer {
            attributeValueListDecoded0 = [AttributeValue]()
            for union0 in attributeValueListContainer {
                if let union0 = union0 {
                    attributeValueListDecoded0?.append(union0)
                }
            }
        }
        attributeValueList = attributeValueListDecoded0
    }
}

extension ExpectedAttributeValue: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ExpectedAttributeValue(attributeValueList: \(String(describing: attributeValueList)), comparisonOperator: \(String(describing: comparisonOperator)), exists: \(String(describing: exists)), value: \(String(describing: value)))"}
}

/// <p>Represents a condition to be compared with an attribute value. This condition can be
///          used with <code>DeleteItem</code>, <code>PutItem</code>, or <code>UpdateItem</code>
///          operations; if the comparison evaluates to true, the operation succeeds; if not, the
///          operation fails. You can use <code>ExpectedAttributeValue</code> in one of two different
///          ways:</p>
///          <ul>
///             <li>
///                <p>Use <code>AttributeValueList</code> to specify one or more values to compare against an
///           attribute. Use <code>ComparisonOperator</code> to specify how you want to perform the
///           comparison. If the comparison evaluates to true, then the conditional operation
///           succeeds.</p>
///             </li>
///             <li>
///                <p>Use <code>Value</code> to specify a value that DynamoDB will compare against an attribute. If the
///           values match, then <code>ExpectedAttributeValue</code> evaluates to true and the conditional
///           operation succeeds. Optionally, you can also set <code>Exists</code> to false, indicating that
///           you <i>do not</i> expect to find the attribute value in the table. In this case, the
///           conditional operation succeeds only if the comparison evaluates to false.</p>
///             </li>
///          </ul>
///          <p>
///             <code>Value</code> and <code>Exists</code> are incompatible with <code>AttributeValueList</code> and
///         <code>ComparisonOperator</code>. Note that if you use both sets of parameters at once, DynamoDB will
///       return a <code>ValidationException</code> exception.</p>
public struct ExpectedAttributeValue: Equatable {
    /// <p>One or more values to evaluate against the supplied attribute. The number of values in the
    ///       list depends on the <code>ComparisonOperator</code> being used.</p>
    ///          <p>For type Number, value comparisons are numeric.</p>
    ///          <p>String value comparisons for greater than, equals, or less than are based on ASCII character
    ///       code values. For example, <code>a</code> is greater than <code>A</code>, and <code>a</code>
    ///       is greater than <code>B</code>. For a list of code values, see <a href="http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters">http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.</p>
    ///          <p>For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values.</p>
    ///          <p>For information on specifying data types in JSON, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html">JSON Data Format</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let attributeValueList: [AttributeValue]?
    /// <p>A comparator for evaluating attributes in the <code>AttributeValueList</code>. For example, equals,
    ///       greater than, less than, etc.</p>
    ///          <p>The following comparison operators are available:</p>
    ///          <p>
    ///             <code>EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN</code>
    ///          </p>
    ///          <p>The following are descriptions of each comparison operator.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>EQ</code> : Equal. <code>EQ</code> is supported for all data types, including lists and maps.</p>
    ///                <p>
    ///                   <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> element of type String,
    ///           Number, Binary, String Set, Number Set, or Binary Set. If an item contains an <code>AttributeValue</code> element of a different
    ///           type than the one provided in the request, the value does not match. For example,
    ///             <code>{"S":"6"}</code> does not equal <code>{"N":"6"}</code>. Also,
    ///             <code>{"N":"6"}</code> does not equal <code>{"NS":["6", "2", "1"]}</code>.</p>
    ///                <p></p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NE</code> : Not equal. <code>NE</code> is supported for all data types, including lists and maps.</p>
    ///                <p>
    ///                   <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> of type String,
    ///           Number, Binary, String Set, Number Set, or Binary Set. If an item contains an <code>AttributeValue</code> of a different
    ///           type than the one provided in the request, the value does not match. For example,
    ///             <code>{"S":"6"}</code> does not equal <code>{"N":"6"}</code>. Also,
    ///             <code>{"N":"6"}</code> does not equal <code>{"NS":["6", "2", "1"]}</code>.</p>
    ///                <p></p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LE</code> : Less than or equal. </p>
    ///                <p>
    ///                   <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> element of type String,
    ///           Number, or Binary (not a set type). If an item contains an <code>AttributeValue</code> element of a different
    ///           type than the one provided in the request, the value does not match. For example,
    ///             <code>{"S":"6"}</code> does not equal <code>{"N":"6"}</code>. Also,
    ///             <code>{"N":"6"}</code> does not compare to <code>{"NS":["6", "2", "1"]}</code>.</p>
    ///                <p></p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LT</code> : Less than. </p>
    ///                <p>
    ///                   <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> of type String,
    ///           Number, or Binary (not a set type). If an item contains an <code>AttributeValue</code> element of a different
    ///           type than the one provided in the request, the value does not match. For example,
    ///             <code>{"S":"6"}</code> does not equal <code>{"N":"6"}</code>. Also,
    ///             <code>{"N":"6"}</code> does not compare to <code>{"NS":["6", "2", "1"]}</code>.</p>
    ///                <p></p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>GE</code> : Greater than or equal. </p>
    ///                <p>
    ///                   <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> element of type String,
    ///           Number, or Binary (not a set type). If an item contains an <code>AttributeValue</code> element of a different
    ///           type than the one provided in the request, the value does not match. For example,
    ///             <code>{"S":"6"}</code> does not equal <code>{"N":"6"}</code>. Also,
    ///             <code>{"N":"6"}</code> does not compare to <code>{"NS":["6", "2", "1"]}</code>.</p>
    ///                <p></p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>GT</code> : Greater than. </p>
    ///                <p>
    ///                   <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> element of type String,
    ///           Number, or Binary (not a set type). If an item contains an <code>AttributeValue</code> element of a different
    ///           type than the one provided in the request, the value does not match. For example,
    ///             <code>{"S":"6"}</code> does not equal <code>{"N":"6"}</code>. Also,
    ///             <code>{"N":"6"}</code> does not compare to <code>{"NS":["6", "2", "1"]}</code>.</p>
    ///                <p></p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NOT_NULL</code> : The attribute exists. <code>NOT_NULL</code> is supported for all data types, including lists and maps.</p>
    ///                <note>
    ///                   <p>This operator tests for the existence of an attribute, not its data type.  If the data type of attribute "<code>a</code>" is null, and you evaluate it using <code>NOT_NULL</code>, the result is a Boolean <code>true</code>. This result is because the attribute "<code>a</code>" exists; its data type is not relevant to the <code>NOT_NULL</code> comparison operator.</p>
    ///                </note>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NULL</code> : The attribute does not exist. <code>NULL</code> is supported for all data types, including lists and maps.</p>
    ///                <note>
    ///                   <p>This operator tests for the nonexistence of an attribute, not its data type.  If the data type of attribute "<code>a</code>" is null, and you evaluate it using <code>NULL</code>, the result is a Boolean <code>false</code>. This is because the attribute "<code>a</code>" exists; its data type is not relevant to the <code>NULL</code> comparison operator.</p>
    ///                </note>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CONTAINS</code> : Checks for a subsequence, or value in a set.</p>
    ///                <p>
    ///                   <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> element of type String,
    ///           Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then
    ///           the operator checks for a substring match. If the target attribute of the comparison is
    ///           of type Binary, then the operator looks for a subsequence of the target that matches the input.
    ///           If the target attribute of the comparison is a set ("<code>SS</code>", "<code>NS</code>", or "<code>BS</code>"), then the
    ///           operator evaluates to true if it finds an exact match with any member of the set.</p>
    ///                <p>CONTAINS is supported for lists: When evaluating "<code>a CONTAINS b</code>", "<code>a</code>" can be a list; however, "<code>b</code>" cannot be a set, a map, or a list.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NOT_CONTAINS</code> : Checks for absence of a subsequence, or absence of a value in
    ///           a set.</p>
    ///                <p>
    ///                   <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> element of type String,
    ///           Number, or Binary (not a set type). If the target attribute of the comparison is a String, then
    ///           the operator checks for the absence of a substring match. If the target attribute of the
    ///           comparison is Binary, then the operator checks for the absence of a subsequence of the
    ///           target that matches the input. If the target attribute of the comparison is a set ("<code>SS</code>",
    ///           "<code>NS</code>", or "<code>BS</code>"), then the operator evaluates to true if it <i>does not</i> find an exact match with any member of the set.</p>
    ///                <p>NOT_CONTAINS is supported for lists: When evaluating "<code>a NOT CONTAINS b</code>", "<code>a</code>" can be a list; however, "<code>b</code>" cannot be a set, a map, or a list.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>BEGINS_WITH</code> : Checks for a prefix. </p>
    ///                <p>
    ///                   <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> of type String or
    ///           Binary (not a Number or a set type). The target attribute of the comparison must be of type String or
    ///           Binary (not a Number or a set type).</p>
    ///                <p></p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>IN</code> : Checks for matching elements in a list.</p>
    ///                <p>
    ///                   <code>AttributeValueList</code> can contain one or more <code>AttributeValue</code>
    ///                elements of type String, Number, or Binary. These attributes are compared against an
    ///                existing attribute of an item. If any elements of the input are equal to the item
    ///                attribute, the expression evaluates to true.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>BETWEEN</code> : Greater than or equal to the first value, and less than or equal
    ///           to the second value. </p>
    ///                <p>
    ///                   <code>AttributeValueList</code> must contain two <code>AttributeValue</code> elements of the same
    ///           type, either String, Number, or Binary (not a set type). A target attribute matches if the
    ///           target value is greater than, or equal to, the first element and less than, or equal to,
    ///           the second element. If an item contains an <code>AttributeValue</code> element of a different type than
    ///           the one provided in the request, the value does not match. For example,
    ///             <code>{"S":"6"}</code> does not compare to <code>{"N":"6"}</code>. Also,
    ///             <code>{"N":"6"}</code> does not compare to <code>{"NS":["6", "2", "1"]}</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let comparisonOperator: ComparisonOperator?
    /// <p>Causes DynamoDB to evaluate the value before attempting a conditional operation:</p>
    ///          <ul>
    ///             <li>
    ///                <p>If <code>Exists</code> is <code>true</code>, DynamoDB will check to see if that attribute value
    ///           already exists in the table. If it is found, then the operation succeeds. If it is not
    ///           found, the operation fails with a <code>ConditionCheckFailedException</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>If <code>Exists</code> is <code>false</code>, DynamoDB assumes that the attribute value does
    ///             not exist in the table. If in fact the value does not exist, then the assumption
    ///           is valid and the operation succeeds. If the value is found, despite the assumption that it
    ///           does not exist, the operation fails with a <code>ConditionCheckFailedException</code>.</p>
    ///             </li>
    ///          </ul>
    ///          <p>The default setting for <code>Exists</code> is <code>true</code>. If you supply a <code>Value</code> all
    ///       by itself, DynamoDB assumes the attribute exists: You don't have to set <code>Exists</code> to
    ///         <code>true</code>, because it is implied.</p>
    ///          <p>DynamoDB returns a <code>ValidationException</code> if:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Exists</code> is <code>true</code> but there is no <code>Value</code> to check. (You expect a
    ///           value to exist, but don't specify what that value is.)</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Exists</code> is <code>false</code> but you also provide a <code>Value</code>. (You cannot
    ///           expect an attribute to have a value, while also expecting it not to exist.)</p>
    ///             </li>
    ///          </ul>
    public let exists: Bool?
    /// <p>Represents the data for the expected attribute.</p>
    ///          <p>Each attribute value is described as a name-value pair.  The name is the data type, and the value is the data itself.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes">Data Types</a> in the
    ///          <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let value: AttributeValue?

    public init (
        attributeValueList: [AttributeValue]? = nil,
        comparisonOperator: ComparisonOperator? = nil,
        exists: Bool? = nil,
        value: AttributeValue? = nil
    )
    {
        self.attributeValueList = attributeValueList
        self.comparisonOperator = comparisonOperator
        self.exists = exists
        self.value = value
    }
}

extension ExportConflictException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ExportConflictException(message: \(String(describing: message)))"}
}

extension ExportConflictException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ExportConflictExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>There was a conflict when writing to the specified S3 bucket.</p>
public struct ExportConflictException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ExportConflictExceptionBody: Equatable {
    public let message: String?
}

extension ExportConflictExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ExportDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case billedSizeBytes = "BilledSizeBytes"
        case clientToken = "ClientToken"
        case endTime = "EndTime"
        case exportArn = "ExportArn"
        case exportFormat = "ExportFormat"
        case exportManifest = "ExportManifest"
        case exportStatus = "ExportStatus"
        case exportTime = "ExportTime"
        case failureCode = "FailureCode"
        case failureMessage = "FailureMessage"
        case itemCount = "ItemCount"
        case s3Bucket = "S3Bucket"
        case s3BucketOwner = "S3BucketOwner"
        case s3Prefix = "S3Prefix"
        case s3SseAlgorithm = "S3SseAlgorithm"
        case s3SseKmsKeyId = "S3SseKmsKeyId"
        case startTime = "StartTime"
        case tableArn = "TableArn"
        case tableId = "TableId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let billedSizeBytes = billedSizeBytes {
            try encodeContainer.encode(billedSizeBytes, forKey: .billedSizeBytes)
        }
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let exportArn = exportArn {
            try encodeContainer.encode(exportArn, forKey: .exportArn)
        }
        if let exportFormat = exportFormat {
            try encodeContainer.encode(exportFormat.rawValue, forKey: .exportFormat)
        }
        if let exportManifest = exportManifest {
            try encodeContainer.encode(exportManifest, forKey: .exportManifest)
        }
        if let exportStatus = exportStatus {
            try encodeContainer.encode(exportStatus.rawValue, forKey: .exportStatus)
        }
        if let exportTime = exportTime {
            try encodeContainer.encode(exportTime.timeIntervalSince1970, forKey: .exportTime)
        }
        if let failureCode = failureCode {
            try encodeContainer.encode(failureCode, forKey: .failureCode)
        }
        if let failureMessage = failureMessage {
            try encodeContainer.encode(failureMessage, forKey: .failureMessage)
        }
        if let itemCount = itemCount {
            try encodeContainer.encode(itemCount, forKey: .itemCount)
        }
        if let s3Bucket = s3Bucket {
            try encodeContainer.encode(s3Bucket, forKey: .s3Bucket)
        }
        if let s3BucketOwner = s3BucketOwner {
            try encodeContainer.encode(s3BucketOwner, forKey: .s3BucketOwner)
        }
        if let s3Prefix = s3Prefix {
            try encodeContainer.encode(s3Prefix, forKey: .s3Prefix)
        }
        if let s3SseAlgorithm = s3SseAlgorithm {
            try encodeContainer.encode(s3SseAlgorithm.rawValue, forKey: .s3SseAlgorithm)
        }
        if let s3SseKmsKeyId = s3SseKmsKeyId {
            try encodeContainer.encode(s3SseKmsKeyId, forKey: .s3SseKmsKeyId)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let tableArn = tableArn {
            try encodeContainer.encode(tableArn, forKey: .tableArn)
        }
        if let tableId = tableId {
            try encodeContainer.encode(tableId, forKey: .tableId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .exportArn)
        exportArn = exportArnDecoded
        let exportStatusDecoded = try containerValues.decodeIfPresent(ExportStatus.self, forKey: .exportStatus)
        exportStatus = exportStatusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let exportManifestDecoded = try containerValues.decodeIfPresent(String.self, forKey: .exportManifest)
        exportManifest = exportManifestDecoded
        let tableArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableArn)
        tableArn = tableArnDecoded
        let tableIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableId)
        tableId = tableIdDecoded
        let exportTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .exportTime)
        exportTime = exportTimeDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let s3BucketDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
        let s3BucketOwnerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3BucketOwner)
        s3BucketOwner = s3BucketOwnerDecoded
        let s3PrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3Prefix)
        s3Prefix = s3PrefixDecoded
        let s3SseAlgorithmDecoded = try containerValues.decodeIfPresent(S3SseAlgorithm.self, forKey: .s3SseAlgorithm)
        s3SseAlgorithm = s3SseAlgorithmDecoded
        let s3SseKmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3SseKmsKeyId)
        s3SseKmsKeyId = s3SseKmsKeyIdDecoded
        let failureCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureCode)
        failureCode = failureCodeDecoded
        let failureMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failureMessage)
        failureMessage = failureMessageDecoded
        let exportFormatDecoded = try containerValues.decodeIfPresent(ExportFormat.self, forKey: .exportFormat)
        exportFormat = exportFormatDecoded
        let billedSizeBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .billedSizeBytes)
        billedSizeBytes = billedSizeBytesDecoded
        let itemCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .itemCount)
        itemCount = itemCountDecoded
    }
}

extension ExportDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ExportDescription(billedSizeBytes: \(String(describing: billedSizeBytes)), clientToken: \(String(describing: clientToken)), endTime: \(String(describing: endTime)), exportArn: \(String(describing: exportArn)), exportFormat: \(String(describing: exportFormat)), exportManifest: \(String(describing: exportManifest)), exportStatus: \(String(describing: exportStatus)), exportTime: \(String(describing: exportTime)), failureCode: \(String(describing: failureCode)), failureMessage: \(String(describing: failureMessage)), itemCount: \(String(describing: itemCount)), s3Bucket: \(String(describing: s3Bucket)), s3BucketOwner: \(String(describing: s3BucketOwner)), s3Prefix: \(String(describing: s3Prefix)), s3SseAlgorithm: \(String(describing: s3SseAlgorithm)), s3SseKmsKeyId: \(String(describing: s3SseKmsKeyId)), startTime: \(String(describing: startTime)), tableArn: \(String(describing: tableArn)), tableId: \(String(describing: tableId)))"}
}

/// <p>Represents the properties of the exported table.</p>
public struct ExportDescription: Equatable {
    /// <p>The billable size of the table export.</p>
    public let billedSizeBytes: Int?
    /// <p>The client token that was provided for the export task. A client token makes calls to
    ///                 <code>ExportTableToPointInTimeInput</code> idempotent, meaning that multiple
    ///             identical calls have the same effect as one single call.</p>
    public let clientToken: String?
    /// <p>The time at which the export task completed.</p>
    public let endTime: Date?
    /// <p>The Amazon Resource Name (ARN) of the table export.</p>
    public let exportArn: String?
    /// <p>The format of the exported data. Valid values for <code>ExportFormat</code> are
    ///             <code>DYNAMODB_JSON</code> or <code>ION</code>.</p>
    public let exportFormat: ExportFormat?
    /// <p>The name of the manifest file for the export task.</p>
    public let exportManifest: String?
    /// <p>Export can be in one of the following states: IN_PROGRESS, COMPLETED, or FAILED.</p>
    public let exportStatus: ExportStatus?
    /// <p>Point in time from which table data was exported.</p>
    public let exportTime: Date?
    /// <p>Status code for the result of the failed export.</p>
    public let failureCode: String?
    /// <p>Export failure reason description.</p>
    public let failureMessage: String?
    /// <p>The number of items exported.</p>
    public let itemCount: Int?
    /// <p>The name of the Amazon S3 bucket containing the export.</p>
    public let s3Bucket: String?
    /// <p>The ID of the AWS account that owns the bucket containing the export.</p>
    public let s3BucketOwner: String?
    /// <p>The Amazon S3 bucket prefix used as the file name and path of the exported
    ///             snapshot.</p>
    public let s3Prefix: String?
    /// <p>Type of encryption used on the bucket where export data is stored. Valid values
    ///             for <code>S3SseAlgorithm</code> are:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>AES256</code> - server-side encryption with Amazon S3 managed keys</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>KMS</code> - server-side encryption with AWS KMS managed keys</p>
    ///             </li>
    ///          </ul>
    public let s3SseAlgorithm: S3SseAlgorithm?
    /// <p>The ID of the AWS KMS managed key used to encrypt the S3 bucket where export data is
    ///             stored (if applicable).</p>
    public let s3SseKmsKeyId: String?
    /// <p>The time at which the export task began.</p>
    public let startTime: Date?
    /// <p>The Amazon Resource Name (ARN) of the table that was exported.</p>
    public let tableArn: String?
    /// <p>Unique ID of the table that was exported.</p>
    public let tableId: String?

    public init (
        billedSizeBytes: Int? = nil,
        clientToken: String? = nil,
        endTime: Date? = nil,
        exportArn: String? = nil,
        exportFormat: ExportFormat? = nil,
        exportManifest: String? = nil,
        exportStatus: ExportStatus? = nil,
        exportTime: Date? = nil,
        failureCode: String? = nil,
        failureMessage: String? = nil,
        itemCount: Int? = nil,
        s3Bucket: String? = nil,
        s3BucketOwner: String? = nil,
        s3Prefix: String? = nil,
        s3SseAlgorithm: S3SseAlgorithm? = nil,
        s3SseKmsKeyId: String? = nil,
        startTime: Date? = nil,
        tableArn: String? = nil,
        tableId: String? = nil
    )
    {
        self.billedSizeBytes = billedSizeBytes
        self.clientToken = clientToken
        self.endTime = endTime
        self.exportArn = exportArn
        self.exportFormat = exportFormat
        self.exportManifest = exportManifest
        self.exportStatus = exportStatus
        self.exportTime = exportTime
        self.failureCode = failureCode
        self.failureMessage = failureMessage
        self.itemCount = itemCount
        self.s3Bucket = s3Bucket
        self.s3BucketOwner = s3BucketOwner
        self.s3Prefix = s3Prefix
        self.s3SseAlgorithm = s3SseAlgorithm
        self.s3SseKmsKeyId = s3SseKmsKeyId
        self.startTime = startTime
        self.tableArn = tableArn
        self.tableId = tableId
    }
}

public enum ExportFormat {
    case dynamodbJson
    case ion
    case sdkUnknown(String)
}

extension ExportFormat : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ExportFormat] {
        return [
            .dynamodbJson,
            .ion,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .dynamodbJson: return "DYNAMODB_JSON"
        case .ion: return "ION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ExportFormat(rawValue: rawValue) ?? ExportFormat.sdkUnknown(rawValue)
    }
}

extension ExportNotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ExportNotFoundException(message: \(String(describing: message)))"}
}

extension ExportNotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ExportNotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified export was not found.</p>
public struct ExportNotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ExportNotFoundExceptionBody: Equatable {
    public let message: String?
}

extension ExportNotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum ExportStatus {
    case completed
    case failed
    case inProgress
    case sdkUnknown(String)
}

extension ExportStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ExportStatus] {
        return [
            .completed,
            .failed,
            .inProgress,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .completed: return "COMPLETED"
        case .failed: return "FAILED"
        case .inProgress: return "IN_PROGRESS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ExportStatus(rawValue: rawValue) ?? ExportStatus.sdkUnknown(rawValue)
    }
}

extension ExportSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case exportArn = "ExportArn"
        case exportStatus = "ExportStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exportArn = exportArn {
            try encodeContainer.encode(exportArn, forKey: .exportArn)
        }
        if let exportStatus = exportStatus {
            try encodeContainer.encode(exportStatus.rawValue, forKey: .exportStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .exportArn)
        exportArn = exportArnDecoded
        let exportStatusDecoded = try containerValues.decodeIfPresent(ExportStatus.self, forKey: .exportStatus)
        exportStatus = exportStatusDecoded
    }
}

extension ExportSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ExportSummary(exportArn: \(String(describing: exportArn)), exportStatus: \(String(describing: exportStatus)))"}
}

/// <p>Summary information about an export task.</p>
public struct ExportSummary: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the export.</p>
    public let exportArn: String?
    /// <p>Export can be in one of the following states: IN_PROGRESS, COMPLETED, or FAILED.</p>
    public let exportStatus: ExportStatus?

    public init (
        exportArn: String? = nil,
        exportStatus: ExportStatus? = nil
    )
    {
        self.exportArn = exportArn
        self.exportStatus = exportStatus
    }
}

public struct ExportTableToPointInTimeInputBodyMiddleware: Middleware {
    public let id: String = "ExportTableToPointInTimeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ExportTableToPointInTimeInput>,
                  next: H) -> Swift.Result<OperationOutput<ExportTableToPointInTimeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ExportTableToPointInTimeInput>
    public typealias MOutput = OperationOutput<ExportTableToPointInTimeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ExportTableToPointInTimeOutputError>
}

extension ExportTableToPointInTimeInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ExportTableToPointInTimeInput(clientToken: \(String(describing: clientToken)), exportFormat: \(String(describing: exportFormat)), exportTime: \(String(describing: exportTime)), s3Bucket: \(String(describing: s3Bucket)), s3BucketOwner: \(String(describing: s3BucketOwner)), s3Prefix: \(String(describing: s3Prefix)), s3SseAlgorithm: \(String(describing: s3SseAlgorithm)), s3SseKmsKeyId: \(String(describing: s3SseKmsKeyId)), tableArn: \(String(describing: tableArn)))"}
}

extension ExportTableToPointInTimeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientToken = "ClientToken"
        case exportFormat = "ExportFormat"
        case exportTime = "ExportTime"
        case s3Bucket = "S3Bucket"
        case s3BucketOwner = "S3BucketOwner"
        case s3Prefix = "S3Prefix"
        case s3SseAlgorithm = "S3SseAlgorithm"
        case s3SseKmsKeyId = "S3SseKmsKeyId"
        case tableArn = "TableArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let exportFormat = exportFormat {
            try encodeContainer.encode(exportFormat.rawValue, forKey: .exportFormat)
        }
        if let exportTime = exportTime {
            try encodeContainer.encode(exportTime.timeIntervalSince1970, forKey: .exportTime)
        }
        if let s3Bucket = s3Bucket {
            try encodeContainer.encode(s3Bucket, forKey: .s3Bucket)
        }
        if let s3BucketOwner = s3BucketOwner {
            try encodeContainer.encode(s3BucketOwner, forKey: .s3BucketOwner)
        }
        if let s3Prefix = s3Prefix {
            try encodeContainer.encode(s3Prefix, forKey: .s3Prefix)
        }
        if let s3SseAlgorithm = s3SseAlgorithm {
            try encodeContainer.encode(s3SseAlgorithm.rawValue, forKey: .s3SseAlgorithm)
        }
        if let s3SseKmsKeyId = s3SseKmsKeyId {
            try encodeContainer.encode(s3SseKmsKeyId, forKey: .s3SseKmsKeyId)
        }
        if let tableArn = tableArn {
            try encodeContainer.encode(tableArn, forKey: .tableArn)
        }
    }
}

public struct ExportTableToPointInTimeInputHeadersMiddleware: Middleware {
    public let id: String = "ExportTableToPointInTimeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ExportTableToPointInTimeInput>,
                  next: H) -> Swift.Result<OperationOutput<ExportTableToPointInTimeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ExportTableToPointInTimeInput>
    public typealias MOutput = OperationOutput<ExportTableToPointInTimeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ExportTableToPointInTimeOutputError>
}

public struct ExportTableToPointInTimeInputQueryItemMiddleware: Middleware {
    public let id: String = "ExportTableToPointInTimeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ExportTableToPointInTimeInput>,
                  next: H) -> Swift.Result<OperationOutput<ExportTableToPointInTimeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ExportTableToPointInTimeInput>
    public typealias MOutput = OperationOutput<ExportTableToPointInTimeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ExportTableToPointInTimeOutputError>
}

public struct ExportTableToPointInTimeInput: Equatable {
    /// <p>Providing a <code>ClientToken</code> makes the call to
    ///                 <code>ExportTableToPointInTimeInput</code> idempotent, meaning that multiple
    ///             identical calls have the same effect as one single call.</p>
    ///         <p>A client token is valid for 8 hours after the first request that uses it is
    ///             completed. After 8 hours, any request with the same client token is treated as a new
    ///             request. Do not resubmit the same request with the same client token for more than 8
    ///             hours, or the result might not be idempotent.</p>
    ///         <p>If you submit a request with the same client token but a change in other parameters
    ///             within the 8-hour idempotency window, DynamoDB returns an
    ///             <code>IdempotentParameterMismatch</code> exception.</p>
    public var clientToken: String?
    /// <p>The format for the exported data. Valid values for <code>ExportFormat</code> are
    ///                 <code>DYNAMODB_JSON</code> or <code>ION</code>.</p>
    public let exportFormat: ExportFormat?
    /// <p>Time in the past from which to export table data. The table export will be a snapshot
    ///             of the table's state at this point in time.</p>
    public let exportTime: Date?
    /// <p>The name of the Amazon S3 bucket to export the snapshot to.</p>
    public let s3Bucket: String?
    /// <p>The ID of the AWS account that owns the bucket the export will be stored in.</p>
    public let s3BucketOwner: String?
    /// <p>The Amazon S3 bucket prefix to use as the file name and path of the exported
    ///             snapshot.</p>
    public let s3Prefix: String?
    /// <p>Type of encryption used on the bucket where export data will be stored. Valid values
    ///             for <code>S3SseAlgorithm</code> are:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>AES256</code> - server-side encryption with Amazon S3 managed keys</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>KMS</code> - server-side encryption with AWS KMS managed keys</p>
    ///             </li>
    ///          </ul>
    public let s3SseAlgorithm: S3SseAlgorithm?
    /// <p>The ID of the AWS KMS managed key used to encrypt the S3 bucket where export data will
    ///             be stored (if applicable).</p>
    public let s3SseKmsKeyId: String?
    /// <p>The Amazon Resource Name (ARN) associated with the table to export.</p>
    public let tableArn: String?

    public init (
        clientToken: String? = nil,
        exportFormat: ExportFormat? = nil,
        exportTime: Date? = nil,
        s3Bucket: String? = nil,
        s3BucketOwner: String? = nil,
        s3Prefix: String? = nil,
        s3SseAlgorithm: S3SseAlgorithm? = nil,
        s3SseKmsKeyId: String? = nil,
        tableArn: String? = nil
    )
    {
        self.clientToken = clientToken
        self.exportFormat = exportFormat
        self.exportTime = exportTime
        self.s3Bucket = s3Bucket
        self.s3BucketOwner = s3BucketOwner
        self.s3Prefix = s3Prefix
        self.s3SseAlgorithm = s3SseAlgorithm
        self.s3SseKmsKeyId = s3SseKmsKeyId
        self.tableArn = tableArn
    }
}

struct ExportTableToPointInTimeInputBody: Equatable {
    public let tableArn: String?
    public let exportTime: Date?
    public let clientToken: String?
    public let s3Bucket: String?
    public let s3BucketOwner: String?
    public let s3Prefix: String?
    public let s3SseAlgorithm: S3SseAlgorithm?
    public let s3SseKmsKeyId: String?
    public let exportFormat: ExportFormat?
}

extension ExportTableToPointInTimeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientToken = "ClientToken"
        case exportFormat = "ExportFormat"
        case exportTime = "ExportTime"
        case s3Bucket = "S3Bucket"
        case s3BucketOwner = "S3BucketOwner"
        case s3Prefix = "S3Prefix"
        case s3SseAlgorithm = "S3SseAlgorithm"
        case s3SseKmsKeyId = "S3SseKmsKeyId"
        case tableArn = "TableArn"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableArn)
        tableArn = tableArnDecoded
        let exportTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .exportTime)
        exportTime = exportTimeDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let s3BucketDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
        let s3BucketOwnerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3BucketOwner)
        s3BucketOwner = s3BucketOwnerDecoded
        let s3PrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3Prefix)
        s3Prefix = s3PrefixDecoded
        let s3SseAlgorithmDecoded = try containerValues.decodeIfPresent(S3SseAlgorithm.self, forKey: .s3SseAlgorithm)
        s3SseAlgorithm = s3SseAlgorithmDecoded
        let s3SseKmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3SseKmsKeyId)
        s3SseKmsKeyId = s3SseKmsKeyIdDecoded
        let exportFormatDecoded = try containerValues.decodeIfPresent(ExportFormat.self, forKey: .exportFormat)
        exportFormat = exportFormatDecoded
    }
}

extension ExportTableToPointInTimeOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ExportTableToPointInTimeOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ExportConflictException" : self = .exportConflictException(try ExportConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidExportTimeException" : self = .invalidExportTimeException(try InvalidExportTimeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PointInTimeRecoveryUnavailableException" : self = .pointInTimeRecoveryUnavailableException(try PointInTimeRecoveryUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TableNotFoundException" : self = .tableNotFoundException(try TableNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ExportTableToPointInTimeOutputError: Equatable {
    case exportConflictException(ExportConflictException)
    case internalServerError(InternalServerError)
    case invalidExportTimeException(InvalidExportTimeException)
    case limitExceededException(LimitExceededException)
    case pointInTimeRecoveryUnavailableException(PointInTimeRecoveryUnavailableException)
    case tableNotFoundException(TableNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExportTableToPointInTimeOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ExportTableToPointInTimeOutputResponse(exportDescription: \(String(describing: exportDescription)))"}
}

extension ExportTableToPointInTimeOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ExportTableToPointInTimeOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.exportDescription = output.exportDescription
        } else {
            self.exportDescription = nil
        }
    }
}

public struct ExportTableToPointInTimeOutputResponse: Equatable {
    /// <p>Contains a description of the table export.</p>
    public let exportDescription: ExportDescription?

    public init (
        exportDescription: ExportDescription? = nil
    )
    {
        self.exportDescription = exportDescription
    }
}

struct ExportTableToPointInTimeOutputResponseBody: Equatable {
    public let exportDescription: ExportDescription?
}

extension ExportTableToPointInTimeOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case exportDescription = "ExportDescription"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportDescriptionDecoded = try containerValues.decodeIfPresent(ExportDescription.self, forKey: .exportDescription)
        exportDescription = exportDescriptionDecoded
    }
}

extension FailureException: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case exceptionDescription = "ExceptionDescription"
        case exceptionName = "ExceptionName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exceptionDescription = exceptionDescription {
            try encodeContainer.encode(exceptionDescription, forKey: .exceptionDescription)
        }
        if let exceptionName = exceptionName {
            try encodeContainer.encode(exceptionName, forKey: .exceptionName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exceptionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .exceptionName)
        exceptionName = exceptionNameDecoded
        let exceptionDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .exceptionDescription)
        exceptionDescription = exceptionDescriptionDecoded
    }
}

extension FailureException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FailureException(exceptionDescription: \(String(describing: exceptionDescription)), exceptionName: \(String(describing: exceptionName)))"}
}

/// <p>Represents a failure a contributor insights operation.</p>
public struct FailureException: Equatable {
    /// <p>Description of the failure.</p>
    public let exceptionDescription: String?
    /// <p>Exception name.</p>
    public let exceptionName: String?

    public init (
        exceptionDescription: String? = nil,
        exceptionName: String? = nil
    )
    {
        self.exceptionDescription = exceptionDescription
        self.exceptionName = exceptionName
    }
}

extension Get: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case expressionAttributeNames = "ExpressionAttributeNames"
        case key = "Key"
        case projectionExpression = "ProjectionExpression"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionattributenamemap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionattributenamemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let key = key {
            var keyContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .key)
            for (dictKey0, key0) in key {
                try keyContainer.encode(key0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let projectionExpression = projectionExpression {
            try encodeContainer.encode(projectionExpression, forKey: .projectionExpression)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .key)
        var keyDecoded0: [String:AttributeValue]? = nil
        if let keyContainer = keyContainer {
            keyDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in keyContainer {
                if let attributevalue0 = attributevalue0 {
                    keyDecoded0?[key0] = attributevalue0
                }
            }
        }
        key = keyDecoded0
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let projectionExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .projectionExpression)
        projectionExpression = projectionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [String:String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [String:String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
    }
}

extension Get: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Get(expressionAttributeNames: \(String(describing: expressionAttributeNames)), key: \(String(describing: key)), projectionExpression: \(String(describing: projectionExpression)), tableName: \(String(describing: tableName)))"}
}

/// <p>Specifies an item and related attribute values to retrieve in a
///         <code>TransactGetItem</code> object.</p>
public struct Get: Equatable {
    /// <p>One or more substitution tokens for attribute names in the
    ///         ProjectionExpression parameter.</p>
    public let expressionAttributeNames: [String:String]?
    /// <p>A map of attribute names to <code>AttributeValue</code> objects that
    ///         specifies the primary key of the item to retrieve.</p>
    public let key: [String:AttributeValue]?
    /// <p>A string that identifies one or more attributes of the specified item
    ///         to retrieve from the table.  The attributes in the expression must be
    ///         separated by commas. If no attribute names are specified, then all
    ///         attributes of the specified item are returned. If any of the requested
    ///         attributes are not found, they do not appear in the result.</p>
    public let projectionExpression: String?
    /// <p>The name of the table from which to retrieve the specified item.</p>
    public let tableName: String?

    public init (
        expressionAttributeNames: [String:String]? = nil,
        key: [String:AttributeValue]? = nil,
        projectionExpression: String? = nil,
        tableName: String? = nil
    )
    {
        self.expressionAttributeNames = expressionAttributeNames
        self.key = key
        self.projectionExpression = projectionExpression
        self.tableName = tableName
    }
}

public struct GetItemInputBodyMiddleware: Middleware {
    public let id: String = "GetItemInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetItemInput>,
                  next: H) -> Swift.Result<OperationOutput<GetItemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetItemInput>
    public typealias MOutput = OperationOutput<GetItemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetItemOutputError>
}

extension GetItemInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetItemInput(attributesToGet: \(String(describing: attributesToGet)), consistentRead: \(String(describing: consistentRead)), expressionAttributeNames: \(String(describing: expressionAttributeNames)), key: \(String(describing: key)), projectionExpression: \(String(describing: projectionExpression)), returnConsumedCapacity: \(String(describing: returnConsumedCapacity)), tableName: \(String(describing: tableName)))"}
}

extension GetItemInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributesToGet = "AttributesToGet"
        case consistentRead = "ConsistentRead"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case key = "Key"
        case projectionExpression = "ProjectionExpression"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributesToGet = attributesToGet {
            var attributesToGetContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributesToGet)
            for attributenamelist0 in attributesToGet {
                try attributesToGetContainer.encode(attributenamelist0)
            }
        }
        if let consistentRead = consistentRead {
            try encodeContainer.encode(consistentRead, forKey: .consistentRead)
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionattributenamemap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionattributenamemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let key = key {
            var keyContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .key)
            for (dictKey0, key0) in key {
                try keyContainer.encode(key0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let projectionExpression = projectionExpression {
            try encodeContainer.encode(projectionExpression, forKey: .projectionExpression)
        }
        if let returnConsumedCapacity = returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

public struct GetItemInputHeadersMiddleware: Middleware {
    public let id: String = "GetItemInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetItemInput>,
                  next: H) -> Swift.Result<OperationOutput<GetItemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetItemInput>
    public typealias MOutput = OperationOutput<GetItemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetItemOutputError>
}

public struct GetItemInputQueryItemMiddleware: Middleware {
    public let id: String = "GetItemInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetItemInput>,
                  next: H) -> Swift.Result<OperationOutput<GetItemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetItemInput>
    public typealias MOutput = OperationOutput<GetItemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetItemOutputError>
}

/// <p>Represents the input of a <code>GetItem</code> operation.</p>
public struct GetItemInput: Equatable {
    /// <p>This is a legacy parameter.  Use <code>ProjectionExpression</code> instead.  For more information, see
    ///           <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let attributesToGet: [String]?
    /// <p>Determines the read consistency model:  If set to <code>true</code>, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.</p>
    public let consistentRead: Bool?
    /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
    ///          <ul>
    ///             <li>
    ///                <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
    ///             </li>
    ///             <li>
    ///                <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
    ///             </li>
    ///             <li>
    ///                <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
    ///             </li>
    ///          </ul>
    ///          <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Percentile</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>{"#P":"Percentile"}</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>You could then use this substitution in an expression, as in this example:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>#P = :val</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
    ///          </note>
    ///          <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
    ///                 Guide</i>.</p>
    public let expressionAttributeNames: [String:String]?
    /// <p>A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of
    ///       the item to retrieve.</p>
    ///          <p>For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</p>
    public let key: [String:AttributeValue]?
    /// <p>A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.</p>
    ///          <p>If no attribute names are specified, then all attributes are returned. If any of the
    ///             requested attributes are not found, they do not appear in the result.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
    ///                 Guide</i>.</p>
    public let projectionExpression: String?
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    ///                <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    ///             </li>
    ///          </ul>
    public let returnConsumedCapacity: ReturnConsumedCapacity?
    /// <p>The name of the table containing the requested item.</p>
    public let tableName: String?

    public init (
        attributesToGet: [String]? = nil,
        consistentRead: Bool? = nil,
        expressionAttributeNames: [String:String]? = nil,
        key: [String:AttributeValue]? = nil,
        projectionExpression: String? = nil,
        returnConsumedCapacity: ReturnConsumedCapacity? = nil,
        tableName: String? = nil
    )
    {
        self.attributesToGet = attributesToGet
        self.consistentRead = consistentRead
        self.expressionAttributeNames = expressionAttributeNames
        self.key = key
        self.projectionExpression = projectionExpression
        self.returnConsumedCapacity = returnConsumedCapacity
        self.tableName = tableName
    }
}

struct GetItemInputBody: Equatable {
    public let tableName: String?
    public let key: [String:AttributeValue]?
    public let attributesToGet: [String]?
    public let consistentRead: Bool?
    public let returnConsumedCapacity: ReturnConsumedCapacity?
    public let projectionExpression: String?
    public let expressionAttributeNames: [String:String]?
}

extension GetItemInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attributesToGet = "AttributesToGet"
        case consistentRead = "ConsistentRead"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case key = "Key"
        case projectionExpression = "ProjectionExpression"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let keyContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .key)
        var keyDecoded0: [String:AttributeValue]? = nil
        if let keyContainer = keyContainer {
            keyDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in keyContainer {
                if let attributevalue0 = attributevalue0 {
                    keyDecoded0?[key0] = attributevalue0
                }
            }
        }
        key = keyDecoded0
        let attributesToGetContainer = try containerValues.decodeIfPresent([String?].self, forKey: .attributesToGet)
        var attributesToGetDecoded0:[String]? = nil
        if let attributesToGetContainer = attributesToGetContainer {
            attributesToGetDecoded0 = [String]()
            for string0 in attributesToGetContainer {
                if let string0 = string0 {
                    attributesToGetDecoded0?.append(string0)
                }
            }
        }
        attributesToGet = attributesToGetDecoded0
        let consistentReadDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .consistentRead)
        consistentRead = consistentReadDecoded
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
        let projectionExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .projectionExpression)
        projectionExpression = projectionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [String:String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [String:String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
    }
}

extension GetItemOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetItemOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetItemOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case requestLimitExceeded(RequestLimitExceeded)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetItemOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetItemOutputResponse(consumedCapacity: \(String(describing: consumedCapacity)), item: \(String(describing: item)))"}
}

extension GetItemOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetItemOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.consumedCapacity = output.consumedCapacity
            self.item = output.item
        } else {
            self.consumedCapacity = nil
            self.item = nil
        }
    }
}

/// <p>Represents the output of a <code>GetItem</code> operation.</p>
public struct GetItemOutputResponse: Equatable {
    /// <p>The capacity units consumed by the <code>GetItem</code> operation. The data returned
    ///             includes the total provisioned throughput consumed, along with statistics for the table
    ///             and any indexes involved in the operation. <code>ConsumedCapacity</code> is only
    ///             returned if the <code>ReturnConsumedCapacity</code> parameter was specified. For more
    ///             information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Read/Write Capacity Mode</a> in the <i>Amazon DynamoDB Developer
    ///                 Guide</i>.</p>
    public let consumedCapacity: ConsumedCapacity?
    /// <p>A map of attribute names to <code>AttributeValue</code> objects, as specified
    ///             by <code>ProjectionExpression</code>.</p>
    public let item: [String:AttributeValue]?

    public init (
        consumedCapacity: ConsumedCapacity? = nil,
        item: [String:AttributeValue]? = nil
    )
    {
        self.consumedCapacity = consumedCapacity
        self.item = item
    }
}

struct GetItemOutputResponseBody: Equatable {
    public let item: [String:AttributeValue]?
    public let consumedCapacity: ConsumedCapacity?
}

extension GetItemOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case consumedCapacity = "ConsumedCapacity"
        case item = "Item"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .item)
        var itemDecoded0: [String:AttributeValue]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in itemContainer {
                if let attributevalue0 = attributevalue0 {
                    itemDecoded0?[key0] = attributevalue0
                }
            }
        }
        item = itemDecoded0
        let consumedCapacityDecoded = try containerValues.decodeIfPresent(ConsumedCapacity.self, forKey: .consumedCapacity)
        consumedCapacity = consumedCapacityDecoded
    }
}

extension GlobalSecondaryIndex: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case indexName = "IndexName"
        case keySchema = "KeySchema"
        case projection = "Projection"
        case provisionedThroughput = "ProvisionedThroughput"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for keyschema0 in keySchema {
                try keySchemaContainer.encode(keyschema0)
            }
        }
        if let projection = projection {
            try encodeContainer.encode(projection, forKey: .projection)
        }
        if let provisionedThroughput = provisionedThroughput {
            try encodeContainer.encode(provisionedThroughput, forKey: .provisionedThroughput)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let projectionDecoded = try containerValues.decodeIfPresent(Projection.self, forKey: .projection)
        projection = projectionDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(ProvisionedThroughput.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
    }
}

extension GlobalSecondaryIndex: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GlobalSecondaryIndex(indexName: \(String(describing: indexName)), keySchema: \(String(describing: keySchema)), projection: \(String(describing: projection)), provisionedThroughput: \(String(describing: provisionedThroughput)))"}
}

/// <p>Represents the properties of a global secondary index.</p>
public struct GlobalSecondaryIndex: Equatable {
    /// <p>The name of the global secondary index. The name must be unique among all other indexes on this table.</p>
    public let indexName: String?
    /// <p>The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>HASH</code> - partition key</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RANGE</code> - sort key</p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>The partition key of an item is also known as its <i>hash attribute</i>.  The
    ///         term "hash attribute" derives from DynamoDB's usage of an internal hash function to
    ///         evenly distribute data items across partitions, based on their partition key values.</p>
    ///             <p>The sort key of an item is also known as its <i>range attribute</i>.
    ///         The term "range attribute" derives from the way DynamoDB stores items with the same
    ///         partition key physically close together, in sorted order by the sort key value.</p>
    ///          </note>
    public let keySchema: [KeySchemaElement]?
    /// <p>Represents attributes that are copied (projected) from the table into the global
    ///          secondary index. These are in addition to the primary key attributes and index key
    ///          attributes, which are automatically projected. </p>
    public let projection: Projection?
    /// <p>Represents the provisioned throughput settings for the specified global secondary index.</p>
    ///          <p>For current minimum and maximum provisioned throughput values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let provisionedThroughput: ProvisionedThroughput?

    public init (
        indexName: String? = nil,
        keySchema: [KeySchemaElement]? = nil,
        projection: Projection? = nil,
        provisionedThroughput: ProvisionedThroughput? = nil
    )
    {
        self.indexName = indexName
        self.keySchema = keySchema
        self.projection = projection
        self.provisionedThroughput = provisionedThroughput
    }
}

extension GlobalSecondaryIndexAutoScalingUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case indexName = "IndexName"
        case provisionedWriteCapacityAutoScalingUpdate = "ProvisionedWriteCapacityAutoScalingUpdate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let provisionedWriteCapacityAutoScalingUpdate = provisionedWriteCapacityAutoScalingUpdate {
            try encodeContainer.encode(provisionedWriteCapacityAutoScalingUpdate, forKey: .provisionedWriteCapacityAutoScalingUpdate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let provisionedWriteCapacityAutoScalingUpdateDecoded = try containerValues.decodeIfPresent(AutoScalingSettingsUpdate.self, forKey: .provisionedWriteCapacityAutoScalingUpdate)
        provisionedWriteCapacityAutoScalingUpdate = provisionedWriteCapacityAutoScalingUpdateDecoded
    }
}

extension GlobalSecondaryIndexAutoScalingUpdate: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GlobalSecondaryIndexAutoScalingUpdate(indexName: \(String(describing: indexName)), provisionedWriteCapacityAutoScalingUpdate: \(String(describing: provisionedWriteCapacityAutoScalingUpdate)))"}
}

/// <p>Represents the auto scaling settings of a global secondary index for a global table
///          that will be modified.</p>
public struct GlobalSecondaryIndexAutoScalingUpdate: Equatable {
    /// <p>The name of the global secondary index.</p>
    public let indexName: String?
    /// <p>Represents the auto scaling settings to be modified for a global table or global
    ///          secondary index.</p>
    public let provisionedWriteCapacityAutoScalingUpdate: AutoScalingSettingsUpdate?

    public init (
        indexName: String? = nil,
        provisionedWriteCapacityAutoScalingUpdate: AutoScalingSettingsUpdate? = nil
    )
    {
        self.indexName = indexName
        self.provisionedWriteCapacityAutoScalingUpdate = provisionedWriteCapacityAutoScalingUpdate
    }
}

extension GlobalSecondaryIndexDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case backfilling = "Backfilling"
        case indexArn = "IndexArn"
        case indexName = "IndexName"
        case indexSizeBytes = "IndexSizeBytes"
        case indexStatus = "IndexStatus"
        case itemCount = "ItemCount"
        case keySchema = "KeySchema"
        case projection = "Projection"
        case provisionedThroughput = "ProvisionedThroughput"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backfilling = backfilling {
            try encodeContainer.encode(backfilling, forKey: .backfilling)
        }
        if let indexArn = indexArn {
            try encodeContainer.encode(indexArn, forKey: .indexArn)
        }
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if indexSizeBytes != 0 {
            try encodeContainer.encode(indexSizeBytes, forKey: .indexSizeBytes)
        }
        if let indexStatus = indexStatus {
            try encodeContainer.encode(indexStatus.rawValue, forKey: .indexStatus)
        }
        if itemCount != 0 {
            try encodeContainer.encode(itemCount, forKey: .itemCount)
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for keyschema0 in keySchema {
                try keySchemaContainer.encode(keyschema0)
            }
        }
        if let projection = projection {
            try encodeContainer.encode(projection, forKey: .projection)
        }
        if let provisionedThroughput = provisionedThroughput {
            try encodeContainer.encode(provisionedThroughput, forKey: .provisionedThroughput)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let projectionDecoded = try containerValues.decodeIfPresent(Projection.self, forKey: .projection)
        projection = projectionDecoded
        let indexStatusDecoded = try containerValues.decodeIfPresent(IndexStatus.self, forKey: .indexStatus)
        indexStatus = indexStatusDecoded
        let backfillingDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .backfilling)
        backfilling = backfillingDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(ProvisionedThroughputDescription.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
        let indexSizeBytesDecoded = try containerValues.decode(Int.self, forKey: .indexSizeBytes)
        indexSizeBytes = indexSizeBytesDecoded
        let itemCountDecoded = try containerValues.decode(Int.self, forKey: .itemCount)
        itemCount = itemCountDecoded
        let indexArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexArn)
        indexArn = indexArnDecoded
    }
}

extension GlobalSecondaryIndexDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GlobalSecondaryIndexDescription(backfilling: \(String(describing: backfilling)), indexArn: \(String(describing: indexArn)), indexName: \(String(describing: indexName)), indexSizeBytes: \(String(describing: indexSizeBytes)), indexStatus: \(String(describing: indexStatus)), itemCount: \(String(describing: itemCount)), keySchema: \(String(describing: keySchema)), projection: \(String(describing: projection)), provisionedThroughput: \(String(describing: provisionedThroughput)))"}
}

/// <p>Represents the properties of a global secondary index.</p>
public struct GlobalSecondaryIndexDescription: Equatable {
    /// <p>Indicates whether the index is currently backfilling. <i>Backfilling</i> is the process of reading items from
    ///       the table and determining whether they can be added to the index. (Not all items will qualify:  For example, a partition key
    ///       cannot have any duplicate values.) If an item can be added to the index, DynamoDB will do so. After all items have been processed,
    ///       the backfilling operation is complete and <code>Backfilling</code> is false.</p>
    ///          <p>You can delete an index that is being created during the <code>Backfilling</code> phase
    ///          when <code>IndexStatus</code> is set to CREATING and <code>Backfilling</code> is true. You
    ///          can't delete the index that is being created when <code>IndexStatus</code> is set to
    ///          CREATING and <code>Backfilling</code> is false. </p>
    ///          <note>
    ///             <p>For indexes that were created during a <code>CreateTable</code> operation, the <code>Backfilling</code> attribute does not appear in the <code>DescribeTable</code> output.</p>
    ///          </note>
    public let backfilling: Bool?
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the index.</p>
    public let indexArn: String?
    /// <p>The name of the global secondary index.</p>
    public let indexName: String?
    /// <p>The total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.</p>
    public let indexSizeBytes: Int
    /// <p>The current state of the global secondary index:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CREATING</code> - The index is being created.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UPDATING</code> - The index is being updated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DELETING</code> - The index is being deleted.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ACTIVE</code> - The index is ready for use.</p>
    ///             </li>
    ///          </ul>
    public let indexStatus: IndexStatus?
    /// <p>The number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.</p>
    public let itemCount: Int
    /// <p>The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>HASH</code> - partition key</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RANGE</code> - sort key</p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>The partition key of an item is also known as its <i>hash attribute</i>.  The
    ///         term "hash attribute" derives from DynamoDB's usage of an internal hash function to
    ///         evenly distribute data items across partitions, based on their partition key values.</p>
    ///             <p>The sort key of an item is also known as its <i>range attribute</i>.
    ///         The term "range attribute" derives from the way DynamoDB stores items with the same
    ///         partition key physically close together, in sorted order by the sort key value.</p>
    ///          </note>
    public let keySchema: [KeySchemaElement]?
    /// <p>Represents attributes that are copied (projected) from the table into the global
    ///          secondary index. These are in addition to the primary key attributes and index key
    ///          attributes, which are automatically projected. </p>
    public let projection: Projection?
    /// <p>Represents the provisioned throughput settings for the specified global secondary index.</p>
    ///          <p>For current minimum and maximum provisioned throughput values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let provisionedThroughput: ProvisionedThroughputDescription?

    public init (
        backfilling: Bool? = nil,
        indexArn: String? = nil,
        indexName: String? = nil,
        indexSizeBytes: Int = 0,
        indexStatus: IndexStatus? = nil,
        itemCount: Int = 0,
        keySchema: [KeySchemaElement]? = nil,
        projection: Projection? = nil,
        provisionedThroughput: ProvisionedThroughputDescription? = nil
    )
    {
        self.backfilling = backfilling
        self.indexArn = indexArn
        self.indexName = indexName
        self.indexSizeBytes = indexSizeBytes
        self.indexStatus = indexStatus
        self.itemCount = itemCount
        self.keySchema = keySchema
        self.projection = projection
        self.provisionedThroughput = provisionedThroughput
    }
}

extension GlobalSecondaryIndexInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case indexName = "IndexName"
        case keySchema = "KeySchema"
        case projection = "Projection"
        case provisionedThroughput = "ProvisionedThroughput"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for keyschema0 in keySchema {
                try keySchemaContainer.encode(keyschema0)
            }
        }
        if let projection = projection {
            try encodeContainer.encode(projection, forKey: .projection)
        }
        if let provisionedThroughput = provisionedThroughput {
            try encodeContainer.encode(provisionedThroughput, forKey: .provisionedThroughput)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let projectionDecoded = try containerValues.decodeIfPresent(Projection.self, forKey: .projection)
        projection = projectionDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(ProvisionedThroughput.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
    }
}

extension GlobalSecondaryIndexInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GlobalSecondaryIndexInfo(indexName: \(String(describing: indexName)), keySchema: \(String(describing: keySchema)), projection: \(String(describing: projection)), provisionedThroughput: \(String(describing: provisionedThroughput)))"}
}

/// <p>Represents the properties of a global secondary index for the table
///      when the backup was created.</p>
public struct GlobalSecondaryIndexInfo: Equatable {
    /// <p>The name of the global secondary index.</p>
    public let indexName: String?
    /// <p>The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>HASH</code> - partition key</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RANGE</code> - sort key</p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>The partition key of an item is also known as its <i>hash attribute</i>.  The
    ///         term "hash attribute" derives from DynamoDB's usage of an internal hash function to
    ///         evenly distribute data items across partitions, based on their partition key values.</p>
    ///             <p>The sort key of an item is also known as its <i>range attribute</i>.
    ///         The term "range attribute" derives from the way DynamoDB stores items with the same
    ///         partition key physically close together, in sorted order by the sort key value.</p>
    ///          </note>
    public let keySchema: [KeySchemaElement]?
    /// <p>Represents attributes that are copied (projected) from the table into
    ///       the global secondary index. These are in addition to the primary
    ///       key attributes and index key attributes, which are automatically
    ///       projected. </p>
    public let projection: Projection?
    /// <p>Represents the provisioned throughput settings for the specified global secondary index. </p>
    public let provisionedThroughput: ProvisionedThroughput?

    public init (
        indexName: String? = nil,
        keySchema: [KeySchemaElement]? = nil,
        projection: Projection? = nil,
        provisionedThroughput: ProvisionedThroughput? = nil
    )
    {
        self.indexName = indexName
        self.keySchema = keySchema
        self.projection = projection
        self.provisionedThroughput = provisionedThroughput
    }
}

extension GlobalSecondaryIndexUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case create = "Create"
        case delete = "Delete"
        case update = "Update"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let create = create {
            try encodeContainer.encode(create, forKey: .create)
        }
        if let delete = delete {
            try encodeContainer.encode(delete, forKey: .delete)
        }
        if let update = update {
            try encodeContainer.encode(update, forKey: .update)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateDecoded = try containerValues.decodeIfPresent(UpdateGlobalSecondaryIndexAction.self, forKey: .update)
        update = updateDecoded
        let createDecoded = try containerValues.decodeIfPresent(CreateGlobalSecondaryIndexAction.self, forKey: .create)
        create = createDecoded
        let deleteDecoded = try containerValues.decodeIfPresent(DeleteGlobalSecondaryIndexAction.self, forKey: .delete)
        delete = deleteDecoded
    }
}

extension GlobalSecondaryIndexUpdate: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GlobalSecondaryIndexUpdate(create: \(String(describing: create)), delete: \(String(describing: delete)), update: \(String(describing: update)))"}
}

/// <p>Represents one of the following:</p>
///          <ul>
///             <li>
///                <p>A new global secondary index to be added to an existing table.</p>
///             </li>
///             <li>
///                <p>New provisioned throughput parameters for an existing global secondary index.</p>
///             </li>
///             <li>
///                <p>An existing global secondary index to be removed from an existing table.</p>
///             </li>
///          </ul>
public struct GlobalSecondaryIndexUpdate: Equatable {
    /// <p>The parameters required for creating a global secondary index on an existing table:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>IndexName </code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>KeySchema </code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>AttributeDefinitions </code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Projection </code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ProvisionedThroughput </code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let create: CreateGlobalSecondaryIndexAction?
    /// <p>The name of an existing global secondary index to be removed.</p>
    public let delete: DeleteGlobalSecondaryIndexAction?
    /// <p>The name of an existing global secondary index, along with new provisioned throughput settings to be applied to that index.</p>
    public let update: UpdateGlobalSecondaryIndexAction?

    public init (
        create: CreateGlobalSecondaryIndexAction? = nil,
        delete: DeleteGlobalSecondaryIndexAction? = nil,
        update: UpdateGlobalSecondaryIndexAction? = nil
    )
    {
        self.create = create
        self.delete = delete
        self.update = update
    }
}

extension GlobalTable: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case globalTableName = "GlobalTableName"
        case replicationGroup = "ReplicationGroup"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalTableName = globalTableName {
            try encodeContainer.encode(globalTableName, forKey: .globalTableName)
        }
        if let replicationGroup = replicationGroup {
            var replicationGroupContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicationGroup)
            for replicalist0 in replicationGroup {
                try replicationGroupContainer.encode(replicalist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .globalTableName)
        globalTableName = globalTableNameDecoded
        let replicationGroupContainer = try containerValues.decodeIfPresent([Replica?].self, forKey: .replicationGroup)
        var replicationGroupDecoded0:[Replica]? = nil
        if let replicationGroupContainer = replicationGroupContainer {
            replicationGroupDecoded0 = [Replica]()
            for structure0 in replicationGroupContainer {
                if let structure0 = structure0 {
                    replicationGroupDecoded0?.append(structure0)
                }
            }
        }
        replicationGroup = replicationGroupDecoded0
    }
}

extension GlobalTable: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GlobalTable(globalTableName: \(String(describing: globalTableName)), replicationGroup: \(String(describing: replicationGroup)))"}
}

/// <p>Represents the properties of a global table.</p>
public struct GlobalTable: Equatable {
    /// <p>The global table name.</p>
    public let globalTableName: String?
    /// <p>The Regions where the global table has replicas.</p>
    public let replicationGroup: [Replica]?

    public init (
        globalTableName: String? = nil,
        replicationGroup: [Replica]? = nil
    )
    {
        self.globalTableName = globalTableName
        self.replicationGroup = replicationGroup
    }
}

extension GlobalTableAlreadyExistsException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GlobalTableAlreadyExistsException(message: \(String(describing: message)))"}
}

extension GlobalTableAlreadyExistsException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GlobalTableAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified global table already exists.</p>
public struct GlobalTableAlreadyExistsException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct GlobalTableAlreadyExistsExceptionBody: Equatable {
    public let message: String?
}

extension GlobalTableAlreadyExistsExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GlobalTableDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationDateTime = "CreationDateTime"
        case globalTableArn = "GlobalTableArn"
        case globalTableName = "GlobalTableName"
        case globalTableStatus = "GlobalTableStatus"
        case replicationGroup = "ReplicationGroup"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDateTime = creationDateTime {
            try encodeContainer.encode(creationDateTime.timeIntervalSince1970, forKey: .creationDateTime)
        }
        if let globalTableArn = globalTableArn {
            try encodeContainer.encode(globalTableArn, forKey: .globalTableArn)
        }
        if let globalTableName = globalTableName {
            try encodeContainer.encode(globalTableName, forKey: .globalTableName)
        }
        if let globalTableStatus = globalTableStatus {
            try encodeContainer.encode(globalTableStatus.rawValue, forKey: .globalTableStatus)
        }
        if let replicationGroup = replicationGroup {
            var replicationGroupContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicationGroup)
            for replicadescriptionlist0 in replicationGroup {
                try replicationGroupContainer.encode(replicadescriptionlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationGroupContainer = try containerValues.decodeIfPresent([ReplicaDescription?].self, forKey: .replicationGroup)
        var replicationGroupDecoded0:[ReplicaDescription]? = nil
        if let replicationGroupContainer = replicationGroupContainer {
            replicationGroupDecoded0 = [ReplicaDescription]()
            for structure0 in replicationGroupContainer {
                if let structure0 = structure0 {
                    replicationGroupDecoded0?.append(structure0)
                }
            }
        }
        replicationGroup = replicationGroupDecoded0
        let globalTableArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .globalTableArn)
        globalTableArn = globalTableArnDecoded
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let globalTableStatusDecoded = try containerValues.decodeIfPresent(GlobalTableStatus.self, forKey: .globalTableStatus)
        globalTableStatus = globalTableStatusDecoded
        let globalTableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .globalTableName)
        globalTableName = globalTableNameDecoded
    }
}

extension GlobalTableDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GlobalTableDescription(creationDateTime: \(String(describing: creationDateTime)), globalTableArn: \(String(describing: globalTableArn)), globalTableName: \(String(describing: globalTableName)), globalTableStatus: \(String(describing: globalTableStatus)), replicationGroup: \(String(describing: replicationGroup)))"}
}

/// <p>Contains details about the global table.</p>
public struct GlobalTableDescription: Equatable {
    /// <p>The creation time of the global table.</p>
    public let creationDateTime: Date?
    /// <p>The unique identifier of the global table.</p>
    public let globalTableArn: String?
    /// <p>The global table name.</p>
    public let globalTableName: String?
    /// <p>The current state of the global table:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CREATING</code> - The global table is being created.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UPDATING</code> - The global table is being updated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DELETING</code> - The global table is being deleted.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ACTIVE</code> - The global table is ready for use.</p>
    ///             </li>
    ///          </ul>
    public let globalTableStatus: GlobalTableStatus?
    /// <p>The Regions where the global table has replicas.</p>
    public let replicationGroup: [ReplicaDescription]?

    public init (
        creationDateTime: Date? = nil,
        globalTableArn: String? = nil,
        globalTableName: String? = nil,
        globalTableStatus: GlobalTableStatus? = nil,
        replicationGroup: [ReplicaDescription]? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.globalTableArn = globalTableArn
        self.globalTableName = globalTableName
        self.globalTableStatus = globalTableStatus
        self.replicationGroup = replicationGroup
    }
}

extension GlobalTableGlobalSecondaryIndexSettingsUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case indexName = "IndexName"
        case provisionedWriteCapacityAutoScalingSettingsUpdate = "ProvisionedWriteCapacityAutoScalingSettingsUpdate"
        case provisionedWriteCapacityUnits = "ProvisionedWriteCapacityUnits"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let provisionedWriteCapacityAutoScalingSettingsUpdate = provisionedWriteCapacityAutoScalingSettingsUpdate {
            try encodeContainer.encode(provisionedWriteCapacityAutoScalingSettingsUpdate, forKey: .provisionedWriteCapacityAutoScalingSettingsUpdate)
        }
        if let provisionedWriteCapacityUnits = provisionedWriteCapacityUnits {
            try encodeContainer.encode(provisionedWriteCapacityUnits, forKey: .provisionedWriteCapacityUnits)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let provisionedWriteCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .provisionedWriteCapacityUnits)
        provisionedWriteCapacityUnits = provisionedWriteCapacityUnitsDecoded
        let provisionedWriteCapacityAutoScalingSettingsUpdateDecoded = try containerValues.decodeIfPresent(AutoScalingSettingsUpdate.self, forKey: .provisionedWriteCapacityAutoScalingSettingsUpdate)
        provisionedWriteCapacityAutoScalingSettingsUpdate = provisionedWriteCapacityAutoScalingSettingsUpdateDecoded
    }
}

extension GlobalTableGlobalSecondaryIndexSettingsUpdate: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GlobalTableGlobalSecondaryIndexSettingsUpdate(indexName: \(String(describing: indexName)), provisionedWriteCapacityAutoScalingSettingsUpdate: \(String(describing: provisionedWriteCapacityAutoScalingSettingsUpdate)), provisionedWriteCapacityUnits: \(String(describing: provisionedWriteCapacityUnits)))"}
}

/// <p>Represents the settings of a global secondary index for a global table that will be modified.</p>
public struct GlobalTableGlobalSecondaryIndexSettingsUpdate: Equatable {
    /// <p>The name of the global secondary index. The name must be unique among all other indexes on this table.</p>
    public let indexName: String?
    /// <p>Auto scaling settings for managing a global secondary index's write capacity
    ///          units.</p>
    public let provisionedWriteCapacityAutoScalingSettingsUpdate: AutoScalingSettingsUpdate?
    /// <p>The maximum number of writes consumed per second before DynamoDB returns a <code>ThrottlingException.</code>
    ///          </p>
    public let provisionedWriteCapacityUnits: Int?

    public init (
        indexName: String? = nil,
        provisionedWriteCapacityAutoScalingSettingsUpdate: AutoScalingSettingsUpdate? = nil,
        provisionedWriteCapacityUnits: Int? = nil
    )
    {
        self.indexName = indexName
        self.provisionedWriteCapacityAutoScalingSettingsUpdate = provisionedWriteCapacityAutoScalingSettingsUpdate
        self.provisionedWriteCapacityUnits = provisionedWriteCapacityUnits
    }
}

extension GlobalTableNotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GlobalTableNotFoundException(message: \(String(describing: message)))"}
}

extension GlobalTableNotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GlobalTableNotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified global table does not exist.</p>
public struct GlobalTableNotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct GlobalTableNotFoundExceptionBody: Equatable {
    public let message: String?
}

extension GlobalTableNotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum GlobalTableStatus {
    case active
    case creating
    case deleting
    case updating
    case sdkUnknown(String)
}

extension GlobalTableStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [GlobalTableStatus] {
        return [
            .active,
            .creating,
            .deleting,
            .updating,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .active: return "ACTIVE"
        case .creating: return "CREATING"
        case .deleting: return "DELETING"
        case .updating: return "UPDATING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = GlobalTableStatus(rawValue: rawValue) ?? GlobalTableStatus.sdkUnknown(rawValue)
    }
}

extension IdempotentParameterMismatchException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "IdempotentParameterMismatchException(message: \(String(describing: message)))"}
}

extension IdempotentParameterMismatchException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: IdempotentParameterMismatchExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>DynamoDB rejected the request because you retried a request with a different payload but
///       with an idempotent token that was already used.</p>
public struct IdempotentParameterMismatchException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct IdempotentParameterMismatchExceptionBody: Equatable {
    public let message: String?
}

extension IdempotentParameterMismatchExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IndexNotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "IndexNotFoundException(message: \(String(describing: message)))"}
}

extension IndexNotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: IndexNotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The operation tried to access a nonexistent index.</p>
public struct IndexNotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct IndexNotFoundExceptionBody: Equatable {
    public let message: String?
}

extension IndexNotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum IndexStatus {
    case active
    case creating
    case deleting
    case updating
    case sdkUnknown(String)
}

extension IndexStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [IndexStatus] {
        return [
            .active,
            .creating,
            .deleting,
            .updating,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .active: return "ACTIVE"
        case .creating: return "CREATING"
        case .deleting: return "DELETING"
        case .updating: return "UPDATING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = IndexStatus(rawValue: rawValue) ?? IndexStatus.sdkUnknown(rawValue)
    }
}

extension InternalServerError: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InternalServerError(message: \(String(describing: message)))"}
}

extension InternalServerError: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InternalServerErrorBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An error occurred on the server side.</p>
public struct InternalServerError: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .server
    /// <p>The server encountered an internal error trying to fulfill the request.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServerErrorBody: Equatable {
    public let message: String?
}

extension InternalServerErrorBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidEndpointException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidEndpointException(message: \(String(describing: message)))"}
}

extension InvalidEndpointException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidEndpointExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

public struct InvalidEndpointException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidEndpointExceptionBody: Equatable {
    public let message: String?
}

extension InvalidEndpointExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidExportTimeException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidExportTimeException(message: \(String(describing: message)))"}
}

extension InvalidExportTimeException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidExportTimeExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified <code>ExportTime</code> is outside of the point in time recovery
///             window.</p>
public struct InvalidExportTimeException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidExportTimeExceptionBody: Equatable {
    public let message: String?
}

extension InvalidExportTimeExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRestoreTimeException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidRestoreTimeException(message: \(String(describing: message)))"}
}

extension InvalidRestoreTimeException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidRestoreTimeExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An invalid restore time was specified. RestoreDateTime must be between EarliestRestorableDateTime and LatestRestorableDateTime.</p>
public struct InvalidRestoreTimeException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidRestoreTimeExceptionBody: Equatable {
    public let message: String?
}

extension InvalidRestoreTimeExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ItemCollectionMetrics: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case itemCollectionKey = "ItemCollectionKey"
        case sizeEstimateRangeGB = "SizeEstimateRangeGB"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let itemCollectionKey = itemCollectionKey {
            var itemCollectionKeyContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .itemCollectionKey)
            for (dictKey0, itemcollectionkeyattributemap0) in itemCollectionKey {
                try itemCollectionKeyContainer.encode(itemcollectionkeyattributemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let sizeEstimateRangeGB = sizeEstimateRangeGB {
            var sizeEstimateRangeGBContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sizeEstimateRangeGB)
            for itemcollectionsizeestimaterange0 in sizeEstimateRangeGB {
                try sizeEstimateRangeGBContainer.encode(itemcollectionsizeestimaterange0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemCollectionKeyContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .itemCollectionKey)
        var itemCollectionKeyDecoded0: [String:AttributeValue]? = nil
        if let itemCollectionKeyContainer = itemCollectionKeyContainer {
            itemCollectionKeyDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in itemCollectionKeyContainer {
                if let attributevalue0 = attributevalue0 {
                    itemCollectionKeyDecoded0?[key0] = attributevalue0
                }
            }
        }
        itemCollectionKey = itemCollectionKeyDecoded0
        let sizeEstimateRangeGBContainer = try containerValues.decodeIfPresent([Double?].self, forKey: .sizeEstimateRangeGB)
        var sizeEstimateRangeGBDecoded0:[Double]? = nil
        if let sizeEstimateRangeGBContainer = sizeEstimateRangeGBContainer {
            sizeEstimateRangeGBDecoded0 = [Double]()
            for double0 in sizeEstimateRangeGBContainer {
                if let double0 = double0 {
                    sizeEstimateRangeGBDecoded0?.append(double0)
                }
            }
        }
        sizeEstimateRangeGB = sizeEstimateRangeGBDecoded0
    }
}

extension ItemCollectionMetrics: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ItemCollectionMetrics(itemCollectionKey: \(String(describing: itemCollectionKey)), sizeEstimateRangeGB: \(String(describing: sizeEstimateRangeGB)))"}
}

/// <p>Information about item collections, if any, that were affected by the operation.
///         <code>ItemCollectionMetrics</code> is only returned if the request asked for it. If the
///       table does not have any local secondary indexes, this information is not returned in the response.</p>
public struct ItemCollectionMetrics: Equatable {
    /// <p>The partition key value of the item collection. This value is the same as the partition key value of the item.</p>
    public let itemCollectionKey: [String:AttributeValue]?
    /// <p>An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.</p>
    ///          <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p>
    public let sizeEstimateRangeGB: [Double]?

    public init (
        itemCollectionKey: [String:AttributeValue]? = nil,
        sizeEstimateRangeGB: [Double]? = nil
    )
    {
        self.itemCollectionKey = itemCollectionKey
        self.sizeEstimateRangeGB = sizeEstimateRangeGB
    }
}

extension ItemCollectionSizeLimitExceededException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ItemCollectionSizeLimitExceededException(message: \(String(describing: message)))"}
}

extension ItemCollectionSizeLimitExceededException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ItemCollectionSizeLimitExceededExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An item collection is too large. This exception is only returned for tables that have one or more local secondary indexes.</p>
public struct ItemCollectionSizeLimitExceededException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The total size of an item collection has exceeded the maximum limit of 10 gigabytes.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ItemCollectionSizeLimitExceededExceptionBody: Equatable {
    public let message: String?
}

extension ItemCollectionSizeLimitExceededExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ItemResponse: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case item = "Item"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let item = item {
            var itemContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .item)
            for (dictKey0, attributemap0) in item {
                try itemContainer.encode(attributemap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .item)
        var itemDecoded0: [String:AttributeValue]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in itemContainer {
                if let attributevalue0 = attributevalue0 {
                    itemDecoded0?[key0] = attributevalue0
                }
            }
        }
        item = itemDecoded0
    }
}

extension ItemResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ItemResponse(item: \(String(describing: item)))"}
}

/// <p>Details for the requested item.</p>
public struct ItemResponse: Equatable {
    /// <p>Map of attribute data consisting of the data type and attribute value.</p>
    public let item: [String:AttributeValue]?

    public init (
        item: [String:AttributeValue]? = nil
    )
    {
        self.item = item
    }
}

extension KeySchemaElement: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributeName = "AttributeName"
        case keyType = "KeyType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeName = attributeName {
            try encodeContainer.encode(attributeName, forKey: .attributeName)
        }
        if let keyType = keyType {
            try encodeContainer.encode(keyType.rawValue, forKey: .keyType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
        let keyTypeDecoded = try containerValues.decodeIfPresent(KeyType.self, forKey: .keyType)
        keyType = keyTypeDecoded
    }
}

extension KeySchemaElement: CustomDebugStringConvertible {
    public var debugDescription: String {
        "KeySchemaElement(attributeName: \(String(describing: attributeName)), keyType: \(String(describing: keyType)))"}
}

/// <p>Represents <i>a single element</i> of a key schema. A key schema specifies the attributes
///       that make up the primary key of a table, or the key attributes of an index.</p>
///          <p>A <code>KeySchemaElement</code> represents exactly one attribute of the primary key. For example, a
///       simple primary key would be represented by one <code>KeySchemaElement</code> (for the partition key). A composite
///        primary key would require one <code>KeySchemaElement</code> for the partition key, and another
///         <code>KeySchemaElement</code> for the sort key.</p>
///          <p>A <code>KeySchemaElement</code> must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary.  The attribute cannot be nested within a List or a Map.</p>
public struct KeySchemaElement: Equatable {
    /// <p>The name of a key attribute.</p>
    public let attributeName: String?
    /// <p>The role that this key attribute will assume:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>HASH</code> - partition key</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RANGE</code> - sort key</p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>The partition key of an item is also known as its <i>hash attribute</i>.  The
    ///         term "hash attribute" derives from DynamoDB's usage of an internal hash function to
    ///         evenly distribute data items across partitions, based on their partition key values.</p>
    ///             <p>The sort key of an item is also known as its <i>range attribute</i>.
    ///         The term "range attribute" derives from the way DynamoDB stores items with the same
    ///         partition key physically close together, in sorted order by the sort key value.</p>
    ///          </note>
    public let keyType: KeyType?

    public init (
        attributeName: String? = nil,
        keyType: KeyType? = nil
    )
    {
        self.attributeName = attributeName
        self.keyType = keyType
    }
}

public enum KeyType {
    case hash
    case range
    case sdkUnknown(String)
}

extension KeyType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [KeyType] {
        return [
            .hash,
            .range,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .hash: return "HASH"
        case .range: return "RANGE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = KeyType(rawValue: rawValue) ?? KeyType.sdkUnknown(rawValue)
    }
}

extension KeysAndAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributesToGet = "AttributesToGet"
        case consistentRead = "ConsistentRead"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case keys = "Keys"
        case projectionExpression = "ProjectionExpression"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributesToGet = attributesToGet {
            var attributesToGetContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributesToGet)
            for attributenamelist0 in attributesToGet {
                try attributesToGetContainer.encode(attributenamelist0)
            }
        }
        if let consistentRead = consistentRead {
            try encodeContainer.encode(consistentRead, forKey: .consistentRead)
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionattributenamemap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionattributenamemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let keys = keys {
            var keysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keys)
            for keylist0 in keys {
                var keylist0Container = keysContainer.nestedContainer(keyedBy: Key.self)
                for (dictKey1, key1) in keylist0 {
                    try keylist0Container.encode(key1, forKey: Key(stringValue: dictKey1))
                }
            }
        }
        if let projectionExpression = projectionExpression {
            try encodeContainer.encode(projectionExpression, forKey: .projectionExpression)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keysContainer = try containerValues.decodeIfPresent([[String: AttributeValue?]?].self, forKey: .keys)
        var keysDecoded0:[[String:AttributeValue]]? = nil
        if let keysContainer = keysContainer {
            keysDecoded0 = [[String:AttributeValue]]()
            for map0 in keysContainer {
                var keysContainerDecoded0: [String: AttributeValue]? = nil
                if let map0 = map0 {
                    keysContainerDecoded0 = [String: AttributeValue]()
                    for (key1, attributevalue1) in map0 {
                        if let attributevalue1 = attributevalue1 {
                            keysContainerDecoded0?[key1] = attributevalue1
                        }
                    }
                }
                if let keysContainerDecoded0 = keysContainerDecoded0 {
                    keysDecoded0?.append(keysContainerDecoded0)
                }
            }
        }
        keys = keysDecoded0
        let attributesToGetContainer = try containerValues.decodeIfPresent([String?].self, forKey: .attributesToGet)
        var attributesToGetDecoded0:[String]? = nil
        if let attributesToGetContainer = attributesToGetContainer {
            attributesToGetDecoded0 = [String]()
            for string0 in attributesToGetContainer {
                if let string0 = string0 {
                    attributesToGetDecoded0?.append(string0)
                }
            }
        }
        attributesToGet = attributesToGetDecoded0
        let consistentReadDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .consistentRead)
        consistentRead = consistentReadDecoded
        let projectionExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .projectionExpression)
        projectionExpression = projectionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [String:String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [String:String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
    }
}

extension KeysAndAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "KeysAndAttributes(attributesToGet: \(String(describing: attributesToGet)), consistentRead: \(String(describing: consistentRead)), expressionAttributeNames: \(String(describing: expressionAttributeNames)), keys: \(String(describing: keys)), projectionExpression: \(String(describing: projectionExpression)))"}
}

/// <p>Represents a set of primary keys and, for each key, the attributes to retrieve from the table.</p>
///          <p>For each primary key, you must provide <i>all</i> of the key attributes. For example, with a
///       simple primary key, you only need to provide the partition key. For a composite
///       primary key, you must provide <i>both</i> the partition key and the sort key.</p>
public struct KeysAndAttributes: Equatable {
    /// <p>This is a legacy parameter.  Use <code>ProjectionExpression</code> instead.  For more information, see
    ///          <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html">Legacy Conditional Parameters</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let attributesToGet: [String]?
    /// <p>The consistency of a read operation. If set to <code>true</code>, then a strongly consistent
    ///       read is used; otherwise, an eventually consistent read is used.</p>
    public let consistentRead: Bool?
    /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
    ///          <ul>
    ///             <li>
    ///                <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
    ///             </li>
    ///             <li>
    ///                <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
    ///             </li>
    ///             <li>
    ///                <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
    ///             </li>
    ///          </ul>
    ///          <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Percentile</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>{"#P":"Percentile"}</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>You could then use this substitution in an expression, as in this example:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>#P = :val</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
    ///          </note>
    ///          <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let expressionAttributeNames: [String:String]?
    /// <p>The primary key attribute values that define the items and the attributes associated with the items.</p>
    public let keys: [[String:AttributeValue]]?
    /// <p>A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars,
    ///          sets, or elements of a JSON document. The attributes in the <code>ProjectionExpression</code> must be separated by
    ///          commas.</p>
    ///          <p>If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let projectionExpression: String?

    public init (
        attributesToGet: [String]? = nil,
        consistentRead: Bool? = nil,
        expressionAttributeNames: [String:String]? = nil,
        keys: [[String:AttributeValue]]? = nil,
        projectionExpression: String? = nil
    )
    {
        self.attributesToGet = attributesToGet
        self.consistentRead = consistentRead
        self.expressionAttributeNames = expressionAttributeNames
        self.keys = keys
        self.projectionExpression = projectionExpression
    }
}

extension KinesisDataStreamDestination: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destinationStatus = "DestinationStatus"
        case destinationStatusDescription = "DestinationStatusDescription"
        case streamArn = "StreamArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationStatus = destinationStatus {
            try encodeContainer.encode(destinationStatus.rawValue, forKey: .destinationStatus)
        }
        if let destinationStatusDescription = destinationStatusDescription {
            try encodeContainer.encode(destinationStatusDescription, forKey: .destinationStatusDescription)
        }
        if let streamArn = streamArn {
            try encodeContainer.encode(streamArn, forKey: .streamArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamArn)
        streamArn = streamArnDecoded
        let destinationStatusDecoded = try containerValues.decodeIfPresent(DestinationStatus.self, forKey: .destinationStatus)
        destinationStatus = destinationStatusDecoded
        let destinationStatusDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationStatusDescription)
        destinationStatusDescription = destinationStatusDescriptionDecoded
    }
}

extension KinesisDataStreamDestination: CustomDebugStringConvertible {
    public var debugDescription: String {
        "KinesisDataStreamDestination(destinationStatus: \(String(describing: destinationStatus)), destinationStatusDescription: \(String(describing: destinationStatusDescription)), streamArn: \(String(describing: streamArn)))"}
}

/// <p>Describes a Kinesis data stream destination.</p>
public struct KinesisDataStreamDestination: Equatable {
    /// <p>The current status of replication.</p>
    public let destinationStatus: DestinationStatus?
    /// <p>The human-readable string that corresponds to the replica status.</p>
    public let destinationStatusDescription: String?
    /// <p>The ARN for a specific Kinesis data stream.</p>
    public let streamArn: String?

    public init (
        destinationStatus: DestinationStatus? = nil,
        destinationStatusDescription: String? = nil,
        streamArn: String? = nil
    )
    {
        self.destinationStatus = destinationStatus
        self.destinationStatusDescription = destinationStatusDescription
        self.streamArn = streamArn
    }
}

extension LimitExceededException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LimitExceededException(message: \(String(describing: message)))"}
}

extension LimitExceededException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>There is no limit to the number of daily on-demand backups that can be taken. </p>
///         <p>Up to 50 simultaneous table operations are allowed per account. These operations
///             include <code>CreateTable</code>, <code>UpdateTable</code>,
///                 <code>DeleteTable</code>,<code>UpdateTimeToLive</code>,
///           <code>RestoreTableFromBackup</code>, and <code>RestoreTableToPointInTime</code>. </p>
///           <p>The only exception is when you are creating a table with one or more secondary indexes. You can have up to
///         25 such requests running at a time; however, if the table or index specifications are complex, DynamoDB might temporarily
///         reduce the number of concurrent operations.</p>
///         <p>There is a soft account quota of 256 tables.</p>
public struct LimitExceededException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>Too many operations for a given subscriber.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Equatable {
    public let message: String?
}

extension LimitExceededExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct ListBackupsInputBodyMiddleware: Middleware {
    public let id: String = "ListBackupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListBackupsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListBackupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListBackupsInput>
    public typealias MOutput = OperationOutput<ListBackupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListBackupsOutputError>
}

extension ListBackupsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListBackupsInput(backupType: \(String(describing: backupType)), exclusiveStartBackupArn: \(String(describing: exclusiveStartBackupArn)), limit: \(String(describing: limit)), tableName: \(String(describing: tableName)), timeRangeLowerBound: \(String(describing: timeRangeLowerBound)), timeRangeUpperBound: \(String(describing: timeRangeUpperBound)))"}
}

extension ListBackupsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case backupType = "BackupType"
        case exclusiveStartBackupArn = "ExclusiveStartBackupArn"
        case limit = "Limit"
        case tableName = "TableName"
        case timeRangeLowerBound = "TimeRangeLowerBound"
        case timeRangeUpperBound = "TimeRangeUpperBound"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupType = backupType {
            try encodeContainer.encode(backupType.rawValue, forKey: .backupType)
        }
        if let exclusiveStartBackupArn = exclusiveStartBackupArn {
            try encodeContainer.encode(exclusiveStartBackupArn, forKey: .exclusiveStartBackupArn)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let timeRangeLowerBound = timeRangeLowerBound {
            try encodeContainer.encode(timeRangeLowerBound.timeIntervalSince1970, forKey: .timeRangeLowerBound)
        }
        if let timeRangeUpperBound = timeRangeUpperBound {
            try encodeContainer.encode(timeRangeUpperBound.timeIntervalSince1970, forKey: .timeRangeUpperBound)
        }
    }
}

public struct ListBackupsInputHeadersMiddleware: Middleware {
    public let id: String = "ListBackupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListBackupsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListBackupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListBackupsInput>
    public typealias MOutput = OperationOutput<ListBackupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListBackupsOutputError>
}

public struct ListBackupsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListBackupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListBackupsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListBackupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListBackupsInput>
    public typealias MOutput = OperationOutput<ListBackupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListBackupsOutputError>
}

public struct ListBackupsInput: Equatable {
    /// <p>The backups from the table specified by <code>BackupType</code> are listed.</p>
    ///          <p>Where <code>BackupType</code> can be:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>USER</code> - On-demand backup created by you.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>SYSTEM</code> - On-demand backup automatically created by
    ///                     DynamoDB.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>ALL</code> - All types of on-demand backups (USER and SYSTEM).</p>
    ///             </li>
    ///          </ul>
    public let backupType: BackupTypeFilter?
    /// <p>
    ///             <code>LastEvaluatedBackupArn</code> is the Amazon Resource Name (ARN) of the backup last
    ///             evaluated when the current page of results was returned, inclusive of the current page
    ///             of results. This value may be specified as the <code>ExclusiveStartBackupArn</code> of a
    ///             new <code>ListBackups</code> operation in order to fetch the next page of results. </p>
    public let exclusiveStartBackupArn: String?
    /// <p>Maximum number of backups to return at once.</p>
    public let limit: Int?
    /// <p>The backups from the table specified by <code>TableName</code> are listed. </p>
    public let tableName: String?
    /// <p>Only backups created after this time are listed. <code>TimeRangeLowerBound</code> is inclusive.</p>
    public let timeRangeLowerBound: Date?
    /// <p>Only backups created before this time are listed. <code>TimeRangeUpperBound</code> is exclusive. </p>
    public let timeRangeUpperBound: Date?

    public init (
        backupType: BackupTypeFilter? = nil,
        exclusiveStartBackupArn: String? = nil,
        limit: Int? = nil,
        tableName: String? = nil,
        timeRangeLowerBound: Date? = nil,
        timeRangeUpperBound: Date? = nil
    )
    {
        self.backupType = backupType
        self.exclusiveStartBackupArn = exclusiveStartBackupArn
        self.limit = limit
        self.tableName = tableName
        self.timeRangeLowerBound = timeRangeLowerBound
        self.timeRangeUpperBound = timeRangeUpperBound
    }
}

struct ListBackupsInputBody: Equatable {
    public let tableName: String?
    public let limit: Int?
    public let timeRangeLowerBound: Date?
    public let timeRangeUpperBound: Date?
    public let exclusiveStartBackupArn: String?
    public let backupType: BackupTypeFilter?
}

extension ListBackupsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case backupType = "BackupType"
        case exclusiveStartBackupArn = "ExclusiveStartBackupArn"
        case limit = "Limit"
        case tableName = "TableName"
        case timeRangeLowerBound = "TimeRangeLowerBound"
        case timeRangeUpperBound = "TimeRangeUpperBound"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let timeRangeLowerBoundDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .timeRangeLowerBound)
        timeRangeLowerBound = timeRangeLowerBoundDecoded
        let timeRangeUpperBoundDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .timeRangeUpperBound)
        timeRangeUpperBound = timeRangeUpperBoundDecoded
        let exclusiveStartBackupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .exclusiveStartBackupArn)
        exclusiveStartBackupArn = exclusiveStartBackupArnDecoded
        let backupTypeDecoded = try containerValues.decodeIfPresent(BackupTypeFilter.self, forKey: .backupType)
        backupType = backupTypeDecoded
    }
}

extension ListBackupsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListBackupsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListBackupsOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListBackupsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListBackupsOutputResponse(backupSummaries: \(String(describing: backupSummaries)), lastEvaluatedBackupArn: \(String(describing: lastEvaluatedBackupArn)))"}
}

extension ListBackupsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListBackupsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.backupSummaries = output.backupSummaries
            self.lastEvaluatedBackupArn = output.lastEvaluatedBackupArn
        } else {
            self.backupSummaries = nil
            self.lastEvaluatedBackupArn = nil
        }
    }
}

public struct ListBackupsOutputResponse: Equatable {
    /// <p>List of <code>BackupSummary</code> objects.</p>
    public let backupSummaries: [BackupSummary]?
    /// <p>
    ///         The ARN of the backup last evaluated when the current page of results was returned,
    ///         inclusive of the current page of results. This value may be specified as the
    ///         <code>ExclusiveStartBackupArn</code> of a new <code>ListBackups</code> operation in order to fetch the next page of results.
    ///      </p>
    ///          <p>
    ///         If <code>LastEvaluatedBackupArn</code> is empty, then the last page of results has been processed and there are no
    ///         more results to be retrieved.
    ///      </p>
    ///          <p> If <code>LastEvaluatedBackupArn</code> is not empty, this may or may not indicate that
    ///             there is more data to be returned. All results are guaranteed to have been returned if
    ///             and only if no value for <code>LastEvaluatedBackupArn</code> is returned. </p>
    public let lastEvaluatedBackupArn: String?

    public init (
        backupSummaries: [BackupSummary]? = nil,
        lastEvaluatedBackupArn: String? = nil
    )
    {
        self.backupSummaries = backupSummaries
        self.lastEvaluatedBackupArn = lastEvaluatedBackupArn
    }
}

struct ListBackupsOutputResponseBody: Equatable {
    public let backupSummaries: [BackupSummary]?
    public let lastEvaluatedBackupArn: String?
}

extension ListBackupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case backupSummaries = "BackupSummaries"
        case lastEvaluatedBackupArn = "LastEvaluatedBackupArn"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupSummariesContainer = try containerValues.decodeIfPresent([BackupSummary?].self, forKey: .backupSummaries)
        var backupSummariesDecoded0:[BackupSummary]? = nil
        if let backupSummariesContainer = backupSummariesContainer {
            backupSummariesDecoded0 = [BackupSummary]()
            for structure0 in backupSummariesContainer {
                if let structure0 = structure0 {
                    backupSummariesDecoded0?.append(structure0)
                }
            }
        }
        backupSummaries = backupSummariesDecoded0
        let lastEvaluatedBackupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastEvaluatedBackupArn)
        lastEvaluatedBackupArn = lastEvaluatedBackupArnDecoded
    }
}

public struct ListContributorInsightsInputBodyMiddleware: Middleware {
    public let id: String = "ListContributorInsightsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListContributorInsightsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListContributorInsightsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListContributorInsightsInput>
    public typealias MOutput = OperationOutput<ListContributorInsightsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListContributorInsightsOutputError>
}

extension ListContributorInsightsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListContributorInsightsInput(maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)), tableName: \(String(describing: tableName)))"}
}

extension ListContributorInsightsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

public struct ListContributorInsightsInputHeadersMiddleware: Middleware {
    public let id: String = "ListContributorInsightsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListContributorInsightsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListContributorInsightsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListContributorInsightsInput>
    public typealias MOutput = OperationOutput<ListContributorInsightsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListContributorInsightsOutputError>
}

public struct ListContributorInsightsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListContributorInsightsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListContributorInsightsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListContributorInsightsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListContributorInsightsInput>
    public typealias MOutput = OperationOutput<ListContributorInsightsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListContributorInsightsOutputError>
}

public struct ListContributorInsightsInput: Equatable {
    /// <p>Maximum number of results to return per page.</p>
    public let maxResults: Int
    /// <p>A token to for the desired page, if there is one.</p>
    public let nextToken: String?
    /// <p>The name of the table.</p>
    public let tableName: String?

    public init (
        maxResults: Int = 0,
        nextToken: String? = nil,
        tableName: String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.tableName = tableName
    }
}

struct ListContributorInsightsInputBody: Equatable {
    public let tableName: String?
    public let nextToken: String?
    public let maxResults: Int
}

extension ListContributorInsightsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decode(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListContributorInsightsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListContributorInsightsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListContributorInsightsOutputError: Equatable {
    case internalServerError(InternalServerError)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListContributorInsightsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListContributorInsightsOutputResponse(contributorInsightsSummaries: \(String(describing: contributorInsightsSummaries)), nextToken: \(String(describing: nextToken)))"}
}

extension ListContributorInsightsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListContributorInsightsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.contributorInsightsSummaries = output.contributorInsightsSummaries
            self.nextToken = output.nextToken
        } else {
            self.contributorInsightsSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListContributorInsightsOutputResponse: Equatable {
    /// <p>A list of ContributorInsightsSummary.</p>
    public let contributorInsightsSummaries: [ContributorInsightsSummary]?
    /// <p>A token to go to the next page if there is one.</p>
    public let nextToken: String?

    public init (
        contributorInsightsSummaries: [ContributorInsightsSummary]? = nil,
        nextToken: String? = nil
    )
    {
        self.contributorInsightsSummaries = contributorInsightsSummaries
        self.nextToken = nextToken
    }
}

struct ListContributorInsightsOutputResponseBody: Equatable {
    public let contributorInsightsSummaries: [ContributorInsightsSummary]?
    public let nextToken: String?
}

extension ListContributorInsightsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case contributorInsightsSummaries = "ContributorInsightsSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contributorInsightsSummariesContainer = try containerValues.decodeIfPresent([ContributorInsightsSummary?].self, forKey: .contributorInsightsSummaries)
        var contributorInsightsSummariesDecoded0:[ContributorInsightsSummary]? = nil
        if let contributorInsightsSummariesContainer = contributorInsightsSummariesContainer {
            contributorInsightsSummariesDecoded0 = [ContributorInsightsSummary]()
            for structure0 in contributorInsightsSummariesContainer {
                if let structure0 = structure0 {
                    contributorInsightsSummariesDecoded0?.append(structure0)
                }
            }
        }
        contributorInsightsSummaries = contributorInsightsSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListExportsInputBodyMiddleware: Middleware {
    public let id: String = "ListExportsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListExportsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListExportsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListExportsInput>
    public typealias MOutput = OperationOutput<ListExportsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListExportsOutputError>
}

extension ListExportsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListExportsInput(maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)), tableArn: \(String(describing: tableArn)))"}
}

extension ListExportsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case tableArn = "TableArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let tableArn = tableArn {
            try encodeContainer.encode(tableArn, forKey: .tableArn)
        }
    }
}

public struct ListExportsInputHeadersMiddleware: Middleware {
    public let id: String = "ListExportsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListExportsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListExportsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListExportsInput>
    public typealias MOutput = OperationOutput<ListExportsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListExportsOutputError>
}

public struct ListExportsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListExportsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListExportsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListExportsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListExportsInput>
    public typealias MOutput = OperationOutput<ListExportsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListExportsOutputError>
}

public struct ListExportsInput: Equatable {
    /// <p>Maximum number of results to return per page.</p>
    public let maxResults: Int?
    /// <p>An optional string that, if supplied, must be copied from the output of a previous
    ///             call to <code>ListExports</code>. When provided in this manner, the API fetches the next
    ///             page of results.</p>
    public let nextToken: String?
    /// <p>The Amazon Resource Name (ARN) associated with the exported table.</p>
    public let tableArn: String?

    public init (
        maxResults: Int? = nil,
        nextToken: String? = nil,
        tableArn: String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.tableArn = tableArn
    }
}

struct ListExportsInputBody: Equatable {
    public let tableArn: String?
    public let maxResults: Int?
    public let nextToken: String?
}

extension ListExportsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case tableArn = "TableArn"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableArn)
        tableArn = tableArnDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListExportsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListExportsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListExportsOutputError: Equatable {
    case internalServerError(InternalServerError)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListExportsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListExportsOutputResponse(exportSummaries: \(String(describing: exportSummaries)), nextToken: \(String(describing: nextToken)))"}
}

extension ListExportsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListExportsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.exportSummaries = output.exportSummaries
            self.nextToken = output.nextToken
        } else {
            self.exportSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListExportsOutputResponse: Equatable {
    /// <p>A list of <code>ExportSummary</code> objects.</p>
    public let exportSummaries: [ExportSummary]?
    /// <p>If this value is returned, there are additional results to be displayed. To retrieve
    ///             them, call <code>ListExports</code> again, with <code>NextToken</code> set to this
    ///             value.</p>
    public let nextToken: String?

    public init (
        exportSummaries: [ExportSummary]? = nil,
        nextToken: String? = nil
    )
    {
        self.exportSummaries = exportSummaries
        self.nextToken = nextToken
    }
}

struct ListExportsOutputResponseBody: Equatable {
    public let exportSummaries: [ExportSummary]?
    public let nextToken: String?
}

extension ListExportsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case exportSummaries = "ExportSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportSummariesContainer = try containerValues.decodeIfPresent([ExportSummary?].self, forKey: .exportSummaries)
        var exportSummariesDecoded0:[ExportSummary]? = nil
        if let exportSummariesContainer = exportSummariesContainer {
            exportSummariesDecoded0 = [ExportSummary]()
            for structure0 in exportSummariesContainer {
                if let structure0 = structure0 {
                    exportSummariesDecoded0?.append(structure0)
                }
            }
        }
        exportSummaries = exportSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListGlobalTablesInputBodyMiddleware: Middleware {
    public let id: String = "ListGlobalTablesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListGlobalTablesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListGlobalTablesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListGlobalTablesInput>
    public typealias MOutput = OperationOutput<ListGlobalTablesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListGlobalTablesOutputError>
}

extension ListGlobalTablesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListGlobalTablesInput(exclusiveStartGlobalTableName: \(String(describing: exclusiveStartGlobalTableName)), limit: \(String(describing: limit)), regionName: \(String(describing: regionName)))"}
}

extension ListGlobalTablesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case exclusiveStartGlobalTableName = "ExclusiveStartGlobalTableName"
        case limit = "Limit"
        case regionName = "RegionName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exclusiveStartGlobalTableName = exclusiveStartGlobalTableName {
            try encodeContainer.encode(exclusiveStartGlobalTableName, forKey: .exclusiveStartGlobalTableName)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let regionName = regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
    }
}

public struct ListGlobalTablesInputHeadersMiddleware: Middleware {
    public let id: String = "ListGlobalTablesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListGlobalTablesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListGlobalTablesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListGlobalTablesInput>
    public typealias MOutput = OperationOutput<ListGlobalTablesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListGlobalTablesOutputError>
}

public struct ListGlobalTablesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListGlobalTablesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListGlobalTablesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListGlobalTablesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListGlobalTablesInput>
    public typealias MOutput = OperationOutput<ListGlobalTablesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListGlobalTablesOutputError>
}

public struct ListGlobalTablesInput: Equatable {
    /// <p>The first global table name that this operation will evaluate.</p>
    public let exclusiveStartGlobalTableName: String?
    /// <p>The maximum number of table names to return, if the parameter is not specified DynamoDB defaults to 100.</p>
    ///          <p>If the number of global tables DynamoDB finds reaches this limit, it stops the operation and returns the table names collected up to that point,
    ///          with a table name in the <code>LastEvaluatedGlobalTableName</code> to apply in a subsequent operation to the <code>ExclusiveStartGlobalTableName</code> parameter.</p>
    public let limit: Int?
    /// <p>Lists the global tables in a specific Region.</p>
    public let regionName: String?

    public init (
        exclusiveStartGlobalTableName: String? = nil,
        limit: Int? = nil,
        regionName: String? = nil
    )
    {
        self.exclusiveStartGlobalTableName = exclusiveStartGlobalTableName
        self.limit = limit
        self.regionName = regionName
    }
}

struct ListGlobalTablesInputBody: Equatable {
    public let exclusiveStartGlobalTableName: String?
    public let limit: Int?
    public let regionName: String?
}

extension ListGlobalTablesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case exclusiveStartGlobalTableName = "ExclusiveStartGlobalTableName"
        case limit = "Limit"
        case regionName = "RegionName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exclusiveStartGlobalTableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .exclusiveStartGlobalTableName)
        exclusiveStartGlobalTableName = exclusiveStartGlobalTableNameDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let regionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .regionName)
        regionName = regionNameDecoded
    }
}

extension ListGlobalTablesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListGlobalTablesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListGlobalTablesOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListGlobalTablesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListGlobalTablesOutputResponse(globalTables: \(String(describing: globalTables)), lastEvaluatedGlobalTableName: \(String(describing: lastEvaluatedGlobalTableName)))"}
}

extension ListGlobalTablesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListGlobalTablesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.globalTables = output.globalTables
            self.lastEvaluatedGlobalTableName = output.lastEvaluatedGlobalTableName
        } else {
            self.globalTables = nil
            self.lastEvaluatedGlobalTableName = nil
        }
    }
}

public struct ListGlobalTablesOutputResponse: Equatable {
    /// <p>List of global table names.</p>
    public let globalTables: [GlobalTable]?
    /// <p>Last evaluated global table name.</p>
    public let lastEvaluatedGlobalTableName: String?

    public init (
        globalTables: [GlobalTable]? = nil,
        lastEvaluatedGlobalTableName: String? = nil
    )
    {
        self.globalTables = globalTables
        self.lastEvaluatedGlobalTableName = lastEvaluatedGlobalTableName
    }
}

struct ListGlobalTablesOutputResponseBody: Equatable {
    public let globalTables: [GlobalTable]?
    public let lastEvaluatedGlobalTableName: String?
}

extension ListGlobalTablesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case globalTables = "GlobalTables"
        case lastEvaluatedGlobalTableName = "LastEvaluatedGlobalTableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTablesContainer = try containerValues.decodeIfPresent([GlobalTable?].self, forKey: .globalTables)
        var globalTablesDecoded0:[GlobalTable]? = nil
        if let globalTablesContainer = globalTablesContainer {
            globalTablesDecoded0 = [GlobalTable]()
            for structure0 in globalTablesContainer {
                if let structure0 = structure0 {
                    globalTablesDecoded0?.append(structure0)
                }
            }
        }
        globalTables = globalTablesDecoded0
        let lastEvaluatedGlobalTableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastEvaluatedGlobalTableName)
        lastEvaluatedGlobalTableName = lastEvaluatedGlobalTableNameDecoded
    }
}

public struct ListTablesInputBodyMiddleware: Middleware {
    public let id: String = "ListTablesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTablesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTablesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTablesInput>
    public typealias MOutput = OperationOutput<ListTablesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTablesOutputError>
}

extension ListTablesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTablesInput(exclusiveStartTableName: \(String(describing: exclusiveStartTableName)), limit: \(String(describing: limit)))"}
}

extension ListTablesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case exclusiveStartTableName = "ExclusiveStartTableName"
        case limit = "Limit"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exclusiveStartTableName = exclusiveStartTableName {
            try encodeContainer.encode(exclusiveStartTableName, forKey: .exclusiveStartTableName)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
    }
}

public struct ListTablesInputHeadersMiddleware: Middleware {
    public let id: String = "ListTablesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTablesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTablesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTablesInput>
    public typealias MOutput = OperationOutput<ListTablesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTablesOutputError>
}

public struct ListTablesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListTablesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTablesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTablesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTablesInput>
    public typealias MOutput = OperationOutput<ListTablesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTablesOutputError>
}

/// <p>Represents the input of a <code>ListTables</code> operation.</p>
public struct ListTablesInput: Equatable {
    /// <p>The first table name that this operation will evaluate. Use the value that was returned for
    ///         <code>LastEvaluatedTableName</code> in a previous operation, so that you can obtain the next page
    ///       of results.</p>
    public let exclusiveStartTableName: String?
    /// <p>A maximum number of table names to return. If this parameter is not specified, the limit is 100.</p>
    public let limit: Int?

    public init (
        exclusiveStartTableName: String? = nil,
        limit: Int? = nil
    )
    {
        self.exclusiveStartTableName = exclusiveStartTableName
        self.limit = limit
    }
}

struct ListTablesInputBody: Equatable {
    public let exclusiveStartTableName: String?
    public let limit: Int?
}

extension ListTablesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case exclusiveStartTableName = "ExclusiveStartTableName"
        case limit = "Limit"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exclusiveStartTableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .exclusiveStartTableName)
        exclusiveStartTableName = exclusiveStartTableNameDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension ListTablesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTablesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTablesOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTablesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTablesOutputResponse(lastEvaluatedTableName: \(String(describing: lastEvaluatedTableName)), tableNames: \(String(describing: tableNames)))"}
}

extension ListTablesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListTablesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.lastEvaluatedTableName = output.lastEvaluatedTableName
            self.tableNames = output.tableNames
        } else {
            self.lastEvaluatedTableName = nil
            self.tableNames = nil
        }
    }
}

/// <p>Represents the output of a <code>ListTables</code> operation.</p>
public struct ListTablesOutputResponse: Equatable {
    /// <p>The name of the last table in the current page of results. Use this value as the
    ///         <code>ExclusiveStartTableName</code> in a new request to obtain the next page of results, until
    ///       all the table names are returned.</p>
    ///          <p>If you do not receive a <code>LastEvaluatedTableName</code> value in the response, this means that
    ///       there are no more table names to be retrieved.</p>
    public let lastEvaluatedTableName: String?
    /// <p>The names of the tables associated with the current account at the current endpoint. The maximum size of this array is 100.</p>
    ///          <p>If <code>LastEvaluatedTableName</code> also appears in the output, you can use this value as the
    ///         <code>ExclusiveStartTableName</code> parameter in a subsequent <code>ListTables</code> request and
    ///       obtain the next page of results.</p>
    public let tableNames: [String]?

    public init (
        lastEvaluatedTableName: String? = nil,
        tableNames: [String]? = nil
    )
    {
        self.lastEvaluatedTableName = lastEvaluatedTableName
        self.tableNames = tableNames
    }
}

struct ListTablesOutputResponseBody: Equatable {
    public let tableNames: [String]?
    public let lastEvaluatedTableName: String?
}

extension ListTablesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case lastEvaluatedTableName = "LastEvaluatedTableName"
        case tableNames = "TableNames"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNamesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .tableNames)
        var tableNamesDecoded0:[String]? = nil
        if let tableNamesContainer = tableNamesContainer {
            tableNamesDecoded0 = [String]()
            for string0 in tableNamesContainer {
                if let string0 = string0 {
                    tableNamesDecoded0?.append(string0)
                }
            }
        }
        tableNames = tableNamesDecoded0
        let lastEvaluatedTableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastEvaluatedTableName)
        lastEvaluatedTableName = lastEvaluatedTableNameDecoded
    }
}

public struct ListTagsOfResourceInputBodyMiddleware: Middleware {
    public let id: String = "ListTagsOfResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsOfResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsOfResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsOfResourceInput>
    public typealias MOutput = OperationOutput<ListTagsOfResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsOfResourceOutputError>
}

extension ListTagsOfResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTagsOfResourceInput(nextToken: \(String(describing: nextToken)), resourceArn: \(String(describing: resourceArn)))"}
}

extension ListTagsOfResourceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

public struct ListTagsOfResourceInputHeadersMiddleware: Middleware {
    public let id: String = "ListTagsOfResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsOfResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsOfResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsOfResourceInput>
    public typealias MOutput = OperationOutput<ListTagsOfResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsOfResourceOutputError>
}

public struct ListTagsOfResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "ListTagsOfResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsOfResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsOfResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsOfResourceInput>
    public typealias MOutput = OperationOutput<ListTagsOfResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsOfResourceOutputError>
}

public struct ListTagsOfResourceInput: Equatable {
    /// <p>An optional string that, if supplied, must be copied from the output of a previous
    ///       call to ListTagOfResource. When provided in this manner, this API fetches the next page of results.</p>
    public let nextToken: String?
    /// <p>The Amazon DynamoDB resource with tags to be listed. This value is an Amazon Resource Name (ARN).</p>
    public let resourceArn: String?

    public init (
        nextToken: String? = nil,
        resourceArn: String? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceArn = resourceArn
    }
}

struct ListTagsOfResourceInputBody: Equatable {
    public let resourceArn: String?
    public let nextToken: String?
}

extension ListTagsOfResourceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsOfResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsOfResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsOfResourceOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsOfResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTagsOfResourceOutputResponse(nextToken: \(String(describing: nextToken)), tags: \(String(describing: tags)))"}
}

extension ListTagsOfResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListTagsOfResourceOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.tags = output.tags
        } else {
            self.nextToken = nil
            self.tags = nil
        }
    }
}

public struct ListTagsOfResourceOutputResponse: Equatable {
    /// <p>If this value is returned, there are additional results to be displayed. To retrieve them,
    ///       call ListTagsOfResource again, with NextToken set to this value.</p>
    public let nextToken: String?
    /// <p>The tags currently associated with the Amazon DynamoDB resource.</p>
    public let tags: [Tag]?

    public init (
        nextToken: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct ListTagsOfResourceOutputResponseBody: Equatable {
    public let tags: [Tag]?
    public let nextToken: String?
}

extension ListTagsOfResourceOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension LocalSecondaryIndex: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case indexName = "IndexName"
        case keySchema = "KeySchema"
        case projection = "Projection"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for keyschema0 in keySchema {
                try keySchemaContainer.encode(keyschema0)
            }
        }
        if let projection = projection {
            try encodeContainer.encode(projection, forKey: .projection)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let projectionDecoded = try containerValues.decodeIfPresent(Projection.self, forKey: .projection)
        projection = projectionDecoded
    }
}

extension LocalSecondaryIndex: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LocalSecondaryIndex(indexName: \(String(describing: indexName)), keySchema: \(String(describing: keySchema)), projection: \(String(describing: projection)))"}
}

/// <p>Represents the properties of a local secondary index.</p>
public struct LocalSecondaryIndex: Equatable {
    /// <p>The name of the local secondary index. The name must be unique among all other indexes on this table.</p>
    public let indexName: String?
    /// <p>The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>HASH</code> - partition key</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RANGE</code> - sort key</p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>The partition key of an item is also known as its <i>hash attribute</i>.  The
    ///         term "hash attribute" derives from DynamoDB's usage of an internal hash function to
    ///         evenly distribute data items across partitions, based on their partition key values.</p>
    ///             <p>The sort key of an item is also known as its <i>range attribute</i>.
    ///         The term "range attribute" derives from the way DynamoDB stores items with the same
    ///         partition key physically close together, in sorted order by the sort key value.</p>
    ///          </note>
    public let keySchema: [KeySchemaElement]?
    /// <p>Represents attributes that are copied (projected) from the table into the local
    ///          secondary index. These are in addition to the primary key attributes and index key
    ///          attributes, which are automatically projected. </p>
    public let projection: Projection?

    public init (
        indexName: String? = nil,
        keySchema: [KeySchemaElement]? = nil,
        projection: Projection? = nil
    )
    {
        self.indexName = indexName
        self.keySchema = keySchema
        self.projection = projection
    }
}

extension LocalSecondaryIndexDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case indexArn = "IndexArn"
        case indexName = "IndexName"
        case indexSizeBytes = "IndexSizeBytes"
        case itemCount = "ItemCount"
        case keySchema = "KeySchema"
        case projection = "Projection"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexArn = indexArn {
            try encodeContainer.encode(indexArn, forKey: .indexArn)
        }
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if indexSizeBytes != 0 {
            try encodeContainer.encode(indexSizeBytes, forKey: .indexSizeBytes)
        }
        if itemCount != 0 {
            try encodeContainer.encode(itemCount, forKey: .itemCount)
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for keyschema0 in keySchema {
                try keySchemaContainer.encode(keyschema0)
            }
        }
        if let projection = projection {
            try encodeContainer.encode(projection, forKey: .projection)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let projectionDecoded = try containerValues.decodeIfPresent(Projection.self, forKey: .projection)
        projection = projectionDecoded
        let indexSizeBytesDecoded = try containerValues.decode(Int.self, forKey: .indexSizeBytes)
        indexSizeBytes = indexSizeBytesDecoded
        let itemCountDecoded = try containerValues.decode(Int.self, forKey: .itemCount)
        itemCount = itemCountDecoded
        let indexArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexArn)
        indexArn = indexArnDecoded
    }
}

extension LocalSecondaryIndexDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LocalSecondaryIndexDescription(indexArn: \(String(describing: indexArn)), indexName: \(String(describing: indexName)), indexSizeBytes: \(String(describing: indexSizeBytes)), itemCount: \(String(describing: itemCount)), keySchema: \(String(describing: keySchema)), projection: \(String(describing: projection)))"}
}

/// <p>Represents the properties of a local secondary index.</p>
public struct LocalSecondaryIndexDescription: Equatable {
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the index.</p>
    public let indexArn: String?
    /// <p>Represents the name of the local secondary index.</p>
    public let indexName: String?
    /// <p>The total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.</p>
    public let indexSizeBytes: Int
    /// <p>The number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.</p>
    public let itemCount: Int
    /// <p>The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>HASH</code> - partition key</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RANGE</code> - sort key</p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>The partition key of an item is also known as its <i>hash attribute</i>.  The
    ///         term "hash attribute" derives from DynamoDB's usage of an internal hash function to
    ///         evenly distribute data items across partitions, based on their partition key values.</p>
    ///             <p>The sort key of an item is also known as its <i>range attribute</i>.
    ///         The term "range attribute" derives from the way DynamoDB stores items with the same
    ///         partition key physically close together, in sorted order by the sort key value.</p>
    ///          </note>
    public let keySchema: [KeySchemaElement]?
    /// <p>Represents attributes that are copied (projected) from the table into the global
    ///          secondary index. These are in addition to the primary key attributes and index key
    ///          attributes, which are automatically projected. </p>
    public let projection: Projection?

    public init (
        indexArn: String? = nil,
        indexName: String? = nil,
        indexSizeBytes: Int = 0,
        itemCount: Int = 0,
        keySchema: [KeySchemaElement]? = nil,
        projection: Projection? = nil
    )
    {
        self.indexArn = indexArn
        self.indexName = indexName
        self.indexSizeBytes = indexSizeBytes
        self.itemCount = itemCount
        self.keySchema = keySchema
        self.projection = projection
    }
}

extension LocalSecondaryIndexInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case indexName = "IndexName"
        case keySchema = "KeySchema"
        case projection = "Projection"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for keyschema0 in keySchema {
                try keySchemaContainer.encode(keyschema0)
            }
        }
        if let projection = projection {
            try encodeContainer.encode(projection, forKey: .projection)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let projectionDecoded = try containerValues.decodeIfPresent(Projection.self, forKey: .projection)
        projection = projectionDecoded
    }
}

extension LocalSecondaryIndexInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LocalSecondaryIndexInfo(indexName: \(String(describing: indexName)), keySchema: \(String(describing: keySchema)), projection: \(String(describing: projection)))"}
}

/// <p>Represents the properties of a local secondary index for the table
///      when the backup was created.</p>
public struct LocalSecondaryIndexInfo: Equatable {
    /// <p>Represents the name of the local secondary index.</p>
    public let indexName: String?
    /// <p>The complete key schema for a local secondary index, which consists of one or more pairs of attribute names and key types:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>HASH</code> - partition key</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RANGE</code> - sort key</p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>The partition key of an item is also known as its <i>hash attribute</i>.  The
    ///         term "hash attribute" derives from DynamoDB's usage of an internal hash function to
    ///         evenly distribute data items across partitions, based on their partition key values.</p>
    ///             <p>The sort key of an item is also known as its <i>range attribute</i>.
    ///         The term "range attribute" derives from the way DynamoDB stores items with the same
    ///         partition key physically close together, in sorted order by the sort key value.</p>
    ///          </note>
    public let keySchema: [KeySchemaElement]?
    /// <p>Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. </p>
    public let projection: Projection?

    public init (
        indexName: String? = nil,
        keySchema: [KeySchemaElement]? = nil,
        projection: Projection? = nil
    )
    {
        self.indexName = indexName
        self.keySchema = keySchema
        self.projection = projection
    }
}

extension ParameterizedStatement: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case parameters = "Parameters"
        case statement = "Statement"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parameters)
            for preparedstatementparameters0 in parameters {
                try parametersContainer.encode(preparedstatementparameters0)
            }
        }
        if let statement = statement {
            try encodeContainer.encode(statement, forKey: .statement)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statementDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statement)
        statement = statementDecoded
        let parametersContainer = try containerValues.decodeIfPresent([AttributeValue?].self, forKey: .parameters)
        var parametersDecoded0:[AttributeValue]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [AttributeValue]()
            for union0 in parametersContainer {
                if let union0 = union0 {
                    parametersDecoded0?.append(union0)
                }
            }
        }
        parameters = parametersDecoded0
    }
}

extension ParameterizedStatement: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ParameterizedStatement(parameters: \(String(describing: parameters)), statement: \(String(describing: statement)))"}
}

/// <p>
/// Represents a PartiQL statment that uses parameters.
/// </p>
public struct ParameterizedStatement: Equatable {
    /// <p>
    /// The parameter values.
    /// </p>
    public let parameters: [AttributeValue]?
    /// <p>
    /// A PartiQL statment that uses parameters.
    /// </p>
    public let statement: String?

    public init (
        parameters: [AttributeValue]? = nil,
        statement: String? = nil
    )
    {
        self.parameters = parameters
        self.statement = statement
    }
}

extension PointInTimeRecoveryDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case earliestRestorableDateTime = "EarliestRestorableDateTime"
        case latestRestorableDateTime = "LatestRestorableDateTime"
        case pointInTimeRecoveryStatus = "PointInTimeRecoveryStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let earliestRestorableDateTime = earliestRestorableDateTime {
            try encodeContainer.encode(earliestRestorableDateTime.timeIntervalSince1970, forKey: .earliestRestorableDateTime)
        }
        if let latestRestorableDateTime = latestRestorableDateTime {
            try encodeContainer.encode(latestRestorableDateTime.timeIntervalSince1970, forKey: .latestRestorableDateTime)
        }
        if let pointInTimeRecoveryStatus = pointInTimeRecoveryStatus {
            try encodeContainer.encode(pointInTimeRecoveryStatus.rawValue, forKey: .pointInTimeRecoveryStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pointInTimeRecoveryStatusDecoded = try containerValues.decodeIfPresent(PointInTimeRecoveryStatus.self, forKey: .pointInTimeRecoveryStatus)
        pointInTimeRecoveryStatus = pointInTimeRecoveryStatusDecoded
        let earliestRestorableDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .earliestRestorableDateTime)
        earliestRestorableDateTime = earliestRestorableDateTimeDecoded
        let latestRestorableDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .latestRestorableDateTime)
        latestRestorableDateTime = latestRestorableDateTimeDecoded
    }
}

extension PointInTimeRecoveryDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PointInTimeRecoveryDescription(earliestRestorableDateTime: \(String(describing: earliestRestorableDateTime)), latestRestorableDateTime: \(String(describing: latestRestorableDateTime)), pointInTimeRecoveryStatus: \(String(describing: pointInTimeRecoveryStatus)))"}
}

/// <p>The description of the point in time settings applied to the table.</p>
public struct PointInTimeRecoveryDescription: Equatable {
    /// <p>Specifies the earliest point in time you can restore your table to. You can restore your
    ///          table to any point in time during the last 35 days. </p>
    public let earliestRestorableDateTime: Date?
    /// <p>
    ///             <code>LatestRestorableDateTime</code> is typically 5 minutes before the current time.
    ///      </p>
    public let latestRestorableDateTime: Date?
    /// <p>The current state of point in time recovery:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ENABLING</code> - Point in time recovery is being enabled.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ENABLED</code> - Point in time recovery is enabled.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DISABLED</code> - Point in time recovery is disabled.</p>
    ///             </li>
    ///          </ul>
    public let pointInTimeRecoveryStatus: PointInTimeRecoveryStatus?

    public init (
        earliestRestorableDateTime: Date? = nil,
        latestRestorableDateTime: Date? = nil,
        pointInTimeRecoveryStatus: PointInTimeRecoveryStatus? = nil
    )
    {
        self.earliestRestorableDateTime = earliestRestorableDateTime
        self.latestRestorableDateTime = latestRestorableDateTime
        self.pointInTimeRecoveryStatus = pointInTimeRecoveryStatus
    }
}

extension PointInTimeRecoverySpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case pointInTimeRecoveryEnabled = "PointInTimeRecoveryEnabled"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pointInTimeRecoveryEnabled = pointInTimeRecoveryEnabled {
            try encodeContainer.encode(pointInTimeRecoveryEnabled, forKey: .pointInTimeRecoveryEnabled)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pointInTimeRecoveryEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .pointInTimeRecoveryEnabled)
        pointInTimeRecoveryEnabled = pointInTimeRecoveryEnabledDecoded
    }
}

extension PointInTimeRecoverySpecification: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PointInTimeRecoverySpecification(pointInTimeRecoveryEnabled: \(String(describing: pointInTimeRecoveryEnabled)))"}
}

/// <p>Represents the settings used to enable point in time recovery.</p>
public struct PointInTimeRecoverySpecification: Equatable {
    /// <p>Indicates whether point in time recovery is enabled (true) or disabled (false) on the table.</p>
    public let pointInTimeRecoveryEnabled: Bool?

    public init (
        pointInTimeRecoveryEnabled: Bool? = nil
    )
    {
        self.pointInTimeRecoveryEnabled = pointInTimeRecoveryEnabled
    }
}

public enum PointInTimeRecoveryStatus {
    case disabled
    case enabled
    case sdkUnknown(String)
}

extension PointInTimeRecoveryStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [PointInTimeRecoveryStatus] {
        return [
            .disabled,
            .enabled,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .enabled: return "ENABLED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = PointInTimeRecoveryStatus(rawValue: rawValue) ?? PointInTimeRecoveryStatus.sdkUnknown(rawValue)
    }
}

extension PointInTimeRecoveryUnavailableException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PointInTimeRecoveryUnavailableException(message: \(String(describing: message)))"}
}

extension PointInTimeRecoveryUnavailableException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: PointInTimeRecoveryUnavailableExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Point in time recovery has not yet been enabled for this source table.</p>
public struct PointInTimeRecoveryUnavailableException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct PointInTimeRecoveryUnavailableExceptionBody: Equatable {
    public let message: String?
}

extension PointInTimeRecoveryUnavailableExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Projection: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case nonKeyAttributes = "NonKeyAttributes"
        case projectionType = "ProjectionType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nonKeyAttributes = nonKeyAttributes {
            var nonKeyAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nonKeyAttributes)
            for nonkeyattributenamelist0 in nonKeyAttributes {
                try nonKeyAttributesContainer.encode(nonkeyattributenamelist0)
            }
        }
        if let projectionType = projectionType {
            try encodeContainer.encode(projectionType.rawValue, forKey: .projectionType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectionTypeDecoded = try containerValues.decodeIfPresent(ProjectionType.self, forKey: .projectionType)
        projectionType = projectionTypeDecoded
        let nonKeyAttributesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .nonKeyAttributes)
        var nonKeyAttributesDecoded0:[String]? = nil
        if let nonKeyAttributesContainer = nonKeyAttributesContainer {
            nonKeyAttributesDecoded0 = [String]()
            for string0 in nonKeyAttributesContainer {
                if let string0 = string0 {
                    nonKeyAttributesDecoded0?.append(string0)
                }
            }
        }
        nonKeyAttributes = nonKeyAttributesDecoded0
    }
}

extension Projection: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Projection(nonKeyAttributes: \(String(describing: nonKeyAttributes)), projectionType: \(String(describing: projectionType)))"}
}

/// <p>Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.</p>
public struct Projection: Equatable {
    /// <p>Represents the non-key attribute names which will be projected into the index.</p>
    ///          <p>For local secondary indexes, the total count of <code>NonKeyAttributes</code> summed across all of the local secondary indexes,
    ///       must not exceed 20. If you project the same attribute into two
    ///       different indexes, this counts as two distinct attributes when determining the total.</p>
    public let nonKeyAttributes: [String]?
    /// <p>The set of attributes that are projected into the index:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the
    ///           index.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>INCLUDE</code> - In addition to the attributes described in <code>KEYS_ONLY</code>, the secondary index will include other non-key attributes that you specify.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ALL</code> - All of the table attributes are projected into the index.</p>
    ///             </li>
    ///          </ul>
    public let projectionType: ProjectionType?

    public init (
        nonKeyAttributes: [String]? = nil,
        projectionType: ProjectionType? = nil
    )
    {
        self.nonKeyAttributes = nonKeyAttributes
        self.projectionType = projectionType
    }
}

public enum ProjectionType {
    case all
    case include
    case keysOnly
    case sdkUnknown(String)
}

extension ProjectionType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ProjectionType] {
        return [
            .all,
            .include,
            .keysOnly,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .all: return "ALL"
        case .include: return "INCLUDE"
        case .keysOnly: return "KEYS_ONLY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ProjectionType(rawValue: rawValue) ?? ProjectionType.sdkUnknown(rawValue)
    }
}

extension ProvisionedThroughput: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case readCapacityUnits = "ReadCapacityUnits"
        case writeCapacityUnits = "WriteCapacityUnits"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let readCapacityUnits = readCapacityUnits {
            try encodeContainer.encode(readCapacityUnits, forKey: .readCapacityUnits)
        }
        if let writeCapacityUnits = writeCapacityUnits {
            try encodeContainer.encode(writeCapacityUnits, forKey: .writeCapacityUnits)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let readCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .readCapacityUnits)
        readCapacityUnits = readCapacityUnitsDecoded
        let writeCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .writeCapacityUnits)
        writeCapacityUnits = writeCapacityUnitsDecoded
    }
}

extension ProvisionedThroughput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ProvisionedThroughput(readCapacityUnits: \(String(describing: readCapacityUnits)), writeCapacityUnits: \(String(describing: writeCapacityUnits)))"}
}

/// <p>Represents the provisioned throughput settings for a specified table or index. The settings
///       can be modified using the <code>UpdateTable</code> operation.</p>
///          <p>For current minimum and maximum provisioned throughput values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
public struct ProvisionedThroughput: Equatable {
    /// <p>The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
    ///         <code>ThrottlingException</code>. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput">Specifying Read and Write
    ///         Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///         <p>If read/write capacity mode is <code>PAY_PER_REQUEST</code> the value is set to 0.</p>
    public let readCapacityUnits: Int?
    /// <p>The maximum number of writes consumed per second before DynamoDB returns a
    ///         <code>ThrottlingException</code>. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput">Specifying Read and Write
    ///         Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///         <p>If read/write capacity mode is <code>PAY_PER_REQUEST</code> the value is set to 0.</p>
    public let writeCapacityUnits: Int?

    public init (
        readCapacityUnits: Int? = nil,
        writeCapacityUnits: Int? = nil
    )
    {
        self.readCapacityUnits = readCapacityUnits
        self.writeCapacityUnits = writeCapacityUnits
    }
}

extension ProvisionedThroughputDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case lastDecreaseDateTime = "LastDecreaseDateTime"
        case lastIncreaseDateTime = "LastIncreaseDateTime"
        case numberOfDecreasesToday = "NumberOfDecreasesToday"
        case readCapacityUnits = "ReadCapacityUnits"
        case writeCapacityUnits = "WriteCapacityUnits"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastDecreaseDateTime = lastDecreaseDateTime {
            try encodeContainer.encode(lastDecreaseDateTime.timeIntervalSince1970, forKey: .lastDecreaseDateTime)
        }
        if let lastIncreaseDateTime = lastIncreaseDateTime {
            try encodeContainer.encode(lastIncreaseDateTime.timeIntervalSince1970, forKey: .lastIncreaseDateTime)
        }
        if let numberOfDecreasesToday = numberOfDecreasesToday {
            try encodeContainer.encode(numberOfDecreasesToday, forKey: .numberOfDecreasesToday)
        }
        if let readCapacityUnits = readCapacityUnits {
            try encodeContainer.encode(readCapacityUnits, forKey: .readCapacityUnits)
        }
        if let writeCapacityUnits = writeCapacityUnits {
            try encodeContainer.encode(writeCapacityUnits, forKey: .writeCapacityUnits)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lastIncreaseDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastIncreaseDateTime)
        lastIncreaseDateTime = lastIncreaseDateTimeDecoded
        let lastDecreaseDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastDecreaseDateTime)
        lastDecreaseDateTime = lastDecreaseDateTimeDecoded
        let numberOfDecreasesTodayDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .numberOfDecreasesToday)
        numberOfDecreasesToday = numberOfDecreasesTodayDecoded
        let readCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .readCapacityUnits)
        readCapacityUnits = readCapacityUnitsDecoded
        let writeCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .writeCapacityUnits)
        writeCapacityUnits = writeCapacityUnitsDecoded
    }
}

extension ProvisionedThroughputDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ProvisionedThroughputDescription(lastDecreaseDateTime: \(String(describing: lastDecreaseDateTime)), lastIncreaseDateTime: \(String(describing: lastIncreaseDateTime)), numberOfDecreasesToday: \(String(describing: numberOfDecreasesToday)), readCapacityUnits: \(String(describing: readCapacityUnits)), writeCapacityUnits: \(String(describing: writeCapacityUnits)))"}
}

/// <p>Represents the provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.</p>
public struct ProvisionedThroughputDescription: Equatable {
    /// <p>The date and time of the last provisioned throughput decrease for this table.</p>
    public let lastDecreaseDateTime: Date?
    /// <p>The date and time of the last provisioned throughput increase for this table.</p>
    public let lastIncreaseDateTime: Date?
    /// <p>The number of provisioned throughput decreases for this table during this UTC calendar day.
    ///          For current maximums on provisioned throughput decreases, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let numberOfDecreasesToday: Int?
    /// <p>The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
    ///         <code>ThrottlingException</code>. Eventually consistent reads require less effort than strongly
    ///       consistent reads, so a setting of 50 <code>ReadCapacityUnits</code> per second provides 100
    ///       eventually consistent <code>ReadCapacityUnits</code> per second.</p>
    public let readCapacityUnits: Int?
    /// <p>The maximum number of writes consumed per second before DynamoDB returns a
    ///         <code>ThrottlingException</code>.</p>
    public let writeCapacityUnits: Int?

    public init (
        lastDecreaseDateTime: Date? = nil,
        lastIncreaseDateTime: Date? = nil,
        numberOfDecreasesToday: Int? = nil,
        readCapacityUnits: Int? = nil,
        writeCapacityUnits: Int? = nil
    )
    {
        self.lastDecreaseDateTime = lastDecreaseDateTime
        self.lastIncreaseDateTime = lastIncreaseDateTime
        self.numberOfDecreasesToday = numberOfDecreasesToday
        self.readCapacityUnits = readCapacityUnits
        self.writeCapacityUnits = writeCapacityUnits
    }
}

extension ProvisionedThroughputExceededException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ProvisionedThroughputExceededException(message: \(String(describing: message)))"}
}

extension ProvisionedThroughputExceededException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ProvisionedThroughputExceededExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests that
///       receive this exception. Your request is eventually successful, unless your retry queue is too
///       large to finish. Reduce the frequency of requests and use exponential backoff. For more
///       information, go to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff">Error Retries and Exponential
///         Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
public struct ProvisionedThroughputExceededException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>You exceeded your maximum allowed provisioned throughput.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ProvisionedThroughputExceededExceptionBody: Equatable {
    public let message: String?
}

extension ProvisionedThroughputExceededExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ProvisionedThroughputOverride: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case readCapacityUnits = "ReadCapacityUnits"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let readCapacityUnits = readCapacityUnits {
            try encodeContainer.encode(readCapacityUnits, forKey: .readCapacityUnits)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let readCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .readCapacityUnits)
        readCapacityUnits = readCapacityUnitsDecoded
    }
}

extension ProvisionedThroughputOverride: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ProvisionedThroughputOverride(readCapacityUnits: \(String(describing: readCapacityUnits)))"}
}

/// <p>Replica-specific provisioned throughput settings. If not specified, uses the
///          source table's provisioned throughput settings.</p>
public struct ProvisionedThroughputOverride: Equatable {
    /// <p>Replica-specific read capacity units. If not specified, uses the source table's
    ///          read capacity settings.</p>
    public let readCapacityUnits: Int?

    public init (
        readCapacityUnits: Int? = nil
    )
    {
        self.readCapacityUnits = readCapacityUnits
    }
}

extension Put: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case conditionExpression = "ConditionExpression"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case item = "Item"
        case returnValuesOnConditionCheckFailure = "ReturnValuesOnConditionCheckFailure"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditionExpression = conditionExpression {
            try encodeContainer.encode(conditionExpression, forKey: .conditionExpression)
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionattributenamemap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionattributenamemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeValues = expressionAttributeValues {
            var expressionAttributeValuesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expressionAttributeValues)
            for (dictKey0, expressionattributevaluemap0) in expressionAttributeValues {
                try expressionAttributeValuesContainer.encode(expressionattributevaluemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let item = item {
            var itemContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .item)
            for (dictKey0, putiteminputattributemap0) in item {
                try itemContainer.encode(putiteminputattributemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure {
            try encodeContainer.encode(returnValuesOnConditionCheckFailure.rawValue, forKey: .returnValuesOnConditionCheckFailure)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .item)
        var itemDecoded0: [String:AttributeValue]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in itemContainer {
                if let attributevalue0 = attributevalue0 {
                    itemDecoded0?[key0] = attributevalue0
                }
            }
        }
        item = itemDecoded0
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let conditionExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .conditionExpression)
        conditionExpression = conditionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [String:String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [String:String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
        let expressionAttributeValuesContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .expressionAttributeValues)
        var expressionAttributeValuesDecoded0: [String:AttributeValue]? = nil
        if let expressionAttributeValuesContainer = expressionAttributeValuesContainer {
            expressionAttributeValuesDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in expressionAttributeValuesContainer {
                if let attributevalue0 = attributevalue0 {
                    expressionAttributeValuesDecoded0?[key0] = attributevalue0
                }
            }
        }
        expressionAttributeValues = expressionAttributeValuesDecoded0
        let returnValuesOnConditionCheckFailureDecoded = try containerValues.decodeIfPresent(ReturnValuesOnConditionCheckFailure.self, forKey: .returnValuesOnConditionCheckFailure)
        returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailureDecoded
    }
}

extension Put: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Put(conditionExpression: \(String(describing: conditionExpression)), expressionAttributeNames: \(String(describing: expressionAttributeNames)), expressionAttributeValues: \(String(describing: expressionAttributeValues)), item: \(String(describing: item)), returnValuesOnConditionCheckFailure: \(String(describing: returnValuesOnConditionCheckFailure)), tableName: \(String(describing: tableName)))"}
}

/// <p>Represents a request to perform a <code>PutItem</code> operation.</p>
public struct Put: Equatable {
    /// <p>A condition that must be satisfied in order for a conditional update to succeed.</p>
    public let conditionExpression: String?
    /// <p>One or more substitution tokens for attribute names in an expression.</p>
    public let expressionAttributeNames: [String:String]?
    /// <p>One or more values that can be substituted in an expression.</p>
    public let expressionAttributeValues: [String:AttributeValue]?
    /// <p>A map of attribute name to attribute values, representing the primary key
    ///         of the item to be written by <code>PutItem</code>. All of the table's primary key
    ///         attributes must be specified, and their data types must match those of the table's
    ///         key schema. If any attributes are present in the item that are part of an index
    ///         key schema for the table, their types must match the index key schema. </p>
    public let item: [String:AttributeValue]?
    /// <p>Use <code>ReturnValuesOnConditionCheckFailure</code> to
    ///         get the item attributes if the <code>Put</code> condition fails.
    ///         For <code>ReturnValuesOnConditionCheckFailure</code>, the valid
    ///         values are: NONE and ALL_OLD.</p>
    public let returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure?
    /// <p>Name of the table in which to write the item.</p>
    public let tableName: String?

    public init (
        conditionExpression: String? = nil,
        expressionAttributeNames: [String:String]? = nil,
        expressionAttributeValues: [String:AttributeValue]? = nil,
        item: [String:AttributeValue]? = nil,
        returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure? = nil,
        tableName: String? = nil
    )
    {
        self.conditionExpression = conditionExpression
        self.expressionAttributeNames = expressionAttributeNames
        self.expressionAttributeValues = expressionAttributeValues
        self.item = item
        self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
        self.tableName = tableName
    }
}

public struct PutItemInputBodyMiddleware: Middleware {
    public let id: String = "PutItemInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutItemInput>,
                  next: H) -> Swift.Result<OperationOutput<PutItemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutItemInput>
    public typealias MOutput = OperationOutput<PutItemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutItemOutputError>
}

extension PutItemInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutItemInput(conditionExpression: \(String(describing: conditionExpression)), conditionalOperator: \(String(describing: conditionalOperator)), expected: \(String(describing: expected)), expressionAttributeNames: \(String(describing: expressionAttributeNames)), expressionAttributeValues: \(String(describing: expressionAttributeValues)), item: \(String(describing: item)), returnConsumedCapacity: \(String(describing: returnConsumedCapacity)), returnItemCollectionMetrics: \(String(describing: returnItemCollectionMetrics)), returnValues: \(String(describing: returnValues)), tableName: \(String(describing: tableName)))"}
}

extension PutItemInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case conditionExpression = "ConditionExpression"
        case conditionalOperator = "ConditionalOperator"
        case expected = "Expected"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case item = "Item"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
        case returnValues = "ReturnValues"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditionExpression = conditionExpression {
            try encodeContainer.encode(conditionExpression, forKey: .conditionExpression)
        }
        if let conditionalOperator = conditionalOperator {
            try encodeContainer.encode(conditionalOperator.rawValue, forKey: .conditionalOperator)
        }
        if let expected = expected {
            var expectedContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expected)
            for (dictKey0, expectedattributemap0) in expected {
                try expectedContainer.encode(expectedattributemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionattributenamemap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionattributenamemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeValues = expressionAttributeValues {
            var expressionAttributeValuesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expressionAttributeValues)
            for (dictKey0, expressionattributevaluemap0) in expressionAttributeValues {
                try expressionAttributeValuesContainer.encode(expressionattributevaluemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let item = item {
            var itemContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .item)
            for (dictKey0, putiteminputattributemap0) in item {
                try itemContainer.encode(putiteminputattributemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let returnConsumedCapacity = returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let returnItemCollectionMetrics = returnItemCollectionMetrics {
            try encodeContainer.encode(returnItemCollectionMetrics.rawValue, forKey: .returnItemCollectionMetrics)
        }
        if let returnValues = returnValues {
            try encodeContainer.encode(returnValues.rawValue, forKey: .returnValues)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

public struct PutItemInputHeadersMiddleware: Middleware {
    public let id: String = "PutItemInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutItemInput>,
                  next: H) -> Swift.Result<OperationOutput<PutItemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutItemInput>
    public typealias MOutput = OperationOutput<PutItemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutItemOutputError>
}

public struct PutItemInputQueryItemMiddleware: Middleware {
    public let id: String = "PutItemInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutItemInput>,
                  next: H) -> Swift.Result<OperationOutput<PutItemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutItemInput>
    public typealias MOutput = OperationOutput<PutItemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutItemOutputError>
}

/// <p>Represents the input of a <code>PutItem</code> operation.</p>
public struct PutItemInput: Equatable {
    /// <p>A condition that must be satisfied in order for a conditional <code>PutItem</code> operation to
    ///       succeed.</p>
    ///          <p>An expression can contain any of the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Functions: <code>attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size</code>
    ///                </p>
    ///                <p>These function names are case-sensitive.</p>
    ///             </li>
    ///             <li>
    ///                <p>Comparison operators: <code>= | <> |
    ///             < | > | <= | >= |
    ///             BETWEEN | IN </code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p> Logical operators: <code>AND | OR | NOT</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>For more information on condition expressions, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer
    ///                 Guide</i>.</p>
    public let conditionExpression: String?
    /// <p>This is a legacy parameter.  Use <code>ConditionExpression</code> instead.  For more information, see
    ///           <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let conditionalOperator: ConditionalOperator?
    /// <p>This is a legacy parameter.  Use <code>ConditionExpression</code> instead.  For more information, see
    ///           <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html">Expected</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let expected: [String:ExpectedAttributeValue]?
    /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
    ///          <ul>
    ///             <li>
    ///                <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
    ///             </li>
    ///             <li>
    ///                <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
    ///             </li>
    ///             <li>
    ///                <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
    ///             </li>
    ///          </ul>
    ///          <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Percentile</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>{"#P":"Percentile"}</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>You could then use this substitution in an expression, as in this example:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>#P = :val</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
    ///          </note>
    ///          <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
    ///                 Guide</i>.</p>
    public let expressionAttributeNames: [String:String]?
    /// <p>One or more values that can be substituted in an expression.</p>
    ///          <p>Use the <b>:</b> (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the <i>ProductStatus</i> attribute was one of the following: </p>
    ///          <p>
    ///             <code>Available | Backordered | Discontinued</code>
    ///          </p>
    ///          <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>
    ///          <p>
    ///             <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code>
    ///          </p>
    ///          <p>You could then use these values in an expression, such as this:</p>
    ///          <p>
    ///             <code>ProductStatus IN (:avail, :back, :disc)</code>
    ///          </p>
    ///         <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer
    ///                 Guide</i>.</p>
    public let expressionAttributeValues: [String:AttributeValue]?
    /// <p>A map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item.</p>
    ///          <p>You must provide all of the attributes for the primary key. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide both values for both the partition key and the sort key.</p>
    ///          <p>If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.</p>
    ///          <p>Empty String and Binary attribute values are allowed. Attribute values of type String and Binary must have a length greater than zero if the attribute is used as a key attribute for a table or index.</p>
    ///
    ///          <p>For more information about primary keys, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html#HowItWorks.CoreComponents.PrimaryKey">Primary Key</a> in the <i>Amazon DynamoDB Developer
    ///             Guide</i>.</p>
    ///          <p>Each element in the <code>Item</code> map is an <code>AttributeValue</code> object.</p>
    public let item: [String:AttributeValue]?
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    ///                <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    ///             </li>
    ///          </ul>
    public let returnConsumedCapacity: ReturnConsumedCapacity?
    /// <p>Determines whether item collection metrics are returned.  If set to <code>SIZE</code>, the response includes statistics about item collections, if any, that were modified during
    ///       the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned.</p>
    public let returnItemCollectionMetrics: ReturnItemCollectionMetrics?
    /// <p>Use <code>ReturnValues</code> if you want to get the item attributes as they appeared before they
    ///       were updated with the <code>PutItem</code> request. For <code>PutItem</code>, the valid values are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is
    ///             <code>NONE</code>, then nothing is returned. (This setting is the default for
    ///             <code>ReturnValues</code>.)</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ALL_OLD</code> - If <code>PutItem</code> overwrote an attribute name-value pair, then the
    ///           content of the old item is returned.</p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>The <code>ReturnValues</code> parameter is used by several DynamoDB operations; however,
    ///           <code>PutItem</code> does not recognize any values other than <code>NONE</code> or
    ///           <code>ALL_OLD</code>.</p>
    ///          </note>
    public let returnValues: ReturnValue?
    /// <p>The name of the table to contain the item.</p>
    public let tableName: String?

    public init (
        conditionExpression: String? = nil,
        conditionalOperator: ConditionalOperator? = nil,
        expected: [String:ExpectedAttributeValue]? = nil,
        expressionAttributeNames: [String:String]? = nil,
        expressionAttributeValues: [String:AttributeValue]? = nil,
        item: [String:AttributeValue]? = nil,
        returnConsumedCapacity: ReturnConsumedCapacity? = nil,
        returnItemCollectionMetrics: ReturnItemCollectionMetrics? = nil,
        returnValues: ReturnValue? = nil,
        tableName: String? = nil
    )
    {
        self.conditionExpression = conditionExpression
        self.conditionalOperator = conditionalOperator
        self.expected = expected
        self.expressionAttributeNames = expressionAttributeNames
        self.expressionAttributeValues = expressionAttributeValues
        self.item = item
        self.returnConsumedCapacity = returnConsumedCapacity
        self.returnItemCollectionMetrics = returnItemCollectionMetrics
        self.returnValues = returnValues
        self.tableName = tableName
    }
}

struct PutItemInputBody: Equatable {
    public let tableName: String?
    public let item: [String:AttributeValue]?
    public let expected: [String:ExpectedAttributeValue]?
    public let returnValues: ReturnValue?
    public let returnConsumedCapacity: ReturnConsumedCapacity?
    public let returnItemCollectionMetrics: ReturnItemCollectionMetrics?
    public let conditionalOperator: ConditionalOperator?
    public let conditionExpression: String?
    public let expressionAttributeNames: [String:String]?
    public let expressionAttributeValues: [String:AttributeValue]?
}

extension PutItemInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case conditionExpression = "ConditionExpression"
        case conditionalOperator = "ConditionalOperator"
        case expected = "Expected"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case item = "Item"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
        case returnValues = "ReturnValues"
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let itemContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .item)
        var itemDecoded0: [String:AttributeValue]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in itemContainer {
                if let attributevalue0 = attributevalue0 {
                    itemDecoded0?[key0] = attributevalue0
                }
            }
        }
        item = itemDecoded0
        let expectedContainer = try containerValues.decodeIfPresent([String: ExpectedAttributeValue?].self, forKey: .expected)
        var expectedDecoded0: [String:ExpectedAttributeValue]? = nil
        if let expectedContainer = expectedContainer {
            expectedDecoded0 = [String:ExpectedAttributeValue]()
            for (key0, expectedattributevalue0) in expectedContainer {
                if let expectedattributevalue0 = expectedattributevalue0 {
                    expectedDecoded0?[key0] = expectedattributevalue0
                }
            }
        }
        expected = expectedDecoded0
        let returnValuesDecoded = try containerValues.decodeIfPresent(ReturnValue.self, forKey: .returnValues)
        returnValues = returnValuesDecoded
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
        let returnItemCollectionMetricsDecoded = try containerValues.decodeIfPresent(ReturnItemCollectionMetrics.self, forKey: .returnItemCollectionMetrics)
        returnItemCollectionMetrics = returnItemCollectionMetricsDecoded
        let conditionalOperatorDecoded = try containerValues.decodeIfPresent(ConditionalOperator.self, forKey: .conditionalOperator)
        conditionalOperator = conditionalOperatorDecoded
        let conditionExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .conditionExpression)
        conditionExpression = conditionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [String:String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [String:String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
        let expressionAttributeValuesContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .expressionAttributeValues)
        var expressionAttributeValuesDecoded0: [String:AttributeValue]? = nil
        if let expressionAttributeValuesContainer = expressionAttributeValuesContainer {
            expressionAttributeValuesDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in expressionAttributeValuesContainer {
                if let attributevalue0 = attributevalue0 {
                    expressionAttributeValuesDecoded0?[key0] = attributevalue0
                }
            }
        }
        expressionAttributeValues = expressionAttributeValuesDecoded0
    }
}

extension PutItemOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutItemOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ConditionalCheckFailedException" : self = .conditionalCheckFailedException(try ConditionalCheckFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ItemCollectionSizeLimitExceededException" : self = .itemCollectionSizeLimitExceededException(try ItemCollectionSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TransactionConflictException" : self = .transactionConflictException(try TransactionConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutItemOutputError: Equatable {
    case conditionalCheckFailedException(ConditionalCheckFailedException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case itemCollectionSizeLimitExceededException(ItemCollectionSizeLimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case requestLimitExceeded(RequestLimitExceeded)
    case resourceNotFoundException(ResourceNotFoundException)
    case transactionConflictException(TransactionConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutItemOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutItemOutputResponse(attributes: \(String(describing: attributes)), consumedCapacity: \(String(describing: consumedCapacity)), itemCollectionMetrics: \(String(describing: itemCollectionMetrics)))"}
}

extension PutItemOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: PutItemOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.attributes = output.attributes
            self.consumedCapacity = output.consumedCapacity
            self.itemCollectionMetrics = output.itemCollectionMetrics
        } else {
            self.attributes = nil
            self.consumedCapacity = nil
            self.itemCollectionMetrics = nil
        }
    }
}

/// <p>Represents the output of a <code>PutItem</code> operation.</p>
public struct PutItemOutputResponse: Equatable {
    /// <p>The attribute values as they appeared before the <code>PutItem</code> operation, but only if
    ///         <code>ReturnValues</code> is specified as <code>ALL_OLD</code> in the request. Each element
    ///       consists of an attribute name and an attribute value.</p>
    public let attributes: [String:AttributeValue]?
    /// <p>The capacity units consumed by the <code>PutItem</code> operation. The data returned
    ///             includes the total provisioned throughput consumed, along with statistics for the table
    ///             and any indexes involved in the operation. <code>ConsumedCapacity</code> is only
    ///             returned if the <code>ReturnConsumedCapacity</code> parameter was specified. For more
    ///             information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Read/Write Capacity Mode</a> in the <i>Amazon DynamoDB Developer
    ///                 Guide</i>.</p>
    public let consumedCapacity: ConsumedCapacity?
    /// <p>Information about item collections, if any, that were affected by the
    ///                 <code>PutItem</code> operation. <code>ItemCollectionMetrics</code>
    ///             is only returned if the <code>ReturnItemCollectionMetrics</code> parameter was specified. If the table does not have any local
    ///             secondary indexes, this information is not returned in the response.</p>
    ///          <p>Each <code>ItemCollectionMetrics</code>
    ///         element consists of:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ItemCollectionKey</code> - The partition key value of the item
    ///           collection. This is the same as the partition key value of the item itself.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SizeEstimateRangeGB</code> - An estimate of item collection size,
    ///           in gigabytes. This value is a two-element array
    ///           containing a lower bound and an upper bound for the
    ///           estimate. The estimate includes the size of all the
    ///           items in the table, plus the size of all attributes
    ///           projected into all of the local secondary indexes on that
    ///           table. Use this estimate to measure whether a local secondary index is approaching its size limit.</p>
    ///                <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p>
    ///             </li>
    ///          </ul>
    public let itemCollectionMetrics: ItemCollectionMetrics?

    public init (
        attributes: [String:AttributeValue]? = nil,
        consumedCapacity: ConsumedCapacity? = nil,
        itemCollectionMetrics: ItemCollectionMetrics? = nil
    )
    {
        self.attributes = attributes
        self.consumedCapacity = consumedCapacity
        self.itemCollectionMetrics = itemCollectionMetrics
    }
}

struct PutItemOutputResponseBody: Equatable {
    public let attributes: [String:AttributeValue]?
    public let consumedCapacity: ConsumedCapacity?
    public let itemCollectionMetrics: ItemCollectionMetrics?
}

extension PutItemOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attributes = "Attributes"
        case consumedCapacity = "ConsumedCapacity"
        case itemCollectionMetrics = "ItemCollectionMetrics"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributesContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .attributes)
        var attributesDecoded0: [String:AttributeValue]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in attributesContainer {
                if let attributevalue0 = attributevalue0 {
                    attributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        attributes = attributesDecoded0
        let consumedCapacityDecoded = try containerValues.decodeIfPresent(ConsumedCapacity.self, forKey: .consumedCapacity)
        consumedCapacity = consumedCapacityDecoded
        let itemCollectionMetricsDecoded = try containerValues.decodeIfPresent(ItemCollectionMetrics.self, forKey: .itemCollectionMetrics)
        itemCollectionMetrics = itemCollectionMetricsDecoded
    }
}

extension PutRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case item = "Item"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let item = item {
            var itemContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .item)
            for (dictKey0, putiteminputattributemap0) in item {
                try itemContainer.encode(putiteminputattributemap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .item)
        var itemDecoded0: [String:AttributeValue]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in itemContainer {
                if let attributevalue0 = attributevalue0 {
                    itemDecoded0?[key0] = attributevalue0
                }
            }
        }
        item = itemDecoded0
    }
}

extension PutRequest: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutRequest(item: \(String(describing: item)))"}
}

/// <p>Represents a request to perform a <code>PutItem</code> operation on an item.</p>
public struct PutRequest: Equatable {
    /// <p>A map of attribute name to attribute values, representing the primary key of an item to
    ///          be processed by <code>PutItem</code>. All of the table's primary key attributes must be
    ///          specified, and their data types must match those of the table's key schema. If any
    ///          attributes are present in the item that are part of an index key schema for the table,
    ///          their types must match the index key schema.</p>
    public let item: [String:AttributeValue]?

    public init (
        item: [String:AttributeValue]? = nil
    )
    {
        self.item = item
    }
}

public struct QueryInputBodyMiddleware: Middleware {
    public let id: String = "QueryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<QueryInput>,
                  next: H) -> Swift.Result<OperationOutput<QueryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<QueryInput>
    public typealias MOutput = OperationOutput<QueryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<QueryOutputError>
}

extension QueryInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "QueryInput(attributesToGet: \(String(describing: attributesToGet)), conditionalOperator: \(String(describing: conditionalOperator)), consistentRead: \(String(describing: consistentRead)), exclusiveStartKey: \(String(describing: exclusiveStartKey)), expressionAttributeNames: \(String(describing: expressionAttributeNames)), expressionAttributeValues: \(String(describing: expressionAttributeValues)), filterExpression: \(String(describing: filterExpression)), indexName: \(String(describing: indexName)), keyConditionExpression: \(String(describing: keyConditionExpression)), keyConditions: \(String(describing: keyConditions)), limit: \(String(describing: limit)), projectionExpression: \(String(describing: projectionExpression)), queryFilter: \(String(describing: queryFilter)), returnConsumedCapacity: \(String(describing: returnConsumedCapacity)), scanIndexForward: \(String(describing: scanIndexForward)), select: \(String(describing: select)), tableName: \(String(describing: tableName)))"}
}

extension QueryInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributesToGet = "AttributesToGet"
        case conditionalOperator = "ConditionalOperator"
        case consistentRead = "ConsistentRead"
        case exclusiveStartKey = "ExclusiveStartKey"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case filterExpression = "FilterExpression"
        case indexName = "IndexName"
        case keyConditionExpression = "KeyConditionExpression"
        case keyConditions = "KeyConditions"
        case limit = "Limit"
        case projectionExpression = "ProjectionExpression"
        case queryFilter = "QueryFilter"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case scanIndexForward = "ScanIndexForward"
        case select = "Select"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributesToGet = attributesToGet {
            var attributesToGetContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributesToGet)
            for attributenamelist0 in attributesToGet {
                try attributesToGetContainer.encode(attributenamelist0)
            }
        }
        if let conditionalOperator = conditionalOperator {
            try encodeContainer.encode(conditionalOperator.rawValue, forKey: .conditionalOperator)
        }
        if let consistentRead = consistentRead {
            try encodeContainer.encode(consistentRead, forKey: .consistentRead)
        }
        if let exclusiveStartKey = exclusiveStartKey {
            var exclusiveStartKeyContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .exclusiveStartKey)
            for (dictKey0, key0) in exclusiveStartKey {
                try exclusiveStartKeyContainer.encode(key0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionattributenamemap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionattributenamemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeValues = expressionAttributeValues {
            var expressionAttributeValuesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expressionAttributeValues)
            for (dictKey0, expressionattributevaluemap0) in expressionAttributeValues {
                try expressionAttributeValuesContainer.encode(expressionattributevaluemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let filterExpression = filterExpression {
            try encodeContainer.encode(filterExpression, forKey: .filterExpression)
        }
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let keyConditionExpression = keyConditionExpression {
            try encodeContainer.encode(keyConditionExpression, forKey: .keyConditionExpression)
        }
        if let keyConditions = keyConditions {
            var keyConditionsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .keyConditions)
            for (dictKey0, keyconditions0) in keyConditions {
                try keyConditionsContainer.encode(keyconditions0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let projectionExpression = projectionExpression {
            try encodeContainer.encode(projectionExpression, forKey: .projectionExpression)
        }
        if let queryFilter = queryFilter {
            var queryFilterContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .queryFilter)
            for (dictKey0, filterconditionmap0) in queryFilter {
                try queryFilterContainer.encode(filterconditionmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let returnConsumedCapacity = returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let scanIndexForward = scanIndexForward {
            try encodeContainer.encode(scanIndexForward, forKey: .scanIndexForward)
        }
        if let select = select {
            try encodeContainer.encode(select.rawValue, forKey: .select)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

public struct QueryInputHeadersMiddleware: Middleware {
    public let id: String = "QueryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<QueryInput>,
                  next: H) -> Swift.Result<OperationOutput<QueryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<QueryInput>
    public typealias MOutput = OperationOutput<QueryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<QueryOutputError>
}

public struct QueryInputQueryItemMiddleware: Middleware {
    public let id: String = "QueryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<QueryInput>,
                  next: H) -> Swift.Result<OperationOutput<QueryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<QueryInput>
    public typealias MOutput = OperationOutput<QueryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<QueryOutputError>
}

/// <p>Represents the input of a <code>Query</code> operation.</p>
public struct QueryInput: Equatable {
    /// <p>This is a legacy parameter.  Use <code>ProjectionExpression</code> instead.  For more information, see
    ///           <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let attributesToGet: [String]?
    /// <p>This is a legacy parameter.  Use <code>FilterExpression</code> instead.  For more information, see
    ///           <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let conditionalOperator: ConditionalOperator?
    /// <p>Determines the read consistency model:  If set to <code>true</code>, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.</p>
    ///          <p>Strongly consistent reads
    ///       are not supported on global secondary indexes. If you query a global secondary index with <code>ConsistentRead</code> set to
    ///     <code>true</code>, you will receive a <code>ValidationException</code>.</p>
    public let consistentRead: Bool?
    /// <p>The primary key of the first item that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedKey</code> in the previous operation.</p>
    ///          <p>The data type for <code>ExclusiveStartKey</code> must be String, Number, or Binary. No
    ///             set data types are allowed.</p>
    public let exclusiveStartKey: [String:AttributeValue]?
    /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
    ///          <ul>
    ///             <li>
    ///                <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
    ///             </li>
    ///             <li>
    ///                <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
    ///             </li>
    ///             <li>
    ///                <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
    ///             </li>
    ///          </ul>
    ///          <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Percentile</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for
    ///             <code>ExpressionAttributeNames</code>:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>{"#P":"Percentile"}</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>You could then use this substitution in an expression, as in this example:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>#P = :val</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
    ///          </note>
    ///          <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
    ///                 Guide</i>.</p>
    public let expressionAttributeNames: [String:String]?
    /// <p>One or more values that can be substituted in an expression.</p>
    ///          <p>Use the <b>:</b> (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the
    ///             <i>ProductStatus</i> attribute was one of the following: </p>
    ///          <p>
    ///             <code>Available | Backordered | Discontinued</code>
    ///          </p>
    ///          <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>
    ///          <p>
    ///             <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code>
    ///          </p>
    ///          <p>You could then use these values in an expression, such as this:</p>
    ///          <p>
    ///             <code>ProductStatus IN (:avail, :back, :disc)</code>
    ///          </p>
    ///         <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Specifying Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let expressionAttributeValues: [String:AttributeValue]?
    /// <p>A string that contains conditions that DynamoDB applies after the <code>Query</code> operation, but
    ///        before the data is returned to you. Items that do not satisfy the <code>FilterExpression</code>
    ///        criteria are not returned.</p>
    ///          <p>A <code>FilterExpression</code> does not allow key attributes.  You cannot define a filter expression based on a partition key or a sort key.</p>
    ///          <note>
    ///             <p>A <code>FilterExpression</code> is applied after the items have already been read; the process of
    ///          filtering does not consume any additional read capacity units.</p>
    ///          </note>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#FilteringResults">Filter
    ///          Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let filterExpression: String?
    /// <p>The name of an index to query. This index can be any local secondary index or global secondary index on the table. Note that
    ///        if you use the <code>IndexName</code> parameter, you must also provide <code>TableName.</code>
    ///          </p>
    public let indexName: String?
    /// <p>The condition that specifies the key values for items to be retrieved by the
    ///                 <code>Query</code> action.</p>
    ///
    ///          <p>The condition must perform an equality test on a single partition key value.</p>
    ///         <p>The condition can optionally perform one of several comparison tests on a single
    ///             sort key value. This allows <code>Query</code> to retrieve one item with a given
    ///             partition key value and sort key value, or several items that have the same partition
    ///             key value but different sort key values.</p>
    ///
    ///          <p>The partition key equality test is required, and must be specified in the following format:</p>
    ///
    ///          <p>
    ///             <code>partitionKeyName</code>
    ///             <i>=</i>
    ///             <code>:partitionkeyval</code>
    ///          </p>
    ///
    ///          <p>If you also want to provide a condition for the sort key, it must be combined using <code>AND</code> with the condition
    ///       for the sort key. Following is an example, using the <b>=</b> comparison operator for the sort key:</p>
    ///
    ///         <p>
    ///             <code>partitionKeyName</code>
    ///             <code>=</code>
    ///             <code>:partitionkeyval</code>
    ///             <code>AND</code>
    ///             <code>sortKeyName</code>
    ///             <code>=</code>
    ///             <code>:sortkeyval</code>
    ///         </p>
    ///          <p>Valid comparisons for the sort key condition are as follows:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>sortKeyName</code>
    ///                   <code>=</code>
    ///                   <code>:sortkeyval</code> - true if the sort key value is equal to <code>:sortkeyval</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sortKeyName</code>
    ///                   <code><</code>
    ///                   <code>:sortkeyval</code> - true if the sort key value is less than <code>:sortkeyval</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sortKeyName</code>
    ///                   <code><=</code>
    ///                   <code>:sortkeyval</code> - true if the sort key value is less than or equal to
    ///           <code>:sortkeyval</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sortKeyName</code>
    ///                   <code>></code>
    ///                   <code>:sortkeyval</code> - true if the sort key value is greater than <code>:sortkeyval</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sortKeyName</code>
    ///                   <code>>= </code>
    ///                   <code>:sortkeyval</code> - true if the sort key value is greater than
    ///           or equal to <code>:sortkeyval</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sortKeyName</code>
    ///                   <code>BETWEEN</code>
    ///                   <code>:sortkeyval1</code>
    ///                   <code>AND</code>
    ///                   <code>:sortkeyval2</code> - true if the sort key value is greater than or equal to
    ///           <code>:sortkeyval1</code>, and less than or equal to <code>:sortkeyval2</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>begins_with (</code>
    ///                   <code>sortKeyName</code>, <code>:sortkeyval</code>
    ///                   <code>)</code> -
    ///           true if the sort key value begins with a particular operand. (You cannot use this function with a sort key that is of type Number.)  Note that the function name
    ///             <code>begins_with</code> is case-sensitive.</p>
    ///
    ///             </li>
    ///          </ul>
    ///
    ///          <p>Use the <code>ExpressionAttributeValues</code> parameter to replace tokens such as
    ///         <code>:partitionval</code> and <code>:sortval</code> with actual values at runtime.</p>
    ///
    ///          <p>You can optionally use the <code>ExpressionAttributeNames</code> parameter to replace the names of
    ///       the partition key and sort key with placeholder tokens. This option might be necessary if an attribute
    ///       name conflicts with a DynamoDB reserved word. For example, the following
    ///         <code>KeyConditionExpression</code> parameter causes an error because <i>Size</i> is a reserved
    ///       word:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Size = :myval</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>To work around this, define a placeholder (such a <code>#S</code>) to represent the attribute
    ///       name <i>Size</i>. <code>KeyConditionExpression</code> then is as follows:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>#S = :myval</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>For a list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved
    ///         Words</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///
    ///          <p>For more information on <code>ExpressionAttributeNames</code> and <code>ExpressionAttributeValues</code>,
    ///       see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ExpressionPlaceholders.html">Using Placeholders for Attribute
    ///         Names and Values</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let keyConditionExpression: String?
    /// <p>This is a legacy parameter.  Use <code>KeyConditionExpression</code> instead.   For more information, see
    ///           <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.KeyConditions.html">KeyConditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let keyConditions: [String:Condition]?
    /// <p>The maximum number of items to evaluate (not necessarily the number of matching items).
    ///             If DynamoDB processes the number of items up to the limit while processing the results,
    ///             it stops the operation and returns the matching values up to that point, and a key in
    ///                 <code>LastEvaluatedKey</code> to apply in a subsequent operation, so that you can
    ///             pick up where you left off. Also, if the processed dataset size exceeds 1 MB before
    ///             DynamoDB reaches this limit, it stops the operation and returns the matching values up
    ///             to the limit, and a key in <code>LastEvaluatedKey</code> to apply in a subsequent
    ///             operation to continue the operation. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html">Query and Scan</a> in the <i>Amazon DynamoDB Developer
    ///             Guide</i>.</p>
    public let limit: Int?
    /// <p>A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.</p>
    ///          <p>If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.</p>
    ///          <p>For more information, see
    ///       <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let projectionExpression: String?
    /// <p>This is a legacy parameter.  Use <code>FilterExpression</code> instead.   For more information, see
    ///           <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.QueryFilter.html">QueryFilter</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let queryFilter: [String:Condition]?
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    ///                <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    ///             </li>
    ///          </ul>
    public let returnConsumedCapacity: ReturnConsumedCapacity?
    /// <p>Specifies the order for index traversal: If <code>true</code> (default), the traversal is performed in ascending order; if <code>false</code>, the traversal is performed in descending order. </p>
    ///          <p>Items with the same partition key value are stored in sorted order by sort key. If the sort key data type is Number, the results are stored in numeric order. For type String, the results are stored in order of UTF-8 bytes. For type Binary, DynamoDB treats each byte of the binary data as unsigned.</p>
    ///          <p>If <code>ScanIndexForward</code> is <code>true</code>, DynamoDB returns the results in the order in which they are stored (by sort key value). This is the default behavior. If <code>ScanIndexForward</code> is <code>false</code>, DynamoDB reads the results in reverse order by sort key value, and then returns the results to the client.</p>
    public let scanIndexForward: Bool?
    /// <p>The attributes to be returned in the
    ///           result. You can retrieve all item attributes, specific item attributes, the count of
    ///           matching items, or in the case of an index, some or all of the attributes projected into
    ///           the index.</p>
    ///          <ul>
    ///             <li>
    ///               <p>
    ///                     <code>ALL_ATTRIBUTES</code> - Returns all of the item attributes from the
    ///                     specified table or index. If you query a local secondary index, then for each
    ///                     matching item in the index, DynamoDB fetches the entire item from the parent
    ///                     table. If the index is configured to project all item attributes, then all of
    ///                     the data can be obtained from the local secondary index, and no fetching is
    ///                     required.</p>
    ///             </li>
    ///             <li>
    ///               <p>
    ///                   <code>ALL_PROJECTED_ATTRIBUTES</code> - Allowed only when querying an index.
    ///                   Retrieves all attributes that have been projected into the index. If the
    ///                   index is configured to project all attributes, this return value is
    ///                   equivalent to specifying <code>ALL_ATTRIBUTES</code>.</p>
    ///             </li>
    ///             <li>
    ///               <p>
    ///                   <code>COUNT</code> - Returns the number of matching items, rather than the
    ///                   matching items themselves.</p>
    ///             </li>
    ///             <li>
    ///               <p>
    ///                   <code>SPECIFIC_ATTRIBUTES</code> - Returns only the attributes listed in
    ///                   <code>AttributesToGet</code>. This return value is equivalent to
    ///                   specifying <code>AttributesToGet</code> without specifying any value
    ///                   for <code>Select</code>.</p>
    ///               <p>If you query or scan a local secondary index and request only attributes that
    ///                     are projected into that index, the operation will read only the index and not
    ///                     the table. If any of the requested attributes are not projected into the local
    ///                     secondary index, DynamoDB fetches each of these attributes from the parent
    ///                     table. This extra fetching incurs additional throughput cost and latency.</p>
    ///               <p>If you query or scan a global secondary index, you can only request
    ///                   attributes that are projected into the index. Global secondary index queries
    ///                   cannot fetch attributes from the parent table.</p>
    ///             </li>
    ///          </ul>
    ///          <p>If neither <code>Select</code> nor <code>AttributesToGet</code>
    ///           are specified, DynamoDB defaults to <code>ALL_ATTRIBUTES</code> when accessing a
    ///           table, and <code>ALL_PROJECTED_ATTRIBUTES</code> when accessing an index. You cannot
    ///           use both <code>Select</code> and <code>AttributesToGet</code>
    ///           together in a single request, unless the value for <code>Select</code> is
    ///           <code>SPECIFIC_ATTRIBUTES</code>. (This usage is equivalent to specifying
    ///           <code>AttributesToGet</code> without any value for
    ///           <code>Select</code>.)</p>
    ///          <note>
    ///             <p>If you use the <code>ProjectionExpression</code> parameter, then
    ///               the value for <code>Select</code> can only be
    ///               <code>SPECIFIC_ATTRIBUTES</code>. Any other value for
    ///               <code>Select</code> will return an error.</p>
    ///          </note>
    public let select: Select?
    /// <p>The name of the table containing the requested items.</p>
    public let tableName: String?

    public init (
        attributesToGet: [String]? = nil,
        conditionalOperator: ConditionalOperator? = nil,
        consistentRead: Bool? = nil,
        exclusiveStartKey: [String:AttributeValue]? = nil,
        expressionAttributeNames: [String:String]? = nil,
        expressionAttributeValues: [String:AttributeValue]? = nil,
        filterExpression: String? = nil,
        indexName: String? = nil,
        keyConditionExpression: String? = nil,
        keyConditions: [String:Condition]? = nil,
        limit: Int? = nil,
        projectionExpression: String? = nil,
        queryFilter: [String:Condition]? = nil,
        returnConsumedCapacity: ReturnConsumedCapacity? = nil,
        scanIndexForward: Bool? = nil,
        select: Select? = nil,
        tableName: String? = nil
    )
    {
        self.attributesToGet = attributesToGet
        self.conditionalOperator = conditionalOperator
        self.consistentRead = consistentRead
        self.exclusiveStartKey = exclusiveStartKey
        self.expressionAttributeNames = expressionAttributeNames
        self.expressionAttributeValues = expressionAttributeValues
        self.filterExpression = filterExpression
        self.indexName = indexName
        self.keyConditionExpression = keyConditionExpression
        self.keyConditions = keyConditions
        self.limit = limit
        self.projectionExpression = projectionExpression
        self.queryFilter = queryFilter
        self.returnConsumedCapacity = returnConsumedCapacity
        self.scanIndexForward = scanIndexForward
        self.select = select
        self.tableName = tableName
    }
}

struct QueryInputBody: Equatable {
    public let tableName: String?
    public let indexName: String?
    public let select: Select?
    public let attributesToGet: [String]?
    public let limit: Int?
    public let consistentRead: Bool?
    public let keyConditions: [String:Condition]?
    public let queryFilter: [String:Condition]?
    public let conditionalOperator: ConditionalOperator?
    public let scanIndexForward: Bool?
    public let exclusiveStartKey: [String:AttributeValue]?
    public let returnConsumedCapacity: ReturnConsumedCapacity?
    public let projectionExpression: String?
    public let filterExpression: String?
    public let keyConditionExpression: String?
    public let expressionAttributeNames: [String:String]?
    public let expressionAttributeValues: [String:AttributeValue]?
}

extension QueryInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attributesToGet = "AttributesToGet"
        case conditionalOperator = "ConditionalOperator"
        case consistentRead = "ConsistentRead"
        case exclusiveStartKey = "ExclusiveStartKey"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case filterExpression = "FilterExpression"
        case indexName = "IndexName"
        case keyConditionExpression = "KeyConditionExpression"
        case keyConditions = "KeyConditions"
        case limit = "Limit"
        case projectionExpression = "ProjectionExpression"
        case queryFilter = "QueryFilter"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case scanIndexForward = "ScanIndexForward"
        case select = "Select"
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let selectDecoded = try containerValues.decodeIfPresent(Select.self, forKey: .select)
        select = selectDecoded
        let attributesToGetContainer = try containerValues.decodeIfPresent([String?].self, forKey: .attributesToGet)
        var attributesToGetDecoded0:[String]? = nil
        if let attributesToGetContainer = attributesToGetContainer {
            attributesToGetDecoded0 = [String]()
            for string0 in attributesToGetContainer {
                if let string0 = string0 {
                    attributesToGetDecoded0?.append(string0)
                }
            }
        }
        attributesToGet = attributesToGetDecoded0
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let consistentReadDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .consistentRead)
        consistentRead = consistentReadDecoded
        let keyConditionsContainer = try containerValues.decodeIfPresent([String: Condition?].self, forKey: .keyConditions)
        var keyConditionsDecoded0: [String:Condition]? = nil
        if let keyConditionsContainer = keyConditionsContainer {
            keyConditionsDecoded0 = [String:Condition]()
            for (key0, condition0) in keyConditionsContainer {
                if let condition0 = condition0 {
                    keyConditionsDecoded0?[key0] = condition0
                }
            }
        }
        keyConditions = keyConditionsDecoded0
        let queryFilterContainer = try containerValues.decodeIfPresent([String: Condition?].self, forKey: .queryFilter)
        var queryFilterDecoded0: [String:Condition]? = nil
        if let queryFilterContainer = queryFilterContainer {
            queryFilterDecoded0 = [String:Condition]()
            for (key0, condition0) in queryFilterContainer {
                if let condition0 = condition0 {
                    queryFilterDecoded0?[key0] = condition0
                }
            }
        }
        queryFilter = queryFilterDecoded0
        let conditionalOperatorDecoded = try containerValues.decodeIfPresent(ConditionalOperator.self, forKey: .conditionalOperator)
        conditionalOperator = conditionalOperatorDecoded
        let scanIndexForwardDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .scanIndexForward)
        scanIndexForward = scanIndexForwardDecoded
        let exclusiveStartKeyContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .exclusiveStartKey)
        var exclusiveStartKeyDecoded0: [String:AttributeValue]? = nil
        if let exclusiveStartKeyContainer = exclusiveStartKeyContainer {
            exclusiveStartKeyDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in exclusiveStartKeyContainer {
                if let attributevalue0 = attributevalue0 {
                    exclusiveStartKeyDecoded0?[key0] = attributevalue0
                }
            }
        }
        exclusiveStartKey = exclusiveStartKeyDecoded0
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
        let projectionExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .projectionExpression)
        projectionExpression = projectionExpressionDecoded
        let filterExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterExpression)
        filterExpression = filterExpressionDecoded
        let keyConditionExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyConditionExpression)
        keyConditionExpression = keyConditionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [String:String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [String:String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
        let expressionAttributeValuesContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .expressionAttributeValues)
        var expressionAttributeValuesDecoded0: [String:AttributeValue]? = nil
        if let expressionAttributeValuesContainer = expressionAttributeValuesContainer {
            expressionAttributeValuesDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in expressionAttributeValuesContainer {
                if let attributevalue0 = attributevalue0 {
                    expressionAttributeValuesDecoded0?[key0] = attributevalue0
                }
            }
        }
        expressionAttributeValues = expressionAttributeValuesDecoded0
    }
}

extension QueryOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension QueryOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum QueryOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case requestLimitExceeded(RequestLimitExceeded)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension QueryOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "QueryOutputResponse(consumedCapacity: \(String(describing: consumedCapacity)), count: \(String(describing: count)), items: \(String(describing: items)), lastEvaluatedKey: \(String(describing: lastEvaluatedKey)), scannedCount: \(String(describing: scannedCount)))"}
}

extension QueryOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: QueryOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.consumedCapacity = output.consumedCapacity
            self.count = output.count
            self.items = output.items
            self.lastEvaluatedKey = output.lastEvaluatedKey
            self.scannedCount = output.scannedCount
        } else {
            self.consumedCapacity = nil
            self.count = 0
            self.items = nil
            self.lastEvaluatedKey = nil
            self.scannedCount = 0
        }
    }
}

/// <p>Represents the output of a <code>Query</code> operation.</p>
public struct QueryOutputResponse: Equatable {
    /// <p>The capacity units consumed by the <code>Query</code> operation. The data returned
    ///             includes the total provisioned throughput consumed, along with statistics for the table
    ///             and any indexes involved in the operation. <code>ConsumedCapacity</code> is only
    ///             returned if the <code>ReturnConsumedCapacity</code> parameter was specified. For more
    ///             information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned Throughput</a> in the <i>Amazon DynamoDB Developer
    ///                 Guide</i>.</p>
    public let consumedCapacity: ConsumedCapacity?
    /// <p>The number of items in the response.</p>
    ///          <p>If you used a <code>QueryFilter</code> in the request, then <code>Count</code> is the number of items
    ///       returned after the filter was applied, and <code>ScannedCount</code> is the number of
    ///       matching items before the filter was applied.</p>
    ///          <p>If you did not use a filter in the request, then <code>Count</code> and <code>ScannedCount</code> are the
    ///       same.</p>
    public let count: Int
    /// <p>An array of item attributes that match the query criteria. Each element in this array consists of an attribute name and the value for that attribute.</p>
    public let items: [[String:AttributeValue]]?
    /// <p>The primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request.</p>
    ///          <p>If <code>LastEvaluatedKey</code> is empty, then the "last page" of results has been processed and there is no more data to be retrieved.</p>
    ///          <p>If <code>LastEvaluatedKey</code> is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when <code>LastEvaluatedKey</code> is empty.</p>
    public let lastEvaluatedKey: [String:AttributeValue]?
    /// <p>The number of items evaluated, before any <code>QueryFilter</code> is applied. A high
    ///         <code>ScannedCount</code> value with few, or no, <code>Count</code> results indicates an inefficient
    ///         <code>Query</code> operation. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count">Count and ScannedCount</a> in the
    ///       <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///          <p>If you did not use a filter in the request, then <code>ScannedCount</code> is the same as
    ///         <code>Count</code>.</p>
    public let scannedCount: Int

    public init (
        consumedCapacity: ConsumedCapacity? = nil,
        count: Int = 0,
        items: [[String:AttributeValue]]? = nil,
        lastEvaluatedKey: [String:AttributeValue]? = nil,
        scannedCount: Int = 0
    )
    {
        self.consumedCapacity = consumedCapacity
        self.count = count
        self.items = items
        self.lastEvaluatedKey = lastEvaluatedKey
        self.scannedCount = scannedCount
    }
}

struct QueryOutputResponseBody: Equatable {
    public let items: [[String:AttributeValue]]?
    public let count: Int
    public let scannedCount: Int
    public let lastEvaluatedKey: [String:AttributeValue]?
    public let consumedCapacity: ConsumedCapacity?
}

extension QueryOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case consumedCapacity = "ConsumedCapacity"
        case count = "Count"
        case items = "Items"
        case lastEvaluatedKey = "LastEvaluatedKey"
        case scannedCount = "ScannedCount"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemsContainer = try containerValues.decodeIfPresent([[String: AttributeValue?]?].self, forKey: .items)
        var itemsDecoded0:[[String:AttributeValue]]? = nil
        if let itemsContainer = itemsContainer {
            itemsDecoded0 = [[String:AttributeValue]]()
            for map0 in itemsContainer {
                var itemsContainerDecoded0: [String: AttributeValue]? = nil
                if let map0 = map0 {
                    itemsContainerDecoded0 = [String: AttributeValue]()
                    for (key1, attributevalue1) in map0 {
                        if let attributevalue1 = attributevalue1 {
                            itemsContainerDecoded0?[key1] = attributevalue1
                        }
                    }
                }
                if let itemsContainerDecoded0 = itemsContainerDecoded0 {
                    itemsDecoded0?.append(itemsContainerDecoded0)
                }
            }
        }
        items = itemsDecoded0
        let countDecoded = try containerValues.decode(Int.self, forKey: .count)
        count = countDecoded
        let scannedCountDecoded = try containerValues.decode(Int.self, forKey: .scannedCount)
        scannedCount = scannedCountDecoded
        let lastEvaluatedKeyContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .lastEvaluatedKey)
        var lastEvaluatedKeyDecoded0: [String:AttributeValue]? = nil
        if let lastEvaluatedKeyContainer = lastEvaluatedKeyContainer {
            lastEvaluatedKeyDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in lastEvaluatedKeyContainer {
                if let attributevalue0 = attributevalue0 {
                    lastEvaluatedKeyDecoded0?[key0] = attributevalue0
                }
            }
        }
        lastEvaluatedKey = lastEvaluatedKeyDecoded0
        let consumedCapacityDecoded = try containerValues.decodeIfPresent(ConsumedCapacity.self, forKey: .consumedCapacity)
        consumedCapacity = consumedCapacityDecoded
    }
}

extension Replica: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case regionName = "RegionName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let regionName = regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .regionName)
        regionName = regionNameDecoded
    }
}

extension Replica: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Replica(regionName: \(String(describing: regionName)))"}
}

/// <p>Represents the properties of a replica.</p>
public struct Replica: Equatable {
    /// <p>The Region where the replica needs to be created.</p>
    public let regionName: String?

    public init (
        regionName: String? = nil
    )
    {
        self.regionName = regionName
    }
}

extension ReplicaAlreadyExistsException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReplicaAlreadyExistsException(message: \(String(describing: message)))"}
}

extension ReplicaAlreadyExistsException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ReplicaAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified replica is already part of the global table.</p>
public struct ReplicaAlreadyExistsException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ReplicaAlreadyExistsExceptionBody: Equatable {
    public let message: String?
}

extension ReplicaAlreadyExistsExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ReplicaAutoScalingDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case regionName = "RegionName"
        case replicaProvisionedReadCapacityAutoScalingSettings = "ReplicaProvisionedReadCapacityAutoScalingSettings"
        case replicaProvisionedWriteCapacityAutoScalingSettings = "ReplicaProvisionedWriteCapacityAutoScalingSettings"
        case replicaStatus = "ReplicaStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalSecondaryIndexes = globalSecondaryIndexes {
            var globalSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexes)
            for replicaglobalsecondaryindexautoscalingdescriptionlist0 in globalSecondaryIndexes {
                try globalSecondaryIndexesContainer.encode(replicaglobalsecondaryindexautoscalingdescriptionlist0)
            }
        }
        if let regionName = regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
        if let replicaProvisionedReadCapacityAutoScalingSettings = replicaProvisionedReadCapacityAutoScalingSettings {
            try encodeContainer.encode(replicaProvisionedReadCapacityAutoScalingSettings, forKey: .replicaProvisionedReadCapacityAutoScalingSettings)
        }
        if let replicaProvisionedWriteCapacityAutoScalingSettings = replicaProvisionedWriteCapacityAutoScalingSettings {
            try encodeContainer.encode(replicaProvisionedWriteCapacityAutoScalingSettings, forKey: .replicaProvisionedWriteCapacityAutoScalingSettings)
        }
        if let replicaStatus = replicaStatus {
            try encodeContainer.encode(replicaStatus.rawValue, forKey: .replicaStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .regionName)
        regionName = regionNameDecoded
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([ReplicaGlobalSecondaryIndexAutoScalingDescription?].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0:[ReplicaGlobalSecondaryIndexAutoScalingDescription]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [ReplicaGlobalSecondaryIndexAutoScalingDescription]()
            for structure0 in globalSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
        let replicaProvisionedReadCapacityAutoScalingSettingsDecoded = try containerValues.decodeIfPresent(AutoScalingSettingsDescription.self, forKey: .replicaProvisionedReadCapacityAutoScalingSettings)
        replicaProvisionedReadCapacityAutoScalingSettings = replicaProvisionedReadCapacityAutoScalingSettingsDecoded
        let replicaProvisionedWriteCapacityAutoScalingSettingsDecoded = try containerValues.decodeIfPresent(AutoScalingSettingsDescription.self, forKey: .replicaProvisionedWriteCapacityAutoScalingSettings)
        replicaProvisionedWriteCapacityAutoScalingSettings = replicaProvisionedWriteCapacityAutoScalingSettingsDecoded
        let replicaStatusDecoded = try containerValues.decodeIfPresent(ReplicaStatus.self, forKey: .replicaStatus)
        replicaStatus = replicaStatusDecoded
    }
}

extension ReplicaAutoScalingDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReplicaAutoScalingDescription(globalSecondaryIndexes: \(String(describing: globalSecondaryIndexes)), regionName: \(String(describing: regionName)), replicaProvisionedReadCapacityAutoScalingSettings: \(String(describing: replicaProvisionedReadCapacityAutoScalingSettings)), replicaProvisionedWriteCapacityAutoScalingSettings: \(String(describing: replicaProvisionedWriteCapacityAutoScalingSettings)), replicaStatus: \(String(describing: replicaStatus)))"}
}

/// <p>Represents the auto scaling settings of the replica.</p>
public struct ReplicaAutoScalingDescription: Equatable {
    /// <p>Replica-specific global secondary index auto scaling settings.</p>
    public let globalSecondaryIndexes: [ReplicaGlobalSecondaryIndexAutoScalingDescription]?
    /// <p>The Region where the replica exists.</p>
    public let regionName: String?
    /// <p>Represents the auto scaling settings for a global table or global secondary
    ///          index.</p>
    public let replicaProvisionedReadCapacityAutoScalingSettings: AutoScalingSettingsDescription?
    /// <p>Represents the auto scaling settings for a global table or global secondary
    ///          index.</p>
    public let replicaProvisionedWriteCapacityAutoScalingSettings: AutoScalingSettingsDescription?
    /// <p>The current state of the replica:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CREATING</code> - The replica is being created.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UPDATING</code> - The replica is being updated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DELETING</code> - The replica is being deleted.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ACTIVE</code> - The replica is ready for use.</p>
    ///             </li>
    ///          </ul>
    public let replicaStatus: ReplicaStatus?

    public init (
        globalSecondaryIndexes: [ReplicaGlobalSecondaryIndexAutoScalingDescription]? = nil,
        regionName: String? = nil,
        replicaProvisionedReadCapacityAutoScalingSettings: AutoScalingSettingsDescription? = nil,
        replicaProvisionedWriteCapacityAutoScalingSettings: AutoScalingSettingsDescription? = nil,
        replicaStatus: ReplicaStatus? = nil
    )
    {
        self.globalSecondaryIndexes = globalSecondaryIndexes
        self.regionName = regionName
        self.replicaProvisionedReadCapacityAutoScalingSettings = replicaProvisionedReadCapacityAutoScalingSettings
        self.replicaProvisionedWriteCapacityAutoScalingSettings = replicaProvisionedWriteCapacityAutoScalingSettings
        self.replicaStatus = replicaStatus
    }
}

extension ReplicaAutoScalingUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case regionName = "RegionName"
        case replicaGlobalSecondaryIndexUpdates = "ReplicaGlobalSecondaryIndexUpdates"
        case replicaProvisionedReadCapacityAutoScalingUpdate = "ReplicaProvisionedReadCapacityAutoScalingUpdate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let regionName = regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
        if let replicaGlobalSecondaryIndexUpdates = replicaGlobalSecondaryIndexUpdates {
            var replicaGlobalSecondaryIndexUpdatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicaGlobalSecondaryIndexUpdates)
            for replicaglobalsecondaryindexautoscalingupdatelist0 in replicaGlobalSecondaryIndexUpdates {
                try replicaGlobalSecondaryIndexUpdatesContainer.encode(replicaglobalsecondaryindexautoscalingupdatelist0)
            }
        }
        if let replicaProvisionedReadCapacityAutoScalingUpdate = replicaProvisionedReadCapacityAutoScalingUpdate {
            try encodeContainer.encode(replicaProvisionedReadCapacityAutoScalingUpdate, forKey: .replicaProvisionedReadCapacityAutoScalingUpdate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .regionName)
        regionName = regionNameDecoded
        let replicaGlobalSecondaryIndexUpdatesContainer = try containerValues.decodeIfPresent([ReplicaGlobalSecondaryIndexAutoScalingUpdate?].self, forKey: .replicaGlobalSecondaryIndexUpdates)
        var replicaGlobalSecondaryIndexUpdatesDecoded0:[ReplicaGlobalSecondaryIndexAutoScalingUpdate]? = nil
        if let replicaGlobalSecondaryIndexUpdatesContainer = replicaGlobalSecondaryIndexUpdatesContainer {
            replicaGlobalSecondaryIndexUpdatesDecoded0 = [ReplicaGlobalSecondaryIndexAutoScalingUpdate]()
            for structure0 in replicaGlobalSecondaryIndexUpdatesContainer {
                if let structure0 = structure0 {
                    replicaGlobalSecondaryIndexUpdatesDecoded0?.append(structure0)
                }
            }
        }
        replicaGlobalSecondaryIndexUpdates = replicaGlobalSecondaryIndexUpdatesDecoded0
        let replicaProvisionedReadCapacityAutoScalingUpdateDecoded = try containerValues.decodeIfPresent(AutoScalingSettingsUpdate.self, forKey: .replicaProvisionedReadCapacityAutoScalingUpdate)
        replicaProvisionedReadCapacityAutoScalingUpdate = replicaProvisionedReadCapacityAutoScalingUpdateDecoded
    }
}

extension ReplicaAutoScalingUpdate: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReplicaAutoScalingUpdate(regionName: \(String(describing: regionName)), replicaGlobalSecondaryIndexUpdates: \(String(describing: replicaGlobalSecondaryIndexUpdates)), replicaProvisionedReadCapacityAutoScalingUpdate: \(String(describing: replicaProvisionedReadCapacityAutoScalingUpdate)))"}
}

/// <p>Represents the auto scaling settings of a replica that will be modified.</p>
public struct ReplicaAutoScalingUpdate: Equatable {
    /// <p>The Region where the replica exists.</p>
    public let regionName: String?
    /// <p>Represents the auto scaling settings of global secondary indexes that will
    ///          be modified.</p>
    public let replicaGlobalSecondaryIndexUpdates: [ReplicaGlobalSecondaryIndexAutoScalingUpdate]?
    /// <p>Represents the auto scaling settings to be modified for a global table or global
    ///          secondary index.</p>
    public let replicaProvisionedReadCapacityAutoScalingUpdate: AutoScalingSettingsUpdate?

    public init (
        regionName: String? = nil,
        replicaGlobalSecondaryIndexUpdates: [ReplicaGlobalSecondaryIndexAutoScalingUpdate]? = nil,
        replicaProvisionedReadCapacityAutoScalingUpdate: AutoScalingSettingsUpdate? = nil
    )
    {
        self.regionName = regionName
        self.replicaGlobalSecondaryIndexUpdates = replicaGlobalSecondaryIndexUpdates
        self.replicaProvisionedReadCapacityAutoScalingUpdate = replicaProvisionedReadCapacityAutoScalingUpdate
    }
}

extension ReplicaDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case kMSMasterKeyId = "KMSMasterKeyId"
        case provisionedThroughputOverride = "ProvisionedThroughputOverride"
        case regionName = "RegionName"
        case replicaInaccessibleDateTime = "ReplicaInaccessibleDateTime"
        case replicaStatus = "ReplicaStatus"
        case replicaStatusDescription = "ReplicaStatusDescription"
        case replicaStatusPercentProgress = "ReplicaStatusPercentProgress"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalSecondaryIndexes = globalSecondaryIndexes {
            var globalSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexes)
            for replicaglobalsecondaryindexdescriptionlist0 in globalSecondaryIndexes {
                try globalSecondaryIndexesContainer.encode(replicaglobalsecondaryindexdescriptionlist0)
            }
        }
        if let kMSMasterKeyId = kMSMasterKeyId {
            try encodeContainer.encode(kMSMasterKeyId, forKey: .kMSMasterKeyId)
        }
        if let provisionedThroughputOverride = provisionedThroughputOverride {
            try encodeContainer.encode(provisionedThroughputOverride, forKey: .provisionedThroughputOverride)
        }
        if let regionName = regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
        if let replicaInaccessibleDateTime = replicaInaccessibleDateTime {
            try encodeContainer.encode(replicaInaccessibleDateTime.timeIntervalSince1970, forKey: .replicaInaccessibleDateTime)
        }
        if let replicaStatus = replicaStatus {
            try encodeContainer.encode(replicaStatus.rawValue, forKey: .replicaStatus)
        }
        if let replicaStatusDescription = replicaStatusDescription {
            try encodeContainer.encode(replicaStatusDescription, forKey: .replicaStatusDescription)
        }
        if let replicaStatusPercentProgress = replicaStatusPercentProgress {
            try encodeContainer.encode(replicaStatusPercentProgress, forKey: .replicaStatusPercentProgress)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .regionName)
        regionName = regionNameDecoded
        let replicaStatusDecoded = try containerValues.decodeIfPresent(ReplicaStatus.self, forKey: .replicaStatus)
        replicaStatus = replicaStatusDecoded
        let replicaStatusDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replicaStatusDescription)
        replicaStatusDescription = replicaStatusDescriptionDecoded
        let replicaStatusPercentProgressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replicaStatusPercentProgress)
        replicaStatusPercentProgress = replicaStatusPercentProgressDecoded
        let kMSMasterKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kMSMasterKeyId)
        kMSMasterKeyId = kMSMasterKeyIdDecoded
        let provisionedThroughputOverrideDecoded = try containerValues.decodeIfPresent(ProvisionedThroughputOverride.self, forKey: .provisionedThroughputOverride)
        provisionedThroughputOverride = provisionedThroughputOverrideDecoded
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([ReplicaGlobalSecondaryIndexDescription?].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0:[ReplicaGlobalSecondaryIndexDescription]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [ReplicaGlobalSecondaryIndexDescription]()
            for structure0 in globalSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
        let replicaInaccessibleDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .replicaInaccessibleDateTime)
        replicaInaccessibleDateTime = replicaInaccessibleDateTimeDecoded
    }
}

extension ReplicaDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReplicaDescription(globalSecondaryIndexes: \(String(describing: globalSecondaryIndexes)), kMSMasterKeyId: \(String(describing: kMSMasterKeyId)), provisionedThroughputOverride: \(String(describing: provisionedThroughputOverride)), regionName: \(String(describing: regionName)), replicaInaccessibleDateTime: \(String(describing: replicaInaccessibleDateTime)), replicaStatus: \(String(describing: replicaStatus)), replicaStatusDescription: \(String(describing: replicaStatusDescription)), replicaStatusPercentProgress: \(String(describing: replicaStatusPercentProgress)))"}
}

/// <p>Contains the details of the replica.</p>
public struct ReplicaDescription: Equatable {
    /// <p>Replica-specific global secondary index settings.</p>
    public let globalSecondaryIndexes: [ReplicaGlobalSecondaryIndexDescription]?
    /// <p>The AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS
    ///          encryption.</p>
    public let kMSMasterKeyId: String?
    /// <p>Replica-specific provisioned throughput. If not described, uses the source table's
    ///          provisioned throughput settings.</p>
    public let provisionedThroughputOverride: ProvisionedThroughputOverride?
    /// <p>The name of the Region.</p>
    public let regionName: String?
    /// <p>The time at which the replica was first detected as inaccessible. To determine cause of inaccessibility check the <code>ReplicaStatus</code> property.</p>
    public let replicaInaccessibleDateTime: Date?
    /// <p>The current state of the replica:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CREATING</code> - The replica is being created.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UPDATING</code> - The replica is being updated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DELETING</code> - The replica is being deleted.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ACTIVE</code> - The replica is ready for use.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>REGION_DISABLED</code> - The replica is inaccessible because the AWS Region has been disabled.</p>
    ///                <note>
    ///                   <p>If the AWS Region remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.</p>
    ///                </note>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>INACCESSIBLE_ENCRYPTION_CREDENTIALS </code> - The AWS KMS key used to encrypt the table is inaccessible.</p>
    ///                <note>
    ///                   <p>If the AWS KMS key remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.</p>
    ///                </note>
    ///             </li>
    ///          </ul>
    public let replicaStatus: ReplicaStatus?
    /// <p>Detailed information about the replica status.</p>
    public let replicaStatusDescription: String?
    /// <p>Specifies the progress of a Create, Update, or Delete action on the replica
    ///          as a percentage.</p>
    public let replicaStatusPercentProgress: String?

    public init (
        globalSecondaryIndexes: [ReplicaGlobalSecondaryIndexDescription]? = nil,
        kMSMasterKeyId: String? = nil,
        provisionedThroughputOverride: ProvisionedThroughputOverride? = nil,
        regionName: String? = nil,
        replicaInaccessibleDateTime: Date? = nil,
        replicaStatus: ReplicaStatus? = nil,
        replicaStatusDescription: String? = nil,
        replicaStatusPercentProgress: String? = nil
    )
    {
        self.globalSecondaryIndexes = globalSecondaryIndexes
        self.kMSMasterKeyId = kMSMasterKeyId
        self.provisionedThroughputOverride = provisionedThroughputOverride
        self.regionName = regionName
        self.replicaInaccessibleDateTime = replicaInaccessibleDateTime
        self.replicaStatus = replicaStatus
        self.replicaStatusDescription = replicaStatusDescription
        self.replicaStatusPercentProgress = replicaStatusPercentProgress
    }
}

extension ReplicaGlobalSecondaryIndex: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case indexName = "IndexName"
        case provisionedThroughputOverride = "ProvisionedThroughputOverride"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let provisionedThroughputOverride = provisionedThroughputOverride {
            try encodeContainer.encode(provisionedThroughputOverride, forKey: .provisionedThroughputOverride)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let provisionedThroughputOverrideDecoded = try containerValues.decodeIfPresent(ProvisionedThroughputOverride.self, forKey: .provisionedThroughputOverride)
        provisionedThroughputOverride = provisionedThroughputOverrideDecoded
    }
}

extension ReplicaGlobalSecondaryIndex: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReplicaGlobalSecondaryIndex(indexName: \(String(describing: indexName)), provisionedThroughputOverride: \(String(describing: provisionedThroughputOverride)))"}
}

/// <p>Represents the properties of a replica global secondary index.</p>
public struct ReplicaGlobalSecondaryIndex: Equatable {
    /// <p>The name of the global secondary index.</p>
    public let indexName: String?
    /// <p>Replica table GSI-specific provisioned throughput. If not specified, uses the
    ///          source table GSI's read capacity settings.</p>
    public let provisionedThroughputOverride: ProvisionedThroughputOverride?

    public init (
        indexName: String? = nil,
        provisionedThroughputOverride: ProvisionedThroughputOverride? = nil
    )
    {
        self.indexName = indexName
        self.provisionedThroughputOverride = provisionedThroughputOverride
    }
}

extension ReplicaGlobalSecondaryIndexAutoScalingDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case indexName = "IndexName"
        case indexStatus = "IndexStatus"
        case provisionedReadCapacityAutoScalingSettings = "ProvisionedReadCapacityAutoScalingSettings"
        case provisionedWriteCapacityAutoScalingSettings = "ProvisionedWriteCapacityAutoScalingSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let indexStatus = indexStatus {
            try encodeContainer.encode(indexStatus.rawValue, forKey: .indexStatus)
        }
        if let provisionedReadCapacityAutoScalingSettings = provisionedReadCapacityAutoScalingSettings {
            try encodeContainer.encode(provisionedReadCapacityAutoScalingSettings, forKey: .provisionedReadCapacityAutoScalingSettings)
        }
        if let provisionedWriteCapacityAutoScalingSettings = provisionedWriteCapacityAutoScalingSettings {
            try encodeContainer.encode(provisionedWriteCapacityAutoScalingSettings, forKey: .provisionedWriteCapacityAutoScalingSettings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let indexStatusDecoded = try containerValues.decodeIfPresent(IndexStatus.self, forKey: .indexStatus)
        indexStatus = indexStatusDecoded
        let provisionedReadCapacityAutoScalingSettingsDecoded = try containerValues.decodeIfPresent(AutoScalingSettingsDescription.self, forKey: .provisionedReadCapacityAutoScalingSettings)
        provisionedReadCapacityAutoScalingSettings = provisionedReadCapacityAutoScalingSettingsDecoded
        let provisionedWriteCapacityAutoScalingSettingsDecoded = try containerValues.decodeIfPresent(AutoScalingSettingsDescription.self, forKey: .provisionedWriteCapacityAutoScalingSettings)
        provisionedWriteCapacityAutoScalingSettings = provisionedWriteCapacityAutoScalingSettingsDecoded
    }
}

extension ReplicaGlobalSecondaryIndexAutoScalingDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReplicaGlobalSecondaryIndexAutoScalingDescription(indexName: \(String(describing: indexName)), indexStatus: \(String(describing: indexStatus)), provisionedReadCapacityAutoScalingSettings: \(String(describing: provisionedReadCapacityAutoScalingSettings)), provisionedWriteCapacityAutoScalingSettings: \(String(describing: provisionedWriteCapacityAutoScalingSettings)))"}
}

/// <p>Represents the auto scaling configuration for a replica global secondary index.</p>
public struct ReplicaGlobalSecondaryIndexAutoScalingDescription: Equatable {
    /// <p>The name of the global secondary index.</p>
    public let indexName: String?
    /// <p>The current state of the replica global secondary index:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CREATING</code> - The index is being created.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UPDATING</code> - The index is being updated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DELETING</code> - The index is being deleted.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ACTIVE</code> - The index is ready for use.</p>
    ///             </li>
    ///          </ul>
    public let indexStatus: IndexStatus?
    /// <p>Represents the auto scaling settings for a global table or global secondary
    ///          index.</p>
    public let provisionedReadCapacityAutoScalingSettings: AutoScalingSettingsDescription?
    /// <p>Represents the auto scaling settings for a global table or global secondary
    ///          index.</p>
    public let provisionedWriteCapacityAutoScalingSettings: AutoScalingSettingsDescription?

    public init (
        indexName: String? = nil,
        indexStatus: IndexStatus? = nil,
        provisionedReadCapacityAutoScalingSettings: AutoScalingSettingsDescription? = nil,
        provisionedWriteCapacityAutoScalingSettings: AutoScalingSettingsDescription? = nil
    )
    {
        self.indexName = indexName
        self.indexStatus = indexStatus
        self.provisionedReadCapacityAutoScalingSettings = provisionedReadCapacityAutoScalingSettings
        self.provisionedWriteCapacityAutoScalingSettings = provisionedWriteCapacityAutoScalingSettings
    }
}

extension ReplicaGlobalSecondaryIndexAutoScalingUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case indexName = "IndexName"
        case provisionedReadCapacityAutoScalingUpdate = "ProvisionedReadCapacityAutoScalingUpdate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let provisionedReadCapacityAutoScalingUpdate = provisionedReadCapacityAutoScalingUpdate {
            try encodeContainer.encode(provisionedReadCapacityAutoScalingUpdate, forKey: .provisionedReadCapacityAutoScalingUpdate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let provisionedReadCapacityAutoScalingUpdateDecoded = try containerValues.decodeIfPresent(AutoScalingSettingsUpdate.self, forKey: .provisionedReadCapacityAutoScalingUpdate)
        provisionedReadCapacityAutoScalingUpdate = provisionedReadCapacityAutoScalingUpdateDecoded
    }
}

extension ReplicaGlobalSecondaryIndexAutoScalingUpdate: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReplicaGlobalSecondaryIndexAutoScalingUpdate(indexName: \(String(describing: indexName)), provisionedReadCapacityAutoScalingUpdate: \(String(describing: provisionedReadCapacityAutoScalingUpdate)))"}
}

/// <p>Represents the auto scaling settings of a global secondary index for a replica
///          that will be modified.</p>
public struct ReplicaGlobalSecondaryIndexAutoScalingUpdate: Equatable {
    /// <p>The name of the global secondary index.</p>
    public let indexName: String?
    /// <p>Represents the auto scaling settings to be modified for a global table or global
    ///          secondary index.</p>
    public let provisionedReadCapacityAutoScalingUpdate: AutoScalingSettingsUpdate?

    public init (
        indexName: String? = nil,
        provisionedReadCapacityAutoScalingUpdate: AutoScalingSettingsUpdate? = nil
    )
    {
        self.indexName = indexName
        self.provisionedReadCapacityAutoScalingUpdate = provisionedReadCapacityAutoScalingUpdate
    }
}

extension ReplicaGlobalSecondaryIndexDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case indexName = "IndexName"
        case provisionedThroughputOverride = "ProvisionedThroughputOverride"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let provisionedThroughputOverride = provisionedThroughputOverride {
            try encodeContainer.encode(provisionedThroughputOverride, forKey: .provisionedThroughputOverride)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let provisionedThroughputOverrideDecoded = try containerValues.decodeIfPresent(ProvisionedThroughputOverride.self, forKey: .provisionedThroughputOverride)
        provisionedThroughputOverride = provisionedThroughputOverrideDecoded
    }
}

extension ReplicaGlobalSecondaryIndexDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReplicaGlobalSecondaryIndexDescription(indexName: \(String(describing: indexName)), provisionedThroughputOverride: \(String(describing: provisionedThroughputOverride)))"}
}

/// <p>Represents the properties of a replica global secondary index.</p>
public struct ReplicaGlobalSecondaryIndexDescription: Equatable {
    /// <p>The name of the global secondary index.</p>
    public let indexName: String?
    /// <p>If not described, uses the source table GSI's read capacity settings.</p>
    public let provisionedThroughputOverride: ProvisionedThroughputOverride?

    public init (
        indexName: String? = nil,
        provisionedThroughputOverride: ProvisionedThroughputOverride? = nil
    )
    {
        self.indexName = indexName
        self.provisionedThroughputOverride = provisionedThroughputOverride
    }
}

extension ReplicaGlobalSecondaryIndexSettingsDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case indexName = "IndexName"
        case indexStatus = "IndexStatus"
        case provisionedReadCapacityAutoScalingSettings = "ProvisionedReadCapacityAutoScalingSettings"
        case provisionedReadCapacityUnits = "ProvisionedReadCapacityUnits"
        case provisionedWriteCapacityAutoScalingSettings = "ProvisionedWriteCapacityAutoScalingSettings"
        case provisionedWriteCapacityUnits = "ProvisionedWriteCapacityUnits"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let indexStatus = indexStatus {
            try encodeContainer.encode(indexStatus.rawValue, forKey: .indexStatus)
        }
        if let provisionedReadCapacityAutoScalingSettings = provisionedReadCapacityAutoScalingSettings {
            try encodeContainer.encode(provisionedReadCapacityAutoScalingSettings, forKey: .provisionedReadCapacityAutoScalingSettings)
        }
        if let provisionedReadCapacityUnits = provisionedReadCapacityUnits {
            try encodeContainer.encode(provisionedReadCapacityUnits, forKey: .provisionedReadCapacityUnits)
        }
        if let provisionedWriteCapacityAutoScalingSettings = provisionedWriteCapacityAutoScalingSettings {
            try encodeContainer.encode(provisionedWriteCapacityAutoScalingSettings, forKey: .provisionedWriteCapacityAutoScalingSettings)
        }
        if let provisionedWriteCapacityUnits = provisionedWriteCapacityUnits {
            try encodeContainer.encode(provisionedWriteCapacityUnits, forKey: .provisionedWriteCapacityUnits)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let indexStatusDecoded = try containerValues.decodeIfPresent(IndexStatus.self, forKey: .indexStatus)
        indexStatus = indexStatusDecoded
        let provisionedReadCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .provisionedReadCapacityUnits)
        provisionedReadCapacityUnits = provisionedReadCapacityUnitsDecoded
        let provisionedReadCapacityAutoScalingSettingsDecoded = try containerValues.decodeIfPresent(AutoScalingSettingsDescription.self, forKey: .provisionedReadCapacityAutoScalingSettings)
        provisionedReadCapacityAutoScalingSettings = provisionedReadCapacityAutoScalingSettingsDecoded
        let provisionedWriteCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .provisionedWriteCapacityUnits)
        provisionedWriteCapacityUnits = provisionedWriteCapacityUnitsDecoded
        let provisionedWriteCapacityAutoScalingSettingsDecoded = try containerValues.decodeIfPresent(AutoScalingSettingsDescription.self, forKey: .provisionedWriteCapacityAutoScalingSettings)
        provisionedWriteCapacityAutoScalingSettings = provisionedWriteCapacityAutoScalingSettingsDecoded
    }
}

extension ReplicaGlobalSecondaryIndexSettingsDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReplicaGlobalSecondaryIndexSettingsDescription(indexName: \(String(describing: indexName)), indexStatus: \(String(describing: indexStatus)), provisionedReadCapacityAutoScalingSettings: \(String(describing: provisionedReadCapacityAutoScalingSettings)), provisionedReadCapacityUnits: \(String(describing: provisionedReadCapacityUnits)), provisionedWriteCapacityAutoScalingSettings: \(String(describing: provisionedWriteCapacityAutoScalingSettings)), provisionedWriteCapacityUnits: \(String(describing: provisionedWriteCapacityUnits)))"}
}

/// <p>Represents the properties of a global secondary index.</p>
public struct ReplicaGlobalSecondaryIndexSettingsDescription: Equatable {
    /// <p>The name of the global secondary index. The name must be unique among all other indexes on this table.</p>
    public let indexName: String?
    /// <p>
    ///                The current status of the global secondary index:</p>
    ///             <ul>
    ///             <li>
    ///                   <p>
    ///                      <code>CREATING</code> - The global secondary index is being created.</p>
    ///                </li>
    ///             <li>
    ///                   <p>
    ///                      <code>UPDATING</code> - The global secondary index is being updated.</p>
    ///                </li>
    ///             <li>
    ///                   <p>
    ///                      <code>DELETING</code> - The global secondary index is being deleted.</p>
    ///                </li>
    ///             <li>
    ///                   <p>
    ///                      <code>ACTIVE</code> - The global secondary index is ready for use.</p>
    ///                </li>
    ///          </ul>
    public let indexStatus: IndexStatus?
    /// <p>Auto scaling settings for a global secondary index replica's read capacity units.</p>
    public let provisionedReadCapacityAutoScalingSettings: AutoScalingSettingsDescription?
    /// <p>The maximum number of strongly consistent reads consumed per second before DynamoDB returns a <code>ThrottlingException</code>.</p>
    public let provisionedReadCapacityUnits: Int?
    /// <p>Auto scaling settings for a global secondary index replica's write capacity
    ///          units.</p>
    public let provisionedWriteCapacityAutoScalingSettings: AutoScalingSettingsDescription?
    /// <p>The maximum number of writes consumed per second before DynamoDB returns a <code>ThrottlingException</code>.</p>
    public let provisionedWriteCapacityUnits: Int?

    public init (
        indexName: String? = nil,
        indexStatus: IndexStatus? = nil,
        provisionedReadCapacityAutoScalingSettings: AutoScalingSettingsDescription? = nil,
        provisionedReadCapacityUnits: Int? = nil,
        provisionedWriteCapacityAutoScalingSettings: AutoScalingSettingsDescription? = nil,
        provisionedWriteCapacityUnits: Int? = nil
    )
    {
        self.indexName = indexName
        self.indexStatus = indexStatus
        self.provisionedReadCapacityAutoScalingSettings = provisionedReadCapacityAutoScalingSettings
        self.provisionedReadCapacityUnits = provisionedReadCapacityUnits
        self.provisionedWriteCapacityAutoScalingSettings = provisionedWriteCapacityAutoScalingSettings
        self.provisionedWriteCapacityUnits = provisionedWriteCapacityUnits
    }
}

extension ReplicaGlobalSecondaryIndexSettingsUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case indexName = "IndexName"
        case provisionedReadCapacityAutoScalingSettingsUpdate = "ProvisionedReadCapacityAutoScalingSettingsUpdate"
        case provisionedReadCapacityUnits = "ProvisionedReadCapacityUnits"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let provisionedReadCapacityAutoScalingSettingsUpdate = provisionedReadCapacityAutoScalingSettingsUpdate {
            try encodeContainer.encode(provisionedReadCapacityAutoScalingSettingsUpdate, forKey: .provisionedReadCapacityAutoScalingSettingsUpdate)
        }
        if let provisionedReadCapacityUnits = provisionedReadCapacityUnits {
            try encodeContainer.encode(provisionedReadCapacityUnits, forKey: .provisionedReadCapacityUnits)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let provisionedReadCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .provisionedReadCapacityUnits)
        provisionedReadCapacityUnits = provisionedReadCapacityUnitsDecoded
        let provisionedReadCapacityAutoScalingSettingsUpdateDecoded = try containerValues.decodeIfPresent(AutoScalingSettingsUpdate.self, forKey: .provisionedReadCapacityAutoScalingSettingsUpdate)
        provisionedReadCapacityAutoScalingSettingsUpdate = provisionedReadCapacityAutoScalingSettingsUpdateDecoded
    }
}

extension ReplicaGlobalSecondaryIndexSettingsUpdate: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReplicaGlobalSecondaryIndexSettingsUpdate(indexName: \(String(describing: indexName)), provisionedReadCapacityAutoScalingSettingsUpdate: \(String(describing: provisionedReadCapacityAutoScalingSettingsUpdate)), provisionedReadCapacityUnits: \(String(describing: provisionedReadCapacityUnits)))"}
}

/// <p>Represents the settings of a global secondary index for a global table that will be modified.</p>
public struct ReplicaGlobalSecondaryIndexSettingsUpdate: Equatable {
    /// <p>The name of the global secondary index. The name must be unique among all other indexes on this table.</p>
    public let indexName: String?
    /// <p>Auto scaling settings for managing a global secondary index replica's read capacity
    ///          units.</p>
    public let provisionedReadCapacityAutoScalingSettingsUpdate: AutoScalingSettingsUpdate?
    /// <p>The maximum number of strongly consistent reads consumed per second before DynamoDB returns a <code>ThrottlingException</code>.</p>
    public let provisionedReadCapacityUnits: Int?

    public init (
        indexName: String? = nil,
        provisionedReadCapacityAutoScalingSettingsUpdate: AutoScalingSettingsUpdate? = nil,
        provisionedReadCapacityUnits: Int? = nil
    )
    {
        self.indexName = indexName
        self.provisionedReadCapacityAutoScalingSettingsUpdate = provisionedReadCapacityAutoScalingSettingsUpdate
        self.provisionedReadCapacityUnits = provisionedReadCapacityUnits
    }
}

extension ReplicaNotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReplicaNotFoundException(message: \(String(describing: message)))"}
}

extension ReplicaNotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ReplicaNotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified replica is no longer part of the global table.</p>
public struct ReplicaNotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ReplicaNotFoundExceptionBody: Equatable {
    public let message: String?
}

extension ReplicaNotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ReplicaSettingsDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case regionName = "RegionName"
        case replicaBillingModeSummary = "ReplicaBillingModeSummary"
        case replicaGlobalSecondaryIndexSettings = "ReplicaGlobalSecondaryIndexSettings"
        case replicaProvisionedReadCapacityAutoScalingSettings = "ReplicaProvisionedReadCapacityAutoScalingSettings"
        case replicaProvisionedReadCapacityUnits = "ReplicaProvisionedReadCapacityUnits"
        case replicaProvisionedWriteCapacityAutoScalingSettings = "ReplicaProvisionedWriteCapacityAutoScalingSettings"
        case replicaProvisionedWriteCapacityUnits = "ReplicaProvisionedWriteCapacityUnits"
        case replicaStatus = "ReplicaStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let regionName = regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
        if let replicaBillingModeSummary = replicaBillingModeSummary {
            try encodeContainer.encode(replicaBillingModeSummary, forKey: .replicaBillingModeSummary)
        }
        if let replicaGlobalSecondaryIndexSettings = replicaGlobalSecondaryIndexSettings {
            var replicaGlobalSecondaryIndexSettingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicaGlobalSecondaryIndexSettings)
            for replicaglobalsecondaryindexsettingsdescriptionlist0 in replicaGlobalSecondaryIndexSettings {
                try replicaGlobalSecondaryIndexSettingsContainer.encode(replicaglobalsecondaryindexsettingsdescriptionlist0)
            }
        }
        if let replicaProvisionedReadCapacityAutoScalingSettings = replicaProvisionedReadCapacityAutoScalingSettings {
            try encodeContainer.encode(replicaProvisionedReadCapacityAutoScalingSettings, forKey: .replicaProvisionedReadCapacityAutoScalingSettings)
        }
        if let replicaProvisionedReadCapacityUnits = replicaProvisionedReadCapacityUnits {
            try encodeContainer.encode(replicaProvisionedReadCapacityUnits, forKey: .replicaProvisionedReadCapacityUnits)
        }
        if let replicaProvisionedWriteCapacityAutoScalingSettings = replicaProvisionedWriteCapacityAutoScalingSettings {
            try encodeContainer.encode(replicaProvisionedWriteCapacityAutoScalingSettings, forKey: .replicaProvisionedWriteCapacityAutoScalingSettings)
        }
        if let replicaProvisionedWriteCapacityUnits = replicaProvisionedWriteCapacityUnits {
            try encodeContainer.encode(replicaProvisionedWriteCapacityUnits, forKey: .replicaProvisionedWriteCapacityUnits)
        }
        if let replicaStatus = replicaStatus {
            try encodeContainer.encode(replicaStatus.rawValue, forKey: .replicaStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .regionName)
        regionName = regionNameDecoded
        let replicaStatusDecoded = try containerValues.decodeIfPresent(ReplicaStatus.self, forKey: .replicaStatus)
        replicaStatus = replicaStatusDecoded
        let replicaBillingModeSummaryDecoded = try containerValues.decodeIfPresent(BillingModeSummary.self, forKey: .replicaBillingModeSummary)
        replicaBillingModeSummary = replicaBillingModeSummaryDecoded
        let replicaProvisionedReadCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .replicaProvisionedReadCapacityUnits)
        replicaProvisionedReadCapacityUnits = replicaProvisionedReadCapacityUnitsDecoded
        let replicaProvisionedReadCapacityAutoScalingSettingsDecoded = try containerValues.decodeIfPresent(AutoScalingSettingsDescription.self, forKey: .replicaProvisionedReadCapacityAutoScalingSettings)
        replicaProvisionedReadCapacityAutoScalingSettings = replicaProvisionedReadCapacityAutoScalingSettingsDecoded
        let replicaProvisionedWriteCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .replicaProvisionedWriteCapacityUnits)
        replicaProvisionedWriteCapacityUnits = replicaProvisionedWriteCapacityUnitsDecoded
        let replicaProvisionedWriteCapacityAutoScalingSettingsDecoded = try containerValues.decodeIfPresent(AutoScalingSettingsDescription.self, forKey: .replicaProvisionedWriteCapacityAutoScalingSettings)
        replicaProvisionedWriteCapacityAutoScalingSettings = replicaProvisionedWriteCapacityAutoScalingSettingsDecoded
        let replicaGlobalSecondaryIndexSettingsContainer = try containerValues.decodeIfPresent([ReplicaGlobalSecondaryIndexSettingsDescription?].self, forKey: .replicaGlobalSecondaryIndexSettings)
        var replicaGlobalSecondaryIndexSettingsDecoded0:[ReplicaGlobalSecondaryIndexSettingsDescription]? = nil
        if let replicaGlobalSecondaryIndexSettingsContainer = replicaGlobalSecondaryIndexSettingsContainer {
            replicaGlobalSecondaryIndexSettingsDecoded0 = [ReplicaGlobalSecondaryIndexSettingsDescription]()
            for structure0 in replicaGlobalSecondaryIndexSettingsContainer {
                if let structure0 = structure0 {
                    replicaGlobalSecondaryIndexSettingsDecoded0?.append(structure0)
                }
            }
        }
        replicaGlobalSecondaryIndexSettings = replicaGlobalSecondaryIndexSettingsDecoded0
    }
}

extension ReplicaSettingsDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReplicaSettingsDescription(regionName: \(String(describing: regionName)), replicaBillingModeSummary: \(String(describing: replicaBillingModeSummary)), replicaGlobalSecondaryIndexSettings: \(String(describing: replicaGlobalSecondaryIndexSettings)), replicaProvisionedReadCapacityAutoScalingSettings: \(String(describing: replicaProvisionedReadCapacityAutoScalingSettings)), replicaProvisionedReadCapacityUnits: \(String(describing: replicaProvisionedReadCapacityUnits)), replicaProvisionedWriteCapacityAutoScalingSettings: \(String(describing: replicaProvisionedWriteCapacityAutoScalingSettings)), replicaProvisionedWriteCapacityUnits: \(String(describing: replicaProvisionedWriteCapacityUnits)), replicaStatus: \(String(describing: replicaStatus)))"}
}

/// <p>Represents the properties of a replica.</p>
public struct ReplicaSettingsDescription: Equatable {
    /// <p>The Region name of the replica.</p>
    public let regionName: String?
    /// <p>The read/write capacity mode of the replica.</p>
    public let replicaBillingModeSummary: BillingModeSummary?
    /// <p>Replica global secondary index settings for the global table.</p>
    public let replicaGlobalSecondaryIndexSettings: [ReplicaGlobalSecondaryIndexSettingsDescription]?
    /// <p>Auto scaling settings for a global table replica's read capacity units.</p>
    public let replicaProvisionedReadCapacityAutoScalingSettings: AutoScalingSettingsDescription?
    /// <p>The maximum number of strongly consistent reads consumed per second before DynamoDB returns a <code>ThrottlingException</code>.
    ///         For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput">Specifying Read and Write
    ///         Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.
    ///      </p>
    public let replicaProvisionedReadCapacityUnits: Int?
    /// <p>Auto scaling settings for a global table replica's write capacity units.</p>
    public let replicaProvisionedWriteCapacityAutoScalingSettings: AutoScalingSettingsDescription?
    /// <p>The maximum number of writes consumed per second before DynamoDB returns a <code>ThrottlingException</code>.
    ///         For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput">Specifying Read and Write
    ///         Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let replicaProvisionedWriteCapacityUnits: Int?
    /// <p>The current state of the Region:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CREATING</code> - The Region is being created.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UPDATING</code> - The Region is being updated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DELETING</code> - The Region is being deleted.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ACTIVE</code> - The Region is ready for use.</p>
    ///             </li>
    ///          </ul>
    public let replicaStatus: ReplicaStatus?

    public init (
        regionName: String? = nil,
        replicaBillingModeSummary: BillingModeSummary? = nil,
        replicaGlobalSecondaryIndexSettings: [ReplicaGlobalSecondaryIndexSettingsDescription]? = nil,
        replicaProvisionedReadCapacityAutoScalingSettings: AutoScalingSettingsDescription? = nil,
        replicaProvisionedReadCapacityUnits: Int? = nil,
        replicaProvisionedWriteCapacityAutoScalingSettings: AutoScalingSettingsDescription? = nil,
        replicaProvisionedWriteCapacityUnits: Int? = nil,
        replicaStatus: ReplicaStatus? = nil
    )
    {
        self.regionName = regionName
        self.replicaBillingModeSummary = replicaBillingModeSummary
        self.replicaGlobalSecondaryIndexSettings = replicaGlobalSecondaryIndexSettings
        self.replicaProvisionedReadCapacityAutoScalingSettings = replicaProvisionedReadCapacityAutoScalingSettings
        self.replicaProvisionedReadCapacityUnits = replicaProvisionedReadCapacityUnits
        self.replicaProvisionedWriteCapacityAutoScalingSettings = replicaProvisionedWriteCapacityAutoScalingSettings
        self.replicaProvisionedWriteCapacityUnits = replicaProvisionedWriteCapacityUnits
        self.replicaStatus = replicaStatus
    }
}

extension ReplicaSettingsUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case regionName = "RegionName"
        case replicaGlobalSecondaryIndexSettingsUpdate = "ReplicaGlobalSecondaryIndexSettingsUpdate"
        case replicaProvisionedReadCapacityAutoScalingSettingsUpdate = "ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate"
        case replicaProvisionedReadCapacityUnits = "ReplicaProvisionedReadCapacityUnits"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let regionName = regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
        if let replicaGlobalSecondaryIndexSettingsUpdate = replicaGlobalSecondaryIndexSettingsUpdate {
            var replicaGlobalSecondaryIndexSettingsUpdateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicaGlobalSecondaryIndexSettingsUpdate)
            for replicaglobalsecondaryindexsettingsupdatelist0 in replicaGlobalSecondaryIndexSettingsUpdate {
                try replicaGlobalSecondaryIndexSettingsUpdateContainer.encode(replicaglobalsecondaryindexsettingsupdatelist0)
            }
        }
        if let replicaProvisionedReadCapacityAutoScalingSettingsUpdate = replicaProvisionedReadCapacityAutoScalingSettingsUpdate {
            try encodeContainer.encode(replicaProvisionedReadCapacityAutoScalingSettingsUpdate, forKey: .replicaProvisionedReadCapacityAutoScalingSettingsUpdate)
        }
        if let replicaProvisionedReadCapacityUnits = replicaProvisionedReadCapacityUnits {
            try encodeContainer.encode(replicaProvisionedReadCapacityUnits, forKey: .replicaProvisionedReadCapacityUnits)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .regionName)
        regionName = regionNameDecoded
        let replicaProvisionedReadCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .replicaProvisionedReadCapacityUnits)
        replicaProvisionedReadCapacityUnits = replicaProvisionedReadCapacityUnitsDecoded
        let replicaProvisionedReadCapacityAutoScalingSettingsUpdateDecoded = try containerValues.decodeIfPresent(AutoScalingSettingsUpdate.self, forKey: .replicaProvisionedReadCapacityAutoScalingSettingsUpdate)
        replicaProvisionedReadCapacityAutoScalingSettingsUpdate = replicaProvisionedReadCapacityAutoScalingSettingsUpdateDecoded
        let replicaGlobalSecondaryIndexSettingsUpdateContainer = try containerValues.decodeIfPresent([ReplicaGlobalSecondaryIndexSettingsUpdate?].self, forKey: .replicaGlobalSecondaryIndexSettingsUpdate)
        var replicaGlobalSecondaryIndexSettingsUpdateDecoded0:[ReplicaGlobalSecondaryIndexSettingsUpdate]? = nil
        if let replicaGlobalSecondaryIndexSettingsUpdateContainer = replicaGlobalSecondaryIndexSettingsUpdateContainer {
            replicaGlobalSecondaryIndexSettingsUpdateDecoded0 = [ReplicaGlobalSecondaryIndexSettingsUpdate]()
            for structure0 in replicaGlobalSecondaryIndexSettingsUpdateContainer {
                if let structure0 = structure0 {
                    replicaGlobalSecondaryIndexSettingsUpdateDecoded0?.append(structure0)
                }
            }
        }
        replicaGlobalSecondaryIndexSettingsUpdate = replicaGlobalSecondaryIndexSettingsUpdateDecoded0
    }
}

extension ReplicaSettingsUpdate: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReplicaSettingsUpdate(regionName: \(String(describing: regionName)), replicaGlobalSecondaryIndexSettingsUpdate: \(String(describing: replicaGlobalSecondaryIndexSettingsUpdate)), replicaProvisionedReadCapacityAutoScalingSettingsUpdate: \(String(describing: replicaProvisionedReadCapacityAutoScalingSettingsUpdate)), replicaProvisionedReadCapacityUnits: \(String(describing: replicaProvisionedReadCapacityUnits)))"}
}

/// <p>Represents the settings for a global table in a Region that will be modified.</p>
public struct ReplicaSettingsUpdate: Equatable {
    /// <p>The Region of the replica to be added.</p>
    public let regionName: String?
    /// <p>Represents the settings of a global secondary index for a global table that will be modified.</p>
    public let replicaGlobalSecondaryIndexSettingsUpdate: [ReplicaGlobalSecondaryIndexSettingsUpdate]?
    /// <p>Auto scaling settings for managing a global table replica's read capacity units.</p>
    public let replicaProvisionedReadCapacityAutoScalingSettingsUpdate: AutoScalingSettingsUpdate?
    /// <p>The maximum number of strongly consistent reads consumed per second before DynamoDB returns a <code>ThrottlingException</code>.
    ///         For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput">Specifying Read and Write
    ///         Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.
    ///      </p>
    public let replicaProvisionedReadCapacityUnits: Int?

    public init (
        regionName: String? = nil,
        replicaGlobalSecondaryIndexSettingsUpdate: [ReplicaGlobalSecondaryIndexSettingsUpdate]? = nil,
        replicaProvisionedReadCapacityAutoScalingSettingsUpdate: AutoScalingSettingsUpdate? = nil,
        replicaProvisionedReadCapacityUnits: Int? = nil
    )
    {
        self.regionName = regionName
        self.replicaGlobalSecondaryIndexSettingsUpdate = replicaGlobalSecondaryIndexSettingsUpdate
        self.replicaProvisionedReadCapacityAutoScalingSettingsUpdate = replicaProvisionedReadCapacityAutoScalingSettingsUpdate
        self.replicaProvisionedReadCapacityUnits = replicaProvisionedReadCapacityUnits
    }
}

public enum ReplicaStatus {
    case active
    case creating
    case creationFailed
    case deleting
    case inaccessibleEncryptionCredentials
    case regionDisabled
    case updating
    case sdkUnknown(String)
}

extension ReplicaStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ReplicaStatus] {
        return [
            .active,
            .creating,
            .creationFailed,
            .deleting,
            .inaccessibleEncryptionCredentials,
            .regionDisabled,
            .updating,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .active: return "ACTIVE"
        case .creating: return "CREATING"
        case .creationFailed: return "CREATION_FAILED"
        case .deleting: return "DELETING"
        case .inaccessibleEncryptionCredentials: return "INACCESSIBLE_ENCRYPTION_CREDENTIALS"
        case .regionDisabled: return "REGION_DISABLED"
        case .updating: return "UPDATING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ReplicaStatus(rawValue: rawValue) ?? ReplicaStatus.sdkUnknown(rawValue)
    }
}

extension ReplicaUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case create = "Create"
        case delete = "Delete"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let create = create {
            try encodeContainer.encode(create, forKey: .create)
        }
        if let delete = delete {
            try encodeContainer.encode(delete, forKey: .delete)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createDecoded = try containerValues.decodeIfPresent(CreateReplicaAction.self, forKey: .create)
        create = createDecoded
        let deleteDecoded = try containerValues.decodeIfPresent(DeleteReplicaAction.self, forKey: .delete)
        delete = deleteDecoded
    }
}

extension ReplicaUpdate: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReplicaUpdate(create: \(String(describing: create)), delete: \(String(describing: delete)))"}
}

/// <p>Represents one of the following:</p>
///          <ul>
///             <li>
///                <p>A new replica to be added to an existing global table.</p>
///             </li>
///             <li>
///                <p>New parameters for an existing replica.</p>
///             </li>
///             <li>
///                <p>An existing replica to be removed from an existing global table.</p>
///             </li>
///          </ul>
public struct ReplicaUpdate: Equatable {
    /// <p>The parameters required for creating a replica on an existing global table.</p>
    public let create: CreateReplicaAction?
    /// <p>The name of the existing replica to be removed.</p>
    public let delete: DeleteReplicaAction?

    public init (
        create: CreateReplicaAction? = nil,
        delete: DeleteReplicaAction? = nil
    )
    {
        self.create = create
        self.delete = delete
    }
}

extension ReplicationGroupUpdate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case create = "Create"
        case delete = "Delete"
        case update = "Update"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let create = create {
            try encodeContainer.encode(create, forKey: .create)
        }
        if let delete = delete {
            try encodeContainer.encode(delete, forKey: .delete)
        }
        if let update = update {
            try encodeContainer.encode(update, forKey: .update)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createDecoded = try containerValues.decodeIfPresent(CreateReplicationGroupMemberAction.self, forKey: .create)
        create = createDecoded
        let updateDecoded = try containerValues.decodeIfPresent(UpdateReplicationGroupMemberAction.self, forKey: .update)
        update = updateDecoded
        let deleteDecoded = try containerValues.decodeIfPresent(DeleteReplicationGroupMemberAction.self, forKey: .delete)
        delete = deleteDecoded
    }
}

extension ReplicationGroupUpdate: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ReplicationGroupUpdate(create: \(String(describing: create)), delete: \(String(describing: delete)), update: \(String(describing: update)))"}
}

/// <p>Represents one of the following:</p>
///          <ul>
///             <li>
///                <p>A new replica to be added to an existing regional table or global table. This
///                request invokes the <code>CreateTableReplica</code> action in the destination
///                Region.</p>
///             </li>
///             <li>
///                <p>New parameters for an existing replica. This request invokes the
///                <code>UpdateTable</code> action in the destination Region.</p>
///             </li>
///             <li>
///                <p>An existing replica to be deleted. The request invokes the
///                <code>DeleteTableReplica</code> action in the destination Region, deleting the
///                replica and all if its items in the destination Region.</p>
///             </li>
///          </ul>
public struct ReplicationGroupUpdate: Equatable {
    /// <p>The parameters required for creating a replica for the table.</p>
    public let create: CreateReplicationGroupMemberAction?
    /// <p>The parameters required for deleting a replica for the table.</p>
    public let delete: DeleteReplicationGroupMemberAction?
    /// <p>The parameters required for updating a replica for the table.</p>
    public let update: UpdateReplicationGroupMemberAction?

    public init (
        create: CreateReplicationGroupMemberAction? = nil,
        delete: DeleteReplicationGroupMemberAction? = nil,
        update: UpdateReplicationGroupMemberAction? = nil
    )
    {
        self.create = create
        self.delete = delete
        self.update = update
    }
}

extension RequestLimitExceeded: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RequestLimitExceeded(message: \(String(describing: message)))"}
}

extension RequestLimitExceeded: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: RequestLimitExceededBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Throughput exceeds the current throughput quota for your account. Please contact AWS Support at <a href="https://aws.amazon.com/support">AWS Support</a> to request a quota increase.</p>
public struct RequestLimitExceeded: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct RequestLimitExceededBody: Equatable {
    public let message: String?
}

extension RequestLimitExceededBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceInUseException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResourceInUseException(message: \(String(describing: message)))"}
}

extension ResourceInUseException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ResourceInUseExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The operation conflicts with the resource's availability. For example, you attempted to
///       recreate an existing table, or tried to delete a table currently in the <code>CREATING</code>
///       state.</p>
public struct ResourceInUseException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The resource which is being attempted to be changed is in use.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceInUseExceptionBody: Equatable {
    public let message: String?
}

extension ResourceInUseExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResourceNotFoundException(message: \(String(describing: message)))"}
}

extension ResourceNotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The operation tried to access a nonexistent table or index. The resource might not be specified
///       correctly, or its status might not be <code>ACTIVE</code>.</p>
public struct ResourceNotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The resource which is being requested does not exist.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Equatable {
    public let message: String?
}

extension ResourceNotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RestoreSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case restoreDateTime = "RestoreDateTime"
        case restoreInProgress = "RestoreInProgress"
        case sourceBackupArn = "SourceBackupArn"
        case sourceTableArn = "SourceTableArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let restoreDateTime = restoreDateTime {
            try encodeContainer.encode(restoreDateTime.timeIntervalSince1970, forKey: .restoreDateTime)
        }
        if let restoreInProgress = restoreInProgress {
            try encodeContainer.encode(restoreInProgress, forKey: .restoreInProgress)
        }
        if let sourceBackupArn = sourceBackupArn {
            try encodeContainer.encode(sourceBackupArn, forKey: .sourceBackupArn)
        }
        if let sourceTableArn = sourceTableArn {
            try encodeContainer.encode(sourceTableArn, forKey: .sourceTableArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceBackupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceBackupArn)
        sourceBackupArn = sourceBackupArnDecoded
        let sourceTableArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceTableArn)
        sourceTableArn = sourceTableArnDecoded
        let restoreDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .restoreDateTime)
        restoreDateTime = restoreDateTimeDecoded
        let restoreInProgressDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .restoreInProgress)
        restoreInProgress = restoreInProgressDecoded
    }
}

extension RestoreSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RestoreSummary(restoreDateTime: \(String(describing: restoreDateTime)), restoreInProgress: \(String(describing: restoreInProgress)), sourceBackupArn: \(String(describing: sourceBackupArn)), sourceTableArn: \(String(describing: sourceTableArn)))"}
}

/// <p>Contains details for the restore.</p>
public struct RestoreSummary: Equatable {
    /// <p>Point in time or source backup time.</p>
    public let restoreDateTime: Date?
    /// <p>Indicates if a restore is in progress or not.</p>
    public let restoreInProgress: Bool?
    /// <p>The Amazon Resource Name (ARN) of the backup from which the table was restored.</p>
    public let sourceBackupArn: String?
    /// <p>The ARN of the source table of the backup that is being restored.</p>
    public let sourceTableArn: String?

    public init (
        restoreDateTime: Date? = nil,
        restoreInProgress: Bool? = nil,
        sourceBackupArn: String? = nil,
        sourceTableArn: String? = nil
    )
    {
        self.restoreDateTime = restoreDateTime
        self.restoreInProgress = restoreInProgress
        self.sourceBackupArn = sourceBackupArn
        self.sourceTableArn = sourceTableArn
    }
}

public struct RestoreTableFromBackupInputBodyMiddleware: Middleware {
    public let id: String = "RestoreTableFromBackupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RestoreTableFromBackupInput>,
                  next: H) -> Swift.Result<OperationOutput<RestoreTableFromBackupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RestoreTableFromBackupInput>
    public typealias MOutput = OperationOutput<RestoreTableFromBackupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RestoreTableFromBackupOutputError>
}

extension RestoreTableFromBackupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RestoreTableFromBackupInput(backupArn: \(String(describing: backupArn)), billingModeOverride: \(String(describing: billingModeOverride)), globalSecondaryIndexOverride: \(String(describing: globalSecondaryIndexOverride)), localSecondaryIndexOverride: \(String(describing: localSecondaryIndexOverride)), provisionedThroughputOverride: \(String(describing: provisionedThroughputOverride)), sSESpecificationOverride: \(String(describing: sSESpecificationOverride)), targetTableName: \(String(describing: targetTableName)))"}
}

extension RestoreTableFromBackupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case backupArn = "BackupArn"
        case billingModeOverride = "BillingModeOverride"
        case globalSecondaryIndexOverride = "GlobalSecondaryIndexOverride"
        case localSecondaryIndexOverride = "LocalSecondaryIndexOverride"
        case provisionedThroughputOverride = "ProvisionedThroughputOverride"
        case sSESpecificationOverride = "SSESpecificationOverride"
        case targetTableName = "TargetTableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupArn = backupArn {
            try encodeContainer.encode(backupArn, forKey: .backupArn)
        }
        if let billingModeOverride = billingModeOverride {
            try encodeContainer.encode(billingModeOverride.rawValue, forKey: .billingModeOverride)
        }
        if let globalSecondaryIndexOverride = globalSecondaryIndexOverride {
            var globalSecondaryIndexOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexOverride)
            for globalsecondaryindexlist0 in globalSecondaryIndexOverride {
                try globalSecondaryIndexOverrideContainer.encode(globalsecondaryindexlist0)
            }
        }
        if let localSecondaryIndexOverride = localSecondaryIndexOverride {
            var localSecondaryIndexOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .localSecondaryIndexOverride)
            for localsecondaryindexlist0 in localSecondaryIndexOverride {
                try localSecondaryIndexOverrideContainer.encode(localsecondaryindexlist0)
            }
        }
        if let provisionedThroughputOverride = provisionedThroughputOverride {
            try encodeContainer.encode(provisionedThroughputOverride, forKey: .provisionedThroughputOverride)
        }
        if let sSESpecificationOverride = sSESpecificationOverride {
            try encodeContainer.encode(sSESpecificationOverride, forKey: .sSESpecificationOverride)
        }
        if let targetTableName = targetTableName {
            try encodeContainer.encode(targetTableName, forKey: .targetTableName)
        }
    }
}

public struct RestoreTableFromBackupInputHeadersMiddleware: Middleware {
    public let id: String = "RestoreTableFromBackupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RestoreTableFromBackupInput>,
                  next: H) -> Swift.Result<OperationOutput<RestoreTableFromBackupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RestoreTableFromBackupInput>
    public typealias MOutput = OperationOutput<RestoreTableFromBackupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RestoreTableFromBackupOutputError>
}

public struct RestoreTableFromBackupInputQueryItemMiddleware: Middleware {
    public let id: String = "RestoreTableFromBackupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RestoreTableFromBackupInput>,
                  next: H) -> Swift.Result<OperationOutput<RestoreTableFromBackupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RestoreTableFromBackupInput>
    public typealias MOutput = OperationOutput<RestoreTableFromBackupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RestoreTableFromBackupOutputError>
}

public struct RestoreTableFromBackupInput: Equatable {
    /// <p>The Amazon Resource Name (ARN) associated with the backup.</p>
    public let backupArn: String?
    /// <p>The billing mode of the restored table.</p>
    public let billingModeOverride: BillingMode?
    /// <p>List of global secondary indexes for the restored table. The indexes
    ///         provided should match existing secondary indexes. You can choose to exclude
    ///         some or all of the indexes at the time of restore.</p>
    public let globalSecondaryIndexOverride: [GlobalSecondaryIndex]?
    /// <p>List of local secondary indexes for the restored table. The indexes
    ///         provided should match existing secondary indexes. You can choose to exclude
    ///         some or all of the indexes at the time of restore.</p>
    public let localSecondaryIndexOverride: [LocalSecondaryIndex]?
    /// <p>Provisioned throughput settings for the restored table.</p>
    public let provisionedThroughputOverride: ProvisionedThroughput?
    /// <p>The new server-side encryption settings for the restored table.</p>
    public let sSESpecificationOverride: SSESpecification?
    /// <p>The name of the new table to which the backup must be restored.</p>
    public let targetTableName: String?

    public init (
        backupArn: String? = nil,
        billingModeOverride: BillingMode? = nil,
        globalSecondaryIndexOverride: [GlobalSecondaryIndex]? = nil,
        localSecondaryIndexOverride: [LocalSecondaryIndex]? = nil,
        provisionedThroughputOverride: ProvisionedThroughput? = nil,
        sSESpecificationOverride: SSESpecification? = nil,
        targetTableName: String? = nil
    )
    {
        self.backupArn = backupArn
        self.billingModeOverride = billingModeOverride
        self.globalSecondaryIndexOverride = globalSecondaryIndexOverride
        self.localSecondaryIndexOverride = localSecondaryIndexOverride
        self.provisionedThroughputOverride = provisionedThroughputOverride
        self.sSESpecificationOverride = sSESpecificationOverride
        self.targetTableName = targetTableName
    }
}

struct RestoreTableFromBackupInputBody: Equatable {
    public let targetTableName: String?
    public let backupArn: String?
    public let billingModeOverride: BillingMode?
    public let globalSecondaryIndexOverride: [GlobalSecondaryIndex]?
    public let localSecondaryIndexOverride: [LocalSecondaryIndex]?
    public let provisionedThroughputOverride: ProvisionedThroughput?
    public let sSESpecificationOverride: SSESpecification?
}

extension RestoreTableFromBackupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case backupArn = "BackupArn"
        case billingModeOverride = "BillingModeOverride"
        case globalSecondaryIndexOverride = "GlobalSecondaryIndexOverride"
        case localSecondaryIndexOverride = "LocalSecondaryIndexOverride"
        case provisionedThroughputOverride = "ProvisionedThroughputOverride"
        case sSESpecificationOverride = "SSESpecificationOverride"
        case targetTableName = "TargetTableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetTableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetTableName)
        targetTableName = targetTableNameDecoded
        let backupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .backupArn)
        backupArn = backupArnDecoded
        let billingModeOverrideDecoded = try containerValues.decodeIfPresent(BillingMode.self, forKey: .billingModeOverride)
        billingModeOverride = billingModeOverrideDecoded
        let globalSecondaryIndexOverrideContainer = try containerValues.decodeIfPresent([GlobalSecondaryIndex?].self, forKey: .globalSecondaryIndexOverride)
        var globalSecondaryIndexOverrideDecoded0:[GlobalSecondaryIndex]? = nil
        if let globalSecondaryIndexOverrideContainer = globalSecondaryIndexOverrideContainer {
            globalSecondaryIndexOverrideDecoded0 = [GlobalSecondaryIndex]()
            for structure0 in globalSecondaryIndexOverrideContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexOverrideDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexOverride = globalSecondaryIndexOverrideDecoded0
        let localSecondaryIndexOverrideContainer = try containerValues.decodeIfPresent([LocalSecondaryIndex?].self, forKey: .localSecondaryIndexOverride)
        var localSecondaryIndexOverrideDecoded0:[LocalSecondaryIndex]? = nil
        if let localSecondaryIndexOverrideContainer = localSecondaryIndexOverrideContainer {
            localSecondaryIndexOverrideDecoded0 = [LocalSecondaryIndex]()
            for structure0 in localSecondaryIndexOverrideContainer {
                if let structure0 = structure0 {
                    localSecondaryIndexOverrideDecoded0?.append(structure0)
                }
            }
        }
        localSecondaryIndexOverride = localSecondaryIndexOverrideDecoded0
        let provisionedThroughputOverrideDecoded = try containerValues.decodeIfPresent(ProvisionedThroughput.self, forKey: .provisionedThroughputOverride)
        provisionedThroughputOverride = provisionedThroughputOverrideDecoded
        let sSESpecificationOverrideDecoded = try containerValues.decodeIfPresent(SSESpecification.self, forKey: .sSESpecificationOverride)
        sSESpecificationOverride = sSESpecificationOverrideDecoded
    }
}

extension RestoreTableFromBackupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RestoreTableFromBackupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BackupInUseException" : self = .backupInUseException(try BackupInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BackupNotFoundException" : self = .backupNotFoundException(try BackupNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TableAlreadyExistsException" : self = .tableAlreadyExistsException(try TableAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TableInUseException" : self = .tableInUseException(try TableInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RestoreTableFromBackupOutputError: Equatable {
    case backupInUseException(BackupInUseException)
    case backupNotFoundException(BackupNotFoundException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case tableAlreadyExistsException(TableAlreadyExistsException)
    case tableInUseException(TableInUseException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RestoreTableFromBackupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RestoreTableFromBackupOutputResponse(tableDescription: \(String(describing: tableDescription)))"}
}

extension RestoreTableFromBackupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: RestoreTableFromBackupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.tableDescription = output.tableDescription
        } else {
            self.tableDescription = nil
        }
    }
}

public struct RestoreTableFromBackupOutputResponse: Equatable {
    /// <p>The description of the table created from an existing backup.</p>
    public let tableDescription: TableDescription?

    public init (
        tableDescription: TableDescription? = nil
    )
    {
        self.tableDescription = tableDescription
    }
}

struct RestoreTableFromBackupOutputResponseBody: Equatable {
    public let tableDescription: TableDescription?
}

extension RestoreTableFromBackupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tableDescription = "TableDescription"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableDescriptionDecoded = try containerValues.decodeIfPresent(TableDescription.self, forKey: .tableDescription)
        tableDescription = tableDescriptionDecoded
    }
}

public struct RestoreTableToPointInTimeInputBodyMiddleware: Middleware {
    public let id: String = "RestoreTableToPointInTimeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RestoreTableToPointInTimeInput>,
                  next: H) -> Swift.Result<OperationOutput<RestoreTableToPointInTimeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RestoreTableToPointInTimeInput>
    public typealias MOutput = OperationOutput<RestoreTableToPointInTimeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RestoreTableToPointInTimeOutputError>
}

extension RestoreTableToPointInTimeInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RestoreTableToPointInTimeInput(billingModeOverride: \(String(describing: billingModeOverride)), globalSecondaryIndexOverride: \(String(describing: globalSecondaryIndexOverride)), localSecondaryIndexOverride: \(String(describing: localSecondaryIndexOverride)), provisionedThroughputOverride: \(String(describing: provisionedThroughputOverride)), restoreDateTime: \(String(describing: restoreDateTime)), sSESpecificationOverride: \(String(describing: sSESpecificationOverride)), sourceTableArn: \(String(describing: sourceTableArn)), sourceTableName: \(String(describing: sourceTableName)), targetTableName: \(String(describing: targetTableName)), useLatestRestorableTime: \(String(describing: useLatestRestorableTime)))"}
}

extension RestoreTableToPointInTimeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case billingModeOverride = "BillingModeOverride"
        case globalSecondaryIndexOverride = "GlobalSecondaryIndexOverride"
        case localSecondaryIndexOverride = "LocalSecondaryIndexOverride"
        case provisionedThroughputOverride = "ProvisionedThroughputOverride"
        case restoreDateTime = "RestoreDateTime"
        case sSESpecificationOverride = "SSESpecificationOverride"
        case sourceTableArn = "SourceTableArn"
        case sourceTableName = "SourceTableName"
        case targetTableName = "TargetTableName"
        case useLatestRestorableTime = "UseLatestRestorableTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let billingModeOverride = billingModeOverride {
            try encodeContainer.encode(billingModeOverride.rawValue, forKey: .billingModeOverride)
        }
        if let globalSecondaryIndexOverride = globalSecondaryIndexOverride {
            var globalSecondaryIndexOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexOverride)
            for globalsecondaryindexlist0 in globalSecondaryIndexOverride {
                try globalSecondaryIndexOverrideContainer.encode(globalsecondaryindexlist0)
            }
        }
        if let localSecondaryIndexOverride = localSecondaryIndexOverride {
            var localSecondaryIndexOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .localSecondaryIndexOverride)
            for localsecondaryindexlist0 in localSecondaryIndexOverride {
                try localSecondaryIndexOverrideContainer.encode(localsecondaryindexlist0)
            }
        }
        if let provisionedThroughputOverride = provisionedThroughputOverride {
            try encodeContainer.encode(provisionedThroughputOverride, forKey: .provisionedThroughputOverride)
        }
        if let restoreDateTime = restoreDateTime {
            try encodeContainer.encode(restoreDateTime.timeIntervalSince1970, forKey: .restoreDateTime)
        }
        if let sSESpecificationOverride = sSESpecificationOverride {
            try encodeContainer.encode(sSESpecificationOverride, forKey: .sSESpecificationOverride)
        }
        if let sourceTableArn = sourceTableArn {
            try encodeContainer.encode(sourceTableArn, forKey: .sourceTableArn)
        }
        if let sourceTableName = sourceTableName {
            try encodeContainer.encode(sourceTableName, forKey: .sourceTableName)
        }
        if let targetTableName = targetTableName {
            try encodeContainer.encode(targetTableName, forKey: .targetTableName)
        }
        if let useLatestRestorableTime = useLatestRestorableTime {
            try encodeContainer.encode(useLatestRestorableTime, forKey: .useLatestRestorableTime)
        }
    }
}

public struct RestoreTableToPointInTimeInputHeadersMiddleware: Middleware {
    public let id: String = "RestoreTableToPointInTimeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RestoreTableToPointInTimeInput>,
                  next: H) -> Swift.Result<OperationOutput<RestoreTableToPointInTimeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RestoreTableToPointInTimeInput>
    public typealias MOutput = OperationOutput<RestoreTableToPointInTimeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RestoreTableToPointInTimeOutputError>
}

public struct RestoreTableToPointInTimeInputQueryItemMiddleware: Middleware {
    public let id: String = "RestoreTableToPointInTimeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RestoreTableToPointInTimeInput>,
                  next: H) -> Swift.Result<OperationOutput<RestoreTableToPointInTimeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RestoreTableToPointInTimeInput>
    public typealias MOutput = OperationOutput<RestoreTableToPointInTimeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RestoreTableToPointInTimeOutputError>
}

public struct RestoreTableToPointInTimeInput: Equatable {
    /// <p>The billing mode of the restored table.</p>
    public let billingModeOverride: BillingMode?
    /// <p>List of global secondary indexes for the restored table. The indexes
    ///         provided should match existing secondary indexes. You can choose to exclude
    ///         some or all of the indexes at the time of restore.</p>
    public let globalSecondaryIndexOverride: [GlobalSecondaryIndex]?
    /// <p>List of local secondary indexes for the restored table. The indexes
    ///         provided should match existing secondary indexes. You can choose to exclude
    ///         some or all of the indexes at the time of restore.</p>
    public let localSecondaryIndexOverride: [LocalSecondaryIndex]?
    /// <p>Provisioned throughput settings for the restored table.</p>
    public let provisionedThroughputOverride: ProvisionedThroughput?
    /// <p>Time in the past to restore the table to.</p>
    public let restoreDateTime: Date?
    /// <p>The new server-side encryption settings for the restored table.</p>
    public let sSESpecificationOverride: SSESpecification?
    /// <p>The DynamoDB table that will be restored. This value is an Amazon
    ///             Resource Name (ARN).</p>
    public let sourceTableArn: String?
    /// <p>Name of the source table that is being restored.</p>
    public let sourceTableName: String?
    /// <p>The name of the new table to which it must be restored to.</p>
    public let targetTableName: String?
    /// <p>Restore the table to the latest possible time. <code>LatestRestorableDateTime</code>
    ///         is typically 5 minutes before the current time. </p>
    public let useLatestRestorableTime: Bool?

    public init (
        billingModeOverride: BillingMode? = nil,
        globalSecondaryIndexOverride: [GlobalSecondaryIndex]? = nil,
        localSecondaryIndexOverride: [LocalSecondaryIndex]? = nil,
        provisionedThroughputOverride: ProvisionedThroughput? = nil,
        restoreDateTime: Date? = nil,
        sSESpecificationOverride: SSESpecification? = nil,
        sourceTableArn: String? = nil,
        sourceTableName: String? = nil,
        targetTableName: String? = nil,
        useLatestRestorableTime: Bool? = nil
    )
    {
        self.billingModeOverride = billingModeOverride
        self.globalSecondaryIndexOverride = globalSecondaryIndexOverride
        self.localSecondaryIndexOverride = localSecondaryIndexOverride
        self.provisionedThroughputOverride = provisionedThroughputOverride
        self.restoreDateTime = restoreDateTime
        self.sSESpecificationOverride = sSESpecificationOverride
        self.sourceTableArn = sourceTableArn
        self.sourceTableName = sourceTableName
        self.targetTableName = targetTableName
        self.useLatestRestorableTime = useLatestRestorableTime
    }
}

struct RestoreTableToPointInTimeInputBody: Equatable {
    public let sourceTableArn: String?
    public let sourceTableName: String?
    public let targetTableName: String?
    public let useLatestRestorableTime: Bool?
    public let restoreDateTime: Date?
    public let billingModeOverride: BillingMode?
    public let globalSecondaryIndexOverride: [GlobalSecondaryIndex]?
    public let localSecondaryIndexOverride: [LocalSecondaryIndex]?
    public let provisionedThroughputOverride: ProvisionedThroughput?
    public let sSESpecificationOverride: SSESpecification?
}

extension RestoreTableToPointInTimeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case billingModeOverride = "BillingModeOverride"
        case globalSecondaryIndexOverride = "GlobalSecondaryIndexOverride"
        case localSecondaryIndexOverride = "LocalSecondaryIndexOverride"
        case provisionedThroughputOverride = "ProvisionedThroughputOverride"
        case restoreDateTime = "RestoreDateTime"
        case sSESpecificationOverride = "SSESpecificationOverride"
        case sourceTableArn = "SourceTableArn"
        case sourceTableName = "SourceTableName"
        case targetTableName = "TargetTableName"
        case useLatestRestorableTime = "UseLatestRestorableTime"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceTableArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceTableArn)
        sourceTableArn = sourceTableArnDecoded
        let sourceTableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceTableName)
        sourceTableName = sourceTableNameDecoded
        let targetTableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetTableName)
        targetTableName = targetTableNameDecoded
        let useLatestRestorableTimeDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .useLatestRestorableTime)
        useLatestRestorableTime = useLatestRestorableTimeDecoded
        let restoreDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .restoreDateTime)
        restoreDateTime = restoreDateTimeDecoded
        let billingModeOverrideDecoded = try containerValues.decodeIfPresent(BillingMode.self, forKey: .billingModeOverride)
        billingModeOverride = billingModeOverrideDecoded
        let globalSecondaryIndexOverrideContainer = try containerValues.decodeIfPresent([GlobalSecondaryIndex?].self, forKey: .globalSecondaryIndexOverride)
        var globalSecondaryIndexOverrideDecoded0:[GlobalSecondaryIndex]? = nil
        if let globalSecondaryIndexOverrideContainer = globalSecondaryIndexOverrideContainer {
            globalSecondaryIndexOverrideDecoded0 = [GlobalSecondaryIndex]()
            for structure0 in globalSecondaryIndexOverrideContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexOverrideDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexOverride = globalSecondaryIndexOverrideDecoded0
        let localSecondaryIndexOverrideContainer = try containerValues.decodeIfPresent([LocalSecondaryIndex?].self, forKey: .localSecondaryIndexOverride)
        var localSecondaryIndexOverrideDecoded0:[LocalSecondaryIndex]? = nil
        if let localSecondaryIndexOverrideContainer = localSecondaryIndexOverrideContainer {
            localSecondaryIndexOverrideDecoded0 = [LocalSecondaryIndex]()
            for structure0 in localSecondaryIndexOverrideContainer {
                if let structure0 = structure0 {
                    localSecondaryIndexOverrideDecoded0?.append(structure0)
                }
            }
        }
        localSecondaryIndexOverride = localSecondaryIndexOverrideDecoded0
        let provisionedThroughputOverrideDecoded = try containerValues.decodeIfPresent(ProvisionedThroughput.self, forKey: .provisionedThroughputOverride)
        provisionedThroughputOverride = provisionedThroughputOverrideDecoded
        let sSESpecificationOverrideDecoded = try containerValues.decodeIfPresent(SSESpecification.self, forKey: .sSESpecificationOverride)
        sSESpecificationOverride = sSESpecificationOverrideDecoded
    }
}

extension RestoreTableToPointInTimeOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RestoreTableToPointInTimeOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRestoreTimeException" : self = .invalidRestoreTimeException(try InvalidRestoreTimeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PointInTimeRecoveryUnavailableException" : self = .pointInTimeRecoveryUnavailableException(try PointInTimeRecoveryUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TableAlreadyExistsException" : self = .tableAlreadyExistsException(try TableAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TableInUseException" : self = .tableInUseException(try TableInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TableNotFoundException" : self = .tableNotFoundException(try TableNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RestoreTableToPointInTimeOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case invalidRestoreTimeException(InvalidRestoreTimeException)
    case limitExceededException(LimitExceededException)
    case pointInTimeRecoveryUnavailableException(PointInTimeRecoveryUnavailableException)
    case tableAlreadyExistsException(TableAlreadyExistsException)
    case tableInUseException(TableInUseException)
    case tableNotFoundException(TableNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RestoreTableToPointInTimeOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RestoreTableToPointInTimeOutputResponse(tableDescription: \(String(describing: tableDescription)))"}
}

extension RestoreTableToPointInTimeOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: RestoreTableToPointInTimeOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.tableDescription = output.tableDescription
        } else {
            self.tableDescription = nil
        }
    }
}

public struct RestoreTableToPointInTimeOutputResponse: Equatable {
    /// <p>Represents the properties of a table.</p>
    public let tableDescription: TableDescription?

    public init (
        tableDescription: TableDescription? = nil
    )
    {
        self.tableDescription = tableDescription
    }
}

struct RestoreTableToPointInTimeOutputResponseBody: Equatable {
    public let tableDescription: TableDescription?
}

extension RestoreTableToPointInTimeOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tableDescription = "TableDescription"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableDescriptionDecoded = try containerValues.decodeIfPresent(TableDescription.self, forKey: .tableDescription)
        tableDescription = tableDescriptionDecoded
    }
}

/// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
///          <ul>
///             <li>
///                <p>
///                   <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
///                <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
///             </li>
///             <li>
///                <p>
///                   <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
///             </li>
///             <li>
///                <p>
///                   <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
///             </li>
///          </ul>
public enum ReturnConsumedCapacity {
    case indexes
    case `none`
    case total
    case sdkUnknown(String)
}

extension ReturnConsumedCapacity : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ReturnConsumedCapacity] {
        return [
            .indexes,
            .none,
            .total,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .indexes: return "INDEXES"
        case .none: return "NONE"
        case .total: return "TOTAL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ReturnConsumedCapacity(rawValue: rawValue) ?? ReturnConsumedCapacity.sdkUnknown(rawValue)
    }
}

public enum ReturnItemCollectionMetrics {
    case `none`
    case size
    case sdkUnknown(String)
}

extension ReturnItemCollectionMetrics : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ReturnItemCollectionMetrics] {
        return [
            .none,
            .size,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .size: return "SIZE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ReturnItemCollectionMetrics(rawValue: rawValue) ?? ReturnItemCollectionMetrics.sdkUnknown(rawValue)
    }
}

public enum ReturnValue {
    case allNew
    case allOld
    case `none`
    case updatedNew
    case updatedOld
    case sdkUnknown(String)
}

extension ReturnValue : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ReturnValue] {
        return [
            .allNew,
            .allOld,
            .none,
            .updatedNew,
            .updatedOld,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .allNew: return "ALL_NEW"
        case .allOld: return "ALL_OLD"
        case .none: return "NONE"
        case .updatedNew: return "UPDATED_NEW"
        case .updatedOld: return "UPDATED_OLD"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ReturnValue(rawValue: rawValue) ?? ReturnValue.sdkUnknown(rawValue)
    }
}

public enum ReturnValuesOnConditionCheckFailure {
    case allOld
    case `none`
    case sdkUnknown(String)
}

extension ReturnValuesOnConditionCheckFailure : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ReturnValuesOnConditionCheckFailure] {
        return [
            .allOld,
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .allOld: return "ALL_OLD"
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ReturnValuesOnConditionCheckFailure(rawValue: rawValue) ?? ReturnValuesOnConditionCheckFailure.sdkUnknown(rawValue)
    }
}

public enum S3SseAlgorithm {
    case aes256
    case kms
    case sdkUnknown(String)
}

extension S3SseAlgorithm : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [S3SseAlgorithm] {
        return [
            .aes256,
            .kms,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .aes256: return "AES256"
        case .kms: return "KMS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = S3SseAlgorithm(rawValue: rawValue) ?? S3SseAlgorithm.sdkUnknown(rawValue)
    }
}

extension SSEDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case inaccessibleEncryptionDateTime = "InaccessibleEncryptionDateTime"
        case kMSMasterKeyArn = "KMSMasterKeyArn"
        case sSEType = "SSEType"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inaccessibleEncryptionDateTime = inaccessibleEncryptionDateTime {
            try encodeContainer.encode(inaccessibleEncryptionDateTime.timeIntervalSince1970, forKey: .inaccessibleEncryptionDateTime)
        }
        if let kMSMasterKeyArn = kMSMasterKeyArn {
            try encodeContainer.encode(kMSMasterKeyArn, forKey: .kMSMasterKeyArn)
        }
        if let sSEType = sSEType {
            try encodeContainer.encode(sSEType.rawValue, forKey: .sSEType)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(SSEStatus.self, forKey: .status)
        status = statusDecoded
        let sSETypeDecoded = try containerValues.decodeIfPresent(SSEType.self, forKey: .sSEType)
        sSEType = sSETypeDecoded
        let kMSMasterKeyArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kMSMasterKeyArn)
        kMSMasterKeyArn = kMSMasterKeyArnDecoded
        let inaccessibleEncryptionDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .inaccessibleEncryptionDateTime)
        inaccessibleEncryptionDateTime = inaccessibleEncryptionDateTimeDecoded
    }
}

extension SSEDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SSEDescription(inaccessibleEncryptionDateTime: \(String(describing: inaccessibleEncryptionDateTime)), kMSMasterKeyArn: \(String(describing: kMSMasterKeyArn)), sSEType: \(String(describing: sSEType)), status: \(String(describing: status)))"}
}

/// <p>The description of the server-side encryption status on the specified table.</p>
public struct SSEDescription: Equatable {
    /// <p>Indicates the time, in UNIX epoch date format, when DynamoDB detected that the table's
    ///          AWS KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB
    ///          detects that the table's AWS KMS key is accessible again. DynamoDB will initiate the table
    ///          archival process when table's AWS KMS key remains inaccessible for more than seven days
    ///          from this date.</p>
    public let inaccessibleEncryptionDateTime: Date?
    /// <p>The AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.</p>
    public let kMSMasterKeyArn: String?
    /// <p>Server-side encryption type. The only supported value is:</p>
    ///          <ul>
    ///             <li>
    ///               <p>
    ///                   <code>KMS</code> - Server-side encryption that uses AWS Key Management Service. The
    ///                key is stored in your account and is managed by AWS KMS (AWS KMS charges
    ///                apply).</p>
    ///             </li>
    ///          </ul>
    public let sSEType: SSEType?
    /// <p>Represents the current state of server-side encryption. The only supported values are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ENABLED</code> - Server-side encryption is enabled.</p>
    ///             </li>
    ///             <li>
    ///               <p>
    ///                   <code>UPDATING</code> - Server-side encryption is being updated.</p>
    ///             </li>
    ///          </ul>
    public let status: SSEStatus?

    public init (
        inaccessibleEncryptionDateTime: Date? = nil,
        kMSMasterKeyArn: String? = nil,
        sSEType: SSEType? = nil,
        status: SSEStatus? = nil
    )
    {
        self.inaccessibleEncryptionDateTime = inaccessibleEncryptionDateTime
        self.kMSMasterKeyArn = kMSMasterKeyArn
        self.sSEType = sSEType
        self.status = status
    }
}

extension SSESpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case enabled = "Enabled"
        case kMSMasterKeyId = "KMSMasterKeyId"
        case sSEType = "SSEType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let kMSMasterKeyId = kMSMasterKeyId {
            try encodeContainer.encode(kMSMasterKeyId, forKey: .kMSMasterKeyId)
        }
        if let sSEType = sSEType {
            try encodeContainer.encode(sSEType.rawValue, forKey: .sSEType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let sSETypeDecoded = try containerValues.decodeIfPresent(SSEType.self, forKey: .sSEType)
        sSEType = sSETypeDecoded
        let kMSMasterKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kMSMasterKeyId)
        kMSMasterKeyId = kMSMasterKeyIdDecoded
    }
}

extension SSESpecification: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SSESpecification(enabled: \(String(describing: enabled)), kMSMasterKeyId: \(String(describing: kMSMasterKeyId)), sSEType: \(String(describing: sSEType)))"}
}

/// <p>Represents the settings used to enable server-side encryption.</p>
public struct SSESpecification: Equatable {
    /// <p>Indicates whether server-side encryption is done using an AWS managed CMK or an AWS owned CMK. If enabled (true),
    ///       server-side encryption type is set to <code>KMS</code> and an AWS managed CMK is used (AWS KMS charges apply). If disabled (false) or not specified, server-side
    /// encryption is set to AWS owned CMK.</p>
    public let enabled: Bool?
    /// <p>The AWS KMS customer master key (CMK) that should be used for the AWS KMS encryption. To
    ///          specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note
    ///          that you should only provide this parameter if the key is different from the default
    ///          DynamoDB customer master key alias/aws/dynamodb.</p>
    public let kMSMasterKeyId: String?
    /// <p>Server-side encryption type. The only supported value is:</p>
    ///          <ul>
    ///             <li>
    ///               <p>
    ///                   <code>KMS</code> - Server-side encryption that uses AWS Key Management Service. The
    ///                key is stored in your account and is managed by AWS KMS (AWS KMS charges
    ///                apply).</p>
    ///             </li>
    ///          </ul>
    public let sSEType: SSEType?

    public init (
        enabled: Bool? = nil,
        kMSMasterKeyId: String? = nil,
        sSEType: SSEType? = nil
    )
    {
        self.enabled = enabled
        self.kMSMasterKeyId = kMSMasterKeyId
        self.sSEType = sSEType
    }
}

public enum SSEStatus {
    case disabled
    case disabling
    case enabled
    case enabling
    case updating
    case sdkUnknown(String)
}

extension SSEStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SSEStatus] {
        return [
            .disabled,
            .disabling,
            .enabled,
            .enabling,
            .updating,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .disabling: return "DISABLING"
        case .enabled: return "ENABLED"
        case .enabling: return "ENABLING"
        case .updating: return "UPDATING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SSEStatus(rawValue: rawValue) ?? SSEStatus.sdkUnknown(rawValue)
    }
}

public enum SSEType {
    case aes256
    case kms
    case sdkUnknown(String)
}

extension SSEType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SSEType] {
        return [
            .aes256,
            .kms,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .aes256: return "AES256"
        case .kms: return "KMS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SSEType(rawValue: rawValue) ?? SSEType.sdkUnknown(rawValue)
    }
}

public enum ScalarAttributeType {
    case b
    case n
    case s
    case sdkUnknown(String)
}

extension ScalarAttributeType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ScalarAttributeType] {
        return [
            .b,
            .n,
            .s,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .b: return "B"
        case .n: return "N"
        case .s: return "S"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ScalarAttributeType(rawValue: rawValue) ?? ScalarAttributeType.sdkUnknown(rawValue)
    }
}

public struct ScanInputBodyMiddleware: Middleware {
    public let id: String = "ScanInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ScanInput>,
                  next: H) -> Swift.Result<OperationOutput<ScanOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ScanInput>
    public typealias MOutput = OperationOutput<ScanOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ScanOutputError>
}

extension ScanInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ScanInput(attributesToGet: \(String(describing: attributesToGet)), conditionalOperator: \(String(describing: conditionalOperator)), consistentRead: \(String(describing: consistentRead)), exclusiveStartKey: \(String(describing: exclusiveStartKey)), expressionAttributeNames: \(String(describing: expressionAttributeNames)), expressionAttributeValues: \(String(describing: expressionAttributeValues)), filterExpression: \(String(describing: filterExpression)), indexName: \(String(describing: indexName)), limit: \(String(describing: limit)), projectionExpression: \(String(describing: projectionExpression)), returnConsumedCapacity: \(String(describing: returnConsumedCapacity)), scanFilter: \(String(describing: scanFilter)), segment: \(String(describing: segment)), select: \(String(describing: select)), tableName: \(String(describing: tableName)), totalSegments: \(String(describing: totalSegments)))"}
}

extension ScanInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributesToGet = "AttributesToGet"
        case conditionalOperator = "ConditionalOperator"
        case consistentRead = "ConsistentRead"
        case exclusiveStartKey = "ExclusiveStartKey"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case filterExpression = "FilterExpression"
        case indexName = "IndexName"
        case limit = "Limit"
        case projectionExpression = "ProjectionExpression"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case scanFilter = "ScanFilter"
        case segment = "Segment"
        case select = "Select"
        case tableName = "TableName"
        case totalSegments = "TotalSegments"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributesToGet = attributesToGet {
            var attributesToGetContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributesToGet)
            for attributenamelist0 in attributesToGet {
                try attributesToGetContainer.encode(attributenamelist0)
            }
        }
        if let conditionalOperator = conditionalOperator {
            try encodeContainer.encode(conditionalOperator.rawValue, forKey: .conditionalOperator)
        }
        if let consistentRead = consistentRead {
            try encodeContainer.encode(consistentRead, forKey: .consistentRead)
        }
        if let exclusiveStartKey = exclusiveStartKey {
            var exclusiveStartKeyContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .exclusiveStartKey)
            for (dictKey0, key0) in exclusiveStartKey {
                try exclusiveStartKeyContainer.encode(key0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionattributenamemap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionattributenamemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeValues = expressionAttributeValues {
            var expressionAttributeValuesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expressionAttributeValues)
            for (dictKey0, expressionattributevaluemap0) in expressionAttributeValues {
                try expressionAttributeValuesContainer.encode(expressionattributevaluemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let filterExpression = filterExpression {
            try encodeContainer.encode(filterExpression, forKey: .filterExpression)
        }
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let projectionExpression = projectionExpression {
            try encodeContainer.encode(projectionExpression, forKey: .projectionExpression)
        }
        if let returnConsumedCapacity = returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let scanFilter = scanFilter {
            var scanFilterContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .scanFilter)
            for (dictKey0, filterconditionmap0) in scanFilter {
                try scanFilterContainer.encode(filterconditionmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let segment = segment {
            try encodeContainer.encode(segment, forKey: .segment)
        }
        if let select = select {
            try encodeContainer.encode(select.rawValue, forKey: .select)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let totalSegments = totalSegments {
            try encodeContainer.encode(totalSegments, forKey: .totalSegments)
        }
    }
}

public struct ScanInputHeadersMiddleware: Middleware {
    public let id: String = "ScanInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ScanInput>,
                  next: H) -> Swift.Result<OperationOutput<ScanOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ScanInput>
    public typealias MOutput = OperationOutput<ScanOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ScanOutputError>
}

public struct ScanInputQueryItemMiddleware: Middleware {
    public let id: String = "ScanInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ScanInput>,
                  next: H) -> Swift.Result<OperationOutput<ScanOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ScanInput>
    public typealias MOutput = OperationOutput<ScanOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ScanOutputError>
}

/// <p>Represents the input of a <code>Scan</code> operation.</p>
public struct ScanInput: Equatable {
    /// <p>This is a legacy parameter.  Use <code>ProjectionExpression</code> instead.  For more information, see
    ///           <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let attributesToGet: [String]?
    /// <p>This is a legacy parameter.  Use <code>FilterExpression</code> instead.   For more information, see
    ///           <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let conditionalOperator: ConditionalOperator?
    /// <p>A Boolean value that determines the read consistency model during the scan:</p>
    ///          <ul>
    ///             <li>
    ///                <p>If <code>ConsistentRead</code> is <code>false</code>, then the data returned from
    ///                         <code>Scan</code> might not contain the results from other recently
    ///                     completed write operations (<code>PutItem</code>, <code>UpdateItem</code>, or
    ///                         <code>DeleteItem</code>).</p>
    ///             </li>
    ///             <li>
    ///                <p>If <code>ConsistentRead</code> is <code>true</code>, then all of the write operations that completed before the <code>Scan</code> began are guaranteed to be contained in the <code>Scan</code> response.</p>
    ///             </li>
    ///          </ul>
    ///          <p>The default setting for <code>ConsistentRead</code> is <code>false</code>.</p>
    ///          <p>The <code>ConsistentRead</code> parameter is not supported on global secondary indexes. If you scan a global secondary index with <code>ConsistentRead</code> set to true, you will receive a <code>ValidationException</code>.</p>
    public let consistentRead: Bool?
    /// <p>The primary key of the first item that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedKey</code> in the previous operation.</p>
    ///          <p>The data type for <code>ExclusiveStartKey</code> must be String, Number or Binary. No set data types are allowed.</p>
    ///          <p>In a parallel scan, a
    ///         <code>Scan</code> request that includes <code>ExclusiveStartKey</code> must specify the same segment
    ///       whose previous <code>Scan</code> returned the corresponding value of <code>LastEvaluatedKey</code>.</p>
    public let exclusiveStartKey: [String:AttributeValue]?
    /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
    ///          <ul>
    ///             <li>
    ///                <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
    ///             </li>
    ///             <li>
    ///                <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
    ///             </li>
    ///             <li>
    ///                <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
    ///             </li>
    ///          </ul>
    ///          <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Percentile</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>{"#P":"Percentile"}</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>You could then use this substitution in an expression, as in this example:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>#P = :val</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
    ///          </note>
    ///          <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
    ///                 Guide</i>.</p>
    public let expressionAttributeNames: [String:String]?
    /// <p>One or more values that can be substituted in an expression.</p>
    ///          <p>Use the <b>:</b> (colon) character in an expression to
    ///             dereference an attribute value. For example, suppose that you wanted to check whether
    ///             the value of the <code>ProductStatus</code> attribute was one of the following: </p>
    ///          <p>
    ///             <code>Available | Backordered | Discontinued</code>
    ///          </p>
    ///          <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>
    ///          <p>
    ///             <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code>
    ///          </p>
    ///          <p>You could then use these values in an expression, such as this:</p>
    ///          <p>
    ///             <code>ProductStatus IN (:avail, :back, :disc)</code>
    ///          </p>
    ///         <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer
    ///                 Guide</i>.</p>
    public let expressionAttributeValues: [String:AttributeValue]?
    /// <p>A string that contains conditions that DynamoDB applies after the <code>Scan</code> operation, but
    ///        before the data is returned to you. Items that do not satisfy the <code>FilterExpression</code>
    ///        criteria are not returned.</p>
    ///          <note>
    ///             <p>A <code>FilterExpression</code> is applied after the items have already been read; the process of
    ///          filtering does not consume any additional read capacity units.</p>
    ///          </note>
    ///          <p>For more information, see
    ///        <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#FilteringResults">Filter Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let filterExpression: String?
    /// <p>The name of a secondary index to scan. This index can be any local secondary index or global secondary index.  Note that if you use the <code>IndexName</code> parameter, you must also provide <code>TableName</code>.</p>
    public let indexName: String?
    /// <p>The maximum number of items to evaluate (not necessarily the number of matching items).
    ///             If DynamoDB processes the number of items up to the limit while processing the results,
    ///             it stops the operation and returns the matching values up to that point, and a key in
    ///                 <code>LastEvaluatedKey</code> to apply in a subsequent operation, so that you can
    ///             pick up where you left off. Also, if the processed dataset size exceeds 1 MB before
    ///             DynamoDB reaches this limit, it stops the operation and returns the matching values up
    ///             to the limit, and a key in <code>LastEvaluatedKey</code> to apply in a subsequent
    ///             operation to continue the operation. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html">Working with Queries</a> in the <i>Amazon DynamoDB Developer
    ///                 Guide</i>.</p>
    public let limit: Int?
    /// <p>A string that identifies one or more attributes to retrieve from the specified table or index. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.</p>
    ///          <p>If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
    ///                 Guide</i>.</p>
    public let projectionExpression: String?
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    ///                <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    ///             </li>
    ///          </ul>
    public let returnConsumedCapacity: ReturnConsumedCapacity?
    /// <p>This is a legacy parameter.  Use <code>FilterExpression</code> instead.   For more information, see
    ///           <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ScanFilter.html">ScanFilter</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let scanFilter: [String:Condition]?
    /// <p>For a parallel <code>Scan</code> request, <code>Segment</code> identifies an individual segment to be
    ///       scanned by an application worker.</p>
    ///          <p>Segment IDs are zero-based, so the first segment is always 0. For example, if you want to
    ///       use four application threads to scan a table or an index, then the first thread specifies a <code>Segment</code> value
    ///       of 0, the second thread specifies 1, and so on.</p>
    ///          <p>The value of <code>LastEvaluatedKey</code> returned from a parallel <code>Scan</code> request must be
    ///       used as <code>ExclusiveStartKey</code> with the same segment ID in a subsequent <code>Scan</code>
    ///       operation.</p>
    ///          <p>The value for <code>Segment</code> must be greater than or equal to 0, and less than the value
    ///       provided for <code>TotalSegments</code>.</p>
    ///          <p>If you provide <code>Segment</code>, you must also provide <code>TotalSegments</code>.</p>
    public let segment: Int?
    /// <p>The attributes to be returned in the
    ///             result. You can retrieve all item attributes, specific item attributes, the count of
    ///             matching items, or in the case of an index, some or all of the attributes projected into
    ///             the index.</p>
    ///          <ul>
    ///             <li>
    ///               <p>
    ///                     <code>ALL_ATTRIBUTES</code> - Returns all of the item attributes from the
    ///                     specified table or index. If you query a local secondary index, then for each
    ///                     matching item in the index, DynamoDB fetches the entire item from the parent
    ///                     table. If the index is configured to project all item attributes, then all of
    ///                     the data can be obtained from the local secondary index, and no fetching is
    ///                     required.</p>
    ///             </li>
    ///             <li>
    ///               <p>
    ///                   <code>ALL_PROJECTED_ATTRIBUTES</code> - Allowed only when querying an index.
    ///                   Retrieves all attributes that have been projected into the index. If the
    ///                   index is configured to project all attributes, this return value is
    ///                   equivalent to specifying <code>ALL_ATTRIBUTES</code>.</p>
    ///             </li>
    ///             <li>
    ///               <p>
    ///                   <code>COUNT</code> - Returns the number of matching items, rather than the
    ///                   matching items themselves.</p>
    ///             </li>
    ///             <li>
    ///               <p>
    ///                   <code>SPECIFIC_ATTRIBUTES</code> - Returns only the attributes listed in
    ///                   <code>AttributesToGet</code>. This return value is equivalent to
    ///                   specifying <code>AttributesToGet</code> without specifying any value
    ///                   for <code>Select</code>.</p>
    ///               <p>If you query or scan a local secondary index and request only attributes that
    ///                     are projected into that index, the operation reads only the index and not the
    ///                     table. If any of the requested attributes are not projected into the local
    ///                     secondary index, DynamoDB fetches each of these attributes from the parent
    ///                     table. This extra fetching incurs additional throughput cost and latency.</p>
    ///               <p>If you query or scan a global secondary index, you can only request
    ///                   attributes that are projected into the index. Global secondary index queries
    ///                   cannot fetch attributes from the parent table.</p>
    ///             </li>
    ///          </ul>
    ///          <p>If neither <code>Select</code> nor <code>AttributesToGet</code>
    ///           are specified, DynamoDB defaults to <code>ALL_ATTRIBUTES</code> when accessing a
    ///           table, and <code>ALL_PROJECTED_ATTRIBUTES</code> when accessing an index. You cannot
    ///           use both <code>Select</code> and <code>AttributesToGet</code>
    ///           together in a single request, unless the value for <code>Select</code> is
    ///           <code>SPECIFIC_ATTRIBUTES</code>. (This usage is equivalent to specifying
    ///           <code>AttributesToGet</code> without any value for
    ///           <code>Select</code>.)</p>
    ///          <note>
    ///             <p>If you use the <code>ProjectionExpression</code> parameter, then
    ///               the value for <code>Select</code> can only be
    ///               <code>SPECIFIC_ATTRIBUTES</code>. Any other value for
    ///               <code>Select</code> will return an error.</p>
    ///          </note>
    public let select: Select?
    /// <p>The name of the table containing the requested items; or, if you provide
    ///             <code>IndexName</code>, the name of the table to which that index belongs.</p>
    public let tableName: String?
    /// <p>For a parallel <code>Scan</code> request, <code>TotalSegments</code> represents the total number of
    ///       segments into which the <code>Scan</code> operation will be divided. The value of
    ///         <code>TotalSegments</code> corresponds to the number of application workers that will perform the
    ///       parallel scan. For example, if you want to use four application threads to scan a table or an index,
    ///       specify a <code>TotalSegments</code> value of 4.</p>
    ///          <p>The value for <code>TotalSegments</code> must be greater than or equal to 1, and less than or equal
    ///       to 1000000. If you specify a <code>TotalSegments</code> value of 1, the <code>Scan</code> operation will
    ///       be sequential rather than parallel.</p>
    ///          <p>If you specify <code>TotalSegments</code>, you must also specify <code>Segment</code>.</p>
    public let totalSegments: Int?

    public init (
        attributesToGet: [String]? = nil,
        conditionalOperator: ConditionalOperator? = nil,
        consistentRead: Bool? = nil,
        exclusiveStartKey: [String:AttributeValue]? = nil,
        expressionAttributeNames: [String:String]? = nil,
        expressionAttributeValues: [String:AttributeValue]? = nil,
        filterExpression: String? = nil,
        indexName: String? = nil,
        limit: Int? = nil,
        projectionExpression: String? = nil,
        returnConsumedCapacity: ReturnConsumedCapacity? = nil,
        scanFilter: [String:Condition]? = nil,
        segment: Int? = nil,
        select: Select? = nil,
        tableName: String? = nil,
        totalSegments: Int? = nil
    )
    {
        self.attributesToGet = attributesToGet
        self.conditionalOperator = conditionalOperator
        self.consistentRead = consistentRead
        self.exclusiveStartKey = exclusiveStartKey
        self.expressionAttributeNames = expressionAttributeNames
        self.expressionAttributeValues = expressionAttributeValues
        self.filterExpression = filterExpression
        self.indexName = indexName
        self.limit = limit
        self.projectionExpression = projectionExpression
        self.returnConsumedCapacity = returnConsumedCapacity
        self.scanFilter = scanFilter
        self.segment = segment
        self.select = select
        self.tableName = tableName
        self.totalSegments = totalSegments
    }
}

struct ScanInputBody: Equatable {
    public let tableName: String?
    public let indexName: String?
    public let attributesToGet: [String]?
    public let limit: Int?
    public let select: Select?
    public let scanFilter: [String:Condition]?
    public let conditionalOperator: ConditionalOperator?
    public let exclusiveStartKey: [String:AttributeValue]?
    public let returnConsumedCapacity: ReturnConsumedCapacity?
    public let totalSegments: Int?
    public let segment: Int?
    public let projectionExpression: String?
    public let filterExpression: String?
    public let expressionAttributeNames: [String:String]?
    public let expressionAttributeValues: [String:AttributeValue]?
    public let consistentRead: Bool?
}

extension ScanInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attributesToGet = "AttributesToGet"
        case conditionalOperator = "ConditionalOperator"
        case consistentRead = "ConsistentRead"
        case exclusiveStartKey = "ExclusiveStartKey"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case filterExpression = "FilterExpression"
        case indexName = "IndexName"
        case limit = "Limit"
        case projectionExpression = "ProjectionExpression"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case scanFilter = "ScanFilter"
        case segment = "Segment"
        case select = "Select"
        case tableName = "TableName"
        case totalSegments = "TotalSegments"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let attributesToGetContainer = try containerValues.decodeIfPresent([String?].self, forKey: .attributesToGet)
        var attributesToGetDecoded0:[String]? = nil
        if let attributesToGetContainer = attributesToGetContainer {
            attributesToGetDecoded0 = [String]()
            for string0 in attributesToGetContainer {
                if let string0 = string0 {
                    attributesToGetDecoded0?.append(string0)
                }
            }
        }
        attributesToGet = attributesToGetDecoded0
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let selectDecoded = try containerValues.decodeIfPresent(Select.self, forKey: .select)
        select = selectDecoded
        let scanFilterContainer = try containerValues.decodeIfPresent([String: Condition?].self, forKey: .scanFilter)
        var scanFilterDecoded0: [String:Condition]? = nil
        if let scanFilterContainer = scanFilterContainer {
            scanFilterDecoded0 = [String:Condition]()
            for (key0, condition0) in scanFilterContainer {
                if let condition0 = condition0 {
                    scanFilterDecoded0?[key0] = condition0
                }
            }
        }
        scanFilter = scanFilterDecoded0
        let conditionalOperatorDecoded = try containerValues.decodeIfPresent(ConditionalOperator.self, forKey: .conditionalOperator)
        conditionalOperator = conditionalOperatorDecoded
        let exclusiveStartKeyContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .exclusiveStartKey)
        var exclusiveStartKeyDecoded0: [String:AttributeValue]? = nil
        if let exclusiveStartKeyContainer = exclusiveStartKeyContainer {
            exclusiveStartKeyDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in exclusiveStartKeyContainer {
                if let attributevalue0 = attributevalue0 {
                    exclusiveStartKeyDecoded0?[key0] = attributevalue0
                }
            }
        }
        exclusiveStartKey = exclusiveStartKeyDecoded0
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
        let totalSegmentsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .totalSegments)
        totalSegments = totalSegmentsDecoded
        let segmentDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .segment)
        segment = segmentDecoded
        let projectionExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .projectionExpression)
        projectionExpression = projectionExpressionDecoded
        let filterExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterExpression)
        filterExpression = filterExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [String:String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [String:String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
        let expressionAttributeValuesContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .expressionAttributeValues)
        var expressionAttributeValuesDecoded0: [String:AttributeValue]? = nil
        if let expressionAttributeValuesContainer = expressionAttributeValuesContainer {
            expressionAttributeValuesDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in expressionAttributeValuesContainer {
                if let attributevalue0 = attributevalue0 {
                    expressionAttributeValuesDecoded0?[key0] = attributevalue0
                }
            }
        }
        expressionAttributeValues = expressionAttributeValuesDecoded0
        let consistentReadDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .consistentRead)
        consistentRead = consistentReadDecoded
    }
}

extension ScanOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ScanOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ScanOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case requestLimitExceeded(RequestLimitExceeded)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ScanOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ScanOutputResponse(consumedCapacity: \(String(describing: consumedCapacity)), count: \(String(describing: count)), items: \(String(describing: items)), lastEvaluatedKey: \(String(describing: lastEvaluatedKey)), scannedCount: \(String(describing: scannedCount)))"}
}

extension ScanOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ScanOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.consumedCapacity = output.consumedCapacity
            self.count = output.count
            self.items = output.items
            self.lastEvaluatedKey = output.lastEvaluatedKey
            self.scannedCount = output.scannedCount
        } else {
            self.consumedCapacity = nil
            self.count = 0
            self.items = nil
            self.lastEvaluatedKey = nil
            self.scannedCount = 0
        }
    }
}

/// <p>Represents the output of a <code>Scan</code> operation.</p>
public struct ScanOutputResponse: Equatable {
    /// <p>The capacity units consumed by the <code>Scan</code> operation. The data returned includes the total
    ///             provisioned throughput consumed, along with statistics for the table and any indexes involved
    ///             in the operation. <code>ConsumedCapacity</code> is only returned if the <code>ReturnConsumedCapacity</code> parameter was specified.
    ///             For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned
    ///                 Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let consumedCapacity: ConsumedCapacity?
    /// <p>The number of items in the response.</p>
    ///          <p>If you set <code>ScanFilter</code> in the request, then <code>Count</code> is the number of items
    ///       returned after the filter was applied, and <code>ScannedCount</code> is the number of matching items
    ///       before the filter was applied.</p>
    ///          <p>If you did not use a filter in the request, then <code>Count</code> is the same as
    ///         <code>ScannedCount</code>.</p>
    public let count: Int
    /// <p>An array of item attributes that match the scan criteria. Each element in this array consists of an attribute name and the value for that attribute.</p>
    public let items: [[String:AttributeValue]]?
    /// <p>The primary key of the item where the operation stopped, inclusive of the previous
    ///             result set. Use this value to start a new operation, excluding this value in the new
    ///             request.</p>
    ///         <p>If <code>LastEvaluatedKey</code> is empty, then the "last page" of results
    ///             has been processed and there is no more data to be retrieved.</p>
    ///         <p>If <code>LastEvaluatedKey</code> is not empty, it does not necessarily mean
    ///             that there is more data in the result set. The only way to know when you have reached
    ///             the end of the result set is when <code>LastEvaluatedKey</code> is
    ///             empty.</p>
    public let lastEvaluatedKey: [String:AttributeValue]?
    /// <p>The number of items evaluated, before any <code>ScanFilter</code> is applied. A high
    ///         <code>ScannedCount</code> value with few, or no, <code>Count</code> results indicates an inefficient
    ///         <code>Scan</code> operation. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count">Count and ScannedCount</a> in the
    ///         <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///          <p>If you did not use a filter in the request, then <code>ScannedCount</code> is the same as
    ///         <code>Count</code>.</p>
    public let scannedCount: Int

    public init (
        consumedCapacity: ConsumedCapacity? = nil,
        count: Int = 0,
        items: [[String:AttributeValue]]? = nil,
        lastEvaluatedKey: [String:AttributeValue]? = nil,
        scannedCount: Int = 0
    )
    {
        self.consumedCapacity = consumedCapacity
        self.count = count
        self.items = items
        self.lastEvaluatedKey = lastEvaluatedKey
        self.scannedCount = scannedCount
    }
}

struct ScanOutputResponseBody: Equatable {
    public let items: [[String:AttributeValue]]?
    public let count: Int
    public let scannedCount: Int
    public let lastEvaluatedKey: [String:AttributeValue]?
    public let consumedCapacity: ConsumedCapacity?
}

extension ScanOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case consumedCapacity = "ConsumedCapacity"
        case count = "Count"
        case items = "Items"
        case lastEvaluatedKey = "LastEvaluatedKey"
        case scannedCount = "ScannedCount"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemsContainer = try containerValues.decodeIfPresent([[String: AttributeValue?]?].self, forKey: .items)
        var itemsDecoded0:[[String:AttributeValue]]? = nil
        if let itemsContainer = itemsContainer {
            itemsDecoded0 = [[String:AttributeValue]]()
            for map0 in itemsContainer {
                var itemsContainerDecoded0: [String: AttributeValue]? = nil
                if let map0 = map0 {
                    itemsContainerDecoded0 = [String: AttributeValue]()
                    for (key1, attributevalue1) in map0 {
                        if let attributevalue1 = attributevalue1 {
                            itemsContainerDecoded0?[key1] = attributevalue1
                        }
                    }
                }
                if let itemsContainerDecoded0 = itemsContainerDecoded0 {
                    itemsDecoded0?.append(itemsContainerDecoded0)
                }
            }
        }
        items = itemsDecoded0
        let countDecoded = try containerValues.decode(Int.self, forKey: .count)
        count = countDecoded
        let scannedCountDecoded = try containerValues.decode(Int.self, forKey: .scannedCount)
        scannedCount = scannedCountDecoded
        let lastEvaluatedKeyContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .lastEvaluatedKey)
        var lastEvaluatedKeyDecoded0: [String:AttributeValue]? = nil
        if let lastEvaluatedKeyContainer = lastEvaluatedKeyContainer {
            lastEvaluatedKeyDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in lastEvaluatedKeyContainer {
                if let attributevalue0 = attributevalue0 {
                    lastEvaluatedKeyDecoded0?[key0] = attributevalue0
                }
            }
        }
        lastEvaluatedKey = lastEvaluatedKeyDecoded0
        let consumedCapacityDecoded = try containerValues.decodeIfPresent(ConsumedCapacity.self, forKey: .consumedCapacity)
        consumedCapacity = consumedCapacityDecoded
    }
}

public enum Select {
    case allAttributes
    case allProjectedAttributes
    case count
    case specificAttributes
    case sdkUnknown(String)
}

extension Select : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Select] {
        return [
            .allAttributes,
            .allProjectedAttributes,
            .count,
            .specificAttributes,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .allAttributes: return "ALL_ATTRIBUTES"
        case .allProjectedAttributes: return "ALL_PROJECTED_ATTRIBUTES"
        case .count: return "COUNT"
        case .specificAttributes: return "SPECIFIC_ATTRIBUTES"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Select(rawValue: rawValue) ?? Select.sdkUnknown(rawValue)
    }
}

extension SourceTableDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case billingMode = "BillingMode"
        case itemCount = "ItemCount"
        case keySchema = "KeySchema"
        case provisionedThroughput = "ProvisionedThroughput"
        case tableArn = "TableArn"
        case tableCreationDateTime = "TableCreationDateTime"
        case tableId = "TableId"
        case tableName = "TableName"
        case tableSizeBytes = "TableSizeBytes"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let billingMode = billingMode {
            try encodeContainer.encode(billingMode.rawValue, forKey: .billingMode)
        }
        if let itemCount = itemCount {
            try encodeContainer.encode(itemCount, forKey: .itemCount)
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for keyschema0 in keySchema {
                try keySchemaContainer.encode(keyschema0)
            }
        }
        if let provisionedThroughput = provisionedThroughput {
            try encodeContainer.encode(provisionedThroughput, forKey: .provisionedThroughput)
        }
        if let tableArn = tableArn {
            try encodeContainer.encode(tableArn, forKey: .tableArn)
        }
        if let tableCreationDateTime = tableCreationDateTime {
            try encodeContainer.encode(tableCreationDateTime.timeIntervalSince1970, forKey: .tableCreationDateTime)
        }
        if let tableId = tableId {
            try encodeContainer.encode(tableId, forKey: .tableId)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if tableSizeBytes != 0 {
            try encodeContainer.encode(tableSizeBytes, forKey: .tableSizeBytes)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let tableIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableId)
        tableId = tableIdDecoded
        let tableArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableArn)
        tableArn = tableArnDecoded
        let tableSizeBytesDecoded = try containerValues.decode(Int.self, forKey: .tableSizeBytes)
        tableSizeBytes = tableSizeBytesDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let tableCreationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .tableCreationDateTime)
        tableCreationDateTime = tableCreationDateTimeDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(ProvisionedThroughput.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
        let itemCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .itemCount)
        itemCount = itemCountDecoded
        let billingModeDecoded = try containerValues.decodeIfPresent(BillingMode.self, forKey: .billingMode)
        billingMode = billingModeDecoded
    }
}

extension SourceTableDetails: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SourceTableDetails(billingMode: \(String(describing: billingMode)), itemCount: \(String(describing: itemCount)), keySchema: \(String(describing: keySchema)), provisionedThroughput: \(String(describing: provisionedThroughput)), tableArn: \(String(describing: tableArn)), tableCreationDateTime: \(String(describing: tableCreationDateTime)), tableId: \(String(describing: tableId)), tableName: \(String(describing: tableName)), tableSizeBytes: \(String(describing: tableSizeBytes)))"}
}

/// <p>Contains the details of the table when the backup was created. </p>
public struct SourceTableDetails: Equatable {
    /// <p>Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>PROVISIONED</code> - Sets the read/write capacity mode to <code>PROVISIONED</code>. We recommend using <code>PROVISIONED</code> for predictable workloads.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>PAY_PER_REQUEST</code> - Sets the read/write capacity mode to <code>PAY_PER_REQUEST</code>. We recommend using <code>PAY_PER_REQUEST</code> for unpredictable workloads.
    ///             </p>
    ///             </li>
    ///          </ul>
    public let billingMode: BillingMode?
    /// <p>Number of items in the table. Note that this is an approximate value. </p>
    public let itemCount: Int?
    /// <p>Schema of the table. </p>
    public let keySchema: [KeySchemaElement]?
    /// <p>Read IOPs and Write IOPS on the table when the backup was created.</p>
    public let provisionedThroughput: ProvisionedThroughput?
    /// <p>ARN of the table for which backup was created. </p>
    public let tableArn: String?
    /// <p>Time when the source table was created. </p>
    public let tableCreationDateTime: Date?
    /// <p>Unique identifier for the table for which the backup was created. </p>
    public let tableId: String?
    /// <p>The name of the table for which the backup was created. </p>
    public let tableName: String?
    /// <p>Size of the table in bytes. Note that this is an approximate value.</p>
    public let tableSizeBytes: Int

    public init (
        billingMode: BillingMode? = nil,
        itemCount: Int? = nil,
        keySchema: [KeySchemaElement]? = nil,
        provisionedThroughput: ProvisionedThroughput? = nil,
        tableArn: String? = nil,
        tableCreationDateTime: Date? = nil,
        tableId: String? = nil,
        tableName: String? = nil,
        tableSizeBytes: Int = 0
    )
    {
        self.billingMode = billingMode
        self.itemCount = itemCount
        self.keySchema = keySchema
        self.provisionedThroughput = provisionedThroughput
        self.tableArn = tableArn
        self.tableCreationDateTime = tableCreationDateTime
        self.tableId = tableId
        self.tableName = tableName
        self.tableSizeBytes = tableSizeBytes
    }
}

extension SourceTableFeatureDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case localSecondaryIndexes = "LocalSecondaryIndexes"
        case sSEDescription = "SSEDescription"
        case streamDescription = "StreamDescription"
        case timeToLiveDescription = "TimeToLiveDescription"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalSecondaryIndexes = globalSecondaryIndexes {
            var globalSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexes)
            for globalsecondaryindexes0 in globalSecondaryIndexes {
                try globalSecondaryIndexesContainer.encode(globalsecondaryindexes0)
            }
        }
        if let localSecondaryIndexes = localSecondaryIndexes {
            var localSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .localSecondaryIndexes)
            for localsecondaryindexes0 in localSecondaryIndexes {
                try localSecondaryIndexesContainer.encode(localsecondaryindexes0)
            }
        }
        if let sSEDescription = sSEDescription {
            try encodeContainer.encode(sSEDescription, forKey: .sSEDescription)
        }
        if let streamDescription = streamDescription {
            try encodeContainer.encode(streamDescription, forKey: .streamDescription)
        }
        if let timeToLiveDescription = timeToLiveDescription {
            try encodeContainer.encode(timeToLiveDescription, forKey: .timeToLiveDescription)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let localSecondaryIndexesContainer = try containerValues.decodeIfPresent([LocalSecondaryIndexInfo?].self, forKey: .localSecondaryIndexes)
        var localSecondaryIndexesDecoded0:[LocalSecondaryIndexInfo]? = nil
        if let localSecondaryIndexesContainer = localSecondaryIndexesContainer {
            localSecondaryIndexesDecoded0 = [LocalSecondaryIndexInfo]()
            for structure0 in localSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    localSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        localSecondaryIndexes = localSecondaryIndexesDecoded0
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([GlobalSecondaryIndexInfo?].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0:[GlobalSecondaryIndexInfo]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [GlobalSecondaryIndexInfo]()
            for structure0 in globalSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
        let streamDescriptionDecoded = try containerValues.decodeIfPresent(StreamSpecification.self, forKey: .streamDescription)
        streamDescription = streamDescriptionDecoded
        let timeToLiveDescriptionDecoded = try containerValues.decodeIfPresent(TimeToLiveDescription.self, forKey: .timeToLiveDescription)
        timeToLiveDescription = timeToLiveDescriptionDecoded
        let sSEDescriptionDecoded = try containerValues.decodeIfPresent(SSEDescription.self, forKey: .sSEDescription)
        sSEDescription = sSEDescriptionDecoded
    }
}

extension SourceTableFeatureDetails: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SourceTableFeatureDetails(globalSecondaryIndexes: \(String(describing: globalSecondaryIndexes)), localSecondaryIndexes: \(String(describing: localSecondaryIndexes)), sSEDescription: \(String(describing: sSEDescription)), streamDescription: \(String(describing: streamDescription)), timeToLiveDescription: \(String(describing: timeToLiveDescription)))"}
}

/// <p>Contains the details of the features enabled on the table when the backup was created. For example, LSIs, GSIs, streams, TTL. </p>
public struct SourceTableFeatureDetails: Equatable {
    /// <p>Represents the GSI properties for the table when the backup was created. It includes the
    ///          IndexName, KeySchema, Projection, and ProvisionedThroughput for the GSIs on the table at
    ///          the time of backup. </p>
    public let globalSecondaryIndexes: [GlobalSecondaryIndexInfo]?
    /// <p>Represents the LSI properties for the table when the backup was created. It includes the IndexName, KeySchema and Projection for the LSIs on the table at the time of backup. </p>
    public let localSecondaryIndexes: [LocalSecondaryIndexInfo]?
    /// <p>The description of the server-side encryption status on the table when the backup was created.</p>
    public let sSEDescription: SSEDescription?
    /// <p>Stream settings on the table when the backup was created.</p>
    public let streamDescription: StreamSpecification?
    /// <p>Time to Live settings on the table when the backup was created.</p>
    public let timeToLiveDescription: TimeToLiveDescription?

    public init (
        globalSecondaryIndexes: [GlobalSecondaryIndexInfo]? = nil,
        localSecondaryIndexes: [LocalSecondaryIndexInfo]? = nil,
        sSEDescription: SSEDescription? = nil,
        streamDescription: StreamSpecification? = nil,
        timeToLiveDescription: TimeToLiveDescription? = nil
    )
    {
        self.globalSecondaryIndexes = globalSecondaryIndexes
        self.localSecondaryIndexes = localSecondaryIndexes
        self.sSEDescription = sSEDescription
        self.streamDescription = streamDescription
        self.timeToLiveDescription = timeToLiveDescription
    }
}

extension StreamSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case streamEnabled = "StreamEnabled"
        case streamViewType = "StreamViewType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let streamEnabled = streamEnabled {
            try encodeContainer.encode(streamEnabled, forKey: .streamEnabled)
        }
        if let streamViewType = streamViewType {
            try encodeContainer.encode(streamViewType.rawValue, forKey: .streamViewType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .streamEnabled)
        streamEnabled = streamEnabledDecoded
        let streamViewTypeDecoded = try containerValues.decodeIfPresent(StreamViewType.self, forKey: .streamViewType)
        streamViewType = streamViewTypeDecoded
    }
}

extension StreamSpecification: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StreamSpecification(streamEnabled: \(String(describing: streamEnabled)), streamViewType: \(String(describing: streamViewType)))"}
}

/// <p>Represents the DynamoDB Streams configuration for a table in DynamoDB.</p>
public struct StreamSpecification: Equatable {
    /// <p>Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.</p>
    public let streamEnabled: Bool?
    /// <p>
    ///               When an item in the table is modified, <code>StreamViewType</code>
    ///               determines what information is written to the stream for this table. Valid values for
    ///             <code>StreamViewType</code> are:</p>
    ///             <ul>
    ///             <li>
    ///                   <p>
    ///                      <code>KEYS_ONLY</code> - Only the key attributes of the modified item are written to the stream.</p>
    ///                </li>
    ///             <li>
    ///                   <p>
    ///                      <code>NEW_IMAGE</code> - The entire item, as it appears after it was modified, is written
    ///               to the stream.</p>
    ///                </li>
    ///             <li>
    ///                   <p>
    ///                      <code>OLD_IMAGE</code> - The entire item, as it appeared before it was modified, is
    ///               written to the stream.</p>
    ///                </li>
    ///             <li>
    ///                   <p>
    ///                      <code>NEW_AND_OLD_IMAGES</code> - Both the new and the old item images of the item are
    ///               written to the stream.</p>
    ///                </li>
    ///          </ul>
    public let streamViewType: StreamViewType?

    public init (
        streamEnabled: Bool? = nil,
        streamViewType: StreamViewType? = nil
    )
    {
        self.streamEnabled = streamEnabled
        self.streamViewType = streamViewType
    }
}

public enum StreamViewType {
    case keysOnly
    case newAndOldImages
    case newImage
    case oldImage
    case sdkUnknown(String)
}

extension StreamViewType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [StreamViewType] {
        return [
            .keysOnly,
            .newAndOldImages,
            .newImage,
            .oldImage,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .keysOnly: return "KEYS_ONLY"
        case .newAndOldImages: return "NEW_AND_OLD_IMAGES"
        case .newImage: return "NEW_IMAGE"
        case .oldImage: return "OLD_IMAGE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = StreamViewType(rawValue: rawValue) ?? StreamViewType.sdkUnknown(rawValue)
    }
}

extension TableAlreadyExistsException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TableAlreadyExistsException(message: \(String(describing: message)))"}
}

extension TableAlreadyExistsException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TableAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A target table with the specified name already exists. </p>
public struct TableAlreadyExistsException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct TableAlreadyExistsExceptionBody: Equatable {
    public let message: String?
}

extension TableAlreadyExistsExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TableAutoScalingDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case replicas = "Replicas"
        case tableName = "TableName"
        case tableStatus = "TableStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let replicas = replicas {
            var replicasContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicas)
            for replicaautoscalingdescriptionlist0 in replicas {
                try replicasContainer.encode(replicaautoscalingdescriptionlist0)
            }
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let tableStatus = tableStatus {
            try encodeContainer.encode(tableStatus.rawValue, forKey: .tableStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let tableStatusDecoded = try containerValues.decodeIfPresent(TableStatus.self, forKey: .tableStatus)
        tableStatus = tableStatusDecoded
        let replicasContainer = try containerValues.decodeIfPresent([ReplicaAutoScalingDescription?].self, forKey: .replicas)
        var replicasDecoded0:[ReplicaAutoScalingDescription]? = nil
        if let replicasContainer = replicasContainer {
            replicasDecoded0 = [ReplicaAutoScalingDescription]()
            for structure0 in replicasContainer {
                if let structure0 = structure0 {
                    replicasDecoded0?.append(structure0)
                }
            }
        }
        replicas = replicasDecoded0
    }
}

extension TableAutoScalingDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TableAutoScalingDescription(replicas: \(String(describing: replicas)), tableName: \(String(describing: tableName)), tableStatus: \(String(describing: tableStatus)))"}
}

/// <p>Represents the auto scaling configuration for a global table.</p>
public struct TableAutoScalingDescription: Equatable {
    /// <p>Represents replicas of the global table.</p>
    public let replicas: [ReplicaAutoScalingDescription]?
    /// <p>The name of the table.</p>
    public let tableName: String?
    /// <p>The current state of the table:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CREATING</code> - The table is being created.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UPDATING</code> - The table is being updated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DELETING</code> - The table is being deleted.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ACTIVE</code> - The table is ready for use.</p>
    ///             </li>
    ///          </ul>
    public let tableStatus: TableStatus?

    public init (
        replicas: [ReplicaAutoScalingDescription]? = nil,
        tableName: String? = nil,
        tableStatus: TableStatus? = nil
    )
    {
        self.replicas = replicas
        self.tableName = tableName
        self.tableStatus = tableStatus
    }
}

extension TableDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case archivalSummary = "ArchivalSummary"
        case attributeDefinitions = "AttributeDefinitions"
        case billingModeSummary = "BillingModeSummary"
        case creationDateTime = "CreationDateTime"
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case globalTableVersion = "GlobalTableVersion"
        case itemCount = "ItemCount"
        case keySchema = "KeySchema"
        case latestStreamArn = "LatestStreamArn"
        case latestStreamLabel = "LatestStreamLabel"
        case localSecondaryIndexes = "LocalSecondaryIndexes"
        case provisionedThroughput = "ProvisionedThroughput"
        case replicas = "Replicas"
        case restoreSummary = "RestoreSummary"
        case sSEDescription = "SSEDescription"
        case streamSpecification = "StreamSpecification"
        case tableArn = "TableArn"
        case tableId = "TableId"
        case tableName = "TableName"
        case tableSizeBytes = "TableSizeBytes"
        case tableStatus = "TableStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let archivalSummary = archivalSummary {
            try encodeContainer.encode(archivalSummary, forKey: .archivalSummary)
        }
        if let attributeDefinitions = attributeDefinitions {
            var attributeDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributeDefinitions)
            for attributedefinitions0 in attributeDefinitions {
                try attributeDefinitionsContainer.encode(attributedefinitions0)
            }
        }
        if let billingModeSummary = billingModeSummary {
            try encodeContainer.encode(billingModeSummary, forKey: .billingModeSummary)
        }
        if let creationDateTime = creationDateTime {
            try encodeContainer.encode(creationDateTime.timeIntervalSince1970, forKey: .creationDateTime)
        }
        if let globalSecondaryIndexes = globalSecondaryIndexes {
            var globalSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexes)
            for globalsecondaryindexdescriptionlist0 in globalSecondaryIndexes {
                try globalSecondaryIndexesContainer.encode(globalsecondaryindexdescriptionlist0)
            }
        }
        if let globalTableVersion = globalTableVersion {
            try encodeContainer.encode(globalTableVersion, forKey: .globalTableVersion)
        }
        if itemCount != 0 {
            try encodeContainer.encode(itemCount, forKey: .itemCount)
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for keyschema0 in keySchema {
                try keySchemaContainer.encode(keyschema0)
            }
        }
        if let latestStreamArn = latestStreamArn {
            try encodeContainer.encode(latestStreamArn, forKey: .latestStreamArn)
        }
        if let latestStreamLabel = latestStreamLabel {
            try encodeContainer.encode(latestStreamLabel, forKey: .latestStreamLabel)
        }
        if let localSecondaryIndexes = localSecondaryIndexes {
            var localSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .localSecondaryIndexes)
            for localsecondaryindexdescriptionlist0 in localSecondaryIndexes {
                try localSecondaryIndexesContainer.encode(localsecondaryindexdescriptionlist0)
            }
        }
        if let provisionedThroughput = provisionedThroughput {
            try encodeContainer.encode(provisionedThroughput, forKey: .provisionedThroughput)
        }
        if let replicas = replicas {
            var replicasContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicas)
            for replicadescriptionlist0 in replicas {
                try replicasContainer.encode(replicadescriptionlist0)
            }
        }
        if let restoreSummary = restoreSummary {
            try encodeContainer.encode(restoreSummary, forKey: .restoreSummary)
        }
        if let sSEDescription = sSEDescription {
            try encodeContainer.encode(sSEDescription, forKey: .sSEDescription)
        }
        if let streamSpecification = streamSpecification {
            try encodeContainer.encode(streamSpecification, forKey: .streamSpecification)
        }
        if let tableArn = tableArn {
            try encodeContainer.encode(tableArn, forKey: .tableArn)
        }
        if let tableId = tableId {
            try encodeContainer.encode(tableId, forKey: .tableId)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if tableSizeBytes != 0 {
            try encodeContainer.encode(tableSizeBytes, forKey: .tableSizeBytes)
        }
        if let tableStatus = tableStatus {
            try encodeContainer.encode(tableStatus.rawValue, forKey: .tableStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeDefinitionsContainer = try containerValues.decodeIfPresent([AttributeDefinition?].self, forKey: .attributeDefinitions)
        var attributeDefinitionsDecoded0:[AttributeDefinition]? = nil
        if let attributeDefinitionsContainer = attributeDefinitionsContainer {
            attributeDefinitionsDecoded0 = [AttributeDefinition]()
            for structure0 in attributeDefinitionsContainer {
                if let structure0 = structure0 {
                    attributeDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        attributeDefinitions = attributeDefinitionsDecoded0
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let tableStatusDecoded = try containerValues.decodeIfPresent(TableStatus.self, forKey: .tableStatus)
        tableStatus = tableStatusDecoded
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(ProvisionedThroughputDescription.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
        let tableSizeBytesDecoded = try containerValues.decode(Int.self, forKey: .tableSizeBytes)
        tableSizeBytes = tableSizeBytesDecoded
        let itemCountDecoded = try containerValues.decode(Int.self, forKey: .itemCount)
        itemCount = itemCountDecoded
        let tableArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableArn)
        tableArn = tableArnDecoded
        let tableIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableId)
        tableId = tableIdDecoded
        let billingModeSummaryDecoded = try containerValues.decodeIfPresent(BillingModeSummary.self, forKey: .billingModeSummary)
        billingModeSummary = billingModeSummaryDecoded
        let localSecondaryIndexesContainer = try containerValues.decodeIfPresent([LocalSecondaryIndexDescription?].self, forKey: .localSecondaryIndexes)
        var localSecondaryIndexesDecoded0:[LocalSecondaryIndexDescription]? = nil
        if let localSecondaryIndexesContainer = localSecondaryIndexesContainer {
            localSecondaryIndexesDecoded0 = [LocalSecondaryIndexDescription]()
            for structure0 in localSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    localSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        localSecondaryIndexes = localSecondaryIndexesDecoded0
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([GlobalSecondaryIndexDescription?].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0:[GlobalSecondaryIndexDescription]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [GlobalSecondaryIndexDescription]()
            for structure0 in globalSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
        let streamSpecificationDecoded = try containerValues.decodeIfPresent(StreamSpecification.self, forKey: .streamSpecification)
        streamSpecification = streamSpecificationDecoded
        let latestStreamLabelDecoded = try containerValues.decodeIfPresent(String.self, forKey: .latestStreamLabel)
        latestStreamLabel = latestStreamLabelDecoded
        let latestStreamArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .latestStreamArn)
        latestStreamArn = latestStreamArnDecoded
        let globalTableVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .globalTableVersion)
        globalTableVersion = globalTableVersionDecoded
        let replicasContainer = try containerValues.decodeIfPresent([ReplicaDescription?].self, forKey: .replicas)
        var replicasDecoded0:[ReplicaDescription]? = nil
        if let replicasContainer = replicasContainer {
            replicasDecoded0 = [ReplicaDescription]()
            for structure0 in replicasContainer {
                if let structure0 = structure0 {
                    replicasDecoded0?.append(structure0)
                }
            }
        }
        replicas = replicasDecoded0
        let restoreSummaryDecoded = try containerValues.decodeIfPresent(RestoreSummary.self, forKey: .restoreSummary)
        restoreSummary = restoreSummaryDecoded
        let sSEDescriptionDecoded = try containerValues.decodeIfPresent(SSEDescription.self, forKey: .sSEDescription)
        sSEDescription = sSEDescriptionDecoded
        let archivalSummaryDecoded = try containerValues.decodeIfPresent(ArchivalSummary.self, forKey: .archivalSummary)
        archivalSummary = archivalSummaryDecoded
    }
}

extension TableDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TableDescription(archivalSummary: \(String(describing: archivalSummary)), attributeDefinitions: \(String(describing: attributeDefinitions)), billingModeSummary: \(String(describing: billingModeSummary)), creationDateTime: \(String(describing: creationDateTime)), globalSecondaryIndexes: \(String(describing: globalSecondaryIndexes)), globalTableVersion: \(String(describing: globalTableVersion)), itemCount: \(String(describing: itemCount)), keySchema: \(String(describing: keySchema)), latestStreamArn: \(String(describing: latestStreamArn)), latestStreamLabel: \(String(describing: latestStreamLabel)), localSecondaryIndexes: \(String(describing: localSecondaryIndexes)), provisionedThroughput: \(String(describing: provisionedThroughput)), replicas: \(String(describing: replicas)), restoreSummary: \(String(describing: restoreSummary)), sSEDescription: \(String(describing: sSEDescription)), streamSpecification: \(String(describing: streamSpecification)), tableArn: \(String(describing: tableArn)), tableId: \(String(describing: tableId)), tableName: \(String(describing: tableName)), tableSizeBytes: \(String(describing: tableSizeBytes)), tableStatus: \(String(describing: tableStatus)))"}
}

/// <p>Represents the properties of a table.</p>
public struct TableDescription: Equatable {
    /// <p>Contains information about the table archive.</p>
    public let archivalSummary: ArchivalSummary?
    /// <p>An array of <code>AttributeDefinition</code> objects. Each of these objects describes one attribute
    ///       in the table and index key schema.</p>
    ///          <p>Each <code>AttributeDefinition</code> object in this array is composed of:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>AttributeName</code> - The name of the attribute.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>AttributeType</code> - The data type for the attribute.</p>
    ///             </li>
    ///          </ul>
    public let attributeDefinitions: [AttributeDefinition]?
    /// <p>Contains the details for the read/write capacity mode.</p>
    public let billingModeSummary: BillingModeSummary?
    /// <p>The date and time when the table was created, in <a href="http://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    public let creationDateTime: Date?
    /// <p>The global secondary indexes, if any, on the table. Each index is scoped to a given partition key value. Each element is composed of:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Backfilling</code> - If true, then the index is currently in the backfilling
    ///                phase. Backfilling occurs only when a new global secondary index is added to the
    ///                table. It is the process by which DynamoDB populates the new index with data from the
    ///                table. (This attribute does not appear for indexes that were created during a
    ///                   <code>CreateTable</code> operation.) </p>
    ///                <p> You can delete an index that is being created during the <code>Backfilling</code>
    ///                phase when <code>IndexStatus</code> is set to CREATING and <code>Backfilling</code>
    ///                is true. You can't delete the index that is being created when
    ///                   <code>IndexStatus</code> is set to CREATING and <code>Backfilling</code> is false.
    ///                (This attribute does not appear for indexes that were created during a
    ///                   <code>CreateTable</code> operation.)</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>IndexName</code> - The name of the global secondary index.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>IndexSizeBytes</code> - The total size of the global secondary index, in bytes. DynamoDB updates this value approximately every six
    ///       hours. Recent changes might not be reflected in this value.
    ///       </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>IndexStatus</code> - The current status of the global secondary index:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>CREATING</code> - The index is being created.</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>UPDATING</code> - The index is being updated.</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>DELETING</code> - The index is being deleted.</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>ACTIVE</code> - The index is ready for use.</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ItemCount</code> - The number of items in the global secondary index. DynamoDB updates this value approximately every six
    ///       hours. Recent changes might not be reflected in this value.
    ///       </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>KeySchema</code> - Specifies the complete index key schema. The attribute names in the
    ///           key schema must be between 1 and 255 characters (inclusive). The key schema must begin
    ///           with the same partition key as the table.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Projection</code> - Specifies
    ///           attributes that are copied (projected) from the table into the index. These are in
    ///           addition to the primary key attributes and index key
    ///           attributes, which are automatically projected. Each
    ///           attribute specification is composed of:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>ProjectionType</code> - One
    ///               of the following:</p>
    ///                      <ul>
    ///                         <li>
    ///                            <p>
    ///                               <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the
    ///                   index.</p>
    ///                         </li>
    ///                         <li>
    ///                            <p>
    ///                               <code>INCLUDE</code> - In addition to the attributes described in <code>KEYS_ONLY</code>, the secondary index will include other non-key attributes that you specify.</p>
    ///                         </li>
    ///                         <li>
    ///                            <p>
    ///                               <code>ALL</code> - All of the table attributes are projected into the
    ///                   index.</p>
    ///                         </li>
    ///                      </ul>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>NonKeyAttributes</code> - A list of one or more non-key attribute names that are
    ///               projected into the secondary index. The total count of attributes provided in <code>NonKeyAttributes</code>, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ProvisionedThroughput</code> - The provisioned throughput settings for the global secondary index,
    ///           consisting of read and write capacity units, along with data about increases and
    ///           decreases. </p>
    ///             </li>
    ///          </ul>
    ///          <p>If the table is in the <code>DELETING</code> state, no information about indexes will be
    ///       returned.</p>
    public let globalSecondaryIndexes: [GlobalSecondaryIndexDescription]?
    /// <p>Represents the version of <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GlobalTables.html">global tables</a> in use, if the table is replicated across AWS Regions.</p>
    public let globalTableVersion: String?
    /// <p>The number of items in the specified table. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.</p>
    public let itemCount: Int
    /// <p>The primary key structure for the table. Each <code>KeySchemaElement</code> consists of:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>AttributeName</code> - The name of the attribute.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>KeyType</code> - The role of the attribute:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>HASH</code> -  partition key</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>RANGE</code> - sort key</p>
    ///                   </li>
    ///                </ul>
    ///                <note>
    ///                   <p>The partition key of an item is also known as its <i>hash attribute</i>.  The
    ///         term "hash attribute" derives from DynamoDB's usage of an internal hash function to
    ///         evenly distribute data items across partitions, based on their partition key values.</p>
    ///                   <p>The sort key of an item is also known as its <i>range attribute</i>.
    ///         The term "range attribute" derives from the way DynamoDB stores items with the same
    ///         partition key physically close together, in sorted order by the sort key value.</p>
    ///                </note>
    ///
    ///             </li>
    ///          </ul>
    ///          <p>For more information about primary keys, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey">Primary Key</a> in the
    ///       <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let keySchema: [KeySchemaElement]?
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.</p>
    public let latestStreamArn: String?
    /// <p>A timestamp, in ISO 8601 format, for this stream.</p>
    ///
    ///          <p>Note that <code>LatestStreamLabel</code> is not a unique identifier for the stream, because it is possible that a stream from another table might have the same timestamp. However, the combination of the following three elements is guaranteed to be unique:</p>
    ///          <ul>
    ///             <li>
    ///                <p>AWS customer ID</p>
    ///             </li>
    ///             <li>
    ///                <p>Table name</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>StreamLabel</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let latestStreamLabel: String?
    /// <p>Represents one or more local secondary indexes on the table. Each index is scoped to a given partition key value. Tables with one or more local secondary indexes are subject to an item collection size limit, where the amount of data within a given item collection cannot exceed 10 GB. Each element is composed of:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>IndexName</code> - The name of the local secondary index.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>KeySchema</code> - Specifies the complete index key schema. The attribute names in the
    ///           key schema must be between 1 and 255 characters (inclusive). The key schema must begin
    ///           with the same partition key as the table.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Projection</code> - Specifies
    ///           attributes that are copied (projected) from the table into the index. These are in
    ///           addition to the primary key attributes and index key
    ///           attributes, which are automatically projected. Each
    ///           attribute specification is composed of:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>ProjectionType</code> - One
    ///               of the following:</p>
    ///                      <ul>
    ///                         <li>
    ///                            <p>
    ///                               <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the
    ///                   index.</p>
    ///                         </li>
    ///                         <li>
    ///                            <p>
    ///                               <code>INCLUDE</code> - Only the specified table attributes are projected
    ///                            into the index. The list of projected attributes is in
    ///                               <code>NonKeyAttributes</code>.</p>
    ///                         </li>
    ///                         <li>
    ///                            <p>
    ///                               <code>ALL</code> - All of the table attributes are projected into the
    ///                   index.</p>
    ///                         </li>
    ///                      </ul>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>NonKeyAttributes</code> - A list of one or more non-key attribute names that are
    ///               projected into the secondary index. The total count of attributes provided in <code>NonKeyAttributes</code>, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>IndexSizeBytes</code> - Represents the total size of the index, in bytes. DynamoDB updates
    ///           this value approximately every six hours. Recent changes might not be reflected in this
    ///           value.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ItemCount</code> - Represents the number of items in the index. DynamoDB updates this value
    ///           approximately every six hours. Recent changes might not be reflected in this value.</p>
    ///             </li>
    ///          </ul>
    ///          <p>If the table is in the <code>DELETING</code> state, no information about indexes will be
    ///       returned.</p>
    public let localSecondaryIndexes: [LocalSecondaryIndexDescription]?
    /// <p>The provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.</p>
    public let provisionedThroughput: ProvisionedThroughputDescription?
    /// <p>Represents replicas of the table.</p>
    public let replicas: [ReplicaDescription]?
    /// <p>Contains details for the restore.</p>
    public let restoreSummary: RestoreSummary?
    /// <p>The description of the server-side encryption status on the specified table.</p>
    public let sSEDescription: SSEDescription?
    /// <p>The current DynamoDB Streams configuration for the table.</p>
    public let streamSpecification: StreamSpecification?
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the table.</p>
    public let tableArn: String?
    /// <p>Unique identifier for the table for which the backup was created. </p>
    public let tableId: String?
    /// <p>The name of the table.</p>
    public let tableName: String?
    /// <p>The total size of the specified table, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.</p>
    public let tableSizeBytes: Int
    /// <p>The current state of the table:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CREATING</code> - The table is being created.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UPDATING</code> - The table is being updated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DELETING</code> - The table is being deleted.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ACTIVE</code> - The table is ready for use.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>INACCESSIBLE_ENCRYPTION_CREDENTIALS</code> - The AWS KMS
    ///                key used to encrypt the table in inaccessible. Table operations
    ///                may fail due to failure to use the AWS KMS key. DynamoDB will
    ///                initiate the table archival process when a table's AWS KMS key
    ///                remains inaccessible for more than seven days.
    ///             </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ARCHIVING</code> - The table is being archived. Operations
    ///                are not allowed until archival is complete.
    ///             </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ARCHIVED</code> - The table has been archived. See the
    ///                ArchivalReason for more information.
    ///             </p>
    ///             </li>
    ///          </ul>
    public let tableStatus: TableStatus?

    public init (
        archivalSummary: ArchivalSummary? = nil,
        attributeDefinitions: [AttributeDefinition]? = nil,
        billingModeSummary: BillingModeSummary? = nil,
        creationDateTime: Date? = nil,
        globalSecondaryIndexes: [GlobalSecondaryIndexDescription]? = nil,
        globalTableVersion: String? = nil,
        itemCount: Int = 0,
        keySchema: [KeySchemaElement]? = nil,
        latestStreamArn: String? = nil,
        latestStreamLabel: String? = nil,
        localSecondaryIndexes: [LocalSecondaryIndexDescription]? = nil,
        provisionedThroughput: ProvisionedThroughputDescription? = nil,
        replicas: [ReplicaDescription]? = nil,
        restoreSummary: RestoreSummary? = nil,
        sSEDescription: SSEDescription? = nil,
        streamSpecification: StreamSpecification? = nil,
        tableArn: String? = nil,
        tableId: String? = nil,
        tableName: String? = nil,
        tableSizeBytes: Int = 0,
        tableStatus: TableStatus? = nil
    )
    {
        self.archivalSummary = archivalSummary
        self.attributeDefinitions = attributeDefinitions
        self.billingModeSummary = billingModeSummary
        self.creationDateTime = creationDateTime
        self.globalSecondaryIndexes = globalSecondaryIndexes
        self.globalTableVersion = globalTableVersion
        self.itemCount = itemCount
        self.keySchema = keySchema
        self.latestStreamArn = latestStreamArn
        self.latestStreamLabel = latestStreamLabel
        self.localSecondaryIndexes = localSecondaryIndexes
        self.provisionedThroughput = provisionedThroughput
        self.replicas = replicas
        self.restoreSummary = restoreSummary
        self.sSEDescription = sSEDescription
        self.streamSpecification = streamSpecification
        self.tableArn = tableArn
        self.tableId = tableId
        self.tableName = tableName
        self.tableSizeBytes = tableSizeBytes
        self.tableStatus = tableStatus
    }
}

extension TableInUseException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TableInUseException(message: \(String(describing: message)))"}
}

extension TableInUseException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TableInUseExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A target table with the specified name is either being created or deleted. </p>
public struct TableInUseException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct TableInUseExceptionBody: Equatable {
    public let message: String?
}

extension TableInUseExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TableNotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TableNotFoundException(message: \(String(describing: message)))"}
}

extension TableNotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TableNotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A source table with the name <code>TableName</code> does not currently exist within the subscriber's account.</p>
public struct TableNotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct TableNotFoundExceptionBody: Equatable {
    public let message: String?
}

extension TableNotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum TableStatus {
    case active
    case archived
    case archiving
    case creating
    case deleting
    case inaccessibleEncryptionCredentials
    case updating
    case sdkUnknown(String)
}

extension TableStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TableStatus] {
        return [
            .active,
            .archived,
            .archiving,
            .creating,
            .deleting,
            .inaccessibleEncryptionCredentials,
            .updating,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .active: return "ACTIVE"
        case .archived: return "ARCHIVED"
        case .archiving: return "ARCHIVING"
        case .creating: return "CREATING"
        case .deleting: return "DELETING"
        case .inaccessibleEncryptionCredentials: return "INACCESSIBLE_ENCRYPTION_CREDENTIALS"
        case .updating: return "UPDATING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TableStatus(rawValue: rawValue) ?? TableStatus.sdkUnknown(rawValue)
    }
}

extension Tag: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
    }
}

extension Tag: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Tag(key: \(String(describing: key)), value: \(String(describing: value)))"}
}

/// <p>Describes a tag. A tag is a key-value pair. You can add up to 50 tags to a single DynamoDB table.
///       </p>
///          <p> AWS-assigned tag names and values are automatically assigned the <code>aws:</code>
///             prefix, which the user cannot assign. AWS-assigned tag names do not count towards the
///             tag limit of 50. User-assigned tag names have the prefix <code>user:</code> in the Cost
///             Allocation Report. You cannot backdate the application of a tag. </p>
///          <p>For an overview on tagging DynamoDB resources, see
///       <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging for DynamoDB</a>
///       in the <i>Amazon DynamoDB Developer Guide</i>.</p>
public struct Tag: Equatable {
    /// <p>The key of the tag. Tag keys are case sensitive. Each DynamoDB table can only have up to
    ///             one tag with the same key. If you try to add an existing tag (same key), the existing
    ///             tag value will be updated to the new value. </p>
    public let key: String?
    /// <p>The value of the tag. Tag values are case-sensitive and can be null.</p>
    public let value: String?

    public init (
        key: String? = nil,
        value: String? = nil
    )
    {
        self.key = key
        self.value = value
    }
}

public struct TagResourceInputBodyMiddleware: Middleware {
    public let id: String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagResourceInput>
    public typealias MOutput = OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagResourceOutputError>
}

extension TagResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagResourceInput(resourceArn: \(String(describing: resourceArn)), tags: \(String(describing: tags)))"}
}

extension TagResourceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct TagResourceInputHeadersMiddleware: Middleware {
    public let id: String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagResourceInput>
    public typealias MOutput = OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagResourceInput>
    public typealias MOutput = OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagResourceOutputError>
}

public struct TagResourceInput: Equatable {
    /// <p>Identifies the Amazon DynamoDB resource to which tags should be added. This value is an Amazon Resource Name (ARN).</p>
    public let resourceArn: String?
    /// <p>The tags to be assigned to the Amazon DynamoDB resource.</p>
    public let tags: [Tag]?

    public init (
        resourceArn: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Equatable {
    public let resourceArn: String?
    public let tags: [Tag]?
}

extension TagResourceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagResourceOutputResponse()"}
}

extension TagResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Equatable {

    public init() {}
}

struct TagResourceOutputResponseBody: Equatable {
}

extension TagResourceOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension TimeToLiveDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributeName = "AttributeName"
        case timeToLiveStatus = "TimeToLiveStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeName = attributeName {
            try encodeContainer.encode(attributeName, forKey: .attributeName)
        }
        if let timeToLiveStatus = timeToLiveStatus {
            try encodeContainer.encode(timeToLiveStatus.rawValue, forKey: .timeToLiveStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeToLiveStatusDecoded = try containerValues.decodeIfPresent(TimeToLiveStatus.self, forKey: .timeToLiveStatus)
        timeToLiveStatus = timeToLiveStatusDecoded
        let attributeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
    }
}

extension TimeToLiveDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TimeToLiveDescription(attributeName: \(String(describing: attributeName)), timeToLiveStatus: \(String(describing: timeToLiveStatus)))"}
}

/// <p>The description of the Time to Live (TTL) status on the specified table. </p>
public struct TimeToLiveDescription: Equatable {
    /// <p> The name of the TTL attribute for items in the table.</p>
    public let attributeName: String?
    /// <p> The TTL status for the table.</p>
    public let timeToLiveStatus: TimeToLiveStatus?

    public init (
        attributeName: String? = nil,
        timeToLiveStatus: TimeToLiveStatus? = nil
    )
    {
        self.attributeName = attributeName
        self.timeToLiveStatus = timeToLiveStatus
    }
}

extension TimeToLiveSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributeName = "AttributeName"
        case enabled = "Enabled"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeName = attributeName {
            try encodeContainer.encode(attributeName, forKey: .attributeName)
        }
        if let enabled = enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let attributeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
    }
}

extension TimeToLiveSpecification: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TimeToLiveSpecification(attributeName: \(String(describing: attributeName)), enabled: \(String(describing: enabled)))"}
}

/// <p>Represents the settings used to enable or disable Time to Live (TTL) for the specified
///             table.</p>
public struct TimeToLiveSpecification: Equatable {
    /// <p>The name of the TTL attribute used to store the expiration time for items in the
    ///             table.</p>
    public let attributeName: String?
    /// <p>Indicates whether TTL is to be enabled (true) or disabled (false) on the table.</p>
    public let enabled: Bool?

    public init (
        attributeName: String? = nil,
        enabled: Bool? = nil
    )
    {
        self.attributeName = attributeName
        self.enabled = enabled
    }
}

public enum TimeToLiveStatus {
    case disabled
    case disabling
    case enabled
    case enabling
    case sdkUnknown(String)
}

extension TimeToLiveStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TimeToLiveStatus] {
        return [
            .disabled,
            .disabling,
            .enabled,
            .enabling,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disabled: return "DISABLED"
        case .disabling: return "DISABLING"
        case .enabled: return "ENABLED"
        case .enabling: return "ENABLING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TimeToLiveStatus(rawValue: rawValue) ?? TimeToLiveStatus.sdkUnknown(rawValue)
    }
}

extension TransactGetItem: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case `get` = "Get"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let `get` = `get` {
            try encodeContainer.encode(`get`, forKey: .`get`)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let getDecoded = try containerValues.decodeIfPresent(Get.self, forKey: .get)
        `get` = getDecoded
    }
}

extension TransactGetItem: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TransactGetItem(get: \(String(describing: `get`)))"}
}

/// <p>Specifies an item to be retrieved as part of the transaction.</p>
public struct TransactGetItem: Equatable {
    /// <p>Contains the primary key that identifies the item to get, together
    ///         with the name of the table that contains the item, and optionally
    ///         the specific attributes of the item to retrieve.</p>
    public let `get`: Get?

    public init (
        `get`: Get? = nil
    )
    {
        self.`get` = `get`
    }
}

public struct TransactGetItemsInputBodyMiddleware: Middleware {
    public let id: String = "TransactGetItemsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TransactGetItemsInput>,
                  next: H) -> Swift.Result<OperationOutput<TransactGetItemsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TransactGetItemsInput>
    public typealias MOutput = OperationOutput<TransactGetItemsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TransactGetItemsOutputError>
}

extension TransactGetItemsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TransactGetItemsInput(returnConsumedCapacity: \(String(describing: returnConsumedCapacity)), transactItems: \(String(describing: transactItems)))"}
}

extension TransactGetItemsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case transactItems = "TransactItems"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let returnConsumedCapacity = returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let transactItems = transactItems {
            var transactItemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .transactItems)
            for transactgetitemlist0 in transactItems {
                try transactItemsContainer.encode(transactgetitemlist0)
            }
        }
    }
}

public struct TransactGetItemsInputHeadersMiddleware: Middleware {
    public let id: String = "TransactGetItemsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TransactGetItemsInput>,
                  next: H) -> Swift.Result<OperationOutput<TransactGetItemsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TransactGetItemsInput>
    public typealias MOutput = OperationOutput<TransactGetItemsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TransactGetItemsOutputError>
}

public struct TransactGetItemsInputQueryItemMiddleware: Middleware {
    public let id: String = "TransactGetItemsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TransactGetItemsInput>,
                  next: H) -> Swift.Result<OperationOutput<TransactGetItemsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TransactGetItemsInput>
    public typealias MOutput = OperationOutput<TransactGetItemsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TransactGetItemsOutputError>
}

public struct TransactGetItemsInput: Equatable {
    /// <p>A value of <code>TOTAL</code> causes consumed capacity information
    ///          to be returned, and a value of <code>NONE</code> prevents that information
    ///          from being returned. No other value is valid.</p>
    public let returnConsumedCapacity: ReturnConsumedCapacity?
    /// <p>An ordered array of up to 25 <code>TransactGetItem</code> objects,
    ///          each of which contains a <code>Get</code> structure.</p>
    public let transactItems: [TransactGetItem]?

    public init (
        returnConsumedCapacity: ReturnConsumedCapacity? = nil,
        transactItems: [TransactGetItem]? = nil
    )
    {
        self.returnConsumedCapacity = returnConsumedCapacity
        self.transactItems = transactItems
    }
}

struct TransactGetItemsInputBody: Equatable {
    public let transactItems: [TransactGetItem]?
    public let returnConsumedCapacity: ReturnConsumedCapacity?
}

extension TransactGetItemsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case transactItems = "TransactItems"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transactItemsContainer = try containerValues.decodeIfPresent([TransactGetItem?].self, forKey: .transactItems)
        var transactItemsDecoded0:[TransactGetItem]? = nil
        if let transactItemsContainer = transactItemsContainer {
            transactItemsDecoded0 = [TransactGetItem]()
            for structure0 in transactItemsContainer {
                if let structure0 = structure0 {
                    transactItemsDecoded0?.append(structure0)
                }
            }
        }
        transactItems = transactItemsDecoded0
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
    }
}

extension TransactGetItemsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TransactGetItemsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TransactionCanceledException" : self = .transactionCanceledException(try TransactionCanceledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TransactGetItemsOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case requestLimitExceeded(RequestLimitExceeded)
    case resourceNotFoundException(ResourceNotFoundException)
    case transactionCanceledException(TransactionCanceledException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TransactGetItemsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TransactGetItemsOutputResponse(consumedCapacity: \(String(describing: consumedCapacity)), responses: \(String(describing: responses)))"}
}

extension TransactGetItemsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TransactGetItemsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.consumedCapacity = output.consumedCapacity
            self.responses = output.responses
        } else {
            self.consumedCapacity = nil
            self.responses = nil
        }
    }
}

public struct TransactGetItemsOutputResponse: Equatable {
    /// <p>If the <i>ReturnConsumedCapacity</i> value was <code>TOTAL</code>,
    ///          this is an array of <code>ConsumedCapacity</code> objects, one for each table
    ///          addressed by <code>TransactGetItem</code> objects in the <i>TransactItems</i>
    ///          parameter. These <code>ConsumedCapacity</code> objects report the read-capacity
    ///          units consumed by the <code>TransactGetItems</code> call in that table.</p>
    public let consumedCapacity: [ConsumedCapacity]?
    /// <p>An ordered array of up to 25 <code>ItemResponse</code> objects, each of which corresponds
    ///          to the <code>TransactGetItem</code> object in the same position in the
    ///          <i>TransactItems</i> array. Each <code>ItemResponse</code> object
    ///          contains a Map of the name-value pairs that are the projected attributes of
    ///          the requested item.</p>
    ///          <p>If a requested item could not be retrieved, the corresponding <code>ItemResponse</code>
    ///        object is Null, or if the requested item has no projected attributes, the corresponding
    ///        <code>ItemResponse</code> object is an empty Map. </p>
    public let responses: [ItemResponse]?

    public init (
        consumedCapacity: [ConsumedCapacity]? = nil,
        responses: [ItemResponse]? = nil
    )
    {
        self.consumedCapacity = consumedCapacity
        self.responses = responses
    }
}

struct TransactGetItemsOutputResponseBody: Equatable {
    public let consumedCapacity: [ConsumedCapacity]?
    public let responses: [ItemResponse]?
}

extension TransactGetItemsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case consumedCapacity = "ConsumedCapacity"
        case responses = "Responses"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let consumedCapacityContainer = try containerValues.decodeIfPresent([ConsumedCapacity?].self, forKey: .consumedCapacity)
        var consumedCapacityDecoded0:[ConsumedCapacity]? = nil
        if let consumedCapacityContainer = consumedCapacityContainer {
            consumedCapacityDecoded0 = [ConsumedCapacity]()
            for structure0 in consumedCapacityContainer {
                if let structure0 = structure0 {
                    consumedCapacityDecoded0?.append(structure0)
                }
            }
        }
        consumedCapacity = consumedCapacityDecoded0
        let responsesContainer = try containerValues.decodeIfPresent([ItemResponse?].self, forKey: .responses)
        var responsesDecoded0:[ItemResponse]? = nil
        if let responsesContainer = responsesContainer {
            responsesDecoded0 = [ItemResponse]()
            for structure0 in responsesContainer {
                if let structure0 = structure0 {
                    responsesDecoded0?.append(structure0)
                }
            }
        }
        responses = responsesDecoded0
    }
}

extension TransactWriteItem: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case conditionCheck = "ConditionCheck"
        case delete = "Delete"
        case put = "Put"
        case update = "Update"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditionCheck = conditionCheck {
            try encodeContainer.encode(conditionCheck, forKey: .conditionCheck)
        }
        if let delete = delete {
            try encodeContainer.encode(delete, forKey: .delete)
        }
        if let put = put {
            try encodeContainer.encode(put, forKey: .put)
        }
        if let update = update {
            try encodeContainer.encode(update, forKey: .update)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conditionCheckDecoded = try containerValues.decodeIfPresent(ConditionCheck.self, forKey: .conditionCheck)
        conditionCheck = conditionCheckDecoded
        let putDecoded = try containerValues.decodeIfPresent(Put.self, forKey: .put)
        put = putDecoded
        let deleteDecoded = try containerValues.decodeIfPresent(Delete.self, forKey: .delete)
        delete = deleteDecoded
        let updateDecoded = try containerValues.decodeIfPresent(Update.self, forKey: .update)
        update = updateDecoded
    }
}

extension TransactWriteItem: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TransactWriteItem(conditionCheck: \(String(describing: conditionCheck)), delete: \(String(describing: delete)), put: \(String(describing: put)), update: \(String(describing: update)))"}
}

/// <p>A list of requests that can perform update, put, delete, or check operations on multiple items in one or more tables atomically.</p>
public struct TransactWriteItem: Equatable {
    /// <p>A request to perform a check item operation.</p>
    public let conditionCheck: ConditionCheck?
    /// <p>A request to perform a <code>DeleteItem</code> operation.</p>
    public let delete: Delete?
    /// <p>A request to perform a <code>PutItem</code> operation.</p>
    public let put: Put?
    /// <p>A request to perform an <code>UpdateItem</code> operation.</p>
    public let update: Update?

    public init (
        conditionCheck: ConditionCheck? = nil,
        delete: Delete? = nil,
        put: Put? = nil,
        update: Update? = nil
    )
    {
        self.conditionCheck = conditionCheck
        self.delete = delete
        self.put = put
        self.update = update
    }
}

public struct TransactWriteItemsInputBodyMiddleware: Middleware {
    public let id: String = "TransactWriteItemsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TransactWriteItemsInput>,
                  next: H) -> Swift.Result<OperationOutput<TransactWriteItemsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TransactWriteItemsInput>
    public typealias MOutput = OperationOutput<TransactWriteItemsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TransactWriteItemsOutputError>
}

extension TransactWriteItemsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TransactWriteItemsInput(clientRequestToken: \(String(describing: clientRequestToken)), returnConsumedCapacity: \(String(describing: returnConsumedCapacity)), returnItemCollectionMetrics: \(String(describing: returnItemCollectionMetrics)), transactItems: \(String(describing: transactItems)))"}
}

extension TransactWriteItemsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
        case transactItems = "TransactItems"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let returnConsumedCapacity = returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let returnItemCollectionMetrics = returnItemCollectionMetrics {
            try encodeContainer.encode(returnItemCollectionMetrics.rawValue, forKey: .returnItemCollectionMetrics)
        }
        if let transactItems = transactItems {
            var transactItemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .transactItems)
            for transactwriteitemlist0 in transactItems {
                try transactItemsContainer.encode(transactwriteitemlist0)
            }
        }
    }
}

public struct TransactWriteItemsInputHeadersMiddleware: Middleware {
    public let id: String = "TransactWriteItemsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TransactWriteItemsInput>,
                  next: H) -> Swift.Result<OperationOutput<TransactWriteItemsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TransactWriteItemsInput>
    public typealias MOutput = OperationOutput<TransactWriteItemsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TransactWriteItemsOutputError>
}

public struct TransactWriteItemsInputQueryItemMiddleware: Middleware {
    public let id: String = "TransactWriteItemsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TransactWriteItemsInput>,
                  next: H) -> Swift.Result<OperationOutput<TransactWriteItemsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TransactWriteItemsInput>
    public typealias MOutput = OperationOutput<TransactWriteItemsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TransactWriteItemsOutputError>
}

public struct TransactWriteItemsInput: Equatable {
    /// <p>Providing a <code>ClientRequestToken</code> makes the call to <code>TransactWriteItems</code>
    ///         idempotent, meaning that multiple identical calls have the same effect as one single call.</p>
    ///          <p>Although multiple identical calls using the same client request token produce the same
    ///             result on the server (no side effects), the responses to the calls might not be the
    ///             same. If the <code>ReturnConsumedCapacity></code> parameter is set, then the initial
    ///                 <code>TransactWriteItems</code> call returns the amount of write capacity units
    ///             consumed in making the changes. Subsequent <code>TransactWriteItems</code> calls with
    ///             the same client token return the number of read capacity units consumed in reading the
    ///             item.</p>
    ///          <p>A client request token is valid for 10 minutes after the first request that uses it is
    ///             completed. After 10 minutes, any request with the same client token is treated as a new
    ///             request. Do not resubmit the same request with the same client token for more than 10
    ///             minutes, or the result might not be idempotent.</p>
    ///          <p>If you submit a request with the same client token but a change in other parameters
    ///             within the 10-minute idempotency window, DynamoDB returns an
    ///                 <code>IdempotentParameterMismatch</code> exception.</p>
    public var clientRequestToken: String?
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    ///                <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    ///             </li>
    ///          </ul>
    public let returnConsumedCapacity: ReturnConsumedCapacity?
    /// <p>Determines whether item collection metrics are returned. If set to
    ///       <code>SIZE</code>, the response includes statistics about item collections (if any), that
    ///       were modified during the operation and are returned in the response.
    ///       If set to <code>NONE</code> (the default), no statistics are returned.
    ///       </p>
    public let returnItemCollectionMetrics: ReturnItemCollectionMetrics?
    /// <p>An ordered array of up to 25 <code>TransactWriteItem</code> objects, each of which
    ///             contains a <code>ConditionCheck</code>, <code>Put</code>, <code>Update</code>, or
    ///                 <code>Delete</code> object. These can operate on items in different tables, but the
    ///             tables must reside in the same AWS account and Region, and no two of them can operate on
    ///             the same item. </p>
    public let transactItems: [TransactWriteItem]?

    public init (
        clientRequestToken: String? = nil,
        returnConsumedCapacity: ReturnConsumedCapacity? = nil,
        returnItemCollectionMetrics: ReturnItemCollectionMetrics? = nil,
        transactItems: [TransactWriteItem]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.returnConsumedCapacity = returnConsumedCapacity
        self.returnItemCollectionMetrics = returnItemCollectionMetrics
        self.transactItems = transactItems
    }
}

struct TransactWriteItemsInputBody: Equatable {
    public let transactItems: [TransactWriteItem]?
    public let returnConsumedCapacity: ReturnConsumedCapacity?
    public let returnItemCollectionMetrics: ReturnItemCollectionMetrics?
    public let clientRequestToken: String?
}

extension TransactWriteItemsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
        case transactItems = "TransactItems"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transactItemsContainer = try containerValues.decodeIfPresent([TransactWriteItem?].self, forKey: .transactItems)
        var transactItemsDecoded0:[TransactWriteItem]? = nil
        if let transactItemsContainer = transactItemsContainer {
            transactItemsDecoded0 = [TransactWriteItem]()
            for structure0 in transactItemsContainer {
                if let structure0 = structure0 {
                    transactItemsDecoded0?.append(structure0)
                }
            }
        }
        transactItems = transactItemsDecoded0
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
        let returnItemCollectionMetricsDecoded = try containerValues.decodeIfPresent(ReturnItemCollectionMetrics.self, forKey: .returnItemCollectionMetrics)
        returnItemCollectionMetrics = returnItemCollectionMetricsDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension TransactWriteItemsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TransactWriteItemsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TransactionCanceledException" : self = .transactionCanceledException(try TransactionCanceledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TransactionInProgressException" : self = .transactionInProgressException(try TransactionInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TransactWriteItemsOutputError: Equatable {
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case requestLimitExceeded(RequestLimitExceeded)
    case resourceNotFoundException(ResourceNotFoundException)
    case transactionCanceledException(TransactionCanceledException)
    case transactionInProgressException(TransactionInProgressException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TransactWriteItemsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TransactWriteItemsOutputResponse(consumedCapacity: \(String(describing: consumedCapacity)), itemCollectionMetrics: \(String(describing: itemCollectionMetrics)))"}
}

extension TransactWriteItemsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TransactWriteItemsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.consumedCapacity = output.consumedCapacity
            self.itemCollectionMetrics = output.itemCollectionMetrics
        } else {
            self.consumedCapacity = nil
            self.itemCollectionMetrics = nil
        }
    }
}

public struct TransactWriteItemsOutputResponse: Equatable {
    /// <p>The capacity units consumed by the entire <code>TransactWriteItems</code>
    ///       operation. The values of the list are ordered according to
    ///       the ordering of the <code>TransactItems</code> request parameter.
    ///      </p>
    public let consumedCapacity: [ConsumedCapacity]?
    /// <p>A list of tables that were processed by <code>TransactWriteItems</code> and, for each
    ///             table, information about any item collections that were affected by individual
    ///                 <code>UpdateItem</code>, <code>PutItem</code>, or <code>DeleteItem</code>
    ///             operations. </p>
    public let itemCollectionMetrics: [String:[ItemCollectionMetrics]]?

    public init (
        consumedCapacity: [ConsumedCapacity]? = nil,
        itemCollectionMetrics: [String:[ItemCollectionMetrics]]? = nil
    )
    {
        self.consumedCapacity = consumedCapacity
        self.itemCollectionMetrics = itemCollectionMetrics
    }
}

struct TransactWriteItemsOutputResponseBody: Equatable {
    public let consumedCapacity: [ConsumedCapacity]?
    public let itemCollectionMetrics: [String:[ItemCollectionMetrics]]?
}

extension TransactWriteItemsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case consumedCapacity = "ConsumedCapacity"
        case itemCollectionMetrics = "ItemCollectionMetrics"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let consumedCapacityContainer = try containerValues.decodeIfPresent([ConsumedCapacity?].self, forKey: .consumedCapacity)
        var consumedCapacityDecoded0:[ConsumedCapacity]? = nil
        if let consumedCapacityContainer = consumedCapacityContainer {
            consumedCapacityDecoded0 = [ConsumedCapacity]()
            for structure0 in consumedCapacityContainer {
                if let structure0 = structure0 {
                    consumedCapacityDecoded0?.append(structure0)
                }
            }
        }
        consumedCapacity = consumedCapacityDecoded0
        let itemCollectionMetricsContainer = try containerValues.decodeIfPresent([String: [ItemCollectionMetrics?]?].self, forKey: .itemCollectionMetrics)
        var itemCollectionMetricsDecoded0: [String:[ItemCollectionMetrics]]? = nil
        if let itemCollectionMetricsContainer = itemCollectionMetricsContainer {
            itemCollectionMetricsDecoded0 = [String:[ItemCollectionMetrics]]()
            for (key0, itemcollectionmetricsmultiple0) in itemCollectionMetricsContainer {
                var itemcollectionmetricsmultiple0Decoded0: [ItemCollectionMetrics]? = nil
                if let itemcollectionmetricsmultiple0 = itemcollectionmetricsmultiple0 {
                    itemcollectionmetricsmultiple0Decoded0 = [ItemCollectionMetrics]()
                    for structure1 in itemcollectionmetricsmultiple0 {
                        if let structure1 = structure1 {
                            itemcollectionmetricsmultiple0Decoded0?.append(structure1)
                        }
                    }
                }
                itemCollectionMetricsDecoded0?[key0] = itemcollectionmetricsmultiple0Decoded0
            }
        }
        itemCollectionMetrics = itemCollectionMetricsDecoded0
    }
}

extension TransactionCanceledException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TransactionCanceledException(cancellationReasons: \(String(describing: cancellationReasons)), message: \(String(describing: message)))"}
}

extension TransactionCanceledException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TransactionCanceledExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cancellationReasons = output.cancellationReasons
            self.message = output.message
        } else {
            self.cancellationReasons = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The entire transaction request was canceled.</p>
///          <p>DynamoDB cancels a <code>TransactWriteItems</code> request under the following circumstances:</p>
///          <ul>
///             <li>
///                <p>A condition in one of the condition expressions is not met.</p>
///             </li>
///             <li>
///                <p>A table in the <code>TransactWriteItems</code> request is in a different account or region.</p>
///             </li>
///             <li>
///                <p>More than one action in the <code>TransactWriteItems</code> operation targets the same item.</p>
///             </li>
///             <li>
///                <p>There is insufficient provisioned capacity for the transaction to be completed.</p>
///             </li>
///             <li>
///                <p>An item size becomes too large (larger than 400 KB), or a local secondary index (LSI)
///         becomes too large, or a similar validation error occurs because of changes made by the transaction.</p>
///             </li>
///             <li>
///                <p>There is a user error, such as an invalid data format.</p>
///             </li>
///          </ul>
///
///          <p>DynamoDB cancels a <code>TransactGetItems</code> request under the following circumstances:</p>
///          <ul>
///             <li>
///                <p>There is an ongoing <code>TransactGetItems</code> operation that conflicts with a concurrent
///         <code>PutItem</code>, <code>UpdateItem</code>, <code>DeleteItem</code> or <code>TransactWriteItems</code> request.
///         In this case the <code>TransactGetItems</code> operation fails with a <code>TransactionCanceledException</code>.</p>
///             </li>
///             <li>
///                <p>A table in the <code>TransactGetItems</code> request is in a different account or region.</p>
///             </li>
///             <li>
///                <p>There is insufficient provisioned capacity for the transaction to be completed.</p>
///             </li>
///             <li>
///                <p>There is a user error, such as an invalid data format.</p>
///             </li>
///          </ul>
///
///          <note>
///             <p>If using Java, DynamoDB lists the cancellation reasons on the <code>CancellationReasons</code> property.  This property is not set for other languages.
///     Transaction cancellation reasons are ordered in the order of requested items, if an item has no error it will have <code>NONE</code> code and <code>Null</code> message.</p>
///          </note>
///          <p>Cancellation reason codes and possible error messages:</p>
///          <ul>
///             <li>
///                <p>No Errors:</p>
///                <ul>
///                   <li>
///                      <p>Code: <code>NONE</code>
///                      </p>
///                   </li>
///                   <li>
///                      <p>Message: <code>null</code>
///                      </p>
///                   </li>
///                </ul>
///             </li>
///             <li>
///                <p>Conditional Check Failed:</p>
///                <ul>
///                   <li>
///                      <p>Code: <code>ConditionalCheckFailed</code>
///                      </p>
///                   </li>
///                   <li>
///                      <p>Message: The conditional request failed. </p>
///                   </li>
///                </ul>
///             </li>
///             <li>
///                <p>Item Collection Size Limit Exceeded:</p>
///                <ul>
///                   <li>
///                      <p>Code: <code>ItemCollectionSizeLimitExceeded</code>
///                      </p>
///                   </li>
///                   <li>
///                      <p>Message: Collection size exceeded.</p>
///                   </li>
///                </ul>
///             </li>
///             <li>
///                <p>Transaction Conflict:</p>
///                <ul>
///                   <li>
///                      <p>Code: <code>TransactionConflict</code>
///                      </p>
///                   </li>
///                   <li>
///                      <p>Message: Transaction is ongoing for the item.</p>
///                   </li>
///                </ul>
///             </li>
///             <li>
///                <p>Provisioned Throughput Exceeded:</p>
///                <ul>
///                   <li>
///                      <p>Code: <code>ProvisionedThroughputExceeded</code>
///                      </p>
///                   </li>
///                   <li>
///                      <p>Messages: </p>
///                     <ul>
///                         <li>
///                            <p>The level of configured provisioned throughput for the table was exceeded. Consider increasing your provisioning level with the
///                             UpdateTable API.</p>
///                            <note>
///                               <p>This Message is received when provisioned throughput is exceeded is on a provisioned DynamoDB table.</p>
///                            </note>
///                         </li>
///                         <li>
///                            <p>The level of configured provisioned throughput for one or more global secondary indexes of the table was exceeded.
///                     Consider increasing your provisioning level for the under-provisioned global secondary indexes with the UpdateTable API.</p>
///                            <note>
///                               <p>This message is returned when provisioned throughput is exceeded is on a provisioned GSI.</p>
///                            </note>
///                         </li>
///                      </ul>
///
///                   </li>
///                </ul>
///             </li>
///             <li>
///                <p>Throttling Error:</p>
///                <ul>
///                   <li>
///                      <p>Code: <code>ThrottlingError</code>
///                      </p>
///                   </li>
///                   <li>
///                      <p>Messages: </p>
///                     <ul>
///                         <li>
///                            <p>Throughput exceeds the current capacity of your table or index.
///                             DynamoDB is automatically scaling your table or index so please try
///                             again shortly. If exceptions persist, check if you have a hot key:
///                             https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/bp-partition-key-design.html.</p>
///                            <note>
///                               <p>This message is returned when writes get throttled on an On-Demand table as DynamoDB is automatically scaling the table.</p>
///                            </note>
///                         </li>
///                         <li>
///                            <p>Throughput exceeds the current capacity for one or more global secondary indexes. DynamoDB is automatically scaling your index so
///                               please try again shortly.</p>
///                            <note>
///                               <p>This message is returned when when writes get throttled on an On-Demand GSI as DynamoDB is automatically scaling the GSI.</p>
///                            </note>
///                         </li>
///                      </ul>
///
///                   </li>
///                </ul>
///             </li>
///             <li>
///                <p>Validation Error:</p>
///                <ul>
///                   <li>
///                      <p>Code: <code>ValidationError</code>
///                      </p>
///                   </li>
///                   <li>
///                      <p>Messages: </p>
///                     <ul>
///                         <li>
///                            <p>One or more parameter values were invalid.</p>
///                         </li>
///                         <li>
///                            <p>The update expression attempted to update the secondary index key beyond allowed size limits.</p>
///                         </li>
///                         <li>
///                            <p>The update expression attempted to update the secondary index key to unsupported type.</p>
///                         </li>
///                         <li>
///                            <p>An operand in the update expression has an incorrect data type.</p>
///                         </li>
///                         <li>
///                            <p>Item size to update has exceeded the maximum allowed size.</p>
///                         </li>
///                         <li>
///                            <p>Number overflow. Attempting to store a number with magnitude larger than supported range.</p>
///                         </li>
///                         <li>
///                            <p>Type mismatch for attribute to update.</p>
///                         </li>
///                         <li>
///                            <p>Nesting Levels have exceeded supported limits.</p>
///                         </li>
///                         <li>
///                            <p>The document path provided in the update expression is invalid for update.</p>
///                         </li>
///                         <li>
///                            <p>The provided expression refers to an attribute that does not exist in the item.</p>
///                         </li>
///                      </ul>
///
///                   </li>
///                </ul>
///             </li>
///          </ul>
public struct TransactionCanceledException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>A list of cancellation reasons.</p>
    public var cancellationReasons: [CancellationReason]?
    public var message: String?

    public init (
        cancellationReasons: [CancellationReason]? = nil,
        message: String? = nil
    )
    {
        self.cancellationReasons = cancellationReasons
        self.message = message
    }
}

struct TransactionCanceledExceptionBody: Equatable {
    public let message: String?
    public let cancellationReasons: [CancellationReason]?
}

extension TransactionCanceledExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cancellationReasons = "CancellationReasons"
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let cancellationReasonsContainer = try containerValues.decodeIfPresent([CancellationReason?].self, forKey: .cancellationReasons)
        var cancellationReasonsDecoded0:[CancellationReason]? = nil
        if let cancellationReasonsContainer = cancellationReasonsContainer {
            cancellationReasonsDecoded0 = [CancellationReason]()
            for structure0 in cancellationReasonsContainer {
                if let structure0 = structure0 {
                    cancellationReasonsDecoded0?.append(structure0)
                }
            }
        }
        cancellationReasons = cancellationReasonsDecoded0
    }
}

extension TransactionConflictException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TransactionConflictException(message: \(String(describing: message)))"}
}

extension TransactionConflictException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TransactionConflictExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Operation was rejected because there is an ongoing transaction for the item.</p>
public struct TransactionConflictException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct TransactionConflictExceptionBody: Equatable {
    public let message: String?
}

extension TransactionConflictExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TransactionInProgressException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TransactionInProgressException(message: \(String(describing: message)))"}
}

extension TransactionInProgressException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TransactionInProgressExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The transaction with the given request token is already in progress.</p>
public struct TransactionInProgressException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct TransactionInProgressExceptionBody: Equatable {
    public let message: String?
}

extension TransactionInProgressExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct UntagResourceInputBodyMiddleware: Middleware {
    public let id: String = "UntagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagResourceInput>
    public typealias MOutput = OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagResourceOutputError>
}

extension UntagResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UntagResourceInput(resourceArn: \(String(describing: resourceArn)), tagKeys: \(String(describing: tagKeys)))"}
}

extension UntagResourceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkeylist0 in tagKeys {
                try tagKeysContainer.encode(tagkeylist0)
            }
        }
    }
}

public struct UntagResourceInputHeadersMiddleware: Middleware {
    public let id: String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagResourceInput>
    public typealias MOutput = OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagResourceInput>
    public typealias MOutput = OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagResourceOutputError>
}

public struct UntagResourceInput: Equatable {
    /// <p>The DynamoDB resource that the tags will be removed from. This value is an Amazon
    ///             Resource Name (ARN).</p>
    public let resourceArn: String?
    /// <p>A list of tag keys. Existing tags of the resource whose keys are members of this list
    ///             will be removed from the DynamoDB resource.</p>
    public let tagKeys: [String]?

    public init (
        resourceArn: String? = nil,
        tagKeys: [String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Equatable {
    public let resourceArn: String?
    public let tagKeys: [String]?
}

extension UntagResourceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UntagResourceOutputResponse()"}
}

extension UntagResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Equatable {

    public init() {}
}

struct UntagResourceOutputResponseBody: Equatable {
}

extension UntagResourceOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension Update: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case conditionExpression = "ConditionExpression"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case key = "Key"
        case returnValuesOnConditionCheckFailure = "ReturnValuesOnConditionCheckFailure"
        case tableName = "TableName"
        case updateExpression = "UpdateExpression"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditionExpression = conditionExpression {
            try encodeContainer.encode(conditionExpression, forKey: .conditionExpression)
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionattributenamemap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionattributenamemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeValues = expressionAttributeValues {
            var expressionAttributeValuesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expressionAttributeValues)
            for (dictKey0, expressionattributevaluemap0) in expressionAttributeValues {
                try expressionAttributeValuesContainer.encode(expressionattributevaluemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let key = key {
            var keyContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .key)
            for (dictKey0, key0) in key {
                try keyContainer.encode(key0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure {
            try encodeContainer.encode(returnValuesOnConditionCheckFailure.rawValue, forKey: .returnValuesOnConditionCheckFailure)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let updateExpression = updateExpression {
            try encodeContainer.encode(updateExpression, forKey: .updateExpression)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .key)
        var keyDecoded0: [String:AttributeValue]? = nil
        if let keyContainer = keyContainer {
            keyDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in keyContainer {
                if let attributevalue0 = attributevalue0 {
                    keyDecoded0?[key0] = attributevalue0
                }
            }
        }
        key = keyDecoded0
        let updateExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .updateExpression)
        updateExpression = updateExpressionDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let conditionExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .conditionExpression)
        conditionExpression = conditionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [String:String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [String:String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
        let expressionAttributeValuesContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .expressionAttributeValues)
        var expressionAttributeValuesDecoded0: [String:AttributeValue]? = nil
        if let expressionAttributeValuesContainer = expressionAttributeValuesContainer {
            expressionAttributeValuesDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in expressionAttributeValuesContainer {
                if let attributevalue0 = attributevalue0 {
                    expressionAttributeValuesDecoded0?[key0] = attributevalue0
                }
            }
        }
        expressionAttributeValues = expressionAttributeValuesDecoded0
        let returnValuesOnConditionCheckFailureDecoded = try containerValues.decodeIfPresent(ReturnValuesOnConditionCheckFailure.self, forKey: .returnValuesOnConditionCheckFailure)
        returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailureDecoded
    }
}

extension Update: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Update(conditionExpression: \(String(describing: conditionExpression)), expressionAttributeNames: \(String(describing: expressionAttributeNames)), expressionAttributeValues: \(String(describing: expressionAttributeValues)), key: \(String(describing: key)), returnValuesOnConditionCheckFailure: \(String(describing: returnValuesOnConditionCheckFailure)), tableName: \(String(describing: tableName)), updateExpression: \(String(describing: updateExpression)))"}
}

/// <p>Represents a request to perform an <code>UpdateItem</code> operation.</p>
public struct Update: Equatable {
    /// <p>A condition that must be satisfied in order for a conditional update to
    ///         succeed.</p>
    public let conditionExpression: String?
    /// <p>One or more substitution tokens for attribute names in an expression.</p>
    public let expressionAttributeNames: [String:String]?
    /// <p>One or more values that can be substituted in an expression.</p>
    public let expressionAttributeValues: [String:AttributeValue]?
    /// <p>The primary key of the item to be updated. Each element consists of
    ///       an attribute name and a value for that attribute.</p>
    public let key: [String:AttributeValue]?
    /// <p>Use <code>ReturnValuesOnConditionCheckFailure</code> to
    ///         get the item attributes if the <code>Update</code> condition fails.
    ///         For <code>ReturnValuesOnConditionCheckFailure</code>, the valid
    ///         values are: NONE, ALL_OLD, UPDATED_OLD, ALL_NEW, UPDATED_NEW.</p>
    public let returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure?
    /// <p>Name of the table for the <code>UpdateItem</code> request.</p>
    public let tableName: String?
    /// <p>An expression that defines one or more attributes to be updated,
    ///       the action to be performed on them, and new value(s) for them.</p>
    public let updateExpression: String?

    public init (
        conditionExpression: String? = nil,
        expressionAttributeNames: [String:String]? = nil,
        expressionAttributeValues: [String:AttributeValue]? = nil,
        key: [String:AttributeValue]? = nil,
        returnValuesOnConditionCheckFailure: ReturnValuesOnConditionCheckFailure? = nil,
        tableName: String? = nil,
        updateExpression: String? = nil
    )
    {
        self.conditionExpression = conditionExpression
        self.expressionAttributeNames = expressionAttributeNames
        self.expressionAttributeValues = expressionAttributeValues
        self.key = key
        self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
        self.tableName = tableName
        self.updateExpression = updateExpression
    }
}

public struct UpdateContinuousBackupsInputBodyMiddleware: Middleware {
    public let id: String = "UpdateContinuousBackupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateContinuousBackupsInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateContinuousBackupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateContinuousBackupsInput>
    public typealias MOutput = OperationOutput<UpdateContinuousBackupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateContinuousBackupsOutputError>
}

extension UpdateContinuousBackupsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateContinuousBackupsInput(pointInTimeRecoverySpecification: \(String(describing: pointInTimeRecoverySpecification)), tableName: \(String(describing: tableName)))"}
}

extension UpdateContinuousBackupsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case pointInTimeRecoverySpecification = "PointInTimeRecoverySpecification"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pointInTimeRecoverySpecification = pointInTimeRecoverySpecification {
            try encodeContainer.encode(pointInTimeRecoverySpecification, forKey: .pointInTimeRecoverySpecification)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

public struct UpdateContinuousBackupsInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateContinuousBackupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateContinuousBackupsInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateContinuousBackupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateContinuousBackupsInput>
    public typealias MOutput = OperationOutput<UpdateContinuousBackupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateContinuousBackupsOutputError>
}

public struct UpdateContinuousBackupsInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateContinuousBackupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateContinuousBackupsInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateContinuousBackupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateContinuousBackupsInput>
    public typealias MOutput = OperationOutput<UpdateContinuousBackupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateContinuousBackupsOutputError>
}

public struct UpdateContinuousBackupsInput: Equatable {
    /// <p>Represents the settings used to enable point in time recovery.</p>
    public let pointInTimeRecoverySpecification: PointInTimeRecoverySpecification?
    /// <p>The name of the table.</p>
    public let tableName: String?

    public init (
        pointInTimeRecoverySpecification: PointInTimeRecoverySpecification? = nil,
        tableName: String? = nil
    )
    {
        self.pointInTimeRecoverySpecification = pointInTimeRecoverySpecification
        self.tableName = tableName
    }
}

struct UpdateContinuousBackupsInputBody: Equatable {
    public let tableName: String?
    public let pointInTimeRecoverySpecification: PointInTimeRecoverySpecification?
}

extension UpdateContinuousBackupsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case pointInTimeRecoverySpecification = "PointInTimeRecoverySpecification"
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let pointInTimeRecoverySpecificationDecoded = try containerValues.decodeIfPresent(PointInTimeRecoverySpecification.self, forKey: .pointInTimeRecoverySpecification)
        pointInTimeRecoverySpecification = pointInTimeRecoverySpecificationDecoded
    }
}

extension UpdateContinuousBackupsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateContinuousBackupsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ContinuousBackupsUnavailableException" : self = .continuousBackupsUnavailableException(try ContinuousBackupsUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TableNotFoundException" : self = .tableNotFoundException(try TableNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateContinuousBackupsOutputError: Equatable {
    case continuousBackupsUnavailableException(ContinuousBackupsUnavailableException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case tableNotFoundException(TableNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateContinuousBackupsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateContinuousBackupsOutputResponse(continuousBackupsDescription: \(String(describing: continuousBackupsDescription)))"}
}

extension UpdateContinuousBackupsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateContinuousBackupsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.continuousBackupsDescription = output.continuousBackupsDescription
        } else {
            self.continuousBackupsDescription = nil
        }
    }
}

public struct UpdateContinuousBackupsOutputResponse: Equatable {
    /// <p>Represents the continuous backups and point in time recovery settings on the table.</p>
    public let continuousBackupsDescription: ContinuousBackupsDescription?

    public init (
        continuousBackupsDescription: ContinuousBackupsDescription? = nil
    )
    {
        self.continuousBackupsDescription = continuousBackupsDescription
    }
}

struct UpdateContinuousBackupsOutputResponseBody: Equatable {
    public let continuousBackupsDescription: ContinuousBackupsDescription?
}

extension UpdateContinuousBackupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case continuousBackupsDescription = "ContinuousBackupsDescription"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let continuousBackupsDescriptionDecoded = try containerValues.decodeIfPresent(ContinuousBackupsDescription.self, forKey: .continuousBackupsDescription)
        continuousBackupsDescription = continuousBackupsDescriptionDecoded
    }
}

public struct UpdateContributorInsightsInputBodyMiddleware: Middleware {
    public let id: String = "UpdateContributorInsightsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateContributorInsightsInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateContributorInsightsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateContributorInsightsInput>
    public typealias MOutput = OperationOutput<UpdateContributorInsightsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateContributorInsightsOutputError>
}

extension UpdateContributorInsightsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateContributorInsightsInput(contributorInsightsAction: \(String(describing: contributorInsightsAction)), indexName: \(String(describing: indexName)), tableName: \(String(describing: tableName)))"}
}

extension UpdateContributorInsightsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case contributorInsightsAction = "ContributorInsightsAction"
        case indexName = "IndexName"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contributorInsightsAction = contributorInsightsAction {
            try encodeContainer.encode(contributorInsightsAction.rawValue, forKey: .contributorInsightsAction)
        }
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

public struct UpdateContributorInsightsInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateContributorInsightsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateContributorInsightsInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateContributorInsightsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateContributorInsightsInput>
    public typealias MOutput = OperationOutput<UpdateContributorInsightsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateContributorInsightsOutputError>
}

public struct UpdateContributorInsightsInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateContributorInsightsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateContributorInsightsInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateContributorInsightsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateContributorInsightsInput>
    public typealias MOutput = OperationOutput<UpdateContributorInsightsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateContributorInsightsOutputError>
}

public struct UpdateContributorInsightsInput: Equatable {
    /// <p>Represents the contributor insights action.</p>
    public let contributorInsightsAction: ContributorInsightsAction?
    /// <p>The global secondary index name, if applicable.</p>
    public let indexName: String?
    /// <p>The name of the table.</p>
    public let tableName: String?

    public init (
        contributorInsightsAction: ContributorInsightsAction? = nil,
        indexName: String? = nil,
        tableName: String? = nil
    )
    {
        self.contributorInsightsAction = contributorInsightsAction
        self.indexName = indexName
        self.tableName = tableName
    }
}

struct UpdateContributorInsightsInputBody: Equatable {
    public let tableName: String?
    public let indexName: String?
    public let contributorInsightsAction: ContributorInsightsAction?
}

extension UpdateContributorInsightsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case contributorInsightsAction = "ContributorInsightsAction"
        case indexName = "IndexName"
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let contributorInsightsActionDecoded = try containerValues.decodeIfPresent(ContributorInsightsAction.self, forKey: .contributorInsightsAction)
        contributorInsightsAction = contributorInsightsActionDecoded
    }
}

extension UpdateContributorInsightsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateContributorInsightsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateContributorInsightsOutputError: Equatable {
    case internalServerError(InternalServerError)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateContributorInsightsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateContributorInsightsOutputResponse(contributorInsightsStatus: \(String(describing: contributorInsightsStatus)), indexName: \(String(describing: indexName)), tableName: \(String(describing: tableName)))"}
}

extension UpdateContributorInsightsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateContributorInsightsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.contributorInsightsStatus = output.contributorInsightsStatus
            self.indexName = output.indexName
            self.tableName = output.tableName
        } else {
            self.contributorInsightsStatus = nil
            self.indexName = nil
            self.tableName = nil
        }
    }
}

public struct UpdateContributorInsightsOutputResponse: Equatable {
    /// <p>The status of contributor insights</p>
    public let contributorInsightsStatus: ContributorInsightsStatus?
    /// <p>The name of the global secondary index, if applicable.</p>
    public let indexName: String?
    /// <p>The name of the table.</p>
    public let tableName: String?

    public init (
        contributorInsightsStatus: ContributorInsightsStatus? = nil,
        indexName: String? = nil,
        tableName: String? = nil
    )
    {
        self.contributorInsightsStatus = contributorInsightsStatus
        self.indexName = indexName
        self.tableName = tableName
    }
}

struct UpdateContributorInsightsOutputResponseBody: Equatable {
    public let tableName: String?
    public let indexName: String?
    public let contributorInsightsStatus: ContributorInsightsStatus?
}

extension UpdateContributorInsightsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case contributorInsightsStatus = "ContributorInsightsStatus"
        case indexName = "IndexName"
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let contributorInsightsStatusDecoded = try containerValues.decodeIfPresent(ContributorInsightsStatus.self, forKey: .contributorInsightsStatus)
        contributorInsightsStatus = contributorInsightsStatusDecoded
    }
}

extension UpdateGlobalSecondaryIndexAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case indexName = "IndexName"
        case provisionedThroughput = "ProvisionedThroughput"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let provisionedThroughput = provisionedThroughput {
            try encodeContainer.encode(provisionedThroughput, forKey: .provisionedThroughput)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(ProvisionedThroughput.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
    }
}

extension UpdateGlobalSecondaryIndexAction: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateGlobalSecondaryIndexAction(indexName: \(String(describing: indexName)), provisionedThroughput: \(String(describing: provisionedThroughput)))"}
}

/// <p>Represents the new provisioned throughput settings to be applied to a global secondary index.</p>
public struct UpdateGlobalSecondaryIndexAction: Equatable {
    /// <p>The name of the global secondary index to be updated.</p>
    public let indexName: String?
    /// <p>Represents the provisioned throughput settings for the specified global secondary index.</p>
    ///          <p>For current minimum and maximum provisioned throughput values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let provisionedThroughput: ProvisionedThroughput?

    public init (
        indexName: String? = nil,
        provisionedThroughput: ProvisionedThroughput? = nil
    )
    {
        self.indexName = indexName
        self.provisionedThroughput = provisionedThroughput
    }
}

public struct UpdateGlobalTableInputBodyMiddleware: Middleware {
    public let id: String = "UpdateGlobalTableInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGlobalTableInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGlobalTableOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGlobalTableInput>
    public typealias MOutput = OperationOutput<UpdateGlobalTableOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGlobalTableOutputError>
}

extension UpdateGlobalTableInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateGlobalTableInput(globalTableName: \(String(describing: globalTableName)), replicaUpdates: \(String(describing: replicaUpdates)))"}
}

extension UpdateGlobalTableInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case globalTableName = "GlobalTableName"
        case replicaUpdates = "ReplicaUpdates"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalTableName = globalTableName {
            try encodeContainer.encode(globalTableName, forKey: .globalTableName)
        }
        if let replicaUpdates = replicaUpdates {
            var replicaUpdatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicaUpdates)
            for replicaupdatelist0 in replicaUpdates {
                try replicaUpdatesContainer.encode(replicaupdatelist0)
            }
        }
    }
}

public struct UpdateGlobalTableInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateGlobalTableInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGlobalTableInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGlobalTableOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGlobalTableInput>
    public typealias MOutput = OperationOutput<UpdateGlobalTableOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGlobalTableOutputError>
}

public struct UpdateGlobalTableInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateGlobalTableInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGlobalTableInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGlobalTableOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGlobalTableInput>
    public typealias MOutput = OperationOutput<UpdateGlobalTableOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGlobalTableOutputError>
}

public struct UpdateGlobalTableInput: Equatable {
    /// <p>The global table name.</p>
    public let globalTableName: String?
    /// <p>A list of Regions that should be added or removed from the global table.</p>
    public let replicaUpdates: [ReplicaUpdate]?

    public init (
        globalTableName: String? = nil,
        replicaUpdates: [ReplicaUpdate]? = nil
    )
    {
        self.globalTableName = globalTableName
        self.replicaUpdates = replicaUpdates
    }
}

struct UpdateGlobalTableInputBody: Equatable {
    public let globalTableName: String?
    public let replicaUpdates: [ReplicaUpdate]?
}

extension UpdateGlobalTableInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case globalTableName = "GlobalTableName"
        case replicaUpdates = "ReplicaUpdates"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .globalTableName)
        globalTableName = globalTableNameDecoded
        let replicaUpdatesContainer = try containerValues.decodeIfPresent([ReplicaUpdate?].self, forKey: .replicaUpdates)
        var replicaUpdatesDecoded0:[ReplicaUpdate]? = nil
        if let replicaUpdatesContainer = replicaUpdatesContainer {
            replicaUpdatesDecoded0 = [ReplicaUpdate]()
            for structure0 in replicaUpdatesContainer {
                if let structure0 = structure0 {
                    replicaUpdatesDecoded0?.append(structure0)
                }
            }
        }
        replicaUpdates = replicaUpdatesDecoded0
    }
}

extension UpdateGlobalTableOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateGlobalTableOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "GlobalTableNotFoundException" : self = .globalTableNotFoundException(try GlobalTableNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicaAlreadyExistsException" : self = .replicaAlreadyExistsException(try ReplicaAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicaNotFoundException" : self = .replicaNotFoundException(try ReplicaNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TableNotFoundException" : self = .tableNotFoundException(try TableNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateGlobalTableOutputError: Equatable {
    case globalTableNotFoundException(GlobalTableNotFoundException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case replicaAlreadyExistsException(ReplicaAlreadyExistsException)
    case replicaNotFoundException(ReplicaNotFoundException)
    case tableNotFoundException(TableNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateGlobalTableOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateGlobalTableOutputResponse(globalTableDescription: \(String(describing: globalTableDescription)))"}
}

extension UpdateGlobalTableOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateGlobalTableOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.globalTableDescription = output.globalTableDescription
        } else {
            self.globalTableDescription = nil
        }
    }
}

public struct UpdateGlobalTableOutputResponse: Equatable {
    /// <p>Contains the details of the global table.</p>
    public let globalTableDescription: GlobalTableDescription?

    public init (
        globalTableDescription: GlobalTableDescription? = nil
    )
    {
        self.globalTableDescription = globalTableDescription
    }
}

struct UpdateGlobalTableOutputResponseBody: Equatable {
    public let globalTableDescription: GlobalTableDescription?
}

extension UpdateGlobalTableOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case globalTableDescription = "GlobalTableDescription"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTableDescriptionDecoded = try containerValues.decodeIfPresent(GlobalTableDescription.self, forKey: .globalTableDescription)
        globalTableDescription = globalTableDescriptionDecoded
    }
}

public struct UpdateGlobalTableSettingsInputBodyMiddleware: Middleware {
    public let id: String = "UpdateGlobalTableSettingsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGlobalTableSettingsInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGlobalTableSettingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGlobalTableSettingsInput>
    public typealias MOutput = OperationOutput<UpdateGlobalTableSettingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGlobalTableSettingsOutputError>
}

extension UpdateGlobalTableSettingsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateGlobalTableSettingsInput(globalTableBillingMode: \(String(describing: globalTableBillingMode)), globalTableGlobalSecondaryIndexSettingsUpdate: \(String(describing: globalTableGlobalSecondaryIndexSettingsUpdate)), globalTableName: \(String(describing: globalTableName)), globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: \(String(describing: globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate)), globalTableProvisionedWriteCapacityUnits: \(String(describing: globalTableProvisionedWriteCapacityUnits)), replicaSettingsUpdate: \(String(describing: replicaSettingsUpdate)))"}
}

extension UpdateGlobalTableSettingsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case globalTableBillingMode = "GlobalTableBillingMode"
        case globalTableGlobalSecondaryIndexSettingsUpdate = "GlobalTableGlobalSecondaryIndexSettingsUpdate"
        case globalTableName = "GlobalTableName"
        case globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate = "GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate"
        case globalTableProvisionedWriteCapacityUnits = "GlobalTableProvisionedWriteCapacityUnits"
        case replicaSettingsUpdate = "ReplicaSettingsUpdate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalTableBillingMode = globalTableBillingMode {
            try encodeContainer.encode(globalTableBillingMode.rawValue, forKey: .globalTableBillingMode)
        }
        if let globalTableGlobalSecondaryIndexSettingsUpdate = globalTableGlobalSecondaryIndexSettingsUpdate {
            var globalTableGlobalSecondaryIndexSettingsUpdateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalTableGlobalSecondaryIndexSettingsUpdate)
            for globaltableglobalsecondaryindexsettingsupdatelist0 in globalTableGlobalSecondaryIndexSettingsUpdate {
                try globalTableGlobalSecondaryIndexSettingsUpdateContainer.encode(globaltableglobalsecondaryindexsettingsupdatelist0)
            }
        }
        if let globalTableName = globalTableName {
            try encodeContainer.encode(globalTableName, forKey: .globalTableName)
        }
        if let globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate = globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate {
            try encodeContainer.encode(globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate, forKey: .globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate)
        }
        if let globalTableProvisionedWriteCapacityUnits = globalTableProvisionedWriteCapacityUnits {
            try encodeContainer.encode(globalTableProvisionedWriteCapacityUnits, forKey: .globalTableProvisionedWriteCapacityUnits)
        }
        if let replicaSettingsUpdate = replicaSettingsUpdate {
            var replicaSettingsUpdateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicaSettingsUpdate)
            for replicasettingsupdatelist0 in replicaSettingsUpdate {
                try replicaSettingsUpdateContainer.encode(replicasettingsupdatelist0)
            }
        }
    }
}

public struct UpdateGlobalTableSettingsInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateGlobalTableSettingsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGlobalTableSettingsInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGlobalTableSettingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGlobalTableSettingsInput>
    public typealias MOutput = OperationOutput<UpdateGlobalTableSettingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGlobalTableSettingsOutputError>
}

public struct UpdateGlobalTableSettingsInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateGlobalTableSettingsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateGlobalTableSettingsInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateGlobalTableSettingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateGlobalTableSettingsInput>
    public typealias MOutput = OperationOutput<UpdateGlobalTableSettingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateGlobalTableSettingsOutputError>
}

public struct UpdateGlobalTableSettingsInput: Equatable {
    /// <p>The billing mode of the global table. If <code>GlobalTableBillingMode</code> is not specified, the global table defaults to <code>PROVISIONED</code> capacity billing mode.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>PROVISIONED</code> - We recommend using <code>PROVISIONED</code> for predictable workloads. <code>PROVISIONED</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual">Provisioned Mode</a>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>PAY_PER_REQUEST</code> - We recommend using <code>PAY_PER_REQUEST</code> for unpredictable workloads. <code>PAY_PER_REQUEST</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand">On-Demand Mode</a>.
    ///             </p>
    ///             </li>
    ///          </ul>
    public let globalTableBillingMode: BillingMode?
    /// <p>Represents the settings of a global secondary index for a global table that will be modified.</p>
    public let globalTableGlobalSecondaryIndexSettingsUpdate: [GlobalTableGlobalSecondaryIndexSettingsUpdate]?
    /// <p>The name of the global table</p>
    public let globalTableName: String?
    /// <p>Auto scaling settings for managing provisioned write capacity for the global
    ///             table.</p>
    public let globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: AutoScalingSettingsUpdate?
    /// <p>The maximum number of writes consumed per second before DynamoDB returns a <code>ThrottlingException.</code>
    ///          </p>
    public let globalTableProvisionedWriteCapacityUnits: Int?
    /// <p>Represents the settings for a global table in a Region that will be modified.</p>
    public let replicaSettingsUpdate: [ReplicaSettingsUpdate]?

    public init (
        globalTableBillingMode: BillingMode? = nil,
        globalTableGlobalSecondaryIndexSettingsUpdate: [GlobalTableGlobalSecondaryIndexSettingsUpdate]? = nil,
        globalTableName: String? = nil,
        globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: AutoScalingSettingsUpdate? = nil,
        globalTableProvisionedWriteCapacityUnits: Int? = nil,
        replicaSettingsUpdate: [ReplicaSettingsUpdate]? = nil
    )
    {
        self.globalTableBillingMode = globalTableBillingMode
        self.globalTableGlobalSecondaryIndexSettingsUpdate = globalTableGlobalSecondaryIndexSettingsUpdate
        self.globalTableName = globalTableName
        self.globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate = globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate
        self.globalTableProvisionedWriteCapacityUnits = globalTableProvisionedWriteCapacityUnits
        self.replicaSettingsUpdate = replicaSettingsUpdate
    }
}

struct UpdateGlobalTableSettingsInputBody: Equatable {
    public let globalTableName: String?
    public let globalTableBillingMode: BillingMode?
    public let globalTableProvisionedWriteCapacityUnits: Int?
    public let globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: AutoScalingSettingsUpdate?
    public let globalTableGlobalSecondaryIndexSettingsUpdate: [GlobalTableGlobalSecondaryIndexSettingsUpdate]?
    public let replicaSettingsUpdate: [ReplicaSettingsUpdate]?
}

extension UpdateGlobalTableSettingsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case globalTableBillingMode = "GlobalTableBillingMode"
        case globalTableGlobalSecondaryIndexSettingsUpdate = "GlobalTableGlobalSecondaryIndexSettingsUpdate"
        case globalTableName = "GlobalTableName"
        case globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate = "GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate"
        case globalTableProvisionedWriteCapacityUnits = "GlobalTableProvisionedWriteCapacityUnits"
        case replicaSettingsUpdate = "ReplicaSettingsUpdate"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .globalTableName)
        globalTableName = globalTableNameDecoded
        let globalTableBillingModeDecoded = try containerValues.decodeIfPresent(BillingMode.self, forKey: .globalTableBillingMode)
        globalTableBillingMode = globalTableBillingModeDecoded
        let globalTableProvisionedWriteCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .globalTableProvisionedWriteCapacityUnits)
        globalTableProvisionedWriteCapacityUnits = globalTableProvisionedWriteCapacityUnitsDecoded
        let globalTableProvisionedWriteCapacityAutoScalingSettingsUpdateDecoded = try containerValues.decodeIfPresent(AutoScalingSettingsUpdate.self, forKey: .globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate)
        globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate = globalTableProvisionedWriteCapacityAutoScalingSettingsUpdateDecoded
        let globalTableGlobalSecondaryIndexSettingsUpdateContainer = try containerValues.decodeIfPresent([GlobalTableGlobalSecondaryIndexSettingsUpdate?].self, forKey: .globalTableGlobalSecondaryIndexSettingsUpdate)
        var globalTableGlobalSecondaryIndexSettingsUpdateDecoded0:[GlobalTableGlobalSecondaryIndexSettingsUpdate]? = nil
        if let globalTableGlobalSecondaryIndexSettingsUpdateContainer = globalTableGlobalSecondaryIndexSettingsUpdateContainer {
            globalTableGlobalSecondaryIndexSettingsUpdateDecoded0 = [GlobalTableGlobalSecondaryIndexSettingsUpdate]()
            for structure0 in globalTableGlobalSecondaryIndexSettingsUpdateContainer {
                if let structure0 = structure0 {
                    globalTableGlobalSecondaryIndexSettingsUpdateDecoded0?.append(structure0)
                }
            }
        }
        globalTableGlobalSecondaryIndexSettingsUpdate = globalTableGlobalSecondaryIndexSettingsUpdateDecoded0
        let replicaSettingsUpdateContainer = try containerValues.decodeIfPresent([ReplicaSettingsUpdate?].self, forKey: .replicaSettingsUpdate)
        var replicaSettingsUpdateDecoded0:[ReplicaSettingsUpdate]? = nil
        if let replicaSettingsUpdateContainer = replicaSettingsUpdateContainer {
            replicaSettingsUpdateDecoded0 = [ReplicaSettingsUpdate]()
            for structure0 in replicaSettingsUpdateContainer {
                if let structure0 = structure0 {
                    replicaSettingsUpdateDecoded0?.append(structure0)
                }
            }
        }
        replicaSettingsUpdate = replicaSettingsUpdateDecoded0
    }
}

extension UpdateGlobalTableSettingsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateGlobalTableSettingsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "GlobalTableNotFoundException" : self = .globalTableNotFoundException(try GlobalTableNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IndexNotFoundException" : self = .indexNotFoundException(try IndexNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReplicaNotFoundException" : self = .replicaNotFoundException(try ReplicaNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateGlobalTableSettingsOutputError: Equatable {
    case globalTableNotFoundException(GlobalTableNotFoundException)
    case indexNotFoundException(IndexNotFoundException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case replicaNotFoundException(ReplicaNotFoundException)
    case resourceInUseException(ResourceInUseException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateGlobalTableSettingsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateGlobalTableSettingsOutputResponse(globalTableName: \(String(describing: globalTableName)), replicaSettings: \(String(describing: replicaSettings)))"}
}

extension UpdateGlobalTableSettingsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateGlobalTableSettingsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.globalTableName = output.globalTableName
            self.replicaSettings = output.replicaSettings
        } else {
            self.globalTableName = nil
            self.replicaSettings = nil
        }
    }
}

public struct UpdateGlobalTableSettingsOutputResponse: Equatable {
    /// <p>The name of the global table.</p>
    public let globalTableName: String?
    /// <p>The Region-specific settings for the global table.</p>
    public let replicaSettings: [ReplicaSettingsDescription]?

    public init (
        globalTableName: String? = nil,
        replicaSettings: [ReplicaSettingsDescription]? = nil
    )
    {
        self.globalTableName = globalTableName
        self.replicaSettings = replicaSettings
    }
}

struct UpdateGlobalTableSettingsOutputResponseBody: Equatable {
    public let globalTableName: String?
    public let replicaSettings: [ReplicaSettingsDescription]?
}

extension UpdateGlobalTableSettingsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case globalTableName = "GlobalTableName"
        case replicaSettings = "ReplicaSettings"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .globalTableName)
        globalTableName = globalTableNameDecoded
        let replicaSettingsContainer = try containerValues.decodeIfPresent([ReplicaSettingsDescription?].self, forKey: .replicaSettings)
        var replicaSettingsDecoded0:[ReplicaSettingsDescription]? = nil
        if let replicaSettingsContainer = replicaSettingsContainer {
            replicaSettingsDecoded0 = [ReplicaSettingsDescription]()
            for structure0 in replicaSettingsContainer {
                if let structure0 = structure0 {
                    replicaSettingsDecoded0?.append(structure0)
                }
            }
        }
        replicaSettings = replicaSettingsDecoded0
    }
}

public struct UpdateItemInputBodyMiddleware: Middleware {
    public let id: String = "UpdateItemInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateItemInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateItemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateItemInput>
    public typealias MOutput = OperationOutput<UpdateItemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateItemOutputError>
}

extension UpdateItemInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateItemInput(attributeUpdates: \(String(describing: attributeUpdates)), conditionExpression: \(String(describing: conditionExpression)), conditionalOperator: \(String(describing: conditionalOperator)), expected: \(String(describing: expected)), expressionAttributeNames: \(String(describing: expressionAttributeNames)), expressionAttributeValues: \(String(describing: expressionAttributeValues)), key: \(String(describing: key)), returnConsumedCapacity: \(String(describing: returnConsumedCapacity)), returnItemCollectionMetrics: \(String(describing: returnItemCollectionMetrics)), returnValues: \(String(describing: returnValues)), tableName: \(String(describing: tableName)), updateExpression: \(String(describing: updateExpression)))"}
}

extension UpdateItemInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributeUpdates = "AttributeUpdates"
        case conditionExpression = "ConditionExpression"
        case conditionalOperator = "ConditionalOperator"
        case expected = "Expected"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case key = "Key"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
        case returnValues = "ReturnValues"
        case tableName = "TableName"
        case updateExpression = "UpdateExpression"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeUpdates = attributeUpdates {
            var attributeUpdatesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .attributeUpdates)
            for (dictKey0, attributeupdates0) in attributeUpdates {
                try attributeUpdatesContainer.encode(attributeupdates0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let conditionExpression = conditionExpression {
            try encodeContainer.encode(conditionExpression, forKey: .conditionExpression)
        }
        if let conditionalOperator = conditionalOperator {
            try encodeContainer.encode(conditionalOperator.rawValue, forKey: .conditionalOperator)
        }
        if let expected = expected {
            var expectedContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expected)
            for (dictKey0, expectedattributemap0) in expected {
                try expectedContainer.encode(expectedattributemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionattributenamemap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionattributenamemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeValues = expressionAttributeValues {
            var expressionAttributeValuesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .expressionAttributeValues)
            for (dictKey0, expressionattributevaluemap0) in expressionAttributeValues {
                try expressionAttributeValuesContainer.encode(expressionattributevaluemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let key = key {
            var keyContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .key)
            for (dictKey0, key0) in key {
                try keyContainer.encode(key0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let returnConsumedCapacity = returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let returnItemCollectionMetrics = returnItemCollectionMetrics {
            try encodeContainer.encode(returnItemCollectionMetrics.rawValue, forKey: .returnItemCollectionMetrics)
        }
        if let returnValues = returnValues {
            try encodeContainer.encode(returnValues.rawValue, forKey: .returnValues)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let updateExpression = updateExpression {
            try encodeContainer.encode(updateExpression, forKey: .updateExpression)
        }
    }
}

public struct UpdateItemInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateItemInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateItemInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateItemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateItemInput>
    public typealias MOutput = OperationOutput<UpdateItemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateItemOutputError>
}

public struct UpdateItemInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateItemInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateItemInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateItemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateItemInput>
    public typealias MOutput = OperationOutput<UpdateItemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateItemOutputError>
}

/// <p>Represents the input of an <code>UpdateItem</code> operation.</p>
public struct UpdateItemInput: Equatable {
    /// <p>This is a legacy parameter.  Use <code>UpdateExpression</code> instead.   For more information, see
    ///           <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributeUpdates.html">AttributeUpdates</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let attributeUpdates: [String:AttributeValueUpdate]?
    /// <p>A condition that must be satisfied in order for a conditional update to succeed.</p>
    ///          <p>An expression can contain any of the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Functions: <code>attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size</code>
    ///                </p>
    ///                <p>These function names are case-sensitive.</p>
    ///             </li>
    ///             <li>
    ///                <p>Comparison operators: <code>= | <> |
    ///             < | > | <= | >= |
    ///             BETWEEN | IN </code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p> Logical operators: <code>AND | OR | NOT</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>For more information about condition expressions, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Specifying Conditions</a> in the <i>Amazon DynamoDB Developer
    ///                 Guide</i>.</p>
    public let conditionExpression: String?
    /// <p>This is a legacy parameter.  Use <code>ConditionExpression</code> instead.   For more information, see
    ///           <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let conditionalOperator: ConditionalOperator?
    /// <p>This is a legacy parameter.  Use <code>ConditionExpression</code> instead.   For more information, see
    ///           <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html">Expected</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let expected: [String:ExpectedAttributeValue]?
    /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
    ///          <ul>
    ///             <li>
    ///                <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
    ///             </li>
    ///             <li>
    ///                <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
    ///             </li>
    ///             <li>
    ///                <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
    ///             </li>
    ///          </ul>
    ///          <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Percentile</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly
    ///             in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer
    ///             Guide</i>.) To work around this, you could specify the following for
    ///                 <code>ExpressionAttributeNames</code>:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>{"#P":"Percentile"}</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>You could then use this substitution in an expression, as in this example:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>#P = :val</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
    ///          </note>
    ///          <p>For more information about expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
    ///                 Guide</i>.</p>
    public let expressionAttributeNames: [String:String]?
    /// <p>One or more values that can be substituted in an expression.</p>
    ///          <p>Use the <b>:</b> (colon) character in an expression to
    ///             dereference an attribute value. For example, suppose that you wanted to check whether
    ///             the value of the <code>ProductStatus</code> attribute was one of the following: </p>
    ///          <p>
    ///             <code>Available | Backordered | Discontinued</code>
    ///          </p>
    ///          <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>
    ///          <p>
    ///             <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code>
    ///          </p>
    ///          <p>You could then use these values in an expression, such as this:</p>
    ///          <p>
    ///             <code>ProductStatus IN (:avail, :back, :disc)</code>
    ///          </p>
    ///         <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer
    ///                 Guide</i>.</p>
    public let expressionAttributeValues: [String:AttributeValue]?
    /// <p>The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute.</p>
    ///          <p>For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</p>
    public let key: [String:AttributeValue]?
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    ///                <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    ///             </li>
    ///          </ul>
    public let returnConsumedCapacity: ReturnConsumedCapacity?
    /// <p>Determines whether item collection metrics are returned.  If set to <code>SIZE</code>, the response includes statistics about item collections, if any, that were modified during
    ///       the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned.</p>
    public let returnItemCollectionMetrics: ReturnItemCollectionMetrics?
    /// <p>Use <code>ReturnValues</code> if you want to get the item attributes as they appear
    ///             before or after they are updated. For <code>UpdateItem</code>, the valid values
    ///             are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is
    ///           <code>NONE</code>, then nothing is returned. (This setting is the default for
    ///           <code>ReturnValues</code>.)</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ALL_OLD</code> - Returns all of the attributes of the item, as they appeared before the UpdateItem operation.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UPDATED_OLD</code> - Returns only the updated attributes, as they appeared before the UpdateItem operation.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ALL_NEW</code> - Returns all of the attributes of the item, as they appear after the UpdateItem operation.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UPDATED_NEW</code> - Returns only the updated attributes, as they appear after the UpdateItem operation.</p>
    ///             </li>
    ///          </ul>
    ///          <p>There is no additional cost associated with requesting a return value aside from the
    ///             small network and processing overhead of receiving a larger response. No read capacity
    ///             units are consumed.</p>
    ///          <p>The values returned are strongly consistent.</p>
    public let returnValues: ReturnValue?
    /// <p>The name of the table containing the item to update.</p>
    public let tableName: String?
    /// <p>An expression that defines one or more attributes to be updated, the action to be
    ///             performed on them, and new values for them.</p>
    ///          <p>The following action values are available for <code>UpdateExpression</code>.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                     <code>SET</code> - Adds one or more attributes and values to an item. If any of
    ///                     these attributes already exist, they are replaced by the new values. You can
    ///                     also use <code>SET</code> to add or subtract from an attribute that is of type
    ///                     Number. For example: <code>SET myNum = myNum + :val</code>
    ///                 </p>
    ///                <p>
    ///                   <code>SET</code> supports the following functions:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>if_not_exists (path, operand)</code> - if the item does not contain an attribute at the specified path, then <code>if_not_exists</code> evaluates to operand; otherwise, it evaluates to path. You can use this function to avoid overwriting an attribute that may already be present in the item.</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <code>list_append (operand, operand)</code> - evaluates to a list with a new element added to it. You can append the new element to the start or the end of the list by reversing the order of the operands.</p>
    ///                   </li>
    ///                </ul>
    ///                <p>These function names are case-sensitive.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>REMOVE</code> - Removes one or more attributes from an item.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ADD</code> - Adds the specified value to the item, if the attribute does not already exist. If the attribute does exist, then the behavior of
    ///             <code>ADD</code> depends on the data type of the attribute:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>If the existing attribute is a number, and if <code>Value</code> is also a number, then
    ///                 <code>Value</code> is mathematically added to the existing attribute. If <code>Value</code> is a
    ///               negative number, then it is subtracted from the existing attribute.</p>
    ///                      <note>
    ///                         <p>If you use <code>ADD</code> to increment or decrement a number value for an item
    ///                 that doesn't exist before the update, DynamoDB uses <code>0</code> as the initial
    ///                 value.</p>
    ///                         <p>Similarly, if you use <code>ADD</code> for an existing item to increment
    ///                                 or decrement an attribute value that doesn't exist before the
    ///                                 update, DynamoDB uses <code>0</code> as the initial value. For
    ///                                 example, suppose that the item you want to update doesn't have an
    ///                                 attribute named <code>itemcount</code>, but you decide to
    ///                                     <code>ADD</code> the number <code>3</code> to this attribute
    ///                                 anyway. DynamoDB will create the <code>itemcount</code> attribute,
    ///                                 set its initial value to <code>0</code>, and finally add
    ///                                     <code>3</code> to it. The result will be a new
    ///                                     <code>itemcount</code> attribute in the item, with a value of
    ///                                     <code>3</code>.</p>
    ///                      </note>
    ///                   </li>
    ///                   <li>
    ///                      <p>If the existing data type is a set and if <code>Value</code> is also a set, then
    ///                 <code>Value</code> is added to the existing set. For example, if the attribute value is the set
    ///                 <code>[1,2]</code>, and the <code>ADD</code> action specified <code>[3]</code>, then
    ///               the final attribute value is <code>[1,2,3]</code>. An error occurs if an <code>ADD</code>
    ///               action is specified for a set attribute and the attribute type specified does not
    ///               match the existing set type. </p>
    ///                      <p>Both sets must have the same primitive data type. For example, if the existing data
    ///               type is a set of strings, the <code>Value</code> must also be a set of strings.</p>
    ///                   </li>
    ///                </ul>
    ///                <important>
    ///                   <p>The <code>ADD</code> action only supports Number and set data types. In addition,
    ///               <code>ADD</code> can only be used on top-level attributes, not nested attributes.</p>
    ///                </important>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DELETE</code> - Deletes an element from a set.</p>
    ///                <p>If a set of values is specified, then those values are subtracted from the old
    ///           set. For example, if the attribute value was the set <code>[a,b,c]</code> and the
    ///           <code>DELETE</code> action specifies <code>[a,c]</code>, then the final attribute value
    ///           is <code>[b]</code>. Specifying an empty set is an error.</p>
    ///                <important>
    ///                   <p>The <code>DELETE</code> action only supports set data types. In addition,
    ///           <code>DELETE</code> can only be used on top-level attributes, not nested attributes.</p>
    ///                </important>
    ///
    ///             </li>
    ///          </ul>
    ///          <p>You can have many actions in a single expression, such as the following: <code>SET a=:value1,
    ///          b=:value2 DELETE :value3, :value4, :value5</code>
    ///          </p>
    ///          <p>For more information on update expressions, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.Modifying.html">Modifying Items and Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let updateExpression: String?

    public init (
        attributeUpdates: [String:AttributeValueUpdate]? = nil,
        conditionExpression: String? = nil,
        conditionalOperator: ConditionalOperator? = nil,
        expected: [String:ExpectedAttributeValue]? = nil,
        expressionAttributeNames: [String:String]? = nil,
        expressionAttributeValues: [String:AttributeValue]? = nil,
        key: [String:AttributeValue]? = nil,
        returnConsumedCapacity: ReturnConsumedCapacity? = nil,
        returnItemCollectionMetrics: ReturnItemCollectionMetrics? = nil,
        returnValues: ReturnValue? = nil,
        tableName: String? = nil,
        updateExpression: String? = nil
    )
    {
        self.attributeUpdates = attributeUpdates
        self.conditionExpression = conditionExpression
        self.conditionalOperator = conditionalOperator
        self.expected = expected
        self.expressionAttributeNames = expressionAttributeNames
        self.expressionAttributeValues = expressionAttributeValues
        self.key = key
        self.returnConsumedCapacity = returnConsumedCapacity
        self.returnItemCollectionMetrics = returnItemCollectionMetrics
        self.returnValues = returnValues
        self.tableName = tableName
        self.updateExpression = updateExpression
    }
}

struct UpdateItemInputBody: Equatable {
    public let tableName: String?
    public let key: [String:AttributeValue]?
    public let attributeUpdates: [String:AttributeValueUpdate]?
    public let expected: [String:ExpectedAttributeValue]?
    public let conditionalOperator: ConditionalOperator?
    public let returnValues: ReturnValue?
    public let returnConsumedCapacity: ReturnConsumedCapacity?
    public let returnItemCollectionMetrics: ReturnItemCollectionMetrics?
    public let updateExpression: String?
    public let conditionExpression: String?
    public let expressionAttributeNames: [String:String]?
    public let expressionAttributeValues: [String:AttributeValue]?
}

extension UpdateItemInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attributeUpdates = "AttributeUpdates"
        case conditionExpression = "ConditionExpression"
        case conditionalOperator = "ConditionalOperator"
        case expected = "Expected"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case key = "Key"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
        case returnValues = "ReturnValues"
        case tableName = "TableName"
        case updateExpression = "UpdateExpression"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let keyContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .key)
        var keyDecoded0: [String:AttributeValue]? = nil
        if let keyContainer = keyContainer {
            keyDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in keyContainer {
                if let attributevalue0 = attributevalue0 {
                    keyDecoded0?[key0] = attributevalue0
                }
            }
        }
        key = keyDecoded0
        let attributeUpdatesContainer = try containerValues.decodeIfPresent([String: AttributeValueUpdate?].self, forKey: .attributeUpdates)
        var attributeUpdatesDecoded0: [String:AttributeValueUpdate]? = nil
        if let attributeUpdatesContainer = attributeUpdatesContainer {
            attributeUpdatesDecoded0 = [String:AttributeValueUpdate]()
            for (key0, attributevalueupdate0) in attributeUpdatesContainer {
                if let attributevalueupdate0 = attributevalueupdate0 {
                    attributeUpdatesDecoded0?[key0] = attributevalueupdate0
                }
            }
        }
        attributeUpdates = attributeUpdatesDecoded0
        let expectedContainer = try containerValues.decodeIfPresent([String: ExpectedAttributeValue?].self, forKey: .expected)
        var expectedDecoded0: [String:ExpectedAttributeValue]? = nil
        if let expectedContainer = expectedContainer {
            expectedDecoded0 = [String:ExpectedAttributeValue]()
            for (key0, expectedattributevalue0) in expectedContainer {
                if let expectedattributevalue0 = expectedattributevalue0 {
                    expectedDecoded0?[key0] = expectedattributevalue0
                }
            }
        }
        expected = expectedDecoded0
        let conditionalOperatorDecoded = try containerValues.decodeIfPresent(ConditionalOperator.self, forKey: .conditionalOperator)
        conditionalOperator = conditionalOperatorDecoded
        let returnValuesDecoded = try containerValues.decodeIfPresent(ReturnValue.self, forKey: .returnValues)
        returnValues = returnValuesDecoded
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
        let returnItemCollectionMetricsDecoded = try containerValues.decodeIfPresent(ReturnItemCollectionMetrics.self, forKey: .returnItemCollectionMetrics)
        returnItemCollectionMetrics = returnItemCollectionMetricsDecoded
        let updateExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .updateExpression)
        updateExpression = updateExpressionDecoded
        let conditionExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .conditionExpression)
        conditionExpression = conditionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [String:String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [String:String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
        let expressionAttributeValuesContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .expressionAttributeValues)
        var expressionAttributeValuesDecoded0: [String:AttributeValue]? = nil
        if let expressionAttributeValuesContainer = expressionAttributeValuesContainer {
            expressionAttributeValuesDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in expressionAttributeValuesContainer {
                if let attributevalue0 = attributevalue0 {
                    expressionAttributeValuesDecoded0?[key0] = attributevalue0
                }
            }
        }
        expressionAttributeValues = expressionAttributeValuesDecoded0
    }
}

extension UpdateItemOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateItemOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ConditionalCheckFailedException" : self = .conditionalCheckFailedException(try ConditionalCheckFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ItemCollectionSizeLimitExceededException" : self = .itemCollectionSizeLimitExceededException(try ItemCollectionSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ProvisionedThroughputExceededException" : self = .provisionedThroughputExceededException(try ProvisionedThroughputExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestLimitExceeded" : self = .requestLimitExceeded(try RequestLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TransactionConflictException" : self = .transactionConflictException(try TransactionConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateItemOutputError: Equatable {
    case conditionalCheckFailedException(ConditionalCheckFailedException)
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case itemCollectionSizeLimitExceededException(ItemCollectionSizeLimitExceededException)
    case provisionedThroughputExceededException(ProvisionedThroughputExceededException)
    case requestLimitExceeded(RequestLimitExceeded)
    case resourceNotFoundException(ResourceNotFoundException)
    case transactionConflictException(TransactionConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateItemOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateItemOutputResponse(attributes: \(String(describing: attributes)), consumedCapacity: \(String(describing: consumedCapacity)), itemCollectionMetrics: \(String(describing: itemCollectionMetrics)))"}
}

extension UpdateItemOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateItemOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.attributes = output.attributes
            self.consumedCapacity = output.consumedCapacity
            self.itemCollectionMetrics = output.itemCollectionMetrics
        } else {
            self.attributes = nil
            self.consumedCapacity = nil
            self.itemCollectionMetrics = nil
        }
    }
}

/// <p>Represents the output of an <code>UpdateItem</code> operation.</p>
public struct UpdateItemOutputResponse: Equatable {
    /// <p>A map of attribute values as they appear before or after the <code>UpdateItem</code>
    ///             operation, as determined by the <code>ReturnValues</code> parameter.</p>
    ///         <p>The <code>Attributes</code> map is only present if <code>ReturnValues</code> was
    ///             specified as something other than <code>NONE</code> in the request. Each element
    ///             represents one attribute.</p>
    public let attributes: [String:AttributeValue]?
    /// <p>The capacity units consumed by the <code>UpdateItem</code> operation. The data returned includes the total
    ///             provisioned throughput consumed, along with statistics for the table and any indexes involved
    ///             in the operation. <code>ConsumedCapacity</code> is only returned if the <code>ReturnConsumedCapacity</code> parameter was specified.
    ///             For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned
    ///                 Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    public let consumedCapacity: ConsumedCapacity?
    /// <p>Information about item collections, if any, that were affected by the
    ///             <code>UpdateItem</code> operation.
    ///             <code>ItemCollectionMetrics</code> is only returned if the <code>ReturnItemCollectionMetrics</code> parameter was specified. If the table
    ///             does not have any local secondary indexes, this information is not
    ///             returned in the response.</p>
    ///         <p>Each <code>ItemCollectionMetrics</code>
    ///             element consists of:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>ItemCollectionKey</code> - The partition key value of the item
    ///                     collection. This is the same as the partition key value of the item itself.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>SizeEstimateRangeGB</code> - An estimate of item collection size,
    ///                     in gigabytes. This value is a two-element array
    ///                     containing a lower bound and an upper bound for the
    ///                     estimate. The estimate includes the size of all the
    ///                     items in the table, plus the size of all attributes
    ///                     projected into all of the local secondary indexes on that
    ///                     table. Use this estimate to measure whether a local secondary index is approaching its size limit.</p>
    ///                 <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p>
    ///             </li>
    ///          </ul>
    public let itemCollectionMetrics: ItemCollectionMetrics?

    public init (
        attributes: [String:AttributeValue]? = nil,
        consumedCapacity: ConsumedCapacity? = nil,
        itemCollectionMetrics: ItemCollectionMetrics? = nil
    )
    {
        self.attributes = attributes
        self.consumedCapacity = consumedCapacity
        self.itemCollectionMetrics = itemCollectionMetrics
    }
}

struct UpdateItemOutputResponseBody: Equatable {
    public let attributes: [String:AttributeValue]?
    public let consumedCapacity: ConsumedCapacity?
    public let itemCollectionMetrics: ItemCollectionMetrics?
}

extension UpdateItemOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attributes = "Attributes"
        case consumedCapacity = "ConsumedCapacity"
        case itemCollectionMetrics = "ItemCollectionMetrics"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributesContainer = try containerValues.decodeIfPresent([String: AttributeValue?].self, forKey: .attributes)
        var attributesDecoded0: [String:AttributeValue]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [String:AttributeValue]()
            for (key0, attributevalue0) in attributesContainer {
                if let attributevalue0 = attributevalue0 {
                    attributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        attributes = attributesDecoded0
        let consumedCapacityDecoded = try containerValues.decodeIfPresent(ConsumedCapacity.self, forKey: .consumedCapacity)
        consumedCapacity = consumedCapacityDecoded
        let itemCollectionMetricsDecoded = try containerValues.decodeIfPresent(ItemCollectionMetrics.self, forKey: .itemCollectionMetrics)
        itemCollectionMetrics = itemCollectionMetricsDecoded
    }
}

extension UpdateReplicationGroupMemberAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case kMSMasterKeyId = "KMSMasterKeyId"
        case provisionedThroughputOverride = "ProvisionedThroughputOverride"
        case regionName = "RegionName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalSecondaryIndexes = globalSecondaryIndexes {
            var globalSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexes)
            for replicaglobalsecondaryindexlist0 in globalSecondaryIndexes {
                try globalSecondaryIndexesContainer.encode(replicaglobalsecondaryindexlist0)
            }
        }
        if let kMSMasterKeyId = kMSMasterKeyId {
            try encodeContainer.encode(kMSMasterKeyId, forKey: .kMSMasterKeyId)
        }
        if let provisionedThroughputOverride = provisionedThroughputOverride {
            try encodeContainer.encode(provisionedThroughputOverride, forKey: .provisionedThroughputOverride)
        }
        if let regionName = regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .regionName)
        regionName = regionNameDecoded
        let kMSMasterKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kMSMasterKeyId)
        kMSMasterKeyId = kMSMasterKeyIdDecoded
        let provisionedThroughputOverrideDecoded = try containerValues.decodeIfPresent(ProvisionedThroughputOverride.self, forKey: .provisionedThroughputOverride)
        provisionedThroughputOverride = provisionedThroughputOverrideDecoded
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([ReplicaGlobalSecondaryIndex?].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0:[ReplicaGlobalSecondaryIndex]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [ReplicaGlobalSecondaryIndex]()
            for structure0 in globalSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
    }
}

extension UpdateReplicationGroupMemberAction: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateReplicationGroupMemberAction(globalSecondaryIndexes: \(String(describing: globalSecondaryIndexes)), kMSMasterKeyId: \(String(describing: kMSMasterKeyId)), provisionedThroughputOverride: \(String(describing: provisionedThroughputOverride)), regionName: \(String(describing: regionName)))"}
}

/// <p>Represents a replica to be modified.</p>
public struct UpdateReplicationGroupMemberAction: Equatable {
    /// <p>Replica-specific global secondary index settings.</p>
    public let globalSecondaryIndexes: [ReplicaGlobalSecondaryIndex]?
    /// <p>The AWS KMS customer master key (CMK) of the replica that should be used for AWS KMS encryption.
    ///          To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias
    ///          ARN. Note that you should only provide this parameter if the key is different from
    ///          the default DynamoDB KMS master key alias/aws/dynamodb.</p>
    public let kMSMasterKeyId: String?
    /// <p>Replica-specific provisioned throughput. If not specified, uses the source table's
    ///          provisioned throughput settings.</p>
    public let provisionedThroughputOverride: ProvisionedThroughputOverride?
    /// <p>The Region where the replica exists.</p>
    public let regionName: String?

    public init (
        globalSecondaryIndexes: [ReplicaGlobalSecondaryIndex]? = nil,
        kMSMasterKeyId: String? = nil,
        provisionedThroughputOverride: ProvisionedThroughputOverride? = nil,
        regionName: String? = nil
    )
    {
        self.globalSecondaryIndexes = globalSecondaryIndexes
        self.kMSMasterKeyId = kMSMasterKeyId
        self.provisionedThroughputOverride = provisionedThroughputOverride
        self.regionName = regionName
    }
}

public struct UpdateTableInputBodyMiddleware: Middleware {
    public let id: String = "UpdateTableInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateTableInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateTableOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateTableInput>
    public typealias MOutput = OperationOutput<UpdateTableOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateTableOutputError>
}

extension UpdateTableInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateTableInput(attributeDefinitions: \(String(describing: attributeDefinitions)), billingMode: \(String(describing: billingMode)), globalSecondaryIndexUpdates: \(String(describing: globalSecondaryIndexUpdates)), provisionedThroughput: \(String(describing: provisionedThroughput)), replicaUpdates: \(String(describing: replicaUpdates)), sSESpecification: \(String(describing: sSESpecification)), streamSpecification: \(String(describing: streamSpecification)), tableName: \(String(describing: tableName)))"}
}

extension UpdateTableInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributeDefinitions = "AttributeDefinitions"
        case billingMode = "BillingMode"
        case globalSecondaryIndexUpdates = "GlobalSecondaryIndexUpdates"
        case provisionedThroughput = "ProvisionedThroughput"
        case replicaUpdates = "ReplicaUpdates"
        case sSESpecification = "SSESpecification"
        case streamSpecification = "StreamSpecification"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeDefinitions = attributeDefinitions {
            var attributeDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributeDefinitions)
            for attributedefinitions0 in attributeDefinitions {
                try attributeDefinitionsContainer.encode(attributedefinitions0)
            }
        }
        if let billingMode = billingMode {
            try encodeContainer.encode(billingMode.rawValue, forKey: .billingMode)
        }
        if let globalSecondaryIndexUpdates = globalSecondaryIndexUpdates {
            var globalSecondaryIndexUpdatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexUpdates)
            for globalsecondaryindexupdatelist0 in globalSecondaryIndexUpdates {
                try globalSecondaryIndexUpdatesContainer.encode(globalsecondaryindexupdatelist0)
            }
        }
        if let provisionedThroughput = provisionedThroughput {
            try encodeContainer.encode(provisionedThroughput, forKey: .provisionedThroughput)
        }
        if let replicaUpdates = replicaUpdates {
            var replicaUpdatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicaUpdates)
            for replicationgroupupdatelist0 in replicaUpdates {
                try replicaUpdatesContainer.encode(replicationgroupupdatelist0)
            }
        }
        if let sSESpecification = sSESpecification {
            try encodeContainer.encode(sSESpecification, forKey: .sSESpecification)
        }
        if let streamSpecification = streamSpecification {
            try encodeContainer.encode(streamSpecification, forKey: .streamSpecification)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

public struct UpdateTableInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateTableInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateTableInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateTableOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateTableInput>
    public typealias MOutput = OperationOutput<UpdateTableOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateTableOutputError>
}

public struct UpdateTableInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateTableInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateTableInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateTableOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateTableInput>
    public typealias MOutput = OperationOutput<UpdateTableOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateTableOutputError>
}

/// <p>Represents the input of an <code>UpdateTable</code> operation.</p>
public struct UpdateTableInput: Equatable {
    /// <p>An array of attributes that describe the key schema for the table and indexes. If you are adding a new global secondary index to the table, <code>AttributeDefinitions</code> must include the key element(s) of the new index.</p>
    public let attributeDefinitions: [AttributeDefinition]?
    /// <p>Controls how you are charged for read and write throughput and how you manage capacity.
    ///       When switching from pay-per-request to provisioned capacity, initial provisioned capacity values must be set. The initial
    ///       provisioned capacity values are estimated based on the consumed read and write capacity of your table and global secondary indexes
    ///       over the past 30 minutes.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>PROVISIONED</code> - We recommend using <code>PROVISIONED</code> for predictable workloads. <code>PROVISIONED</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual">Provisioned Mode</a>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>PAY_PER_REQUEST</code> - We recommend using <code>PAY_PER_REQUEST</code> for unpredictable workloads. <code>PAY_PER_REQUEST</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand">On-Demand Mode</a>.
    ///             </p>
    ///             </li>
    ///          </ul>
    public let billingMode: BillingMode?
    /// <p>An array of one or more global secondary indexes for the table. For each index in the array, you can request one action:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Create</code> - add a new global secondary index to the table.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Update</code> - modify the provisioned throughput settings of an existing global secondary index.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Delete</code> - remove a global secondary index from the table.</p>
    ///             </li>
    ///          </ul>
    ///          <p>You can create or delete only one global secondary index per <code>UpdateTable</code> operation.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.OnlineOps.html">Managing Global Secondary
    ///         Indexes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </p>
    public let globalSecondaryIndexUpdates: [GlobalSecondaryIndexUpdate]?
    /// <p>The new provisioned throughput settings for the specified table or index.</p>
    public let provisionedThroughput: ProvisionedThroughput?
    /// <p>A list of replica update actions (create, delete, or update) for the table.</p>
    ///          <note>
    ///             <p>This property only applies to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html">Version 2019.11.21</a> of global tables.</p>
    ///          </note>
    public let replicaUpdates: [ReplicationGroupUpdate]?
    /// <p>The new server-side encryption settings for the specified table.</p>
    public let sSESpecification: SSESpecification?
    /// <p>Represents the DynamoDB Streams configuration for the table.</p>
    ///          <note>
    ///             <p>You receive a <code>ResourceInUseException</code> if you try to enable a stream on a
    ///                 table that already has a stream, or if you try to disable a stream on a table that
    ///                 doesn't have a stream.</p>
    ///          </note>
    public let streamSpecification: StreamSpecification?
    /// <p>The name of the table to be updated.</p>
    public let tableName: String?

    public init (
        attributeDefinitions: [AttributeDefinition]? = nil,
        billingMode: BillingMode? = nil,
        globalSecondaryIndexUpdates: [GlobalSecondaryIndexUpdate]? = nil,
        provisionedThroughput: ProvisionedThroughput? = nil,
        replicaUpdates: [ReplicationGroupUpdate]? = nil,
        sSESpecification: SSESpecification? = nil,
        streamSpecification: StreamSpecification? = nil,
        tableName: String? = nil
    )
    {
        self.attributeDefinitions = attributeDefinitions
        self.billingMode = billingMode
        self.globalSecondaryIndexUpdates = globalSecondaryIndexUpdates
        self.provisionedThroughput = provisionedThroughput
        self.replicaUpdates = replicaUpdates
        self.sSESpecification = sSESpecification
        self.streamSpecification = streamSpecification
        self.tableName = tableName
    }
}

struct UpdateTableInputBody: Equatable {
    public let attributeDefinitions: [AttributeDefinition]?
    public let tableName: String?
    public let billingMode: BillingMode?
    public let provisionedThroughput: ProvisionedThroughput?
    public let globalSecondaryIndexUpdates: [GlobalSecondaryIndexUpdate]?
    public let streamSpecification: StreamSpecification?
    public let sSESpecification: SSESpecification?
    public let replicaUpdates: [ReplicationGroupUpdate]?
}

extension UpdateTableInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attributeDefinitions = "AttributeDefinitions"
        case billingMode = "BillingMode"
        case globalSecondaryIndexUpdates = "GlobalSecondaryIndexUpdates"
        case provisionedThroughput = "ProvisionedThroughput"
        case replicaUpdates = "ReplicaUpdates"
        case sSESpecification = "SSESpecification"
        case streamSpecification = "StreamSpecification"
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeDefinitionsContainer = try containerValues.decodeIfPresent([AttributeDefinition?].self, forKey: .attributeDefinitions)
        var attributeDefinitionsDecoded0:[AttributeDefinition]? = nil
        if let attributeDefinitionsContainer = attributeDefinitionsContainer {
            attributeDefinitionsDecoded0 = [AttributeDefinition]()
            for structure0 in attributeDefinitionsContainer {
                if let structure0 = structure0 {
                    attributeDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        attributeDefinitions = attributeDefinitionsDecoded0
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let billingModeDecoded = try containerValues.decodeIfPresent(BillingMode.self, forKey: .billingMode)
        billingMode = billingModeDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(ProvisionedThroughput.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
        let globalSecondaryIndexUpdatesContainer = try containerValues.decodeIfPresent([GlobalSecondaryIndexUpdate?].self, forKey: .globalSecondaryIndexUpdates)
        var globalSecondaryIndexUpdatesDecoded0:[GlobalSecondaryIndexUpdate]? = nil
        if let globalSecondaryIndexUpdatesContainer = globalSecondaryIndexUpdatesContainer {
            globalSecondaryIndexUpdatesDecoded0 = [GlobalSecondaryIndexUpdate]()
            for structure0 in globalSecondaryIndexUpdatesContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexUpdatesDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexUpdates = globalSecondaryIndexUpdatesDecoded0
        let streamSpecificationDecoded = try containerValues.decodeIfPresent(StreamSpecification.self, forKey: .streamSpecification)
        streamSpecification = streamSpecificationDecoded
        let sSESpecificationDecoded = try containerValues.decodeIfPresent(SSESpecification.self, forKey: .sSESpecification)
        sSESpecification = sSESpecificationDecoded
        let replicaUpdatesContainer = try containerValues.decodeIfPresent([ReplicationGroupUpdate?].self, forKey: .replicaUpdates)
        var replicaUpdatesDecoded0:[ReplicationGroupUpdate]? = nil
        if let replicaUpdatesContainer = replicaUpdatesContainer {
            replicaUpdatesDecoded0 = [ReplicationGroupUpdate]()
            for structure0 in replicaUpdatesContainer {
                if let structure0 = structure0 {
                    replicaUpdatesDecoded0?.append(structure0)
                }
            }
        }
        replicaUpdates = replicaUpdatesDecoded0
    }
}

extension UpdateTableOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateTableOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateTableOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateTableOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateTableOutputResponse(tableDescription: \(String(describing: tableDescription)))"}
}

extension UpdateTableOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateTableOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.tableDescription = output.tableDescription
        } else {
            self.tableDescription = nil
        }
    }
}

/// <p>Represents the output of an <code>UpdateTable</code> operation.</p>
public struct UpdateTableOutputResponse: Equatable {
    /// <p>Represents the properties of the table.</p>
    public let tableDescription: TableDescription?

    public init (
        tableDescription: TableDescription? = nil
    )
    {
        self.tableDescription = tableDescription
    }
}

struct UpdateTableOutputResponseBody: Equatable {
    public let tableDescription: TableDescription?
}

extension UpdateTableOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tableDescription = "TableDescription"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableDescriptionDecoded = try containerValues.decodeIfPresent(TableDescription.self, forKey: .tableDescription)
        tableDescription = tableDescriptionDecoded
    }
}

public struct UpdateTableReplicaAutoScalingInputBodyMiddleware: Middleware {
    public let id: String = "UpdateTableReplicaAutoScalingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateTableReplicaAutoScalingInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateTableReplicaAutoScalingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateTableReplicaAutoScalingInput>
    public typealias MOutput = OperationOutput<UpdateTableReplicaAutoScalingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateTableReplicaAutoScalingOutputError>
}

extension UpdateTableReplicaAutoScalingInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateTableReplicaAutoScalingInput(globalSecondaryIndexUpdates: \(String(describing: globalSecondaryIndexUpdates)), provisionedWriteCapacityAutoScalingUpdate: \(String(describing: provisionedWriteCapacityAutoScalingUpdate)), replicaUpdates: \(String(describing: replicaUpdates)), tableName: \(String(describing: tableName)))"}
}

extension UpdateTableReplicaAutoScalingInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case globalSecondaryIndexUpdates = "GlobalSecondaryIndexUpdates"
        case provisionedWriteCapacityAutoScalingUpdate = "ProvisionedWriteCapacityAutoScalingUpdate"
        case replicaUpdates = "ReplicaUpdates"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalSecondaryIndexUpdates = globalSecondaryIndexUpdates {
            var globalSecondaryIndexUpdatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexUpdates)
            for globalsecondaryindexautoscalingupdatelist0 in globalSecondaryIndexUpdates {
                try globalSecondaryIndexUpdatesContainer.encode(globalsecondaryindexautoscalingupdatelist0)
            }
        }
        if let provisionedWriteCapacityAutoScalingUpdate = provisionedWriteCapacityAutoScalingUpdate {
            try encodeContainer.encode(provisionedWriteCapacityAutoScalingUpdate, forKey: .provisionedWriteCapacityAutoScalingUpdate)
        }
        if let replicaUpdates = replicaUpdates {
            var replicaUpdatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicaUpdates)
            for replicaautoscalingupdatelist0 in replicaUpdates {
                try replicaUpdatesContainer.encode(replicaautoscalingupdatelist0)
            }
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}

public struct UpdateTableReplicaAutoScalingInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateTableReplicaAutoScalingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateTableReplicaAutoScalingInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateTableReplicaAutoScalingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateTableReplicaAutoScalingInput>
    public typealias MOutput = OperationOutput<UpdateTableReplicaAutoScalingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateTableReplicaAutoScalingOutputError>
}

public struct UpdateTableReplicaAutoScalingInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateTableReplicaAutoScalingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateTableReplicaAutoScalingInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateTableReplicaAutoScalingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateTableReplicaAutoScalingInput>
    public typealias MOutput = OperationOutput<UpdateTableReplicaAutoScalingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateTableReplicaAutoScalingOutputError>
}

public struct UpdateTableReplicaAutoScalingInput: Equatable {
    /// <p>Represents the auto scaling settings of the global secondary indexes of the replica
    ///           to be updated.</p>
    public let globalSecondaryIndexUpdates: [GlobalSecondaryIndexAutoScalingUpdate]?
    /// <p>Represents the auto scaling settings to be modified for a global table or global
    ///          secondary index.</p>
    public let provisionedWriteCapacityAutoScalingUpdate: AutoScalingSettingsUpdate?
    /// <p>Represents the auto scaling settings of replicas of the table that will be
    ///            modified.</p>
    public let replicaUpdates: [ReplicaAutoScalingUpdate]?
    /// <p>The name of the global table to be updated.</p>
    public let tableName: String?

    public init (
        globalSecondaryIndexUpdates: [GlobalSecondaryIndexAutoScalingUpdate]? = nil,
        provisionedWriteCapacityAutoScalingUpdate: AutoScalingSettingsUpdate? = nil,
        replicaUpdates: [ReplicaAutoScalingUpdate]? = nil,
        tableName: String? = nil
    )
    {
        self.globalSecondaryIndexUpdates = globalSecondaryIndexUpdates
        self.provisionedWriteCapacityAutoScalingUpdate = provisionedWriteCapacityAutoScalingUpdate
        self.replicaUpdates = replicaUpdates
        self.tableName = tableName
    }
}

struct UpdateTableReplicaAutoScalingInputBody: Equatable {
    public let globalSecondaryIndexUpdates: [GlobalSecondaryIndexAutoScalingUpdate]?
    public let tableName: String?
    public let provisionedWriteCapacityAutoScalingUpdate: AutoScalingSettingsUpdate?
    public let replicaUpdates: [ReplicaAutoScalingUpdate]?
}

extension UpdateTableReplicaAutoScalingInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case globalSecondaryIndexUpdates = "GlobalSecondaryIndexUpdates"
        case provisionedWriteCapacityAutoScalingUpdate = "ProvisionedWriteCapacityAutoScalingUpdate"
        case replicaUpdates = "ReplicaUpdates"
        case tableName = "TableName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalSecondaryIndexUpdatesContainer = try containerValues.decodeIfPresent([GlobalSecondaryIndexAutoScalingUpdate?].self, forKey: .globalSecondaryIndexUpdates)
        var globalSecondaryIndexUpdatesDecoded0:[GlobalSecondaryIndexAutoScalingUpdate]? = nil
        if let globalSecondaryIndexUpdatesContainer = globalSecondaryIndexUpdatesContainer {
            globalSecondaryIndexUpdatesDecoded0 = [GlobalSecondaryIndexAutoScalingUpdate]()
            for structure0 in globalSecondaryIndexUpdatesContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexUpdatesDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexUpdates = globalSecondaryIndexUpdatesDecoded0
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let provisionedWriteCapacityAutoScalingUpdateDecoded = try containerValues.decodeIfPresent(AutoScalingSettingsUpdate.self, forKey: .provisionedWriteCapacityAutoScalingUpdate)
        provisionedWriteCapacityAutoScalingUpdate = provisionedWriteCapacityAutoScalingUpdateDecoded
        let replicaUpdatesContainer = try containerValues.decodeIfPresent([ReplicaAutoScalingUpdate?].self, forKey: .replicaUpdates)
        var replicaUpdatesDecoded0:[ReplicaAutoScalingUpdate]? = nil
        if let replicaUpdatesContainer = replicaUpdatesContainer {
            replicaUpdatesDecoded0 = [ReplicaAutoScalingUpdate]()
            for structure0 in replicaUpdatesContainer {
                if let structure0 = structure0 {
                    replicaUpdatesDecoded0?.append(structure0)
                }
            }
        }
        replicaUpdates = replicaUpdatesDecoded0
    }
}

extension UpdateTableReplicaAutoScalingOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateTableReplicaAutoScalingOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateTableReplicaAutoScalingOutputError: Equatable {
    case internalServerError(InternalServerError)
    case limitExceededException(LimitExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateTableReplicaAutoScalingOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateTableReplicaAutoScalingOutputResponse(tableAutoScalingDescription: \(String(describing: tableAutoScalingDescription)))"}
}

extension UpdateTableReplicaAutoScalingOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateTableReplicaAutoScalingOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.tableAutoScalingDescription = output.tableAutoScalingDescription
        } else {
            self.tableAutoScalingDescription = nil
        }
    }
}

public struct UpdateTableReplicaAutoScalingOutputResponse: Equatable {
    /// <p>Returns information about the auto scaling settings of a table with replicas.</p>
    public let tableAutoScalingDescription: TableAutoScalingDescription?

    public init (
        tableAutoScalingDescription: TableAutoScalingDescription? = nil
    )
    {
        self.tableAutoScalingDescription = tableAutoScalingDescription
    }
}

struct UpdateTableReplicaAutoScalingOutputResponseBody: Equatable {
    public let tableAutoScalingDescription: TableAutoScalingDescription?
}

extension UpdateTableReplicaAutoScalingOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tableAutoScalingDescription = "TableAutoScalingDescription"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableAutoScalingDescriptionDecoded = try containerValues.decodeIfPresent(TableAutoScalingDescription.self, forKey: .tableAutoScalingDescription)
        tableAutoScalingDescription = tableAutoScalingDescriptionDecoded
    }
}

public struct UpdateTimeToLiveInputBodyMiddleware: Middleware {
    public let id: String = "UpdateTimeToLiveInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateTimeToLiveInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateTimeToLiveOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateTimeToLiveInput>
    public typealias MOutput = OperationOutput<UpdateTimeToLiveOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateTimeToLiveOutputError>
}

extension UpdateTimeToLiveInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateTimeToLiveInput(tableName: \(String(describing: tableName)), timeToLiveSpecification: \(String(describing: timeToLiveSpecification)))"}
}

extension UpdateTimeToLiveInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case tableName = "TableName"
        case timeToLiveSpecification = "TimeToLiveSpecification"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let timeToLiveSpecification = timeToLiveSpecification {
            try encodeContainer.encode(timeToLiveSpecification, forKey: .timeToLiveSpecification)
        }
    }
}

public struct UpdateTimeToLiveInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateTimeToLiveInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateTimeToLiveInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateTimeToLiveOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateTimeToLiveInput>
    public typealias MOutput = OperationOutput<UpdateTimeToLiveOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateTimeToLiveOutputError>
}

public struct UpdateTimeToLiveInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateTimeToLiveInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateTimeToLiveInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateTimeToLiveOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateTimeToLiveInput>
    public typealias MOutput = OperationOutput<UpdateTimeToLiveOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateTimeToLiveOutputError>
}

/// <p>Represents the input of an <code>UpdateTimeToLive</code> operation.</p>
public struct UpdateTimeToLiveInput: Equatable {
    /// <p>The name of the table to be configured.</p>
    public let tableName: String?
    /// <p>Represents the settings used to enable or disable Time to Live for the specified table.</p>
    public let timeToLiveSpecification: TimeToLiveSpecification?

    public init (
        tableName: String? = nil,
        timeToLiveSpecification: TimeToLiveSpecification? = nil
    )
    {
        self.tableName = tableName
        self.timeToLiveSpecification = timeToLiveSpecification
    }
}

struct UpdateTimeToLiveInputBody: Equatable {
    public let tableName: String?
    public let timeToLiveSpecification: TimeToLiveSpecification?
}

extension UpdateTimeToLiveInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tableName = "TableName"
        case timeToLiveSpecification = "TimeToLiveSpecification"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let timeToLiveSpecificationDecoded = try containerValues.decodeIfPresent(TimeToLiveSpecification.self, forKey: .timeToLiveSpecification)
        timeToLiveSpecification = timeToLiveSpecificationDecoded
    }
}

extension UpdateTimeToLiveOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateTimeToLiveOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEndpointException" : self = .invalidEndpointException(try InvalidEndpointException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateTimeToLiveOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidEndpointException(InvalidEndpointException)
    case limitExceededException(LimitExceededException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateTimeToLiveOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateTimeToLiveOutputResponse(timeToLiveSpecification: \(String(describing: timeToLiveSpecification)))"}
}

extension UpdateTimeToLiveOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateTimeToLiveOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.timeToLiveSpecification = output.timeToLiveSpecification
        } else {
            self.timeToLiveSpecification = nil
        }
    }
}

public struct UpdateTimeToLiveOutputResponse: Equatable {
    /// <p>Represents the output of an <code>UpdateTimeToLive</code> operation.</p>
    public let timeToLiveSpecification: TimeToLiveSpecification?

    public init (
        timeToLiveSpecification: TimeToLiveSpecification? = nil
    )
    {
        self.timeToLiveSpecification = timeToLiveSpecification
    }
}

struct UpdateTimeToLiveOutputResponseBody: Equatable {
    public let timeToLiveSpecification: TimeToLiveSpecification?
}

extension UpdateTimeToLiveOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case timeToLiveSpecification = "TimeToLiveSpecification"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeToLiveSpecificationDecoded = try containerValues.decodeIfPresent(TimeToLiveSpecification.self, forKey: .timeToLiveSpecification)
        timeToLiveSpecification = timeToLiveSpecificationDecoded
    }
}

extension WriteRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deleteRequest = "DeleteRequest"
        case putRequest = "PutRequest"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deleteRequest = deleteRequest {
            try encodeContainer.encode(deleteRequest, forKey: .deleteRequest)
        }
        if let putRequest = putRequest {
            try encodeContainer.encode(putRequest, forKey: .putRequest)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let putRequestDecoded = try containerValues.decodeIfPresent(PutRequest.self, forKey: .putRequest)
        putRequest = putRequestDecoded
        let deleteRequestDecoded = try containerValues.decodeIfPresent(DeleteRequest.self, forKey: .deleteRequest)
        deleteRequest = deleteRequestDecoded
    }
}

extension WriteRequest: CustomDebugStringConvertible {
    public var debugDescription: String {
        "WriteRequest(deleteRequest: \(String(describing: deleteRequest)), putRequest: \(String(describing: putRequest)))"}
}

/// <p>Represents an operation to perform - either <code>DeleteItem</code> or
///             <code>PutItem</code>. You can only request one of these operations, not both, in a
///          single <code>WriteRequest</code>. If you do need to perform both of these operations, you
///          need to provide two separate <code>WriteRequest</code> objects.</p>
public struct WriteRequest: Equatable {
    /// <p>A request to perform a <code>DeleteItem</code> operation.</p>
    public let deleteRequest: DeleteRequest?
    /// <p>A request to perform a <code>PutItem</code> operation.</p>
    public let putRequest: PutRequest?

    public init (
        deleteRequest: DeleteRequest? = nil,
        putRequest: PutRequest? = nil
    )
    {
        self.deleteRequest = deleteRequest
        self.putRequest = putRequest
    }
}
