// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BackupDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case backupArn = "BackupArn"
        case backupCreationDateTime = "BackupCreationDateTime"
        case backupExpiryDateTime = "BackupExpiryDateTime"
        case backupName = "BackupName"
        case backupSizeBytes = "BackupSizeBytes"
        case backupStatus = "BackupStatus"
        case backupType = "BackupType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupArn = backupArn {
            try encodeContainer.encode(backupArn, forKey: .backupArn)
        }
        if let backupCreationDateTime = backupCreationDateTime {
            try encodeContainer.encode(backupCreationDateTime.timeIntervalSince1970, forKey: .backupCreationDateTime)
        }
        if let backupExpiryDateTime = backupExpiryDateTime {
            try encodeContainer.encode(backupExpiryDateTime.timeIntervalSince1970, forKey: .backupExpiryDateTime)
        }
        if let backupName = backupName {
            try encodeContainer.encode(backupName, forKey: .backupName)
        }
        if let backupSizeBytes = backupSizeBytes {
            try encodeContainer.encode(backupSizeBytes, forKey: .backupSizeBytes)
        }
        if let backupStatus = backupStatus {
            try encodeContainer.encode(backupStatus.rawValue, forKey: .backupStatus)
        }
        if let backupType = backupType {
            try encodeContainer.encode(backupType.rawValue, forKey: .backupType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .backupArn)
        backupArn = backupArnDecoded
        let backupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .backupName)
        backupName = backupNameDecoded
        let backupSizeBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .backupSizeBytes)
        backupSizeBytes = backupSizeBytesDecoded
        let backupStatusDecoded = try containerValues.decodeIfPresent(BackupStatus.self, forKey: .backupStatus)
        backupStatus = backupStatusDecoded
        let backupTypeDecoded = try containerValues.decodeIfPresent(BackupType.self, forKey: .backupType)
        backupType = backupTypeDecoded
        let backupCreationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .backupCreationDateTime)
        backupCreationDateTime = backupCreationDateTimeDecoded
        let backupExpiryDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .backupExpiryDateTime)
        backupExpiryDateTime = backupExpiryDateTimeDecoded
    }
}
