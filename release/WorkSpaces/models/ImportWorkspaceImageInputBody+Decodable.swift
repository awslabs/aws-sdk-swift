// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ImportWorkspaceImageInputBody: Equatable {
    public let ec2ImageId: String?
    public let ingestionProcess: WorkspaceImageIngestionProcess?
    public let imageName: String?
    public let imageDescription: String?
    public let tags: [Tag]?
    public let applications: [Application]?
}

extension ImportWorkspaceImageInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applications = "Applications"
        case ec2ImageId = "Ec2ImageId"
        case imageDescription = "ImageDescription"
        case imageName = "ImageName"
        case ingestionProcess = "IngestionProcess"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ec2ImageIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ec2ImageId)
        ec2ImageId = ec2ImageIdDecoded
        let ingestionProcessDecoded = try containerValues.decodeIfPresent(WorkspaceImageIngestionProcess.self, forKey: .ingestionProcess)
        ingestionProcess = ingestionProcessDecoded
        let imageNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .imageName)
        imageName = imageNameDecoded
        let imageDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .imageDescription)
        imageDescription = imageDescriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let applicationsContainer = try containerValues.decodeIfPresent([Application].self, forKey: .applications)
        var applicationsDecoded0:[Application]? = nil
        if let applicationsContainer = applicationsContainer {
            applicationsDecoded0 = [Application]()
            for string0 in applicationsContainer {
                applicationsDecoded0?.append(string0)
            }
        }
        applications = applicationsDecoded0
    }
}
