// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WorkspaceConnectionStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case connectionState = "ConnectionState"
        case connectionStateCheckTimestamp = "ConnectionStateCheckTimestamp"
        case lastKnownUserConnectionTimestamp = "LastKnownUserConnectionTimestamp"
        case workspaceId = "WorkspaceId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionState = connectionState {
            try encodeContainer.encode(connectionState.rawValue, forKey: .connectionState)
        }
        if let connectionStateCheckTimestamp = connectionStateCheckTimestamp {
            try encodeContainer.encode(connectionStateCheckTimestamp.timeIntervalSince1970, forKey: .connectionStateCheckTimestamp)
        }
        if let lastKnownUserConnectionTimestamp = lastKnownUserConnectionTimestamp {
            try encodeContainer.encode(lastKnownUserConnectionTimestamp.timeIntervalSince1970, forKey: .lastKnownUserConnectionTimestamp)
        }
        if let workspaceId = workspaceId {
            try encodeContainer.encode(workspaceId, forKey: .workspaceId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workspaceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workspaceId)
        workspaceId = workspaceIdDecoded
        let connectionStateDecoded = try containerValues.decodeIfPresent(ConnectionState.self, forKey: .connectionState)
        connectionState = connectionStateDecoded
        let connectionStateCheckTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .connectionStateCheckTimestamp)
        connectionStateCheckTimestamp = connectionStateCheckTimestampDecoded
        let lastKnownUserConnectionTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastKnownUserConnectionTimestamp)
        lastKnownUserConnectionTimestamp = lastKnownUserConnectionTimestampDecoded
    }
}
