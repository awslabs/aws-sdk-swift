// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes the default properties that are used for creating WorkSpaces. For more
///          information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/update-directory-details.html">Update Directory
///             Details for Your WorkSpaces</a>. </p>
public struct WorkspaceCreationProperties: Equatable {
    /// <p>The identifier of your custom security group.</p>
    public let customSecurityGroupId: String?
    /// <p>The default organizational unit (OU) for your WorkSpaces directories. This string must be the full Lightweight
    ///          Directory Access Protocol (LDAP) distinguished name for the target domain and OU. It must be in the form
    ///          <code>"OU=<i>value</i>,DC=<i>value</i>,DC=<i>value</i>"</code>,
    ///          where <i>value</i> is any string of characters, and the number of domain components (DCs) is
    ///          two or more. For example, <code>OU=WorkSpaces_machines,DC=machines,DC=example,DC=com</code>. </p>
    ///
    ///          <important>
    ///             <ul>
    ///                <li>
    ///                   <p>To avoid errors, certain characters in the distinguished name must be escaped. For more information,
    ///                   see <a href="https://docs.microsoft.com/previous-versions/windows/desktop/ldap/distinguished-names">
    ///                      Distinguished Names</a> in the Microsoft documentation.</p>
    ///                </li>
    ///                <li>
    ///                   <p>The API doesn't validate whether the OU exists.</p>
    ///                </li>
    ///             </ul>
    ///          </important>
    public let defaultOu: String?
    /// <p>Indicates whether internet access is enabled for your WorkSpaces.</p>
    public let enableInternetAccess: Bool?
    /// <p>Indicates whether maintenance mode is enabled for your WorkSpaces. For more information,
    ///          see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/workspace-maintenance.html">WorkSpace
    ///             Maintenance</a>. </p>
    public let enableMaintenanceMode: Bool?
    /// <p>Indicates whether Amazon WorkDocs is enabled for your WorkSpaces.</p>
    ///
    ///          <note>
    ///             <p>If WorkDocs is already enabled for a WorkSpaces directory and you disable it, new WorkSpaces launched in the
    ///             directory will not have WorkDocs enabled. However, WorkDocs remains enabled for any existing WorkSpaces, unless
    ///             you either disable users' access to WorkDocs or you delete the WorkDocs site. To disable users' access to WorkDocs,
    ///             see <a href="https://docs.aws.amazon.com/workdocs/latest/adminguide/inactive-user.html">Disabling Users</a> in the
    ///             <i>Amazon WorkDocs Administration Guide</i>. To delete a WorkDocs site, see
    ///             <a href="https://docs.aws.amazon.com/workdocs/latest/adminguide/manage-sites.html">Deleting a Site</a> in the
    ///             <i>Amazon WorkDocs Administration Guide</i>.</p>
    ///
    ///             <p>If you enable WorkDocs on a directory that already has existing WorkSpaces, the existing WorkSpaces and any
    ///          new WorkSpaces that are launched in the directory will have WorkDocs enabled.</p>
    ///          </note>
    public let enableWorkDocs: Bool?
    /// <p>Indicates whether users are local administrators of their WorkSpaces.</p>
    public let userEnabledAsLocalAdministrator: Bool?

    public init (
        customSecurityGroupId: String? = nil,
        defaultOu: String? = nil,
        enableInternetAccess: Bool? = nil,
        enableMaintenanceMode: Bool? = nil,
        enableWorkDocs: Bool? = nil,
        userEnabledAsLocalAdministrator: Bool? = nil
    )
    {
        self.customSecurityGroupId = customSecurityGroupId
        self.defaultOu = defaultOu
        self.enableInternetAccess = enableInternetAccess
        self.enableMaintenanceMode = enableMaintenanceMode
        self.enableWorkDocs = enableWorkDocs
        self.userEnabledAsLocalAdministrator = userEnabledAsLocalAdministrator
    }
}
