// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes a WorkSpace.</p>
public struct Workspace: Equatable {
    /// <p>The identifier of the bundle used to create the WorkSpace.</p>
    public let bundleId: String?
    /// <p>The name of the WorkSpace, as seen by the operating system. The format of this name varies.
    ///          For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/launch-workspaces-tutorials.html">
    ///             Launch a WorkSpace</a>. </p>
    public let computerName: String?
    /// <p>The identifier of the AWS Directory Service directory for the WorkSpace.</p>
    public let directoryId: String?
    /// <p>The error code that is returned if the WorkSpace cannot be created.</p>
    public let errorCode: String?
    /// <p>The text of the error message that is returned if the WorkSpace cannot be
    ///          created.</p>
    public let errorMessage: String?
    /// <p>The IP address of the WorkSpace.</p>
    public let ipAddress: String?
    /// <p>The modification states of the WorkSpace.</p>
    public let modificationStates: [ModificationState]?
    /// <p>Indicates whether the data stored on the root volume is encrypted.</p>
    public let rootVolumeEncryptionEnabled: Bool?
    /// <p>The operational state of the WorkSpace.</p>
    ///
    ///          <note>
    ///             <p>After a WorkSpace is terminated, the <code>TERMINATED</code> state is returned
    ///             only briefly before the WorkSpace directory metadata is cleaned up, so this state is rarely
    ///             returned. To confirm that a WorkSpace is terminated, check for the WorkSpace ID by using
    ///             <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaces.html">
    ///                DescribeWorkSpaces</a>. If the WorkSpace ID isn't returned, then the WorkSpace has
    ///             been successfully terminated.</p>
    ///          </note>
    public let state: WorkspaceState?
    /// <p>The identifier of the subnet for the WorkSpace.</p>
    public let subnetId: String?
    /// <p>The user for the WorkSpace.</p>
    public let userName: String?
    /// <p>Indicates whether the data stored on the user volume is encrypted.</p>
    public let userVolumeEncryptionEnabled: Bool?
    /// <p>The symmetric AWS KMS customer master key (CMK) used to encrypt data stored on your WorkSpace.
    ///          Amazon WorkSpaces does not support asymmetric CMKs.</p>
    public let volumeEncryptionKey: String?
    /// <p>The identifier of the WorkSpace.</p>
    public let workspaceId: String?
    /// <p>The properties of the WorkSpace.</p>
    public let workspaceProperties: WorkspaceProperties?

    public init (
        bundleId: String? = nil,
        computerName: String? = nil,
        directoryId: String? = nil,
        errorCode: String? = nil,
        errorMessage: String? = nil,
        ipAddress: String? = nil,
        modificationStates: [ModificationState]? = nil,
        rootVolumeEncryptionEnabled: Bool? = nil,
        state: WorkspaceState? = nil,
        subnetId: String? = nil,
        userName: String? = nil,
        userVolumeEncryptionEnabled: Bool? = nil,
        volumeEncryptionKey: String? = nil,
        workspaceId: String? = nil,
        workspaceProperties: WorkspaceProperties? = nil
    )
    {
        self.bundleId = bundleId
        self.computerName = computerName
        self.directoryId = directoryId
        self.errorCode = errorCode
        self.errorMessage = errorMessage
        self.ipAddress = ipAddress
        self.modificationStates = modificationStates
        self.rootVolumeEncryptionEnabled = rootVolumeEncryptionEnabled
        self.state = state
        self.subnetId = subnetId
        self.userName = userName
        self.userVolumeEncryptionEnabled = userVolumeEncryptionEnabled
        self.volumeEncryptionKey = volumeEncryptionKey
        self.workspaceId = workspaceId
        self.workspaceProperties = workspaceProperties
    }
}
