// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WorkspaceImage: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case created = "Created"
        case description = "Description"
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case imageId = "ImageId"
        case name = "Name"
        case operatingSystem = "OperatingSystem"
        case ownerAccountId = "OwnerAccountId"
        case requiredTenancy = "RequiredTenancy"
        case state = "State"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let created = created {
            try encodeContainer.encode(created.timeIntervalSince1970, forKey: .created)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let imageId = imageId {
            try encodeContainer.encode(imageId, forKey: .imageId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let operatingSystem = operatingSystem {
            try encodeContainer.encode(operatingSystem, forKey: .operatingSystem)
        }
        if let ownerAccountId = ownerAccountId {
            try encodeContainer.encode(ownerAccountId, forKey: .ownerAccountId)
        }
        if let requiredTenancy = requiredTenancy {
            try encodeContainer.encode(requiredTenancy.rawValue, forKey: .requiredTenancy)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .imageId)
        imageId = imageIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let operatingSystemDecoded = try containerValues.decodeIfPresent(OperatingSystem.self, forKey: .operatingSystem)
        operatingSystem = operatingSystemDecoded
        let stateDecoded = try containerValues.decodeIfPresent(WorkspaceImageState.self, forKey: .state)
        state = stateDecoded
        let requiredTenancyDecoded = try containerValues.decodeIfPresent(WorkspaceImageRequiredTenancy.self, forKey: .requiredTenancy)
        requiredTenancy = requiredTenancyDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let createdDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .created)
        created = createdDecoded
        let ownerAccountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerAccountId)
        ownerAccountId = ownerAccountIdDecoded
    }
}
