// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WorkspacesIpGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case groupDesc
        case groupId
        case groupName
        case userRules
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupDesc = groupDesc {
            try encodeContainer.encode(groupDesc, forKey: .groupDesc)
        }
        if let groupId = groupId {
            try encodeContainer.encode(groupId, forKey: .groupId)
        }
        if let groupName = groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if let userRules = userRules {
            var userRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userRules)
            for iprulelist0 in userRules {
                try userRulesContainer.encode(iprulelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .groupId)
        groupId = groupIdDecoded
        let groupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let groupDescDecoded = try containerValues.decodeIfPresent(String.self, forKey: .groupDesc)
        groupDesc = groupDescDecoded
        let userRulesContainer = try containerValues.decodeIfPresent([IpRuleItem].self, forKey: .userRules)
        var userRulesDecoded0:[IpRuleItem]? = nil
        if let userRulesContainer = userRulesContainer {
            userRulesDecoded0 = [IpRuleItem]()
            for structure0 in userRulesContainer {
                userRulesDecoded0?.append(structure0)
            }
        }
        userRules = userRulesDecoded0
    }
}
