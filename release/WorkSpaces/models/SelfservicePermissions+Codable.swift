// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SelfservicePermissions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case changeComputeType = "ChangeComputeType"
        case increaseVolumeSize = "IncreaseVolumeSize"
        case rebuildWorkspace = "RebuildWorkspace"
        case restartWorkspace = "RestartWorkspace"
        case switchRunningMode = "SwitchRunningMode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeComputeType = changeComputeType {
            try encodeContainer.encode(changeComputeType.rawValue, forKey: .changeComputeType)
        }
        if let increaseVolumeSize = increaseVolumeSize {
            try encodeContainer.encode(increaseVolumeSize.rawValue, forKey: .increaseVolumeSize)
        }
        if let rebuildWorkspace = rebuildWorkspace {
            try encodeContainer.encode(rebuildWorkspace.rawValue, forKey: .rebuildWorkspace)
        }
        if let restartWorkspace = restartWorkspace {
            try encodeContainer.encode(restartWorkspace.rawValue, forKey: .restartWorkspace)
        }
        if let switchRunningMode = switchRunningMode {
            try encodeContainer.encode(switchRunningMode.rawValue, forKey: .switchRunningMode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let restartWorkspaceDecoded = try containerValues.decodeIfPresent(ReconnectEnum.self, forKey: .restartWorkspace)
        restartWorkspace = restartWorkspaceDecoded
        let increaseVolumeSizeDecoded = try containerValues.decodeIfPresent(ReconnectEnum.self, forKey: .increaseVolumeSize)
        increaseVolumeSize = increaseVolumeSizeDecoded
        let changeComputeTypeDecoded = try containerValues.decodeIfPresent(ReconnectEnum.self, forKey: .changeComputeType)
        changeComputeType = changeComputeTypeDecoded
        let switchRunningModeDecoded = try containerValues.decodeIfPresent(ReconnectEnum.self, forKey: .switchRunningMode)
        switchRunningMode = switchRunningModeDecoded
        let rebuildWorkspaceDecoded = try containerValues.decodeIfPresent(ReconnectEnum.self, forKey: .rebuildWorkspace)
        rebuildWorkspace = rebuildWorkspaceDecoded
    }
}
