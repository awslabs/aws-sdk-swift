// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AccountModification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dedicatedTenancyManagementCidrRange = "DedicatedTenancyManagementCidrRange"
        case dedicatedTenancySupport = "DedicatedTenancySupport"
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case modificationState = "ModificationState"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dedicatedTenancyManagementCidrRange = dedicatedTenancyManagementCidrRange {
            try encodeContainer.encode(dedicatedTenancyManagementCidrRange, forKey: .dedicatedTenancyManagementCidrRange)
        }
        if let dedicatedTenancySupport = dedicatedTenancySupport {
            try encodeContainer.encode(dedicatedTenancySupport.rawValue, forKey: .dedicatedTenancySupport)
        }
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let modificationState = modificationState {
            try encodeContainer.encode(modificationState.rawValue, forKey: .modificationState)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modificationStateDecoded = try containerValues.decodeIfPresent(DedicatedTenancyModificationStateEnum.self, forKey: .modificationState)
        modificationState = modificationStateDecoded
        let dedicatedTenancySupportDecoded = try containerValues.decodeIfPresent(DedicatedTenancySupportResultEnum.self, forKey: .dedicatedTenancySupport)
        dedicatedTenancySupport = dedicatedTenancySupportDecoded
        let dedicatedTenancyManagementCidrRangeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dedicatedTenancyManagementCidrRange)
        dedicatedTenancyManagementCidrRange = dedicatedTenancyManagementCidrRangeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}
