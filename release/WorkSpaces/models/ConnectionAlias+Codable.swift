// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConnectionAlias: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aliasId = "AliasId"
        case associations = "Associations"
        case connectionString = "ConnectionString"
        case ownerAccountId = "OwnerAccountId"
        case state = "State"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasId = aliasId {
            try encodeContainer.encode(aliasId, forKey: .aliasId)
        }
        if let associations = associations {
            var associationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .associations)
            for connectionaliasassociationlist0 in associations {
                try associationsContainer.encode(connectionaliasassociationlist0)
            }
        }
        if let connectionString = connectionString {
            try encodeContainer.encode(connectionString, forKey: .connectionString)
        }
        if let ownerAccountId = ownerAccountId {
            try encodeContainer.encode(ownerAccountId, forKey: .ownerAccountId)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionStringDecoded = try containerValues.decodeIfPresent(String.self, forKey: .connectionString)
        connectionString = connectionStringDecoded
        let aliasIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aliasId)
        aliasId = aliasIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ConnectionAliasState.self, forKey: .state)
        state = stateDecoded
        let ownerAccountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerAccountId)
        ownerAccountId = ownerAccountIdDecoded
        let associationsContainer = try containerValues.decodeIfPresent([ConnectionAliasAssociation].self, forKey: .associations)
        var associationsDecoded0:[ConnectionAliasAssociation]? = nil
        if let associationsContainer = associationsContainer {
            associationsDecoded0 = [ConnectionAliasAssociation]()
            for structure0 in associationsContainer {
                associationsDecoded0?.append(structure0)
            }
        }
        associations = associationsDecoded0
    }
}
