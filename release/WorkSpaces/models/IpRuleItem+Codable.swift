// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IpRuleItem: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ipRule
        case ruleDesc
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ipRule = ipRule {
            try encodeContainer.encode(ipRule, forKey: .ipRule)
        }
        if let ruleDesc = ruleDesc {
            try encodeContainer.encode(ruleDesc, forKey: .ruleDesc)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipRuleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ipRule)
        ipRule = ipRuleDecoded
        let ruleDescDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ruleDesc)
        ruleDesc = ruleDescDecoded
    }
}
