// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WorkspaceDirectory: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alias = "Alias"
        case customerUserName = "CustomerUserName"
        case directoryId = "DirectoryId"
        case directoryName = "DirectoryName"
        case directoryType = "DirectoryType"
        case dnsIpAddresses = "DnsIpAddresses"
        case iamRoleId = "IamRoleId"
        case registrationCode = "RegistrationCode"
        case selfservicePermissions = "SelfservicePermissions"
        case state = "State"
        case subnetIds = "SubnetIds"
        case tenancy = "Tenancy"
        case workspaceAccessProperties = "WorkspaceAccessProperties"
        case workspaceCreationProperties = "WorkspaceCreationProperties"
        case workspaceSecurityGroupId = "WorkspaceSecurityGroupId"
        case ipGroupIds
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alias = alias {
            try encodeContainer.encode(alias, forKey: .alias)
        }
        if let customerUserName = customerUserName {
            try encodeContainer.encode(customerUserName, forKey: .customerUserName)
        }
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let directoryName = directoryName {
            try encodeContainer.encode(directoryName, forKey: .directoryName)
        }
        if let directoryType = directoryType {
            try encodeContainer.encode(directoryType.rawValue, forKey: .directoryType)
        }
        if let dnsIpAddresses = dnsIpAddresses {
            var dnsIpAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dnsIpAddresses)
            for dnsipaddresses0 in dnsIpAddresses {
                try dnsIpAddressesContainer.encode(dnsipaddresses0)
            }
        }
        if let iamRoleId = iamRoleId {
            try encodeContainer.encode(iamRoleId, forKey: .iamRoleId)
        }
        if let registrationCode = registrationCode {
            try encodeContainer.encode(registrationCode, forKey: .registrationCode)
        }
        if let selfservicePermissions = selfservicePermissions {
            try encodeContainer.encode(selfservicePermissions, forKey: .selfservicePermissions)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetids0 in subnetIds {
                try subnetIdsContainer.encode(subnetids0)
            }
        }
        if let tenancy = tenancy {
            try encodeContainer.encode(tenancy.rawValue, forKey: .tenancy)
        }
        if let workspaceAccessProperties = workspaceAccessProperties {
            try encodeContainer.encode(workspaceAccessProperties, forKey: .workspaceAccessProperties)
        }
        if let workspaceCreationProperties = workspaceCreationProperties {
            try encodeContainer.encode(workspaceCreationProperties, forKey: .workspaceCreationProperties)
        }
        if let workspaceSecurityGroupId = workspaceSecurityGroupId {
            try encodeContainer.encode(workspaceSecurityGroupId, forKey: .workspaceSecurityGroupId)
        }
        if let ipGroupIds = ipGroupIds {
            var ipGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipGroupIds)
            for ipgroupidlist0 in ipGroupIds {
                try ipGroupIdsContainer.encode(ipgroupidlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let aliasDecoded = try containerValues.decodeIfPresent(String.self, forKey: .alias)
        alias = aliasDecoded
        let directoryNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .directoryName)
        directoryName = directoryNameDecoded
        let registrationCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .registrationCode)
        registrationCode = registrationCodeDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [String]()
            for string0 in subnetIdsContainer {
                subnetIdsDecoded0?.append(string0)
            }
        }
        subnetIds = subnetIdsDecoded0
        let dnsIpAddressesContainer = try containerValues.decodeIfPresent([String].self, forKey: .dnsIpAddresses)
        var dnsIpAddressesDecoded0:[String]? = nil
        if let dnsIpAddressesContainer = dnsIpAddressesContainer {
            dnsIpAddressesDecoded0 = [String]()
            for string0 in dnsIpAddressesContainer {
                dnsIpAddressesDecoded0?.append(string0)
            }
        }
        dnsIpAddresses = dnsIpAddressesDecoded0
        let customerUserNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customerUserName)
        customerUserName = customerUserNameDecoded
        let iamRoleIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iamRoleId)
        iamRoleId = iamRoleIdDecoded
        let directoryTypeDecoded = try containerValues.decodeIfPresent(WorkspaceDirectoryType.self, forKey: .directoryType)
        directoryType = directoryTypeDecoded
        let workspaceSecurityGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workspaceSecurityGroupId)
        workspaceSecurityGroupId = workspaceSecurityGroupIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(WorkspaceDirectoryState.self, forKey: .state)
        state = stateDecoded
        let workspaceCreationPropertiesDecoded = try containerValues.decodeIfPresent(DefaultWorkspaceCreationProperties.self, forKey: .workspaceCreationProperties)
        workspaceCreationProperties = workspaceCreationPropertiesDecoded
        let ipGroupIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .ipGroupIds)
        var ipGroupIdsDecoded0:[String]? = nil
        if let ipGroupIdsContainer = ipGroupIdsContainer {
            ipGroupIdsDecoded0 = [String]()
            for string0 in ipGroupIdsContainer {
                ipGroupIdsDecoded0?.append(string0)
            }
        }
        ipGroupIds = ipGroupIdsDecoded0
        let workspaceAccessPropertiesDecoded = try containerValues.decodeIfPresent(WorkspaceAccessProperties.self, forKey: .workspaceAccessProperties)
        workspaceAccessProperties = workspaceAccessPropertiesDecoded
        let tenancyDecoded = try containerValues.decodeIfPresent(Tenancy.self, forKey: .tenancy)
        tenancy = tenancyDecoded
        let selfservicePermissionsDecoded = try containerValues.decodeIfPresent(SelfservicePermissions.self, forKey: .selfservicePermissions)
        selfservicePermissions = selfservicePermissionsDecoded
    }
}
