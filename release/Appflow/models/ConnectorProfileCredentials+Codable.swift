// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConnectorProfileCredentials: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case amplitude = "Amplitude"
        case datadog = "Datadog"
        case dynatrace = "Dynatrace"
        case googleAnalytics = "GoogleAnalytics"
        case honeycode = "Honeycode"
        case inforNexus = "InforNexus"
        case marketo = "Marketo"
        case redshift = "Redshift"
        case salesforce = "Salesforce"
        case serviceNow = "ServiceNow"
        case singular = "Singular"
        case slack = "Slack"
        case snowflake = "Snowflake"
        case trendmicro = "Trendmicro"
        case veeva = "Veeva"
        case zendesk = "Zendesk"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amplitude = amplitude {
            try encodeContainer.encode(amplitude, forKey: .amplitude)
        }
        if let datadog = datadog {
            try encodeContainer.encode(datadog, forKey: .datadog)
        }
        if let dynatrace = dynatrace {
            try encodeContainer.encode(dynatrace, forKey: .dynatrace)
        }
        if let googleAnalytics = googleAnalytics {
            try encodeContainer.encode(googleAnalytics, forKey: .googleAnalytics)
        }
        if let honeycode = honeycode {
            try encodeContainer.encode(honeycode, forKey: .honeycode)
        }
        if let inforNexus = inforNexus {
            try encodeContainer.encode(inforNexus, forKey: .inforNexus)
        }
        if let marketo = marketo {
            try encodeContainer.encode(marketo, forKey: .marketo)
        }
        if let redshift = redshift {
            try encodeContainer.encode(redshift, forKey: .redshift)
        }
        if let salesforce = salesforce {
            try encodeContainer.encode(salesforce, forKey: .salesforce)
        }
        if let serviceNow = serviceNow {
            try encodeContainer.encode(serviceNow, forKey: .serviceNow)
        }
        if let singular = singular {
            try encodeContainer.encode(singular, forKey: .singular)
        }
        if let slack = slack {
            try encodeContainer.encode(slack, forKey: .slack)
        }
        if let snowflake = snowflake {
            try encodeContainer.encode(snowflake, forKey: .snowflake)
        }
        if let trendmicro = trendmicro {
            try encodeContainer.encode(trendmicro, forKey: .trendmicro)
        }
        if let veeva = veeva {
            try encodeContainer.encode(veeva, forKey: .veeva)
        }
        if let zendesk = zendesk {
            try encodeContainer.encode(zendesk, forKey: .zendesk)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let amplitudeDecoded = try containerValues.decodeIfPresent(AmplitudeConnectorProfileCredentials.self, forKey: .amplitude)
        amplitude = amplitudeDecoded
        let datadogDecoded = try containerValues.decodeIfPresent(DatadogConnectorProfileCredentials.self, forKey: .datadog)
        datadog = datadogDecoded
        let dynatraceDecoded = try containerValues.decodeIfPresent(DynatraceConnectorProfileCredentials.self, forKey: .dynatrace)
        dynatrace = dynatraceDecoded
        let googleAnalyticsDecoded = try containerValues.decodeIfPresent(GoogleAnalyticsConnectorProfileCredentials.self, forKey: .googleAnalytics)
        googleAnalytics = googleAnalyticsDecoded
        let honeycodeDecoded = try containerValues.decodeIfPresent(HoneycodeConnectorProfileCredentials.self, forKey: .honeycode)
        honeycode = honeycodeDecoded
        let inforNexusDecoded = try containerValues.decodeIfPresent(InforNexusConnectorProfileCredentials.self, forKey: .inforNexus)
        inforNexus = inforNexusDecoded
        let marketoDecoded = try containerValues.decodeIfPresent(MarketoConnectorProfileCredentials.self, forKey: .marketo)
        marketo = marketoDecoded
        let redshiftDecoded = try containerValues.decodeIfPresent(RedshiftConnectorProfileCredentials.self, forKey: .redshift)
        redshift = redshiftDecoded
        let salesforceDecoded = try containerValues.decodeIfPresent(SalesforceConnectorProfileCredentials.self, forKey: .salesforce)
        salesforce = salesforceDecoded
        let serviceNowDecoded = try containerValues.decodeIfPresent(ServiceNowConnectorProfileCredentials.self, forKey: .serviceNow)
        serviceNow = serviceNowDecoded
        let singularDecoded = try containerValues.decodeIfPresent(SingularConnectorProfileCredentials.self, forKey: .singular)
        singular = singularDecoded
        let slackDecoded = try containerValues.decodeIfPresent(SlackConnectorProfileCredentials.self, forKey: .slack)
        slack = slackDecoded
        let snowflakeDecoded = try containerValues.decodeIfPresent(SnowflakeConnectorProfileCredentials.self, forKey: .snowflake)
        snowflake = snowflakeDecoded
        let trendmicroDecoded = try containerValues.decodeIfPresent(TrendmicroConnectorProfileCredentials.self, forKey: .trendmicro)
        trendmicro = trendmicroDecoded
        let veevaDecoded = try containerValues.decodeIfPresent(VeevaConnectorProfileCredentials.self, forKey: .veeva)
        veeva = veevaDecoded
        let zendeskDecoded = try containerValues.decodeIfPresent(ZendeskConnectorProfileCredentials.self, forKey: .zendesk)
        zendesk = zendeskDecoded
    }
}
