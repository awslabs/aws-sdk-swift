// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ExecutionResult: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bytesProcessed
        case bytesWritten
        case errorInfo
        case recordsProcessed
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bytesProcessed = bytesProcessed {
            try encodeContainer.encode(bytesProcessed, forKey: .bytesProcessed)
        }
        if let bytesWritten = bytesWritten {
            try encodeContainer.encode(bytesWritten, forKey: .bytesWritten)
        }
        if let errorInfo = errorInfo {
            try encodeContainer.encode(errorInfo, forKey: .errorInfo)
        }
        if let recordsProcessed = recordsProcessed {
            try encodeContainer.encode(recordsProcessed, forKey: .recordsProcessed)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorInfoDecoded = try containerValues.decodeIfPresent(ErrorInfo.self, forKey: .errorInfo)
        errorInfo = errorInfoDecoded
        let bytesProcessedDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .bytesProcessed)
        bytesProcessed = bytesProcessedDecoded
        let bytesWrittenDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .bytesWritten)
        bytesWritten = bytesWrittenDecoded
        let recordsProcessedDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .recordsProcessed)
        recordsProcessed = recordsProcessedDecoded
    }
}
