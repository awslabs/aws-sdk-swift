// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum ConnectorType {
    case amplitude
    case customerprofiles
    case datadog
    case dynatrace
    case eventbridge
    case googleanalytics
    case honeycode
    case infornexus
    case lookoutmetrics
    case marketo
    case redshift
    case s3
    case salesforce
    case servicenow
    case singular
    case slack
    case snowflake
    case trendmicro
    case upsolver
    case veeva
    case zendesk
    case sdkUnknown(String)
}

extension ConnectorType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ConnectorType] {
        return [
            .amplitude,
            .customerprofiles,
            .datadog,
            .dynatrace,
            .eventbridge,
            .googleanalytics,
            .honeycode,
            .infornexus,
            .lookoutmetrics,
            .marketo,
            .redshift,
            .s3,
            .salesforce,
            .servicenow,
            .singular,
            .slack,
            .snowflake,
            .trendmicro,
            .upsolver,
            .veeva,
            .zendesk,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .amplitude: return "Amplitude"
        case .customerprofiles: return "CustomerProfiles"
        case .datadog: return "Datadog"
        case .dynatrace: return "Dynatrace"
        case .eventbridge: return "EventBridge"
        case .googleanalytics: return "Googleanalytics"
        case .honeycode: return "Honeycode"
        case .infornexus: return "Infornexus"
        case .lookoutmetrics: return "LookoutMetrics"
        case .marketo: return "Marketo"
        case .redshift: return "Redshift"
        case .s3: return "S3"
        case .salesforce: return "Salesforce"
        case .servicenow: return "Servicenow"
        case .singular: return "Singular"
        case .slack: return "Slack"
        case .snowflake: return "Snowflake"
        case .trendmicro: return "Trendmicro"
        case .upsolver: return "Upsolver"
        case .veeva: return "Veeva"
        case .zendesk: return "Zendesk"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ConnectorType(rawValue: rawValue) ?? ConnectorType.sdkUnknown(rawValue)
    }
}
