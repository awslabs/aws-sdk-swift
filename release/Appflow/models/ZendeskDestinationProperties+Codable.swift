// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ZendeskDestinationProperties: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case errorHandlingConfig
        case idFieldNames
        case object
        case writeOperationType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorHandlingConfig = errorHandlingConfig {
            try encodeContainer.encode(errorHandlingConfig, forKey: .errorHandlingConfig)
        }
        if let idFieldNames = idFieldNames {
            var idFieldNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .idFieldNames)
            for idfieldnamelist0 in idFieldNames {
                try idFieldNamesContainer.encode(idfieldnamelist0)
            }
        }
        if let object = object {
            try encodeContainer.encode(object, forKey: .object)
        }
        if let writeOperationType = writeOperationType {
            try encodeContainer.encode(writeOperationType.rawValue, forKey: .writeOperationType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let objectDecoded = try containerValues.decodeIfPresent(String.self, forKey: .object)
        object = objectDecoded
        let idFieldNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .idFieldNames)
        var idFieldNamesDecoded0:[String]? = nil
        if let idFieldNamesContainer = idFieldNamesContainer {
            idFieldNamesDecoded0 = [String]()
            for string0 in idFieldNamesContainer {
                idFieldNamesDecoded0?.append(string0)
            }
        }
        idFieldNames = idFieldNamesDecoded0
        let errorHandlingConfigDecoded = try containerValues.decodeIfPresent(ErrorHandlingConfig.self, forKey: .errorHandlingConfig)
        errorHandlingConfig = errorHandlingConfigDecoded
        let writeOperationTypeDecoded = try containerValues.decodeIfPresent(WriteOperationType.self, forKey: .writeOperationType)
        writeOperationType = writeOperationTypeDecoded
    }
}
