// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ExecutionRecord: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dataPullEndTime
        case dataPullStartTime
        case executionId
        case executionResult
        case executionStatus
        case lastUpdatedAt
        case startedAt
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataPullEndTime = dataPullEndTime {
            try encodeContainer.encode(dataPullEndTime.timeIntervalSince1970, forKey: .dataPullEndTime)
        }
        if let dataPullStartTime = dataPullStartTime {
            try encodeContainer.encode(dataPullStartTime.timeIntervalSince1970, forKey: .dataPullStartTime)
        }
        if let executionId = executionId {
            try encodeContainer.encode(executionId, forKey: .executionId)
        }
        if let executionResult = executionResult {
            try encodeContainer.encode(executionResult, forKey: .executionResult)
        }
        if let executionStatus = executionStatus {
            try encodeContainer.encode(executionStatus.rawValue, forKey: .executionStatus)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let startedAt = startedAt {
            try encodeContainer.encode(startedAt.timeIntervalSince1970, forKey: .startedAt)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .executionId)
        executionId = executionIdDecoded
        let executionStatusDecoded = try containerValues.decodeIfPresent(ExecutionStatus.self, forKey: .executionStatus)
        executionStatus = executionStatusDecoded
        let executionResultDecoded = try containerValues.decodeIfPresent(ExecutionResult.self, forKey: .executionResult)
        executionResult = executionResultDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let dataPullStartTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .dataPullStartTime)
        dataPullStartTime = dataPullStartTimeDecoded
        let dataPullEndTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .dataPullEndTime)
        dataPullEndTime = dataPullEndTimeDecoded
    }
}
