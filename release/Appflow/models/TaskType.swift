// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum TaskType {
    case arithmetic
    case filter
    case map
    case mask
    case merge
    case truncate
    case validate
    case sdkUnknown(String)
}

extension TaskType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TaskType] {
        return [
            .arithmetic,
            .filter,
            .map,
            .mask,
            .merge,
            .truncate,
            .validate,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .arithmetic: return "Arithmetic"
        case .filter: return "Filter"
        case .map: return "Map"
        case .mask: return "Mask"
        case .merge: return "Merge"
        case .truncate: return "Truncate"
        case .validate: return "Validate"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TaskType(rawValue: rawValue) ?? TaskType.sdkUnknown(rawValue)
    }
}
