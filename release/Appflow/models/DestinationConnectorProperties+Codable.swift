// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DestinationConnectorProperties: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case customerProfiles = "CustomerProfiles"
        case eventBridge = "EventBridge"
        case honeycode = "Honeycode"
        case lookoutMetrics = "LookoutMetrics"
        case redshift = "Redshift"
        case s3 = "S3"
        case salesforce = "Salesforce"
        case snowflake = "Snowflake"
        case upsolver = "Upsolver"
        case zendesk = "Zendesk"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customerProfiles = customerProfiles {
            try encodeContainer.encode(customerProfiles, forKey: .customerProfiles)
        }
        if let eventBridge = eventBridge {
            try encodeContainer.encode(eventBridge, forKey: .eventBridge)
        }
        if let honeycode = honeycode {
            try encodeContainer.encode(honeycode, forKey: .honeycode)
        }
        if let lookoutMetrics = lookoutMetrics {
            try encodeContainer.encode(lookoutMetrics, forKey: .lookoutMetrics)
        }
        if let redshift = redshift {
            try encodeContainer.encode(redshift, forKey: .redshift)
        }
        if let s3 = s3 {
            try encodeContainer.encode(s3, forKey: .s3)
        }
        if let salesforce = salesforce {
            try encodeContainer.encode(salesforce, forKey: .salesforce)
        }
        if let snowflake = snowflake {
            try encodeContainer.encode(snowflake, forKey: .snowflake)
        }
        if let upsolver = upsolver {
            try encodeContainer.encode(upsolver, forKey: .upsolver)
        }
        if let zendesk = zendesk {
            try encodeContainer.encode(zendesk, forKey: .zendesk)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let redshiftDecoded = try containerValues.decodeIfPresent(RedshiftDestinationProperties.self, forKey: .redshift)
        redshift = redshiftDecoded
        let s3Decoded = try containerValues.decodeIfPresent(S3DestinationProperties.self, forKey: .s3)
        s3 = s3Decoded
        let salesforceDecoded = try containerValues.decodeIfPresent(SalesforceDestinationProperties.self, forKey: .salesforce)
        salesforce = salesforceDecoded
        let snowflakeDecoded = try containerValues.decodeIfPresent(SnowflakeDestinationProperties.self, forKey: .snowflake)
        snowflake = snowflakeDecoded
        let eventBridgeDecoded = try containerValues.decodeIfPresent(EventBridgeDestinationProperties.self, forKey: .eventBridge)
        eventBridge = eventBridgeDecoded
        let lookoutMetricsDecoded = try containerValues.decodeIfPresent(LookoutMetricsDestinationProperties.self, forKey: .lookoutMetrics)
        lookoutMetrics = lookoutMetricsDecoded
        let upsolverDecoded = try containerValues.decodeIfPresent(UpsolverDestinationProperties.self, forKey: .upsolver)
        upsolver = upsolverDecoded
        let honeycodeDecoded = try containerValues.decodeIfPresent(HoneycodeDestinationProperties.self, forKey: .honeycode)
        honeycode = honeycodeDecoded
        let customerProfilesDecoded = try containerValues.decodeIfPresent(CustomerProfilesDestinationProperties.self, forKey: .customerProfiles)
        customerProfiles = customerProfilesDecoded
        let zendeskDecoded = try containerValues.decodeIfPresent(ZendeskDestinationProperties.self, forKey: .zendesk)
        zendesk = zendeskDecoded
    }
}
