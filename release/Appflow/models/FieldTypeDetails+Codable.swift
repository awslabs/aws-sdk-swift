// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FieldTypeDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fieldType
        case filterOperators
        case supportedValues
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fieldType = fieldType {
            try encodeContainer.encode(fieldType, forKey: .fieldType)
        }
        if let filterOperators = filterOperators {
            var filterOperatorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filterOperators)
            for filteroperatorlist0 in filterOperators {
                try filterOperatorsContainer.encode(filteroperatorlist0.rawValue)
            }
        }
        if let supportedValues = supportedValues {
            var supportedValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedValues)
            for supportedvaluelist0 in supportedValues {
                try supportedValuesContainer.encode(supportedvaluelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fieldTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fieldType)
        fieldType = fieldTypeDecoded
        let filterOperatorsContainer = try containerValues.decodeIfPresent([Operator].self, forKey: .filterOperators)
        var filterOperatorsDecoded0:[Operator]? = nil
        if let filterOperatorsContainer = filterOperatorsContainer {
            filterOperatorsDecoded0 = [Operator]()
            for string0 in filterOperatorsContainer {
                filterOperatorsDecoded0?.append(string0)
            }
        }
        filterOperators = filterOperatorsDecoded0
        let supportedValuesContainer = try containerValues.decodeIfPresent([String].self, forKey: .supportedValues)
        var supportedValuesDecoded0:[String]? = nil
        if let supportedValuesContainer = supportedValuesContainer {
            supportedValuesDecoded0 = [String]()
            for string0 in supportedValuesContainer {
                supportedValuesDecoded0?.append(string0)
            }
        }
        supportedValues = supportedValuesDecoded0
    }
}
