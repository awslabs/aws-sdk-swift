// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeFlowOutputBody: Equatable {
    public let flowArn: String?
    public let description: String?
    public let flowName: String?
    public let kmsArn: String?
    public let flowStatus: FlowStatus?
    public let flowStatusMessage: String?
    public let sourceFlowConfig: SourceFlowConfig?
    public let destinationFlowConfigList: [DestinationFlowConfig]?
    public let lastRunExecutionDetails: ExecutionDetails?
    public let triggerConfig: TriggerConfig?
    public let tasks: [Task]?
    public let createdAt: Date?
    public let lastUpdatedAt: Date?
    public let createdBy: String?
    public let lastUpdatedBy: String?
    public let tags: [String:String]?
}

extension DescribeFlowOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case createdAt
        case createdBy
        case description
        case destinationFlowConfigList
        case flowArn
        case flowName
        case flowStatus
        case flowStatusMessage
        case kmsArn
        case lastRunExecutionDetails
        case lastUpdatedAt
        case lastUpdatedBy
        case sourceFlowConfig
        case tags
        case tasks
        case triggerConfig
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let flowArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .flowArn)
        flowArn = flowArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let flowNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .flowName)
        flowName = flowNameDecoded
        let kmsArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsArn)
        kmsArn = kmsArnDecoded
        let flowStatusDecoded = try containerValues.decodeIfPresent(FlowStatus.self, forKey: .flowStatus)
        flowStatus = flowStatusDecoded
        let flowStatusMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .flowStatusMessage)
        flowStatusMessage = flowStatusMessageDecoded
        let sourceFlowConfigDecoded = try containerValues.decodeIfPresent(SourceFlowConfig.self, forKey: .sourceFlowConfig)
        sourceFlowConfig = sourceFlowConfigDecoded
        let destinationFlowConfigListContainer = try containerValues.decodeIfPresent([DestinationFlowConfig].self, forKey: .destinationFlowConfigList)
        var destinationFlowConfigListDecoded0:[DestinationFlowConfig]? = nil
        if let destinationFlowConfigListContainer = destinationFlowConfigListContainer {
            destinationFlowConfigListDecoded0 = [DestinationFlowConfig]()
            for structure0 in destinationFlowConfigListContainer {
                destinationFlowConfigListDecoded0?.append(structure0)
            }
        }
        destinationFlowConfigList = destinationFlowConfigListDecoded0
        let lastRunExecutionDetailsDecoded = try containerValues.decodeIfPresent(ExecutionDetails.self, forKey: .lastRunExecutionDetails)
        lastRunExecutionDetails = lastRunExecutionDetailsDecoded
        let triggerConfigDecoded = try containerValues.decodeIfPresent(TriggerConfig.self, forKey: .triggerConfig)
        triggerConfig = triggerConfigDecoded
        let tasksContainer = try containerValues.decodeIfPresent([Task].self, forKey: .tasks)
        var tasksDecoded0:[Task]? = nil
        if let tasksContainer = tasksContainer {
            tasksDecoded0 = [Task]()
            for structure0 in tasksContainer {
                tasksDecoded0?.append(structure0)
            }
        }
        tasks = tasksDecoded0
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let lastUpdatedByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastUpdatedBy)
        lastUpdatedBy = lastUpdatedByDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
