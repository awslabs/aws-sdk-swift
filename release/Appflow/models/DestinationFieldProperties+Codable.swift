// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DestinationFieldProperties: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case isCreatable
        case isNullable
        case isUpdatable
        case isUpsertable
        case supportedWriteOperations
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if isCreatable != false {
            try encodeContainer.encode(isCreatable, forKey: .isCreatable)
        }
        if isNullable != false {
            try encodeContainer.encode(isNullable, forKey: .isNullable)
        }
        if isUpdatable != false {
            try encodeContainer.encode(isUpdatable, forKey: .isUpdatable)
        }
        if isUpsertable != false {
            try encodeContainer.encode(isUpsertable, forKey: .isUpsertable)
        }
        if let supportedWriteOperations = supportedWriteOperations {
            var supportedWriteOperationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedWriteOperations)
            for supportedwriteoperationlist0 in supportedWriteOperations {
                try supportedWriteOperationsContainer.encode(supportedwriteoperationlist0.rawValue)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isCreatableDecoded = try containerValues.decode(Bool.self, forKey: .isCreatable)
        isCreatable = isCreatableDecoded
        let isNullableDecoded = try containerValues.decode(Bool.self, forKey: .isNullable)
        isNullable = isNullableDecoded
        let isUpsertableDecoded = try containerValues.decode(Bool.self, forKey: .isUpsertable)
        isUpsertable = isUpsertableDecoded
        let isUpdatableDecoded = try containerValues.decode(Bool.self, forKey: .isUpdatable)
        isUpdatable = isUpdatableDecoded
        let supportedWriteOperationsContainer = try containerValues.decodeIfPresent([WriteOperationType].self, forKey: .supportedWriteOperations)
        var supportedWriteOperationsDecoded0:[WriteOperationType]? = nil
        if let supportedWriteOperationsContainer = supportedWriteOperationsContainer {
            supportedWriteOperationsDecoded0 = [WriteOperationType]()
            for string0 in supportedWriteOperationsContainer {
                supportedWriteOperationsDecoded0?.append(string0)
            }
        }
        supportedWriteOperations = supportedWriteOperationsDecoded0
    }
}
