// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension ResourceGroupsTaggingAPIClientTypes.ComplianceDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceStatus = "ComplianceStatus"
        case keysWithNoncompliantValues = "KeysWithNoncompliantValues"
        case noncompliantKeys = "NoncompliantKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceStatus = self.complianceStatus {
            try encodeContainer.encode(complianceStatus, forKey: .complianceStatus)
        }
        if let keysWithNoncompliantValues = keysWithNoncompliantValues {
            var keysWithNoncompliantValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keysWithNoncompliantValues)
            for tagkey0 in keysWithNoncompliantValues {
                try keysWithNoncompliantValuesContainer.encode(tagkey0)
            }
        }
        if let noncompliantKeys = noncompliantKeys {
            var noncompliantKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .noncompliantKeys)
            for tagkey0 in noncompliantKeys {
                try noncompliantKeysContainer.encode(tagkey0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let noncompliantKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .noncompliantKeys)
        var noncompliantKeysDecoded0:[Swift.String]? = nil
        if let noncompliantKeysContainer = noncompliantKeysContainer {
            noncompliantKeysDecoded0 = [Swift.String]()
            for string0 in noncompliantKeysContainer {
                if let string0 = string0 {
                    noncompliantKeysDecoded0?.append(string0)
                }
            }
        }
        noncompliantKeys = noncompliantKeysDecoded0
        let keysWithNoncompliantValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .keysWithNoncompliantValues)
        var keysWithNoncompliantValuesDecoded0:[Swift.String]? = nil
        if let keysWithNoncompliantValuesContainer = keysWithNoncompliantValuesContainer {
            keysWithNoncompliantValuesDecoded0 = [Swift.String]()
            for string0 in keysWithNoncompliantValuesContainer {
                if let string0 = string0 {
                    keysWithNoncompliantValuesDecoded0?.append(string0)
                }
            }
        }
        keysWithNoncompliantValues = keysWithNoncompliantValuesDecoded0
        let complianceStatusDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .complianceStatus)
        complianceStatus = complianceStatusDecoded
    }
}

extension ResourceGroupsTaggingAPIClientTypes {
    /// Information that shows whether a resource is compliant with the effective tag policy, including details on any noncompliant tag keys.
    public struct ComplianceDetails: Swift.Equatable {
        /// Whether a resource is compliant with the effective tag policy.
        public var complianceStatus: Swift.Bool?
        /// These are keys defined in the effective policy that are on the resource with either incorrect case treatment or noncompliant values.
        public var keysWithNoncompliantValues: [Swift.String]?
        /// These tag keys on the resource are noncompliant with the effective tag policy.
        public var noncompliantKeys: [Swift.String]?

        public init (
            complianceStatus: Swift.Bool? = nil,
            keysWithNoncompliantValues: [Swift.String]? = nil,
            noncompliantKeys: [Swift.String]? = nil
        )
        {
            self.complianceStatus = complianceStatus
            self.keysWithNoncompliantValues = keysWithNoncompliantValues
            self.noncompliantKeys = noncompliantKeys
        }
    }

}

extension ConcurrentModificationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConcurrentModificationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The target of the operation is currently being modified by a different request. Try again later.
public struct ConcurrentModificationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConcurrentModificationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConcurrentModificationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConstraintViolationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConstraintViolationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was denied because performing this operation violates a constraint. Some of the reasons in the following list might not apply to this specific operation.
///
/// * You must meet the prerequisites for using tag policies. For information, see [Prerequisites and Permissions for Using Tag Policies](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies-prereqs.html) in the Organizations User Guide.
///
/// * You must enable the tag policies service principal (tagpolicies.tag.amazonaws.com) to integrate with Organizations For information, see [EnableAWSServiceAccess](https://docs.aws.amazon.com/organizations/latest/APIReference/API_EnableAWSServiceAccess.html).
///
/// * You must have a tag policy attached to the organization root, an OU, or an account.
public struct ConstraintViolationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConstraintViolationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConstraintViolationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DescribeReportCreationInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension DescribeReportCreationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeReportCreationInput: Swift.Equatable {

    public init () { }
}

struct DescribeReportCreationInputBody: Swift.Equatable {
}

extension DescribeReportCreationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeReportCreationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeReportCreationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottledException" : self = .throttledException(try ThrottledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeReportCreationOutputError: Swift.Error, Swift.Equatable {
    case constraintViolationException(ConstraintViolationException)
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case throttledException(ThrottledException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeReportCreationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeReportCreationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errorMessage = output.errorMessage
            self.s3Location = output.s3Location
            self.startDate = output.startDate
            self.status = output.status
        } else {
            self.errorMessage = nil
            self.s3Location = nil
            self.startDate = nil
            self.status = nil
        }
    }
}

public struct DescribeReportCreationOutputResponse: Swift.Equatable {
    /// Details of the common errors that all operations return.
    public var errorMessage: Swift.String?
    /// The path to the Amazon S3 bucket where the report was stored on creation.
    public var s3Location: Swift.String?
    /// The date and time that the report was started.
    public var startDate: Swift.String?
    /// Reports the status of the operation. The operation status can be one of the following:
    ///
    /// * RUNNING - Report creation is in progress.
    ///
    /// * SUCCEEDED - Report creation is complete. You can open the report from the Amazon S3 bucket that you specified when you ran StartReportCreation.
    ///
    /// * FAILED - Report creation timed out or the Amazon S3 bucket is not accessible.
    ///
    /// * NO REPORT - No report was generated in the last 90 days.
    public var status: Swift.String?

    public init (
        errorMessage: Swift.String? = nil,
        s3Location: Swift.String? = nil,
        startDate: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.errorMessage = errorMessage
        self.s3Location = s3Location
        self.startDate = startDate
        self.status = status
    }
}

struct DescribeReportCreationOutputResponseBody: Swift.Equatable {
    let status: Swift.String?
    let s3Location: Swift.String?
    let startDate: Swift.String?
    let errorMessage: Swift.String?
}

extension DescribeReportCreationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorMessage = "ErrorMessage"
        case s3Location = "S3Location"
        case startDate = "StartDate"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let s3LocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Location)
        s3Location = s3LocationDecoded
        let startDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startDate)
        startDate = startDateDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension ResourceGroupsTaggingAPIClientTypes {
    public enum ErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case internalServiceException
        case invalidParameterException
        case sdkUnknown(Swift.String)

        public static var allCases: [ErrorCode] {
            return [
                .internalServiceException,
                .invalidParameterException,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .internalServiceException: return "InternalServiceException"
            case .invalidParameterException: return "InvalidParameterException"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ErrorCode(rawValue: rawValue) ?? ErrorCode.sdkUnknown(rawValue)
        }
    }
}

extension ResourceGroupsTaggingAPIClientTypes.FailureInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case statusCode = "StatusCode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode.rawValue, forKey: .errorCode)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if statusCode != 0 {
            try encodeContainer.encode(statusCode, forKey: .statusCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusCodeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .statusCode) ?? 0
        statusCode = statusCodeDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(ResourceGroupsTaggingAPIClientTypes.ErrorCode.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension ResourceGroupsTaggingAPIClientTypes {
    /// Information about the errors that are returned for each failed resource. This information can include InternalServiceException and InvalidParameterException errors. It can also include any valid error code returned by the Amazon Web Services service that hosts the resource that the ARN key represents. The following are common error codes that you might receive from other Amazon Web Services services:
    ///
    /// * InternalServiceException – This can mean that the Resource Groups Tagging API didn't receive a response from another Amazon Web Services service. It can also mean that the resource type in the request is not supported by the Resource Groups Tagging API. In these cases, it's safe to retry the request and then call [GetResources](https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/API_GetResources.html) to verify the changes.
    ///
    /// * AccessDeniedException – This can mean that you need permission to call the tagging operations in the Amazon Web Services service that contains the resource. For example, to use the Resource Groups Tagging API to tag a Amazon CloudWatch alarm resource, you need permission to call both [TagResources](https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/API_TagResources.html) and [TagResource](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html) in the CloudWatch API.
    ///
    ///
    /// For more information on errors that are generated from other Amazon Web Services services, see the documentation for that service.
    public struct FailureInfo: Swift.Equatable {
        /// The code of the common error. Valid values include InternalServiceException, InvalidParameterException, and any valid error code returned by the Amazon Web Services service that hosts the resource that you want to tag.
        public var errorCode: ResourceGroupsTaggingAPIClientTypes.ErrorCode?
        /// The message of the common error.
        public var errorMessage: Swift.String?
        /// The HTTP status code of the common error.
        public var statusCode: Swift.Int

        public init (
            errorCode: ResourceGroupsTaggingAPIClientTypes.ErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            statusCode: Swift.Int = 0
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.statusCode = statusCode
        }
    }

}

extension GetComplianceSummaryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupBy = "GroupBy"
        case maxResults = "MaxResults"
        case paginationToken = "PaginationToken"
        case regionFilters = "RegionFilters"
        case resourceTypeFilters = "ResourceTypeFilters"
        case tagKeyFilters = "TagKeyFilters"
        case targetIdFilters = "TargetIdFilters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupBy = groupBy {
            var groupByContainer = encodeContainer.nestedUnkeyedContainer(forKey: .groupBy)
            for groupbyattribute0 in groupBy {
                try groupByContainer.encode(groupbyattribute0.rawValue)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let paginationToken = self.paginationToken {
            try encodeContainer.encode(paginationToken, forKey: .paginationToken)
        }
        if let regionFilters = regionFilters {
            var regionFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regionFilters)
            for region0 in regionFilters {
                try regionFiltersContainer.encode(region0)
            }
        }
        if let resourceTypeFilters = resourceTypeFilters {
            var resourceTypeFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceTypeFilters)
            for amazonresourcetype0 in resourceTypeFilters {
                try resourceTypeFiltersContainer.encode(amazonresourcetype0)
            }
        }
        if let tagKeyFilters = tagKeyFilters {
            var tagKeyFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeyFilters)
            for tagkey0 in tagKeyFilters {
                try tagKeyFiltersContainer.encode(tagkey0)
            }
        }
        if let targetIdFilters = targetIdFilters {
            var targetIdFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetIdFilters)
            for targetid0 in targetIdFilters {
                try targetIdFiltersContainer.encode(targetid0)
            }
        }
    }
}

extension GetComplianceSummaryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetComplianceSummaryInput: Swift.Equatable {
    /// Specifies a list of attributes to group the counts of noncompliant resources by. If supplied, the counts are sorted by those attributes.
    public var groupBy: [ResourceGroupsTaggingAPIClientTypes.GroupByAttribute]?
    /// Specifies the maximum number of results to be returned in each page. A query can return fewer than this maximum, even if there are more results still to return. You should always check the PaginationToken response value to see if there are more results. You can specify a minimum of 1 and a maximum value of 100.
    public var maxResults: Swift.Int?
    /// Specifies a PaginationToken response value from a previous request to indicate that you want the next page of results. Leave this parameter empty in your initial request.
    public var paginationToken: Swift.String?
    /// Specifies a list of Amazon Web Services Regions to limit the output to. If you use this parameter, the count of returned noncompliant resources includes only resources in the specified Regions.
    public var regionFilters: [Swift.String]?
    /// Specifies that you want the response to include information for only resources of the specified types. The format of each resource type is service[:resourceType]. For example, specifying a resource type of ec2 returns all Amazon EC2 resources (which includes EC2 instances). Specifying a resource type of ec2:instance returns only EC2 instances. The string for each service name and resource type is the same as that embedded in a resource's Amazon Resource Name (ARN). Consult the [Amazon Web Services General Reference](https://docs.aws.amazon.com/general/latest/gr/) for the following:
    ///
    /// * For a list of service name strings, see [Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces).
    ///
    /// * For resource type strings, see [Example ARNs](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arns-syntax).
    ///
    /// * For more information about ARNs, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
    ///
    ///
    /// You can specify multiple resource types by using a comma separated array. The array can include up to 100 items. Note that the length constraint requirement applies to each resource type filter.
    public var resourceTypeFilters: [Swift.String]?
    /// Specifies that you want the response to include information for only resources that have tags with the specified tag keys. If you use this parameter, the count of returned noncompliant resources includes only resources that have the specified tag keys.
    public var tagKeyFilters: [Swift.String]?
    /// Specifies target identifiers (usually, specific account IDs) to limit the output by. If you use this parameter, the count of returned noncompliant resources includes only resources with the specified target IDs.
    public var targetIdFilters: [Swift.String]?

    public init (
        groupBy: [ResourceGroupsTaggingAPIClientTypes.GroupByAttribute]? = nil,
        maxResults: Swift.Int? = nil,
        paginationToken: Swift.String? = nil,
        regionFilters: [Swift.String]? = nil,
        resourceTypeFilters: [Swift.String]? = nil,
        tagKeyFilters: [Swift.String]? = nil,
        targetIdFilters: [Swift.String]? = nil
    )
    {
        self.groupBy = groupBy
        self.maxResults = maxResults
        self.paginationToken = paginationToken
        self.regionFilters = regionFilters
        self.resourceTypeFilters = resourceTypeFilters
        self.tagKeyFilters = tagKeyFilters
        self.targetIdFilters = targetIdFilters
    }
}

struct GetComplianceSummaryInputBody: Swift.Equatable {
    let targetIdFilters: [Swift.String]?
    let regionFilters: [Swift.String]?
    let resourceTypeFilters: [Swift.String]?
    let tagKeyFilters: [Swift.String]?
    let groupBy: [ResourceGroupsTaggingAPIClientTypes.GroupByAttribute]?
    let maxResults: Swift.Int?
    let paginationToken: Swift.String?
}

extension GetComplianceSummaryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupBy = "GroupBy"
        case maxResults = "MaxResults"
        case paginationToken = "PaginationToken"
        case regionFilters = "RegionFilters"
        case resourceTypeFilters = "ResourceTypeFilters"
        case tagKeyFilters = "TagKeyFilters"
        case targetIdFilters = "TargetIdFilters"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetIdFiltersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targetIdFilters)
        var targetIdFiltersDecoded0:[Swift.String]? = nil
        if let targetIdFiltersContainer = targetIdFiltersContainer {
            targetIdFiltersDecoded0 = [Swift.String]()
            for string0 in targetIdFiltersContainer {
                if let string0 = string0 {
                    targetIdFiltersDecoded0?.append(string0)
                }
            }
        }
        targetIdFilters = targetIdFiltersDecoded0
        let regionFiltersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .regionFilters)
        var regionFiltersDecoded0:[Swift.String]? = nil
        if let regionFiltersContainer = regionFiltersContainer {
            regionFiltersDecoded0 = [Swift.String]()
            for string0 in regionFiltersContainer {
                if let string0 = string0 {
                    regionFiltersDecoded0?.append(string0)
                }
            }
        }
        regionFilters = regionFiltersDecoded0
        let resourceTypeFiltersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceTypeFilters)
        var resourceTypeFiltersDecoded0:[Swift.String]? = nil
        if let resourceTypeFiltersContainer = resourceTypeFiltersContainer {
            resourceTypeFiltersDecoded0 = [Swift.String]()
            for string0 in resourceTypeFiltersContainer {
                if let string0 = string0 {
                    resourceTypeFiltersDecoded0?.append(string0)
                }
            }
        }
        resourceTypeFilters = resourceTypeFiltersDecoded0
        let tagKeyFiltersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeyFilters)
        var tagKeyFiltersDecoded0:[Swift.String]? = nil
        if let tagKeyFiltersContainer = tagKeyFiltersContainer {
            tagKeyFiltersDecoded0 = [Swift.String]()
            for string0 in tagKeyFiltersContainer {
                if let string0 = string0 {
                    tagKeyFiltersDecoded0?.append(string0)
                }
            }
        }
        tagKeyFilters = tagKeyFiltersDecoded0
        let groupByContainer = try containerValues.decodeIfPresent([ResourceGroupsTaggingAPIClientTypes.GroupByAttribute?].self, forKey: .groupBy)
        var groupByDecoded0:[ResourceGroupsTaggingAPIClientTypes.GroupByAttribute]? = nil
        if let groupByContainer = groupByContainer {
            groupByDecoded0 = [ResourceGroupsTaggingAPIClientTypes.GroupByAttribute]()
            for string0 in groupByContainer {
                if let string0 = string0 {
                    groupByDecoded0?.append(string0)
                }
            }
        }
        groupBy = groupByDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let paginationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .paginationToken)
        paginationToken = paginationTokenDecoded
    }
}

extension GetComplianceSummaryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetComplianceSummaryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottledException" : self = .throttledException(try ThrottledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetComplianceSummaryOutputError: Swift.Error, Swift.Equatable {
    case constraintViolationException(ConstraintViolationException)
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case throttledException(ThrottledException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetComplianceSummaryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetComplianceSummaryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.paginationToken = output.paginationToken
            self.summaryList = output.summaryList
        } else {
            self.paginationToken = nil
            self.summaryList = nil
        }
    }
}

public struct GetComplianceSummaryOutputResponse: Swift.Equatable {
    /// A string that indicates that there is more data available than this response contains. To receive the next part of the response, specify this response value as the PaginationToken value in the request for the next page.
    public var paginationToken: Swift.String?
    /// A table that shows counts of noncompliant resources.
    public var summaryList: [ResourceGroupsTaggingAPIClientTypes.Summary]?

    public init (
        paginationToken: Swift.String? = nil,
        summaryList: [ResourceGroupsTaggingAPIClientTypes.Summary]? = nil
    )
    {
        self.paginationToken = paginationToken
        self.summaryList = summaryList
    }
}

struct GetComplianceSummaryOutputResponseBody: Swift.Equatable {
    let summaryList: [ResourceGroupsTaggingAPIClientTypes.Summary]?
    let paginationToken: Swift.String?
}

extension GetComplianceSummaryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case paginationToken = "PaginationToken"
        case summaryList = "SummaryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let summaryListContainer = try containerValues.decodeIfPresent([ResourceGroupsTaggingAPIClientTypes.Summary?].self, forKey: .summaryList)
        var summaryListDecoded0:[ResourceGroupsTaggingAPIClientTypes.Summary]? = nil
        if let summaryListContainer = summaryListContainer {
            summaryListDecoded0 = [ResourceGroupsTaggingAPIClientTypes.Summary]()
            for structure0 in summaryListContainer {
                if let structure0 = structure0 {
                    summaryListDecoded0?.append(structure0)
                }
            }
        }
        summaryList = summaryListDecoded0
        let paginationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .paginationToken)
        paginationToken = paginationTokenDecoded
    }
}

extension GetResourcesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case excludeCompliantResources = "ExcludeCompliantResources"
        case includeComplianceDetails = "IncludeComplianceDetails"
        case paginationToken = "PaginationToken"
        case resourceARNList = "ResourceARNList"
        case resourceTypeFilters = "ResourceTypeFilters"
        case resourcesPerPage = "ResourcesPerPage"
        case tagFilters = "TagFilters"
        case tagsPerPage = "TagsPerPage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let excludeCompliantResources = self.excludeCompliantResources {
            try encodeContainer.encode(excludeCompliantResources, forKey: .excludeCompliantResources)
        }
        if let includeComplianceDetails = self.includeComplianceDetails {
            try encodeContainer.encode(includeComplianceDetails, forKey: .includeComplianceDetails)
        }
        if let paginationToken = self.paginationToken {
            try encodeContainer.encode(paginationToken, forKey: .paginationToken)
        }
        if let resourceARNList = resourceARNList {
            var resourceARNListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceARNList)
            for resourcearn0 in resourceARNList {
                try resourceARNListContainer.encode(resourcearn0)
            }
        }
        if let resourceTypeFilters = resourceTypeFilters {
            var resourceTypeFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceTypeFilters)
            for amazonresourcetype0 in resourceTypeFilters {
                try resourceTypeFiltersContainer.encode(amazonresourcetype0)
            }
        }
        if let resourcesPerPage = self.resourcesPerPage {
            try encodeContainer.encode(resourcesPerPage, forKey: .resourcesPerPage)
        }
        if let tagFilters = tagFilters {
            var tagFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagFilters)
            for tagfilter0 in tagFilters {
                try tagFiltersContainer.encode(tagfilter0)
            }
        }
        if let tagsPerPage = self.tagsPerPage {
            try encodeContainer.encode(tagsPerPage, forKey: .tagsPerPage)
        }
    }
}

extension GetResourcesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetResourcesInput: Swift.Equatable {
    /// Specifies whether to exclude resources that are compliant with the tag policy. Set this to true if you are interested in retrieving information on noncompliant resources only. You can use this parameter only if the IncludeComplianceDetails parameter is also set to true.
    public var excludeCompliantResources: Swift.Bool?
    /// Specifies whether to include details regarding the compliance with the effective tag policy. Set this to true to determine whether resources are compliant with the tag policy and to get details.
    public var includeComplianceDetails: Swift.Bool?
    /// Specifies a PaginationToken response value from a previous request to indicate that you want the next page of results. Leave this parameter empty in your initial request.
    public var paginationToken: Swift.String?
    /// Specifies a list of ARNs of resources for which you want to retrieve tag data. You can't specify both this parameter and any of the pagination parameters (ResourcesPerPage, TagsPerPage, PaginationToken) in the same request. If you specify both, you get an Invalid Parameter exception. If a resource specified by this parameter doesn't exist, it doesn't generate an error; it simply isn't included in the response. An ARN (Amazon Resource Name) uniquely identifies a resource. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    public var resourceARNList: [Swift.String]?
    /// Specifies the resource types that you want included in the response. The format of each resource type is service[:resourceType]. For example, specifying a resource type of ec2 returns all Amazon EC2 resources (which includes EC2 instances). Specifying a resource type of ec2:instance returns only EC2 instances. The string for each service name and resource type is the same as that embedded in a resource's Amazon Resource Name (ARN). For the list of services whose resources you can use in this parameter, see [Services that support the Resource Groups Tagging API](https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/supported-services.html). You can specify multiple resource types by using an array. The array can include up to 100 items. Note that the length constraint requirement applies to each resource type filter. For example, the following string would limit the response to only Amazon EC2 instances, Amazon S3 buckets, or any Audit Manager resource: ec2:instance,s3:bucket,auditmanager
    public var resourceTypeFilters: [Swift.String]?
    /// Specifies the maximum number of results to be returned in each page. A query can return fewer than this maximum, even if there are more results still to return. You should always check the PaginationToken response value to see if there are more results. You can specify a minimum of 1 and a maximum value of 100.
    public var resourcesPerPage: Swift.Int?
    /// Specifies a list of TagFilters (keys and values) to restrict the output to only those resources that have tags with the specified keys and, if included, the specified values. Each TagFilter must contain a key with values optional. A request can include up to 50 keys, and each key can include up to 20 values. Note the following when deciding how to use TagFilters:
    ///
    /// * If you don't specify a TagFilter, the response includes all resources that are currently tagged or ever had a tag. Resources that currently don't have tags are shown with an empty tag set, like this: "Tags": [].
    ///
    /// * If you specify more than one filter in a single request, the response returns only those resources that satisfy all filters.
    ///
    /// * If you specify a filter that contains more than one value for a key, the response returns resources that match any of the specified values for that key.
    ///
    /// * If you don't specify a value for a key, the response returns all resources that are tagged with that key, with any or no value. For example, for the following filters: filter1= {keyA,{value1}}, filter2={keyB,{value2,value3,value4}}, filter3= {keyC}:
    ///
    /// * GetResources({filter1}) returns resources tagged with key1=value1
    ///
    /// * GetResources({filter2}) returns resources tagged with key2=value2 or key2=value3 or key2=value4
    ///
    /// * GetResources({filter3}) returns resources tagged with any tag with the key key3, and with any or no value
    ///
    /// * GetResources({filter1,filter2,filter3}) returns resources tagged with (key1=value1) and (key2=value2 or key2=value3 or key2=value4) and (key3, any or no value)
    public var tagFilters: [ResourceGroupsTaggingAPIClientTypes.TagFilter]?
    /// Amazon Web Services recommends using ResourcesPerPage instead of this parameter. A limit that restricts the number of tags (key and value pairs) returned by GetResources in paginated output. A resource with no tags is counted as having one tag (one key and value pair). GetResources does not split a resource and its associated tags across pages. If the specified TagsPerPage would cause such a break, a PaginationToken is returned in place of the affected resource and its tags. Use that token in another request to get the remaining data. For example, if you specify a TagsPerPage of 100 and the account has 22 resources with 10 tags each (meaning that each resource has 10 key and value pairs), the output will consist of three pages. The first page displays the first 10 resources, each with its 10 tags. The second page displays the next 10 resources, each with its 10 tags. The third page displays the remaining 2 resources, each with its 10 tags. You can set TagsPerPage to a minimum of 100 items up to a maximum of 500 items.
    public var tagsPerPage: Swift.Int?

    public init (
        excludeCompliantResources: Swift.Bool? = nil,
        includeComplianceDetails: Swift.Bool? = nil,
        paginationToken: Swift.String? = nil,
        resourceARNList: [Swift.String]? = nil,
        resourceTypeFilters: [Swift.String]? = nil,
        resourcesPerPage: Swift.Int? = nil,
        tagFilters: [ResourceGroupsTaggingAPIClientTypes.TagFilter]? = nil,
        tagsPerPage: Swift.Int? = nil
    )
    {
        self.excludeCompliantResources = excludeCompliantResources
        self.includeComplianceDetails = includeComplianceDetails
        self.paginationToken = paginationToken
        self.resourceARNList = resourceARNList
        self.resourceTypeFilters = resourceTypeFilters
        self.resourcesPerPage = resourcesPerPage
        self.tagFilters = tagFilters
        self.tagsPerPage = tagsPerPage
    }
}

struct GetResourcesInputBody: Swift.Equatable {
    let paginationToken: Swift.String?
    let tagFilters: [ResourceGroupsTaggingAPIClientTypes.TagFilter]?
    let resourcesPerPage: Swift.Int?
    let tagsPerPage: Swift.Int?
    let resourceTypeFilters: [Swift.String]?
    let includeComplianceDetails: Swift.Bool?
    let excludeCompliantResources: Swift.Bool?
    let resourceARNList: [Swift.String]?
}

extension GetResourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case excludeCompliantResources = "ExcludeCompliantResources"
        case includeComplianceDetails = "IncludeComplianceDetails"
        case paginationToken = "PaginationToken"
        case resourceARNList = "ResourceARNList"
        case resourceTypeFilters = "ResourceTypeFilters"
        case resourcesPerPage = "ResourcesPerPage"
        case tagFilters = "TagFilters"
        case tagsPerPage = "TagsPerPage"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let paginationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .paginationToken)
        paginationToken = paginationTokenDecoded
        let tagFiltersContainer = try containerValues.decodeIfPresent([ResourceGroupsTaggingAPIClientTypes.TagFilter?].self, forKey: .tagFilters)
        var tagFiltersDecoded0:[ResourceGroupsTaggingAPIClientTypes.TagFilter]? = nil
        if let tagFiltersContainer = tagFiltersContainer {
            tagFiltersDecoded0 = [ResourceGroupsTaggingAPIClientTypes.TagFilter]()
            for structure0 in tagFiltersContainer {
                if let structure0 = structure0 {
                    tagFiltersDecoded0?.append(structure0)
                }
            }
        }
        tagFilters = tagFiltersDecoded0
        let resourcesPerPageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .resourcesPerPage)
        resourcesPerPage = resourcesPerPageDecoded
        let tagsPerPageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .tagsPerPage)
        tagsPerPage = tagsPerPageDecoded
        let resourceTypeFiltersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceTypeFilters)
        var resourceTypeFiltersDecoded0:[Swift.String]? = nil
        if let resourceTypeFiltersContainer = resourceTypeFiltersContainer {
            resourceTypeFiltersDecoded0 = [Swift.String]()
            for string0 in resourceTypeFiltersContainer {
                if let string0 = string0 {
                    resourceTypeFiltersDecoded0?.append(string0)
                }
            }
        }
        resourceTypeFilters = resourceTypeFiltersDecoded0
        let includeComplianceDetailsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeComplianceDetails)
        includeComplianceDetails = includeComplianceDetailsDecoded
        let excludeCompliantResourcesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .excludeCompliantResources)
        excludeCompliantResources = excludeCompliantResourcesDecoded
        let resourceARNListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceARNList)
        var resourceARNListDecoded0:[Swift.String]? = nil
        if let resourceARNListContainer = resourceARNListContainer {
            resourceARNListDecoded0 = [Swift.String]()
            for string0 in resourceARNListContainer {
                if let string0 = string0 {
                    resourceARNListDecoded0?.append(string0)
                }
            }
        }
        resourceARNList = resourceARNListDecoded0
    }
}

extension GetResourcesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetResourcesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PaginationTokenExpiredException" : self = .paginationTokenExpiredException(try PaginationTokenExpiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottledException" : self = .throttledException(try ThrottledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetResourcesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case paginationTokenExpiredException(PaginationTokenExpiredException)
    case throttledException(ThrottledException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetResourcesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetResourcesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.paginationToken = output.paginationToken
            self.resourceTagMappingList = output.resourceTagMappingList
        } else {
            self.paginationToken = nil
            self.resourceTagMappingList = nil
        }
    }
}

public struct GetResourcesOutputResponse: Swift.Equatable {
    /// A string that indicates that there is more data available than this response contains. To receive the next part of the response, specify this response value as the PaginationToken value in the request for the next page.
    public var paginationToken: Swift.String?
    /// A list of resource ARNs and the tags (keys and values) associated with each.
    public var resourceTagMappingList: [ResourceGroupsTaggingAPIClientTypes.ResourceTagMapping]?

    public init (
        paginationToken: Swift.String? = nil,
        resourceTagMappingList: [ResourceGroupsTaggingAPIClientTypes.ResourceTagMapping]? = nil
    )
    {
        self.paginationToken = paginationToken
        self.resourceTagMappingList = resourceTagMappingList
    }
}

struct GetResourcesOutputResponseBody: Swift.Equatable {
    let paginationToken: Swift.String?
    let resourceTagMappingList: [ResourceGroupsTaggingAPIClientTypes.ResourceTagMapping]?
}

extension GetResourcesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case paginationToken = "PaginationToken"
        case resourceTagMappingList = "ResourceTagMappingList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let paginationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .paginationToken)
        paginationToken = paginationTokenDecoded
        let resourceTagMappingListContainer = try containerValues.decodeIfPresent([ResourceGroupsTaggingAPIClientTypes.ResourceTagMapping?].self, forKey: .resourceTagMappingList)
        var resourceTagMappingListDecoded0:[ResourceGroupsTaggingAPIClientTypes.ResourceTagMapping]? = nil
        if let resourceTagMappingListContainer = resourceTagMappingListContainer {
            resourceTagMappingListDecoded0 = [ResourceGroupsTaggingAPIClientTypes.ResourceTagMapping]()
            for structure0 in resourceTagMappingListContainer {
                if let structure0 = structure0 {
                    resourceTagMappingListDecoded0?.append(structure0)
                }
            }
        }
        resourceTagMappingList = resourceTagMappingListDecoded0
    }
}

extension GetTagKeysInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case paginationToken = "PaginationToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let paginationToken = self.paginationToken {
            try encodeContainer.encode(paginationToken, forKey: .paginationToken)
        }
    }
}

extension GetTagKeysInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetTagKeysInput: Swift.Equatable {
    /// Specifies a PaginationToken response value from a previous request to indicate that you want the next page of results. Leave this parameter empty in your initial request.
    public var paginationToken: Swift.String?

    public init (
        paginationToken: Swift.String? = nil
    )
    {
        self.paginationToken = paginationToken
    }
}

struct GetTagKeysInputBody: Swift.Equatable {
    let paginationToken: Swift.String?
}

extension GetTagKeysInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case paginationToken = "PaginationToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let paginationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .paginationToken)
        paginationToken = paginationTokenDecoded
    }
}

extension GetTagKeysOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetTagKeysOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PaginationTokenExpiredException" : self = .paginationTokenExpiredException(try PaginationTokenExpiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottledException" : self = .throttledException(try ThrottledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetTagKeysOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case paginationTokenExpiredException(PaginationTokenExpiredException)
    case throttledException(ThrottledException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetTagKeysOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetTagKeysOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.paginationToken = output.paginationToken
            self.tagKeys = output.tagKeys
        } else {
            self.paginationToken = nil
            self.tagKeys = nil
        }
    }
}

public struct GetTagKeysOutputResponse: Swift.Equatable {
    /// A string that indicates that there is more data available than this response contains. To receive the next part of the response, specify this response value as the PaginationToken value in the request for the next page.
    public var paginationToken: Swift.String?
    /// A list of all tag keys in the Amazon Web Services account.
    public var tagKeys: [Swift.String]?

    public init (
        paginationToken: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.paginationToken = paginationToken
        self.tagKeys = tagKeys
    }
}

struct GetTagKeysOutputResponseBody: Swift.Equatable {
    let paginationToken: Swift.String?
    let tagKeys: [Swift.String]?
}

extension GetTagKeysOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case paginationToken = "PaginationToken"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let paginationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .paginationToken)
        paginationToken = paginationTokenDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension GetTagValuesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case paginationToken = "PaginationToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let paginationToken = self.paginationToken {
            try encodeContainer.encode(paginationToken, forKey: .paginationToken)
        }
    }
}

extension GetTagValuesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetTagValuesInput: Swift.Equatable {
    /// Specifies the tag key for which you want to list all existing values that are currently used in the specified Amazon Web Services Region for the calling account.
    /// This member is required.
    public var key: Swift.String?
    /// Specifies a PaginationToken response value from a previous request to indicate that you want the next page of results. Leave this parameter empty in your initial request.
    public var paginationToken: Swift.String?

    public init (
        key: Swift.String? = nil,
        paginationToken: Swift.String? = nil
    )
    {
        self.key = key
        self.paginationToken = paginationToken
    }
}

struct GetTagValuesInputBody: Swift.Equatable {
    let paginationToken: Swift.String?
    let key: Swift.String?
}

extension GetTagValuesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case paginationToken = "PaginationToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let paginationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .paginationToken)
        paginationToken = paginationTokenDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
    }
}

extension GetTagValuesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetTagValuesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PaginationTokenExpiredException" : self = .paginationTokenExpiredException(try PaginationTokenExpiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottledException" : self = .throttledException(try ThrottledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetTagValuesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case paginationTokenExpiredException(PaginationTokenExpiredException)
    case throttledException(ThrottledException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetTagValuesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetTagValuesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.paginationToken = output.paginationToken
            self.tagValues = output.tagValues
        } else {
            self.paginationToken = nil
            self.tagValues = nil
        }
    }
}

public struct GetTagValuesOutputResponse: Swift.Equatable {
    /// A string that indicates that there is more data available than this response contains. To receive the next part of the response, specify this response value as the PaginationToken value in the request for the next page.
    public var paginationToken: Swift.String?
    /// A list of all tag values for the specified key currently used in the specified Amazon Web Services Region for the calling account.
    public var tagValues: [Swift.String]?

    public init (
        paginationToken: Swift.String? = nil,
        tagValues: [Swift.String]? = nil
    )
    {
        self.paginationToken = paginationToken
        self.tagValues = tagValues
    }
}

struct GetTagValuesOutputResponseBody: Swift.Equatable {
    let paginationToken: Swift.String?
    let tagValues: [Swift.String]?
}

extension GetTagValuesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case paginationToken = "PaginationToken"
        case tagValues = "TagValues"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let paginationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .paginationToken)
        paginationToken = paginationTokenDecoded
        let tagValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagValues)
        var tagValuesDecoded0:[Swift.String]? = nil
        if let tagValuesContainer = tagValuesContainer {
            tagValuesDecoded0 = [Swift.String]()
            for string0 in tagValuesContainer {
                if let string0 = string0 {
                    tagValuesDecoded0?.append(string0)
                }
            }
        }
        tagValues = tagValuesDecoded0
    }
}

extension ResourceGroupsTaggingAPIClientTypes {
    public enum GroupByAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case region
        case resourceType
        case targetId
        case sdkUnknown(Swift.String)

        public static var allCases: [GroupByAttribute] {
            return [
                .region,
                .resourceType,
                .targetId,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .region: return "REGION"
            case .resourceType: return "RESOURCE_TYPE"
            case .targetId: return "TARGET_ID"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GroupByAttribute(rawValue: rawValue) ?? GroupByAttribute.sdkUnknown(rawValue)
        }
    }
}

extension InternalServiceException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalServiceExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request processing failed because of an unknown error, exception, or failure. You can retry the request.
public struct InternalServiceException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServiceExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalServiceExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidParameterException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidParameterExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// This error indicates one of the following:
///
/// * A parameter is missing.
///
/// * A malformed string was supplied for the request parameter.
///
/// * An out-of-range value was supplied for the request parameter.
///
/// * The target ID is invalid, unsupported, or doesn't exist.
///
/// * You can't access the Amazon S3 bucket for report storage. For more information, see [Additional Requirements for Organization-wide Tag Compliance Reports](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies-prereqs.html#bucket-policies-org-report) in the Organizations User Guide.
public struct InvalidParameterException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidParameterExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidParameterExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PaginationTokenExpiredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PaginationTokenExpiredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A PaginationToken is valid for a maximum of 15 minutes. Your request was denied because the specified PaginationToken has expired.
public struct PaginationTokenExpiredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PaginationTokenExpiredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension PaginationTokenExpiredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceGroupsTaggingAPIClientTypes.ResourceTagMapping: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceDetails = "ComplianceDetails"
        case resourceARN = "ResourceARN"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceDetails = self.complianceDetails {
            try encodeContainer.encode(complianceDetails, forKey: .complianceDetails)
        }
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ResourceGroupsTaggingAPIClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ResourceGroupsTaggingAPIClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ResourceGroupsTaggingAPIClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let complianceDetailsDecoded = try containerValues.decodeIfPresent(ResourceGroupsTaggingAPIClientTypes.ComplianceDetails.self, forKey: .complianceDetails)
        complianceDetails = complianceDetailsDecoded
    }
}

extension ResourceGroupsTaggingAPIClientTypes {
    /// A list of resource ARNs and the tags (keys and values) that are associated with each.
    public struct ResourceTagMapping: Swift.Equatable {
        /// Information that shows whether a resource is compliant with the effective tag policy, including details on any noncompliant tag keys.
        public var complianceDetails: ResourceGroupsTaggingAPIClientTypes.ComplianceDetails?
        /// The ARN of the resource.
        public var resourceARN: Swift.String?
        /// The tags that have been applied to one or more Amazon Web Services resources.
        public var tags: [ResourceGroupsTaggingAPIClientTypes.Tag]?

        public init (
            complianceDetails: ResourceGroupsTaggingAPIClientTypes.ComplianceDetails? = nil,
            resourceARN: Swift.String? = nil,
            tags: [ResourceGroupsTaggingAPIClientTypes.Tag]? = nil
        )
        {
            self.complianceDetails = complianceDetails
            self.resourceARN = resourceARN
            self.tags = tags
        }
    }

}

extension StartReportCreationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3Bucket = "S3Bucket"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3Bucket = self.s3Bucket {
            try encodeContainer.encode(s3Bucket, forKey: .s3Bucket)
        }
    }
}

extension StartReportCreationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartReportCreationInput: Swift.Equatable {
    /// The name of the Amazon S3 bucket where the report will be stored; for example: awsexamplebucket For more information on S3 bucket requirements, including an example bucket policy, see the example S3 bucket policy on this page.
    /// This member is required.
    public var s3Bucket: Swift.String?

    public init (
        s3Bucket: Swift.String? = nil
    )
    {
        self.s3Bucket = s3Bucket
    }
}

struct StartReportCreationInputBody: Swift.Equatable {
    let s3Bucket: Swift.String?
}

extension StartReportCreationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3Bucket = "S3Bucket"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3BucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
    }
}

extension StartReportCreationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartReportCreationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConstraintViolationException" : self = .constraintViolationException(try ConstraintViolationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottledException" : self = .throttledException(try ThrottledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartReportCreationOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case constraintViolationException(ConstraintViolationException)
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case throttledException(ThrottledException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartReportCreationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StartReportCreationOutputResponse: Swift.Equatable {

    public init () { }
}

extension ResourceGroupsTaggingAPIClientTypes.Summary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastUpdated = "LastUpdated"
        case nonCompliantResources = "NonCompliantResources"
        case region = "Region"
        case resourceType = "ResourceType"
        case targetId = "TargetId"
        case targetIdType = "TargetIdType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastUpdated = self.lastUpdated {
            try encodeContainer.encode(lastUpdated, forKey: .lastUpdated)
        }
        if nonCompliantResources != 0 {
            try encodeContainer.encode(nonCompliantResources, forKey: .nonCompliantResources)
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
        if let targetId = self.targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
        if let targetIdType = self.targetIdType {
            try encodeContainer.encode(targetIdType.rawValue, forKey: .targetIdType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetId)
        targetId = targetIdDecoded
        let targetIdTypeDecoded = try containerValues.decodeIfPresent(ResourceGroupsTaggingAPIClientTypes.TargetIdType.self, forKey: .targetIdType)
        targetIdType = targetIdTypeDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let nonCompliantResourcesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .nonCompliantResources) ?? 0
        nonCompliantResources = nonCompliantResourcesDecoded
    }
}

extension ResourceGroupsTaggingAPIClientTypes {
    /// A count of noncompliant resources.
    public struct Summary: Swift.Equatable {
        /// The timestamp that shows when this summary was generated in this Region.
        public var lastUpdated: Swift.String?
        /// The count of noncompliant resources.
        public var nonCompliantResources: Swift.Int
        /// The Amazon Web Services Region that the summary applies to.
        public var region: Swift.String?
        /// The Amazon Web Services resource type.
        public var resourceType: Swift.String?
        /// The account identifier or the root identifier of the organization. If you don't know the root ID, you can call the Organizations [ListRoots](https://docs.aws.amazon.com/organizations/latest/APIReference/API_ListRoots.html) API.
        public var targetId: Swift.String?
        /// Whether the target is an account, an OU, or the organization root.
        public var targetIdType: ResourceGroupsTaggingAPIClientTypes.TargetIdType?

        public init (
            lastUpdated: Swift.String? = nil,
            nonCompliantResources: Swift.Int = 0,
            region: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            targetId: Swift.String? = nil,
            targetIdType: ResourceGroupsTaggingAPIClientTypes.TargetIdType? = nil
        )
        {
            self.lastUpdated = lastUpdated
            self.nonCompliantResources = nonCompliantResources
            self.region = region
            self.resourceType = resourceType
            self.targetId = targetId
            self.targetIdType = targetIdType
        }
    }

}

extension ResourceGroupsTaggingAPIClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension ResourceGroupsTaggingAPIClientTypes {
    /// The metadata that you apply to Amazon Web Services resources to help you categorize and organize them. Each tag consists of a key and a value, both of which you define. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference.
    public struct Tag: Swift.Equatable {
        /// One part of a key-value pair that makes up a tag. A key is a general label that acts like a category for more specific tag values.
        /// This member is required.
        public var key: Swift.String?
        /// One part of a key-value pair that make up a tag. A value acts as a descriptor within a tag category (key). The value can be empty or null.
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension ResourceGroupsTaggingAPIClientTypes.TagFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for tagvalue0 in values {
                try valuesContainer.encode(tagvalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension ResourceGroupsTaggingAPIClientTypes {
    /// A list of tags (keys and values) that are used to specify the associated resources.
    public struct TagFilter: Swift.Equatable {
        /// One part of a key-value pair that makes up a tag. A key is a general label that acts like a category for more specific tag values.
        public var key: Swift.String?
        /// One part of a key-value pair that make up a tag. A value acts as a descriptor within a tag category (key). The value can be empty or null.
        public var values: [Swift.String]?

        public init (
            key: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.key = key
            self.values = values
        }
    }

}

extension TagResourcesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARNList = "ResourceARNList"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceARNList = resourceARNList {
            var resourceARNListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceARNList)
            for resourcearn0 in resourceARNList {
                try resourceARNListContainer.encode(resourcearn0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagMap0) in tags {
                try tagsContainer.encode(tagMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension TagResourcesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagResourcesInput: Swift.Equatable {
    /// Specifies the list of ARNs of the resources that you want to apply tags to. An ARN (Amazon Resource Name) uniquely identifies a resource. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var resourceARNList: [Swift.String]?
    /// Specifies a list of tags that you want to add to the specified resources. A tag consists of a key and a value that you define.
    /// This member is required.
    public var tags: [Swift.String:Swift.String]?

    public init (
        resourceARNList: [Swift.String]? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.resourceARNList = resourceARNList
        self.tags = tags
    }
}

struct TagResourcesInputBody: Swift.Equatable {
    let resourceARNList: [Swift.String]?
    let tags: [Swift.String:Swift.String]?
}

extension TagResourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARNList = "ResourceARNList"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceARNList)
        var resourceARNListDecoded0:[Swift.String]? = nil
        if let resourceARNListContainer = resourceARNListContainer {
            resourceARNListDecoded0 = [Swift.String]()
            for string0 in resourceARNListContainer {
                if let string0 = string0 {
                    resourceARNListDecoded0?.append(string0)
                }
            }
        }
        resourceARNList = resourceARNListDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourcesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourcesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottledException" : self = .throttledException(try ThrottledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourcesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case throttledException(ThrottledException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourcesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TagResourcesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failedResourcesMap = output.failedResourcesMap
        } else {
            self.failedResourcesMap = nil
        }
    }
}

public struct TagResourcesOutputResponse: Swift.Equatable {
    /// A map containing a key-value pair for each failed item that couldn't be tagged. The key is the ARN of the failed resource. The value is a FailureInfo object that contains an error code, a status code, and an error message. If there are no errors, the FailedResourcesMap is empty.
    public var failedResourcesMap: [Swift.String:ResourceGroupsTaggingAPIClientTypes.FailureInfo]?

    public init (
        failedResourcesMap: [Swift.String:ResourceGroupsTaggingAPIClientTypes.FailureInfo]? = nil
    )
    {
        self.failedResourcesMap = failedResourcesMap
    }
}

struct TagResourcesOutputResponseBody: Swift.Equatable {
    let failedResourcesMap: [Swift.String:ResourceGroupsTaggingAPIClientTypes.FailureInfo]?
}

extension TagResourcesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedResourcesMap = "FailedResourcesMap"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedResourcesMapContainer = try containerValues.decodeIfPresent([Swift.String: ResourceGroupsTaggingAPIClientTypes.FailureInfo?].self, forKey: .failedResourcesMap)
        var failedResourcesMapDecoded0: [Swift.String:ResourceGroupsTaggingAPIClientTypes.FailureInfo]? = nil
        if let failedResourcesMapContainer = failedResourcesMapContainer {
            failedResourcesMapDecoded0 = [Swift.String:ResourceGroupsTaggingAPIClientTypes.FailureInfo]()
            for (key0, failureinfo0) in failedResourcesMapContainer {
                if let failureinfo0 = failureinfo0 {
                    failedResourcesMapDecoded0?[key0] = failureinfo0
                }
            }
        }
        failedResourcesMap = failedResourcesMapDecoded0
    }
}

extension ResourceGroupsTaggingAPIClientTypes {
    public enum TargetIdType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case account
        case ou
        case root
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetIdType] {
            return [
                .account,
                .ou,
                .root,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .account: return "ACCOUNT"
            case .ou: return "OU"
            case .root: return "ROOT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetIdType(rawValue: rawValue) ?? TargetIdType.sdkUnknown(rawValue)
        }
    }
}

extension ThrottledException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ThrottledExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was denied to limit the frequency of submitted requests.
public struct ThrottledException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ThrottledExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ThrottledExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UntagResourcesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARNList = "ResourceARNList"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceARNList = resourceARNList {
            var resourceARNListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceARNList)
            for resourcearn0 in resourceARNList {
                try resourceARNListContainer.encode(resourcearn0)
            }
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkey0 in tagKeys {
                try tagKeysContainer.encode(tagkey0)
            }
        }
    }
}

extension UntagResourcesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagResourcesInput: Swift.Equatable {
    /// Specifies a list of ARNs of the resources that you want to remove tags from. An ARN (Amazon Resource Name) uniquely identifies a resource. For more information, see [Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
    /// This member is required.
    public var resourceARNList: [Swift.String]?
    /// Specifies a list of tag keys that you want to remove from the specified resources.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceARNList: [Swift.String]? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceARNList = resourceARNList
        self.tagKeys = tagKeys
    }
}

struct UntagResourcesInputBody: Swift.Equatable {
    let resourceARNList: [Swift.String]?
    let tagKeys: [Swift.String]?
}

extension UntagResourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARNList = "ResourceARNList"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceARNList)
        var resourceARNListDecoded0:[Swift.String]? = nil
        if let resourceARNListContainer = resourceARNListContainer {
            resourceARNListDecoded0 = [Swift.String]()
            for string0 in resourceARNListContainer {
                if let string0 = string0 {
                    resourceARNListDecoded0?.append(string0)
                }
            }
        }
        resourceARNList = resourceARNListDecoded0
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourcesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourcesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottledException" : self = .throttledException(try ThrottledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourcesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidParameterException(InvalidParameterException)
    case throttledException(ThrottledException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourcesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UntagResourcesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failedResourcesMap = output.failedResourcesMap
        } else {
            self.failedResourcesMap = nil
        }
    }
}

public struct UntagResourcesOutputResponse: Swift.Equatable {
    /// A map containing a key-value pair for each failed item that couldn't be untagged. The key is the ARN of the failed resource. The value is a FailureInfo object that contains an error code, a status code, and an error message. If there are no errors, the FailedResourcesMap is empty.
    public var failedResourcesMap: [Swift.String:ResourceGroupsTaggingAPIClientTypes.FailureInfo]?

    public init (
        failedResourcesMap: [Swift.String:ResourceGroupsTaggingAPIClientTypes.FailureInfo]? = nil
    )
    {
        self.failedResourcesMap = failedResourcesMap
    }
}

struct UntagResourcesOutputResponseBody: Swift.Equatable {
    let failedResourcesMap: [Swift.String:ResourceGroupsTaggingAPIClientTypes.FailureInfo]?
}

extension UntagResourcesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedResourcesMap = "FailedResourcesMap"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedResourcesMapContainer = try containerValues.decodeIfPresent([Swift.String: ResourceGroupsTaggingAPIClientTypes.FailureInfo?].self, forKey: .failedResourcesMap)
        var failedResourcesMapDecoded0: [Swift.String:ResourceGroupsTaggingAPIClientTypes.FailureInfo]? = nil
        if let failedResourcesMapContainer = failedResourcesMapContainer {
            failedResourcesMapDecoded0 = [Swift.String:ResourceGroupsTaggingAPIClientTypes.FailureInfo]()
            for (key0, failureinfo0) in failedResourcesMapContainer {
                if let failureinfo0 = failureinfo0 {
                    failedResourcesMapDecoded0?[key0] = failureinfo0
                }
            }
        }
        failedResourcesMap = failedResourcesMapDecoded0
    }
}
