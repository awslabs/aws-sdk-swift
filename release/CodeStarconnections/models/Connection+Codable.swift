// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Connection: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case connectionArn = "ConnectionArn"
        case connectionName = "ConnectionName"
        case connectionStatus = "ConnectionStatus"
        case hostArn = "HostArn"
        case ownerAccountId = "OwnerAccountId"
        case providerType = "ProviderType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionArn = connectionArn {
            try encodeContainer.encode(connectionArn, forKey: .connectionArn)
        }
        if let connectionName = connectionName {
            try encodeContainer.encode(connectionName, forKey: .connectionName)
        }
        if let connectionStatus = connectionStatus {
            try encodeContainer.encode(connectionStatus.rawValue, forKey: .connectionStatus)
        }
        if let hostArn = hostArn {
            try encodeContainer.encode(hostArn, forKey: .hostArn)
        }
        if let ownerAccountId = ownerAccountId {
            try encodeContainer.encode(ownerAccountId, forKey: .ownerAccountId)
        }
        if let providerType = providerType {
            try encodeContainer.encode(providerType.rawValue, forKey: .providerType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .connectionName)
        connectionName = connectionNameDecoded
        let connectionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .connectionArn)
        connectionArn = connectionArnDecoded
        let providerTypeDecoded = try containerValues.decodeIfPresent(ProviderType.self, forKey: .providerType)
        providerType = providerTypeDecoded
        let ownerAccountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ownerAccountId)
        ownerAccountId = ownerAccountIdDecoded
        let connectionStatusDecoded = try containerValues.decodeIfPresent(ConnectionStatus.self, forKey: .connectionStatus)
        connectionStatus = connectionStatusDecoded
        let hostArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hostArn)
        hostArn = hostArnDecoded
    }
}
