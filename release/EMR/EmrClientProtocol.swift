// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Amazon EMR is a web service that makes it easier to process large amounts of data
///          efficiently. Amazon EMR uses Hadoop processing combined with several AWS services to do
///          tasks such as web indexing, data mining, log file analysis, machine learning, scientific
///          simulation, and data warehouse management.</p>
public protocol EmrClientProtocol {
    /// <p>Adds an instance fleet to a running cluster.</p>
    ///          <note>
    ///             <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and
    ///             later, excluding 5.0.x.</p>
    ///          </note>
    func addInstanceFleet(input: AddInstanceFleetInput, completion: @escaping (SdkResult<AddInstanceFleetOutputResponse, AddInstanceFleetOutputError>) -> Void)
    /// <p>Adds one or more instance groups to a running cluster.</p>
    func addInstanceGroups(input: AddInstanceGroupsInput, completion: @escaping (SdkResult<AddInstanceGroupsOutputResponse, AddInstanceGroupsOutputError>) -> Void)
    /// <p>AddJobFlowSteps adds new steps to a running cluster. A maximum of 256 steps are allowed
    ///          in each job flow.</p>
    ///          <p>If your cluster is long-running (such as a Hive data warehouse) or complex, you may
    ///          require more than 256 steps to process your data. You can bypass the 256-step limitation in
    ///          various ways, including using SSH to connect to the master node and submitting queries
    ///          directly to the software running on the master node, such as Hive and Hadoop. For more
    ///          information on how to do this, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/AddMoreThan256Steps.html">Add More than 256 Steps to a
    ///             Cluster</a> in the <i>Amazon EMR Management Guide</i>.</p>
    ///          <p>A step specifies the location of a JAR file stored either on the master node of the
    ///          cluster or in Amazon S3. Each step is performed by the main function of the main class of
    ///          the JAR file. The main class can be specified either in the manifest of the JAR or by using
    ///          the MainFunction parameter of the step.</p>
    ///          <p>Amazon EMR executes each step in the order listed. For a step to be considered complete,
    ///          the main function must exit with a zero exit code and all Hadoop jobs started while the
    ///          step was running must have completed and run successfully.</p>
    ///          <p>You can only add steps to a cluster that is in one of the following states: STARTING,
    ///          BOOTSTRAPPING, RUNNING, or WAITING.</p>
    func addJobFlowSteps(input: AddJobFlowStepsInput, completion: @escaping (SdkResult<AddJobFlowStepsOutputResponse, AddJobFlowStepsOutputError>) -> Void)
    /// <p>Adds tags to an Amazon EMR resource. Tags make it easier to associate clusters in
    ///          various ways, such as grouping clusters to track your Amazon EMR resource allocation costs.
    ///          For more information, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-tags.html">Tag Clusters</a>. </p>
    func addTags(input: AddTagsInput, completion: @escaping (SdkResult<AddTagsOutputResponse, AddTagsOutputError>) -> Void)
    /// <p>Cancels a pending step or steps in a running cluster. Available only in Amazon EMR
    ///          versions 4.8.0 and later, excluding version 5.0.0. A maximum of 256 steps are allowed in
    ///          each CancelSteps request. CancelSteps is idempotent but asynchronous; it does not guarantee
    ///          that a step will be canceled, even if the request is successfully submitted. You can only
    ///          cancel steps that are in a <code>PENDING</code> state.</p>
    func cancelSteps(input: CancelStepsInput, completion: @escaping (SdkResult<CancelStepsOutputResponse, CancelStepsOutputError>) -> Void)
    /// <p>Creates a security configuration, which is stored in the service and can be specified
    ///          when a cluster is created.</p>
    func createSecurityConfiguration(input: CreateSecurityConfigurationInput, completion: @escaping (SdkResult<CreateSecurityConfigurationOutputResponse, CreateSecurityConfigurationOutputError>) -> Void)
    /// <p>Creates a new Amazon EMR Studio.</p>
    func createStudio(input: CreateStudioInput, completion: @escaping (SdkResult<CreateStudioOutputResponse, CreateStudioOutputError>) -> Void)
    /// <p>Maps a user or group to the Amazon EMR Studio specified by <code>StudioId</code>, and
    ///          applies a session policy to refine Studio permissions for that user or group.</p>
    func createStudioSessionMapping(input: CreateStudioSessionMappingInput, completion: @escaping (SdkResult<CreateStudioSessionMappingOutputResponse, CreateStudioSessionMappingOutputError>) -> Void)
    /// <p>Deletes a security configuration.</p>
    func deleteSecurityConfiguration(input: DeleteSecurityConfigurationInput, completion: @escaping (SdkResult<DeleteSecurityConfigurationOutputResponse, DeleteSecurityConfigurationOutputError>) -> Void)
    /// <p>Removes an Amazon EMR Studio from the Studio metadata store.</p>
    func deleteStudio(input: DeleteStudioInput, completion: @escaping (SdkResult<DeleteStudioOutputResponse, DeleteStudioOutputError>) -> Void)
    /// <p>Removes a user or group from an Amazon EMR Studio.</p>
    func deleteStudioSessionMapping(input: DeleteStudioSessionMappingInput, completion: @escaping (SdkResult<DeleteStudioSessionMappingOutputResponse, DeleteStudioSessionMappingOutputError>) -> Void)
    /// <p>Provides cluster-level details including status, hardware and software configuration,
    ///          VPC settings, and so on. </p>
    func describeCluster(input: DescribeClusterInput, completion: @escaping (SdkResult<DescribeClusterOutputResponse, DescribeClusterOutputError>) -> Void)
    /// <p>This API is no longer supported and will eventually be removed. We recommend you use
    ///             <a>ListClusters</a>, <a>DescribeCluster</a>, <a>ListSteps</a>, <a>ListInstanceGroups</a> and <a>ListBootstrapActions</a> instead.</p>
    ///          <p>DescribeJobFlows returns a list of job flows that match all of the supplied parameters.
    ///          The parameters can include a list of job flow IDs, job flow states, and restrictions on job
    ///          flow creation date and time.</p>
    ///          <p>Regardless of supplied parameters, only job flows created within the last two months are
    ///          returned.</p>
    ///          <p>If no parameters are supplied, then job flows matching either of the following criteria
    ///          are returned:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Job flows created and completed in the last two weeks</p>
    ///             </li>
    ///             <li>
    ///                <p> Job flows created within the last two months that are in one of the following
    ///                states: <code>RUNNING</code>, <code>WAITING</code>, <code>SHUTTING_DOWN</code>,
    ///                   <code>STARTING</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>Amazon EMR can return a maximum of 512 job flow descriptions.</p>
    @available(*, deprecated)
    func describeJobFlows(input: DescribeJobFlowsInput, completion: @escaping (SdkResult<DescribeJobFlowsOutputResponse, DescribeJobFlowsOutputError>) -> Void)
    /// <p>Provides details of a notebook execution.</p>
    func describeNotebookExecution(input: DescribeNotebookExecutionInput, completion: @escaping (SdkResult<DescribeNotebookExecutionOutputResponse, DescribeNotebookExecutionOutputError>) -> Void)
    /// <p>Provides the details of a security configuration by returning the configuration
    ///          JSON.</p>
    func describeSecurityConfiguration(input: DescribeSecurityConfigurationInput, completion: @escaping (SdkResult<DescribeSecurityConfigurationOutputResponse, DescribeSecurityConfigurationOutputError>) -> Void)
    /// <p>Provides more detail about the cluster step.</p>
    func describeStep(input: DescribeStepInput, completion: @escaping (SdkResult<DescribeStepOutputResponse, DescribeStepOutputError>) -> Void)
    /// <p>Returns details for the specified Amazon EMR Studio including ID, Name, VPC, Studio
    ///          access URL, and so on.</p>
    func describeStudio(input: DescribeStudioInput, completion: @escaping (SdkResult<DescribeStudioOutputResponse, DescribeStudioOutputError>) -> Void)
    /// <p>Returns the Amazon EMR block public access configuration for your AWS account in the
    ///          current Region. For more information see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/configure-block-public-access.html">Configure Block
    ///             Public Access for Amazon EMR</a> in the <i>Amazon EMR Management
    ///             Guide</i>.</p>
    func getBlockPublicAccessConfiguration(input: GetBlockPublicAccessConfigurationInput, completion: @escaping (SdkResult<GetBlockPublicAccessConfigurationOutputResponse, GetBlockPublicAccessConfigurationOutputError>) -> Void)
    /// <p>Fetches the attached managed scaling policy for an Amazon EMR cluster. </p>
    func getManagedScalingPolicy(input: GetManagedScalingPolicyInput, completion: @escaping (SdkResult<GetManagedScalingPolicyOutputResponse, GetManagedScalingPolicyOutputError>) -> Void)
    /// <p>Fetches mapping details for the specified Amazon EMR Studio and identity (user or
    ///          group).</p>
    func getStudioSessionMapping(input: GetStudioSessionMappingInput, completion: @escaping (SdkResult<GetStudioSessionMappingOutputResponse, GetStudioSessionMappingOutputError>) -> Void)
    /// <p>Provides information about the bootstrap actions associated with a cluster.</p>
    func listBootstrapActions(input: ListBootstrapActionsInput, completion: @escaping (SdkResult<ListBootstrapActionsOutputResponse, ListBootstrapActionsOutputError>) -> Void)
    /// <p>Provides the status of all clusters visible to this AWS account. Allows you to filter
    ///          the list of clusters based on certain criteria; for example, filtering by cluster creation
    ///          date and time or by status. This call returns a maximum of 50 clusters per call, but
    ///          returns a marker to track the paging of the cluster list across multiple ListClusters
    ///          calls.</p>
    func listClusters(input: ListClustersInput, completion: @escaping (SdkResult<ListClustersOutputResponse, ListClustersOutputError>) -> Void)
    /// <p>Lists all available details about the instance fleets in a cluster.</p>
    ///          <note>
    ///             <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and
    ///             later, excluding 5.0.x versions.</p>
    ///          </note>
    func listInstanceFleets(input: ListInstanceFleetsInput, completion: @escaping (SdkResult<ListInstanceFleetsOutputResponse, ListInstanceFleetsOutputError>) -> Void)
    /// <p>Provides all available details about the instance groups in a cluster.</p>
    func listInstanceGroups(input: ListInstanceGroupsInput, completion: @escaping (SdkResult<ListInstanceGroupsOutputResponse, ListInstanceGroupsOutputError>) -> Void)
    /// <p>Provides information for all active EC2 instances and EC2 instances terminated in the
    ///          last 30 days, up to a maximum of 2,000. EC2 instances in any of the following states are
    ///          considered active: AWAITING_FULFILLMENT, PROVISIONING, BOOTSTRAPPING, RUNNING.</p>
    func listInstances(input: ListInstancesInput, completion: @escaping (SdkResult<ListInstancesOutputResponse, ListInstancesOutputError>) -> Void)
    /// <p>Provides summaries of all notebook executions. You can filter the list based on multiple
    ///          criteria such as status, time range, and editor id. Returns a maximum of 50 notebook
    ///          executions and a marker to track the paging of a longer notebook execution list across
    ///          multiple <code>ListNotebookExecution</code> calls.</p>
    func listNotebookExecutions(input: ListNotebookExecutionsInput, completion: @escaping (SdkResult<ListNotebookExecutionsOutputResponse, ListNotebookExecutionsOutputError>) -> Void)
    /// <p>Lists all the security configurations visible to this account, providing their creation
    ///          dates and times, and their names. This call returns a maximum of 50 clusters per call, but
    ///          returns a marker to track the paging of the cluster list across multiple
    ///          ListSecurityConfigurations calls.</p>
    func listSecurityConfigurations(input: ListSecurityConfigurationsInput, completion: @escaping (SdkResult<ListSecurityConfigurationsOutputResponse, ListSecurityConfigurationsOutputError>) -> Void)
    /// <p>Provides a list of steps for the cluster in reverse order unless you specify
    ///             <code>stepIds</code> with the request of filter by <code>StepStates</code>. You can
    ///          specify a maximum of 10 <code>stepIDs</code>.</p>
    func listSteps(input: ListStepsInput, completion: @escaping (SdkResult<ListStepsOutputResponse, ListStepsOutputError>) -> Void)
    /// <p>Returns a list of all Amazon EMR Studios associated with the AWS account. The list
    ///          includes details such as ID, Studio Access URL, and creation time for each Studio.</p>
    func listStudios(input: ListStudiosInput, completion: @escaping (SdkResult<ListStudiosOutputResponse, ListStudiosOutputError>) -> Void)
    /// <p>Returns a list of all user or group session mappings for the Amazon EMR Studio specified by
    ///             <code>StudioId</code>.</p>
    func listStudioSessionMappings(input: ListStudioSessionMappingsInput, completion: @escaping (SdkResult<ListStudioSessionMappingsOutputResponse, ListStudioSessionMappingsOutputError>) -> Void)
    /// <p>Modifies the number of steps that can be executed concurrently for the cluster specified
    ///          using ClusterID.</p>
    func modifyCluster(input: ModifyClusterInput, completion: @escaping (SdkResult<ModifyClusterOutputResponse, ModifyClusterOutputError>) -> Void)
    /// <p>Modifies the target On-Demand and target Spot capacities for the instance fleet with the
    ///          specified InstanceFleetID within the cluster specified using ClusterID. The call either
    ///          succeeds or fails atomically.</p>
    ///          <note>
    ///             <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and
    ///             later, excluding 5.0.x versions.</p>
    ///          </note>
    func modifyInstanceFleet(input: ModifyInstanceFleetInput, completion: @escaping (SdkResult<ModifyInstanceFleetOutputResponse, ModifyInstanceFleetOutputError>) -> Void)
    /// <p>ModifyInstanceGroups modifies the number of nodes and configuration settings of an
    ///          instance group. The input parameters include the new target instance count for the group
    ///          and the instance group ID. The call will either succeed or fail atomically.</p>
    func modifyInstanceGroups(input: ModifyInstanceGroupsInput, completion: @escaping (SdkResult<ModifyInstanceGroupsOutputResponse, ModifyInstanceGroupsOutputError>) -> Void)
    /// <p>Creates or updates an automatic scaling policy for a core instance group or task
    ///          instance group in an Amazon EMR cluster. The automatic scaling policy defines how an
    ///          instance group dynamically adds and terminates EC2 instances in response to the value of a
    ///          CloudWatch metric.</p>
    func putAutoScalingPolicy(input: PutAutoScalingPolicyInput, completion: @escaping (SdkResult<PutAutoScalingPolicyOutputResponse, PutAutoScalingPolicyOutputError>) -> Void)
    /// <p>Creates or updates an Amazon EMR block public access configuration for your AWS account
    ///          in the current Region. For more information see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/configure-block-public-access.html">Configure Block
    ///             Public Access for Amazon EMR</a> in the <i>Amazon EMR Management
    ///             Guide</i>.</p>
    func putBlockPublicAccessConfiguration(input: PutBlockPublicAccessConfigurationInput, completion: @escaping (SdkResult<PutBlockPublicAccessConfigurationOutputResponse, PutBlockPublicAccessConfigurationOutputError>) -> Void)
    /// <p>Creates or updates a managed scaling policy for an Amazon EMR cluster. The managed
    ///          scaling policy defines the limits for resources, such as EC2 instances that can be added or
    ///          terminated from a cluster. The policy only applies to the core and task nodes. The master
    ///          node cannot be scaled after initial configuration. </p>
    func putManagedScalingPolicy(input: PutManagedScalingPolicyInput, completion: @escaping (SdkResult<PutManagedScalingPolicyOutputResponse, PutManagedScalingPolicyOutputError>) -> Void)
    /// <p>Removes an automatic scaling policy from a specified instance group within an EMR
    ///          cluster.</p>
    func removeAutoScalingPolicy(input: RemoveAutoScalingPolicyInput, completion: @escaping (SdkResult<RemoveAutoScalingPolicyOutputResponse, RemoveAutoScalingPolicyOutputError>) -> Void)
    /// <p> Removes a managed scaling policy from a specified EMR cluster. </p>
    func removeManagedScalingPolicy(input: RemoveManagedScalingPolicyInput, completion: @escaping (SdkResult<RemoveManagedScalingPolicyOutputResponse, RemoveManagedScalingPolicyOutputError>) -> Void)
    /// <p>Removes tags from an Amazon EMR resource. Tags make it easier to associate clusters in
    ///          various ways, such as grouping clusters to track your Amazon EMR resource allocation costs.
    ///          For more information, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-tags.html">Tag Clusters</a>. </p>
    ///          <p>The following example removes the stack tag with value Prod from a cluster:</p>
    func removeTags(input: RemoveTagsInput, completion: @escaping (SdkResult<RemoveTagsOutputResponse, RemoveTagsOutputError>) -> Void)
    /// <p>RunJobFlow creates and starts running a new cluster (job flow). The cluster runs the
    ///          steps specified. After the steps complete, the cluster stops and the HDFS partition is
    ///          lost. To prevent loss of data, configure the last step of the job flow to store results in
    ///          Amazon S3. If the <a>JobFlowInstancesConfig</a>
    ///             <code>KeepJobFlowAliveWhenNoSteps</code> parameter is set to <code>TRUE</code>, the cluster
    ///          transitions to the WAITING state rather than shutting down after the steps have completed. </p>
    ///          <p>For additional protection, you can set the <a>JobFlowInstancesConfig</a>
    ///             <code>TerminationProtected</code> parameter to <code>TRUE</code> to lock the cluster and
    ///          prevent it from being terminated by API call, user intervention, or in the event of a job
    ///          flow error.</p>
    ///          <p>A maximum of 256 steps are allowed in each job flow.</p>
    ///          <p>If your cluster is long-running (such as a Hive data warehouse) or complex, you may
    ///          require more than 256 steps to process your data. You can bypass the 256-step limitation in
    ///          various ways, including using the SSH shell to connect to the master node and submitting
    ///          queries directly to the software running on the master node, such as Hive and Hadoop. For
    ///          more information on how to do this, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/AddMoreThan256Steps.html">Add More than 256 Steps to a
    ///             Cluster</a> in the <i>Amazon EMR Management Guide</i>.</p>
    ///          <p>For long running clusters, we recommend that you periodically store your results.</p>
    ///          <note>
    ///             <p>The instance fleets configuration is available only in Amazon EMR versions 4.8.0 and
    ///             later, excluding 5.0.x versions. The RunJobFlow request can contain InstanceFleets
    ///             parameters or InstanceGroups parameters, but not both.</p>
    ///          </note>
    func runJobFlow(input: RunJobFlowInput, completion: @escaping (SdkResult<RunJobFlowOutputResponse, RunJobFlowOutputError>) -> Void)
    /// <p>SetTerminationProtection locks a cluster (job flow) so the EC2 instances in the cluster
    ///          cannot be terminated by user intervention, an API call, or in the event of a job-flow
    ///          error. The cluster still terminates upon successful completion of the job flow. Calling
    ///             <code>SetTerminationProtection</code> on a cluster is similar to calling the Amazon EC2
    ///             <code>DisableAPITermination</code> API on all EC2 instances in a cluster.</p>
    ///          <p>
    ///             <code>SetTerminationProtection</code> is used to prevent accidental termination of a
    ///          cluster and to ensure that in the event of an error, the instances persist so that you can
    ///          recover any data stored in their ephemeral instance storage.</p>
    ///          <p> To terminate a cluster that has been locked by setting
    ///             <code>SetTerminationProtection</code> to <code>true</code>, you must first unlock the
    ///          job flow by a subsequent call to <code>SetTerminationProtection</code> in which you set the
    ///          value to <code>false</code>. </p>
    ///          <p> For more information, see<a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/UsingEMR_TerminationProtection.html">Managing Cluster
    ///             Termination</a> in the <i>Amazon EMR Management Guide</i>. </p>
    func setTerminationProtection(input: SetTerminationProtectionInput, completion: @escaping (SdkResult<SetTerminationProtectionOutputResponse, SetTerminationProtectionOutputError>) -> Void)
    /// <p>Sets the <a>Cluster$VisibleToAllUsers</a> value, which determines whether the
    ///          cluster is visible to all IAM users of the AWS account associated with the cluster. Only
    ///          the IAM user who created the cluster or the AWS account root user can call this action. The
    ///          default value, <code>true</code>, indicates that all IAM users in the AWS account can
    ///          perform cluster actions if they have the proper IAM policy permissions. If set to
    ///             <code>false</code>, only the IAM user that created the cluster can perform actions. This
    ///          action works on running clusters. You can override the default <code>true</code> setting
    ///          when you create a cluster by using the <code>VisibleToAllUsers</code> parameter with
    ///             <code>RunJobFlow</code>.</p>
    func setVisibleToAllUsers(input: SetVisibleToAllUsersInput, completion: @escaping (SdkResult<SetVisibleToAllUsersOutputResponse, SetVisibleToAllUsersOutputError>) -> Void)
    /// <p>Starts a notebook execution.</p>
    func startNotebookExecution(input: StartNotebookExecutionInput, completion: @escaping (SdkResult<StartNotebookExecutionOutputResponse, StartNotebookExecutionOutputError>) -> Void)
    /// <p>Stops a notebook execution.</p>
    func stopNotebookExecution(input: StopNotebookExecutionInput, completion: @escaping (SdkResult<StopNotebookExecutionOutputResponse, StopNotebookExecutionOutputError>) -> Void)
    /// <p>TerminateJobFlows shuts a list of clusters (job flows) down. When a job flow is shut
    ///          down, any step not yet completed is canceled and the EC2 instances on which the cluster is
    ///          running are stopped. Any log files not already saved are uploaded to Amazon S3 if a LogUri
    ///          was specified when the cluster was created.</p>
    ///          <p>The maximum number of clusters allowed is 10. The call to <code>TerminateJobFlows</code>
    ///          is asynchronous. Depending on the configuration of the cluster, it may take up to 1-5
    ///          minutes for the cluster to completely terminate and release allocated resources, such as
    ///          Amazon EC2 instances.</p>
    func terminateJobFlows(input: TerminateJobFlowsInput, completion: @escaping (SdkResult<TerminateJobFlowsOutputResponse, TerminateJobFlowsOutputError>) -> Void)
    /// <p>Updates an Amazon EMR Studio configuration, including attributes such as name, description, and subnets.</p>
    func updateStudio(input: UpdateStudioInput, completion: @escaping (SdkResult<UpdateStudioOutputResponse, UpdateStudioOutputError>) -> Void)
    /// <p>Updates the session policy attached to the user or group for the specified Amazon EMR
    ///          Studio.</p>
    func updateStudioSessionMapping(input: UpdateStudioSessionMappingInput, completion: @escaping (SdkResult<UpdateStudioSessionMappingOutputResponse, UpdateStudioSessionMappingOutputError>) -> Void)
}
