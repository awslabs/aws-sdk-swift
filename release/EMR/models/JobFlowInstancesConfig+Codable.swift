// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension JobFlowInstancesConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case additionalMasterSecurityGroups = "AdditionalMasterSecurityGroups"
        case additionalSlaveSecurityGroups = "AdditionalSlaveSecurityGroups"
        case ec2KeyName = "Ec2KeyName"
        case ec2SubnetId = "Ec2SubnetId"
        case ec2SubnetIds = "Ec2SubnetIds"
        case emrManagedMasterSecurityGroup = "EmrManagedMasterSecurityGroup"
        case emrManagedSlaveSecurityGroup = "EmrManagedSlaveSecurityGroup"
        case hadoopVersion = "HadoopVersion"
        case instanceCount = "InstanceCount"
        case instanceFleets = "InstanceFleets"
        case instanceGroups = "InstanceGroups"
        case keepJobFlowAliveWhenNoSteps = "KeepJobFlowAliveWhenNoSteps"
        case masterInstanceType = "MasterInstanceType"
        case placement = "Placement"
        case serviceAccessSecurityGroup = "ServiceAccessSecurityGroup"
        case slaveInstanceType = "SlaveInstanceType"
        case terminationProtected = "TerminationProtected"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalMasterSecurityGroups = additionalMasterSecurityGroups {
            var additionalMasterSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalMasterSecurityGroups)
            for securitygroupslist0 in additionalMasterSecurityGroups {
                try additionalMasterSecurityGroupsContainer.encode(securitygroupslist0)
            }
        }
        if let additionalSlaveSecurityGroups = additionalSlaveSecurityGroups {
            var additionalSlaveSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalSlaveSecurityGroups)
            for securitygroupslist0 in additionalSlaveSecurityGroups {
                try additionalSlaveSecurityGroupsContainer.encode(securitygroupslist0)
            }
        }
        if let ec2KeyName = ec2KeyName {
            try encodeContainer.encode(ec2KeyName, forKey: .ec2KeyName)
        }
        if let ec2SubnetId = ec2SubnetId {
            try encodeContainer.encode(ec2SubnetId, forKey: .ec2SubnetId)
        }
        if let ec2SubnetIds = ec2SubnetIds {
            var ec2SubnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2SubnetIds)
            for xmlstringmaxlen256list0 in ec2SubnetIds {
                try ec2SubnetIdsContainer.encode(xmlstringmaxlen256list0)
            }
        }
        if let emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroup {
            try encodeContainer.encode(emrManagedMasterSecurityGroup, forKey: .emrManagedMasterSecurityGroup)
        }
        if let emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroup {
            try encodeContainer.encode(emrManagedSlaveSecurityGroup, forKey: .emrManagedSlaveSecurityGroup)
        }
        if let hadoopVersion = hadoopVersion {
            try encodeContainer.encode(hadoopVersion, forKey: .hadoopVersion)
        }
        if let instanceCount = instanceCount {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let instanceFleets = instanceFleets {
            var instanceFleetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceFleets)
            for instancefleetconfiglist0 in instanceFleets {
                try instanceFleetsContainer.encode(instancefleetconfiglist0)
            }
        }
        if let instanceGroups = instanceGroups {
            var instanceGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceGroups)
            for instancegroupconfiglist0 in instanceGroups {
                try instanceGroupsContainer.encode(instancegroupconfiglist0)
            }
        }
        if keepJobFlowAliveWhenNoSteps != false {
            try encodeContainer.encode(keepJobFlowAliveWhenNoSteps, forKey: .keepJobFlowAliveWhenNoSteps)
        }
        if let masterInstanceType = masterInstanceType {
            try encodeContainer.encode(masterInstanceType, forKey: .masterInstanceType)
        }
        if let placement = placement {
            try encodeContainer.encode(placement, forKey: .placement)
        }
        if let serviceAccessSecurityGroup = serviceAccessSecurityGroup {
            try encodeContainer.encode(serviceAccessSecurityGroup, forKey: .serviceAccessSecurityGroup)
        }
        if let slaveInstanceType = slaveInstanceType {
            try encodeContainer.encode(slaveInstanceType, forKey: .slaveInstanceType)
        }
        if terminationProtected != false {
            try encodeContainer.encode(terminationProtected, forKey: .terminationProtected)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let masterInstanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .masterInstanceType)
        masterInstanceType = masterInstanceTypeDecoded
        let slaveInstanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .slaveInstanceType)
        slaveInstanceType = slaveInstanceTypeDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let instanceGroupsContainer = try containerValues.decodeIfPresent([InstanceGroupConfig].self, forKey: .instanceGroups)
        var instanceGroupsDecoded0:[InstanceGroupConfig]? = nil
        if let instanceGroupsContainer = instanceGroupsContainer {
            instanceGroupsDecoded0 = [InstanceGroupConfig]()
            for structure0 in instanceGroupsContainer {
                instanceGroupsDecoded0?.append(structure0)
            }
        }
        instanceGroups = instanceGroupsDecoded0
        let instanceFleetsContainer = try containerValues.decodeIfPresent([InstanceFleetConfig].self, forKey: .instanceFleets)
        var instanceFleetsDecoded0:[InstanceFleetConfig]? = nil
        if let instanceFleetsContainer = instanceFleetsContainer {
            instanceFleetsDecoded0 = [InstanceFleetConfig]()
            for structure0 in instanceFleetsContainer {
                instanceFleetsDecoded0?.append(structure0)
            }
        }
        instanceFleets = instanceFleetsDecoded0
        let ec2KeyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ec2KeyName)
        ec2KeyName = ec2KeyNameDecoded
        let placementDecoded = try containerValues.decodeIfPresent(PlacementType.self, forKey: .placement)
        placement = placementDecoded
        let keepJobFlowAliveWhenNoStepsDecoded = try containerValues.decode(Bool.self, forKey: .keepJobFlowAliveWhenNoSteps)
        keepJobFlowAliveWhenNoSteps = keepJobFlowAliveWhenNoStepsDecoded
        let terminationProtectedDecoded = try containerValues.decode(Bool.self, forKey: .terminationProtected)
        terminationProtected = terminationProtectedDecoded
        let hadoopVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hadoopVersion)
        hadoopVersion = hadoopVersionDecoded
        let ec2SubnetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ec2SubnetId)
        ec2SubnetId = ec2SubnetIdDecoded
        let ec2SubnetIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .ec2SubnetIds)
        var ec2SubnetIdsDecoded0:[String]? = nil
        if let ec2SubnetIdsContainer = ec2SubnetIdsContainer {
            ec2SubnetIdsDecoded0 = [String]()
            for string0 in ec2SubnetIdsContainer {
                ec2SubnetIdsDecoded0?.append(string0)
            }
        }
        ec2SubnetIds = ec2SubnetIdsDecoded0
        let emrManagedMasterSecurityGroupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .emrManagedMasterSecurityGroup)
        emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroupDecoded
        let emrManagedSlaveSecurityGroupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .emrManagedSlaveSecurityGroup)
        emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroupDecoded
        let serviceAccessSecurityGroupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceAccessSecurityGroup)
        serviceAccessSecurityGroup = serviceAccessSecurityGroupDecoded
        let additionalMasterSecurityGroupsContainer = try containerValues.decodeIfPresent([String].self, forKey: .additionalMasterSecurityGroups)
        var additionalMasterSecurityGroupsDecoded0:[String]? = nil
        if let additionalMasterSecurityGroupsContainer = additionalMasterSecurityGroupsContainer {
            additionalMasterSecurityGroupsDecoded0 = [String]()
            for string0 in additionalMasterSecurityGroupsContainer {
                additionalMasterSecurityGroupsDecoded0?.append(string0)
            }
        }
        additionalMasterSecurityGroups = additionalMasterSecurityGroupsDecoded0
        let additionalSlaveSecurityGroupsContainer = try containerValues.decodeIfPresent([String].self, forKey: .additionalSlaveSecurityGroups)
        var additionalSlaveSecurityGroupsDecoded0:[String]? = nil
        if let additionalSlaveSecurityGroupsContainer = additionalSlaveSecurityGroupsContainer {
            additionalSlaveSecurityGroupsDecoded0 = [String]()
            for string0 in additionalSlaveSecurityGroupsContainer {
                additionalSlaveSecurityGroupsDecoded0?.append(string0)
            }
        }
        additionalSlaveSecurityGroups = additionalSlaveSecurityGroupsDecoded0
    }
}
