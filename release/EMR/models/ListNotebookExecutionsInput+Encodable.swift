// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ListNotebookExecutionsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case editorId = "EditorId"
        case from = "From"
        case marker = "Marker"
        case status = "Status"
        case to = "To"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let editorId = editorId {
            try encodeContainer.encode(editorId, forKey: .editorId)
        }
        if let from = from {
            try encodeContainer.encode(from.timeIntervalSince1970, forKey: .from)
        }
        if let marker = marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let to = to {
            try encodeContainer.encode(to.timeIntervalSince1970, forKey: .to)
        }
    }
}
