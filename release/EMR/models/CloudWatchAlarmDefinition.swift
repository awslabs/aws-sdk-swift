// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The definition of a CloudWatch metric alarm, which determines when an automatic scaling
///          activity is triggered. When the defined alarm conditions are satisfied, scaling activity
///          begins.</p>
public struct CloudWatchAlarmDefinition: Equatable {
    /// <p>Determines how the metric specified by <code>MetricName</code> is compared to the value
    ///          specified by <code>Threshold</code>.</p>
    public let comparisonOperator: ComparisonOperator?
    /// <p>A CloudWatch metric dimension.</p>
    public let dimensions: [MetricDimension]?
    /// <p>The number of periods, in five-minute increments, during which the alarm condition must
    ///          exist before the alarm triggers automatic scaling activity. The default value is
    ///             <code>1</code>.</p>
    public let evaluationPeriods: Int?
    /// <p>The name of the CloudWatch metric that is watched to determine an alarm
    ///          condition.</p>
    public let metricName: String?
    /// <p>The namespace for the CloudWatch metric. The default is
    ///             <code>AWS/ElasticMapReduce</code>.</p>
    public let namespace: String?
    /// <p>The period, in seconds, over which the statistic is applied. EMR CloudWatch metrics are
    ///          emitted every five minutes (300 seconds), so if an EMR CloudWatch metric is specified,
    ///          specify <code>300</code>.</p>
    public let period: Int?
    /// <p>The statistic to apply to the metric associated with the alarm. The default is
    ///             <code>AVERAGE</code>.</p>
    public let statistic: Statistic?
    /// <p>The value against which the specified statistic is compared.</p>
    public let threshold: Double?
    /// <p>The unit of measure associated with the CloudWatch metric being watched. The value
    ///          specified for <code>Unit</code> must correspond to the units specified in the CloudWatch
    ///          metric.</p>
    public let unit: Unit?

    public init (
        comparisonOperator: ComparisonOperator? = nil,
        dimensions: [MetricDimension]? = nil,
        evaluationPeriods: Int? = nil,
        metricName: String? = nil,
        namespace: String? = nil,
        period: Int? = nil,
        statistic: Statistic? = nil,
        threshold: Double? = nil,
        unit: Unit? = nil
    )
    {
        self.comparisonOperator = comparisonOperator
        self.dimensions = dimensions
        self.evaluationPeriods = evaluationPeriods
        self.metricName = metricName
        self.namespace = namespace
        self.period = period
        self.statistic = statistic
        self.threshold = threshold
        self.unit = unit
    }
}
