// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstanceTypeSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bidPrice = "BidPrice"
        case bidPriceAsPercentageOfOnDemandPrice = "BidPriceAsPercentageOfOnDemandPrice"
        case configurations = "Configurations"
        case ebsBlockDevices = "EbsBlockDevices"
        case ebsOptimized = "EbsOptimized"
        case instanceType = "InstanceType"
        case weightedCapacity = "WeightedCapacity"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bidPrice = bidPrice {
            try encodeContainer.encode(bidPrice, forKey: .bidPrice)
        }
        if let bidPriceAsPercentageOfOnDemandPrice = bidPriceAsPercentageOfOnDemandPrice {
            try encodeContainer.encode(bidPriceAsPercentageOfOnDemandPrice, forKey: .bidPriceAsPercentageOfOnDemandPrice)
        }
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configurationlist0 in configurations {
                try configurationsContainer.encode(configurationlist0)
            }
        }
        if let ebsBlockDevices = ebsBlockDevices {
            var ebsBlockDevicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ebsBlockDevices)
            for ebsblockdevicelist0 in ebsBlockDevices {
                try ebsBlockDevicesContainer.encode(ebsblockdevicelist0)
            }
        }
        if let ebsOptimized = ebsOptimized {
            try encodeContainer.encode(ebsOptimized, forKey: .ebsOptimized)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let weightedCapacity = weightedCapacity {
            try encodeContainer.encode(weightedCapacity, forKey: .weightedCapacity)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let weightedCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .weightedCapacity)
        weightedCapacity = weightedCapacityDecoded
        let bidPriceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bidPrice)
        bidPrice = bidPriceDecoded
        let bidPriceAsPercentageOfOnDemandPriceDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .bidPriceAsPercentageOfOnDemandPrice)
        bidPriceAsPercentageOfOnDemandPrice = bidPriceAsPercentageOfOnDemandPriceDecoded
        let configurationsContainer = try containerValues.decodeIfPresent([Configuration].self, forKey: .configurations)
        var configurationsDecoded0:[Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [Configuration]()
            for structure0 in configurationsContainer {
                configurationsDecoded0?.append(structure0)
            }
        }
        configurations = configurationsDecoded0
        let ebsBlockDevicesContainer = try containerValues.decodeIfPresent([EbsBlockDevice].self, forKey: .ebsBlockDevices)
        var ebsBlockDevicesDecoded0:[EbsBlockDevice]? = nil
        if let ebsBlockDevicesContainer = ebsBlockDevicesContainer {
            ebsBlockDevicesDecoded0 = [EbsBlockDevice]()
            for structure0 in ebsBlockDevicesContainer {
                ebsBlockDevicesDecoded0?.append(structure0)
            }
        }
        ebsBlockDevices = ebsBlockDevicesDecoded0
        let ebsOptimizedDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .ebsOptimized)
        ebsOptimized = ebsOptimizedDecoded
    }
}
