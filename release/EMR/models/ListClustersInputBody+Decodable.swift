// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListClustersInputBody: Equatable {
    public let createdAfter: Date?
    public let createdBefore: Date?
    public let clusterStates: [ClusterState]?
    public let marker: String?
}

extension ListClustersInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterStates = "ClusterStates"
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createdAfterDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAfter)
        createdAfter = createdAfterDecoded
        let createdBeforeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdBefore)
        createdBefore = createdBeforeDecoded
        let clusterStatesContainer = try containerValues.decodeIfPresent([ClusterState].self, forKey: .clusterStates)
        var clusterStatesDecoded0:[ClusterState]? = nil
        if let clusterStatesContainer = clusterStatesContainer {
            clusterStatesDecoded0 = [ClusterState]()
            for string0 in clusterStatesContainer {
                clusterStatesDecoded0?.append(string0)
            }
        }
        clusterStates = clusterStatesDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}
