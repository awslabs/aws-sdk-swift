// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NotebookExecution: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case editorId = "EditorId"
        case endTime = "EndTime"
        case executionEngine = "ExecutionEngine"
        case lastStateChangeReason = "LastStateChangeReason"
        case notebookExecutionId = "NotebookExecutionId"
        case notebookExecutionName = "NotebookExecutionName"
        case notebookInstanceSecurityGroupId = "NotebookInstanceSecurityGroupId"
        case notebookParams = "NotebookParams"
        case outputNotebookURI = "OutputNotebookURI"
        case startTime = "StartTime"
        case status = "Status"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let editorId = editorId {
            try encodeContainer.encode(editorId, forKey: .editorId)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let executionEngine = executionEngine {
            try encodeContainer.encode(executionEngine, forKey: .executionEngine)
        }
        if let lastStateChangeReason = lastStateChangeReason {
            try encodeContainer.encode(lastStateChangeReason, forKey: .lastStateChangeReason)
        }
        if let notebookExecutionId = notebookExecutionId {
            try encodeContainer.encode(notebookExecutionId, forKey: .notebookExecutionId)
        }
        if let notebookExecutionName = notebookExecutionName {
            try encodeContainer.encode(notebookExecutionName, forKey: .notebookExecutionName)
        }
        if let notebookInstanceSecurityGroupId = notebookInstanceSecurityGroupId {
            try encodeContainer.encode(notebookInstanceSecurityGroupId, forKey: .notebookInstanceSecurityGroupId)
        }
        if let notebookParams = notebookParams {
            try encodeContainer.encode(notebookParams, forKey: .notebookParams)
        }
        if let outputNotebookURI = outputNotebookURI {
            try encodeContainer.encode(outputNotebookURI, forKey: .outputNotebookURI)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookExecutionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookExecutionId)
        notebookExecutionId = notebookExecutionIdDecoded
        let editorIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .editorId)
        editorId = editorIdDecoded
        let executionEngineDecoded = try containerValues.decodeIfPresent(ExecutionEngineConfig.self, forKey: .executionEngine)
        executionEngine = executionEngineDecoded
        let notebookExecutionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookExecutionName)
        notebookExecutionName = notebookExecutionNameDecoded
        let notebookParamsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookParams)
        notebookParams = notebookParamsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(NotebookExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let outputNotebookURIDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outputNotebookURI)
        outputNotebookURI = outputNotebookURIDecoded
        let lastStateChangeReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastStateChangeReason)
        lastStateChangeReason = lastStateChangeReasonDecoded
        let notebookInstanceSecurityGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookInstanceSecurityGroupId)
        notebookInstanceSecurityGroupId = notebookInstanceSecurityGroupIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
