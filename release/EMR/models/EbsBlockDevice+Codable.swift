// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EbsBlockDevice: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case device = "Device"
        case volumeSpecification = "VolumeSpecification"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let device = device {
            try encodeContainer.encode(device, forKey: .device)
        }
        if let volumeSpecification = volumeSpecification {
            try encodeContainer.encode(volumeSpecification, forKey: .volumeSpecification)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeSpecificationDecoded = try containerValues.decodeIfPresent(VolumeSpecification.self, forKey: .volumeSpecification)
        volumeSpecification = volumeSpecificationDecoded
        let deviceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .device)
        device = deviceDecoded
    }
}
