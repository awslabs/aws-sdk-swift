// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListNotebookExecutionsInputBody: Equatable {
    public let editorId: String?
    public let status: NotebookExecutionStatus?
    public let from: Date?
    public let to: Date?
    public let marker: String?
}

extension ListNotebookExecutionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case editorId = "EditorId"
        case from = "From"
        case marker = "Marker"
        case status = "Status"
        case to = "To"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let editorIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .editorId)
        editorId = editorIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(NotebookExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let fromDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .from)
        from = fromDecoded
        let toDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .to)
        to = toDecoded
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}
