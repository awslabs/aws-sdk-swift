// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BlockPublicAccessConfigurationMetadata: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createdByArn = "CreatedByArn"
        case creationDateTime = "CreationDateTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdByArn = createdByArn {
            try encodeContainer.encode(createdByArn, forKey: .createdByArn)
        }
        if let creationDateTime = creationDateTime {
            try encodeContainer.encode(creationDateTime.timeIntervalSince1970, forKey: .creationDateTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let createdByArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdByArn)
        createdByArn = createdByArnDecoded
    }
}
