// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension JobFlowDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case amiVersion = "AmiVersion"
        case autoScalingRole = "AutoScalingRole"
        case bootstrapActions = "BootstrapActions"
        case executionStatusDetail = "ExecutionStatusDetail"
        case instances = "Instances"
        case jobFlowId = "JobFlowId"
        case jobFlowRole = "JobFlowRole"
        case logEncryptionKmsKeyId = "LogEncryptionKmsKeyId"
        case logUri = "LogUri"
        case name = "Name"
        case scaleDownBehavior = "ScaleDownBehavior"
        case serviceRole = "ServiceRole"
        case steps = "Steps"
        case supportedProducts = "SupportedProducts"
        case visibleToAllUsers = "VisibleToAllUsers"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amiVersion = amiVersion {
            try encodeContainer.encode(amiVersion, forKey: .amiVersion)
        }
        if let autoScalingRole = autoScalingRole {
            try encodeContainer.encode(autoScalingRole, forKey: .autoScalingRole)
        }
        if let bootstrapActions = bootstrapActions {
            var bootstrapActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bootstrapActions)
            for bootstrapactiondetaillist0 in bootstrapActions {
                try bootstrapActionsContainer.encode(bootstrapactiondetaillist0)
            }
        }
        if let executionStatusDetail = executionStatusDetail {
            try encodeContainer.encode(executionStatusDetail, forKey: .executionStatusDetail)
        }
        if let instances = instances {
            try encodeContainer.encode(instances, forKey: .instances)
        }
        if let jobFlowId = jobFlowId {
            try encodeContainer.encode(jobFlowId, forKey: .jobFlowId)
        }
        if let jobFlowRole = jobFlowRole {
            try encodeContainer.encode(jobFlowRole, forKey: .jobFlowRole)
        }
        if let logEncryptionKmsKeyId = logEncryptionKmsKeyId {
            try encodeContainer.encode(logEncryptionKmsKeyId, forKey: .logEncryptionKmsKeyId)
        }
        if let logUri = logUri {
            try encodeContainer.encode(logUri, forKey: .logUri)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scaleDownBehavior = scaleDownBehavior {
            try encodeContainer.encode(scaleDownBehavior.rawValue, forKey: .scaleDownBehavior)
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let steps = steps {
            var stepsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .steps)
            for stepdetaillist0 in steps {
                try stepsContainer.encode(stepdetaillist0)
            }
        }
        if let supportedProducts = supportedProducts {
            var supportedProductsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedProducts)
            for supportedproductslist0 in supportedProducts {
                try supportedProductsContainer.encode(supportedproductslist0)
            }
        }
        if visibleToAllUsers != false {
            try encodeContainer.encode(visibleToAllUsers, forKey: .visibleToAllUsers)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobFlowIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobFlowId)
        jobFlowId = jobFlowIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logUri)
        logUri = logUriDecoded
        let logEncryptionKmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logEncryptionKmsKeyId)
        logEncryptionKmsKeyId = logEncryptionKmsKeyIdDecoded
        let amiVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .amiVersion)
        amiVersion = amiVersionDecoded
        let executionStatusDetailDecoded = try containerValues.decodeIfPresent(JobFlowExecutionStatusDetail.self, forKey: .executionStatusDetail)
        executionStatusDetail = executionStatusDetailDecoded
        let instancesDecoded = try containerValues.decodeIfPresent(JobFlowInstancesDetail.self, forKey: .instances)
        instances = instancesDecoded
        let stepsContainer = try containerValues.decodeIfPresent([StepDetail].self, forKey: .steps)
        var stepsDecoded0:[StepDetail]? = nil
        if let stepsContainer = stepsContainer {
            stepsDecoded0 = [StepDetail]()
            for structure0 in stepsContainer {
                stepsDecoded0?.append(structure0)
            }
        }
        steps = stepsDecoded0
        let bootstrapActionsContainer = try containerValues.decodeIfPresent([BootstrapActionDetail].self, forKey: .bootstrapActions)
        var bootstrapActionsDecoded0:[BootstrapActionDetail]? = nil
        if let bootstrapActionsContainer = bootstrapActionsContainer {
            bootstrapActionsDecoded0 = [BootstrapActionDetail]()
            for structure0 in bootstrapActionsContainer {
                bootstrapActionsDecoded0?.append(structure0)
            }
        }
        bootstrapActions = bootstrapActionsDecoded0
        let supportedProductsContainer = try containerValues.decodeIfPresent([String].self, forKey: .supportedProducts)
        var supportedProductsDecoded0:[String]? = nil
        if let supportedProductsContainer = supportedProductsContainer {
            supportedProductsDecoded0 = [String]()
            for string0 in supportedProductsContainer {
                supportedProductsDecoded0?.append(string0)
            }
        }
        supportedProducts = supportedProductsDecoded0
        let visibleToAllUsersDecoded = try containerValues.decode(Bool.self, forKey: .visibleToAllUsers)
        visibleToAllUsers = visibleToAllUsersDecoded
        let jobFlowRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobFlowRole)
        jobFlowRole = jobFlowRoleDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let autoScalingRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingRole)
        autoScalingRole = autoScalingRoleDecoded
        let scaleDownBehaviorDecoded = try containerValues.decodeIfPresent(ScaleDownBehavior.self, forKey: .scaleDownBehavior)
        scaleDownBehavior = scaleDownBehaviorDecoded
    }
}
