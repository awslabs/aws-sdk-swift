// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ComputeLimits: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maximumCapacityUnits = "MaximumCapacityUnits"
        case maximumCoreCapacityUnits = "MaximumCoreCapacityUnits"
        case maximumOnDemandCapacityUnits = "MaximumOnDemandCapacityUnits"
        case minimumCapacityUnits = "MinimumCapacityUnits"
        case unitType = "UnitType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maximumCapacityUnits = maximumCapacityUnits {
            try encodeContainer.encode(maximumCapacityUnits, forKey: .maximumCapacityUnits)
        }
        if let maximumCoreCapacityUnits = maximumCoreCapacityUnits {
            try encodeContainer.encode(maximumCoreCapacityUnits, forKey: .maximumCoreCapacityUnits)
        }
        if let maximumOnDemandCapacityUnits = maximumOnDemandCapacityUnits {
            try encodeContainer.encode(maximumOnDemandCapacityUnits, forKey: .maximumOnDemandCapacityUnits)
        }
        if let minimumCapacityUnits = minimumCapacityUnits {
            try encodeContainer.encode(minimumCapacityUnits, forKey: .minimumCapacityUnits)
        }
        if let unitType = unitType {
            try encodeContainer.encode(unitType.rawValue, forKey: .unitType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let unitTypeDecoded = try containerValues.decodeIfPresent(ComputeLimitsUnitType.self, forKey: .unitType)
        unitType = unitTypeDecoded
        let minimumCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minimumCapacityUnits)
        minimumCapacityUnits = minimumCapacityUnitsDecoded
        let maximumCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumCapacityUnits)
        maximumCapacityUnits = maximumCapacityUnitsDecoded
        let maximumOnDemandCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumOnDemandCapacityUnits)
        maximumOnDemandCapacityUnits = maximumOnDemandCapacityUnitsDecoded
        let maximumCoreCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumCoreCapacityUnits)
        maximumCoreCapacityUnits = maximumCoreCapacityUnitsDecoded
    }
}
