// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstanceResizePolicy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instanceTerminationTimeout = "InstanceTerminationTimeout"
        case instancesToProtect = "InstancesToProtect"
        case instancesToTerminate = "InstancesToTerminate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceTerminationTimeout = instanceTerminationTimeout {
            try encodeContainer.encode(instanceTerminationTimeout, forKey: .instanceTerminationTimeout)
        }
        if let instancesToProtect = instancesToProtect {
            var instancesToProtectContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instancesToProtect)
            for ec2instanceidslist0 in instancesToProtect {
                try instancesToProtectContainer.encode(ec2instanceidslist0)
            }
        }
        if let instancesToTerminate = instancesToTerminate {
            var instancesToTerminateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instancesToTerminate)
            for ec2instanceidslist0 in instancesToTerminate {
                try instancesToTerminateContainer.encode(ec2instanceidslist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instancesToTerminateContainer = try containerValues.decodeIfPresent([String].self, forKey: .instancesToTerminate)
        var instancesToTerminateDecoded0:[String]? = nil
        if let instancesToTerminateContainer = instancesToTerminateContainer {
            instancesToTerminateDecoded0 = [String]()
            for string0 in instancesToTerminateContainer {
                instancesToTerminateDecoded0?.append(string0)
            }
        }
        instancesToTerminate = instancesToTerminateDecoded0
        let instancesToProtectContainer = try containerValues.decodeIfPresent([String].self, forKey: .instancesToProtect)
        var instancesToProtectDecoded0:[String]? = nil
        if let instancesToProtectContainer = instancesToProtectContainer {
            instancesToProtectDecoded0 = [String]()
            for string0 in instancesToProtectContainer {
                instancesToProtectDecoded0?.append(string0)
            }
        }
        instancesToProtect = instancesToProtectDecoded0
        let instanceTerminationTimeoutDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .instanceTerminationTimeout)
        instanceTerminationTimeout = instanceTerminationTimeoutDecoded
    }
}
