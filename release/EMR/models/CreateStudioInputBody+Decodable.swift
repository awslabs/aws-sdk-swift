// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateStudioInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let authMode: AuthMode?
    public let vpcId: String?
    public let subnetIds: [String]?
    public let serviceRole: String?
    public let userRole: String?
    public let workspaceSecurityGroupId: String?
    public let engineSecurityGroupId: String?
    public let defaultS3Location: String?
    public let tags: [Tag]?
}

extension CreateStudioInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case authMode = "AuthMode"
        case defaultS3Location = "DefaultS3Location"
        case description = "Description"
        case engineSecurityGroupId = "EngineSecurityGroupId"
        case name = "Name"
        case serviceRole = "ServiceRole"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
        case userRole = "UserRole"
        case vpcId = "VpcId"
        case workspaceSecurityGroupId = "WorkspaceSecurityGroupId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let authModeDecoded = try containerValues.decodeIfPresent(AuthMode.self, forKey: .authMode)
        authMode = authModeDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [String]()
            for string0 in subnetIdsContainer {
                subnetIdsDecoded0?.append(string0)
            }
        }
        subnetIds = subnetIdsDecoded0
        let serviceRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let userRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userRole)
        userRole = userRoleDecoded
        let workspaceSecurityGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workspaceSecurityGroupId)
        workspaceSecurityGroupId = workspaceSecurityGroupIdDecoded
        let engineSecurityGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineSecurityGroupId)
        engineSecurityGroupId = engineSecurityGroupIdDecoded
        let defaultS3LocationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultS3Location)
        defaultS3Location = defaultS3LocationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
