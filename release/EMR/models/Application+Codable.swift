// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Application: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case additionalInfo = "AdditionalInfo"
        case args = "Args"
        case name = "Name"
        case version = "Version"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalInfo = additionalInfo {
            var additionalInfoContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .additionalInfo)
            for (dictKey0, stringmap0) in additionalInfo {
                try additionalInfoContainer.encode(stringmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let args = args {
            var argsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .args)
            for stringlist0 in args {
                try argsContainer.encode(stringlist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let argsContainer = try containerValues.decodeIfPresent([String].self, forKey: .args)
        var argsDecoded0:[String]? = nil
        if let argsContainer = argsContainer {
            argsDecoded0 = [String]()
            for string0 in argsContainer {
                argsDecoded0?.append(string0)
            }
        }
        args = argsDecoded0
        let additionalInfoContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .additionalInfo)
        var additionalInfoDecoded0: [String:String]? = nil
        if let additionalInfoContainer = additionalInfoContainer {
            additionalInfoDecoded0 = [String:String]()
            for (key0, string0) in additionalInfoContainer {
                additionalInfoDecoded0?[key0] = string0
            }
        }
        additionalInfo = additionalInfoDecoded0
    }
}
