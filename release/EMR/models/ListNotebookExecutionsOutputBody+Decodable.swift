// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListNotebookExecutionsOutputBody: Equatable {
    public let notebookExecutions: [NotebookExecutionSummary]?
    public let marker: String?
}

extension ListNotebookExecutionsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case notebookExecutions = "NotebookExecutions"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookExecutionsContainer = try containerValues.decodeIfPresent([NotebookExecutionSummary].self, forKey: .notebookExecutions)
        var notebookExecutionsDecoded0:[NotebookExecutionSummary]? = nil
        if let notebookExecutionsContainer = notebookExecutionsContainer {
            notebookExecutionsDecoded0 = [NotebookExecutionSummary]()
            for structure0 in notebookExecutionsContainer {
                notebookExecutionsDecoded0?.append(structure0)
            }
        }
        notebookExecutions = notebookExecutionsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}
