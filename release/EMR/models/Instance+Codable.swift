// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Instance: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ebsVolumes = "EbsVolumes"
        case ec2InstanceId = "Ec2InstanceId"
        case id = "Id"
        case instanceFleetId = "InstanceFleetId"
        case instanceGroupId = "InstanceGroupId"
        case instanceType = "InstanceType"
        case market = "Market"
        case privateDnsName = "PrivateDnsName"
        case privateIpAddress = "PrivateIpAddress"
        case publicDnsName = "PublicDnsName"
        case publicIpAddress = "PublicIpAddress"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ebsVolumes = ebsVolumes {
            var ebsVolumesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ebsVolumes)
            for ebsvolumelist0 in ebsVolumes {
                try ebsVolumesContainer.encode(ebsvolumelist0)
            }
        }
        if let ec2InstanceId = ec2InstanceId {
            try encodeContainer.encode(ec2InstanceId, forKey: .ec2InstanceId)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let instanceFleetId = instanceFleetId {
            try encodeContainer.encode(instanceFleetId, forKey: .instanceFleetId)
        }
        if let instanceGroupId = instanceGroupId {
            try encodeContainer.encode(instanceGroupId, forKey: .instanceGroupId)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let market = market {
            try encodeContainer.encode(market.rawValue, forKey: .market)
        }
        if let privateDnsName = privateDnsName {
            try encodeContainer.encode(privateDnsName, forKey: .privateDnsName)
        }
        if let privateIpAddress = privateIpAddress {
            try encodeContainer.encode(privateIpAddress, forKey: .privateIpAddress)
        }
        if let publicDnsName = publicDnsName {
            try encodeContainer.encode(publicDnsName, forKey: .publicDnsName)
        }
        if let publicIpAddress = publicIpAddress {
            try encodeContainer.encode(publicIpAddress, forKey: .publicIpAddress)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let ec2InstanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ec2InstanceId)
        ec2InstanceId = ec2InstanceIdDecoded
        let publicDnsNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .publicDnsName)
        publicDnsName = publicDnsNameDecoded
        let publicIpAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .publicIpAddress)
        publicIpAddress = publicIpAddressDecoded
        let privateDnsNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .privateDnsName)
        privateDnsName = privateDnsNameDecoded
        let privateIpAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .privateIpAddress)
        privateIpAddress = privateIpAddressDecoded
        let statusDecoded = try containerValues.decodeIfPresent(InstanceStatus.self, forKey: .status)
        status = statusDecoded
        let instanceGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceGroupId)
        instanceGroupId = instanceGroupIdDecoded
        let instanceFleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceFleetId)
        instanceFleetId = instanceFleetIdDecoded
        let marketDecoded = try containerValues.decodeIfPresent(MarketType.self, forKey: .market)
        market = marketDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let ebsVolumesContainer = try containerValues.decodeIfPresent([EbsVolume].self, forKey: .ebsVolumes)
        var ebsVolumesDecoded0:[EbsVolume]? = nil
        if let ebsVolumesContainer = ebsVolumesContainer {
            ebsVolumesDecoded0 = [EbsVolume]()
            for structure0 in ebsVolumesContainer {
                ebsVolumesDecoded0?.append(structure0)
            }
        }
        ebsVolumes = ebsVolumesDecoded0
    }
}
