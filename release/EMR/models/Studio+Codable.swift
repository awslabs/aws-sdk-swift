// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Studio: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case authMode = "AuthMode"
        case creationTime = "CreationTime"
        case defaultS3Location = "DefaultS3Location"
        case description = "Description"
        case engineSecurityGroupId = "EngineSecurityGroupId"
        case name = "Name"
        case serviceRole = "ServiceRole"
        case studioArn = "StudioArn"
        case studioId = "StudioId"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
        case url = "Url"
        case userRole = "UserRole"
        case vpcId = "VpcId"
        case workspaceSecurityGroupId = "WorkspaceSecurityGroupId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authMode = authMode {
            try encodeContainer.encode(authMode.rawValue, forKey: .authMode)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let defaultS3Location = defaultS3Location {
            try encodeContainer.encode(defaultS3Location, forKey: .defaultS3Location)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let engineSecurityGroupId = engineSecurityGroupId {
            try encodeContainer.encode(engineSecurityGroupId, forKey: .engineSecurityGroupId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let studioArn = studioArn {
            try encodeContainer.encode(studioArn, forKey: .studioArn)
        }
        if let studioId = studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetidlist0 in subnetIds {
                try subnetIdsContainer.encode(subnetidlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
        if let userRole = userRole {
            try encodeContainer.encode(userRole, forKey: .userRole)
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
        if let workspaceSecurityGroupId = workspaceSecurityGroupId {
            try encodeContainer.encode(workspaceSecurityGroupId, forKey: .workspaceSecurityGroupId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .studioId)
        studioId = studioIdDecoded
        let studioArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .studioArn)
        studioArn = studioArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let authModeDecoded = try containerValues.decodeIfPresent(AuthMode.self, forKey: .authMode)
        authMode = authModeDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [String]()
            for string0 in subnetIdsContainer {
                subnetIdsDecoded0?.append(string0)
            }
        }
        subnetIds = subnetIdsDecoded0
        let serviceRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let userRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userRole)
        userRole = userRoleDecoded
        let workspaceSecurityGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workspaceSecurityGroupId)
        workspaceSecurityGroupId = workspaceSecurityGroupIdDecoded
        let engineSecurityGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineSecurityGroupId)
        engineSecurityGroupId = engineSecurityGroupIdDecoded
        let urlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .url)
        url = urlDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let defaultS3LocationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultS3Location)
        defaultS3Location = defaultS3LocationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
