// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Provides information about the EC2 instances in a cluster grouped by category. For
///          example, key name, subnet ID, IAM instance profile, and so on.</p>
public struct Ec2InstanceAttributes: Equatable {
    /// <p>A list of additional Amazon EC2 security group IDs for the master node.</p>
    public let additionalMasterSecurityGroups: [String]?
    /// <p>A list of additional Amazon EC2 security group IDs for the core and task nodes.</p>
    public let additionalSlaveSecurityGroups: [String]?
    /// <p>The Availability Zone in which the cluster will run. </p>
    public let ec2AvailabilityZone: String?
    /// <p>The name of the Amazon EC2 key pair to use when connecting with SSH into the master node
    ///          as a user named "hadoop".</p>
    public let ec2KeyName: String?
    /// <p>Set this parameter to the identifier of the Amazon VPC subnet where you want the cluster
    ///          to launch. If you do not specify this value, and your account supports EC2-Classic, the
    ///          cluster launches in EC2-Classic.</p>
    public let ec2SubnetId: String?
    /// <p>The identifier of the Amazon EC2 security group for the master node.</p>
    public let emrManagedMasterSecurityGroup: String?
    /// <p>The identifier of the Amazon EC2 security group for the core and task nodes.</p>
    public let emrManagedSlaveSecurityGroup: String?
    /// <p>The IAM role that was specified when the cluster was launched. The EC2 instances of the
    ///          cluster assume this role.</p>
    public let iamInstanceProfile: String?
    /// <p>Applies to clusters configured with the instance fleets option. Specifies one or more
    ///          Availability Zones in which to launch EC2 cluster instances when the EC2-Classic network
    ///          configuration is supported. Amazon EMR chooses the Availability Zone with the best fit from
    ///          among the list of <code>RequestedEc2AvailabilityZones</code>, and then launches all cluster
    ///          instances within that Availability Zone. If you do not specify this value, Amazon EMR
    ///          chooses the Availability Zone for you. <code>RequestedEc2SubnetIDs</code> and
    ///             <code>RequestedEc2AvailabilityZones</code> cannot be specified together.</p>
    public let requestedEc2AvailabilityZones: [String]?
    /// <p>Applies to clusters configured with the instance fleets option. Specifies the unique
    ///          identifier of one or more Amazon EC2 subnets in which to launch EC2 cluster instances.
    ///          Subnets must exist within the same VPC. Amazon EMR chooses the EC2 subnet with the best fit
    ///          from among the list of <code>RequestedEc2SubnetIds</code>, and then launches all cluster
    ///          instances within that Subnet. If this value is not specified, and the account and Region
    ///          support EC2-Classic networks, the cluster launches instances in the EC2-Classic network and
    ///          uses <code>RequestedEc2AvailabilityZones</code> instead of this setting. If EC2-Classic is
    ///          not supported, and no Subnet is specified, Amazon EMR chooses the subnet for you.
    ///             <code>RequestedEc2SubnetIDs</code> and <code>RequestedEc2AvailabilityZones</code> cannot
    ///          be specified together.</p>
    public let requestedEc2SubnetIds: [String]?
    /// <p>The identifier of the Amazon EC2 security group for the Amazon EMR service to access
    ///          clusters in VPC private subnets.</p>
    public let serviceAccessSecurityGroup: String?

    public init (
        additionalMasterSecurityGroups: [String]? = nil,
        additionalSlaveSecurityGroups: [String]? = nil,
        ec2AvailabilityZone: String? = nil,
        ec2KeyName: String? = nil,
        ec2SubnetId: String? = nil,
        emrManagedMasterSecurityGroup: String? = nil,
        emrManagedSlaveSecurityGroup: String? = nil,
        iamInstanceProfile: String? = nil,
        requestedEc2AvailabilityZones: [String]? = nil,
        requestedEc2SubnetIds: [String]? = nil,
        serviceAccessSecurityGroup: String? = nil
    )
    {
        self.additionalMasterSecurityGroups = additionalMasterSecurityGroups
        self.additionalSlaveSecurityGroups = additionalSlaveSecurityGroups
        self.ec2AvailabilityZone = ec2AvailabilityZone
        self.ec2KeyName = ec2KeyName
        self.ec2SubnetId = ec2SubnetId
        self.emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroup
        self.emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroup
        self.iamInstanceProfile = iamInstanceProfile
        self.requestedEc2AvailabilityZones = requestedEc2AvailabilityZones
        self.requestedEc2SubnetIds = requestedEc2SubnetIds
        self.serviceAccessSecurityGroup = serviceAccessSecurityGroup
    }
}
