// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Ec2InstanceAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case additionalMasterSecurityGroups = "AdditionalMasterSecurityGroups"
        case additionalSlaveSecurityGroups = "AdditionalSlaveSecurityGroups"
        case ec2AvailabilityZone = "Ec2AvailabilityZone"
        case ec2KeyName = "Ec2KeyName"
        case ec2SubnetId = "Ec2SubnetId"
        case emrManagedMasterSecurityGroup = "EmrManagedMasterSecurityGroup"
        case emrManagedSlaveSecurityGroup = "EmrManagedSlaveSecurityGroup"
        case iamInstanceProfile = "IamInstanceProfile"
        case requestedEc2AvailabilityZones = "RequestedEc2AvailabilityZones"
        case requestedEc2SubnetIds = "RequestedEc2SubnetIds"
        case serviceAccessSecurityGroup = "ServiceAccessSecurityGroup"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalMasterSecurityGroups = additionalMasterSecurityGroups {
            var additionalMasterSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalMasterSecurityGroups)
            for stringlist0 in additionalMasterSecurityGroups {
                try additionalMasterSecurityGroupsContainer.encode(stringlist0)
            }
        }
        if let additionalSlaveSecurityGroups = additionalSlaveSecurityGroups {
            var additionalSlaveSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalSlaveSecurityGroups)
            for stringlist0 in additionalSlaveSecurityGroups {
                try additionalSlaveSecurityGroupsContainer.encode(stringlist0)
            }
        }
        if let ec2AvailabilityZone = ec2AvailabilityZone {
            try encodeContainer.encode(ec2AvailabilityZone, forKey: .ec2AvailabilityZone)
        }
        if let ec2KeyName = ec2KeyName {
            try encodeContainer.encode(ec2KeyName, forKey: .ec2KeyName)
        }
        if let ec2SubnetId = ec2SubnetId {
            try encodeContainer.encode(ec2SubnetId, forKey: .ec2SubnetId)
        }
        if let emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroup {
            try encodeContainer.encode(emrManagedMasterSecurityGroup, forKey: .emrManagedMasterSecurityGroup)
        }
        if let emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroup {
            try encodeContainer.encode(emrManagedSlaveSecurityGroup, forKey: .emrManagedSlaveSecurityGroup)
        }
        if let iamInstanceProfile = iamInstanceProfile {
            try encodeContainer.encode(iamInstanceProfile, forKey: .iamInstanceProfile)
        }
        if let requestedEc2AvailabilityZones = requestedEc2AvailabilityZones {
            var requestedEc2AvailabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .requestedEc2AvailabilityZones)
            for xmlstringmaxlen256list0 in requestedEc2AvailabilityZones {
                try requestedEc2AvailabilityZonesContainer.encode(xmlstringmaxlen256list0)
            }
        }
        if let requestedEc2SubnetIds = requestedEc2SubnetIds {
            var requestedEc2SubnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .requestedEc2SubnetIds)
            for xmlstringmaxlen256list0 in requestedEc2SubnetIds {
                try requestedEc2SubnetIdsContainer.encode(xmlstringmaxlen256list0)
            }
        }
        if let serviceAccessSecurityGroup = serviceAccessSecurityGroup {
            try encodeContainer.encode(serviceAccessSecurityGroup, forKey: .serviceAccessSecurityGroup)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ec2KeyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ec2KeyName)
        ec2KeyName = ec2KeyNameDecoded
        let ec2SubnetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ec2SubnetId)
        ec2SubnetId = ec2SubnetIdDecoded
        let requestedEc2SubnetIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .requestedEc2SubnetIds)
        var requestedEc2SubnetIdsDecoded0:[String]? = nil
        if let requestedEc2SubnetIdsContainer = requestedEc2SubnetIdsContainer {
            requestedEc2SubnetIdsDecoded0 = [String]()
            for string0 in requestedEc2SubnetIdsContainer {
                requestedEc2SubnetIdsDecoded0?.append(string0)
            }
        }
        requestedEc2SubnetIds = requestedEc2SubnetIdsDecoded0
        let ec2AvailabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ec2AvailabilityZone)
        ec2AvailabilityZone = ec2AvailabilityZoneDecoded
        let requestedEc2AvailabilityZonesContainer = try containerValues.decodeIfPresent([String].self, forKey: .requestedEc2AvailabilityZones)
        var requestedEc2AvailabilityZonesDecoded0:[String]? = nil
        if let requestedEc2AvailabilityZonesContainer = requestedEc2AvailabilityZonesContainer {
            requestedEc2AvailabilityZonesDecoded0 = [String]()
            for string0 in requestedEc2AvailabilityZonesContainer {
                requestedEc2AvailabilityZonesDecoded0?.append(string0)
            }
        }
        requestedEc2AvailabilityZones = requestedEc2AvailabilityZonesDecoded0
        let iamInstanceProfileDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iamInstanceProfile)
        iamInstanceProfile = iamInstanceProfileDecoded
        let emrManagedMasterSecurityGroupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .emrManagedMasterSecurityGroup)
        emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroupDecoded
        let emrManagedSlaveSecurityGroupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .emrManagedSlaveSecurityGroup)
        emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroupDecoded
        let serviceAccessSecurityGroupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceAccessSecurityGroup)
        serviceAccessSecurityGroup = serviceAccessSecurityGroupDecoded
        let additionalMasterSecurityGroupsContainer = try containerValues.decodeIfPresent([String].self, forKey: .additionalMasterSecurityGroups)
        var additionalMasterSecurityGroupsDecoded0:[String]? = nil
        if let additionalMasterSecurityGroupsContainer = additionalMasterSecurityGroupsContainer {
            additionalMasterSecurityGroupsDecoded0 = [String]()
            for string0 in additionalMasterSecurityGroupsContainer {
                additionalMasterSecurityGroupsDecoded0?.append(string0)
            }
        }
        additionalMasterSecurityGroups = additionalMasterSecurityGroupsDecoded0
        let additionalSlaveSecurityGroupsContainer = try containerValues.decodeIfPresent([String].self, forKey: .additionalSlaveSecurityGroups)
        var additionalSlaveSecurityGroupsDecoded0:[String]? = nil
        if let additionalSlaveSecurityGroupsContainer = additionalSlaveSecurityGroupsContainer {
            additionalSlaveSecurityGroupsDecoded0 = [String]()
            for string0 in additionalSlaveSecurityGroupsContainer {
                additionalSlaveSecurityGroupsDecoded0?.append(string0)
            }
        }
        additionalSlaveSecurityGroups = additionalSlaveSecurityGroupsDecoded0
    }
}
