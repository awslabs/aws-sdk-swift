// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstanceFleetConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instanceFleetType = "InstanceFleetType"
        case instanceTypeConfigs = "InstanceTypeConfigs"
        case launchSpecifications = "LaunchSpecifications"
        case name = "Name"
        case targetOnDemandCapacity = "TargetOnDemandCapacity"
        case targetSpotCapacity = "TargetSpotCapacity"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceFleetType = instanceFleetType {
            try encodeContainer.encode(instanceFleetType.rawValue, forKey: .instanceFleetType)
        }
        if let instanceTypeConfigs = instanceTypeConfigs {
            var instanceTypeConfigsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceTypeConfigs)
            for instancetypeconfiglist0 in instanceTypeConfigs {
                try instanceTypeConfigsContainer.encode(instancetypeconfiglist0)
            }
        }
        if let launchSpecifications = launchSpecifications {
            try encodeContainer.encode(launchSpecifications, forKey: .launchSpecifications)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let targetOnDemandCapacity = targetOnDemandCapacity {
            try encodeContainer.encode(targetOnDemandCapacity, forKey: .targetOnDemandCapacity)
        }
        if let targetSpotCapacity = targetSpotCapacity {
            try encodeContainer.encode(targetSpotCapacity, forKey: .targetSpotCapacity)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let instanceFleetTypeDecoded = try containerValues.decodeIfPresent(InstanceFleetType.self, forKey: .instanceFleetType)
        instanceFleetType = instanceFleetTypeDecoded
        let targetOnDemandCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .targetOnDemandCapacity)
        targetOnDemandCapacity = targetOnDemandCapacityDecoded
        let targetSpotCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .targetSpotCapacity)
        targetSpotCapacity = targetSpotCapacityDecoded
        let instanceTypeConfigsContainer = try containerValues.decodeIfPresent([InstanceTypeConfig].self, forKey: .instanceTypeConfigs)
        var instanceTypeConfigsDecoded0:[InstanceTypeConfig]? = nil
        if let instanceTypeConfigsContainer = instanceTypeConfigsContainer {
            instanceTypeConfigsDecoded0 = [InstanceTypeConfig]()
            for structure0 in instanceTypeConfigsContainer {
                instanceTypeConfigsDecoded0?.append(structure0)
            }
        }
        instanceTypeConfigs = instanceTypeConfigsDecoded0
        let launchSpecificationsDecoded = try containerValues.decodeIfPresent(InstanceFleetProvisioningSpecifications.self, forKey: .launchSpecifications)
        launchSpecifications = launchSpecificationsDecoded
    }
}
