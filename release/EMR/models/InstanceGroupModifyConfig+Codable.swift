// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstanceGroupModifyConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case configurations = "Configurations"
        case eC2InstanceIdsToTerminate = "EC2InstanceIdsToTerminate"
        case instanceCount = "InstanceCount"
        case instanceGroupId = "InstanceGroupId"
        case shrinkPolicy = "ShrinkPolicy"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configurationlist0 in configurations {
                try configurationsContainer.encode(configurationlist0)
            }
        }
        if let eC2InstanceIdsToTerminate = eC2InstanceIdsToTerminate {
            var eC2InstanceIdsToTerminateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eC2InstanceIdsToTerminate)
            for ec2instanceidstoterminatelist0 in eC2InstanceIdsToTerminate {
                try eC2InstanceIdsToTerminateContainer.encode(ec2instanceidstoterminatelist0)
            }
        }
        if let instanceCount = instanceCount {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let instanceGroupId = instanceGroupId {
            try encodeContainer.encode(instanceGroupId, forKey: .instanceGroupId)
        }
        if let shrinkPolicy = shrinkPolicy {
            try encodeContainer.encode(shrinkPolicy, forKey: .shrinkPolicy)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceGroupId)
        instanceGroupId = instanceGroupIdDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let eC2InstanceIdsToTerminateContainer = try containerValues.decodeIfPresent([String].self, forKey: .eC2InstanceIdsToTerminate)
        var eC2InstanceIdsToTerminateDecoded0:[String]? = nil
        if let eC2InstanceIdsToTerminateContainer = eC2InstanceIdsToTerminateContainer {
            eC2InstanceIdsToTerminateDecoded0 = [String]()
            for string0 in eC2InstanceIdsToTerminateContainer {
                eC2InstanceIdsToTerminateDecoded0?.append(string0)
            }
        }
        eC2InstanceIdsToTerminate = eC2InstanceIdsToTerminateDecoded0
        let shrinkPolicyDecoded = try containerValues.decodeIfPresent(ShrinkPolicy.self, forKey: .shrinkPolicy)
        shrinkPolicy = shrinkPolicyDecoded
        let configurationsContainer = try containerValues.decodeIfPresent([Configuration].self, forKey: .configurations)
        var configurationsDecoded0:[Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [Configuration]()
            for structure0 in configurationsContainer {
                configurationsDecoded0?.append(structure0)
            }
        }
        configurations = configurationsDecoded0
    }
}
