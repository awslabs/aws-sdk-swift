// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstanceFleet: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id = "Id"
        case instanceFleetType = "InstanceFleetType"
        case instanceTypeSpecifications = "InstanceTypeSpecifications"
        case launchSpecifications = "LaunchSpecifications"
        case name = "Name"
        case provisionedOnDemandCapacity = "ProvisionedOnDemandCapacity"
        case provisionedSpotCapacity = "ProvisionedSpotCapacity"
        case status = "Status"
        case targetOnDemandCapacity = "TargetOnDemandCapacity"
        case targetSpotCapacity = "TargetSpotCapacity"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let instanceFleetType = instanceFleetType {
            try encodeContainer.encode(instanceFleetType.rawValue, forKey: .instanceFleetType)
        }
        if let instanceTypeSpecifications = instanceTypeSpecifications {
            var instanceTypeSpecificationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceTypeSpecifications)
            for instancetypespecificationlist0 in instanceTypeSpecifications {
                try instanceTypeSpecificationsContainer.encode(instancetypespecificationlist0)
            }
        }
        if let launchSpecifications = launchSpecifications {
            try encodeContainer.encode(launchSpecifications, forKey: .launchSpecifications)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let provisionedOnDemandCapacity = provisionedOnDemandCapacity {
            try encodeContainer.encode(provisionedOnDemandCapacity, forKey: .provisionedOnDemandCapacity)
        }
        if let provisionedSpotCapacity = provisionedSpotCapacity {
            try encodeContainer.encode(provisionedSpotCapacity, forKey: .provisionedSpotCapacity)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let targetOnDemandCapacity = targetOnDemandCapacity {
            try encodeContainer.encode(targetOnDemandCapacity, forKey: .targetOnDemandCapacity)
        }
        if let targetSpotCapacity = targetSpotCapacity {
            try encodeContainer.encode(targetSpotCapacity, forKey: .targetSpotCapacity)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(InstanceFleetStatus.self, forKey: .status)
        status = statusDecoded
        let instanceFleetTypeDecoded = try containerValues.decodeIfPresent(InstanceFleetType.self, forKey: .instanceFleetType)
        instanceFleetType = instanceFleetTypeDecoded
        let targetOnDemandCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .targetOnDemandCapacity)
        targetOnDemandCapacity = targetOnDemandCapacityDecoded
        let targetSpotCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .targetSpotCapacity)
        targetSpotCapacity = targetSpotCapacityDecoded
        let provisionedOnDemandCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .provisionedOnDemandCapacity)
        provisionedOnDemandCapacity = provisionedOnDemandCapacityDecoded
        let provisionedSpotCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .provisionedSpotCapacity)
        provisionedSpotCapacity = provisionedSpotCapacityDecoded
        let instanceTypeSpecificationsContainer = try containerValues.decodeIfPresent([InstanceTypeSpecification].self, forKey: .instanceTypeSpecifications)
        var instanceTypeSpecificationsDecoded0:[InstanceTypeSpecification]? = nil
        if let instanceTypeSpecificationsContainer = instanceTypeSpecificationsContainer {
            instanceTypeSpecificationsDecoded0 = [InstanceTypeSpecification]()
            for structure0 in instanceTypeSpecificationsContainer {
                instanceTypeSpecificationsDecoded0?.append(structure0)
            }
        }
        instanceTypeSpecifications = instanceTypeSpecificationsDecoded0
        let launchSpecificationsDecoded = try containerValues.decodeIfPresent(InstanceFleetProvisioningSpecifications.self, forKey: .launchSpecifications)
        launchSpecifications = launchSpecificationsDecoded
    }
}
