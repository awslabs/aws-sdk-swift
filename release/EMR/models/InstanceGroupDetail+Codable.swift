// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstanceGroupDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bidPrice = "BidPrice"
        case creationDateTime = "CreationDateTime"
        case endDateTime = "EndDateTime"
        case instanceGroupId = "InstanceGroupId"
        case instanceRequestCount = "InstanceRequestCount"
        case instanceRole = "InstanceRole"
        case instanceRunningCount = "InstanceRunningCount"
        case instanceType = "InstanceType"
        case lastStateChangeReason = "LastStateChangeReason"
        case market = "Market"
        case name = "Name"
        case readyDateTime = "ReadyDateTime"
        case startDateTime = "StartDateTime"
        case state = "State"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bidPrice = bidPrice {
            try encodeContainer.encode(bidPrice, forKey: .bidPrice)
        }
        if let creationDateTime = creationDateTime {
            try encodeContainer.encode(creationDateTime.timeIntervalSince1970, forKey: .creationDateTime)
        }
        if let endDateTime = endDateTime {
            try encodeContainer.encode(endDateTime.timeIntervalSince1970, forKey: .endDateTime)
        }
        if let instanceGroupId = instanceGroupId {
            try encodeContainer.encode(instanceGroupId, forKey: .instanceGroupId)
        }
        if let instanceRequestCount = instanceRequestCount {
            try encodeContainer.encode(instanceRequestCount, forKey: .instanceRequestCount)
        }
        if let instanceRole = instanceRole {
            try encodeContainer.encode(instanceRole.rawValue, forKey: .instanceRole)
        }
        if let instanceRunningCount = instanceRunningCount {
            try encodeContainer.encode(instanceRunningCount, forKey: .instanceRunningCount)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let lastStateChangeReason = lastStateChangeReason {
            try encodeContainer.encode(lastStateChangeReason, forKey: .lastStateChangeReason)
        }
        if let market = market {
            try encodeContainer.encode(market.rawValue, forKey: .market)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let readyDateTime = readyDateTime {
            try encodeContainer.encode(readyDateTime.timeIntervalSince1970, forKey: .readyDateTime)
        }
        if let startDateTime = startDateTime {
            try encodeContainer.encode(startDateTime.timeIntervalSince1970, forKey: .startDateTime)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceGroupId)
        instanceGroupId = instanceGroupIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let marketDecoded = try containerValues.decodeIfPresent(MarketType.self, forKey: .market)
        market = marketDecoded
        let instanceRoleDecoded = try containerValues.decodeIfPresent(InstanceRoleType.self, forKey: .instanceRole)
        instanceRole = instanceRoleDecoded
        let bidPriceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bidPrice)
        bidPrice = bidPriceDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let instanceRequestCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .instanceRequestCount)
        instanceRequestCount = instanceRequestCountDecoded
        let instanceRunningCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .instanceRunningCount)
        instanceRunningCount = instanceRunningCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(InstanceGroupState.self, forKey: .state)
        state = stateDecoded
        let lastStateChangeReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastStateChangeReason)
        lastStateChangeReason = lastStateChangeReasonDecoded
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let startDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startDateTime)
        startDateTime = startDateTimeDecoded
        let readyDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .readyDateTime)
        readyDateTime = readyDateTimeDecoded
        let endDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endDateTime)
        endDateTime = endDateTimeDecoded
    }
}
