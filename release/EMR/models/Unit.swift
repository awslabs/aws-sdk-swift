// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum Unit {
    case bits
    case bitsPerSecond
    case bytes
    case bytesPerSecond
    case count
    case countPerSecond
    case gigaBits
    case gigaBitsPerSecond
    case gigaBytes
    case gigaBytesPerSecond
    case kiloBits
    case kiloBitsPerSecond
    case kiloBytes
    case kiloBytesPerSecond
    case megaBits
    case megaBitsPerSecond
    case megaBytes
    case megaBytesPerSecond
    case microSeconds
    case milliSeconds
    case `none`
    case percent
    case seconds
    case teraBits
    case teraBitsPerSecond
    case teraBytes
    case teraBytesPerSecond
    case sdkUnknown(String)
}

extension Unit : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Unit] {
        return [
            .bits,
            .bitsPerSecond,
            .bytes,
            .bytesPerSecond,
            .count,
            .countPerSecond,
            .gigaBits,
            .gigaBitsPerSecond,
            .gigaBytes,
            .gigaBytesPerSecond,
            .kiloBits,
            .kiloBitsPerSecond,
            .kiloBytes,
            .kiloBytesPerSecond,
            .megaBits,
            .megaBitsPerSecond,
            .megaBytes,
            .megaBytesPerSecond,
            .microSeconds,
            .milliSeconds,
            .none,
            .percent,
            .seconds,
            .teraBits,
            .teraBitsPerSecond,
            .teraBytes,
            .teraBytesPerSecond,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .bits: return "BITS"
        case .bitsPerSecond: return "BITS_PER_SECOND"
        case .bytes: return "BYTES"
        case .bytesPerSecond: return "BYTES_PER_SECOND"
        case .count: return "COUNT"
        case .countPerSecond: return "COUNT_PER_SECOND"
        case .gigaBits: return "GIGA_BITS"
        case .gigaBitsPerSecond: return "GIGA_BITS_PER_SECOND"
        case .gigaBytes: return "GIGA_BYTES"
        case .gigaBytesPerSecond: return "GIGA_BYTES_PER_SECOND"
        case .kiloBits: return "KILO_BITS"
        case .kiloBitsPerSecond: return "KILO_BITS_PER_SECOND"
        case .kiloBytes: return "KILO_BYTES"
        case .kiloBytesPerSecond: return "KILO_BYTES_PER_SECOND"
        case .megaBits: return "MEGA_BITS"
        case .megaBitsPerSecond: return "MEGA_BITS_PER_SECOND"
        case .megaBytes: return "MEGA_BYTES"
        case .megaBytesPerSecond: return "MEGA_BYTES_PER_SECOND"
        case .microSeconds: return "MICRO_SECONDS"
        case .milliSeconds: return "MILLI_SECONDS"
        case .none: return "NONE"
        case .percent: return "PERCENT"
        case .seconds: return "SECONDS"
        case .teraBits: return "TERA_BITS"
        case .teraBitsPerSecond: return "TERA_BITS_PER_SECOND"
        case .teraBytes: return "TERA_BYTES"
        case .teraBytesPerSecond: return "TERA_BYTES_PER_SECOND"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Unit(rawValue: rawValue) ?? Unit.sdkUnknown(rawValue)
    }
}
