// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RunJobFlowInputBody: Equatable {
    public let name: String?
    public let logUri: String?
    public let logEncryptionKmsKeyId: String?
    public let additionalInfo: String?
    public let amiVersion: String?
    public let releaseLabel: String?
    public let instances: JobFlowInstancesConfig?
    public let steps: [StepConfig]?
    public let bootstrapActions: [BootstrapActionConfig]?
    public let supportedProducts: [String]?
    public let newSupportedProducts: [SupportedProductConfig]?
    public let applications: [Application]?
    public let configurations: [Configuration]?
    public let visibleToAllUsers: Bool
    public let jobFlowRole: String?
    public let serviceRole: String?
    public let tags: [Tag]?
    public let securityConfiguration: String?
    public let autoScalingRole: String?
    public let scaleDownBehavior: ScaleDownBehavior?
    public let customAmiId: String?
    public let ebsRootVolumeSize: Int?
    public let repoUpgradeOnBoot: RepoUpgradeOnBoot?
    public let kerberosAttributes: KerberosAttributes?
    public let stepConcurrencyLevel: Int?
    public let managedScalingPolicy: ManagedScalingPolicy?
    public let placementGroupConfigs: [PlacementGroupConfig]?
}

extension RunJobFlowInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case additionalInfo = "AdditionalInfo"
        case amiVersion = "AmiVersion"
        case applications = "Applications"
        case autoScalingRole = "AutoScalingRole"
        case bootstrapActions = "BootstrapActions"
        case configurations = "Configurations"
        case customAmiId = "CustomAmiId"
        case ebsRootVolumeSize = "EbsRootVolumeSize"
        case instances = "Instances"
        case jobFlowRole = "JobFlowRole"
        case kerberosAttributes = "KerberosAttributes"
        case logEncryptionKmsKeyId = "LogEncryptionKmsKeyId"
        case logUri = "LogUri"
        case managedScalingPolicy = "ManagedScalingPolicy"
        case name = "Name"
        case newSupportedProducts = "NewSupportedProducts"
        case placementGroupConfigs = "PlacementGroupConfigs"
        case releaseLabel = "ReleaseLabel"
        case repoUpgradeOnBoot = "RepoUpgradeOnBoot"
        case scaleDownBehavior = "ScaleDownBehavior"
        case securityConfiguration = "SecurityConfiguration"
        case serviceRole = "ServiceRole"
        case stepConcurrencyLevel = "StepConcurrencyLevel"
        case steps = "Steps"
        case supportedProducts = "SupportedProducts"
        case tags = "Tags"
        case visibleToAllUsers = "VisibleToAllUsers"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logUri)
        logUri = logUriDecoded
        let logEncryptionKmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logEncryptionKmsKeyId)
        logEncryptionKmsKeyId = logEncryptionKmsKeyIdDecoded
        let additionalInfoDecoded = try containerValues.decodeIfPresent(String.self, forKey: .additionalInfo)
        additionalInfo = additionalInfoDecoded
        let amiVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .amiVersion)
        amiVersion = amiVersionDecoded
        let releaseLabelDecoded = try containerValues.decodeIfPresent(String.self, forKey: .releaseLabel)
        releaseLabel = releaseLabelDecoded
        let instancesDecoded = try containerValues.decodeIfPresent(JobFlowInstancesConfig.self, forKey: .instances)
        instances = instancesDecoded
        let stepsContainer = try containerValues.decodeIfPresent([StepConfig].self, forKey: .steps)
        var stepsDecoded0:[StepConfig]? = nil
        if let stepsContainer = stepsContainer {
            stepsDecoded0 = [StepConfig]()
            for structure0 in stepsContainer {
                stepsDecoded0?.append(structure0)
            }
        }
        steps = stepsDecoded0
        let bootstrapActionsContainer = try containerValues.decodeIfPresent([BootstrapActionConfig].self, forKey: .bootstrapActions)
        var bootstrapActionsDecoded0:[BootstrapActionConfig]? = nil
        if let bootstrapActionsContainer = bootstrapActionsContainer {
            bootstrapActionsDecoded0 = [BootstrapActionConfig]()
            for structure0 in bootstrapActionsContainer {
                bootstrapActionsDecoded0?.append(structure0)
            }
        }
        bootstrapActions = bootstrapActionsDecoded0
        let supportedProductsContainer = try containerValues.decodeIfPresent([String].self, forKey: .supportedProducts)
        var supportedProductsDecoded0:[String]? = nil
        if let supportedProductsContainer = supportedProductsContainer {
            supportedProductsDecoded0 = [String]()
            for string0 in supportedProductsContainer {
                supportedProductsDecoded0?.append(string0)
            }
        }
        supportedProducts = supportedProductsDecoded0
        let newSupportedProductsContainer = try containerValues.decodeIfPresent([SupportedProductConfig].self, forKey: .newSupportedProducts)
        var newSupportedProductsDecoded0:[SupportedProductConfig]? = nil
        if let newSupportedProductsContainer = newSupportedProductsContainer {
            newSupportedProductsDecoded0 = [SupportedProductConfig]()
            for structure0 in newSupportedProductsContainer {
                newSupportedProductsDecoded0?.append(structure0)
            }
        }
        newSupportedProducts = newSupportedProductsDecoded0
        let applicationsContainer = try containerValues.decodeIfPresent([Application].self, forKey: .applications)
        var applicationsDecoded0:[Application]? = nil
        if let applicationsContainer = applicationsContainer {
            applicationsDecoded0 = [Application]()
            for structure0 in applicationsContainer {
                applicationsDecoded0?.append(structure0)
            }
        }
        applications = applicationsDecoded0
        let configurationsContainer = try containerValues.decodeIfPresent([Configuration].self, forKey: .configurations)
        var configurationsDecoded0:[Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [Configuration]()
            for structure0 in configurationsContainer {
                configurationsDecoded0?.append(structure0)
            }
        }
        configurations = configurationsDecoded0
        let visibleToAllUsersDecoded = try containerValues.decode(Bool.self, forKey: .visibleToAllUsers)
        visibleToAllUsers = visibleToAllUsersDecoded
        let jobFlowRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobFlowRole)
        jobFlowRole = jobFlowRoleDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let autoScalingRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingRole)
        autoScalingRole = autoScalingRoleDecoded
        let scaleDownBehaviorDecoded = try containerValues.decodeIfPresent(ScaleDownBehavior.self, forKey: .scaleDownBehavior)
        scaleDownBehavior = scaleDownBehaviorDecoded
        let customAmiIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customAmiId)
        customAmiId = customAmiIdDecoded
        let ebsRootVolumeSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .ebsRootVolumeSize)
        ebsRootVolumeSize = ebsRootVolumeSizeDecoded
        let repoUpgradeOnBootDecoded = try containerValues.decodeIfPresent(RepoUpgradeOnBoot.self, forKey: .repoUpgradeOnBoot)
        repoUpgradeOnBoot = repoUpgradeOnBootDecoded
        let kerberosAttributesDecoded = try containerValues.decodeIfPresent(KerberosAttributes.self, forKey: .kerberosAttributes)
        kerberosAttributes = kerberosAttributesDecoded
        let stepConcurrencyLevelDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .stepConcurrencyLevel)
        stepConcurrencyLevel = stepConcurrencyLevelDecoded
        let managedScalingPolicyDecoded = try containerValues.decodeIfPresent(ManagedScalingPolicy.self, forKey: .managedScalingPolicy)
        managedScalingPolicy = managedScalingPolicyDecoded
        let placementGroupConfigsContainer = try containerValues.decodeIfPresent([PlacementGroupConfig].self, forKey: .placementGroupConfigs)
        var placementGroupConfigsDecoded0:[PlacementGroupConfig]? = nil
        if let placementGroupConfigsContainer = placementGroupConfigsContainer {
            placementGroupConfigsDecoded0 = [PlacementGroupConfig]()
            for structure0 in placementGroupConfigsContainer {
                placementGroupConfigsDecoded0?.append(structure0)
            }
        }
        placementGroupConfigs = placementGroupConfigsDecoded0
    }
}
