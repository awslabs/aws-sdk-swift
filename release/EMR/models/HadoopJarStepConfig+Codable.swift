// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HadoopJarStepConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case args = "Args"
        case jar = "Jar"
        case mainClass = "MainClass"
        case properties = "Properties"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let args = args {
            var argsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .args)
            for xmlstringlist0 in args {
                try argsContainer.encode(xmlstringlist0)
            }
        }
        if let jar = jar {
            try encodeContainer.encode(jar, forKey: .jar)
        }
        if let mainClass = mainClass {
            try encodeContainer.encode(mainClass, forKey: .mainClass)
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .properties)
            for keyvaluelist0 in properties {
                try propertiesContainer.encode(keyvaluelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let propertiesContainer = try containerValues.decodeIfPresent([KeyValue].self, forKey: .properties)
        var propertiesDecoded0:[KeyValue]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [KeyValue]()
            for structure0 in propertiesContainer {
                propertiesDecoded0?.append(structure0)
            }
        }
        properties = propertiesDecoded0
        let jarDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jar)
        jar = jarDecoded
        let mainClassDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mainClass)
        mainClass = mainClassDecoded
        let argsContainer = try containerValues.decodeIfPresent([String].self, forKey: .args)
        var argsDecoded0:[String]? = nil
        if let argsContainer = argsContainer {
            argsDecoded0 = [String]()
            for string0 in argsContainer {
                argsDecoded0?.append(string0)
            }
        }
        args = argsDecoded0
    }
}
