// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p></p>
public struct NotebookExecutionSummary: Equatable {
    /// <p>The unique identifier of the editor associated with the notebook execution.</p>
    public let editorId: String?
    /// <p>The timestamp when notebook execution started.</p>
    public let endTime: Date?
    /// <p>The unique identifier of the notebook execution.</p>
    public let notebookExecutionId: String?
    /// <p>The name of the notebook execution.</p>
    public let notebookExecutionName: String?
    /// <p>The timestamp when notebook execution started.</p>
    public let startTime: Date?
    /// <p>The status of the notebook execution.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>START_PENDING</code> indicates that the cluster has received the execution
    ///                request but execution has not begun.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>STARTING</code> indicates that the execution is starting on the
    ///                cluster.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RUNNING</code> indicates that the execution is being processed by the
    ///                cluster.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FINISHING</code> indicates that execution processing is in the final
    ///                stages.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FINISHED</code> indicates that the execution has completed without
    ///                error.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FAILING</code> indicates that the execution is failing and will not finish
    ///                successfully.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FAILED</code> indicates that the execution failed.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>STOP_PENDING</code> indicates that the cluster has received a
    ///                   <code>StopNotebookExecution</code> request and the stop is pending.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>STOPPING</code> indicates that the cluster is in the process of stopping the
    ///                execution as a result of a <code>StopNotebookExecution</code> request.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>STOPPED</code> indicates that the execution stopped because of a
    ///                   <code>StopNotebookExecution</code> request.</p>
    ///             </li>
    ///          </ul>
    public let status: NotebookExecutionStatus?

    public init (
        editorId: String? = nil,
        endTime: Date? = nil,
        notebookExecutionId: String? = nil,
        notebookExecutionName: String? = nil,
        startTime: Date? = nil,
        status: NotebookExecutionStatus? = nil
    )
    {
        self.editorId = editorId
        self.endTime = endTime
        self.notebookExecutionId = notebookExecutionId
        self.notebookExecutionName = notebookExecutionName
        self.startTime = startTime
        self.status = status
    }
}
