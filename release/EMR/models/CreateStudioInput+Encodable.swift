// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateStudioInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case authMode = "AuthMode"
        case defaultS3Location = "DefaultS3Location"
        case description = "Description"
        case engineSecurityGroupId = "EngineSecurityGroupId"
        case name = "Name"
        case serviceRole = "ServiceRole"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
        case userRole = "UserRole"
        case vpcId = "VpcId"
        case workspaceSecurityGroupId = "WorkspaceSecurityGroupId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authMode = authMode {
            try encodeContainer.encode(authMode.rawValue, forKey: .authMode)
        }
        if let defaultS3Location = defaultS3Location {
            try encodeContainer.encode(defaultS3Location, forKey: .defaultS3Location)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let engineSecurityGroupId = engineSecurityGroupId {
            try encodeContainer.encode(engineSecurityGroupId, forKey: .engineSecurityGroupId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetidlist0 in subnetIds {
                try subnetIdsContainer.encode(subnetidlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let userRole = userRole {
            try encodeContainer.encode(userRole, forKey: .userRole)
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
        if let workspaceSecurityGroupId = workspaceSecurityGroupId {
            try encodeContainer.encode(workspaceSecurityGroupId, forKey: .workspaceSecurityGroupId)
        }
    }
}
