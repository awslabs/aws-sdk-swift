// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstanceGroupConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoScalingPolicy = "AutoScalingPolicy"
        case bidPrice = "BidPrice"
        case configurations = "Configurations"
        case ebsConfiguration = "EbsConfiguration"
        case instanceCount = "InstanceCount"
        case instanceRole = "InstanceRole"
        case instanceType = "InstanceType"
        case market = "Market"
        case name = "Name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingPolicy = autoScalingPolicy {
            try encodeContainer.encode(autoScalingPolicy, forKey: .autoScalingPolicy)
        }
        if let bidPrice = bidPrice {
            try encodeContainer.encode(bidPrice, forKey: .bidPrice)
        }
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configurationlist0 in configurations {
                try configurationsContainer.encode(configurationlist0)
            }
        }
        if let ebsConfiguration = ebsConfiguration {
            try encodeContainer.encode(ebsConfiguration, forKey: .ebsConfiguration)
        }
        if let instanceCount = instanceCount {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let instanceRole = instanceRole {
            try encodeContainer.encode(instanceRole.rawValue, forKey: .instanceRole)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let market = market {
            try encodeContainer.encode(market.rawValue, forKey: .market)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let marketDecoded = try containerValues.decodeIfPresent(MarketType.self, forKey: .market)
        market = marketDecoded
        let instanceRoleDecoded = try containerValues.decodeIfPresent(InstanceRoleType.self, forKey: .instanceRole)
        instanceRole = instanceRoleDecoded
        let bidPriceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bidPrice)
        bidPrice = bidPriceDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let configurationsContainer = try containerValues.decodeIfPresent([Configuration].self, forKey: .configurations)
        var configurationsDecoded0:[Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [Configuration]()
            for structure0 in configurationsContainer {
                configurationsDecoded0?.append(structure0)
            }
        }
        configurations = configurationsDecoded0
        let ebsConfigurationDecoded = try containerValues.decodeIfPresent(EbsConfiguration.self, forKey: .ebsConfiguration)
        ebsConfiguration = ebsConfigurationDecoded
        let autoScalingPolicyDecoded = try containerValues.decodeIfPresent(AutoScalingPolicy.self, forKey: .autoScalingPolicy)
        autoScalingPolicy = autoScalingPolicyDecoded
    }
}
