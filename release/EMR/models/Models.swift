// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

public enum ActionOnFailure {
    case cancelAndWait
    case `continue`
    case terminateCluster
    case terminateJobFlow
    case sdkUnknown(String)
}

extension ActionOnFailure : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ActionOnFailure] {
        return [
            .cancelAndWait,
            .continue,
            .terminateCluster,
            .terminateJobFlow,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cancelAndWait: return "CANCEL_AND_WAIT"
        case .continue: return "CONTINUE"
        case .terminateCluster: return "TERMINATE_CLUSTER"
        case .terminateJobFlow: return "TERMINATE_JOB_FLOW"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ActionOnFailure(rawValue: rawValue) ?? ActionOnFailure.sdkUnknown(rawValue)
    }
}

public struct AddInstanceFleetInputBodyMiddleware: Middleware {
    public let id: String = "AddInstanceFleetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AddInstanceFleetInput>,
                  next: H) -> Swift.Result<OperationOutput<AddInstanceFleetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AddInstanceFleetInput>
    public typealias MOutput = OperationOutput<AddInstanceFleetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AddInstanceFleetOutputError>
}

extension AddInstanceFleetInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AddInstanceFleetInput(clusterId: \(String(describing: clusterId)), instanceFleet: \(String(describing: instanceFleet)))"}
}

extension AddInstanceFleetInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case instanceFleet = "InstanceFleet"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let instanceFleet = instanceFleet {
            try encodeContainer.encode(instanceFleet, forKey: .instanceFleet)
        }
    }
}

public struct AddInstanceFleetInputHeadersMiddleware: Middleware {
    public let id: String = "AddInstanceFleetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AddInstanceFleetInput>,
                  next: H) -> Swift.Result<OperationOutput<AddInstanceFleetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AddInstanceFleetInput>
    public typealias MOutput = OperationOutput<AddInstanceFleetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AddInstanceFleetOutputError>
}

public struct AddInstanceFleetInputQueryItemMiddleware: Middleware {
    public let id: String = "AddInstanceFleetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AddInstanceFleetInput>,
                  next: H) -> Swift.Result<OperationOutput<AddInstanceFleetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AddInstanceFleetInput>
    public typealias MOutput = OperationOutput<AddInstanceFleetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AddInstanceFleetOutputError>
}

public struct AddInstanceFleetInput: Equatable {
    /// <p>The unique identifier of the cluster.</p>
    public let clusterId: String?
    /// <p>Specifies the configuration of the instance fleet.</p>
    public let instanceFleet: InstanceFleetConfig?

    public init (
        clusterId: String? = nil,
        instanceFleet: InstanceFleetConfig? = nil
    )
    {
        self.clusterId = clusterId
        self.instanceFleet = instanceFleet
    }
}

struct AddInstanceFleetInputBody: Equatable {
    public let clusterId: String?
    public let instanceFleet: InstanceFleetConfig?
}

extension AddInstanceFleetInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case instanceFleet = "InstanceFleet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let instanceFleetDecoded = try containerValues.decodeIfPresent(InstanceFleetConfig.self, forKey: .instanceFleet)
        instanceFleet = instanceFleetDecoded
    }
}

extension AddInstanceFleetOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddInstanceFleetOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AddInstanceFleetOutputError: Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddInstanceFleetOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AddInstanceFleetOutputResponse(clusterArn: \(String(describing: clusterArn)), clusterId: \(String(describing: clusterId)), instanceFleetId: \(String(describing: instanceFleetId)))"}
}

extension AddInstanceFleetOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: AddInstanceFleetOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.clusterArn = output.clusterArn
            self.clusterId = output.clusterId
            self.instanceFleetId = output.instanceFleetId
        } else {
            self.clusterArn = nil
            self.clusterId = nil
            self.instanceFleetId = nil
        }
    }
}

public struct AddInstanceFleetOutputResponse: Equatable {
    /// <p>The Amazon Resource Name of the cluster.</p>
    public let clusterArn: String?
    /// <p>The unique identifier of the cluster.</p>
    public let clusterId: String?
    /// <p>The unique identifier of the instance fleet.</p>
    public let instanceFleetId: String?

    public init (
        clusterArn: String? = nil,
        clusterId: String? = nil,
        instanceFleetId: String? = nil
    )
    {
        self.clusterArn = clusterArn
        self.clusterId = clusterId
        self.instanceFleetId = instanceFleetId
    }
}

struct AddInstanceFleetOutputResponseBody: Equatable {
    public let clusterId: String?
    public let instanceFleetId: String?
    public let clusterArn: String?
}

extension AddInstanceFleetOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterArn = "ClusterArn"
        case clusterId = "ClusterId"
        case instanceFleetId = "InstanceFleetId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let instanceFleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceFleetId)
        instanceFleetId = instanceFleetIdDecoded
        let clusterArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
    }
}

public struct AddInstanceGroupsInputBodyMiddleware: Middleware {
    public let id: String = "AddInstanceGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AddInstanceGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<AddInstanceGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AddInstanceGroupsInput>
    public typealias MOutput = OperationOutput<AddInstanceGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AddInstanceGroupsOutputError>
}

extension AddInstanceGroupsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AddInstanceGroupsInput(instanceGroups: \(String(describing: instanceGroups)), jobFlowId: \(String(describing: jobFlowId)))"}
}

extension AddInstanceGroupsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instanceGroups = "InstanceGroups"
        case jobFlowId = "JobFlowId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceGroups = instanceGroups {
            var instanceGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceGroups)
            for instancegroupconfiglist0 in instanceGroups {
                try instanceGroupsContainer.encode(instancegroupconfiglist0)
            }
        }
        if let jobFlowId = jobFlowId {
            try encodeContainer.encode(jobFlowId, forKey: .jobFlowId)
        }
    }
}

public struct AddInstanceGroupsInputHeadersMiddleware: Middleware {
    public let id: String = "AddInstanceGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AddInstanceGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<AddInstanceGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AddInstanceGroupsInput>
    public typealias MOutput = OperationOutput<AddInstanceGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AddInstanceGroupsOutputError>
}

public struct AddInstanceGroupsInputQueryItemMiddleware: Middleware {
    public let id: String = "AddInstanceGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AddInstanceGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<AddInstanceGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AddInstanceGroupsInput>
    public typealias MOutput = OperationOutput<AddInstanceGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AddInstanceGroupsOutputError>
}

/// <p>Input to an AddInstanceGroups call.</p>
public struct AddInstanceGroupsInput: Equatable {
    /// <p>Instance groups to add.</p>
    public let instanceGroups: [InstanceGroupConfig]?
    /// <p>Job flow in which to add the instance groups.</p>
    public let jobFlowId: String?

    public init (
        instanceGroups: [InstanceGroupConfig]? = nil,
        jobFlowId: String? = nil
    )
    {
        self.instanceGroups = instanceGroups
        self.jobFlowId = jobFlowId
    }
}

struct AddInstanceGroupsInputBody: Equatable {
    public let instanceGroups: [InstanceGroupConfig]?
    public let jobFlowId: String?
}

extension AddInstanceGroupsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceGroups = "InstanceGroups"
        case jobFlowId = "JobFlowId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceGroupsContainer = try containerValues.decodeIfPresent([InstanceGroupConfig?].self, forKey: .instanceGroups)
        var instanceGroupsDecoded0:[InstanceGroupConfig]? = nil
        if let instanceGroupsContainer = instanceGroupsContainer {
            instanceGroupsDecoded0 = [InstanceGroupConfig]()
            for structure0 in instanceGroupsContainer {
                if let structure0 = structure0 {
                    instanceGroupsDecoded0?.append(structure0)
                }
            }
        }
        instanceGroups = instanceGroupsDecoded0
        let jobFlowIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobFlowId)
        jobFlowId = jobFlowIdDecoded
    }
}

extension AddInstanceGroupsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddInstanceGroupsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AddInstanceGroupsOutputError: Equatable {
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddInstanceGroupsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AddInstanceGroupsOutputResponse(clusterArn: \(String(describing: clusterArn)), instanceGroupIds: \(String(describing: instanceGroupIds)), jobFlowId: \(String(describing: jobFlowId)))"}
}

extension AddInstanceGroupsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: AddInstanceGroupsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.clusterArn = output.clusterArn
            self.instanceGroupIds = output.instanceGroupIds
            self.jobFlowId = output.jobFlowId
        } else {
            self.clusterArn = nil
            self.instanceGroupIds = nil
            self.jobFlowId = nil
        }
    }
}

/// <p>Output from an AddInstanceGroups call.</p>
public struct AddInstanceGroupsOutputResponse: Equatable {
    /// <p>The Amazon Resource Name of the cluster.</p>
    public let clusterArn: String?
    /// <p>Instance group IDs of the newly created instance groups.</p>
    public let instanceGroupIds: [String]?
    /// <p>The job flow ID in which the instance groups are added.</p>
    public let jobFlowId: String?

    public init (
        clusterArn: String? = nil,
        instanceGroupIds: [String]? = nil,
        jobFlowId: String? = nil
    )
    {
        self.clusterArn = clusterArn
        self.instanceGroupIds = instanceGroupIds
        self.jobFlowId = jobFlowId
    }
}

struct AddInstanceGroupsOutputResponseBody: Equatable {
    public let jobFlowId: String?
    public let instanceGroupIds: [String]?
    public let clusterArn: String?
}

extension AddInstanceGroupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterArn = "ClusterArn"
        case instanceGroupIds = "InstanceGroupIds"
        case jobFlowId = "JobFlowId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobFlowIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobFlowId)
        jobFlowId = jobFlowIdDecoded
        let instanceGroupIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .instanceGroupIds)
        var instanceGroupIdsDecoded0:[String]? = nil
        if let instanceGroupIdsContainer = instanceGroupIdsContainer {
            instanceGroupIdsDecoded0 = [String]()
            for string0 in instanceGroupIdsContainer {
                if let string0 = string0 {
                    instanceGroupIdsDecoded0?.append(string0)
                }
            }
        }
        instanceGroupIds = instanceGroupIdsDecoded0
        let clusterArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
    }
}

public struct AddJobFlowStepsInputBodyMiddleware: Middleware {
    public let id: String = "AddJobFlowStepsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AddJobFlowStepsInput>,
                  next: H) -> Swift.Result<OperationOutput<AddJobFlowStepsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AddJobFlowStepsInput>
    public typealias MOutput = OperationOutput<AddJobFlowStepsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AddJobFlowStepsOutputError>
}

extension AddJobFlowStepsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AddJobFlowStepsInput(jobFlowId: \(String(describing: jobFlowId)), steps: \(String(describing: steps)))"}
}

extension AddJobFlowStepsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case jobFlowId = "JobFlowId"
        case steps = "Steps"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobFlowId = jobFlowId {
            try encodeContainer.encode(jobFlowId, forKey: .jobFlowId)
        }
        if let steps = steps {
            var stepsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .steps)
            for stepconfiglist0 in steps {
                try stepsContainer.encode(stepconfiglist0)
            }
        }
    }
}

public struct AddJobFlowStepsInputHeadersMiddleware: Middleware {
    public let id: String = "AddJobFlowStepsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AddJobFlowStepsInput>,
                  next: H) -> Swift.Result<OperationOutput<AddJobFlowStepsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AddJobFlowStepsInput>
    public typealias MOutput = OperationOutput<AddJobFlowStepsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AddJobFlowStepsOutputError>
}

public struct AddJobFlowStepsInputQueryItemMiddleware: Middleware {
    public let id: String = "AddJobFlowStepsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AddJobFlowStepsInput>,
                  next: H) -> Swift.Result<OperationOutput<AddJobFlowStepsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AddJobFlowStepsInput>
    public typealias MOutput = OperationOutput<AddJobFlowStepsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AddJobFlowStepsOutputError>
}

/// <p> The input argument to the <a>AddJobFlowSteps</a> operation. </p>
public struct AddJobFlowStepsInput: Equatable {
    /// <p>A string that uniquely identifies the job flow. This identifier is returned by <a>RunJobFlow</a> and can also be obtained from <a>ListClusters</a>.
    ///       </p>
    public let jobFlowId: String?
    /// <p> A list of <a>StepConfig</a> to be executed by the job flow. </p>
    public let steps: [StepConfig]?

    public init (
        jobFlowId: String? = nil,
        steps: [StepConfig]? = nil
    )
    {
        self.jobFlowId = jobFlowId
        self.steps = steps
    }
}

struct AddJobFlowStepsInputBody: Equatable {
    public let jobFlowId: String?
    public let steps: [StepConfig]?
}

extension AddJobFlowStepsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case jobFlowId = "JobFlowId"
        case steps = "Steps"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobFlowIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobFlowId)
        jobFlowId = jobFlowIdDecoded
        let stepsContainer = try containerValues.decodeIfPresent([StepConfig?].self, forKey: .steps)
        var stepsDecoded0:[StepConfig]? = nil
        if let stepsContainer = stepsContainer {
            stepsDecoded0 = [StepConfig]()
            for structure0 in stepsContainer {
                if let structure0 = structure0 {
                    stepsDecoded0?.append(structure0)
                }
            }
        }
        steps = stepsDecoded0
    }
}

extension AddJobFlowStepsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddJobFlowStepsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AddJobFlowStepsOutputError: Equatable {
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddJobFlowStepsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AddJobFlowStepsOutputResponse(stepIds: \(String(describing: stepIds)))"}
}

extension AddJobFlowStepsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: AddJobFlowStepsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.stepIds = output.stepIds
        } else {
            self.stepIds = nil
        }
    }
}

/// <p> The output for the <a>AddJobFlowSteps</a> operation. </p>
public struct AddJobFlowStepsOutputResponse: Equatable {
    /// <p>The identifiers of the list of steps added to the job flow.</p>
    public let stepIds: [String]?

    public init (
        stepIds: [String]? = nil
    )
    {
        self.stepIds = stepIds
    }
}

struct AddJobFlowStepsOutputResponseBody: Equatable {
    public let stepIds: [String]?
}

extension AddJobFlowStepsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case stepIds = "StepIds"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stepIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .stepIds)
        var stepIdsDecoded0:[String]? = nil
        if let stepIdsContainer = stepIdsContainer {
            stepIdsDecoded0 = [String]()
            for string0 in stepIdsContainer {
                if let string0 = string0 {
                    stepIdsDecoded0?.append(string0)
                }
            }
        }
        stepIds = stepIdsDecoded0
    }
}

public struct AddTagsInputBodyMiddleware: Middleware {
    public let id: String = "AddTagsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AddTagsInput>,
                  next: H) -> Swift.Result<OperationOutput<AddTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AddTagsInput>
    public typealias MOutput = OperationOutput<AddTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AddTagsOutputError>
}

extension AddTagsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AddTagsInput(resourceId: \(String(describing: resourceId)), tags: \(String(describing: tags)))"}
}

extension AddTagsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case resourceId = "ResourceId"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct AddTagsInputHeadersMiddleware: Middleware {
    public let id: String = "AddTagsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AddTagsInput>,
                  next: H) -> Swift.Result<OperationOutput<AddTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AddTagsInput>
    public typealias MOutput = OperationOutput<AddTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AddTagsOutputError>
}

public struct AddTagsInputQueryItemMiddleware: Middleware {
    public let id: String = "AddTagsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AddTagsInput>,
                  next: H) -> Swift.Result<OperationOutput<AddTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AddTagsInput>
    public typealias MOutput = OperationOutput<AddTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AddTagsOutputError>
}

/// <p>This input identifies a cluster and a list of tags to attach.</p>
public struct AddTagsInput: Equatable {
    /// <p>The Amazon EMR resource identifier to which tags will be added. This value must be a
    ///          cluster identifier.</p>
    public let resourceId: String?
    /// <p>A list of tags to associate with a cluster and propagate to EC2 instances. Tags are
    ///          user-defined key-value pairs that consist of a required key string with a maximum of 128
    ///          characters, and an optional value string with a maximum of 256 characters.</p>
    public let tags: [Tag]?

    public init (
        resourceId: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.resourceId = resourceId
        self.tags = tags
    }
}

struct AddTagsInputBody: Equatable {
    public let resourceId: String?
    public let tags: [Tag]?
}

extension AddTagsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case resourceId = "ResourceId"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension AddTagsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddTagsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AddTagsOutputError: Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddTagsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AddTagsOutputResponse()"}
}

extension AddTagsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

/// <p>This output indicates the result of adding tags to a resource.</p>
public struct AddTagsOutputResponse: Equatable {

    public init() {}
}

struct AddTagsOutputResponseBody: Equatable {
}

extension AddTagsOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public enum AdjustmentType {
    case changeInCapacity
    case exactCapacity
    case percentChangeInCapacity
    case sdkUnknown(String)
}

extension AdjustmentType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AdjustmentType] {
        return [
            .changeInCapacity,
            .exactCapacity,
            .percentChangeInCapacity,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .changeInCapacity: return "CHANGE_IN_CAPACITY"
        case .exactCapacity: return "EXACT_CAPACITY"
        case .percentChangeInCapacity: return "PERCENT_CHANGE_IN_CAPACITY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AdjustmentType(rawValue: rawValue) ?? AdjustmentType.sdkUnknown(rawValue)
    }
}

extension Application: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case additionalInfo = "AdditionalInfo"
        case args = "Args"
        case name = "Name"
        case version = "Version"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalInfo = additionalInfo {
            var additionalInfoContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .additionalInfo)
            for (dictKey0, stringmap0) in additionalInfo {
                try additionalInfoContainer.encode(stringmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let args = args {
            var argsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .args)
            for stringlist0 in args {
                try argsContainer.encode(stringlist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let argsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .args)
        var argsDecoded0:[String]? = nil
        if let argsContainer = argsContainer {
            argsDecoded0 = [String]()
            for string0 in argsContainer {
                if let string0 = string0 {
                    argsDecoded0?.append(string0)
                }
            }
        }
        args = argsDecoded0
        let additionalInfoContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .additionalInfo)
        var additionalInfoDecoded0: [String:String]? = nil
        if let additionalInfoContainer = additionalInfoContainer {
            additionalInfoDecoded0 = [String:String]()
            for (key0, string0) in additionalInfoContainer {
                if let string0 = string0 {
                    additionalInfoDecoded0?[key0] = string0
                }
            }
        }
        additionalInfo = additionalInfoDecoded0
    }
}

extension Application: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Application(additionalInfo: \(String(describing: additionalInfo)), args: \(String(describing: args)), name: \(String(describing: name)), version: \(String(describing: version)))"}
}

/// <p>With Amazon EMR release version 4.0 and later, the only accepted parameter is the
///          application name. To pass arguments to applications, you use configuration classifications
///          specified using configuration JSON objects. For more information, see <a href="https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-configure-apps.html">Configuring
///             Applications</a>.</p>
///          <p>With earlier Amazon EMR releases, the application is any Amazon or third-party software
///          that you can add to the cluster. This structure contains a list of strings that indicates
///          the software to use with the cluster and accepts a user argument list. Amazon EMR accepts
///          and forwards the argument list to the corresponding installation script as bootstrap action
///          argument.</p>
public struct Application: Equatable {
    /// <p>This option is for advanced users only. This is meta information about third-party
    ///          applications that third-party vendors use for testing purposes.</p>
    public let additionalInfo: [String:String]?
    /// <p>Arguments for Amazon EMR to pass to the application.</p>
    public let args: [String]?
    /// <p>The name of the application.</p>
    public let name: String?
    /// <p>The version of the application.</p>
    public let version: String?

    public init (
        additionalInfo: [String:String]? = nil,
        args: [String]? = nil,
        name: String? = nil,
        version: String? = nil
    )
    {
        self.additionalInfo = additionalInfo
        self.args = args
        self.name = name
        self.version = version
    }
}

public enum AuthMode {
    case iam
    case sso
    case sdkUnknown(String)
}

extension AuthMode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AuthMode] {
        return [
            .iam,
            .sso,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .iam: return "IAM"
        case .sso: return "SSO"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AuthMode(rawValue: rawValue) ?? AuthMode.sdkUnknown(rawValue)
    }
}

extension AutoScalingPolicy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case constraints = "Constraints"
        case rules = "Rules"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let constraints = constraints {
            try encodeContainer.encode(constraints, forKey: .constraints)
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for scalingrulelist0 in rules {
                try rulesContainer.encode(scalingrulelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let constraintsDecoded = try containerValues.decodeIfPresent(ScalingConstraints.self, forKey: .constraints)
        constraints = constraintsDecoded
        let rulesContainer = try containerValues.decodeIfPresent([ScalingRule?].self, forKey: .rules)
        var rulesDecoded0:[ScalingRule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [ScalingRule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
    }
}

extension AutoScalingPolicy: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AutoScalingPolicy(constraints: \(String(describing: constraints)), rules: \(String(describing: rules)))"}
}

/// <p>An automatic scaling policy for a core instance group or task instance group in an
///          Amazon EMR cluster. An automatic scaling policy defines how an instance group dynamically
///          adds and terminates EC2 instances in response to the value of a CloudWatch metric. See
///             <a>PutAutoScalingPolicy</a>.</p>
public struct AutoScalingPolicy: Equatable {
    /// <p>The upper and lower EC2 instance limits for an automatic scaling policy. Automatic
    ///          scaling activity will not cause an instance group to grow above or below these
    ///          limits.</p>
    public let constraints: ScalingConstraints?
    /// <p>The scale-in and scale-out rules that comprise the automatic scaling policy.</p>
    public let rules: [ScalingRule]?

    public init (
        constraints: ScalingConstraints? = nil,
        rules: [ScalingRule]? = nil
    )
    {
        self.constraints = constraints
        self.rules = rules
    }
}

extension AutoScalingPolicyDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case constraints = "Constraints"
        case rules = "Rules"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let constraints = constraints {
            try encodeContainer.encode(constraints, forKey: .constraints)
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for scalingrulelist0 in rules {
                try rulesContainer.encode(scalingrulelist0)
            }
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(AutoScalingPolicyStatus.self, forKey: .status)
        status = statusDecoded
        let constraintsDecoded = try containerValues.decodeIfPresent(ScalingConstraints.self, forKey: .constraints)
        constraints = constraintsDecoded
        let rulesContainer = try containerValues.decodeIfPresent([ScalingRule?].self, forKey: .rules)
        var rulesDecoded0:[ScalingRule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [ScalingRule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
    }
}

extension AutoScalingPolicyDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AutoScalingPolicyDescription(constraints: \(String(describing: constraints)), rules: \(String(describing: rules)), status: \(String(describing: status)))"}
}

/// <p>An automatic scaling policy for a core instance group or task instance group in an
///          Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically
///          adds and terminates EC2 instances in response to the value of a CloudWatch metric. See
///             <a>PutAutoScalingPolicy</a>.</p>
public struct AutoScalingPolicyDescription: Equatable {
    /// <p>The upper and lower EC2 instance limits for an automatic scaling policy. Automatic
    ///          scaling activity will not cause an instance group to grow above or below these
    ///          limits.</p>
    public let constraints: ScalingConstraints?
    /// <p>The scale-in and scale-out rules that comprise the automatic scaling policy.</p>
    public let rules: [ScalingRule]?
    /// <p>The status of an automatic scaling policy. </p>
    public let status: AutoScalingPolicyStatus?

    public init (
        constraints: ScalingConstraints? = nil,
        rules: [ScalingRule]? = nil,
        status: AutoScalingPolicyStatus? = nil
    )
    {
        self.constraints = constraints
        self.rules = rules
        self.status = status
    }
}

public enum AutoScalingPolicyState {
    case attached
    case attaching
    case detached
    case detaching
    case failed
    case pending
    case sdkUnknown(String)
}

extension AutoScalingPolicyState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AutoScalingPolicyState] {
        return [
            .attached,
            .attaching,
            .detached,
            .detaching,
            .failed,
            .pending,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .attached: return "ATTACHED"
        case .attaching: return "ATTACHING"
        case .detached: return "DETACHED"
        case .detaching: return "DETACHING"
        case .failed: return "FAILED"
        case .pending: return "PENDING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AutoScalingPolicyState(rawValue: rawValue) ?? AutoScalingPolicyState.sdkUnknown(rawValue)
    }
}

extension AutoScalingPolicyStateChangeReason: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(AutoScalingPolicyStateChangeReasonCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AutoScalingPolicyStateChangeReason: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AutoScalingPolicyStateChangeReason(code: \(String(describing: code)), message: \(String(describing: message)))"}
}

/// <p>The reason for an <a>AutoScalingPolicyStatus</a> change.</p>
public struct AutoScalingPolicyStateChangeReason: Equatable {
    /// <p>The code indicating the reason for the change in status.<code>USER_REQUEST</code>
    ///          indicates that the scaling policy status was changed by a user.
    ///             <code>PROVISION_FAILURE</code> indicates that the status change was because the policy
    ///          failed to provision. <code>CLEANUP_FAILURE</code> indicates an error.</p>
    public let code: AutoScalingPolicyStateChangeReasonCode?
    /// <p>A friendly, more verbose message that accompanies an automatic scaling policy state
    ///          change.</p>
    public let message: String?

    public init (
        code: AutoScalingPolicyStateChangeReasonCode? = nil,
        message: String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

public enum AutoScalingPolicyStateChangeReasonCode {
    case cleanupFailure
    case provisionFailure
    case userRequest
    case sdkUnknown(String)
}

extension AutoScalingPolicyStateChangeReasonCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AutoScalingPolicyStateChangeReasonCode] {
        return [
            .cleanupFailure,
            .provisionFailure,
            .userRequest,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cleanupFailure: return "CLEANUP_FAILURE"
        case .provisionFailure: return "PROVISION_FAILURE"
        case .userRequest: return "USER_REQUEST"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AutoScalingPolicyStateChangeReasonCode(rawValue: rawValue) ?? AutoScalingPolicyStateChangeReasonCode.sdkUnknown(rawValue)
    }
}

extension AutoScalingPolicyStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case state = "State"
        case stateChangeReason = "StateChangeReason"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateChangeReason = stateChangeReason {
            try encodeContainer.encode(stateChangeReason, forKey: .stateChangeReason)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(AutoScalingPolicyState.self, forKey: .state)
        state = stateDecoded
        let stateChangeReasonDecoded = try containerValues.decodeIfPresent(AutoScalingPolicyStateChangeReason.self, forKey: .stateChangeReason)
        stateChangeReason = stateChangeReasonDecoded
    }
}

extension AutoScalingPolicyStatus: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AutoScalingPolicyStatus(state: \(String(describing: state)), stateChangeReason: \(String(describing: stateChangeReason)))"}
}

/// <p>The status of an automatic scaling policy.
///          </p>
public struct AutoScalingPolicyStatus: Equatable {
    /// <p>Indicates the status of the automatic scaling policy.</p>
    public let state: AutoScalingPolicyState?
    /// <p>The reason for a change in status.</p>
    public let stateChangeReason: AutoScalingPolicyStateChangeReason?

    public init (
        state: AutoScalingPolicyState? = nil,
        stateChangeReason: AutoScalingPolicyStateChangeReason? = nil
    )
    {
        self.state = state
        self.stateChangeReason = stateChangeReason
    }
}

extension BlockPublicAccessConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case blockPublicSecurityGroupRules = "BlockPublicSecurityGroupRules"
        case classification = "Classification"
        case configurations = "Configurations"
        case permittedPublicSecurityGroupRuleRanges = "PermittedPublicSecurityGroupRuleRanges"
        case properties = "Properties"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if blockPublicSecurityGroupRules != false {
            try encodeContainer.encode(blockPublicSecurityGroupRules, forKey: .blockPublicSecurityGroupRules)
        }
        if let classification = classification {
            try encodeContainer.encode(classification, forKey: .classification)
        }
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configurationlist0 in configurations {
                try configurationsContainer.encode(configurationlist0)
            }
        }
        if let permittedPublicSecurityGroupRuleRanges = permittedPublicSecurityGroupRuleRanges {
            var permittedPublicSecurityGroupRuleRangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .permittedPublicSecurityGroupRuleRanges)
            for portranges0 in permittedPublicSecurityGroupRuleRanges {
                try permittedPublicSecurityGroupRuleRangesContainer.encode(portranges0)
            }
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .properties)
            for (dictKey0, stringmap0) in properties {
                try propertiesContainer.encode(stringmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blockPublicSecurityGroupRulesDecoded = try containerValues.decode(Bool.self, forKey: .blockPublicSecurityGroupRules)
        blockPublicSecurityGroupRules = blockPublicSecurityGroupRulesDecoded
        let permittedPublicSecurityGroupRuleRangesContainer = try containerValues.decodeIfPresent([PortRange?].self, forKey: .permittedPublicSecurityGroupRuleRanges)
        var permittedPublicSecurityGroupRuleRangesDecoded0:[PortRange]? = nil
        if let permittedPublicSecurityGroupRuleRangesContainer = permittedPublicSecurityGroupRuleRangesContainer {
            permittedPublicSecurityGroupRuleRangesDecoded0 = [PortRange]()
            for structure0 in permittedPublicSecurityGroupRuleRangesContainer {
                if let structure0 = structure0 {
                    permittedPublicSecurityGroupRuleRangesDecoded0?.append(structure0)
                }
            }
        }
        permittedPublicSecurityGroupRuleRanges = permittedPublicSecurityGroupRuleRangesDecoded0
        let classificationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .classification)
        classification = classificationDecoded
        let configurationsContainer = try containerValues.decodeIfPresent([Configuration?].self, forKey: .configurations)
        var configurationsDecoded0:[Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [Configuration]()
            for structure0 in configurationsContainer {
                if let structure0 = structure0 {
                    configurationsDecoded0?.append(structure0)
                }
            }
        }
        configurations = configurationsDecoded0
        let propertiesContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .properties)
        var propertiesDecoded0: [String:String]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [String:String]()
            for (key0, string0) in propertiesContainer {
                if let string0 = string0 {
                    propertiesDecoded0?[key0] = string0
                }
            }
        }
        properties = propertiesDecoded0
    }
}

extension BlockPublicAccessConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BlockPublicAccessConfiguration(blockPublicSecurityGroupRules: \(String(describing: blockPublicSecurityGroupRules)), classification: \(String(describing: classification)), configurations: \(String(describing: configurations)), permittedPublicSecurityGroupRuleRanges: \(String(describing: permittedPublicSecurityGroupRuleRanges)), properties: \(String(describing: properties)))"}
}

/// <p>A configuration for Amazon EMR block public access. When
///             <code>BlockPublicSecurityGroupRules</code> is set to <code>true</code>, Amazon EMR
///          prevents cluster creation if one of the cluster's security groups has a rule that allows
///          inbound traffic from 0.0.0.0/0 or ::/0 on a port, unless the port is specified as an
///          exception using <code>PermittedPublicSecurityGroupRuleRanges</code>.</p>
public struct BlockPublicAccessConfiguration: Equatable {
    /// <p>Indicates whether Amazon EMR block public access is enabled (<code>true</code>) or
    ///          disabled (<code>false</code>). By default, the value is <code>false</code> for accounts
    ///          that have created EMR clusters before July 2019. For accounts created after this, the
    ///          default is <code>true</code>.</p>
    public let blockPublicSecurityGroupRules: Bool
    /// <p>The classification within a configuration.</p>
    public let classification: String?
    /// <p>A list of additional configurations to apply within a configuration object.</p>
    public let configurations: [Configuration]?
    /// <p>Specifies ports and port ranges that are permitted to have security group rules that
    ///          allow inbound traffic from all public sources. For example, if Port 23 (Telnet) is
    ///          specified for <code>PermittedPublicSecurityGroupRuleRanges</code>, Amazon EMR allows
    ///          cluster creation if a security group associated with the cluster has a rule that allows
    ///          inbound traffic on Port 23 from IPv4 0.0.0.0/0 or IPv6 port ::/0 as the source.</p>
    ///          <p>By default, Port 22, which is used for SSH access to the cluster EC2 instances, is in
    ///          the list of <code>PermittedPublicSecurityGroupRuleRanges</code>.</p>
    public let permittedPublicSecurityGroupRuleRanges: [PortRange]?
    /// <p>A set of properties specified within a configuration classification.</p>
    public let properties: [String:String]?

    public init (
        blockPublicSecurityGroupRules: Bool = false,
        classification: String? = nil,
        configurations: [Configuration]? = nil,
        permittedPublicSecurityGroupRuleRanges: [PortRange]? = nil,
        properties: [String:String]? = nil
    )
    {
        self.blockPublicSecurityGroupRules = blockPublicSecurityGroupRules
        self.classification = classification
        self.configurations = configurations
        self.permittedPublicSecurityGroupRuleRanges = permittedPublicSecurityGroupRuleRanges
        self.properties = properties
    }
}

extension BlockPublicAccessConfigurationMetadata: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createdByArn = "CreatedByArn"
        case creationDateTime = "CreationDateTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdByArn = createdByArn {
            try encodeContainer.encode(createdByArn, forKey: .createdByArn)
        }
        if let creationDateTime = creationDateTime {
            try encodeContainer.encode(creationDateTime.timeIntervalSince1970, forKey: .creationDateTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let createdByArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdByArn)
        createdByArn = createdByArnDecoded
    }
}

extension BlockPublicAccessConfigurationMetadata: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BlockPublicAccessConfigurationMetadata(createdByArn: \(String(describing: createdByArn)), creationDateTime: \(String(describing: creationDateTime)))"}
}

/// <p>Properties that describe the AWS principal that created the
///             <code>BlockPublicAccessConfiguration</code> using the
///             <code>PutBlockPublicAccessConfiguration</code> action as well as the date and time that
///          the configuration was created. Each time a configuration for block public access is
///          updated, Amazon EMR updates this metadata.</p>
public struct BlockPublicAccessConfigurationMetadata: Equatable {
    /// <p>The Amazon Resource Name that created or last modified the configuration.</p>
    public let createdByArn: String?
    /// <p>The date and time that the configuration was created.</p>
    public let creationDateTime: Date?

    public init (
        createdByArn: String? = nil,
        creationDateTime: Date? = nil
    )
    {
        self.createdByArn = createdByArn
        self.creationDateTime = creationDateTime
    }
}

extension BootstrapActionConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case scriptBootstrapAction = "ScriptBootstrapAction"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scriptBootstrapAction = scriptBootstrapAction {
            try encodeContainer.encode(scriptBootstrapAction, forKey: .scriptBootstrapAction)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let scriptBootstrapActionDecoded = try containerValues.decodeIfPresent(ScriptBootstrapActionConfig.self, forKey: .scriptBootstrapAction)
        scriptBootstrapAction = scriptBootstrapActionDecoded
    }
}

extension BootstrapActionConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BootstrapActionConfig(name: \(String(describing: name)), scriptBootstrapAction: \(String(describing: scriptBootstrapAction)))"}
}

/// <p>Configuration of a bootstrap action.</p>
public struct BootstrapActionConfig: Equatable {
    /// <p>The name of the bootstrap action.</p>
    public let name: String?
    /// <p>The script run by the bootstrap action.</p>
    public let scriptBootstrapAction: ScriptBootstrapActionConfig?

    public init (
        name: String? = nil,
        scriptBootstrapAction: ScriptBootstrapActionConfig? = nil
    )
    {
        self.name = name
        self.scriptBootstrapAction = scriptBootstrapAction
    }
}

extension BootstrapActionDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bootstrapActionConfig = "BootstrapActionConfig"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bootstrapActionConfig = bootstrapActionConfig {
            try encodeContainer.encode(bootstrapActionConfig, forKey: .bootstrapActionConfig)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bootstrapActionConfigDecoded = try containerValues.decodeIfPresent(BootstrapActionConfig.self, forKey: .bootstrapActionConfig)
        bootstrapActionConfig = bootstrapActionConfigDecoded
    }
}

extension BootstrapActionDetail: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BootstrapActionDetail(bootstrapActionConfig: \(String(describing: bootstrapActionConfig)))"}
}

/// <p>Reports the configuration of a bootstrap action in a cluster (job flow).</p>
public struct BootstrapActionDetail: Equatable {
    /// <p>A description of the bootstrap action.</p>
    public let bootstrapActionConfig: BootstrapActionConfig?

    public init (
        bootstrapActionConfig: BootstrapActionConfig? = nil
    )
    {
        self.bootstrapActionConfig = bootstrapActionConfig
    }
}

extension CancelStepsInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case reason = "Reason"
        case status = "Status"
        case stepId = "StepId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let stepId = stepId {
            try encodeContainer.encode(stepId, forKey: .stepId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stepIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stepId)
        stepId = stepIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CancelStepsRequestStatus.self, forKey: .status)
        status = statusDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension CancelStepsInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CancelStepsInfo(reason: \(String(describing: reason)), status: \(String(describing: status)), stepId: \(String(describing: stepId)))"}
}

/// <p>Specification of the status of a CancelSteps request. Available only in Amazon EMR
///          version 4.8.0 and later, excluding version 5.0.0.</p>
public struct CancelStepsInfo: Equatable {
    /// <p>The reason for the failure if the CancelSteps request fails.</p>
    public let reason: String?
    /// <p>The status of a CancelSteps Request. The value may be SUBMITTED or FAILED.</p>
    public let status: CancelStepsRequestStatus?
    /// <p>The encrypted StepId of a step.</p>
    public let stepId: String?

    public init (
        reason: String? = nil,
        status: CancelStepsRequestStatus? = nil,
        stepId: String? = nil
    )
    {
        self.reason = reason
        self.status = status
        self.stepId = stepId
    }
}

public struct CancelStepsInputBodyMiddleware: Middleware {
    public let id: String = "CancelStepsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CancelStepsInput>,
                  next: H) -> Swift.Result<OperationOutput<CancelStepsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CancelStepsInput>
    public typealias MOutput = OperationOutput<CancelStepsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CancelStepsOutputError>
}

extension CancelStepsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CancelStepsInput(clusterId: \(String(describing: clusterId)), stepCancellationOption: \(String(describing: stepCancellationOption)), stepIds: \(String(describing: stepIds)))"}
}

extension CancelStepsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case stepCancellationOption = "StepCancellationOption"
        case stepIds = "StepIds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let stepCancellationOption = stepCancellationOption {
            try encodeContainer.encode(stepCancellationOption.rawValue, forKey: .stepCancellationOption)
        }
        if let stepIds = stepIds {
            var stepIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stepIds)
            for stepidslist0 in stepIds {
                try stepIdsContainer.encode(stepidslist0)
            }
        }
    }
}

public struct CancelStepsInputHeadersMiddleware: Middleware {
    public let id: String = "CancelStepsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CancelStepsInput>,
                  next: H) -> Swift.Result<OperationOutput<CancelStepsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CancelStepsInput>
    public typealias MOutput = OperationOutput<CancelStepsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CancelStepsOutputError>
}

public struct CancelStepsInputQueryItemMiddleware: Middleware {
    public let id: String = "CancelStepsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CancelStepsInput>,
                  next: H) -> Swift.Result<OperationOutput<CancelStepsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CancelStepsInput>
    public typealias MOutput = OperationOutput<CancelStepsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CancelStepsOutputError>
}

/// <p>The input argument to the <a>CancelSteps</a> operation.</p>
public struct CancelStepsInput: Equatable {
    /// <p>The <code>ClusterID</code> for the specified steps that will be canceled. Use <a>RunJobFlow</a> and <a>ListClusters</a> to get ClusterIDs. </p>
    public let clusterId: String?
    /// <p>The option to choose to cancel <code>RUNNING</code> steps. By default, the value is
    ///             <code>SEND_INTERRUPT</code>.</p>
    public let stepCancellationOption: StepCancellationOption?
    /// <p>The list of <code>StepIDs</code> to cancel. Use <a>ListSteps</a> to get steps
    ///          and their states for the specified cluster.</p>
    public let stepIds: [String]?

    public init (
        clusterId: String? = nil,
        stepCancellationOption: StepCancellationOption? = nil,
        stepIds: [String]? = nil
    )
    {
        self.clusterId = clusterId
        self.stepCancellationOption = stepCancellationOption
        self.stepIds = stepIds
    }
}

struct CancelStepsInputBody: Equatable {
    public let clusterId: String?
    public let stepIds: [String]?
    public let stepCancellationOption: StepCancellationOption?
}

extension CancelStepsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case stepCancellationOption = "StepCancellationOption"
        case stepIds = "StepIds"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let stepIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .stepIds)
        var stepIdsDecoded0:[String]? = nil
        if let stepIdsContainer = stepIdsContainer {
            stepIdsDecoded0 = [String]()
            for string0 in stepIdsContainer {
                if let string0 = string0 {
                    stepIdsDecoded0?.append(string0)
                }
            }
        }
        stepIds = stepIdsDecoded0
        let stepCancellationOptionDecoded = try containerValues.decodeIfPresent(StepCancellationOption.self, forKey: .stepCancellationOption)
        stepCancellationOption = stepCancellationOptionDecoded
    }
}

extension CancelStepsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelStepsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CancelStepsOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelStepsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CancelStepsOutputResponse(cancelStepsInfoList: \(String(describing: cancelStepsInfoList)))"}
}

extension CancelStepsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CancelStepsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cancelStepsInfoList = output.cancelStepsInfoList
        } else {
            self.cancelStepsInfoList = nil
        }
    }
}

/// <p> The output for the <a>CancelSteps</a> operation. </p>
public struct CancelStepsOutputResponse: Equatable {
    /// <p>A list of <a>CancelStepsInfo</a>, which shows the status of specified cancel
    ///          requests for each <code>StepID</code> specified.</p>
    public let cancelStepsInfoList: [CancelStepsInfo]?

    public init (
        cancelStepsInfoList: [CancelStepsInfo]? = nil
    )
    {
        self.cancelStepsInfoList = cancelStepsInfoList
    }
}

struct CancelStepsOutputResponseBody: Equatable {
    public let cancelStepsInfoList: [CancelStepsInfo]?
}

extension CancelStepsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cancelStepsInfoList = "CancelStepsInfoList"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cancelStepsInfoListContainer = try containerValues.decodeIfPresent([CancelStepsInfo?].self, forKey: .cancelStepsInfoList)
        var cancelStepsInfoListDecoded0:[CancelStepsInfo]? = nil
        if let cancelStepsInfoListContainer = cancelStepsInfoListContainer {
            cancelStepsInfoListDecoded0 = [CancelStepsInfo]()
            for structure0 in cancelStepsInfoListContainer {
                if let structure0 = structure0 {
                    cancelStepsInfoListDecoded0?.append(structure0)
                }
            }
        }
        cancelStepsInfoList = cancelStepsInfoListDecoded0
    }
}

public enum CancelStepsRequestStatus {
    case failed
    case submitted
    case sdkUnknown(String)
}

extension CancelStepsRequestStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CancelStepsRequestStatus] {
        return [
            .failed,
            .submitted,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .failed: return "FAILED"
        case .submitted: return "SUBMITTED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CancelStepsRequestStatus(rawValue: rawValue) ?? CancelStepsRequestStatus.sdkUnknown(rawValue)
    }
}

extension CloudWatchAlarmDefinition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case comparisonOperator = "ComparisonOperator"
        case dimensions = "Dimensions"
        case evaluationPeriods = "EvaluationPeriods"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case period = "Period"
        case statistic = "Statistic"
        case threshold = "Threshold"
        case unit = "Unit"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparisonOperator = comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let dimensions = dimensions {
            var dimensionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensions)
            for metricdimensionlist0 in dimensions {
                try dimensionsContainer.encode(metricdimensionlist0)
            }
        }
        if let evaluationPeriods = evaluationPeriods {
            try encodeContainer.encode(evaluationPeriods, forKey: .evaluationPeriods)
        }
        if let metricName = metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let namespace = namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
        if let period = period {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let statistic = statistic {
            try encodeContainer.encode(statistic.rawValue, forKey: .statistic)
        }
        if let threshold = threshold {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
        if let unit = unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(ComparisonOperator.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let evaluationPeriodsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .evaluationPeriods)
        evaluationPeriods = evaluationPeriodsDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let periodDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .period)
        period = periodDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(Statistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let thresholdDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .threshold)
        threshold = thresholdDecoded
        let unitDecoded = try containerValues.decodeIfPresent(Unit.self, forKey: .unit)
        unit = unitDecoded
        let dimensionsContainer = try containerValues.decodeIfPresent([MetricDimension?].self, forKey: .dimensions)
        var dimensionsDecoded0:[MetricDimension]? = nil
        if let dimensionsContainer = dimensionsContainer {
            dimensionsDecoded0 = [MetricDimension]()
            for structure0 in dimensionsContainer {
                if let structure0 = structure0 {
                    dimensionsDecoded0?.append(structure0)
                }
            }
        }
        dimensions = dimensionsDecoded0
    }
}

extension CloudWatchAlarmDefinition: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CloudWatchAlarmDefinition(comparisonOperator: \(String(describing: comparisonOperator)), dimensions: \(String(describing: dimensions)), evaluationPeriods: \(String(describing: evaluationPeriods)), metricName: \(String(describing: metricName)), namespace: \(String(describing: namespace)), period: \(String(describing: period)), statistic: \(String(describing: statistic)), threshold: \(String(describing: threshold)), unit: \(String(describing: unit)))"}
}

/// <p>The definition of a CloudWatch metric alarm, which determines when an automatic scaling
///          activity is triggered. When the defined alarm conditions are satisfied, scaling activity
///          begins.</p>
public struct CloudWatchAlarmDefinition: Equatable {
    /// <p>Determines how the metric specified by <code>MetricName</code> is compared to the value
    ///          specified by <code>Threshold</code>.</p>
    public let comparisonOperator: ComparisonOperator?
    /// <p>A CloudWatch metric dimension.</p>
    public let dimensions: [MetricDimension]?
    /// <p>The number of periods, in five-minute increments, during which the alarm condition must
    ///          exist before the alarm triggers automatic scaling activity. The default value is
    ///             <code>1</code>.</p>
    public let evaluationPeriods: Int?
    /// <p>The name of the CloudWatch metric that is watched to determine an alarm
    ///          condition.</p>
    public let metricName: String?
    /// <p>The namespace for the CloudWatch metric. The default is
    ///             <code>AWS/ElasticMapReduce</code>.</p>
    public let namespace: String?
    /// <p>The period, in seconds, over which the statistic is applied. EMR CloudWatch metrics are
    ///          emitted every five minutes (300 seconds), so if an EMR CloudWatch metric is specified,
    ///          specify <code>300</code>.</p>
    public let period: Int?
    /// <p>The statistic to apply to the metric associated with the alarm. The default is
    ///             <code>AVERAGE</code>.</p>
    public let statistic: Statistic?
    /// <p>The value against which the specified statistic is compared.</p>
    public let threshold: Double?
    /// <p>The unit of measure associated with the CloudWatch metric being watched. The value
    ///          specified for <code>Unit</code> must correspond to the units specified in the CloudWatch
    ///          metric.</p>
    public let unit: Unit?

    public init (
        comparisonOperator: ComparisonOperator? = nil,
        dimensions: [MetricDimension]? = nil,
        evaluationPeriods: Int? = nil,
        metricName: String? = nil,
        namespace: String? = nil,
        period: Int? = nil,
        statistic: Statistic? = nil,
        threshold: Double? = nil,
        unit: Unit? = nil
    )
    {
        self.comparisonOperator = comparisonOperator
        self.dimensions = dimensions
        self.evaluationPeriods = evaluationPeriods
        self.metricName = metricName
        self.namespace = namespace
        self.period = period
        self.statistic = statistic
        self.threshold = threshold
        self.unit = unit
    }
}

extension Cluster: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applications = "Applications"
        case autoScalingRole = "AutoScalingRole"
        case autoTerminate = "AutoTerminate"
        case clusterArn = "ClusterArn"
        case configurations = "Configurations"
        case customAmiId = "CustomAmiId"
        case ebsRootVolumeSize = "EbsRootVolumeSize"
        case ec2InstanceAttributes = "Ec2InstanceAttributes"
        case id = "Id"
        case instanceCollectionType = "InstanceCollectionType"
        case kerberosAttributes = "KerberosAttributes"
        case logEncryptionKmsKeyId = "LogEncryptionKmsKeyId"
        case logUri = "LogUri"
        case masterPublicDnsName = "MasterPublicDnsName"
        case name = "Name"
        case normalizedInstanceHours = "NormalizedInstanceHours"
        case outpostArn = "OutpostArn"
        case placementGroups = "PlacementGroups"
        case releaseLabel = "ReleaseLabel"
        case repoUpgradeOnBoot = "RepoUpgradeOnBoot"
        case requestedAmiVersion = "RequestedAmiVersion"
        case runningAmiVersion = "RunningAmiVersion"
        case scaleDownBehavior = "ScaleDownBehavior"
        case securityConfiguration = "SecurityConfiguration"
        case serviceRole = "ServiceRole"
        case status = "Status"
        case stepConcurrencyLevel = "StepConcurrencyLevel"
        case tags = "Tags"
        case terminationProtected = "TerminationProtected"
        case visibleToAllUsers = "VisibleToAllUsers"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applications = applications {
            var applicationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .applications)
            for applicationlist0 in applications {
                try applicationsContainer.encode(applicationlist0)
            }
        }
        if let autoScalingRole = autoScalingRole {
            try encodeContainer.encode(autoScalingRole, forKey: .autoScalingRole)
        }
        if autoTerminate != false {
            try encodeContainer.encode(autoTerminate, forKey: .autoTerminate)
        }
        if let clusterArn = clusterArn {
            try encodeContainer.encode(clusterArn, forKey: .clusterArn)
        }
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configurationlist0 in configurations {
                try configurationsContainer.encode(configurationlist0)
            }
        }
        if let customAmiId = customAmiId {
            try encodeContainer.encode(customAmiId, forKey: .customAmiId)
        }
        if let ebsRootVolumeSize = ebsRootVolumeSize {
            try encodeContainer.encode(ebsRootVolumeSize, forKey: .ebsRootVolumeSize)
        }
        if let ec2InstanceAttributes = ec2InstanceAttributes {
            try encodeContainer.encode(ec2InstanceAttributes, forKey: .ec2InstanceAttributes)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let instanceCollectionType = instanceCollectionType {
            try encodeContainer.encode(instanceCollectionType.rawValue, forKey: .instanceCollectionType)
        }
        if let kerberosAttributes = kerberosAttributes {
            try encodeContainer.encode(kerberosAttributes, forKey: .kerberosAttributes)
        }
        if let logEncryptionKmsKeyId = logEncryptionKmsKeyId {
            try encodeContainer.encode(logEncryptionKmsKeyId, forKey: .logEncryptionKmsKeyId)
        }
        if let logUri = logUri {
            try encodeContainer.encode(logUri, forKey: .logUri)
        }
        if let masterPublicDnsName = masterPublicDnsName {
            try encodeContainer.encode(masterPublicDnsName, forKey: .masterPublicDnsName)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let normalizedInstanceHours = normalizedInstanceHours {
            try encodeContainer.encode(normalizedInstanceHours, forKey: .normalizedInstanceHours)
        }
        if let outpostArn = outpostArn {
            try encodeContainer.encode(outpostArn, forKey: .outpostArn)
        }
        if let placementGroups = placementGroups {
            var placementGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .placementGroups)
            for placementgroupconfiglist0 in placementGroups {
                try placementGroupsContainer.encode(placementgroupconfiglist0)
            }
        }
        if let releaseLabel = releaseLabel {
            try encodeContainer.encode(releaseLabel, forKey: .releaseLabel)
        }
        if let repoUpgradeOnBoot = repoUpgradeOnBoot {
            try encodeContainer.encode(repoUpgradeOnBoot.rawValue, forKey: .repoUpgradeOnBoot)
        }
        if let requestedAmiVersion = requestedAmiVersion {
            try encodeContainer.encode(requestedAmiVersion, forKey: .requestedAmiVersion)
        }
        if let runningAmiVersion = runningAmiVersion {
            try encodeContainer.encode(runningAmiVersion, forKey: .runningAmiVersion)
        }
        if let scaleDownBehavior = scaleDownBehavior {
            try encodeContainer.encode(scaleDownBehavior.rawValue, forKey: .scaleDownBehavior)
        }
        if let securityConfiguration = securityConfiguration {
            try encodeContainer.encode(securityConfiguration, forKey: .securityConfiguration)
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let stepConcurrencyLevel = stepConcurrencyLevel {
            try encodeContainer.encode(stepConcurrencyLevel, forKey: .stepConcurrencyLevel)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if terminationProtected != false {
            try encodeContainer.encode(terminationProtected, forKey: .terminationProtected)
        }
        if visibleToAllUsers != false {
            try encodeContainer.encode(visibleToAllUsers, forKey: .visibleToAllUsers)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ClusterStatus.self, forKey: .status)
        status = statusDecoded
        let ec2InstanceAttributesDecoded = try containerValues.decodeIfPresent(Ec2InstanceAttributes.self, forKey: .ec2InstanceAttributes)
        ec2InstanceAttributes = ec2InstanceAttributesDecoded
        let instanceCollectionTypeDecoded = try containerValues.decodeIfPresent(InstanceCollectionType.self, forKey: .instanceCollectionType)
        instanceCollectionType = instanceCollectionTypeDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logUri)
        logUri = logUriDecoded
        let logEncryptionKmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logEncryptionKmsKeyId)
        logEncryptionKmsKeyId = logEncryptionKmsKeyIdDecoded
        let requestedAmiVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requestedAmiVersion)
        requestedAmiVersion = requestedAmiVersionDecoded
        let runningAmiVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .runningAmiVersion)
        runningAmiVersion = runningAmiVersionDecoded
        let releaseLabelDecoded = try containerValues.decodeIfPresent(String.self, forKey: .releaseLabel)
        releaseLabel = releaseLabelDecoded
        let autoTerminateDecoded = try containerValues.decode(Bool.self, forKey: .autoTerminate)
        autoTerminate = autoTerminateDecoded
        let terminationProtectedDecoded = try containerValues.decode(Bool.self, forKey: .terminationProtected)
        terminationProtected = terminationProtectedDecoded
        let visibleToAllUsersDecoded = try containerValues.decode(Bool.self, forKey: .visibleToAllUsers)
        visibleToAllUsers = visibleToAllUsersDecoded
        let applicationsContainer = try containerValues.decodeIfPresent([Application?].self, forKey: .applications)
        var applicationsDecoded0:[Application]? = nil
        if let applicationsContainer = applicationsContainer {
            applicationsDecoded0 = [Application]()
            for structure0 in applicationsContainer {
                if let structure0 = structure0 {
                    applicationsDecoded0?.append(structure0)
                }
            }
        }
        applications = applicationsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let serviceRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let normalizedInstanceHoursDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .normalizedInstanceHours)
        normalizedInstanceHours = normalizedInstanceHoursDecoded
        let masterPublicDnsNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .masterPublicDnsName)
        masterPublicDnsName = masterPublicDnsNameDecoded
        let configurationsContainer = try containerValues.decodeIfPresent([Configuration?].self, forKey: .configurations)
        var configurationsDecoded0:[Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [Configuration]()
            for structure0 in configurationsContainer {
                if let structure0 = structure0 {
                    configurationsDecoded0?.append(structure0)
                }
            }
        }
        configurations = configurationsDecoded0
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let autoScalingRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingRole)
        autoScalingRole = autoScalingRoleDecoded
        let scaleDownBehaviorDecoded = try containerValues.decodeIfPresent(ScaleDownBehavior.self, forKey: .scaleDownBehavior)
        scaleDownBehavior = scaleDownBehaviorDecoded
        let customAmiIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customAmiId)
        customAmiId = customAmiIdDecoded
        let ebsRootVolumeSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .ebsRootVolumeSize)
        ebsRootVolumeSize = ebsRootVolumeSizeDecoded
        let repoUpgradeOnBootDecoded = try containerValues.decodeIfPresent(RepoUpgradeOnBoot.self, forKey: .repoUpgradeOnBoot)
        repoUpgradeOnBoot = repoUpgradeOnBootDecoded
        let kerberosAttributesDecoded = try containerValues.decodeIfPresent(KerberosAttributes.self, forKey: .kerberosAttributes)
        kerberosAttributes = kerberosAttributesDecoded
        let clusterArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
        let outpostArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outpostArn)
        outpostArn = outpostArnDecoded
        let stepConcurrencyLevelDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .stepConcurrencyLevel)
        stepConcurrencyLevel = stepConcurrencyLevelDecoded
        let placementGroupsContainer = try containerValues.decodeIfPresent([PlacementGroupConfig?].self, forKey: .placementGroups)
        var placementGroupsDecoded0:[PlacementGroupConfig]? = nil
        if let placementGroupsContainer = placementGroupsContainer {
            placementGroupsDecoded0 = [PlacementGroupConfig]()
            for structure0 in placementGroupsContainer {
                if let structure0 = structure0 {
                    placementGroupsDecoded0?.append(structure0)
                }
            }
        }
        placementGroups = placementGroupsDecoded0
    }
}

extension Cluster: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Cluster(applications: \(String(describing: applications)), autoScalingRole: \(String(describing: autoScalingRole)), autoTerminate: \(String(describing: autoTerminate)), clusterArn: \(String(describing: clusterArn)), configurations: \(String(describing: configurations)), customAmiId: \(String(describing: customAmiId)), ebsRootVolumeSize: \(String(describing: ebsRootVolumeSize)), ec2InstanceAttributes: \(String(describing: ec2InstanceAttributes)), id: \(String(describing: id)), instanceCollectionType: \(String(describing: instanceCollectionType)), kerberosAttributes: \(String(describing: kerberosAttributes)), logEncryptionKmsKeyId: \(String(describing: logEncryptionKmsKeyId)), logUri: \(String(describing: logUri)), masterPublicDnsName: \(String(describing: masterPublicDnsName)), name: \(String(describing: name)), normalizedInstanceHours: \(String(describing: normalizedInstanceHours)), outpostArn: \(String(describing: outpostArn)), placementGroups: \(String(describing: placementGroups)), releaseLabel: \(String(describing: releaseLabel)), repoUpgradeOnBoot: \(String(describing: repoUpgradeOnBoot)), requestedAmiVersion: \(String(describing: requestedAmiVersion)), runningAmiVersion: \(String(describing: runningAmiVersion)), scaleDownBehavior: \(String(describing: scaleDownBehavior)), securityConfiguration: \(String(describing: securityConfiguration)), serviceRole: \(String(describing: serviceRole)), status: \(String(describing: status)), stepConcurrencyLevel: \(String(describing: stepConcurrencyLevel)), tags: \(String(describing: tags)), terminationProtected: \(String(describing: terminationProtected)), visibleToAllUsers: \(String(describing: visibleToAllUsers)))"}
}

/// <p>The detailed description of the cluster.</p>
public struct Cluster: Equatable {
    /// <p>The applications installed on this cluster.</p>
    public let applications: [Application]?
    /// <p>An IAM role for automatic scaling policies. The default role is
    ///             <code>EMR_AutoScaling_DefaultRole</code>. The IAM role provides permissions that the
    ///          automatic scaling feature requires to launch and terminate EC2 instances in an instance
    ///          group.</p>
    public let autoScalingRole: String?
    /// <p>Specifies whether the cluster should terminate after completing all steps.</p>
    public let autoTerminate: Bool
    /// <p>The Amazon Resource Name of the cluster.</p>
    public let clusterArn: String?
    /// <p>Applies only to Amazon EMR releases 4.x and later. The list of Configurations supplied
    ///          to the EMR cluster.</p>
    public let configurations: [Configuration]?
    /// <p>Available only in Amazon EMR version 5.7.0 and later. The ID of a custom Amazon
    ///          EBS-backed Linux AMI if the cluster uses a custom AMI.</p>
    public let customAmiId: String?
    /// <p>The size, in GiB, of the Amazon EBS root device volume of the Linux AMI that is used for
    ///          each EC2 instance. Available in Amazon EMR version 4.x and later.</p>
    public let ebsRootVolumeSize: Int?
    /// <p>Provides information about the EC2 instances in a cluster grouped by category. For
    ///          example, key name, subnet ID, IAM instance profile, and so on.</p>
    public let ec2InstanceAttributes: Ec2InstanceAttributes?
    /// <p>The unique identifier for the cluster.</p>
    public let id: String?
    /// <note>
    ///             <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and
    ///             later, excluding 5.0.x versions.</p>
    ///          </note>
    ///          <p>The instance group configuration of the cluster. A value of <code>INSTANCE_GROUP</code>
    ///          indicates a uniform instance group configuration. A value of <code>INSTANCE_FLEET</code>
    ///          indicates an instance fleets configuration.</p>
    public let instanceCollectionType: InstanceCollectionType?
    /// <p>Attributes for Kerberos configuration when Kerberos authentication is enabled using a
    ///          security configuration. For more information see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-kerberos.html">Use Kerberos Authentication</a>
    ///          in the <i>Amazon EMR Management Guide</i>.</p>
    public let kerberosAttributes: KerberosAttributes?
    /// <p> The AWS KMS customer master key (CMK) used for encrypting log files. This attribute is
    ///          only available with EMR version 5.30.0 and later, excluding EMR 6.0.0. </p>
    public let logEncryptionKmsKeyId: String?
    /// <p>The path to the Amazon S3 location where logs for this cluster are stored.</p>
    public let logUri: String?
    /// <p>The DNS name of the master node. If the cluster is on a private subnet, this is the
    ///          private DNS name. On a public subnet, this is the public DNS name.</p>
    public let masterPublicDnsName: String?
    /// <p>The name of the cluster.</p>
    public let name: String?
    /// <p>An approximation of the cost of the cluster, represented in m1.small/hours. This value
    ///          is incremented one time for every hour an m1.small instance runs. Larger instances are
    ///          weighted more, so an EC2 instance that is roughly four times more expensive would result in
    ///          the normalized instance hours being incremented by four. This result is only an
    ///          approximation and does not reflect the actual billing rate.</p>
    public let normalizedInstanceHours: Int?
    /// <p> The Amazon Resource Name (ARN) of the Outpost where the cluster is launched. </p>
    public let outpostArn: String?
    /// <p>Placement group configured for an Amazon EMR cluster.</p>
    public let placementGroups: [PlacementGroupConfig]?
    /// <p>The Amazon EMR release label, which determines the version of open-source application
    ///          packages installed on the cluster. Release labels are in the form <code>emr-x.x.x</code>,
    ///          where x.x.x is an Amazon EMR release version such as <code>emr-5.14.0</code>. For more
    ///          information about Amazon EMR release versions and included application versions and
    ///          features, see <a href="https://docs.aws.amazon.com/emr/latest/ReleaseGuide/">https://docs.aws.amazon.com/emr/latest/ReleaseGuide/</a>. The release
    ///          label applies only to Amazon EMR releases version 4.0 and later. Earlier versions use
    ///             <code>AmiVersion</code>.</p>
    public let releaseLabel: String?
    /// <p>Applies only when <code>CustomAmiID</code> is used. Specifies the type of updates that
    ///          are applied from the Amazon Linux AMI package repositories when an instance boots using the
    ///          AMI.</p>
    public let repoUpgradeOnBoot: RepoUpgradeOnBoot?
    /// <p>The AMI version requested for this cluster.</p>
    public let requestedAmiVersion: String?
    /// <p>The AMI version running on this cluster.</p>
    public let runningAmiVersion: String?
    /// <p>The way that individual Amazon EC2 instances terminate when an automatic scale-in
    ///          activity occurs or an instance group is resized. <code>TERMINATE_AT_INSTANCE_HOUR</code>
    ///          indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of
    ///          when the request to terminate the instance was submitted. This option is only available
    ///          with Amazon EMR 5.1.0 and later and is the default for clusters created using that version.
    ///             <code>TERMINATE_AT_TASK_COMPLETION</code> indicates that Amazon EMR adds nodes to a deny
    ///          list and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of
    ///          the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes
    ///          first and blocks instance termination if it could lead to HDFS corruption.
    ///             <code>TERMINATE_AT_TASK_COMPLETION</code> is available only in Amazon EMR version 4.1.0
    ///          and later, and is the default for versions of Amazon EMR earlier than 5.1.0.</p>
    public let scaleDownBehavior: ScaleDownBehavior?
    /// <p>The name of the security configuration applied to the cluster.</p>
    public let securityConfiguration: String?
    /// <p>The IAM role that will be assumed by the Amazon EMR service to access AWS resources on
    ///          your behalf.</p>
    public let serviceRole: String?
    /// <p>The current status details about the cluster.</p>
    public let status: ClusterStatus?
    /// <p>Specifies the number of steps that can be executed concurrently.</p>
    public let stepConcurrencyLevel: Int?
    /// <p>A list of tags associated with a cluster.</p>
    public let tags: [Tag]?
    /// <p>Indicates whether Amazon EMR will lock the cluster to prevent the EC2 instances from
    ///          being terminated by an API call or user intervention, or in the event of a cluster
    ///          error.</p>
    public let terminationProtected: Bool
    /// <p>Indicates whether the cluster is visible to all IAM users of the AWS account associated
    ///          with the cluster. The default value, <code>true</code>, indicates that all IAM users in the
    ///          AWS account can perform cluster actions if they have the proper IAM policy permissions. If
    ///          this value is <code>false</code>, only the IAM user that created the cluster can perform
    ///          actions. This value can be changed on a running cluster by using the <a>SetVisibleToAllUsers</a> action. You can override the default value of
    ///             <code>true</code> when you create a cluster by using the <code>VisibleToAllUsers</code>
    ///          parameter of the <code>RunJobFlow</code> action.</p>
    public let visibleToAllUsers: Bool

    public init (
        applications: [Application]? = nil,
        autoScalingRole: String? = nil,
        autoTerminate: Bool = false,
        clusterArn: String? = nil,
        configurations: [Configuration]? = nil,
        customAmiId: String? = nil,
        ebsRootVolumeSize: Int? = nil,
        ec2InstanceAttributes: Ec2InstanceAttributes? = nil,
        id: String? = nil,
        instanceCollectionType: InstanceCollectionType? = nil,
        kerberosAttributes: KerberosAttributes? = nil,
        logEncryptionKmsKeyId: String? = nil,
        logUri: String? = nil,
        masterPublicDnsName: String? = nil,
        name: String? = nil,
        normalizedInstanceHours: Int? = nil,
        outpostArn: String? = nil,
        placementGroups: [PlacementGroupConfig]? = nil,
        releaseLabel: String? = nil,
        repoUpgradeOnBoot: RepoUpgradeOnBoot? = nil,
        requestedAmiVersion: String? = nil,
        runningAmiVersion: String? = nil,
        scaleDownBehavior: ScaleDownBehavior? = nil,
        securityConfiguration: String? = nil,
        serviceRole: String? = nil,
        status: ClusterStatus? = nil,
        stepConcurrencyLevel: Int? = nil,
        tags: [Tag]? = nil,
        terminationProtected: Bool = false,
        visibleToAllUsers: Bool = false
    )
    {
        self.applications = applications
        self.autoScalingRole = autoScalingRole
        self.autoTerminate = autoTerminate
        self.clusterArn = clusterArn
        self.configurations = configurations
        self.customAmiId = customAmiId
        self.ebsRootVolumeSize = ebsRootVolumeSize
        self.ec2InstanceAttributes = ec2InstanceAttributes
        self.id = id
        self.instanceCollectionType = instanceCollectionType
        self.kerberosAttributes = kerberosAttributes
        self.logEncryptionKmsKeyId = logEncryptionKmsKeyId
        self.logUri = logUri
        self.masterPublicDnsName = masterPublicDnsName
        self.name = name
        self.normalizedInstanceHours = normalizedInstanceHours
        self.outpostArn = outpostArn
        self.placementGroups = placementGroups
        self.releaseLabel = releaseLabel
        self.repoUpgradeOnBoot = repoUpgradeOnBoot
        self.requestedAmiVersion = requestedAmiVersion
        self.runningAmiVersion = runningAmiVersion
        self.scaleDownBehavior = scaleDownBehavior
        self.securityConfiguration = securityConfiguration
        self.serviceRole = serviceRole
        self.status = status
        self.stepConcurrencyLevel = stepConcurrencyLevel
        self.tags = tags
        self.terminationProtected = terminationProtected
        self.visibleToAllUsers = visibleToAllUsers
    }
}

public enum ClusterState {
    case bootstrapping
    case running
    case starting
    case terminated
    case terminatedWithErrors
    case terminating
    case waiting
    case sdkUnknown(String)
}

extension ClusterState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ClusterState] {
        return [
            .bootstrapping,
            .running,
            .starting,
            .terminated,
            .terminatedWithErrors,
            .terminating,
            .waiting,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .bootstrapping: return "BOOTSTRAPPING"
        case .running: return "RUNNING"
        case .starting: return "STARTING"
        case .terminated: return "TERMINATED"
        case .terminatedWithErrors: return "TERMINATED_WITH_ERRORS"
        case .terminating: return "TERMINATING"
        case .waiting: return "WAITING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ClusterState(rawValue: rawValue) ?? ClusterState.sdkUnknown(rawValue)
    }
}

extension ClusterStateChangeReason: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(ClusterStateChangeReasonCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ClusterStateChangeReason: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ClusterStateChangeReason(code: \(String(describing: code)), message: \(String(describing: message)))"}
}

/// <p>The reason that the cluster changed to its current state.</p>
public struct ClusterStateChangeReason: Equatable {
    /// <p>The programmatic code for the state change reason.</p>
    public let code: ClusterStateChangeReasonCode?
    /// <p>The descriptive message for the state change reason.</p>
    public let message: String?

    public init (
        code: ClusterStateChangeReasonCode? = nil,
        message: String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

public enum ClusterStateChangeReasonCode {
    case allStepsCompleted
    case bootstrapFailure
    case instanceFailure
    case instanceFleetTimeout
    case internalError
    case stepFailure
    case userRequest
    case validationError
    case sdkUnknown(String)
}

extension ClusterStateChangeReasonCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ClusterStateChangeReasonCode] {
        return [
            .allStepsCompleted,
            .bootstrapFailure,
            .instanceFailure,
            .instanceFleetTimeout,
            .internalError,
            .stepFailure,
            .userRequest,
            .validationError,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .allStepsCompleted: return "ALL_STEPS_COMPLETED"
        case .bootstrapFailure: return "BOOTSTRAP_FAILURE"
        case .instanceFailure: return "INSTANCE_FAILURE"
        case .instanceFleetTimeout: return "INSTANCE_FLEET_TIMEOUT"
        case .internalError: return "INTERNAL_ERROR"
        case .stepFailure: return "STEP_FAILURE"
        case .userRequest: return "USER_REQUEST"
        case .validationError: return "VALIDATION_ERROR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ClusterStateChangeReasonCode(rawValue: rawValue) ?? ClusterStateChangeReasonCode.sdkUnknown(rawValue)
    }
}

extension ClusterStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case state = "State"
        case stateChangeReason = "StateChangeReason"
        case timeline = "Timeline"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateChangeReason = stateChangeReason {
            try encodeContainer.encode(stateChangeReason, forKey: .stateChangeReason)
        }
        if let timeline = timeline {
            try encodeContainer.encode(timeline, forKey: .timeline)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(ClusterState.self, forKey: .state)
        state = stateDecoded
        let stateChangeReasonDecoded = try containerValues.decodeIfPresent(ClusterStateChangeReason.self, forKey: .stateChangeReason)
        stateChangeReason = stateChangeReasonDecoded
        let timelineDecoded = try containerValues.decodeIfPresent(ClusterTimeline.self, forKey: .timeline)
        timeline = timelineDecoded
    }
}

extension ClusterStatus: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ClusterStatus(state: \(String(describing: state)), stateChangeReason: \(String(describing: stateChangeReason)), timeline: \(String(describing: timeline)))"}
}

/// <p>The detailed status of the cluster.</p>
public struct ClusterStatus: Equatable {
    /// <p>The current state of the cluster.</p>
    public let state: ClusterState?
    /// <p>The reason for the cluster status change.</p>
    public let stateChangeReason: ClusterStateChangeReason?
    /// <p>A timeline that represents the status of a cluster over the lifetime of the
    ///          cluster.</p>
    public let timeline: ClusterTimeline?

    public init (
        state: ClusterState? = nil,
        stateChangeReason: ClusterStateChangeReason? = nil,
        timeline: ClusterTimeline? = nil
    )
    {
        self.state = state
        self.stateChangeReason = stateChangeReason
        self.timeline = timeline
    }
}

extension ClusterSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterArn = "ClusterArn"
        case id = "Id"
        case name = "Name"
        case normalizedInstanceHours = "NormalizedInstanceHours"
        case outpostArn = "OutpostArn"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterArn = clusterArn {
            try encodeContainer.encode(clusterArn, forKey: .clusterArn)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let normalizedInstanceHours = normalizedInstanceHours {
            try encodeContainer.encode(normalizedInstanceHours, forKey: .normalizedInstanceHours)
        }
        if let outpostArn = outpostArn {
            try encodeContainer.encode(outpostArn, forKey: .outpostArn)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ClusterStatus.self, forKey: .status)
        status = statusDecoded
        let normalizedInstanceHoursDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .normalizedInstanceHours)
        normalizedInstanceHours = normalizedInstanceHoursDecoded
        let clusterArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
        let outpostArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outpostArn)
        outpostArn = outpostArnDecoded
    }
}

extension ClusterSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ClusterSummary(clusterArn: \(String(describing: clusterArn)), id: \(String(describing: id)), name: \(String(describing: name)), normalizedInstanceHours: \(String(describing: normalizedInstanceHours)), outpostArn: \(String(describing: outpostArn)), status: \(String(describing: status)))"}
}

/// <p>The summary description of the cluster.</p>
public struct ClusterSummary: Equatable {
    /// <p>The Amazon Resource Name of the cluster.</p>
    public let clusterArn: String?
    /// <p>The unique identifier for the cluster.</p>
    public let id: String?
    /// <p>The name of the cluster.</p>
    public let name: String?
    /// <p>An approximation of the cost of the cluster, represented in m1.small/hours. This value
    ///          is incremented one time for every hour an m1.small instance runs. Larger instances are
    ///          weighted more, so an EC2 instance that is roughly four times more expensive would result in
    ///          the normalized instance hours being incremented by four. This result is only an
    ///          approximation and does not reflect the actual billing rate.</p>
    public let normalizedInstanceHours: Int?
    /// <p> The Amazon Resource Name (ARN) of the Outpost where the cluster is launched. </p>
    public let outpostArn: String?
    /// <p>The details about the current status of the cluster.</p>
    public let status: ClusterStatus?

    public init (
        clusterArn: String? = nil,
        id: String? = nil,
        name: String? = nil,
        normalizedInstanceHours: Int? = nil,
        outpostArn: String? = nil,
        status: ClusterStatus? = nil
    )
    {
        self.clusterArn = clusterArn
        self.id = id
        self.name = name
        self.normalizedInstanceHours = normalizedInstanceHours
        self.outpostArn = outpostArn
        self.status = status
    }
}

extension ClusterTimeline: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationDateTime = "CreationDateTime"
        case endDateTime = "EndDateTime"
        case readyDateTime = "ReadyDateTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDateTime = creationDateTime {
            try encodeContainer.encode(creationDateTime.timeIntervalSince1970, forKey: .creationDateTime)
        }
        if let endDateTime = endDateTime {
            try encodeContainer.encode(endDateTime.timeIntervalSince1970, forKey: .endDateTime)
        }
        if let readyDateTime = readyDateTime {
            try encodeContainer.encode(readyDateTime.timeIntervalSince1970, forKey: .readyDateTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let readyDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .readyDateTime)
        readyDateTime = readyDateTimeDecoded
        let endDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endDateTime)
        endDateTime = endDateTimeDecoded
    }
}

extension ClusterTimeline: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ClusterTimeline(creationDateTime: \(String(describing: creationDateTime)), endDateTime: \(String(describing: endDateTime)), readyDateTime: \(String(describing: readyDateTime)))"}
}

/// <p>Represents the timeline of the cluster's lifecycle.</p>
public struct ClusterTimeline: Equatable {
    /// <p>The creation date and time of the cluster.</p>
    public let creationDateTime: Date?
    /// <p>The date and time when the cluster was terminated.</p>
    public let endDateTime: Date?
    /// <p>The date and time when the cluster was ready to run steps.</p>
    public let readyDateTime: Date?

    public init (
        creationDateTime: Date? = nil,
        endDateTime: Date? = nil,
        readyDateTime: Date? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.endDateTime = endDateTime
        self.readyDateTime = readyDateTime
    }
}

extension Command: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case args = "Args"
        case name = "Name"
        case scriptPath = "ScriptPath"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let args = args {
            var argsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .args)
            for stringlist0 in args {
                try argsContainer.encode(stringlist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scriptPath = scriptPath {
            try encodeContainer.encode(scriptPath, forKey: .scriptPath)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let scriptPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scriptPath)
        scriptPath = scriptPathDecoded
        let argsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .args)
        var argsDecoded0:[String]? = nil
        if let argsContainer = argsContainer {
            argsDecoded0 = [String]()
            for string0 in argsContainer {
                if let string0 = string0 {
                    argsDecoded0?.append(string0)
                }
            }
        }
        args = argsDecoded0
    }
}

extension Command: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Command(args: \(String(describing: args)), name: \(String(describing: name)), scriptPath: \(String(describing: scriptPath)))"}
}

/// <p>An entity describing an executable that runs on a cluster.</p>
public struct Command: Equatable {
    /// <p>Arguments for Amazon EMR to pass to the command for execution.</p>
    public let args: [String]?
    /// <p>The name of the command.</p>
    public let name: String?
    /// <p>The Amazon S3 location of the command script.</p>
    public let scriptPath: String?

    public init (
        args: [String]? = nil,
        name: String? = nil,
        scriptPath: String? = nil
    )
    {
        self.args = args
        self.name = name
        self.scriptPath = scriptPath
    }
}

public enum ComparisonOperator {
    case greaterThan
    case greaterThanOrEqual
    case lessThan
    case lessThanOrEqual
    case sdkUnknown(String)
}

extension ComparisonOperator : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ComparisonOperator] {
        return [
            .greaterThan,
            .greaterThanOrEqual,
            .lessThan,
            .lessThanOrEqual,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .greaterThan: return "GREATER_THAN"
        case .greaterThanOrEqual: return "GREATER_THAN_OR_EQUAL"
        case .lessThan: return "LESS_THAN"
        case .lessThanOrEqual: return "LESS_THAN_OR_EQUAL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ComparisonOperator(rawValue: rawValue) ?? ComparisonOperator.sdkUnknown(rawValue)
    }
}

extension ComputeLimits: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maximumCapacityUnits = "MaximumCapacityUnits"
        case maximumCoreCapacityUnits = "MaximumCoreCapacityUnits"
        case maximumOnDemandCapacityUnits = "MaximumOnDemandCapacityUnits"
        case minimumCapacityUnits = "MinimumCapacityUnits"
        case unitType = "UnitType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maximumCapacityUnits = maximumCapacityUnits {
            try encodeContainer.encode(maximumCapacityUnits, forKey: .maximumCapacityUnits)
        }
        if let maximumCoreCapacityUnits = maximumCoreCapacityUnits {
            try encodeContainer.encode(maximumCoreCapacityUnits, forKey: .maximumCoreCapacityUnits)
        }
        if let maximumOnDemandCapacityUnits = maximumOnDemandCapacityUnits {
            try encodeContainer.encode(maximumOnDemandCapacityUnits, forKey: .maximumOnDemandCapacityUnits)
        }
        if let minimumCapacityUnits = minimumCapacityUnits {
            try encodeContainer.encode(minimumCapacityUnits, forKey: .minimumCapacityUnits)
        }
        if let unitType = unitType {
            try encodeContainer.encode(unitType.rawValue, forKey: .unitType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let unitTypeDecoded = try containerValues.decodeIfPresent(ComputeLimitsUnitType.self, forKey: .unitType)
        unitType = unitTypeDecoded
        let minimumCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minimumCapacityUnits)
        minimumCapacityUnits = minimumCapacityUnitsDecoded
        let maximumCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumCapacityUnits)
        maximumCapacityUnits = maximumCapacityUnitsDecoded
        let maximumOnDemandCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumOnDemandCapacityUnits)
        maximumOnDemandCapacityUnits = maximumOnDemandCapacityUnitsDecoded
        let maximumCoreCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumCoreCapacityUnits)
        maximumCoreCapacityUnits = maximumCoreCapacityUnitsDecoded
    }
}

extension ComputeLimits: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ComputeLimits(maximumCapacityUnits: \(String(describing: maximumCapacityUnits)), maximumCoreCapacityUnits: \(String(describing: maximumCoreCapacityUnits)), maximumOnDemandCapacityUnits: \(String(describing: maximumOnDemandCapacityUnits)), minimumCapacityUnits: \(String(describing: minimumCapacityUnits)), unitType: \(String(describing: unitType)))"}
}

/// <p> The EC2 unit limits for a managed scaling policy. The managed scaling activity of a
///          cluster can not be above or below these limits. The limit only applies to the core and task
///          nodes. The master node cannot be scaled after initial configuration. </p>
public struct ComputeLimits: Equatable {
    /// <p> The upper boundary of EC2 units. It is measured through vCPU cores or instances for
    ///          instance groups and measured through units for instance fleets. Managed scaling activities
    ///          are not allowed beyond this boundary. The limit only applies to the core and task nodes.
    ///          The master node cannot be scaled after initial configuration. </p>
    public let maximumCapacityUnits: Int?
    /// <p> The upper boundary of EC2 units for core node type in a cluster. It is measured through
    ///          vCPU cores or instances for instance groups and measured through units for instance fleets.
    ///          The core units are not allowed to scale beyond this boundary. The parameter is used to
    ///          split capacity allocation between core and task nodes. </p>
    public let maximumCoreCapacityUnits: Int?
    /// <p> The upper boundary of On-Demand EC2 units. It is measured through vCPU cores or
    ///          instances for instance groups and measured through units for instance fleets. The On-Demand
    ///          units are not allowed to scale beyond this boundary. The parameter is used to split
    ///          capacity allocation between On-Demand and Spot Instances. </p>
    public let maximumOnDemandCapacityUnits: Int?
    /// <p> The lower boundary of EC2 units. It is measured through vCPU cores or instances for
    ///          instance groups and measured through units for instance fleets. Managed scaling activities
    ///          are not allowed beyond this boundary. The limit only applies to the core and task nodes.
    ///          The master node cannot be scaled after initial configuration. </p>
    public let minimumCapacityUnits: Int?
    /// <p> The unit type used for specifying a managed scaling policy. </p>
    public let unitType: ComputeLimitsUnitType?

    public init (
        maximumCapacityUnits: Int? = nil,
        maximumCoreCapacityUnits: Int? = nil,
        maximumOnDemandCapacityUnits: Int? = nil,
        minimumCapacityUnits: Int? = nil,
        unitType: ComputeLimitsUnitType? = nil
    )
    {
        self.maximumCapacityUnits = maximumCapacityUnits
        self.maximumCoreCapacityUnits = maximumCoreCapacityUnits
        self.maximumOnDemandCapacityUnits = maximumOnDemandCapacityUnits
        self.minimumCapacityUnits = minimumCapacityUnits
        self.unitType = unitType
    }
}

public enum ComputeLimitsUnitType {
    case instancefleetunits
    case instances
    case vcpu
    case sdkUnknown(String)
}

extension ComputeLimitsUnitType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ComputeLimitsUnitType] {
        return [
            .instancefleetunits,
            .instances,
            .vcpu,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .instancefleetunits: return "InstanceFleetUnits"
        case .instances: return "Instances"
        case .vcpu: return "VCPU"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ComputeLimitsUnitType(rawValue: rawValue) ?? ComputeLimitsUnitType.sdkUnknown(rawValue)
    }
}

extension Configuration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case classification = "Classification"
        case configurations = "Configurations"
        case properties = "Properties"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let classification = classification {
            try encodeContainer.encode(classification, forKey: .classification)
        }
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configurationlist0 in configurations {
                try configurationsContainer.encode(configurationlist0)
            }
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .properties)
            for (dictKey0, stringmap0) in properties {
                try propertiesContainer.encode(stringmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let classificationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .classification)
        classification = classificationDecoded
        let configurationsContainer = try containerValues.decodeIfPresent([Configuration?].self, forKey: .configurations)
        var configurationsDecoded0:[Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [Configuration]()
            for structure0 in configurationsContainer {
                if let structure0 = structure0 {
                    configurationsDecoded0?.append(structure0)
                }
            }
        }
        configurations = configurationsDecoded0
        let propertiesContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .properties)
        var propertiesDecoded0: [String:String]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [String:String]()
            for (key0, string0) in propertiesContainer {
                if let string0 = string0 {
                    propertiesDecoded0?[key0] = string0
                }
            }
        }
        properties = propertiesDecoded0
    }
}

extension Configuration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Configuration(classification: \(String(describing: classification)), configurations: \(String(describing: configurations)), properties: \(String(describing: properties)))"}
}

/// <note>
///             <p>Amazon EMR releases 4.x or later.</p>
///          </note>
///          <p>An optional configuration specification to be used when provisioning cluster instances,
///          which can include configurations for applications and software bundled with Amazon EMR. A
///          configuration consists of a classification, properties, and optional nested configurations.
///          A classification refers to an application-specific configuration file. Properties are the
///          settings you want to change in that file. For more information, see <a href="https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-configure-apps.html">Configuring
///             Applications</a>.</p>
public struct Configuration: Equatable {
    /// <p>The classification within a configuration.</p>
    public let classification: String?
    /// <p>A list of additional configurations to apply within a configuration object.</p>
    public let configurations: [Configuration]?
    /// <p>A set of properties specified within a configuration classification.</p>
    public let properties: [String:String]?

    public init (
        classification: String? = nil,
        configurations: [Configuration]? = nil,
        properties: [String:String]? = nil
    )
    {
        self.classification = classification
        self.configurations = configurations
        self.properties = properties
    }
}

public struct CreateSecurityConfigurationInputBodyMiddleware: Middleware {
    public let id: String = "CreateSecurityConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateSecurityConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateSecurityConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateSecurityConfigurationInput>
    public typealias MOutput = OperationOutput<CreateSecurityConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateSecurityConfigurationOutputError>
}

extension CreateSecurityConfigurationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateSecurityConfigurationInput(name: \(String(describing: name)), securityConfiguration: \(String(describing: securityConfiguration)))"}
}

extension CreateSecurityConfigurationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case securityConfiguration = "SecurityConfiguration"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let securityConfiguration = securityConfiguration {
            try encodeContainer.encode(securityConfiguration, forKey: .securityConfiguration)
        }
    }
}

public struct CreateSecurityConfigurationInputHeadersMiddleware: Middleware {
    public let id: String = "CreateSecurityConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateSecurityConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateSecurityConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateSecurityConfigurationInput>
    public typealias MOutput = OperationOutput<CreateSecurityConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateSecurityConfigurationOutputError>
}

public struct CreateSecurityConfigurationInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateSecurityConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateSecurityConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateSecurityConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateSecurityConfigurationInput>
    public typealias MOutput = OperationOutput<CreateSecurityConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateSecurityConfigurationOutputError>
}

public struct CreateSecurityConfigurationInput: Equatable {
    /// <p>The name of the security configuration.</p>
    public let name: String?
    /// <p>The security configuration details in JSON format. For JSON parameters and examples, see
    ///             <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-security-configurations.html">Use Security
    ///             Configurations to Set Up Cluster Security</a> in the <i>Amazon EMR Management
    ///             Guide</i>.</p>
    public let securityConfiguration: String?

    public init (
        name: String? = nil,
        securityConfiguration: String? = nil
    )
    {
        self.name = name
        self.securityConfiguration = securityConfiguration
    }
}

struct CreateSecurityConfigurationInputBody: Equatable {
    public let name: String?
    public let securityConfiguration: String?
}

extension CreateSecurityConfigurationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case securityConfiguration = "SecurityConfiguration"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
    }
}

extension CreateSecurityConfigurationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateSecurityConfigurationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateSecurityConfigurationOutputError: Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateSecurityConfigurationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateSecurityConfigurationOutputResponse(creationDateTime: \(String(describing: creationDateTime)), name: \(String(describing: name)))"}
}

extension CreateSecurityConfigurationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateSecurityConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.creationDateTime = output.creationDateTime
            self.name = output.name
        } else {
            self.creationDateTime = nil
            self.name = nil
        }
    }
}

public struct CreateSecurityConfigurationOutputResponse: Equatable {
    /// <p>The date and time the security configuration was created.</p>
    public let creationDateTime: Date?
    /// <p>The name of the security configuration.</p>
    public let name: String?

    public init (
        creationDateTime: Date? = nil,
        name: String? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.name = name
    }
}

struct CreateSecurityConfigurationOutputResponseBody: Equatable {
    public let name: String?
    public let creationDateTime: Date?
}

extension CreateSecurityConfigurationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case creationDateTime = "CreationDateTime"
        case name = "Name"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
    }
}

public struct CreateStudioInputBodyMiddleware: Middleware {
    public let id: String = "CreateStudioInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateStudioInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateStudioOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateStudioInput>
    public typealias MOutput = OperationOutput<CreateStudioOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateStudioOutputError>
}

extension CreateStudioInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateStudioInput(authMode: \(String(describing: authMode)), defaultS3Location: \(String(describing: defaultS3Location)), description: \(String(describing: description)), engineSecurityGroupId: \(String(describing: engineSecurityGroupId)), name: \(String(describing: name)), serviceRole: \(String(describing: serviceRole)), subnetIds: \(String(describing: subnetIds)), tags: \(String(describing: tags)), userRole: \(String(describing: userRole)), vpcId: \(String(describing: vpcId)), workspaceSecurityGroupId: \(String(describing: workspaceSecurityGroupId)))"}
}

extension CreateStudioInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case authMode = "AuthMode"
        case defaultS3Location = "DefaultS3Location"
        case description = "Description"
        case engineSecurityGroupId = "EngineSecurityGroupId"
        case name = "Name"
        case serviceRole = "ServiceRole"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
        case userRole = "UserRole"
        case vpcId = "VpcId"
        case workspaceSecurityGroupId = "WorkspaceSecurityGroupId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authMode = authMode {
            try encodeContainer.encode(authMode.rawValue, forKey: .authMode)
        }
        if let defaultS3Location = defaultS3Location {
            try encodeContainer.encode(defaultS3Location, forKey: .defaultS3Location)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let engineSecurityGroupId = engineSecurityGroupId {
            try encodeContainer.encode(engineSecurityGroupId, forKey: .engineSecurityGroupId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetidlist0 in subnetIds {
                try subnetIdsContainer.encode(subnetidlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let userRole = userRole {
            try encodeContainer.encode(userRole, forKey: .userRole)
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
        if let workspaceSecurityGroupId = workspaceSecurityGroupId {
            try encodeContainer.encode(workspaceSecurityGroupId, forKey: .workspaceSecurityGroupId)
        }
    }
}

public struct CreateStudioInputHeadersMiddleware: Middleware {
    public let id: String = "CreateStudioInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateStudioInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateStudioOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateStudioInput>
    public typealias MOutput = OperationOutput<CreateStudioOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateStudioOutputError>
}

public struct CreateStudioInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateStudioInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateStudioInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateStudioOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateStudioInput>
    public typealias MOutput = OperationOutput<CreateStudioOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateStudioOutputError>
}

public struct CreateStudioInput: Equatable {
    /// <p>Specifies whether the Studio authenticates users using single sign-on (SSO) or IAM.
    ///          Amazon EMR Studio currently only supports SSO authentication.</p>
    public let authMode: AuthMode?
    /// <p>The Amazon S3 location to back up Amazon EMR Studio Workspaces and notebook files.</p>
    public let defaultS3Location: String?
    /// <p>A detailed description of the Amazon EMR Studio.</p>
    public let description: String?
    /// <p>The ID of the Amazon EMR Studio Engine security group. The Engine security group allows
    ///          inbound network traffic from the Workspace security group, and it must be in the same VPC
    ///          specified by <code>VpcId</code>.</p>
    public let engineSecurityGroupId: String?
    /// <p>A descriptive name for the Amazon EMR Studio.</p>
    public let name: String?
    /// <p>The IAM role that will be assumed by the Amazon EMR Studio. The service role provides a
    ///          way for Amazon EMR Studio to interoperate with other AWS services.</p>
    public let serviceRole: String?
    /// <p>A list of subnet IDs to associate with the Amazon EMR Studio. A Studio can have a maximum of 5 subnets. The subnets must belong to the VPC
    ///          specified by <code>VpcId</code>. Studio users can create a Workspace in any of the
    ///          specified subnets.</p>
    public let subnetIds: [String]?
    /// <p>A list of tags to associate with the Amazon EMR Studio. Tags are user-defined key-value pairs that
    ///          consist of a required key string with a maximum of 128 characters, and an optional value
    ///          string with a maximum of 256 characters.</p>
    public let tags: [Tag]?
    /// <p>The IAM user role that will be assumed by users and groups logged in to an Amazon EMR Studio. The
    ///          permissions attached to this IAM role can be scoped down for each user or group using
    ///          session policies.</p>
    public let userRole: String?
    /// <p>The ID of the Amazon Virtual Private Cloud (Amazon VPC) to associate with the
    ///          Studio.</p>
    public let vpcId: String?
    /// <p>The ID of the Amazon EMR Studio Workspace security group. The Workspace security group
    ///          allows outbound network traffic to resources in the Engine security group, and it must be
    ///          in the same VPC specified by <code>VpcId</code>.</p>
    public let workspaceSecurityGroupId: String?

    public init (
        authMode: AuthMode? = nil,
        defaultS3Location: String? = nil,
        description: String? = nil,
        engineSecurityGroupId: String? = nil,
        name: String? = nil,
        serviceRole: String? = nil,
        subnetIds: [String]? = nil,
        tags: [Tag]? = nil,
        userRole: String? = nil,
        vpcId: String? = nil,
        workspaceSecurityGroupId: String? = nil
    )
    {
        self.authMode = authMode
        self.defaultS3Location = defaultS3Location
        self.description = description
        self.engineSecurityGroupId = engineSecurityGroupId
        self.name = name
        self.serviceRole = serviceRole
        self.subnetIds = subnetIds
        self.tags = tags
        self.userRole = userRole
        self.vpcId = vpcId
        self.workspaceSecurityGroupId = workspaceSecurityGroupId
    }
}

struct CreateStudioInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let authMode: AuthMode?
    public let vpcId: String?
    public let subnetIds: [String]?
    public let serviceRole: String?
    public let userRole: String?
    public let workspaceSecurityGroupId: String?
    public let engineSecurityGroupId: String?
    public let defaultS3Location: String?
    public let tags: [Tag]?
}

extension CreateStudioInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case authMode = "AuthMode"
        case defaultS3Location = "DefaultS3Location"
        case description = "Description"
        case engineSecurityGroupId = "EngineSecurityGroupId"
        case name = "Name"
        case serviceRole = "ServiceRole"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
        case userRole = "UserRole"
        case vpcId = "VpcId"
        case workspaceSecurityGroupId = "WorkspaceSecurityGroupId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let authModeDecoded = try containerValues.decodeIfPresent(AuthMode.self, forKey: .authMode)
        authMode = authModeDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let serviceRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let userRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userRole)
        userRole = userRoleDecoded
        let workspaceSecurityGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workspaceSecurityGroupId)
        workspaceSecurityGroupId = workspaceSecurityGroupIdDecoded
        let engineSecurityGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineSecurityGroupId)
        engineSecurityGroupId = engineSecurityGroupIdDecoded
        let defaultS3LocationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultS3Location)
        defaultS3Location = defaultS3LocationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateStudioOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateStudioOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateStudioOutputError: Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateStudioOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateStudioOutputResponse(studioId: \(String(describing: studioId)), url: \(String(describing: url)))"}
}

extension CreateStudioOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateStudioOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.studioId = output.studioId
            self.url = output.url
        } else {
            self.studioId = nil
            self.url = nil
        }
    }
}

public struct CreateStudioOutputResponse: Equatable {
    /// <p>The ID of the Amazon EMR Studio.</p>
    public let studioId: String?
    /// <p>The unique Studio access URL.</p>
    public let url: String?

    public init (
        studioId: String? = nil,
        url: String? = nil
    )
    {
        self.studioId = studioId
        self.url = url
    }
}

struct CreateStudioOutputResponseBody: Equatable {
    public let studioId: String?
    public let url: String?
}

extension CreateStudioOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case studioId = "StudioId"
        case url = "Url"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .studioId)
        studioId = studioIdDecoded
        let urlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .url)
        url = urlDecoded
    }
}

public struct CreateStudioSessionMappingInputBodyMiddleware: Middleware {
    public let id: String = "CreateStudioSessionMappingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateStudioSessionMappingInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateStudioSessionMappingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateStudioSessionMappingInput>
    public typealias MOutput = OperationOutput<CreateStudioSessionMappingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateStudioSessionMappingOutputError>
}

extension CreateStudioSessionMappingInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateStudioSessionMappingInput(identityId: \(String(describing: identityId)), identityName: \(String(describing: identityName)), identityType: \(String(describing: identityType)), sessionPolicyArn: \(String(describing: sessionPolicyArn)), studioId: \(String(describing: studioId)))"}
}

extension CreateStudioSessionMappingInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case identityId = "IdentityId"
        case identityName = "IdentityName"
        case identityType = "IdentityType"
        case sessionPolicyArn = "SessionPolicyArn"
        case studioId = "StudioId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identityId = identityId {
            try encodeContainer.encode(identityId, forKey: .identityId)
        }
        if let identityName = identityName {
            try encodeContainer.encode(identityName, forKey: .identityName)
        }
        if let identityType = identityType {
            try encodeContainer.encode(identityType.rawValue, forKey: .identityType)
        }
        if let sessionPolicyArn = sessionPolicyArn {
            try encodeContainer.encode(sessionPolicyArn, forKey: .sessionPolicyArn)
        }
        if let studioId = studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
    }
}

public struct CreateStudioSessionMappingInputHeadersMiddleware: Middleware {
    public let id: String = "CreateStudioSessionMappingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateStudioSessionMappingInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateStudioSessionMappingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateStudioSessionMappingInput>
    public typealias MOutput = OperationOutput<CreateStudioSessionMappingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateStudioSessionMappingOutputError>
}

public struct CreateStudioSessionMappingInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateStudioSessionMappingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateStudioSessionMappingInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateStudioSessionMappingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateStudioSessionMappingInput>
    public typealias MOutput = OperationOutput<CreateStudioSessionMappingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateStudioSessionMappingOutputError>
}

public struct CreateStudioSessionMappingInput: Equatable {
    /// <p>The globally unique identifier (GUID) of the user or group from the AWS SSO Identity
    ///          Store. For more information, see <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserId">UserId</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-GroupId">GroupId</a> in the <i>AWS SSO Identity Store API Reference</i>.
    ///          Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
    public let identityId: String?
    /// <p>The name of the user or group. For more information, see <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName">UserName</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName">DisplayName</a> in the <i>AWS SSO Identity Store API Reference</i>.
    ///          Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
    public let identityName: String?
    /// <p>Specifies whether the identity to map to the Amazon EMR Studio is a user or a group.</p>
    public let identityType: IdentityType?
    /// <p>The Amazon Resource Name (ARN) for the session policy that will be applied to the user
    ///          or group. Session policies refine Studio user permissions without the need to use multiple
    ///          IAM user roles.</p>
    public let sessionPolicyArn: String?
    /// <p>The ID of the Amazon EMR Studio to which the user or group will be mapped.</p>
    public let studioId: String?

    public init (
        identityId: String? = nil,
        identityName: String? = nil,
        identityType: IdentityType? = nil,
        sessionPolicyArn: String? = nil,
        studioId: String? = nil
    )
    {
        self.identityId = identityId
        self.identityName = identityName
        self.identityType = identityType
        self.sessionPolicyArn = sessionPolicyArn
        self.studioId = studioId
    }
}

struct CreateStudioSessionMappingInputBody: Equatable {
    public let studioId: String?
    public let identityId: String?
    public let identityName: String?
    public let identityType: IdentityType?
    public let sessionPolicyArn: String?
}

extension CreateStudioSessionMappingInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case identityId = "IdentityId"
        case identityName = "IdentityName"
        case identityType = "IdentityType"
        case sessionPolicyArn = "SessionPolicyArn"
        case studioId = "StudioId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .studioId)
        studioId = studioIdDecoded
        let identityIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identityId)
        identityId = identityIdDecoded
        let identityNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identityName)
        identityName = identityNameDecoded
        let identityTypeDecoded = try containerValues.decodeIfPresent(IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
        let sessionPolicyArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sessionPolicyArn)
        sessionPolicyArn = sessionPolicyArnDecoded
    }
}

extension CreateStudioSessionMappingOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateStudioSessionMappingOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateStudioSessionMappingOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateStudioSessionMappingOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateStudioSessionMappingOutputResponse()"}
}

extension CreateStudioSessionMappingOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct CreateStudioSessionMappingOutputResponse: Equatable {

    public init() {}
}

struct CreateStudioSessionMappingOutputResponseBody: Equatable {
}

extension CreateStudioSessionMappingOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteSecurityConfigurationInputBodyMiddleware: Middleware {
    public let id: String = "DeleteSecurityConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteSecurityConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteSecurityConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteSecurityConfigurationInput>
    public typealias MOutput = OperationOutput<DeleteSecurityConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteSecurityConfigurationOutputError>
}

extension DeleteSecurityConfigurationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteSecurityConfigurationInput(name: \(String(describing: name)))"}
}

extension DeleteSecurityConfigurationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

public struct DeleteSecurityConfigurationInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteSecurityConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteSecurityConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteSecurityConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteSecurityConfigurationInput>
    public typealias MOutput = OperationOutput<DeleteSecurityConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteSecurityConfigurationOutputError>
}

public struct DeleteSecurityConfigurationInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteSecurityConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteSecurityConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteSecurityConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteSecurityConfigurationInput>
    public typealias MOutput = OperationOutput<DeleteSecurityConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteSecurityConfigurationOutputError>
}

public struct DeleteSecurityConfigurationInput: Equatable {
    /// <p>The name of the security configuration.</p>
    public let name: String?

    public init (
        name: String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteSecurityConfigurationInputBody: Equatable {
    public let name: String?
}

extension DeleteSecurityConfigurationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeleteSecurityConfigurationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteSecurityConfigurationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteSecurityConfigurationOutputError: Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSecurityConfigurationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteSecurityConfigurationOutputResponse()"}
}

extension DeleteSecurityConfigurationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteSecurityConfigurationOutputResponse: Equatable {

    public init() {}
}

struct DeleteSecurityConfigurationOutputResponseBody: Equatable {
}

extension DeleteSecurityConfigurationOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteStudioInputBodyMiddleware: Middleware {
    public let id: String = "DeleteStudioInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteStudioInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteStudioOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteStudioInput>
    public typealias MOutput = OperationOutput<DeleteStudioOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteStudioOutputError>
}

extension DeleteStudioInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteStudioInput(studioId: \(String(describing: studioId)))"}
}

extension DeleteStudioInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case studioId = "StudioId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let studioId = studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
    }
}

public struct DeleteStudioInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteStudioInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteStudioInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteStudioOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteStudioInput>
    public typealias MOutput = OperationOutput<DeleteStudioOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteStudioOutputError>
}

public struct DeleteStudioInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteStudioInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteStudioInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteStudioOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteStudioInput>
    public typealias MOutput = OperationOutput<DeleteStudioOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteStudioOutputError>
}

public struct DeleteStudioInput: Equatable {
    /// <p>The ID of the Amazon EMR Studio.</p>
    public let studioId: String?

    public init (
        studioId: String? = nil
    )
    {
        self.studioId = studioId
    }
}

struct DeleteStudioInputBody: Equatable {
    public let studioId: String?
}

extension DeleteStudioInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case studioId = "StudioId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .studioId)
        studioId = studioIdDecoded
    }
}

extension DeleteStudioOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteStudioOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteStudioOutputError: Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteStudioOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteStudioOutputResponse()"}
}

extension DeleteStudioOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteStudioOutputResponse: Equatable {

    public init() {}
}

struct DeleteStudioOutputResponseBody: Equatable {
}

extension DeleteStudioOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteStudioSessionMappingInputBodyMiddleware: Middleware {
    public let id: String = "DeleteStudioSessionMappingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteStudioSessionMappingInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteStudioSessionMappingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteStudioSessionMappingInput>
    public typealias MOutput = OperationOutput<DeleteStudioSessionMappingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteStudioSessionMappingOutputError>
}

extension DeleteStudioSessionMappingInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteStudioSessionMappingInput(identityId: \(String(describing: identityId)), identityName: \(String(describing: identityName)), identityType: \(String(describing: identityType)), studioId: \(String(describing: studioId)))"}
}

extension DeleteStudioSessionMappingInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case identityId = "IdentityId"
        case identityName = "IdentityName"
        case identityType = "IdentityType"
        case studioId = "StudioId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identityId = identityId {
            try encodeContainer.encode(identityId, forKey: .identityId)
        }
        if let identityName = identityName {
            try encodeContainer.encode(identityName, forKey: .identityName)
        }
        if let identityType = identityType {
            try encodeContainer.encode(identityType.rawValue, forKey: .identityType)
        }
        if let studioId = studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
    }
}

public struct DeleteStudioSessionMappingInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteStudioSessionMappingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteStudioSessionMappingInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteStudioSessionMappingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteStudioSessionMappingInput>
    public typealias MOutput = OperationOutput<DeleteStudioSessionMappingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteStudioSessionMappingOutputError>
}

public struct DeleteStudioSessionMappingInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteStudioSessionMappingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteStudioSessionMappingInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteStudioSessionMappingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteStudioSessionMappingInput>
    public typealias MOutput = OperationOutput<DeleteStudioSessionMappingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteStudioSessionMappingOutputError>
}

public struct DeleteStudioSessionMappingInput: Equatable {
    /// <p>The globally unique identifier (GUID) of the user or group to remove from the Amazon EMR
    ///          Studio. For more information, see <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserId">UserId</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-GroupId">GroupId</a> in the <i>AWS SSO Identity Store API Reference</i>.
    ///          Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
    public let identityId: String?
    /// <p>The name of the user name or group to remove from the Amazon EMR Studio. For more information, see
    ///             <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName">UserName</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName">DisplayName</a> in the <i>AWS SSO Identity Store API Reference</i>.
    ///          Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
    public let identityName: String?
    /// <p>Specifies whether the identity to delete from the Amazon EMR Studio is a user or a group.</p>
    public let identityType: IdentityType?
    /// <p>The ID of the Amazon EMR Studio.</p>
    public let studioId: String?

    public init (
        identityId: String? = nil,
        identityName: String? = nil,
        identityType: IdentityType? = nil,
        studioId: String? = nil
    )
    {
        self.identityId = identityId
        self.identityName = identityName
        self.identityType = identityType
        self.studioId = studioId
    }
}

struct DeleteStudioSessionMappingInputBody: Equatable {
    public let studioId: String?
    public let identityId: String?
    public let identityName: String?
    public let identityType: IdentityType?
}

extension DeleteStudioSessionMappingInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case identityId = "IdentityId"
        case identityName = "IdentityName"
        case identityType = "IdentityType"
        case studioId = "StudioId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .studioId)
        studioId = studioIdDecoded
        let identityIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identityId)
        identityId = identityIdDecoded
        let identityNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identityName)
        identityName = identityNameDecoded
        let identityTypeDecoded = try containerValues.decodeIfPresent(IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
    }
}

extension DeleteStudioSessionMappingOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteStudioSessionMappingOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteStudioSessionMappingOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteStudioSessionMappingOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteStudioSessionMappingOutputResponse()"}
}

extension DeleteStudioSessionMappingOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteStudioSessionMappingOutputResponse: Equatable {

    public init() {}
}

struct DeleteStudioSessionMappingOutputResponseBody: Equatable {
}

extension DeleteStudioSessionMappingOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DescribeClusterInputBodyMiddleware: Middleware {
    public let id: String = "DescribeClusterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeClusterInput>
    public typealias MOutput = OperationOutput<DescribeClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeClusterOutputError>
}

extension DescribeClusterInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeClusterInput(clusterId: \(String(describing: clusterId)))"}
}

extension DescribeClusterInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
    }
}

public struct DescribeClusterInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeClusterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeClusterInput>
    public typealias MOutput = OperationOutput<DescribeClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeClusterOutputError>
}

public struct DescribeClusterInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeClusterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeClusterInput>
    public typealias MOutput = OperationOutput<DescribeClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeClusterOutputError>
}

/// <p>This input determines which cluster to describe.</p>
public struct DescribeClusterInput: Equatable {
    /// <p>The identifier of the cluster to describe.</p>
    public let clusterId: String?

    public init (
        clusterId: String? = nil
    )
    {
        self.clusterId = clusterId
    }
}

struct DescribeClusterInputBody: Equatable {
    public let clusterId: String?
}

extension DescribeClusterInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
    }
}

extension DescribeClusterOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeClusterOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeClusterOutputError: Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeClusterOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeClusterOutputResponse(cluster: \(String(describing: cluster)))"}
}

extension DescribeClusterOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeClusterOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

/// <p>This output contains the description of the cluster.</p>
public struct DescribeClusterOutputResponse: Equatable {
    /// <p>This output contains the details for the requested cluster.</p>
    public let cluster: Cluster?

    public init (
        cluster: Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct DescribeClusterOutputResponseBody: Equatable {
    public let cluster: Cluster?
}

extension DescribeClusterOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case cluster = "Cluster"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

public struct DescribeJobFlowsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeJobFlowsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeJobFlowsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeJobFlowsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeJobFlowsInput>
    public typealias MOutput = OperationOutput<DescribeJobFlowsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeJobFlowsOutputError>
}

extension DescribeJobFlowsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeJobFlowsInput(createdAfter: \(String(describing: createdAfter)), createdBefore: \(String(describing: createdBefore)), jobFlowIds: \(String(describing: jobFlowIds)), jobFlowStates: \(String(describing: jobFlowStates)))"}
}

extension DescribeJobFlowsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case jobFlowIds = "JobFlowIds"
        case jobFlowStates = "JobFlowStates"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAfter = createdAfter {
            try encodeContainer.encode(createdAfter.timeIntervalSince1970, forKey: .createdAfter)
        }
        if let createdBefore = createdBefore {
            try encodeContainer.encode(createdBefore.timeIntervalSince1970, forKey: .createdBefore)
        }
        if let jobFlowIds = jobFlowIds {
            var jobFlowIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobFlowIds)
            for xmlstringlist0 in jobFlowIds {
                try jobFlowIdsContainer.encode(xmlstringlist0)
            }
        }
        if let jobFlowStates = jobFlowStates {
            var jobFlowStatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobFlowStates)
            for jobflowexecutionstatelist0 in jobFlowStates {
                try jobFlowStatesContainer.encode(jobflowexecutionstatelist0.rawValue)
            }
        }
    }
}

public struct DescribeJobFlowsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeJobFlowsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeJobFlowsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeJobFlowsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeJobFlowsInput>
    public typealias MOutput = OperationOutput<DescribeJobFlowsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeJobFlowsOutputError>
}

public struct DescribeJobFlowsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeJobFlowsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeJobFlowsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeJobFlowsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeJobFlowsInput>
    public typealias MOutput = OperationOutput<DescribeJobFlowsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeJobFlowsOutputError>
}

/// <p> The input for the <a>DescribeJobFlows</a> operation. </p>
public struct DescribeJobFlowsInput: Equatable {
    /// <p>Return only job flows created after this date and time.</p>
    public let createdAfter: Date?
    /// <p>Return only job flows created before this date and time.</p>
    public let createdBefore: Date?
    /// <p>Return only job flows whose job flow ID is contained in this list.</p>
    public let jobFlowIds: [String]?
    /// <p>Return only job flows whose state is contained in this list.</p>
    public let jobFlowStates: [JobFlowExecutionState]?

    public init (
        createdAfter: Date? = nil,
        createdBefore: Date? = nil,
        jobFlowIds: [String]? = nil,
        jobFlowStates: [JobFlowExecutionState]? = nil
    )
    {
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.jobFlowIds = jobFlowIds
        self.jobFlowStates = jobFlowStates
    }
}

struct DescribeJobFlowsInputBody: Equatable {
    public let createdAfter: Date?
    public let createdBefore: Date?
    public let jobFlowIds: [String]?
    public let jobFlowStates: [JobFlowExecutionState]?
}

extension DescribeJobFlowsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case jobFlowIds = "JobFlowIds"
        case jobFlowStates = "JobFlowStates"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createdAfterDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAfter)
        createdAfter = createdAfterDecoded
        let createdBeforeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdBefore)
        createdBefore = createdBeforeDecoded
        let jobFlowIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .jobFlowIds)
        var jobFlowIdsDecoded0:[String]? = nil
        if let jobFlowIdsContainer = jobFlowIdsContainer {
            jobFlowIdsDecoded0 = [String]()
            for string0 in jobFlowIdsContainer {
                if let string0 = string0 {
                    jobFlowIdsDecoded0?.append(string0)
                }
            }
        }
        jobFlowIds = jobFlowIdsDecoded0
        let jobFlowStatesContainer = try containerValues.decodeIfPresent([JobFlowExecutionState?].self, forKey: .jobFlowStates)
        var jobFlowStatesDecoded0:[JobFlowExecutionState]? = nil
        if let jobFlowStatesContainer = jobFlowStatesContainer {
            jobFlowStatesDecoded0 = [JobFlowExecutionState]()
            for string0 in jobFlowStatesContainer {
                if let string0 = string0 {
                    jobFlowStatesDecoded0?.append(string0)
                }
            }
        }
        jobFlowStates = jobFlowStatesDecoded0
    }
}

extension DescribeJobFlowsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeJobFlowsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeJobFlowsOutputError: Equatable {
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeJobFlowsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeJobFlowsOutputResponse(jobFlows: \(String(describing: jobFlows)))"}
}

extension DescribeJobFlowsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeJobFlowsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.jobFlows = output.jobFlows
        } else {
            self.jobFlows = nil
        }
    }
}

/// <p> The output for the <a>DescribeJobFlows</a> operation. </p>
public struct DescribeJobFlowsOutputResponse: Equatable {
    /// <p>A list of job flows matching the parameters supplied.</p>
    public let jobFlows: [JobFlowDetail]?

    public init (
        jobFlows: [JobFlowDetail]? = nil
    )
    {
        self.jobFlows = jobFlows
    }
}

struct DescribeJobFlowsOutputResponseBody: Equatable {
    public let jobFlows: [JobFlowDetail]?
}

extension DescribeJobFlowsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case jobFlows = "JobFlows"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobFlowsContainer = try containerValues.decodeIfPresent([JobFlowDetail?].self, forKey: .jobFlows)
        var jobFlowsDecoded0:[JobFlowDetail]? = nil
        if let jobFlowsContainer = jobFlowsContainer {
            jobFlowsDecoded0 = [JobFlowDetail]()
            for structure0 in jobFlowsContainer {
                if let structure0 = structure0 {
                    jobFlowsDecoded0?.append(structure0)
                }
            }
        }
        jobFlows = jobFlowsDecoded0
    }
}

public struct DescribeNotebookExecutionInputBodyMiddleware: Middleware {
    public let id: String = "DescribeNotebookExecutionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeNotebookExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeNotebookExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeNotebookExecutionInput>
    public typealias MOutput = OperationOutput<DescribeNotebookExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeNotebookExecutionOutputError>
}

extension DescribeNotebookExecutionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeNotebookExecutionInput(notebookExecutionId: \(String(describing: notebookExecutionId)))"}
}

extension DescribeNotebookExecutionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case notebookExecutionId = "NotebookExecutionId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let notebookExecutionId = notebookExecutionId {
            try encodeContainer.encode(notebookExecutionId, forKey: .notebookExecutionId)
        }
    }
}

public struct DescribeNotebookExecutionInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeNotebookExecutionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeNotebookExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeNotebookExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeNotebookExecutionInput>
    public typealias MOutput = OperationOutput<DescribeNotebookExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeNotebookExecutionOutputError>
}

public struct DescribeNotebookExecutionInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeNotebookExecutionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeNotebookExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeNotebookExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeNotebookExecutionInput>
    public typealias MOutput = OperationOutput<DescribeNotebookExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeNotebookExecutionOutputError>
}

public struct DescribeNotebookExecutionInput: Equatable {
    /// <p>The unique identifier of the notebook execution.</p>
    public let notebookExecutionId: String?

    public init (
        notebookExecutionId: String? = nil
    )
    {
        self.notebookExecutionId = notebookExecutionId
    }
}

struct DescribeNotebookExecutionInputBody: Equatable {
    public let notebookExecutionId: String?
}

extension DescribeNotebookExecutionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case notebookExecutionId = "NotebookExecutionId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookExecutionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookExecutionId)
        notebookExecutionId = notebookExecutionIdDecoded
    }
}

extension DescribeNotebookExecutionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeNotebookExecutionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeNotebookExecutionOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeNotebookExecutionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeNotebookExecutionOutputResponse(notebookExecution: \(String(describing: notebookExecution)))"}
}

extension DescribeNotebookExecutionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeNotebookExecutionOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.notebookExecution = output.notebookExecution
        } else {
            self.notebookExecution = nil
        }
    }
}

public struct DescribeNotebookExecutionOutputResponse: Equatable {
    /// <p>Properties of the notebook execution.</p>
    public let notebookExecution: NotebookExecution?

    public init (
        notebookExecution: NotebookExecution? = nil
    )
    {
        self.notebookExecution = notebookExecution
    }
}

struct DescribeNotebookExecutionOutputResponseBody: Equatable {
    public let notebookExecution: NotebookExecution?
}

extension DescribeNotebookExecutionOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case notebookExecution = "NotebookExecution"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookExecutionDecoded = try containerValues.decodeIfPresent(NotebookExecution.self, forKey: .notebookExecution)
        notebookExecution = notebookExecutionDecoded
    }
}

public struct DescribeSecurityConfigurationInputBodyMiddleware: Middleware {
    public let id: String = "DescribeSecurityConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeSecurityConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeSecurityConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeSecurityConfigurationInput>
    public typealias MOutput = OperationOutput<DescribeSecurityConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeSecurityConfigurationOutputError>
}

extension DescribeSecurityConfigurationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeSecurityConfigurationInput(name: \(String(describing: name)))"}
}

extension DescribeSecurityConfigurationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

public struct DescribeSecurityConfigurationInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeSecurityConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeSecurityConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeSecurityConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeSecurityConfigurationInput>
    public typealias MOutput = OperationOutput<DescribeSecurityConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeSecurityConfigurationOutputError>
}

public struct DescribeSecurityConfigurationInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeSecurityConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeSecurityConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeSecurityConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeSecurityConfigurationInput>
    public typealias MOutput = OperationOutput<DescribeSecurityConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeSecurityConfigurationOutputError>
}

public struct DescribeSecurityConfigurationInput: Equatable {
    /// <p>The name of the security configuration.</p>
    public let name: String?

    public init (
        name: String? = nil
    )
    {
        self.name = name
    }
}

struct DescribeSecurityConfigurationInputBody: Equatable {
    public let name: String?
}

extension DescribeSecurityConfigurationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DescribeSecurityConfigurationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeSecurityConfigurationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeSecurityConfigurationOutputError: Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeSecurityConfigurationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeSecurityConfigurationOutputResponse(creationDateTime: \(String(describing: creationDateTime)), name: \(String(describing: name)), securityConfiguration: \(String(describing: securityConfiguration)))"}
}

extension DescribeSecurityConfigurationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeSecurityConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.creationDateTime = output.creationDateTime
            self.name = output.name
            self.securityConfiguration = output.securityConfiguration
        } else {
            self.creationDateTime = nil
            self.name = nil
            self.securityConfiguration = nil
        }
    }
}

public struct DescribeSecurityConfigurationOutputResponse: Equatable {
    /// <p>The date and time the security configuration was created</p>
    public let creationDateTime: Date?
    /// <p>The name of the security configuration.</p>
    public let name: String?
    /// <p>The security configuration details in JSON format.</p>
    public let securityConfiguration: String?

    public init (
        creationDateTime: Date? = nil,
        name: String? = nil,
        securityConfiguration: String? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.name = name
        self.securityConfiguration = securityConfiguration
    }
}

struct DescribeSecurityConfigurationOutputResponseBody: Equatable {
    public let name: String?
    public let securityConfiguration: String?
    public let creationDateTime: Date?
}

extension DescribeSecurityConfigurationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case creationDateTime = "CreationDateTime"
        case name = "Name"
        case securityConfiguration = "SecurityConfiguration"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
    }
}

public struct DescribeStepInputBodyMiddleware: Middleware {
    public let id: String = "DescribeStepInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeStepInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeStepOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeStepInput>
    public typealias MOutput = OperationOutput<DescribeStepOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeStepOutputError>
}

extension DescribeStepInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeStepInput(clusterId: \(String(describing: clusterId)), stepId: \(String(describing: stepId)))"}
}

extension DescribeStepInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case stepId = "StepId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let stepId = stepId {
            try encodeContainer.encode(stepId, forKey: .stepId)
        }
    }
}

public struct DescribeStepInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeStepInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeStepInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeStepOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeStepInput>
    public typealias MOutput = OperationOutput<DescribeStepOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeStepOutputError>
}

public struct DescribeStepInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeStepInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeStepInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeStepOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeStepInput>
    public typealias MOutput = OperationOutput<DescribeStepOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeStepOutputError>
}

/// <p>This input determines which step to describe.</p>
public struct DescribeStepInput: Equatable {
    /// <p>The identifier of the cluster with steps to describe.</p>
    public let clusterId: String?
    /// <p>The identifier of the step to describe.</p>
    public let stepId: String?

    public init (
        clusterId: String? = nil,
        stepId: String? = nil
    )
    {
        self.clusterId = clusterId
        self.stepId = stepId
    }
}

struct DescribeStepInputBody: Equatable {
    public let clusterId: String?
    public let stepId: String?
}

extension DescribeStepInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case stepId = "StepId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let stepIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stepId)
        stepId = stepIdDecoded
    }
}

extension DescribeStepOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeStepOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeStepOutputError: Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStepOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeStepOutputResponse(step: \(String(describing: step)))"}
}

extension DescribeStepOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeStepOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.step = output.step
        } else {
            self.step = nil
        }
    }
}

/// <p>This output contains the description of the cluster step.</p>
public struct DescribeStepOutputResponse: Equatable {
    /// <p>The step details for the requested step identifier.</p>
    public let step: Step?

    public init (
        step: Step? = nil
    )
    {
        self.step = step
    }
}

struct DescribeStepOutputResponseBody: Equatable {
    public let step: Step?
}

extension DescribeStepOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case step = "Step"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stepDecoded = try containerValues.decodeIfPresent(Step.self, forKey: .step)
        step = stepDecoded
    }
}

public struct DescribeStudioInputBodyMiddleware: Middleware {
    public let id: String = "DescribeStudioInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeStudioInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeStudioOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeStudioInput>
    public typealias MOutput = OperationOutput<DescribeStudioOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeStudioOutputError>
}

extension DescribeStudioInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeStudioInput(studioId: \(String(describing: studioId)))"}
}

extension DescribeStudioInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case studioId = "StudioId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let studioId = studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
    }
}

public struct DescribeStudioInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeStudioInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeStudioInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeStudioOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeStudioInput>
    public typealias MOutput = OperationOutput<DescribeStudioOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeStudioOutputError>
}

public struct DescribeStudioInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeStudioInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeStudioInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeStudioOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeStudioInput>
    public typealias MOutput = OperationOutput<DescribeStudioOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeStudioOutputError>
}

public struct DescribeStudioInput: Equatable {
    /// <p>The Amazon EMR Studio ID.</p>
    public let studioId: String?

    public init (
        studioId: String? = nil
    )
    {
        self.studioId = studioId
    }
}

struct DescribeStudioInputBody: Equatable {
    public let studioId: String?
}

extension DescribeStudioInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case studioId = "StudioId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .studioId)
        studioId = studioIdDecoded
    }
}

extension DescribeStudioOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeStudioOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeStudioOutputError: Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStudioOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescribeStudioOutputResponse(studio: \(String(describing: studio)))"}
}

extension DescribeStudioOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescribeStudioOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.studio = output.studio
        } else {
            self.studio = nil
        }
    }
}

public struct DescribeStudioOutputResponse: Equatable {
    /// <p>The Amazon EMR Studio details.</p>
    public let studio: Studio?

    public init (
        studio: Studio? = nil
    )
    {
        self.studio = studio
    }
}

struct DescribeStudioOutputResponseBody: Equatable {
    public let studio: Studio?
}

extension DescribeStudioOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case studio = "Studio"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioDecoded = try containerValues.decodeIfPresent(Studio.self, forKey: .studio)
        studio = studioDecoded
    }
}

extension EbsBlockDevice: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case device = "Device"
        case volumeSpecification = "VolumeSpecification"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let device = device {
            try encodeContainer.encode(device, forKey: .device)
        }
        if let volumeSpecification = volumeSpecification {
            try encodeContainer.encode(volumeSpecification, forKey: .volumeSpecification)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeSpecificationDecoded = try containerValues.decodeIfPresent(VolumeSpecification.self, forKey: .volumeSpecification)
        volumeSpecification = volumeSpecificationDecoded
        let deviceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .device)
        device = deviceDecoded
    }
}

extension EbsBlockDevice: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EbsBlockDevice(device: \(String(describing: device)), volumeSpecification: \(String(describing: volumeSpecification)))"}
}

/// <p>Configuration of requested EBS block device associated with the instance group.</p>
public struct EbsBlockDevice: Equatable {
    /// <p>The device name that is exposed to the instance, such as /dev/sdh.</p>
    public let device: String?
    /// <p>EBS volume specifications such as volume type, IOPS, and size (GiB) that will be
    ///          requested for the EBS volume attached to an EC2 instance in the cluster.</p>
    public let volumeSpecification: VolumeSpecification?

    public init (
        device: String? = nil,
        volumeSpecification: VolumeSpecification? = nil
    )
    {
        self.device = device
        self.volumeSpecification = volumeSpecification
    }
}

extension EbsBlockDeviceConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case volumeSpecification = "VolumeSpecification"
        case volumesPerInstance = "VolumesPerInstance"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let volumeSpecification = volumeSpecification {
            try encodeContainer.encode(volumeSpecification, forKey: .volumeSpecification)
        }
        if let volumesPerInstance = volumesPerInstance {
            try encodeContainer.encode(volumesPerInstance, forKey: .volumesPerInstance)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeSpecificationDecoded = try containerValues.decodeIfPresent(VolumeSpecification.self, forKey: .volumeSpecification)
        volumeSpecification = volumeSpecificationDecoded
        let volumesPerInstanceDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .volumesPerInstance)
        volumesPerInstance = volumesPerInstanceDecoded
    }
}

extension EbsBlockDeviceConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EbsBlockDeviceConfig(volumeSpecification: \(String(describing: volumeSpecification)), volumesPerInstance: \(String(describing: volumesPerInstance)))"}
}

/// <p>Configuration of requested EBS block device associated with the instance group with
///          count of volumes that will be associated to every instance.</p>
public struct EbsBlockDeviceConfig: Equatable {
    /// <p>EBS volume specifications such as volume type, IOPS, and size (GiB) that will be
    ///          requested for the EBS volume attached to an EC2 instance in the cluster.</p>
    public let volumeSpecification: VolumeSpecification?
    /// <p>Number of EBS volumes with a specific volume configuration that will be associated with
    ///          every instance in the instance group</p>
    public let volumesPerInstance: Int?

    public init (
        volumeSpecification: VolumeSpecification? = nil,
        volumesPerInstance: Int? = nil
    )
    {
        self.volumeSpecification = volumeSpecification
        self.volumesPerInstance = volumesPerInstance
    }
}

extension EbsConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ebsBlockDeviceConfigs = "EbsBlockDeviceConfigs"
        case ebsOptimized = "EbsOptimized"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ebsBlockDeviceConfigs = ebsBlockDeviceConfigs {
            var ebsBlockDeviceConfigsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ebsBlockDeviceConfigs)
            for ebsblockdeviceconfiglist0 in ebsBlockDeviceConfigs {
                try ebsBlockDeviceConfigsContainer.encode(ebsblockdeviceconfiglist0)
            }
        }
        if let ebsOptimized = ebsOptimized {
            try encodeContainer.encode(ebsOptimized, forKey: .ebsOptimized)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ebsBlockDeviceConfigsContainer = try containerValues.decodeIfPresent([EbsBlockDeviceConfig?].self, forKey: .ebsBlockDeviceConfigs)
        var ebsBlockDeviceConfigsDecoded0:[EbsBlockDeviceConfig]? = nil
        if let ebsBlockDeviceConfigsContainer = ebsBlockDeviceConfigsContainer {
            ebsBlockDeviceConfigsDecoded0 = [EbsBlockDeviceConfig]()
            for structure0 in ebsBlockDeviceConfigsContainer {
                if let structure0 = structure0 {
                    ebsBlockDeviceConfigsDecoded0?.append(structure0)
                }
            }
        }
        ebsBlockDeviceConfigs = ebsBlockDeviceConfigsDecoded0
        let ebsOptimizedDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .ebsOptimized)
        ebsOptimized = ebsOptimizedDecoded
    }
}

extension EbsConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EbsConfiguration(ebsBlockDeviceConfigs: \(String(describing: ebsBlockDeviceConfigs)), ebsOptimized: \(String(describing: ebsOptimized)))"}
}

/// <p>The Amazon EBS configuration of a cluster instance.</p>
public struct EbsConfiguration: Equatable {
    /// <p>An array of Amazon EBS volume specifications attached to a cluster instance.</p>
    public let ebsBlockDeviceConfigs: [EbsBlockDeviceConfig]?
    /// <p>Indicates whether an Amazon EBS volume is EBS-optimized.</p>
    public let ebsOptimized: Bool?

    public init (
        ebsBlockDeviceConfigs: [EbsBlockDeviceConfig]? = nil,
        ebsOptimized: Bool? = nil
    )
    {
        self.ebsBlockDeviceConfigs = ebsBlockDeviceConfigs
        self.ebsOptimized = ebsOptimized
    }
}

extension EbsVolume: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case device = "Device"
        case volumeId = "VolumeId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let device = device {
            try encodeContainer.encode(device, forKey: .device)
        }
        if let volumeId = volumeId {
            try encodeContainer.encode(volumeId, forKey: .volumeId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .device)
        device = deviceDecoded
        let volumeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .volumeId)
        volumeId = volumeIdDecoded
    }
}

extension EbsVolume: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EbsVolume(device: \(String(describing: device)), volumeId: \(String(describing: volumeId)))"}
}

/// <p>EBS block device that's attached to an EC2 instance.</p>
public struct EbsVolume: Equatable {
    /// <p>The device name that is exposed to the instance, such as /dev/sdh.</p>
    public let device: String?
    /// <p>The volume identifier of the EBS volume.</p>
    public let volumeId: String?

    public init (
        device: String? = nil,
        volumeId: String? = nil
    )
    {
        self.device = device
        self.volumeId = volumeId
    }
}

extension Ec2InstanceAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case additionalMasterSecurityGroups = "AdditionalMasterSecurityGroups"
        case additionalSlaveSecurityGroups = "AdditionalSlaveSecurityGroups"
        case ec2AvailabilityZone = "Ec2AvailabilityZone"
        case ec2KeyName = "Ec2KeyName"
        case ec2SubnetId = "Ec2SubnetId"
        case emrManagedMasterSecurityGroup = "EmrManagedMasterSecurityGroup"
        case emrManagedSlaveSecurityGroup = "EmrManagedSlaveSecurityGroup"
        case iamInstanceProfile = "IamInstanceProfile"
        case requestedEc2AvailabilityZones = "RequestedEc2AvailabilityZones"
        case requestedEc2SubnetIds = "RequestedEc2SubnetIds"
        case serviceAccessSecurityGroup = "ServiceAccessSecurityGroup"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalMasterSecurityGroups = additionalMasterSecurityGroups {
            var additionalMasterSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalMasterSecurityGroups)
            for stringlist0 in additionalMasterSecurityGroups {
                try additionalMasterSecurityGroupsContainer.encode(stringlist0)
            }
        }
        if let additionalSlaveSecurityGroups = additionalSlaveSecurityGroups {
            var additionalSlaveSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalSlaveSecurityGroups)
            for stringlist0 in additionalSlaveSecurityGroups {
                try additionalSlaveSecurityGroupsContainer.encode(stringlist0)
            }
        }
        if let ec2AvailabilityZone = ec2AvailabilityZone {
            try encodeContainer.encode(ec2AvailabilityZone, forKey: .ec2AvailabilityZone)
        }
        if let ec2KeyName = ec2KeyName {
            try encodeContainer.encode(ec2KeyName, forKey: .ec2KeyName)
        }
        if let ec2SubnetId = ec2SubnetId {
            try encodeContainer.encode(ec2SubnetId, forKey: .ec2SubnetId)
        }
        if let emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroup {
            try encodeContainer.encode(emrManagedMasterSecurityGroup, forKey: .emrManagedMasterSecurityGroup)
        }
        if let emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroup {
            try encodeContainer.encode(emrManagedSlaveSecurityGroup, forKey: .emrManagedSlaveSecurityGroup)
        }
        if let iamInstanceProfile = iamInstanceProfile {
            try encodeContainer.encode(iamInstanceProfile, forKey: .iamInstanceProfile)
        }
        if let requestedEc2AvailabilityZones = requestedEc2AvailabilityZones {
            var requestedEc2AvailabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .requestedEc2AvailabilityZones)
            for xmlstringmaxlen256list0 in requestedEc2AvailabilityZones {
                try requestedEc2AvailabilityZonesContainer.encode(xmlstringmaxlen256list0)
            }
        }
        if let requestedEc2SubnetIds = requestedEc2SubnetIds {
            var requestedEc2SubnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .requestedEc2SubnetIds)
            for xmlstringmaxlen256list0 in requestedEc2SubnetIds {
                try requestedEc2SubnetIdsContainer.encode(xmlstringmaxlen256list0)
            }
        }
        if let serviceAccessSecurityGroup = serviceAccessSecurityGroup {
            try encodeContainer.encode(serviceAccessSecurityGroup, forKey: .serviceAccessSecurityGroup)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ec2KeyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ec2KeyName)
        ec2KeyName = ec2KeyNameDecoded
        let ec2SubnetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ec2SubnetId)
        ec2SubnetId = ec2SubnetIdDecoded
        let requestedEc2SubnetIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .requestedEc2SubnetIds)
        var requestedEc2SubnetIdsDecoded0:[String]? = nil
        if let requestedEc2SubnetIdsContainer = requestedEc2SubnetIdsContainer {
            requestedEc2SubnetIdsDecoded0 = [String]()
            for string0 in requestedEc2SubnetIdsContainer {
                if let string0 = string0 {
                    requestedEc2SubnetIdsDecoded0?.append(string0)
                }
            }
        }
        requestedEc2SubnetIds = requestedEc2SubnetIdsDecoded0
        let ec2AvailabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ec2AvailabilityZone)
        ec2AvailabilityZone = ec2AvailabilityZoneDecoded
        let requestedEc2AvailabilityZonesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .requestedEc2AvailabilityZones)
        var requestedEc2AvailabilityZonesDecoded0:[String]? = nil
        if let requestedEc2AvailabilityZonesContainer = requestedEc2AvailabilityZonesContainer {
            requestedEc2AvailabilityZonesDecoded0 = [String]()
            for string0 in requestedEc2AvailabilityZonesContainer {
                if let string0 = string0 {
                    requestedEc2AvailabilityZonesDecoded0?.append(string0)
                }
            }
        }
        requestedEc2AvailabilityZones = requestedEc2AvailabilityZonesDecoded0
        let iamInstanceProfileDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iamInstanceProfile)
        iamInstanceProfile = iamInstanceProfileDecoded
        let emrManagedMasterSecurityGroupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .emrManagedMasterSecurityGroup)
        emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroupDecoded
        let emrManagedSlaveSecurityGroupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .emrManagedSlaveSecurityGroup)
        emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroupDecoded
        let serviceAccessSecurityGroupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceAccessSecurityGroup)
        serviceAccessSecurityGroup = serviceAccessSecurityGroupDecoded
        let additionalMasterSecurityGroupsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .additionalMasterSecurityGroups)
        var additionalMasterSecurityGroupsDecoded0:[String]? = nil
        if let additionalMasterSecurityGroupsContainer = additionalMasterSecurityGroupsContainer {
            additionalMasterSecurityGroupsDecoded0 = [String]()
            for string0 in additionalMasterSecurityGroupsContainer {
                if let string0 = string0 {
                    additionalMasterSecurityGroupsDecoded0?.append(string0)
                }
            }
        }
        additionalMasterSecurityGroups = additionalMasterSecurityGroupsDecoded0
        let additionalSlaveSecurityGroupsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .additionalSlaveSecurityGroups)
        var additionalSlaveSecurityGroupsDecoded0:[String]? = nil
        if let additionalSlaveSecurityGroupsContainer = additionalSlaveSecurityGroupsContainer {
            additionalSlaveSecurityGroupsDecoded0 = [String]()
            for string0 in additionalSlaveSecurityGroupsContainer {
                if let string0 = string0 {
                    additionalSlaveSecurityGroupsDecoded0?.append(string0)
                }
            }
        }
        additionalSlaveSecurityGroups = additionalSlaveSecurityGroupsDecoded0
    }
}

extension Ec2InstanceAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Ec2InstanceAttributes(additionalMasterSecurityGroups: \(String(describing: additionalMasterSecurityGroups)), additionalSlaveSecurityGroups: \(String(describing: additionalSlaveSecurityGroups)), ec2AvailabilityZone: \(String(describing: ec2AvailabilityZone)), ec2KeyName: \(String(describing: ec2KeyName)), ec2SubnetId: \(String(describing: ec2SubnetId)), emrManagedMasterSecurityGroup: \(String(describing: emrManagedMasterSecurityGroup)), emrManagedSlaveSecurityGroup: \(String(describing: emrManagedSlaveSecurityGroup)), iamInstanceProfile: \(String(describing: iamInstanceProfile)), requestedEc2AvailabilityZones: \(String(describing: requestedEc2AvailabilityZones)), requestedEc2SubnetIds: \(String(describing: requestedEc2SubnetIds)), serviceAccessSecurityGroup: \(String(describing: serviceAccessSecurityGroup)))"}
}

/// <p>Provides information about the EC2 instances in a cluster grouped by category. For
///          example, key name, subnet ID, IAM instance profile, and so on.</p>
public struct Ec2InstanceAttributes: Equatable {
    /// <p>A list of additional Amazon EC2 security group IDs for the master node.</p>
    public let additionalMasterSecurityGroups: [String]?
    /// <p>A list of additional Amazon EC2 security group IDs for the core and task nodes.</p>
    public let additionalSlaveSecurityGroups: [String]?
    /// <p>The Availability Zone in which the cluster will run. </p>
    public let ec2AvailabilityZone: String?
    /// <p>The name of the Amazon EC2 key pair to use when connecting with SSH into the master node
    ///          as a user named "hadoop".</p>
    public let ec2KeyName: String?
    /// <p>Set this parameter to the identifier of the Amazon VPC subnet where you want the cluster
    ///          to launch. If you do not specify this value, and your account supports EC2-Classic, the
    ///          cluster launches in EC2-Classic.</p>
    public let ec2SubnetId: String?
    /// <p>The identifier of the Amazon EC2 security group for the master node.</p>
    public let emrManagedMasterSecurityGroup: String?
    /// <p>The identifier of the Amazon EC2 security group for the core and task nodes.</p>
    public let emrManagedSlaveSecurityGroup: String?
    /// <p>The IAM role that was specified when the cluster was launched. The EC2 instances of the
    ///          cluster assume this role.</p>
    public let iamInstanceProfile: String?
    /// <p>Applies to clusters configured with the instance fleets option. Specifies one or more
    ///          Availability Zones in which to launch EC2 cluster instances when the EC2-Classic network
    ///          configuration is supported. Amazon EMR chooses the Availability Zone with the best fit from
    ///          among the list of <code>RequestedEc2AvailabilityZones</code>, and then launches all cluster
    ///          instances within that Availability Zone. If you do not specify this value, Amazon EMR
    ///          chooses the Availability Zone for you. <code>RequestedEc2SubnetIDs</code> and
    ///             <code>RequestedEc2AvailabilityZones</code> cannot be specified together.</p>
    public let requestedEc2AvailabilityZones: [String]?
    /// <p>Applies to clusters configured with the instance fleets option. Specifies the unique
    ///          identifier of one or more Amazon EC2 subnets in which to launch EC2 cluster instances.
    ///          Subnets must exist within the same VPC. Amazon EMR chooses the EC2 subnet with the best fit
    ///          from among the list of <code>RequestedEc2SubnetIds</code>, and then launches all cluster
    ///          instances within that Subnet. If this value is not specified, and the account and Region
    ///          support EC2-Classic networks, the cluster launches instances in the EC2-Classic network and
    ///          uses <code>RequestedEc2AvailabilityZones</code> instead of this setting. If EC2-Classic is
    ///          not supported, and no Subnet is specified, Amazon EMR chooses the subnet for you.
    ///             <code>RequestedEc2SubnetIDs</code> and <code>RequestedEc2AvailabilityZones</code> cannot
    ///          be specified together.</p>
    public let requestedEc2SubnetIds: [String]?
    /// <p>The identifier of the Amazon EC2 security group for the Amazon EMR service to access
    ///          clusters in VPC private subnets.</p>
    public let serviceAccessSecurityGroup: String?

    public init (
        additionalMasterSecurityGroups: [String]? = nil,
        additionalSlaveSecurityGroups: [String]? = nil,
        ec2AvailabilityZone: String? = nil,
        ec2KeyName: String? = nil,
        ec2SubnetId: String? = nil,
        emrManagedMasterSecurityGroup: String? = nil,
        emrManagedSlaveSecurityGroup: String? = nil,
        iamInstanceProfile: String? = nil,
        requestedEc2AvailabilityZones: [String]? = nil,
        requestedEc2SubnetIds: [String]? = nil,
        serviceAccessSecurityGroup: String? = nil
    )
    {
        self.additionalMasterSecurityGroups = additionalMasterSecurityGroups
        self.additionalSlaveSecurityGroups = additionalSlaveSecurityGroups
        self.ec2AvailabilityZone = ec2AvailabilityZone
        self.ec2KeyName = ec2KeyName
        self.ec2SubnetId = ec2SubnetId
        self.emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroup
        self.emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroup
        self.iamInstanceProfile = iamInstanceProfile
        self.requestedEc2AvailabilityZones = requestedEc2AvailabilityZones
        self.requestedEc2SubnetIds = requestedEc2SubnetIds
        self.serviceAccessSecurityGroup = serviceAccessSecurityGroup
    }
}

extension ExecutionEngineConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id = "Id"
        case masterInstanceSecurityGroupId = "MasterInstanceSecurityGroupId"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let masterInstanceSecurityGroupId = masterInstanceSecurityGroupId {
            try encodeContainer.encode(masterInstanceSecurityGroupId, forKey: .masterInstanceSecurityGroupId)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let typeDecoded = try containerValues.decodeIfPresent(ExecutionEngineType.self, forKey: .type)
        type = typeDecoded
        let masterInstanceSecurityGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .masterInstanceSecurityGroupId)
        masterInstanceSecurityGroupId = masterInstanceSecurityGroupIdDecoded
    }
}

extension ExecutionEngineConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ExecutionEngineConfig(id: \(String(describing: id)), masterInstanceSecurityGroupId: \(String(describing: masterInstanceSecurityGroupId)), type: \(String(describing: type)))"}
}

/// <p>Specifies the execution engine (cluster) to run the notebook and perform the notebook
///          execution, for example, an EMR cluster.</p>
public struct ExecutionEngineConfig: Equatable {
    /// <p>The unique identifier of the execution engine. For an EMR cluster, this is the cluster
    ///          ID.</p>
    public let id: String?
    /// <p>An optional unique ID of an EC2 security group to associate with the master instance of
    ///          the EMR cluster for this notebook execution. For more information see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-managed-notebooks-security-groups.html">Specifying
    ///             EC2 Security Groups for EMR Notebooks</a> in the <i>EMR Management
    ///             Guide</i>.</p>
    public let masterInstanceSecurityGroupId: String?
    /// <p>The type of execution engine. A value of <code>EMR</code> specifies an EMR
    ///          cluster.</p>
    public let type: ExecutionEngineType?

    public init (
        id: String? = nil,
        masterInstanceSecurityGroupId: String? = nil,
        type: ExecutionEngineType? = nil
    )
    {
        self.id = id
        self.masterInstanceSecurityGroupId = masterInstanceSecurityGroupId
        self.type = type
    }
}

public enum ExecutionEngineType {
    case emr
    case sdkUnknown(String)
}

extension ExecutionEngineType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ExecutionEngineType] {
        return [
            .emr,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .emr: return "EMR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ExecutionEngineType(rawValue: rawValue) ?? ExecutionEngineType.sdkUnknown(rawValue)
    }
}

extension FailureDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case logFile = "LogFile"
        case message = "Message"
        case reason = "Reason"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logFile = logFile {
            try encodeContainer.encode(logFile, forKey: .logFile)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reason)
        reason = reasonDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let logFileDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logFile)
        logFile = logFileDecoded
    }
}

extension FailureDetails: CustomDebugStringConvertible {
    public var debugDescription: String {
        "FailureDetails(logFile: \(String(describing: logFile)), message: \(String(describing: message)), reason: \(String(describing: reason)))"}
}

/// <p>The details of the step failure. The service attempts to detect the root cause for many
///          common failures.</p>
public struct FailureDetails: Equatable {
    /// <p>The path to the log file where the step failure root cause was originally
    ///          recorded.</p>
    public let logFile: String?
    /// <p>The descriptive message including the error the Amazon EMR service has identified as the
    ///          cause of step failure. This is text from an error log that describes the root cause of the
    ///          failure.</p>
    public let message: String?
    /// <p>The reason for the step failure. In the case where the service cannot successfully
    ///          determine the root cause of the failure, it returns "Unknown Error" as a reason.</p>
    public let reason: String?

    public init (
        logFile: String? = nil,
        message: String? = nil,
        reason: String? = nil
    )
    {
        self.logFile = logFile
        self.message = message
        self.reason = reason
    }
}

extension GetBlockPublicAccessConfigurationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetBlockPublicAccessConfigurationInput()"}
}

extension GetBlockPublicAccessConfigurationInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct GetBlockPublicAccessConfigurationInputHeadersMiddleware: Middleware {
    public let id: String = "GetBlockPublicAccessConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetBlockPublicAccessConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<GetBlockPublicAccessConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetBlockPublicAccessConfigurationInput>
    public typealias MOutput = OperationOutput<GetBlockPublicAccessConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetBlockPublicAccessConfigurationOutputError>
}

public struct GetBlockPublicAccessConfigurationInputQueryItemMiddleware: Middleware {
    public let id: String = "GetBlockPublicAccessConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetBlockPublicAccessConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<GetBlockPublicAccessConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetBlockPublicAccessConfigurationInput>
    public typealias MOutput = OperationOutput<GetBlockPublicAccessConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetBlockPublicAccessConfigurationOutputError>
}

public struct GetBlockPublicAccessConfigurationInput: Equatable {

    public init() {}
}

struct GetBlockPublicAccessConfigurationInputBody: Equatable {
}

extension GetBlockPublicAccessConfigurationInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension GetBlockPublicAccessConfigurationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBlockPublicAccessConfigurationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetBlockPublicAccessConfigurationOutputError: Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBlockPublicAccessConfigurationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetBlockPublicAccessConfigurationOutputResponse(blockPublicAccessConfiguration: \(String(describing: blockPublicAccessConfiguration)), blockPublicAccessConfigurationMetadata: \(String(describing: blockPublicAccessConfigurationMetadata)))"}
}

extension GetBlockPublicAccessConfigurationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetBlockPublicAccessConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.blockPublicAccessConfiguration = output.blockPublicAccessConfiguration
            self.blockPublicAccessConfigurationMetadata = output.blockPublicAccessConfigurationMetadata
        } else {
            self.blockPublicAccessConfiguration = nil
            self.blockPublicAccessConfigurationMetadata = nil
        }
    }
}

public struct GetBlockPublicAccessConfigurationOutputResponse: Equatable {
    /// <p>A configuration for Amazon EMR block public access. The configuration applies to all
    ///          clusters created in your account for the current Region. The configuration specifies
    ///          whether block public access is enabled. If block public access is enabled, security groups
    ///          associated with the cluster cannot have rules that allow inbound traffic from 0.0.0.0/0 or
    ///          ::/0 on a port, unless the port is specified as an exception using
    ///             <code>PermittedPublicSecurityGroupRuleRanges</code> in the
    ///             <code>BlockPublicAccessConfiguration</code>. By default, Port 22 (SSH) is an exception,
    ///          and public access is allowed on this port. You can change this by updating the block public
    ///          access configuration to remove the exception.</p>
    ///          <note>
    ///             <p>For accounts that created clusters in a Region before November 25, 2019, block public
    ///             access is disabled by default in that Region. To use this feature, you must manually
    ///             enable and configure it. For accounts that did not create an EMR cluster in a Region
    ///             before this date, block public access is enabled by default in that Region.</p>
    ///          </note>
    public let blockPublicAccessConfiguration: BlockPublicAccessConfiguration?
    /// <p>Properties that describe the AWS principal that created the
    ///             <code>BlockPublicAccessConfiguration</code> using the
    ///             <code>PutBlockPublicAccessConfiguration</code> action as well as the date and time that
    ///          the configuration was created. Each time a configuration for block public access is
    ///          updated, Amazon EMR updates this metadata.</p>
    public let blockPublicAccessConfigurationMetadata: BlockPublicAccessConfigurationMetadata?

    public init (
        blockPublicAccessConfiguration: BlockPublicAccessConfiguration? = nil,
        blockPublicAccessConfigurationMetadata: BlockPublicAccessConfigurationMetadata? = nil
    )
    {
        self.blockPublicAccessConfiguration = blockPublicAccessConfiguration
        self.blockPublicAccessConfigurationMetadata = blockPublicAccessConfigurationMetadata
    }
}

struct GetBlockPublicAccessConfigurationOutputResponseBody: Equatable {
    public let blockPublicAccessConfiguration: BlockPublicAccessConfiguration?
    public let blockPublicAccessConfigurationMetadata: BlockPublicAccessConfigurationMetadata?
}

extension GetBlockPublicAccessConfigurationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case blockPublicAccessConfiguration = "BlockPublicAccessConfiguration"
        case blockPublicAccessConfigurationMetadata = "BlockPublicAccessConfigurationMetadata"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blockPublicAccessConfigurationDecoded = try containerValues.decodeIfPresent(BlockPublicAccessConfiguration.self, forKey: .blockPublicAccessConfiguration)
        blockPublicAccessConfiguration = blockPublicAccessConfigurationDecoded
        let blockPublicAccessConfigurationMetadataDecoded = try containerValues.decodeIfPresent(BlockPublicAccessConfigurationMetadata.self, forKey: .blockPublicAccessConfigurationMetadata)
        blockPublicAccessConfigurationMetadata = blockPublicAccessConfigurationMetadataDecoded
    }
}

public struct GetManagedScalingPolicyInputBodyMiddleware: Middleware {
    public let id: String = "GetManagedScalingPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetManagedScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<GetManagedScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetManagedScalingPolicyInput>
    public typealias MOutput = OperationOutput<GetManagedScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetManagedScalingPolicyOutputError>
}

extension GetManagedScalingPolicyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetManagedScalingPolicyInput(clusterId: \(String(describing: clusterId)))"}
}

extension GetManagedScalingPolicyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
    }
}

public struct GetManagedScalingPolicyInputHeadersMiddleware: Middleware {
    public let id: String = "GetManagedScalingPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetManagedScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<GetManagedScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetManagedScalingPolicyInput>
    public typealias MOutput = OperationOutput<GetManagedScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetManagedScalingPolicyOutputError>
}

public struct GetManagedScalingPolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "GetManagedScalingPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetManagedScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<GetManagedScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetManagedScalingPolicyInput>
    public typealias MOutput = OperationOutput<GetManagedScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetManagedScalingPolicyOutputError>
}

public struct GetManagedScalingPolicyInput: Equatable {
    /// <p>Specifies the ID of the cluster for which the managed scaling policy will be fetched.
    ///       </p>
    public let clusterId: String?

    public init (
        clusterId: String? = nil
    )
    {
        self.clusterId = clusterId
    }
}

struct GetManagedScalingPolicyInputBody: Equatable {
    public let clusterId: String?
}

extension GetManagedScalingPolicyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
    }
}

extension GetManagedScalingPolicyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetManagedScalingPolicyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetManagedScalingPolicyOutputError: Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetManagedScalingPolicyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetManagedScalingPolicyOutputResponse(managedScalingPolicy: \(String(describing: managedScalingPolicy)))"}
}

extension GetManagedScalingPolicyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetManagedScalingPolicyOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.managedScalingPolicy = output.managedScalingPolicy
        } else {
            self.managedScalingPolicy = nil
        }
    }
}

public struct GetManagedScalingPolicyOutputResponse: Equatable {
    /// <p>Specifies the managed scaling policy that is attached to an Amazon EMR cluster. </p>
    public let managedScalingPolicy: ManagedScalingPolicy?

    public init (
        managedScalingPolicy: ManagedScalingPolicy? = nil
    )
    {
        self.managedScalingPolicy = managedScalingPolicy
    }
}

struct GetManagedScalingPolicyOutputResponseBody: Equatable {
    public let managedScalingPolicy: ManagedScalingPolicy?
}

extension GetManagedScalingPolicyOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case managedScalingPolicy = "ManagedScalingPolicy"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let managedScalingPolicyDecoded = try containerValues.decodeIfPresent(ManagedScalingPolicy.self, forKey: .managedScalingPolicy)
        managedScalingPolicy = managedScalingPolicyDecoded
    }
}

public struct GetStudioSessionMappingInputBodyMiddleware: Middleware {
    public let id: String = "GetStudioSessionMappingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetStudioSessionMappingInput>,
                  next: H) -> Swift.Result<OperationOutput<GetStudioSessionMappingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetStudioSessionMappingInput>
    public typealias MOutput = OperationOutput<GetStudioSessionMappingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetStudioSessionMappingOutputError>
}

extension GetStudioSessionMappingInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetStudioSessionMappingInput(identityId: \(String(describing: identityId)), identityName: \(String(describing: identityName)), identityType: \(String(describing: identityType)), studioId: \(String(describing: studioId)))"}
}

extension GetStudioSessionMappingInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case identityId = "IdentityId"
        case identityName = "IdentityName"
        case identityType = "IdentityType"
        case studioId = "StudioId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identityId = identityId {
            try encodeContainer.encode(identityId, forKey: .identityId)
        }
        if let identityName = identityName {
            try encodeContainer.encode(identityName, forKey: .identityName)
        }
        if let identityType = identityType {
            try encodeContainer.encode(identityType.rawValue, forKey: .identityType)
        }
        if let studioId = studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
    }
}

public struct GetStudioSessionMappingInputHeadersMiddleware: Middleware {
    public let id: String = "GetStudioSessionMappingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetStudioSessionMappingInput>,
                  next: H) -> Swift.Result<OperationOutput<GetStudioSessionMappingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetStudioSessionMappingInput>
    public typealias MOutput = OperationOutput<GetStudioSessionMappingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetStudioSessionMappingOutputError>
}

public struct GetStudioSessionMappingInputQueryItemMiddleware: Middleware {
    public let id: String = "GetStudioSessionMappingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetStudioSessionMappingInput>,
                  next: H) -> Swift.Result<OperationOutput<GetStudioSessionMappingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetStudioSessionMappingInput>
    public typealias MOutput = OperationOutput<GetStudioSessionMappingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetStudioSessionMappingOutputError>
}

public struct GetStudioSessionMappingInput: Equatable {
    /// <p>The globally unique identifier (GUID) of the user or group. For more information, see
    ///             <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserId">UserId</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-GroupId">GroupId</a> in the <i>AWS SSO Identity Store API Reference</i>.
    ///          Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
    public let identityId: String?
    /// <p>The name of the user or group to fetch. For more information, see <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName">UserName</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName">DisplayName</a> in the <i>AWS SSO Identity Store API Reference</i>.
    ///          Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
    public let identityName: String?
    /// <p>Specifies whether the identity to fetch is a user or a group.</p>
    public let identityType: IdentityType?
    /// <p>The ID of the Amazon EMR Studio.</p>
    public let studioId: String?

    public init (
        identityId: String? = nil,
        identityName: String? = nil,
        identityType: IdentityType? = nil,
        studioId: String? = nil
    )
    {
        self.identityId = identityId
        self.identityName = identityName
        self.identityType = identityType
        self.studioId = studioId
    }
}

struct GetStudioSessionMappingInputBody: Equatable {
    public let studioId: String?
    public let identityId: String?
    public let identityName: String?
    public let identityType: IdentityType?
}

extension GetStudioSessionMappingInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case identityId = "IdentityId"
        case identityName = "IdentityName"
        case identityType = "IdentityType"
        case studioId = "StudioId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .studioId)
        studioId = studioIdDecoded
        let identityIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identityId)
        identityId = identityIdDecoded
        let identityNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identityName)
        identityName = identityNameDecoded
        let identityTypeDecoded = try containerValues.decodeIfPresent(IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
    }
}

extension GetStudioSessionMappingOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetStudioSessionMappingOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetStudioSessionMappingOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetStudioSessionMappingOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetStudioSessionMappingOutputResponse(sessionMapping: \(String(describing: sessionMapping)))"}
}

extension GetStudioSessionMappingOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetStudioSessionMappingOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.sessionMapping = output.sessionMapping
        } else {
            self.sessionMapping = nil
        }
    }
}

public struct GetStudioSessionMappingOutputResponse: Equatable {
    /// <p>The session mapping details for the specified Amazon EMR Studio and identity, including
    ///          session policy ARN and creation time.</p>
    public let sessionMapping: SessionMappingDetail?

    public init (
        sessionMapping: SessionMappingDetail? = nil
    )
    {
        self.sessionMapping = sessionMapping
    }
}

struct GetStudioSessionMappingOutputResponseBody: Equatable {
    public let sessionMapping: SessionMappingDetail?
}

extension GetStudioSessionMappingOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case sessionMapping = "SessionMapping"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sessionMappingDecoded = try containerValues.decodeIfPresent(SessionMappingDetail.self, forKey: .sessionMapping)
        sessionMapping = sessionMappingDecoded
    }
}

extension HadoopJarStepConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case args = "Args"
        case jar = "Jar"
        case mainClass = "MainClass"
        case properties = "Properties"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let args = args {
            var argsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .args)
            for xmlstringlist0 in args {
                try argsContainer.encode(xmlstringlist0)
            }
        }
        if let jar = jar {
            try encodeContainer.encode(jar, forKey: .jar)
        }
        if let mainClass = mainClass {
            try encodeContainer.encode(mainClass, forKey: .mainClass)
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .properties)
            for keyvaluelist0 in properties {
                try propertiesContainer.encode(keyvaluelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let propertiesContainer = try containerValues.decodeIfPresent([KeyValue?].self, forKey: .properties)
        var propertiesDecoded0:[KeyValue]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [KeyValue]()
            for structure0 in propertiesContainer {
                if let structure0 = structure0 {
                    propertiesDecoded0?.append(structure0)
                }
            }
        }
        properties = propertiesDecoded0
        let jarDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jar)
        jar = jarDecoded
        let mainClassDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mainClass)
        mainClass = mainClassDecoded
        let argsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .args)
        var argsDecoded0:[String]? = nil
        if let argsContainer = argsContainer {
            argsDecoded0 = [String]()
            for string0 in argsContainer {
                if let string0 = string0 {
                    argsDecoded0?.append(string0)
                }
            }
        }
        args = argsDecoded0
    }
}

extension HadoopJarStepConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HadoopJarStepConfig(args: \(String(describing: args)), jar: \(String(describing: jar)), mainClass: \(String(describing: mainClass)), properties: \(String(describing: properties)))"}
}

/// <p>A job flow step consisting of a JAR file whose main function will be executed. The main
///          function submits a job for Hadoop to execute and waits for the job to finish or
///          fail.</p>
public struct HadoopJarStepConfig: Equatable {
    /// <p>A list of command line arguments passed to the JAR file's main function when
    ///          executed.</p>
    public let args: [String]?
    /// <p>A path to a JAR file run during the step.</p>
    public let jar: String?
    /// <p>The name of the main class in the specified Java file. If not specified, the JAR file
    ///          should specify a Main-Class in its manifest file.</p>
    public let mainClass: String?
    /// <p>A list of Java properties that are set when the step runs. You can use these properties
    ///          to pass key-value pairs to your main function.</p>
    public let properties: [KeyValue]?

    public init (
        args: [String]? = nil,
        jar: String? = nil,
        mainClass: String? = nil,
        properties: [KeyValue]? = nil
    )
    {
        self.args = args
        self.jar = jar
        self.mainClass = mainClass
        self.properties = properties
    }
}

extension HadoopStepConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case args = "Args"
        case jar = "Jar"
        case mainClass = "MainClass"
        case properties = "Properties"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let args = args {
            var argsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .args)
            for stringlist0 in args {
                try argsContainer.encode(stringlist0)
            }
        }
        if let jar = jar {
            try encodeContainer.encode(jar, forKey: .jar)
        }
        if let mainClass = mainClass {
            try encodeContainer.encode(mainClass, forKey: .mainClass)
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .properties)
            for (dictKey0, stringmap0) in properties {
                try propertiesContainer.encode(stringmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jarDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jar)
        jar = jarDecoded
        let propertiesContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .properties)
        var propertiesDecoded0: [String:String]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [String:String]()
            for (key0, string0) in propertiesContainer {
                if let string0 = string0 {
                    propertiesDecoded0?[key0] = string0
                }
            }
        }
        properties = propertiesDecoded0
        let mainClassDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mainClass)
        mainClass = mainClassDecoded
        let argsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .args)
        var argsDecoded0:[String]? = nil
        if let argsContainer = argsContainer {
            argsDecoded0 = [String]()
            for string0 in argsContainer {
                if let string0 = string0 {
                    argsDecoded0?.append(string0)
                }
            }
        }
        args = argsDecoded0
    }
}

extension HadoopStepConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "HadoopStepConfig(args: \(String(describing: args)), jar: \(String(describing: jar)), mainClass: \(String(describing: mainClass)), properties: \(String(describing: properties)))"}
}

/// <p>A cluster step consisting of a JAR file whose main function will be executed. The main
///          function submits a job for Hadoop to execute and waits for the job to finish or
///          fail.</p>
public struct HadoopStepConfig: Equatable {
    /// <p>The list of command line arguments to pass to the JAR file's main function for
    ///          execution.</p>
    public let args: [String]?
    /// <p>The path to the JAR file that runs during the step.</p>
    public let jar: String?
    /// <p>The name of the main class in the specified Java file. If not specified, the JAR file
    ///          should specify a main class in its manifest file.</p>
    public let mainClass: String?
    /// <p>The list of Java properties that are set when the step runs. You can use these
    ///          properties to pass key-value pairs to your main function.</p>
    public let properties: [String:String]?

    public init (
        args: [String]? = nil,
        jar: String? = nil,
        mainClass: String? = nil,
        properties: [String:String]? = nil
    )
    {
        self.args = args
        self.jar = jar
        self.mainClass = mainClass
        self.properties = properties
    }
}

public enum IdentityType {
    case group
    case user
    case sdkUnknown(String)
}

extension IdentityType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [IdentityType] {
        return [
            .group,
            .user,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .group: return "GROUP"
        case .user: return "USER"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = IdentityType(rawValue: rawValue) ?? IdentityType.sdkUnknown(rawValue)
    }
}

extension Instance: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ebsVolumes = "EbsVolumes"
        case ec2InstanceId = "Ec2InstanceId"
        case id = "Id"
        case instanceFleetId = "InstanceFleetId"
        case instanceGroupId = "InstanceGroupId"
        case instanceType = "InstanceType"
        case market = "Market"
        case privateDnsName = "PrivateDnsName"
        case privateIpAddress = "PrivateIpAddress"
        case publicDnsName = "PublicDnsName"
        case publicIpAddress = "PublicIpAddress"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ebsVolumes = ebsVolumes {
            var ebsVolumesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ebsVolumes)
            for ebsvolumelist0 in ebsVolumes {
                try ebsVolumesContainer.encode(ebsvolumelist0)
            }
        }
        if let ec2InstanceId = ec2InstanceId {
            try encodeContainer.encode(ec2InstanceId, forKey: .ec2InstanceId)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let instanceFleetId = instanceFleetId {
            try encodeContainer.encode(instanceFleetId, forKey: .instanceFleetId)
        }
        if let instanceGroupId = instanceGroupId {
            try encodeContainer.encode(instanceGroupId, forKey: .instanceGroupId)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let market = market {
            try encodeContainer.encode(market.rawValue, forKey: .market)
        }
        if let privateDnsName = privateDnsName {
            try encodeContainer.encode(privateDnsName, forKey: .privateDnsName)
        }
        if let privateIpAddress = privateIpAddress {
            try encodeContainer.encode(privateIpAddress, forKey: .privateIpAddress)
        }
        if let publicDnsName = publicDnsName {
            try encodeContainer.encode(publicDnsName, forKey: .publicDnsName)
        }
        if let publicIpAddress = publicIpAddress {
            try encodeContainer.encode(publicIpAddress, forKey: .publicIpAddress)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let ec2InstanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ec2InstanceId)
        ec2InstanceId = ec2InstanceIdDecoded
        let publicDnsNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .publicDnsName)
        publicDnsName = publicDnsNameDecoded
        let publicIpAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .publicIpAddress)
        publicIpAddress = publicIpAddressDecoded
        let privateDnsNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .privateDnsName)
        privateDnsName = privateDnsNameDecoded
        let privateIpAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .privateIpAddress)
        privateIpAddress = privateIpAddressDecoded
        let statusDecoded = try containerValues.decodeIfPresent(InstanceStatus.self, forKey: .status)
        status = statusDecoded
        let instanceGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceGroupId)
        instanceGroupId = instanceGroupIdDecoded
        let instanceFleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceFleetId)
        instanceFleetId = instanceFleetIdDecoded
        let marketDecoded = try containerValues.decodeIfPresent(MarketType.self, forKey: .market)
        market = marketDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let ebsVolumesContainer = try containerValues.decodeIfPresent([EbsVolume?].self, forKey: .ebsVolumes)
        var ebsVolumesDecoded0:[EbsVolume]? = nil
        if let ebsVolumesContainer = ebsVolumesContainer {
            ebsVolumesDecoded0 = [EbsVolume]()
            for structure0 in ebsVolumesContainer {
                if let structure0 = structure0 {
                    ebsVolumesDecoded0?.append(structure0)
                }
            }
        }
        ebsVolumes = ebsVolumesDecoded0
    }
}

extension Instance: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Instance(ebsVolumes: \(String(describing: ebsVolumes)), ec2InstanceId: \(String(describing: ec2InstanceId)), id: \(String(describing: id)), instanceFleetId: \(String(describing: instanceFleetId)), instanceGroupId: \(String(describing: instanceGroupId)), instanceType: \(String(describing: instanceType)), market: \(String(describing: market)), privateDnsName: \(String(describing: privateDnsName)), privateIpAddress: \(String(describing: privateIpAddress)), publicDnsName: \(String(describing: publicDnsName)), publicIpAddress: \(String(describing: publicIpAddress)), status: \(String(describing: status)))"}
}

/// <p>Represents an EC2 instance provisioned as part of cluster.</p>
public struct Instance: Equatable {
    /// <p>The list of EBS volumes that are attached to this instance.</p>
    public let ebsVolumes: [EbsVolume]?
    /// <p>The unique identifier of the instance in Amazon EC2.</p>
    public let ec2InstanceId: String?
    /// <p>The unique identifier for the instance in Amazon EMR.</p>
    public let id: String?
    /// <p>The unique identifier of the instance fleet to which an EC2 instance belongs.</p>
    public let instanceFleetId: String?
    /// <p>The identifier of the instance group to which this instance belongs.</p>
    public let instanceGroupId: String?
    /// <p>The EC2 instance type, for example <code>m3.xlarge</code>.</p>
    public let instanceType: String?
    /// <p>The instance purchasing option. Valid values are <code>ON_DEMAND</code> or
    ///             <code>SPOT</code>. </p>
    public let market: MarketType?
    /// <p>The private DNS name of the instance.</p>
    public let privateDnsName: String?
    /// <p>The private IP address of the instance.</p>
    public let privateIpAddress: String?
    /// <p>The public DNS name of the instance.</p>
    public let publicDnsName: String?
    /// <p>The public IP address of the instance.</p>
    public let publicIpAddress: String?
    /// <p>The current status of the instance.</p>
    public let status: InstanceStatus?

    public init (
        ebsVolumes: [EbsVolume]? = nil,
        ec2InstanceId: String? = nil,
        id: String? = nil,
        instanceFleetId: String? = nil,
        instanceGroupId: String? = nil,
        instanceType: String? = nil,
        market: MarketType? = nil,
        privateDnsName: String? = nil,
        privateIpAddress: String? = nil,
        publicDnsName: String? = nil,
        publicIpAddress: String? = nil,
        status: InstanceStatus? = nil
    )
    {
        self.ebsVolumes = ebsVolumes
        self.ec2InstanceId = ec2InstanceId
        self.id = id
        self.instanceFleetId = instanceFleetId
        self.instanceGroupId = instanceGroupId
        self.instanceType = instanceType
        self.market = market
        self.privateDnsName = privateDnsName
        self.privateIpAddress = privateIpAddress
        self.publicDnsName = publicDnsName
        self.publicIpAddress = publicIpAddress
        self.status = status
    }
}

public enum InstanceCollectionType {
    case instanceFleet
    case instanceGroup
    case sdkUnknown(String)
}

extension InstanceCollectionType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InstanceCollectionType] {
        return [
            .instanceFleet,
            .instanceGroup,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .instanceFleet: return "INSTANCE_FLEET"
        case .instanceGroup: return "INSTANCE_GROUP"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InstanceCollectionType(rawValue: rawValue) ?? InstanceCollectionType.sdkUnknown(rawValue)
    }
}

extension InstanceFleet: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id = "Id"
        case instanceFleetType = "InstanceFleetType"
        case instanceTypeSpecifications = "InstanceTypeSpecifications"
        case launchSpecifications = "LaunchSpecifications"
        case name = "Name"
        case provisionedOnDemandCapacity = "ProvisionedOnDemandCapacity"
        case provisionedSpotCapacity = "ProvisionedSpotCapacity"
        case status = "Status"
        case targetOnDemandCapacity = "TargetOnDemandCapacity"
        case targetSpotCapacity = "TargetSpotCapacity"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let instanceFleetType = instanceFleetType {
            try encodeContainer.encode(instanceFleetType.rawValue, forKey: .instanceFleetType)
        }
        if let instanceTypeSpecifications = instanceTypeSpecifications {
            var instanceTypeSpecificationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceTypeSpecifications)
            for instancetypespecificationlist0 in instanceTypeSpecifications {
                try instanceTypeSpecificationsContainer.encode(instancetypespecificationlist0)
            }
        }
        if let launchSpecifications = launchSpecifications {
            try encodeContainer.encode(launchSpecifications, forKey: .launchSpecifications)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let provisionedOnDemandCapacity = provisionedOnDemandCapacity {
            try encodeContainer.encode(provisionedOnDemandCapacity, forKey: .provisionedOnDemandCapacity)
        }
        if let provisionedSpotCapacity = provisionedSpotCapacity {
            try encodeContainer.encode(provisionedSpotCapacity, forKey: .provisionedSpotCapacity)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let targetOnDemandCapacity = targetOnDemandCapacity {
            try encodeContainer.encode(targetOnDemandCapacity, forKey: .targetOnDemandCapacity)
        }
        if let targetSpotCapacity = targetSpotCapacity {
            try encodeContainer.encode(targetSpotCapacity, forKey: .targetSpotCapacity)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(InstanceFleetStatus.self, forKey: .status)
        status = statusDecoded
        let instanceFleetTypeDecoded = try containerValues.decodeIfPresent(InstanceFleetType.self, forKey: .instanceFleetType)
        instanceFleetType = instanceFleetTypeDecoded
        let targetOnDemandCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .targetOnDemandCapacity)
        targetOnDemandCapacity = targetOnDemandCapacityDecoded
        let targetSpotCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .targetSpotCapacity)
        targetSpotCapacity = targetSpotCapacityDecoded
        let provisionedOnDemandCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .provisionedOnDemandCapacity)
        provisionedOnDemandCapacity = provisionedOnDemandCapacityDecoded
        let provisionedSpotCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .provisionedSpotCapacity)
        provisionedSpotCapacity = provisionedSpotCapacityDecoded
        let instanceTypeSpecificationsContainer = try containerValues.decodeIfPresent([InstanceTypeSpecification?].self, forKey: .instanceTypeSpecifications)
        var instanceTypeSpecificationsDecoded0:[InstanceTypeSpecification]? = nil
        if let instanceTypeSpecificationsContainer = instanceTypeSpecificationsContainer {
            instanceTypeSpecificationsDecoded0 = [InstanceTypeSpecification]()
            for structure0 in instanceTypeSpecificationsContainer {
                if let structure0 = structure0 {
                    instanceTypeSpecificationsDecoded0?.append(structure0)
                }
            }
        }
        instanceTypeSpecifications = instanceTypeSpecificationsDecoded0
        let launchSpecificationsDecoded = try containerValues.decodeIfPresent(InstanceFleetProvisioningSpecifications.self, forKey: .launchSpecifications)
        launchSpecifications = launchSpecificationsDecoded
    }
}

extension InstanceFleet: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceFleet(id: \(String(describing: id)), instanceFleetType: \(String(describing: instanceFleetType)), instanceTypeSpecifications: \(String(describing: instanceTypeSpecifications)), launchSpecifications: \(String(describing: launchSpecifications)), name: \(String(describing: name)), provisionedOnDemandCapacity: \(String(describing: provisionedOnDemandCapacity)), provisionedSpotCapacity: \(String(describing: provisionedSpotCapacity)), status: \(String(describing: status)), targetOnDemandCapacity: \(String(describing: targetOnDemandCapacity)), targetSpotCapacity: \(String(describing: targetSpotCapacity)))"}
}

/// <p>Describes an instance fleet, which is a group of EC2 instances that host a particular
///          node type (master, core, or task) in an Amazon EMR cluster. Instance fleets can consist of
///          a mix of instance types and On-Demand and Spot Instances, which are provisioned to meet a
///          defined target capacity. </p>
///          <note>
///             <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and
///             later, excluding 5.0.x versions.</p>
///          </note>
public struct InstanceFleet: Equatable {
    /// <p>The unique identifier of the instance fleet.</p>
    public let id: String?
    /// <p>The node type that the instance fleet hosts. Valid values are MASTER, CORE, or TASK.
    ///       </p>
    public let instanceFleetType: InstanceFleetType?
    /// <p>The specification for the instance types that comprise an instance fleet. Up to five
    ///          unique instance specifications may be defined for each instance fleet. </p>
    public let instanceTypeSpecifications: [InstanceTypeSpecification]?
    /// <p>Describes the launch specification for an instance fleet. </p>
    public let launchSpecifications: InstanceFleetProvisioningSpecifications?
    /// <p>A friendly name for the instance fleet.</p>
    public let name: String?
    /// <p>The number of On-Demand units that have been provisioned for the instance fleet to
    ///          fulfill <code>TargetOnDemandCapacity</code>. This provisioned capacity might be less than
    ///          or greater than <code>TargetOnDemandCapacity</code>.</p>
    public let provisionedOnDemandCapacity: Int?
    /// <p>The number of Spot units that have been provisioned for this instance fleet to fulfill
    ///             <code>TargetSpotCapacity</code>. This provisioned capacity might be less than or greater
    ///          than <code>TargetSpotCapacity</code>.</p>
    public let provisionedSpotCapacity: Int?
    /// <p>The current status of the instance fleet. </p>
    public let status: InstanceFleetStatus?
    /// <p>The target capacity of On-Demand units for the instance fleet, which determines how many
    ///          On-Demand Instances to provision. When the instance fleet launches, Amazon EMR tries to
    ///          provision On-Demand Instances as specified by <a>InstanceTypeConfig</a>. Each
    ///          instance configuration has a specified <code>WeightedCapacity</code>. When an On-Demand
    ///          Instance is provisioned, the <code>WeightedCapacity</code> units count toward the target
    ///          capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled,
    ///          even if this results in an overage. For example, if there are 2 units remaining to fulfill
    ///          capacity, and Amazon EMR can only provision an instance with a
    ///             <code>WeightedCapacity</code> of 5 units, the instance is provisioned, and the target
    ///          capacity is exceeded by 3 units. You can use <a>InstanceFleet$ProvisionedOnDemandCapacity</a> to determine the Spot capacity
    ///          units that have been provisioned for the instance fleet.</p>
    ///          <note>
    ///             <p>If not specified or set to 0, only Spot Instances are provisioned for the instance
    ///             fleet using <code>TargetSpotCapacity</code>. At least one of
    ///                <code>TargetSpotCapacity</code> and <code>TargetOnDemandCapacity</code> should be
    ///             greater than 0. For a master instance fleet, only one of <code>TargetSpotCapacity</code>
    ///             and <code>TargetOnDemandCapacity</code> can be specified, and its value must be
    ///             1.</p>
    ///          </note>
    public let targetOnDemandCapacity: Int?
    /// <p>The target capacity of Spot units for the instance fleet, which determines how many Spot
    ///          Instances to provision. When the instance fleet launches, Amazon EMR tries to provision
    ///          Spot Instances as specified by <a>InstanceTypeConfig</a>. Each instance
    ///          configuration has a specified <code>WeightedCapacity</code>. When a Spot instance is
    ///          provisioned, the <code>WeightedCapacity</code> units count toward the target capacity.
    ///          Amazon EMR provisions instances until the target capacity is totally fulfilled, even if
    ///          this results in an overage. For example, if there are 2 units remaining to fulfill
    ///          capacity, and Amazon EMR can only provision an instance with a
    ///             <code>WeightedCapacity</code> of 5 units, the instance is provisioned, and the target
    ///          capacity is exceeded by 3 units. You can use <a>InstanceFleet$ProvisionedSpotCapacity</a> to determine the Spot capacity units
    ///          that have been provisioned for the instance fleet.</p>
    ///          <note>
    ///             <p>If not specified or set to 0, only On-Demand Instances are provisioned for the
    ///             instance fleet. At least one of <code>TargetSpotCapacity</code> and
    ///                <code>TargetOnDemandCapacity</code> should be greater than 0. For a master instance
    ///             fleet, only one of <code>TargetSpotCapacity</code> and
    ///                <code>TargetOnDemandCapacity</code> can be specified, and its value must be 1.</p>
    ///          </note>
    public let targetSpotCapacity: Int?

    public init (
        id: String? = nil,
        instanceFleetType: InstanceFleetType? = nil,
        instanceTypeSpecifications: [InstanceTypeSpecification]? = nil,
        launchSpecifications: InstanceFleetProvisioningSpecifications? = nil,
        name: String? = nil,
        provisionedOnDemandCapacity: Int? = nil,
        provisionedSpotCapacity: Int? = nil,
        status: InstanceFleetStatus? = nil,
        targetOnDemandCapacity: Int? = nil,
        targetSpotCapacity: Int? = nil
    )
    {
        self.id = id
        self.instanceFleetType = instanceFleetType
        self.instanceTypeSpecifications = instanceTypeSpecifications
        self.launchSpecifications = launchSpecifications
        self.name = name
        self.provisionedOnDemandCapacity = provisionedOnDemandCapacity
        self.provisionedSpotCapacity = provisionedSpotCapacity
        self.status = status
        self.targetOnDemandCapacity = targetOnDemandCapacity
        self.targetSpotCapacity = targetSpotCapacity
    }
}

extension InstanceFleetConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instanceFleetType = "InstanceFleetType"
        case instanceTypeConfigs = "InstanceTypeConfigs"
        case launchSpecifications = "LaunchSpecifications"
        case name = "Name"
        case targetOnDemandCapacity = "TargetOnDemandCapacity"
        case targetSpotCapacity = "TargetSpotCapacity"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceFleetType = instanceFleetType {
            try encodeContainer.encode(instanceFleetType.rawValue, forKey: .instanceFleetType)
        }
        if let instanceTypeConfigs = instanceTypeConfigs {
            var instanceTypeConfigsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceTypeConfigs)
            for instancetypeconfiglist0 in instanceTypeConfigs {
                try instanceTypeConfigsContainer.encode(instancetypeconfiglist0)
            }
        }
        if let launchSpecifications = launchSpecifications {
            try encodeContainer.encode(launchSpecifications, forKey: .launchSpecifications)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let targetOnDemandCapacity = targetOnDemandCapacity {
            try encodeContainer.encode(targetOnDemandCapacity, forKey: .targetOnDemandCapacity)
        }
        if let targetSpotCapacity = targetSpotCapacity {
            try encodeContainer.encode(targetSpotCapacity, forKey: .targetSpotCapacity)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let instanceFleetTypeDecoded = try containerValues.decodeIfPresent(InstanceFleetType.self, forKey: .instanceFleetType)
        instanceFleetType = instanceFleetTypeDecoded
        let targetOnDemandCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .targetOnDemandCapacity)
        targetOnDemandCapacity = targetOnDemandCapacityDecoded
        let targetSpotCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .targetSpotCapacity)
        targetSpotCapacity = targetSpotCapacityDecoded
        let instanceTypeConfigsContainer = try containerValues.decodeIfPresent([InstanceTypeConfig?].self, forKey: .instanceTypeConfigs)
        var instanceTypeConfigsDecoded0:[InstanceTypeConfig]? = nil
        if let instanceTypeConfigsContainer = instanceTypeConfigsContainer {
            instanceTypeConfigsDecoded0 = [InstanceTypeConfig]()
            for structure0 in instanceTypeConfigsContainer {
                if let structure0 = structure0 {
                    instanceTypeConfigsDecoded0?.append(structure0)
                }
            }
        }
        instanceTypeConfigs = instanceTypeConfigsDecoded0
        let launchSpecificationsDecoded = try containerValues.decodeIfPresent(InstanceFleetProvisioningSpecifications.self, forKey: .launchSpecifications)
        launchSpecifications = launchSpecificationsDecoded
    }
}

extension InstanceFleetConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceFleetConfig(instanceFleetType: \(String(describing: instanceFleetType)), instanceTypeConfigs: \(String(describing: instanceTypeConfigs)), launchSpecifications: \(String(describing: launchSpecifications)), name: \(String(describing: name)), targetOnDemandCapacity: \(String(describing: targetOnDemandCapacity)), targetSpotCapacity: \(String(describing: targetSpotCapacity)))"}
}

/// <p>The configuration that defines an instance fleet.</p>
///          <note>
///             <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and
///             later, excluding 5.0.x versions.</p>
///          </note>
public struct InstanceFleetConfig: Equatable {
    /// <p>The node type that the instance fleet hosts. Valid values are MASTER, CORE, and
    ///          TASK.</p>
    public let instanceFleetType: InstanceFleetType?
    /// <p>The instance type configurations that define the EC2 instances in the instance
    ///          fleet.</p>
    public let instanceTypeConfigs: [InstanceTypeConfig]?
    /// <p>The launch specification for the instance fleet.</p>
    public let launchSpecifications: InstanceFleetProvisioningSpecifications?
    /// <p>The friendly name of the instance fleet.</p>
    public let name: String?
    /// <p>The target capacity of On-Demand units for the instance fleet, which determines how many
    ///          On-Demand Instances to provision. When the instance fleet launches, Amazon EMR tries to
    ///          provision On-Demand Instances as specified by <a>InstanceTypeConfig</a>. Each
    ///          instance configuration has a specified <code>WeightedCapacity</code>. When an On-Demand
    ///          Instance is provisioned, the <code>WeightedCapacity</code> units count toward the target
    ///          capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled,
    ///          even if this results in an overage. For example, if there are 2 units remaining to fulfill
    ///          capacity, and Amazon EMR can only provision an instance with a
    ///             <code>WeightedCapacity</code> of 5 units, the instance is provisioned, and the target
    ///          capacity is exceeded by 3 units.</p>
    ///          <note>
    ///             <p>If not specified or set to 0, only Spot Instances are provisioned for the instance
    ///             fleet using <code>TargetSpotCapacity</code>. At least one of
    ///                <code>TargetSpotCapacity</code> and <code>TargetOnDemandCapacity</code> should be
    ///             greater than 0. For a master instance fleet, only one of <code>TargetSpotCapacity</code>
    ///             and <code>TargetOnDemandCapacity</code> can be specified, and its value must be
    ///             1.</p>
    ///          </note>
    public let targetOnDemandCapacity: Int?
    /// <p>The target capacity of Spot units for the instance fleet, which determines how many Spot
    ///          Instances to provision. When the instance fleet launches, Amazon EMR tries to provision
    ///          Spot Instances as specified by <a>InstanceTypeConfig</a>. Each instance
    ///          configuration has a specified <code>WeightedCapacity</code>. When a Spot Instance is
    ///          provisioned, the <code>WeightedCapacity</code> units count toward the target capacity.
    ///          Amazon EMR provisions instances until the target capacity is totally fulfilled, even if
    ///          this results in an overage. For example, if there are 2 units remaining to fulfill
    ///          capacity, and Amazon EMR can only provision an instance with a
    ///             <code>WeightedCapacity</code> of 5 units, the instance is provisioned, and the target
    ///          capacity is exceeded by 3 units.</p>
    ///          <note>
    ///             <p>If not specified or set to 0, only On-Demand Instances are provisioned for the
    ///             instance fleet. At least one of <code>TargetSpotCapacity</code> and
    ///                <code>TargetOnDemandCapacity</code> should be greater than 0. For a master instance
    ///             fleet, only one of <code>TargetSpotCapacity</code> and
    ///                <code>TargetOnDemandCapacity</code> can be specified, and its value must be 1.</p>
    ///          </note>
    public let targetSpotCapacity: Int?

    public init (
        instanceFleetType: InstanceFleetType? = nil,
        instanceTypeConfigs: [InstanceTypeConfig]? = nil,
        launchSpecifications: InstanceFleetProvisioningSpecifications? = nil,
        name: String? = nil,
        targetOnDemandCapacity: Int? = nil,
        targetSpotCapacity: Int? = nil
    )
    {
        self.instanceFleetType = instanceFleetType
        self.instanceTypeConfigs = instanceTypeConfigs
        self.launchSpecifications = launchSpecifications
        self.name = name
        self.targetOnDemandCapacity = targetOnDemandCapacity
        self.targetSpotCapacity = targetSpotCapacity
    }
}

extension InstanceFleetModifyConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instanceFleetId = "InstanceFleetId"
        case targetOnDemandCapacity = "TargetOnDemandCapacity"
        case targetSpotCapacity = "TargetSpotCapacity"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceFleetId = instanceFleetId {
            try encodeContainer.encode(instanceFleetId, forKey: .instanceFleetId)
        }
        if let targetOnDemandCapacity = targetOnDemandCapacity {
            try encodeContainer.encode(targetOnDemandCapacity, forKey: .targetOnDemandCapacity)
        }
        if let targetSpotCapacity = targetSpotCapacity {
            try encodeContainer.encode(targetSpotCapacity, forKey: .targetSpotCapacity)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceFleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceFleetId)
        instanceFleetId = instanceFleetIdDecoded
        let targetOnDemandCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .targetOnDemandCapacity)
        targetOnDemandCapacity = targetOnDemandCapacityDecoded
        let targetSpotCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .targetSpotCapacity)
        targetSpotCapacity = targetSpotCapacityDecoded
    }
}

extension InstanceFleetModifyConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceFleetModifyConfig(instanceFleetId: \(String(describing: instanceFleetId)), targetOnDemandCapacity: \(String(describing: targetOnDemandCapacity)), targetSpotCapacity: \(String(describing: targetSpotCapacity)))"}
}

/// <p>Configuration parameters for an instance fleet modification request.</p>
///          <note>
///             <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and
///             later, excluding 5.0.x versions.</p>
///          </note>
public struct InstanceFleetModifyConfig: Equatable {
    /// <p>A unique identifier for the instance fleet.</p>
    public let instanceFleetId: String?
    /// <p>The target capacity of On-Demand units for the instance fleet. For more information see
    ///             <a>InstanceFleetConfig$TargetOnDemandCapacity</a>.</p>
    public let targetOnDemandCapacity: Int?
    /// <p>The target capacity of Spot units for the instance fleet. For more information, see
    ///             <a>InstanceFleetConfig$TargetSpotCapacity</a>.</p>
    public let targetSpotCapacity: Int?

    public init (
        instanceFleetId: String? = nil,
        targetOnDemandCapacity: Int? = nil,
        targetSpotCapacity: Int? = nil
    )
    {
        self.instanceFleetId = instanceFleetId
        self.targetOnDemandCapacity = targetOnDemandCapacity
        self.targetSpotCapacity = targetSpotCapacity
    }
}

extension InstanceFleetProvisioningSpecifications: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case onDemandSpecification = "OnDemandSpecification"
        case spotSpecification = "SpotSpecification"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let onDemandSpecification = onDemandSpecification {
            try encodeContainer.encode(onDemandSpecification, forKey: .onDemandSpecification)
        }
        if let spotSpecification = spotSpecification {
            try encodeContainer.encode(spotSpecification, forKey: .spotSpecification)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let spotSpecificationDecoded = try containerValues.decodeIfPresent(SpotProvisioningSpecification.self, forKey: .spotSpecification)
        spotSpecification = spotSpecificationDecoded
        let onDemandSpecificationDecoded = try containerValues.decodeIfPresent(OnDemandProvisioningSpecification.self, forKey: .onDemandSpecification)
        onDemandSpecification = onDemandSpecificationDecoded
    }
}

extension InstanceFleetProvisioningSpecifications: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceFleetProvisioningSpecifications(onDemandSpecification: \(String(describing: onDemandSpecification)), spotSpecification: \(String(describing: spotSpecification)))"}
}

/// <p>The launch specification for Spot Instances in the fleet, which determines the defined
///          duration, provisioning timeout behavior, and allocation strategy.</p>
///          <note>
///             <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and
///             later, excluding 5.0.x versions. On-Demand and Spot Instance allocation strategies are
///             available in Amazon EMR version 5.12.1 and later.</p>
///          </note>
public struct InstanceFleetProvisioningSpecifications: Equatable {
    /// <p> The launch specification for On-Demand Instances in the instance fleet, which
    ///          determines the allocation strategy. </p>
    ///          <note>
    ///             <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and
    ///             later, excluding 5.0.x versions. On-Demand Instances allocation strategy is available in
    ///             Amazon EMR version 5.12.1 and later.</p>
    ///          </note>
    public let onDemandSpecification: OnDemandProvisioningSpecification?
    /// <p>The launch specification for Spot Instances in the fleet, which determines the defined
    ///          duration, provisioning timeout behavior, and allocation strategy.</p>
    public let spotSpecification: SpotProvisioningSpecification?

    public init (
        onDemandSpecification: OnDemandProvisioningSpecification? = nil,
        spotSpecification: SpotProvisioningSpecification? = nil
    )
    {
        self.onDemandSpecification = onDemandSpecification
        self.spotSpecification = spotSpecification
    }
}

public enum InstanceFleetState {
    case bootstrapping
    case provisioning
    case resizing
    case running
    case suspended
    case terminated
    case terminating
    case sdkUnknown(String)
}

extension InstanceFleetState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InstanceFleetState] {
        return [
            .bootstrapping,
            .provisioning,
            .resizing,
            .running,
            .suspended,
            .terminated,
            .terminating,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .bootstrapping: return "BOOTSTRAPPING"
        case .provisioning: return "PROVISIONING"
        case .resizing: return "RESIZING"
        case .running: return "RUNNING"
        case .suspended: return "SUSPENDED"
        case .terminated: return "TERMINATED"
        case .terminating: return "TERMINATING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InstanceFleetState(rawValue: rawValue) ?? InstanceFleetState.sdkUnknown(rawValue)
    }
}

extension InstanceFleetStateChangeReason: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(InstanceFleetStateChangeReasonCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InstanceFleetStateChangeReason: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceFleetStateChangeReason(code: \(String(describing: code)), message: \(String(describing: message)))"}
}

/// <p>Provides status change reason details for the instance fleet.</p>
///          <note>
///             <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and
///             later, excluding 5.0.x versions.</p>
///          </note>
public struct InstanceFleetStateChangeReason: Equatable {
    /// <p>A code corresponding to the reason the state change occurred.</p>
    public let code: InstanceFleetStateChangeReasonCode?
    /// <p>An explanatory message.</p>
    public let message: String?

    public init (
        code: InstanceFleetStateChangeReasonCode? = nil,
        message: String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

public enum InstanceFleetStateChangeReasonCode {
    case clusterTerminated
    case instanceFailure
    case internalError
    case validationError
    case sdkUnknown(String)
}

extension InstanceFleetStateChangeReasonCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InstanceFleetStateChangeReasonCode] {
        return [
            .clusterTerminated,
            .instanceFailure,
            .internalError,
            .validationError,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .clusterTerminated: return "CLUSTER_TERMINATED"
        case .instanceFailure: return "INSTANCE_FAILURE"
        case .internalError: return "INTERNAL_ERROR"
        case .validationError: return "VALIDATION_ERROR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InstanceFleetStateChangeReasonCode(rawValue: rawValue) ?? InstanceFleetStateChangeReasonCode.sdkUnknown(rawValue)
    }
}

extension InstanceFleetStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case state = "State"
        case stateChangeReason = "StateChangeReason"
        case timeline = "Timeline"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateChangeReason = stateChangeReason {
            try encodeContainer.encode(stateChangeReason, forKey: .stateChangeReason)
        }
        if let timeline = timeline {
            try encodeContainer.encode(timeline, forKey: .timeline)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(InstanceFleetState.self, forKey: .state)
        state = stateDecoded
        let stateChangeReasonDecoded = try containerValues.decodeIfPresent(InstanceFleetStateChangeReason.self, forKey: .stateChangeReason)
        stateChangeReason = stateChangeReasonDecoded
        let timelineDecoded = try containerValues.decodeIfPresent(InstanceFleetTimeline.self, forKey: .timeline)
        timeline = timelineDecoded
    }
}

extension InstanceFleetStatus: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceFleetStatus(state: \(String(describing: state)), stateChangeReason: \(String(describing: stateChangeReason)), timeline: \(String(describing: timeline)))"}
}

/// <p>The status of the instance fleet.</p>
///          <note>
///             <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and
///             later, excluding 5.0.x versions.</p>
///          </note>
public struct InstanceFleetStatus: Equatable {
    /// <p>A code representing the instance fleet status.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>PROVISIONING</code>—The instance fleet is provisioning EC2 resources and is
    ///                not yet ready to run jobs.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>BOOTSTRAPPING</code>—EC2 instances and other resources have been provisioned
    ///                and the bootstrap actions specified for the instances are underway.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RUNNING</code>—EC2 instances and other resources are running. They are
    ///                either executing jobs or waiting to execute jobs.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RESIZING</code>—A resize operation is underway. EC2 instances are either
    ///                being added or removed.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SUSPENDED</code>—A resize operation could not complete. Existing EC2
    ///                instances are running, but instances can't be added or removed.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TERMINATING</code>—The instance fleet is terminating EC2 instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TERMINATED</code>—The instance fleet is no longer active, and all EC2
    ///                instances have been terminated.</p>
    ///             </li>
    ///          </ul>
    public let state: InstanceFleetState?
    /// <p>Provides status change reason details for the instance fleet.</p>
    public let stateChangeReason: InstanceFleetStateChangeReason?
    /// <p>Provides historical timestamps for the instance fleet, including the time of creation,
    ///          the time it became ready to run jobs, and the time of termination.</p>
    public let timeline: InstanceFleetTimeline?

    public init (
        state: InstanceFleetState? = nil,
        stateChangeReason: InstanceFleetStateChangeReason? = nil,
        timeline: InstanceFleetTimeline? = nil
    )
    {
        self.state = state
        self.stateChangeReason = stateChangeReason
        self.timeline = timeline
    }
}

extension InstanceFleetTimeline: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationDateTime = "CreationDateTime"
        case endDateTime = "EndDateTime"
        case readyDateTime = "ReadyDateTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDateTime = creationDateTime {
            try encodeContainer.encode(creationDateTime.timeIntervalSince1970, forKey: .creationDateTime)
        }
        if let endDateTime = endDateTime {
            try encodeContainer.encode(endDateTime.timeIntervalSince1970, forKey: .endDateTime)
        }
        if let readyDateTime = readyDateTime {
            try encodeContainer.encode(readyDateTime.timeIntervalSince1970, forKey: .readyDateTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let readyDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .readyDateTime)
        readyDateTime = readyDateTimeDecoded
        let endDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endDateTime)
        endDateTime = endDateTimeDecoded
    }
}

extension InstanceFleetTimeline: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceFleetTimeline(creationDateTime: \(String(describing: creationDateTime)), endDateTime: \(String(describing: endDateTime)), readyDateTime: \(String(describing: readyDateTime)))"}
}

/// <p>Provides historical timestamps for the instance fleet, including the time of creation,
///          the time it became ready to run jobs, and the time of termination.</p>
///          <note>
///             <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and
///             later, excluding 5.0.x versions.</p>
///          </note>
public struct InstanceFleetTimeline: Equatable {
    /// <p>The time and date the instance fleet was created.</p>
    public let creationDateTime: Date?
    /// <p>The time and date the instance fleet terminated.</p>
    public let endDateTime: Date?
    /// <p>The time and date the instance fleet was ready to run jobs.</p>
    public let readyDateTime: Date?

    public init (
        creationDateTime: Date? = nil,
        endDateTime: Date? = nil,
        readyDateTime: Date? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.endDateTime = endDateTime
        self.readyDateTime = readyDateTime
    }
}

public enum InstanceFleetType {
    case core
    case master
    case task
    case sdkUnknown(String)
}

extension InstanceFleetType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InstanceFleetType] {
        return [
            .core,
            .master,
            .task,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .core: return "CORE"
        case .master: return "MASTER"
        case .task: return "TASK"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InstanceFleetType(rawValue: rawValue) ?? InstanceFleetType.sdkUnknown(rawValue)
    }
}

extension InstanceGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoScalingPolicy = "AutoScalingPolicy"
        case bidPrice = "BidPrice"
        case configurations = "Configurations"
        case configurationsVersion = "ConfigurationsVersion"
        case ebsBlockDevices = "EbsBlockDevices"
        case ebsOptimized = "EbsOptimized"
        case id = "Id"
        case instanceGroupType = "InstanceGroupType"
        case instanceType = "InstanceType"
        case lastSuccessfullyAppliedConfigurations = "LastSuccessfullyAppliedConfigurations"
        case lastSuccessfullyAppliedConfigurationsVersion = "LastSuccessfullyAppliedConfigurationsVersion"
        case market = "Market"
        case name = "Name"
        case requestedInstanceCount = "RequestedInstanceCount"
        case runningInstanceCount = "RunningInstanceCount"
        case shrinkPolicy = "ShrinkPolicy"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingPolicy = autoScalingPolicy {
            try encodeContainer.encode(autoScalingPolicy, forKey: .autoScalingPolicy)
        }
        if let bidPrice = bidPrice {
            try encodeContainer.encode(bidPrice, forKey: .bidPrice)
        }
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configurationlist0 in configurations {
                try configurationsContainer.encode(configurationlist0)
            }
        }
        if configurationsVersion != 0 {
            try encodeContainer.encode(configurationsVersion, forKey: .configurationsVersion)
        }
        if let ebsBlockDevices = ebsBlockDevices {
            var ebsBlockDevicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ebsBlockDevices)
            for ebsblockdevicelist0 in ebsBlockDevices {
                try ebsBlockDevicesContainer.encode(ebsblockdevicelist0)
            }
        }
        if let ebsOptimized = ebsOptimized {
            try encodeContainer.encode(ebsOptimized, forKey: .ebsOptimized)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let instanceGroupType = instanceGroupType {
            try encodeContainer.encode(instanceGroupType.rawValue, forKey: .instanceGroupType)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let lastSuccessfullyAppliedConfigurations = lastSuccessfullyAppliedConfigurations {
            var lastSuccessfullyAppliedConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lastSuccessfullyAppliedConfigurations)
            for configurationlist0 in lastSuccessfullyAppliedConfigurations {
                try lastSuccessfullyAppliedConfigurationsContainer.encode(configurationlist0)
            }
        }
        if lastSuccessfullyAppliedConfigurationsVersion != 0 {
            try encodeContainer.encode(lastSuccessfullyAppliedConfigurationsVersion, forKey: .lastSuccessfullyAppliedConfigurationsVersion)
        }
        if let market = market {
            try encodeContainer.encode(market.rawValue, forKey: .market)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let requestedInstanceCount = requestedInstanceCount {
            try encodeContainer.encode(requestedInstanceCount, forKey: .requestedInstanceCount)
        }
        if let runningInstanceCount = runningInstanceCount {
            try encodeContainer.encode(runningInstanceCount, forKey: .runningInstanceCount)
        }
        if let shrinkPolicy = shrinkPolicy {
            try encodeContainer.encode(shrinkPolicy, forKey: .shrinkPolicy)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let marketDecoded = try containerValues.decodeIfPresent(MarketType.self, forKey: .market)
        market = marketDecoded
        let instanceGroupTypeDecoded = try containerValues.decodeIfPresent(InstanceGroupType.self, forKey: .instanceGroupType)
        instanceGroupType = instanceGroupTypeDecoded
        let bidPriceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bidPrice)
        bidPrice = bidPriceDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let requestedInstanceCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .requestedInstanceCount)
        requestedInstanceCount = requestedInstanceCountDecoded
        let runningInstanceCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .runningInstanceCount)
        runningInstanceCount = runningInstanceCountDecoded
        let statusDecoded = try containerValues.decodeIfPresent(InstanceGroupStatus.self, forKey: .status)
        status = statusDecoded
        let configurationsContainer = try containerValues.decodeIfPresent([Configuration?].self, forKey: .configurations)
        var configurationsDecoded0:[Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [Configuration]()
            for structure0 in configurationsContainer {
                if let structure0 = structure0 {
                    configurationsDecoded0?.append(structure0)
                }
            }
        }
        configurations = configurationsDecoded0
        let configurationsVersionDecoded = try containerValues.decode(Int.self, forKey: .configurationsVersion)
        configurationsVersion = configurationsVersionDecoded
        let lastSuccessfullyAppliedConfigurationsContainer = try containerValues.decodeIfPresent([Configuration?].self, forKey: .lastSuccessfullyAppliedConfigurations)
        var lastSuccessfullyAppliedConfigurationsDecoded0:[Configuration]? = nil
        if let lastSuccessfullyAppliedConfigurationsContainer = lastSuccessfullyAppliedConfigurationsContainer {
            lastSuccessfullyAppliedConfigurationsDecoded0 = [Configuration]()
            for structure0 in lastSuccessfullyAppliedConfigurationsContainer {
                if let structure0 = structure0 {
                    lastSuccessfullyAppliedConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        lastSuccessfullyAppliedConfigurations = lastSuccessfullyAppliedConfigurationsDecoded0
        let lastSuccessfullyAppliedConfigurationsVersionDecoded = try containerValues.decode(Int.self, forKey: .lastSuccessfullyAppliedConfigurationsVersion)
        lastSuccessfullyAppliedConfigurationsVersion = lastSuccessfullyAppliedConfigurationsVersionDecoded
        let ebsBlockDevicesContainer = try containerValues.decodeIfPresent([EbsBlockDevice?].self, forKey: .ebsBlockDevices)
        var ebsBlockDevicesDecoded0:[EbsBlockDevice]? = nil
        if let ebsBlockDevicesContainer = ebsBlockDevicesContainer {
            ebsBlockDevicesDecoded0 = [EbsBlockDevice]()
            for structure0 in ebsBlockDevicesContainer {
                if let structure0 = structure0 {
                    ebsBlockDevicesDecoded0?.append(structure0)
                }
            }
        }
        ebsBlockDevices = ebsBlockDevicesDecoded0
        let ebsOptimizedDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .ebsOptimized)
        ebsOptimized = ebsOptimizedDecoded
        let shrinkPolicyDecoded = try containerValues.decodeIfPresent(ShrinkPolicy.self, forKey: .shrinkPolicy)
        shrinkPolicy = shrinkPolicyDecoded
        let autoScalingPolicyDecoded = try containerValues.decodeIfPresent(AutoScalingPolicyDescription.self, forKey: .autoScalingPolicy)
        autoScalingPolicy = autoScalingPolicyDecoded
    }
}

extension InstanceGroup: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceGroup(autoScalingPolicy: \(String(describing: autoScalingPolicy)), bidPrice: \(String(describing: bidPrice)), configurations: \(String(describing: configurations)), configurationsVersion: \(String(describing: configurationsVersion)), ebsBlockDevices: \(String(describing: ebsBlockDevices)), ebsOptimized: \(String(describing: ebsOptimized)), id: \(String(describing: id)), instanceGroupType: \(String(describing: instanceGroupType)), instanceType: \(String(describing: instanceType)), lastSuccessfullyAppliedConfigurations: \(String(describing: lastSuccessfullyAppliedConfigurations)), lastSuccessfullyAppliedConfigurationsVersion: \(String(describing: lastSuccessfullyAppliedConfigurationsVersion)), market: \(String(describing: market)), name: \(String(describing: name)), requestedInstanceCount: \(String(describing: requestedInstanceCount)), runningInstanceCount: \(String(describing: runningInstanceCount)), shrinkPolicy: \(String(describing: shrinkPolicy)), status: \(String(describing: status)))"}
}

/// <p>This entity represents an instance group, which is a group of instances that have common
///          purpose. For example, CORE instance group is used for HDFS.</p>
public struct InstanceGroup: Equatable {
    /// <p>An automatic scaling policy for a core instance group or task instance group in an
    ///          Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically
    ///          adds and terminates EC2 instances in response to the value of a CloudWatch metric. See
    ///          PutAutoScalingPolicy.</p>
    public let autoScalingPolicy: AutoScalingPolicyDescription?
    /// <p>If specified, indicates that the instance group uses Spot Instances. This is the maximum price you are willing to pay for Spot Instances. Specify <code>OnDemandPrice</code> to set the amount equal to the On-Demand price, or specify an amount in USD.</p>
    public let bidPrice: String?
    /// <note>
    ///             <p>Amazon EMR releases 4.x or later.</p>
    ///          </note>
    ///          <p>The list of configurations supplied for an EMR cluster instance group. You can specify a
    ///          separate configuration for each instance group (master, core, and task).</p>
    public let configurations: [Configuration]?
    /// <p>The version number of the requested configuration specification for this instance
    ///          group.</p>
    public let configurationsVersion: Int
    /// <p>The EBS block devices that are mapped to this instance group.</p>
    public let ebsBlockDevices: [EbsBlockDevice]?
    /// <p>If the instance group is EBS-optimized. An Amazon EBS-optimized instance uses an
    ///          optimized configuration stack and provides additional, dedicated capacity for Amazon EBS
    ///          I/O.</p>
    public let ebsOptimized: Bool?
    /// <p>The identifier of the instance group.</p>
    public let id: String?
    /// <p>The type of the instance group. Valid values are MASTER, CORE or TASK.</p>
    public let instanceGroupType: InstanceGroupType?
    /// <p>The EC2 instance type for all instances in the instance group.</p>
    public let instanceType: String?
    /// <p>A list of configurations that were successfully applied for an instance group last
    ///          time.</p>
    public let lastSuccessfullyAppliedConfigurations: [Configuration]?
    /// <p>The version number of a configuration specification that was successfully applied for an
    ///          instance group last time. </p>
    public let lastSuccessfullyAppliedConfigurationsVersion: Int
    /// <p>The marketplace to provision instances for this group. Valid values are ON_DEMAND or
    ///          SPOT.</p>
    public let market: MarketType?
    /// <p>The name of the instance group.</p>
    public let name: String?
    /// <p>The target number of instances for the instance group.</p>
    public let requestedInstanceCount: Int?
    /// <p>The number of instances currently running in this instance group.</p>
    public let runningInstanceCount: Int?
    /// <p>Policy for customizing shrink operations.</p>
    public let shrinkPolicy: ShrinkPolicy?
    /// <p>The current status of the instance group.</p>
    public let status: InstanceGroupStatus?

    public init (
        autoScalingPolicy: AutoScalingPolicyDescription? = nil,
        bidPrice: String? = nil,
        configurations: [Configuration]? = nil,
        configurationsVersion: Int = 0,
        ebsBlockDevices: [EbsBlockDevice]? = nil,
        ebsOptimized: Bool? = nil,
        id: String? = nil,
        instanceGroupType: InstanceGroupType? = nil,
        instanceType: String? = nil,
        lastSuccessfullyAppliedConfigurations: [Configuration]? = nil,
        lastSuccessfullyAppliedConfigurationsVersion: Int = 0,
        market: MarketType? = nil,
        name: String? = nil,
        requestedInstanceCount: Int? = nil,
        runningInstanceCount: Int? = nil,
        shrinkPolicy: ShrinkPolicy? = nil,
        status: InstanceGroupStatus? = nil
    )
    {
        self.autoScalingPolicy = autoScalingPolicy
        self.bidPrice = bidPrice
        self.configurations = configurations
        self.configurationsVersion = configurationsVersion
        self.ebsBlockDevices = ebsBlockDevices
        self.ebsOptimized = ebsOptimized
        self.id = id
        self.instanceGroupType = instanceGroupType
        self.instanceType = instanceType
        self.lastSuccessfullyAppliedConfigurations = lastSuccessfullyAppliedConfigurations
        self.lastSuccessfullyAppliedConfigurationsVersion = lastSuccessfullyAppliedConfigurationsVersion
        self.market = market
        self.name = name
        self.requestedInstanceCount = requestedInstanceCount
        self.runningInstanceCount = runningInstanceCount
        self.shrinkPolicy = shrinkPolicy
        self.status = status
    }
}

extension InstanceGroupConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoScalingPolicy = "AutoScalingPolicy"
        case bidPrice = "BidPrice"
        case configurations = "Configurations"
        case ebsConfiguration = "EbsConfiguration"
        case instanceCount = "InstanceCount"
        case instanceRole = "InstanceRole"
        case instanceType = "InstanceType"
        case market = "Market"
        case name = "Name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingPolicy = autoScalingPolicy {
            try encodeContainer.encode(autoScalingPolicy, forKey: .autoScalingPolicy)
        }
        if let bidPrice = bidPrice {
            try encodeContainer.encode(bidPrice, forKey: .bidPrice)
        }
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configurationlist0 in configurations {
                try configurationsContainer.encode(configurationlist0)
            }
        }
        if let ebsConfiguration = ebsConfiguration {
            try encodeContainer.encode(ebsConfiguration, forKey: .ebsConfiguration)
        }
        if let instanceCount = instanceCount {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let instanceRole = instanceRole {
            try encodeContainer.encode(instanceRole.rawValue, forKey: .instanceRole)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let market = market {
            try encodeContainer.encode(market.rawValue, forKey: .market)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let marketDecoded = try containerValues.decodeIfPresent(MarketType.self, forKey: .market)
        market = marketDecoded
        let instanceRoleDecoded = try containerValues.decodeIfPresent(InstanceRoleType.self, forKey: .instanceRole)
        instanceRole = instanceRoleDecoded
        let bidPriceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bidPrice)
        bidPrice = bidPriceDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let configurationsContainer = try containerValues.decodeIfPresent([Configuration?].self, forKey: .configurations)
        var configurationsDecoded0:[Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [Configuration]()
            for structure0 in configurationsContainer {
                if let structure0 = structure0 {
                    configurationsDecoded0?.append(structure0)
                }
            }
        }
        configurations = configurationsDecoded0
        let ebsConfigurationDecoded = try containerValues.decodeIfPresent(EbsConfiguration.self, forKey: .ebsConfiguration)
        ebsConfiguration = ebsConfigurationDecoded
        let autoScalingPolicyDecoded = try containerValues.decodeIfPresent(AutoScalingPolicy.self, forKey: .autoScalingPolicy)
        autoScalingPolicy = autoScalingPolicyDecoded
    }
}

extension InstanceGroupConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceGroupConfig(autoScalingPolicy: \(String(describing: autoScalingPolicy)), bidPrice: \(String(describing: bidPrice)), configurations: \(String(describing: configurations)), ebsConfiguration: \(String(describing: ebsConfiguration)), instanceCount: \(String(describing: instanceCount)), instanceRole: \(String(describing: instanceRole)), instanceType: \(String(describing: instanceType)), market: \(String(describing: market)), name: \(String(describing: name)))"}
}

/// <p>Configuration defining a new instance group.</p>
public struct InstanceGroupConfig: Equatable {
    /// <p>An automatic scaling policy for a core instance group or task instance group in an
    ///          Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically
    ///          adds and terminates EC2 instances in response to the value of a CloudWatch metric. See
    ///             <a>PutAutoScalingPolicy</a>.</p>
    public let autoScalingPolicy: AutoScalingPolicy?
    /// <p>If specified, indicates that the instance group uses Spot Instances. This is the maximum price you are willing to pay for Spot Instances. Specify <code>OnDemandPrice</code> to set the amount equal to the On-Demand price, or specify an amount in USD.</p>
    public let bidPrice: String?
    /// <note>
    ///             <p>Amazon EMR releases 4.x or later.</p>
    ///          </note>
    ///          <p>The list of configurations supplied for an EMR cluster instance group. You can specify a
    ///          separate configuration for each instance group (master, core, and task).</p>
    public let configurations: [Configuration]?
    /// <p>EBS configurations that will be attached to each EC2 instance in the instance
    ///          group.</p>
    public let ebsConfiguration: EbsConfiguration?
    /// <p>Target number of instances for the instance group.</p>
    public let instanceCount: Int?
    /// <p>The role of the instance group in the cluster.</p>
    public let instanceRole: InstanceRoleType?
    /// <p>The EC2 instance type for all instances in the instance group.</p>
    public let instanceType: String?
    /// <p>Market type of the EC2 instances used to create a cluster node.</p>
    public let market: MarketType?
    /// <p>Friendly name given to the instance group.</p>
    public let name: String?

    public init (
        autoScalingPolicy: AutoScalingPolicy? = nil,
        bidPrice: String? = nil,
        configurations: [Configuration]? = nil,
        ebsConfiguration: EbsConfiguration? = nil,
        instanceCount: Int? = nil,
        instanceRole: InstanceRoleType? = nil,
        instanceType: String? = nil,
        market: MarketType? = nil,
        name: String? = nil
    )
    {
        self.autoScalingPolicy = autoScalingPolicy
        self.bidPrice = bidPrice
        self.configurations = configurations
        self.ebsConfiguration = ebsConfiguration
        self.instanceCount = instanceCount
        self.instanceRole = instanceRole
        self.instanceType = instanceType
        self.market = market
        self.name = name
    }
}

extension InstanceGroupDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bidPrice = "BidPrice"
        case creationDateTime = "CreationDateTime"
        case endDateTime = "EndDateTime"
        case instanceGroupId = "InstanceGroupId"
        case instanceRequestCount = "InstanceRequestCount"
        case instanceRole = "InstanceRole"
        case instanceRunningCount = "InstanceRunningCount"
        case instanceType = "InstanceType"
        case lastStateChangeReason = "LastStateChangeReason"
        case market = "Market"
        case name = "Name"
        case readyDateTime = "ReadyDateTime"
        case startDateTime = "StartDateTime"
        case state = "State"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bidPrice = bidPrice {
            try encodeContainer.encode(bidPrice, forKey: .bidPrice)
        }
        if let creationDateTime = creationDateTime {
            try encodeContainer.encode(creationDateTime.timeIntervalSince1970, forKey: .creationDateTime)
        }
        if let endDateTime = endDateTime {
            try encodeContainer.encode(endDateTime.timeIntervalSince1970, forKey: .endDateTime)
        }
        if let instanceGroupId = instanceGroupId {
            try encodeContainer.encode(instanceGroupId, forKey: .instanceGroupId)
        }
        if let instanceRequestCount = instanceRequestCount {
            try encodeContainer.encode(instanceRequestCount, forKey: .instanceRequestCount)
        }
        if let instanceRole = instanceRole {
            try encodeContainer.encode(instanceRole.rawValue, forKey: .instanceRole)
        }
        if let instanceRunningCount = instanceRunningCount {
            try encodeContainer.encode(instanceRunningCount, forKey: .instanceRunningCount)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let lastStateChangeReason = lastStateChangeReason {
            try encodeContainer.encode(lastStateChangeReason, forKey: .lastStateChangeReason)
        }
        if let market = market {
            try encodeContainer.encode(market.rawValue, forKey: .market)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let readyDateTime = readyDateTime {
            try encodeContainer.encode(readyDateTime.timeIntervalSince1970, forKey: .readyDateTime)
        }
        if let startDateTime = startDateTime {
            try encodeContainer.encode(startDateTime.timeIntervalSince1970, forKey: .startDateTime)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceGroupId)
        instanceGroupId = instanceGroupIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let marketDecoded = try containerValues.decodeIfPresent(MarketType.self, forKey: .market)
        market = marketDecoded
        let instanceRoleDecoded = try containerValues.decodeIfPresent(InstanceRoleType.self, forKey: .instanceRole)
        instanceRole = instanceRoleDecoded
        let bidPriceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bidPrice)
        bidPrice = bidPriceDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let instanceRequestCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .instanceRequestCount)
        instanceRequestCount = instanceRequestCountDecoded
        let instanceRunningCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .instanceRunningCount)
        instanceRunningCount = instanceRunningCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(InstanceGroupState.self, forKey: .state)
        state = stateDecoded
        let lastStateChangeReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastStateChangeReason)
        lastStateChangeReason = lastStateChangeReasonDecoded
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let startDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startDateTime)
        startDateTime = startDateTimeDecoded
        let readyDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .readyDateTime)
        readyDateTime = readyDateTimeDecoded
        let endDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endDateTime)
        endDateTime = endDateTimeDecoded
    }
}

extension InstanceGroupDetail: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceGroupDetail(bidPrice: \(String(describing: bidPrice)), creationDateTime: \(String(describing: creationDateTime)), endDateTime: \(String(describing: endDateTime)), instanceGroupId: \(String(describing: instanceGroupId)), instanceRequestCount: \(String(describing: instanceRequestCount)), instanceRole: \(String(describing: instanceRole)), instanceRunningCount: \(String(describing: instanceRunningCount)), instanceType: \(String(describing: instanceType)), lastStateChangeReason: \(String(describing: lastStateChangeReason)), market: \(String(describing: market)), name: \(String(describing: name)), readyDateTime: \(String(describing: readyDateTime)), startDateTime: \(String(describing: startDateTime)), state: \(String(describing: state)))"}
}

/// <p>Detailed information about an instance group.</p>
public struct InstanceGroupDetail: Equatable {
    /// <p>If specified, indicates that the instance group uses Spot Instances. This is the maximum price you are willing to pay for Spot Instances. Specify <code>OnDemandPrice</code> to set the amount equal to the On-Demand price, or specify an amount in USD.</p>
    public let bidPrice: String?
    /// <p>The date/time the instance group was created.</p>
    public let creationDateTime: Date?
    /// <p>The date/time the instance group was terminated.</p>
    public let endDateTime: Date?
    /// <p>Unique identifier for the instance group.</p>
    public let instanceGroupId: String?
    /// <p>Target number of instances to run in the instance group.</p>
    public let instanceRequestCount: Int?
    /// <p>Instance group role in the cluster</p>
    public let instanceRole: InstanceRoleType?
    /// <p>Actual count of running instances.</p>
    public let instanceRunningCount: Int?
    /// <p>EC2 instance type.</p>
    public let instanceType: String?
    /// <p>Details regarding the state of the instance group.</p>
    public let lastStateChangeReason: String?
    /// <p>Market type of the EC2 instances used to create a cluster node.</p>
    public let market: MarketType?
    /// <p>Friendly name for the instance group.</p>
    public let name: String?
    /// <p>The date/time the instance group was available to the cluster.</p>
    public let readyDateTime: Date?
    /// <p>The date/time the instance group was started.</p>
    public let startDateTime: Date?
    /// <p>State of instance group. The following values are deprecated: STARTING, TERMINATED, and
    ///          FAILED.</p>
    public let state: InstanceGroupState?

    public init (
        bidPrice: String? = nil,
        creationDateTime: Date? = nil,
        endDateTime: Date? = nil,
        instanceGroupId: String? = nil,
        instanceRequestCount: Int? = nil,
        instanceRole: InstanceRoleType? = nil,
        instanceRunningCount: Int? = nil,
        instanceType: String? = nil,
        lastStateChangeReason: String? = nil,
        market: MarketType? = nil,
        name: String? = nil,
        readyDateTime: Date? = nil,
        startDateTime: Date? = nil,
        state: InstanceGroupState? = nil
    )
    {
        self.bidPrice = bidPrice
        self.creationDateTime = creationDateTime
        self.endDateTime = endDateTime
        self.instanceGroupId = instanceGroupId
        self.instanceRequestCount = instanceRequestCount
        self.instanceRole = instanceRole
        self.instanceRunningCount = instanceRunningCount
        self.instanceType = instanceType
        self.lastStateChangeReason = lastStateChangeReason
        self.market = market
        self.name = name
        self.readyDateTime = readyDateTime
        self.startDateTime = startDateTime
        self.state = state
    }
}

extension InstanceGroupModifyConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case configurations = "Configurations"
        case eC2InstanceIdsToTerminate = "EC2InstanceIdsToTerminate"
        case instanceCount = "InstanceCount"
        case instanceGroupId = "InstanceGroupId"
        case shrinkPolicy = "ShrinkPolicy"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configurationlist0 in configurations {
                try configurationsContainer.encode(configurationlist0)
            }
        }
        if let eC2InstanceIdsToTerminate = eC2InstanceIdsToTerminate {
            var eC2InstanceIdsToTerminateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eC2InstanceIdsToTerminate)
            for ec2instanceidstoterminatelist0 in eC2InstanceIdsToTerminate {
                try eC2InstanceIdsToTerminateContainer.encode(ec2instanceidstoterminatelist0)
            }
        }
        if let instanceCount = instanceCount {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let instanceGroupId = instanceGroupId {
            try encodeContainer.encode(instanceGroupId, forKey: .instanceGroupId)
        }
        if let shrinkPolicy = shrinkPolicy {
            try encodeContainer.encode(shrinkPolicy, forKey: .shrinkPolicy)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceGroupId)
        instanceGroupId = instanceGroupIdDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let eC2InstanceIdsToTerminateContainer = try containerValues.decodeIfPresent([String?].self, forKey: .eC2InstanceIdsToTerminate)
        var eC2InstanceIdsToTerminateDecoded0:[String]? = nil
        if let eC2InstanceIdsToTerminateContainer = eC2InstanceIdsToTerminateContainer {
            eC2InstanceIdsToTerminateDecoded0 = [String]()
            for string0 in eC2InstanceIdsToTerminateContainer {
                if let string0 = string0 {
                    eC2InstanceIdsToTerminateDecoded0?.append(string0)
                }
            }
        }
        eC2InstanceIdsToTerminate = eC2InstanceIdsToTerminateDecoded0
        let shrinkPolicyDecoded = try containerValues.decodeIfPresent(ShrinkPolicy.self, forKey: .shrinkPolicy)
        shrinkPolicy = shrinkPolicyDecoded
        let configurationsContainer = try containerValues.decodeIfPresent([Configuration?].self, forKey: .configurations)
        var configurationsDecoded0:[Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [Configuration]()
            for structure0 in configurationsContainer {
                if let structure0 = structure0 {
                    configurationsDecoded0?.append(structure0)
                }
            }
        }
        configurations = configurationsDecoded0
    }
}

extension InstanceGroupModifyConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceGroupModifyConfig(configurations: \(String(describing: configurations)), eC2InstanceIdsToTerminate: \(String(describing: eC2InstanceIdsToTerminate)), instanceCount: \(String(describing: instanceCount)), instanceGroupId: \(String(describing: instanceGroupId)), shrinkPolicy: \(String(describing: shrinkPolicy)))"}
}

/// <p>Modify the size or configurations of an instance group.</p>
public struct InstanceGroupModifyConfig: Equatable {
    /// <p>A list of new or modified configurations to apply for an instance group.</p>
    public let configurations: [Configuration]?
    /// <p>The EC2 InstanceIds to terminate. After you terminate the instances, the instance group
    ///          will not return to its original requested size.</p>
    public let eC2InstanceIdsToTerminate: [String]?
    /// <p>Target size for the instance group.</p>
    public let instanceCount: Int?
    /// <p>Unique ID of the instance group to modify.</p>
    public let instanceGroupId: String?
    /// <p>Policy for customizing shrink operations.</p>
    public let shrinkPolicy: ShrinkPolicy?

    public init (
        configurations: [Configuration]? = nil,
        eC2InstanceIdsToTerminate: [String]? = nil,
        instanceCount: Int? = nil,
        instanceGroupId: String? = nil,
        shrinkPolicy: ShrinkPolicy? = nil
    )
    {
        self.configurations = configurations
        self.eC2InstanceIdsToTerminate = eC2InstanceIdsToTerminate
        self.instanceCount = instanceCount
        self.instanceGroupId = instanceGroupId
        self.shrinkPolicy = shrinkPolicy
    }
}

public enum InstanceGroupState {
    case arrested
    case bootstrapping
    case ended
    case provisioning
    case reconfiguring
    case resizing
    case running
    case shuttingDown
    case suspended
    case terminated
    case terminating
    case sdkUnknown(String)
}

extension InstanceGroupState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InstanceGroupState] {
        return [
            .arrested,
            .bootstrapping,
            .ended,
            .provisioning,
            .reconfiguring,
            .resizing,
            .running,
            .shuttingDown,
            .suspended,
            .terminated,
            .terminating,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .arrested: return "ARRESTED"
        case .bootstrapping: return "BOOTSTRAPPING"
        case .ended: return "ENDED"
        case .provisioning: return "PROVISIONING"
        case .reconfiguring: return "RECONFIGURING"
        case .resizing: return "RESIZING"
        case .running: return "RUNNING"
        case .shuttingDown: return "SHUTTING_DOWN"
        case .suspended: return "SUSPENDED"
        case .terminated: return "TERMINATED"
        case .terminating: return "TERMINATING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InstanceGroupState(rawValue: rawValue) ?? InstanceGroupState.sdkUnknown(rawValue)
    }
}

extension InstanceGroupStateChangeReason: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(InstanceGroupStateChangeReasonCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InstanceGroupStateChangeReason: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceGroupStateChangeReason(code: \(String(describing: code)), message: \(String(describing: message)))"}
}

/// <p>The status change reason details for the instance group.</p>
public struct InstanceGroupStateChangeReason: Equatable {
    /// <p>The programmable code for the state change reason.</p>
    public let code: InstanceGroupStateChangeReasonCode?
    /// <p>The status change reason description.</p>
    public let message: String?

    public init (
        code: InstanceGroupStateChangeReasonCode? = nil,
        message: String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

public enum InstanceGroupStateChangeReasonCode {
    case clusterTerminated
    case instanceFailure
    case internalError
    case validationError
    case sdkUnknown(String)
}

extension InstanceGroupStateChangeReasonCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InstanceGroupStateChangeReasonCode] {
        return [
            .clusterTerminated,
            .instanceFailure,
            .internalError,
            .validationError,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .clusterTerminated: return "CLUSTER_TERMINATED"
        case .instanceFailure: return "INSTANCE_FAILURE"
        case .internalError: return "INTERNAL_ERROR"
        case .validationError: return "VALIDATION_ERROR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InstanceGroupStateChangeReasonCode(rawValue: rawValue) ?? InstanceGroupStateChangeReasonCode.sdkUnknown(rawValue)
    }
}

extension InstanceGroupStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case state = "State"
        case stateChangeReason = "StateChangeReason"
        case timeline = "Timeline"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateChangeReason = stateChangeReason {
            try encodeContainer.encode(stateChangeReason, forKey: .stateChangeReason)
        }
        if let timeline = timeline {
            try encodeContainer.encode(timeline, forKey: .timeline)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(InstanceGroupState.self, forKey: .state)
        state = stateDecoded
        let stateChangeReasonDecoded = try containerValues.decodeIfPresent(InstanceGroupStateChangeReason.self, forKey: .stateChangeReason)
        stateChangeReason = stateChangeReasonDecoded
        let timelineDecoded = try containerValues.decodeIfPresent(InstanceGroupTimeline.self, forKey: .timeline)
        timeline = timelineDecoded
    }
}

extension InstanceGroupStatus: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceGroupStatus(state: \(String(describing: state)), stateChangeReason: \(String(describing: stateChangeReason)), timeline: \(String(describing: timeline)))"}
}

/// <p>The details of the instance group status.</p>
public struct InstanceGroupStatus: Equatable {
    /// <p>The current state of the instance group.</p>
    public let state: InstanceGroupState?
    /// <p>The status change reason details for the instance group.</p>
    public let stateChangeReason: InstanceGroupStateChangeReason?
    /// <p>The timeline of the instance group status over time.</p>
    public let timeline: InstanceGroupTimeline?

    public init (
        state: InstanceGroupState? = nil,
        stateChangeReason: InstanceGroupStateChangeReason? = nil,
        timeline: InstanceGroupTimeline? = nil
    )
    {
        self.state = state
        self.stateChangeReason = stateChangeReason
        self.timeline = timeline
    }
}

extension InstanceGroupTimeline: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationDateTime = "CreationDateTime"
        case endDateTime = "EndDateTime"
        case readyDateTime = "ReadyDateTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDateTime = creationDateTime {
            try encodeContainer.encode(creationDateTime.timeIntervalSince1970, forKey: .creationDateTime)
        }
        if let endDateTime = endDateTime {
            try encodeContainer.encode(endDateTime.timeIntervalSince1970, forKey: .endDateTime)
        }
        if let readyDateTime = readyDateTime {
            try encodeContainer.encode(readyDateTime.timeIntervalSince1970, forKey: .readyDateTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let readyDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .readyDateTime)
        readyDateTime = readyDateTimeDecoded
        let endDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endDateTime)
        endDateTime = endDateTimeDecoded
    }
}

extension InstanceGroupTimeline: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceGroupTimeline(creationDateTime: \(String(describing: creationDateTime)), endDateTime: \(String(describing: endDateTime)), readyDateTime: \(String(describing: readyDateTime)))"}
}

/// <p>The timeline of the instance group lifecycle.</p>
public struct InstanceGroupTimeline: Equatable {
    /// <p>The creation date and time of the instance group.</p>
    public let creationDateTime: Date?
    /// <p>The date and time when the instance group terminated.</p>
    public let endDateTime: Date?
    /// <p>The date and time when the instance group became ready to perform tasks.</p>
    public let readyDateTime: Date?

    public init (
        creationDateTime: Date? = nil,
        endDateTime: Date? = nil,
        readyDateTime: Date? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.endDateTime = endDateTime
        self.readyDateTime = readyDateTime
    }
}

public enum InstanceGroupType {
    case core
    case master
    case task
    case sdkUnknown(String)
}

extension InstanceGroupType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InstanceGroupType] {
        return [
            .core,
            .master,
            .task,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .core: return "CORE"
        case .master: return "MASTER"
        case .task: return "TASK"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InstanceGroupType(rawValue: rawValue) ?? InstanceGroupType.sdkUnknown(rawValue)
    }
}

extension InstanceResizePolicy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instanceTerminationTimeout = "InstanceTerminationTimeout"
        case instancesToProtect = "InstancesToProtect"
        case instancesToTerminate = "InstancesToTerminate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceTerminationTimeout = instanceTerminationTimeout {
            try encodeContainer.encode(instanceTerminationTimeout, forKey: .instanceTerminationTimeout)
        }
        if let instancesToProtect = instancesToProtect {
            var instancesToProtectContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instancesToProtect)
            for ec2instanceidslist0 in instancesToProtect {
                try instancesToProtectContainer.encode(ec2instanceidslist0)
            }
        }
        if let instancesToTerminate = instancesToTerminate {
            var instancesToTerminateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instancesToTerminate)
            for ec2instanceidslist0 in instancesToTerminate {
                try instancesToTerminateContainer.encode(ec2instanceidslist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instancesToTerminateContainer = try containerValues.decodeIfPresent([String?].self, forKey: .instancesToTerminate)
        var instancesToTerminateDecoded0:[String]? = nil
        if let instancesToTerminateContainer = instancesToTerminateContainer {
            instancesToTerminateDecoded0 = [String]()
            for string0 in instancesToTerminateContainer {
                if let string0 = string0 {
                    instancesToTerminateDecoded0?.append(string0)
                }
            }
        }
        instancesToTerminate = instancesToTerminateDecoded0
        let instancesToProtectContainer = try containerValues.decodeIfPresent([String?].self, forKey: .instancesToProtect)
        var instancesToProtectDecoded0:[String]? = nil
        if let instancesToProtectContainer = instancesToProtectContainer {
            instancesToProtectDecoded0 = [String]()
            for string0 in instancesToProtectContainer {
                if let string0 = string0 {
                    instancesToProtectDecoded0?.append(string0)
                }
            }
        }
        instancesToProtect = instancesToProtectDecoded0
        let instanceTerminationTimeoutDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .instanceTerminationTimeout)
        instanceTerminationTimeout = instanceTerminationTimeoutDecoded
    }
}

extension InstanceResizePolicy: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceResizePolicy(instanceTerminationTimeout: \(String(describing: instanceTerminationTimeout)), instancesToProtect: \(String(describing: instancesToProtect)), instancesToTerminate: \(String(describing: instancesToTerminate)))"}
}

/// <p>Custom policy for requesting termination protection or termination of specific instances
///          when shrinking an instance group.</p>
public struct InstanceResizePolicy: Equatable {
    /// <p>Decommissioning timeout override for the specific list of instances to be
    ///          terminated.</p>
    public let instanceTerminationTimeout: Int?
    /// <p>Specific list of instances to be protected when shrinking an instance group.</p>
    public let instancesToProtect: [String]?
    /// <p>Specific list of instances to be terminated when shrinking an instance group.</p>
    public let instancesToTerminate: [String]?

    public init (
        instanceTerminationTimeout: Int? = nil,
        instancesToProtect: [String]? = nil,
        instancesToTerminate: [String]? = nil
    )
    {
        self.instanceTerminationTimeout = instanceTerminationTimeout
        self.instancesToProtect = instancesToProtect
        self.instancesToTerminate = instancesToTerminate
    }
}

public enum InstanceRoleType {
    case core
    case master
    case task
    case sdkUnknown(String)
}

extension InstanceRoleType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InstanceRoleType] {
        return [
            .core,
            .master,
            .task,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .core: return "CORE"
        case .master: return "MASTER"
        case .task: return "TASK"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InstanceRoleType(rawValue: rawValue) ?? InstanceRoleType.sdkUnknown(rawValue)
    }
}

public enum InstanceState {
    case awaitingFulfillment
    case bootstrapping
    case provisioning
    case running
    case terminated
    case sdkUnknown(String)
}

extension InstanceState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InstanceState] {
        return [
            .awaitingFulfillment,
            .bootstrapping,
            .provisioning,
            .running,
            .terminated,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .awaitingFulfillment: return "AWAITING_FULFILLMENT"
        case .bootstrapping: return "BOOTSTRAPPING"
        case .provisioning: return "PROVISIONING"
        case .running: return "RUNNING"
        case .terminated: return "TERMINATED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InstanceState(rawValue: rawValue) ?? InstanceState.sdkUnknown(rawValue)
    }
}

extension InstanceStateChangeReason: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(InstanceStateChangeReasonCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InstanceStateChangeReason: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceStateChangeReason(code: \(String(describing: code)), message: \(String(describing: message)))"}
}

/// <p>The details of the status change reason for the instance.</p>
public struct InstanceStateChangeReason: Equatable {
    /// <p>The programmable code for the state change reason.</p>
    public let code: InstanceStateChangeReasonCode?
    /// <p>The status change reason description.</p>
    public let message: String?

    public init (
        code: InstanceStateChangeReasonCode? = nil,
        message: String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

public enum InstanceStateChangeReasonCode {
    case bootstrapFailure
    case clusterTerminated
    case instanceFailure
    case internalError
    case validationError
    case sdkUnknown(String)
}

extension InstanceStateChangeReasonCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InstanceStateChangeReasonCode] {
        return [
            .bootstrapFailure,
            .clusterTerminated,
            .instanceFailure,
            .internalError,
            .validationError,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .bootstrapFailure: return "BOOTSTRAP_FAILURE"
        case .clusterTerminated: return "CLUSTER_TERMINATED"
        case .instanceFailure: return "INSTANCE_FAILURE"
        case .internalError: return "INTERNAL_ERROR"
        case .validationError: return "VALIDATION_ERROR"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InstanceStateChangeReasonCode(rawValue: rawValue) ?? InstanceStateChangeReasonCode.sdkUnknown(rawValue)
    }
}

extension InstanceStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case state = "State"
        case stateChangeReason = "StateChangeReason"
        case timeline = "Timeline"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateChangeReason = stateChangeReason {
            try encodeContainer.encode(stateChangeReason, forKey: .stateChangeReason)
        }
        if let timeline = timeline {
            try encodeContainer.encode(timeline, forKey: .timeline)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(InstanceState.self, forKey: .state)
        state = stateDecoded
        let stateChangeReasonDecoded = try containerValues.decodeIfPresent(InstanceStateChangeReason.self, forKey: .stateChangeReason)
        stateChangeReason = stateChangeReasonDecoded
        let timelineDecoded = try containerValues.decodeIfPresent(InstanceTimeline.self, forKey: .timeline)
        timeline = timelineDecoded
    }
}

extension InstanceStatus: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceStatus(state: \(String(describing: state)), stateChangeReason: \(String(describing: stateChangeReason)), timeline: \(String(describing: timeline)))"}
}

/// <p>The instance status details.</p>
public struct InstanceStatus: Equatable {
    /// <p>The current state of the instance.</p>
    public let state: InstanceState?
    /// <p>The details of the status change reason for the instance.</p>
    public let stateChangeReason: InstanceStateChangeReason?
    /// <p>The timeline of the instance status over time.</p>
    public let timeline: InstanceTimeline?

    public init (
        state: InstanceState? = nil,
        stateChangeReason: InstanceStateChangeReason? = nil,
        timeline: InstanceTimeline? = nil
    )
    {
        self.state = state
        self.stateChangeReason = stateChangeReason
        self.timeline = timeline
    }
}

extension InstanceTimeline: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationDateTime = "CreationDateTime"
        case endDateTime = "EndDateTime"
        case readyDateTime = "ReadyDateTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDateTime = creationDateTime {
            try encodeContainer.encode(creationDateTime.timeIntervalSince1970, forKey: .creationDateTime)
        }
        if let endDateTime = endDateTime {
            try encodeContainer.encode(endDateTime.timeIntervalSince1970, forKey: .endDateTime)
        }
        if let readyDateTime = readyDateTime {
            try encodeContainer.encode(readyDateTime.timeIntervalSince1970, forKey: .readyDateTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let readyDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .readyDateTime)
        readyDateTime = readyDateTimeDecoded
        let endDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endDateTime)
        endDateTime = endDateTimeDecoded
    }
}

extension InstanceTimeline: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceTimeline(creationDateTime: \(String(describing: creationDateTime)), endDateTime: \(String(describing: endDateTime)), readyDateTime: \(String(describing: readyDateTime)))"}
}

/// <p>The timeline of the instance lifecycle.</p>
public struct InstanceTimeline: Equatable {
    /// <p>The creation date and time of the instance.</p>
    public let creationDateTime: Date?
    /// <p>The date and time when the instance was terminated.</p>
    public let endDateTime: Date?
    /// <p>The date and time when the instance was ready to perform tasks.</p>
    public let readyDateTime: Date?

    public init (
        creationDateTime: Date? = nil,
        endDateTime: Date? = nil,
        readyDateTime: Date? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.endDateTime = endDateTime
        self.readyDateTime = readyDateTime
    }
}

extension InstanceTypeConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bidPrice = "BidPrice"
        case bidPriceAsPercentageOfOnDemandPrice = "BidPriceAsPercentageOfOnDemandPrice"
        case configurations = "Configurations"
        case ebsConfiguration = "EbsConfiguration"
        case instanceType = "InstanceType"
        case weightedCapacity = "WeightedCapacity"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bidPrice = bidPrice {
            try encodeContainer.encode(bidPrice, forKey: .bidPrice)
        }
        if let bidPriceAsPercentageOfOnDemandPrice = bidPriceAsPercentageOfOnDemandPrice {
            try encodeContainer.encode(bidPriceAsPercentageOfOnDemandPrice, forKey: .bidPriceAsPercentageOfOnDemandPrice)
        }
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configurationlist0 in configurations {
                try configurationsContainer.encode(configurationlist0)
            }
        }
        if let ebsConfiguration = ebsConfiguration {
            try encodeContainer.encode(ebsConfiguration, forKey: .ebsConfiguration)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let weightedCapacity = weightedCapacity {
            try encodeContainer.encode(weightedCapacity, forKey: .weightedCapacity)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let weightedCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .weightedCapacity)
        weightedCapacity = weightedCapacityDecoded
        let bidPriceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bidPrice)
        bidPrice = bidPriceDecoded
        let bidPriceAsPercentageOfOnDemandPriceDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .bidPriceAsPercentageOfOnDemandPrice)
        bidPriceAsPercentageOfOnDemandPrice = bidPriceAsPercentageOfOnDemandPriceDecoded
        let ebsConfigurationDecoded = try containerValues.decodeIfPresent(EbsConfiguration.self, forKey: .ebsConfiguration)
        ebsConfiguration = ebsConfigurationDecoded
        let configurationsContainer = try containerValues.decodeIfPresent([Configuration?].self, forKey: .configurations)
        var configurationsDecoded0:[Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [Configuration]()
            for structure0 in configurationsContainer {
                if let structure0 = structure0 {
                    configurationsDecoded0?.append(structure0)
                }
            }
        }
        configurations = configurationsDecoded0
    }
}

extension InstanceTypeConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceTypeConfig(bidPrice: \(String(describing: bidPrice)), bidPriceAsPercentageOfOnDemandPrice: \(String(describing: bidPriceAsPercentageOfOnDemandPrice)), configurations: \(String(describing: configurations)), ebsConfiguration: \(String(describing: ebsConfiguration)), instanceType: \(String(describing: instanceType)), weightedCapacity: \(String(describing: weightedCapacity)))"}
}

/// <p>An instance type configuration for each instance type in an instance fleet, which
///          determines the EC2 instances Amazon EMR attempts to provision to fulfill On-Demand and Spot
///          target capacities. There can be a maximum of five instance type configurations in a
///          fleet.</p>
///          <note>
///             <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and
///             later, excluding 5.0.x versions.</p>
///          </note>
public struct InstanceTypeConfig: Equatable {
    /// <p>The bid price for each EC2 Spot Instance type as defined by <code>InstanceType</code>.
    ///          Expressed in USD. If neither <code>BidPrice</code> nor
    ///             <code>BidPriceAsPercentageOfOnDemandPrice</code> is provided,
    ///             <code>BidPriceAsPercentageOfOnDemandPrice</code> defaults to 100%. </p>
    public let bidPrice: String?
    /// <p>The bid price, as a percentage of On-Demand price, for each EC2 Spot Instance as defined
    ///          by <code>InstanceType</code>. Expressed as a number (for example, 20 specifies 20%). If
    ///          neither <code>BidPrice</code> nor <code>BidPriceAsPercentageOfOnDemandPrice</code> is
    ///          provided, <code>BidPriceAsPercentageOfOnDemandPrice</code> defaults to 100%.</p>
    public let bidPriceAsPercentageOfOnDemandPrice: Double?
    /// <p>A configuration classification that applies when provisioning cluster instances, which
    ///          can include configurations for applications and software that run on the cluster.</p>
    public let configurations: [Configuration]?
    /// <p>The configuration of Amazon Elastic Block Storage (Amazon EBS) attached to each instance
    ///          as defined by <code>InstanceType</code>. </p>
    public let ebsConfiguration: EbsConfiguration?
    /// <p>An EC2 instance type, such as <code>m3.xlarge</code>. </p>
    public let instanceType: String?
    /// <p>The number of units that a provisioned instance of this type provides toward fulfilling
    ///          the target capacities defined in <a>InstanceFleetConfig</a>. This value is 1 for
    ///          a master instance fleet, and must be 1 or greater for core and task instance fleets.
    ///          Defaults to 1 if not specified. </p>
    public let weightedCapacity: Int?

    public init (
        bidPrice: String? = nil,
        bidPriceAsPercentageOfOnDemandPrice: Double? = nil,
        configurations: [Configuration]? = nil,
        ebsConfiguration: EbsConfiguration? = nil,
        instanceType: String? = nil,
        weightedCapacity: Int? = nil
    )
    {
        self.bidPrice = bidPrice
        self.bidPriceAsPercentageOfOnDemandPrice = bidPriceAsPercentageOfOnDemandPrice
        self.configurations = configurations
        self.ebsConfiguration = ebsConfiguration
        self.instanceType = instanceType
        self.weightedCapacity = weightedCapacity
    }
}

extension InstanceTypeSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bidPrice = "BidPrice"
        case bidPriceAsPercentageOfOnDemandPrice = "BidPriceAsPercentageOfOnDemandPrice"
        case configurations = "Configurations"
        case ebsBlockDevices = "EbsBlockDevices"
        case ebsOptimized = "EbsOptimized"
        case instanceType = "InstanceType"
        case weightedCapacity = "WeightedCapacity"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bidPrice = bidPrice {
            try encodeContainer.encode(bidPrice, forKey: .bidPrice)
        }
        if let bidPriceAsPercentageOfOnDemandPrice = bidPriceAsPercentageOfOnDemandPrice {
            try encodeContainer.encode(bidPriceAsPercentageOfOnDemandPrice, forKey: .bidPriceAsPercentageOfOnDemandPrice)
        }
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configurationlist0 in configurations {
                try configurationsContainer.encode(configurationlist0)
            }
        }
        if let ebsBlockDevices = ebsBlockDevices {
            var ebsBlockDevicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ebsBlockDevices)
            for ebsblockdevicelist0 in ebsBlockDevices {
                try ebsBlockDevicesContainer.encode(ebsblockdevicelist0)
            }
        }
        if let ebsOptimized = ebsOptimized {
            try encodeContainer.encode(ebsOptimized, forKey: .ebsOptimized)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let weightedCapacity = weightedCapacity {
            try encodeContainer.encode(weightedCapacity, forKey: .weightedCapacity)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let weightedCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .weightedCapacity)
        weightedCapacity = weightedCapacityDecoded
        let bidPriceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bidPrice)
        bidPrice = bidPriceDecoded
        let bidPriceAsPercentageOfOnDemandPriceDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .bidPriceAsPercentageOfOnDemandPrice)
        bidPriceAsPercentageOfOnDemandPrice = bidPriceAsPercentageOfOnDemandPriceDecoded
        let configurationsContainer = try containerValues.decodeIfPresent([Configuration?].self, forKey: .configurations)
        var configurationsDecoded0:[Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [Configuration]()
            for structure0 in configurationsContainer {
                if let structure0 = structure0 {
                    configurationsDecoded0?.append(structure0)
                }
            }
        }
        configurations = configurationsDecoded0
        let ebsBlockDevicesContainer = try containerValues.decodeIfPresent([EbsBlockDevice?].self, forKey: .ebsBlockDevices)
        var ebsBlockDevicesDecoded0:[EbsBlockDevice]? = nil
        if let ebsBlockDevicesContainer = ebsBlockDevicesContainer {
            ebsBlockDevicesDecoded0 = [EbsBlockDevice]()
            for structure0 in ebsBlockDevicesContainer {
                if let structure0 = structure0 {
                    ebsBlockDevicesDecoded0?.append(structure0)
                }
            }
        }
        ebsBlockDevices = ebsBlockDevicesDecoded0
        let ebsOptimizedDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .ebsOptimized)
        ebsOptimized = ebsOptimizedDecoded
    }
}

extension InstanceTypeSpecification: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceTypeSpecification(bidPrice: \(String(describing: bidPrice)), bidPriceAsPercentageOfOnDemandPrice: \(String(describing: bidPriceAsPercentageOfOnDemandPrice)), configurations: \(String(describing: configurations)), ebsBlockDevices: \(String(describing: ebsBlockDevices)), ebsOptimized: \(String(describing: ebsOptimized)), instanceType: \(String(describing: instanceType)), weightedCapacity: \(String(describing: weightedCapacity)))"}
}

/// <p>The configuration specification for each instance type in an instance fleet.</p>
///          <note>
///             <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and
///             later, excluding 5.0.x versions.</p>
///          </note>
public struct InstanceTypeSpecification: Equatable {
    /// <p>The bid price for each EC2 Spot Instance type as defined by <code>InstanceType</code>.
    ///          Expressed in USD.</p>
    public let bidPrice: String?
    /// <p>The bid price, as a percentage of On-Demand price, for each EC2 Spot Instance as defined
    ///          by <code>InstanceType</code>. Expressed as a number (for example, 20 specifies 20%).</p>
    public let bidPriceAsPercentageOfOnDemandPrice: Double?
    /// <p>A configuration classification that applies when provisioning cluster instances, which
    ///          can include configurations for applications and software bundled with Amazon EMR.</p>
    public let configurations: [Configuration]?
    /// <p>The configuration of Amazon Elastic Block Storage (Amazon EBS) attached to each instance
    ///          as defined by <code>InstanceType</code>.</p>
    public let ebsBlockDevices: [EbsBlockDevice]?
    /// <p>Evaluates to <code>TRUE</code> when the specified <code>InstanceType</code> is
    ///          EBS-optimized.</p>
    public let ebsOptimized: Bool?
    /// <p>The EC2 instance type, for example <code>m3.xlarge</code>.</p>
    public let instanceType: String?
    /// <p>The number of units that a provisioned instance of this type provides toward fulfilling
    ///          the target capacities defined in <a>InstanceFleetConfig</a>. Capacity values
    ///          represent performance characteristics such as vCPUs, memory, or I/O. If not specified, the
    ///          default value is 1.</p>
    public let weightedCapacity: Int?

    public init (
        bidPrice: String? = nil,
        bidPriceAsPercentageOfOnDemandPrice: Double? = nil,
        configurations: [Configuration]? = nil,
        ebsBlockDevices: [EbsBlockDevice]? = nil,
        ebsOptimized: Bool? = nil,
        instanceType: String? = nil,
        weightedCapacity: Int? = nil
    )
    {
        self.bidPrice = bidPrice
        self.bidPriceAsPercentageOfOnDemandPrice = bidPriceAsPercentageOfOnDemandPrice
        self.configurations = configurations
        self.ebsBlockDevices = ebsBlockDevices
        self.ebsOptimized = ebsOptimized
        self.instanceType = instanceType
        self.weightedCapacity = weightedCapacity
    }
}

extension InternalServerError: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InternalServerError()"}
}

extension InternalServerError: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Indicates that an error occurred while processing the request and that the request was
///          not completed.</p>
public struct InternalServerError: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .server

    public init() {}
}

extension InternalServerException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InternalServerException(message: \(String(describing: message)))"}
}

extension InternalServerException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InternalServerExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>This exception occurs when there is an internal failure in the Amazon EMR
///          service.</p>
public struct InternalServerException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .server
    /// <p>The message associated with the exception.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServerExceptionBody: Equatable {
    public let message: String?
}

extension InternalServerExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRequestException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidRequestException(errorCode: \(String(describing: errorCode)), message: \(String(describing: message)))"}
}

extension InvalidRequestException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidRequestExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.errorCode = output.errorCode
            self.message = output.message
        } else {
            self.errorCode = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>This exception occurs when there is something wrong with user input.</p>
public struct InvalidRequestException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The error code associated with the exception.</p>
    public var errorCode: String?
    /// <p>The message associated with the exception.</p>
    public var message: String?

    public init (
        errorCode: String? = nil,
        message: String? = nil
    )
    {
        self.errorCode = errorCode
        self.message = message
    }
}

struct InvalidRequestExceptionBody: Equatable {
    public let errorCode: String?
    public let message: String?
}

extension InvalidRequestExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case errorCode = "ErrorCode"
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension JobFlowDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case amiVersion = "AmiVersion"
        case autoScalingRole = "AutoScalingRole"
        case bootstrapActions = "BootstrapActions"
        case executionStatusDetail = "ExecutionStatusDetail"
        case instances = "Instances"
        case jobFlowId = "JobFlowId"
        case jobFlowRole = "JobFlowRole"
        case logEncryptionKmsKeyId = "LogEncryptionKmsKeyId"
        case logUri = "LogUri"
        case name = "Name"
        case scaleDownBehavior = "ScaleDownBehavior"
        case serviceRole = "ServiceRole"
        case steps = "Steps"
        case supportedProducts = "SupportedProducts"
        case visibleToAllUsers = "VisibleToAllUsers"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amiVersion = amiVersion {
            try encodeContainer.encode(amiVersion, forKey: .amiVersion)
        }
        if let autoScalingRole = autoScalingRole {
            try encodeContainer.encode(autoScalingRole, forKey: .autoScalingRole)
        }
        if let bootstrapActions = bootstrapActions {
            var bootstrapActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bootstrapActions)
            for bootstrapactiondetaillist0 in bootstrapActions {
                try bootstrapActionsContainer.encode(bootstrapactiondetaillist0)
            }
        }
        if let executionStatusDetail = executionStatusDetail {
            try encodeContainer.encode(executionStatusDetail, forKey: .executionStatusDetail)
        }
        if let instances = instances {
            try encodeContainer.encode(instances, forKey: .instances)
        }
        if let jobFlowId = jobFlowId {
            try encodeContainer.encode(jobFlowId, forKey: .jobFlowId)
        }
        if let jobFlowRole = jobFlowRole {
            try encodeContainer.encode(jobFlowRole, forKey: .jobFlowRole)
        }
        if let logEncryptionKmsKeyId = logEncryptionKmsKeyId {
            try encodeContainer.encode(logEncryptionKmsKeyId, forKey: .logEncryptionKmsKeyId)
        }
        if let logUri = logUri {
            try encodeContainer.encode(logUri, forKey: .logUri)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scaleDownBehavior = scaleDownBehavior {
            try encodeContainer.encode(scaleDownBehavior.rawValue, forKey: .scaleDownBehavior)
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let steps = steps {
            var stepsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .steps)
            for stepdetaillist0 in steps {
                try stepsContainer.encode(stepdetaillist0)
            }
        }
        if let supportedProducts = supportedProducts {
            var supportedProductsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedProducts)
            for supportedproductslist0 in supportedProducts {
                try supportedProductsContainer.encode(supportedproductslist0)
            }
        }
        if visibleToAllUsers != false {
            try encodeContainer.encode(visibleToAllUsers, forKey: .visibleToAllUsers)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobFlowIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobFlowId)
        jobFlowId = jobFlowIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logUri)
        logUri = logUriDecoded
        let logEncryptionKmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logEncryptionKmsKeyId)
        logEncryptionKmsKeyId = logEncryptionKmsKeyIdDecoded
        let amiVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .amiVersion)
        amiVersion = amiVersionDecoded
        let executionStatusDetailDecoded = try containerValues.decodeIfPresent(JobFlowExecutionStatusDetail.self, forKey: .executionStatusDetail)
        executionStatusDetail = executionStatusDetailDecoded
        let instancesDecoded = try containerValues.decodeIfPresent(JobFlowInstancesDetail.self, forKey: .instances)
        instances = instancesDecoded
        let stepsContainer = try containerValues.decodeIfPresent([StepDetail?].self, forKey: .steps)
        var stepsDecoded0:[StepDetail]? = nil
        if let stepsContainer = stepsContainer {
            stepsDecoded0 = [StepDetail]()
            for structure0 in stepsContainer {
                if let structure0 = structure0 {
                    stepsDecoded0?.append(structure0)
                }
            }
        }
        steps = stepsDecoded0
        let bootstrapActionsContainer = try containerValues.decodeIfPresent([BootstrapActionDetail?].self, forKey: .bootstrapActions)
        var bootstrapActionsDecoded0:[BootstrapActionDetail]? = nil
        if let bootstrapActionsContainer = bootstrapActionsContainer {
            bootstrapActionsDecoded0 = [BootstrapActionDetail]()
            for structure0 in bootstrapActionsContainer {
                if let structure0 = structure0 {
                    bootstrapActionsDecoded0?.append(structure0)
                }
            }
        }
        bootstrapActions = bootstrapActionsDecoded0
        let supportedProductsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .supportedProducts)
        var supportedProductsDecoded0:[String]? = nil
        if let supportedProductsContainer = supportedProductsContainer {
            supportedProductsDecoded0 = [String]()
            for string0 in supportedProductsContainer {
                if let string0 = string0 {
                    supportedProductsDecoded0?.append(string0)
                }
            }
        }
        supportedProducts = supportedProductsDecoded0
        let visibleToAllUsersDecoded = try containerValues.decode(Bool.self, forKey: .visibleToAllUsers)
        visibleToAllUsers = visibleToAllUsersDecoded
        let jobFlowRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobFlowRole)
        jobFlowRole = jobFlowRoleDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let autoScalingRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingRole)
        autoScalingRole = autoScalingRoleDecoded
        let scaleDownBehaviorDecoded = try containerValues.decodeIfPresent(ScaleDownBehavior.self, forKey: .scaleDownBehavior)
        scaleDownBehavior = scaleDownBehaviorDecoded
    }
}

extension JobFlowDetail: CustomDebugStringConvertible {
    public var debugDescription: String {
        "JobFlowDetail(amiVersion: \(String(describing: amiVersion)), autoScalingRole: \(String(describing: autoScalingRole)), bootstrapActions: \(String(describing: bootstrapActions)), executionStatusDetail: \(String(describing: executionStatusDetail)), instances: \(String(describing: instances)), jobFlowId: \(String(describing: jobFlowId)), jobFlowRole: \(String(describing: jobFlowRole)), logEncryptionKmsKeyId: \(String(describing: logEncryptionKmsKeyId)), logUri: \(String(describing: logUri)), name: \(String(describing: name)), scaleDownBehavior: \(String(describing: scaleDownBehavior)), serviceRole: \(String(describing: serviceRole)), steps: \(String(describing: steps)), supportedProducts: \(String(describing: supportedProducts)), visibleToAllUsers: \(String(describing: visibleToAllUsers)))"}
}

/// <p>A description of a cluster (job flow).</p>
public struct JobFlowDetail: Equatable {
    /// <p>Applies only to Amazon EMR AMI versions 3.x and 2.x. For Amazon EMR releases 4.0 and
    ///          later, <code>ReleaseLabel</code> is used. To specify a custom AMI, use
    ///             <code>CustomAmiID</code>.</p>
    public let amiVersion: String?
    /// <p>An IAM role for automatic scaling policies. The default role is
    ///             <code>EMR_AutoScaling_DefaultRole</code>. The IAM role provides a way for the automatic
    ///          scaling feature to get the required permissions it needs to launch and terminate EC2
    ///          instances in an instance group.</p>
    public let autoScalingRole: String?
    /// <p>A list of the bootstrap actions run by the job flow.</p>
    public let bootstrapActions: [BootstrapActionDetail]?
    /// <p>Describes the execution status of the job flow.</p>
    public let executionStatusDetail: JobFlowExecutionStatusDetail?
    /// <p>Describes the Amazon EC2 instances of the job flow.</p>
    public let instances: JobFlowInstancesDetail?
    /// <p>The job flow identifier.</p>
    public let jobFlowId: String?
    /// <p>The IAM role that was specified when the job flow was launched. The EC2 instances of the
    ///          job flow assume this role.</p>
    public let jobFlowRole: String?
    /// <p>The AWS KMS customer master key (CMK) used for encrypting log files. This attribute is
    ///          only available with EMR version 5.30.0 and later, excluding EMR 6.0.0.</p>
    public let logEncryptionKmsKeyId: String?
    /// <p>The location in Amazon S3 where log files for the job are stored.</p>
    public let logUri: String?
    /// <p>The name of the job flow.</p>
    public let name: String?
    /// <p>The way that individual Amazon EC2 instances terminate when an automatic scale-in
    ///          activity occurs or an instance group is resized. <code>TERMINATE_AT_INSTANCE_HOUR</code>
    ///          indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of
    ///          when the request to terminate the instance was submitted. This option is only available
    ///          with Amazon EMR 5.1.0 and later and is the default for clusters created using that version.
    ///             <code>TERMINATE_AT_TASK_COMPLETION</code> indicates that Amazon EMR adds nodes to a deny
    ///          list and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of
    ///          the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes
    ///          first and blocks instance termination if it could lead to HDFS corruption.
    ///             <code>TERMINATE_AT_TASK_COMPLETION</code> available only in Amazon EMR version 4.1.0 and
    ///          later, and is the default for versions of Amazon EMR earlier than 5.1.0.</p>
    public let scaleDownBehavior: ScaleDownBehavior?
    /// <p>The IAM role that is assumed by the Amazon EMR service to access AWS resources on your
    ///          behalf.</p>
    public let serviceRole: String?
    /// <p>A list of steps run by the job flow.</p>
    public let steps: [StepDetail]?
    /// <p>A list of strings set by third-party software when the job flow is launched. If you are
    ///          not using third-party software to manage the job flow, this value is empty.</p>
    public let supportedProducts: [String]?
    /// <p>Indicates whether the cluster is visible to all IAM users of the AWS account associated
    ///          with the cluster. The default value, <code>true</code>, indicates that all IAM users in the
    ///          AWS account can perform cluster actions if they have the proper IAM policy permissions. If
    ///          this value is <code>false</code>, only the IAM user that created the cluster can perform
    ///          actions. This value can be changed on a running cluster by using the <a>SetVisibleToAllUsers</a> action. You can override the default value of
    ///             <code>true</code> when you create a cluster by using the <code>VisibleToAllUsers</code>
    ///          parameter of the <code>RunJobFlow</code> action.</p>
    public let visibleToAllUsers: Bool

    public init (
        amiVersion: String? = nil,
        autoScalingRole: String? = nil,
        bootstrapActions: [BootstrapActionDetail]? = nil,
        executionStatusDetail: JobFlowExecutionStatusDetail? = nil,
        instances: JobFlowInstancesDetail? = nil,
        jobFlowId: String? = nil,
        jobFlowRole: String? = nil,
        logEncryptionKmsKeyId: String? = nil,
        logUri: String? = nil,
        name: String? = nil,
        scaleDownBehavior: ScaleDownBehavior? = nil,
        serviceRole: String? = nil,
        steps: [StepDetail]? = nil,
        supportedProducts: [String]? = nil,
        visibleToAllUsers: Bool = false
    )
    {
        self.amiVersion = amiVersion
        self.autoScalingRole = autoScalingRole
        self.bootstrapActions = bootstrapActions
        self.executionStatusDetail = executionStatusDetail
        self.instances = instances
        self.jobFlowId = jobFlowId
        self.jobFlowRole = jobFlowRole
        self.logEncryptionKmsKeyId = logEncryptionKmsKeyId
        self.logUri = logUri
        self.name = name
        self.scaleDownBehavior = scaleDownBehavior
        self.serviceRole = serviceRole
        self.steps = steps
        self.supportedProducts = supportedProducts
        self.visibleToAllUsers = visibleToAllUsers
    }
}

/// <p>The type of instance.</p>
public enum JobFlowExecutionState {
    case bootstrapping
    case completed
    case failed
    case running
    case shuttingDown
    case starting
    case terminated
    case waiting
    case sdkUnknown(String)
}

extension JobFlowExecutionState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [JobFlowExecutionState] {
        return [
            .bootstrapping,
            .completed,
            .failed,
            .running,
            .shuttingDown,
            .starting,
            .terminated,
            .waiting,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .bootstrapping: return "BOOTSTRAPPING"
        case .completed: return "COMPLETED"
        case .failed: return "FAILED"
        case .running: return "RUNNING"
        case .shuttingDown: return "SHUTTING_DOWN"
        case .starting: return "STARTING"
        case .terminated: return "TERMINATED"
        case .waiting: return "WAITING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = JobFlowExecutionState(rawValue: rawValue) ?? JobFlowExecutionState.sdkUnknown(rawValue)
    }
}

extension JobFlowExecutionStatusDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationDateTime = "CreationDateTime"
        case endDateTime = "EndDateTime"
        case lastStateChangeReason = "LastStateChangeReason"
        case readyDateTime = "ReadyDateTime"
        case startDateTime = "StartDateTime"
        case state = "State"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDateTime = creationDateTime {
            try encodeContainer.encode(creationDateTime.timeIntervalSince1970, forKey: .creationDateTime)
        }
        if let endDateTime = endDateTime {
            try encodeContainer.encode(endDateTime.timeIntervalSince1970, forKey: .endDateTime)
        }
        if let lastStateChangeReason = lastStateChangeReason {
            try encodeContainer.encode(lastStateChangeReason, forKey: .lastStateChangeReason)
        }
        if let readyDateTime = readyDateTime {
            try encodeContainer.encode(readyDateTime.timeIntervalSince1970, forKey: .readyDateTime)
        }
        if let startDateTime = startDateTime {
            try encodeContainer.encode(startDateTime.timeIntervalSince1970, forKey: .startDateTime)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(JobFlowExecutionState.self, forKey: .state)
        state = stateDecoded
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let startDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startDateTime)
        startDateTime = startDateTimeDecoded
        let readyDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .readyDateTime)
        readyDateTime = readyDateTimeDecoded
        let endDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endDateTime)
        endDateTime = endDateTimeDecoded
        let lastStateChangeReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastStateChangeReason)
        lastStateChangeReason = lastStateChangeReasonDecoded
    }
}

extension JobFlowExecutionStatusDetail: CustomDebugStringConvertible {
    public var debugDescription: String {
        "JobFlowExecutionStatusDetail(creationDateTime: \(String(describing: creationDateTime)), endDateTime: \(String(describing: endDateTime)), lastStateChangeReason: \(String(describing: lastStateChangeReason)), readyDateTime: \(String(describing: readyDateTime)), startDateTime: \(String(describing: startDateTime)), state: \(String(describing: state)))"}
}

/// <p>Describes the status of the cluster (job flow).</p>
public struct JobFlowExecutionStatusDetail: Equatable {
    /// <p>The creation date and time of the job flow.</p>
    public let creationDateTime: Date?
    /// <p>The completion date and time of the job flow.</p>
    public let endDateTime: Date?
    /// <p>Description of the job flow last changed state.</p>
    public let lastStateChangeReason: String?
    /// <p>The date and time when the job flow was ready to start running bootstrap actions.</p>
    public let readyDateTime: Date?
    /// <p>The start date and time of the job flow.</p>
    public let startDateTime: Date?
    /// <p>The state of the job flow.</p>
    public let state: JobFlowExecutionState?

    public init (
        creationDateTime: Date? = nil,
        endDateTime: Date? = nil,
        lastStateChangeReason: String? = nil,
        readyDateTime: Date? = nil,
        startDateTime: Date? = nil,
        state: JobFlowExecutionState? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.endDateTime = endDateTime
        self.lastStateChangeReason = lastStateChangeReason
        self.readyDateTime = readyDateTime
        self.startDateTime = startDateTime
        self.state = state
    }
}

extension JobFlowInstancesConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case additionalMasterSecurityGroups = "AdditionalMasterSecurityGroups"
        case additionalSlaveSecurityGroups = "AdditionalSlaveSecurityGroups"
        case ec2KeyName = "Ec2KeyName"
        case ec2SubnetId = "Ec2SubnetId"
        case ec2SubnetIds = "Ec2SubnetIds"
        case emrManagedMasterSecurityGroup = "EmrManagedMasterSecurityGroup"
        case emrManagedSlaveSecurityGroup = "EmrManagedSlaveSecurityGroup"
        case hadoopVersion = "HadoopVersion"
        case instanceCount = "InstanceCount"
        case instanceFleets = "InstanceFleets"
        case instanceGroups = "InstanceGroups"
        case keepJobFlowAliveWhenNoSteps = "KeepJobFlowAliveWhenNoSteps"
        case masterInstanceType = "MasterInstanceType"
        case placement = "Placement"
        case serviceAccessSecurityGroup = "ServiceAccessSecurityGroup"
        case slaveInstanceType = "SlaveInstanceType"
        case terminationProtected = "TerminationProtected"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalMasterSecurityGroups = additionalMasterSecurityGroups {
            var additionalMasterSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalMasterSecurityGroups)
            for securitygroupslist0 in additionalMasterSecurityGroups {
                try additionalMasterSecurityGroupsContainer.encode(securitygroupslist0)
            }
        }
        if let additionalSlaveSecurityGroups = additionalSlaveSecurityGroups {
            var additionalSlaveSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalSlaveSecurityGroups)
            for securitygroupslist0 in additionalSlaveSecurityGroups {
                try additionalSlaveSecurityGroupsContainer.encode(securitygroupslist0)
            }
        }
        if let ec2KeyName = ec2KeyName {
            try encodeContainer.encode(ec2KeyName, forKey: .ec2KeyName)
        }
        if let ec2SubnetId = ec2SubnetId {
            try encodeContainer.encode(ec2SubnetId, forKey: .ec2SubnetId)
        }
        if let ec2SubnetIds = ec2SubnetIds {
            var ec2SubnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2SubnetIds)
            for xmlstringmaxlen256list0 in ec2SubnetIds {
                try ec2SubnetIdsContainer.encode(xmlstringmaxlen256list0)
            }
        }
        if let emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroup {
            try encodeContainer.encode(emrManagedMasterSecurityGroup, forKey: .emrManagedMasterSecurityGroup)
        }
        if let emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroup {
            try encodeContainer.encode(emrManagedSlaveSecurityGroup, forKey: .emrManagedSlaveSecurityGroup)
        }
        if let hadoopVersion = hadoopVersion {
            try encodeContainer.encode(hadoopVersion, forKey: .hadoopVersion)
        }
        if let instanceCount = instanceCount {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let instanceFleets = instanceFleets {
            var instanceFleetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceFleets)
            for instancefleetconfiglist0 in instanceFleets {
                try instanceFleetsContainer.encode(instancefleetconfiglist0)
            }
        }
        if let instanceGroups = instanceGroups {
            var instanceGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceGroups)
            for instancegroupconfiglist0 in instanceGroups {
                try instanceGroupsContainer.encode(instancegroupconfiglist0)
            }
        }
        if keepJobFlowAliveWhenNoSteps != false {
            try encodeContainer.encode(keepJobFlowAliveWhenNoSteps, forKey: .keepJobFlowAliveWhenNoSteps)
        }
        if let masterInstanceType = masterInstanceType {
            try encodeContainer.encode(masterInstanceType, forKey: .masterInstanceType)
        }
        if let placement = placement {
            try encodeContainer.encode(placement, forKey: .placement)
        }
        if let serviceAccessSecurityGroup = serviceAccessSecurityGroup {
            try encodeContainer.encode(serviceAccessSecurityGroup, forKey: .serviceAccessSecurityGroup)
        }
        if let slaveInstanceType = slaveInstanceType {
            try encodeContainer.encode(slaveInstanceType, forKey: .slaveInstanceType)
        }
        if terminationProtected != false {
            try encodeContainer.encode(terminationProtected, forKey: .terminationProtected)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let masterInstanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .masterInstanceType)
        masterInstanceType = masterInstanceTypeDecoded
        let slaveInstanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .slaveInstanceType)
        slaveInstanceType = slaveInstanceTypeDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let instanceGroupsContainer = try containerValues.decodeIfPresent([InstanceGroupConfig?].self, forKey: .instanceGroups)
        var instanceGroupsDecoded0:[InstanceGroupConfig]? = nil
        if let instanceGroupsContainer = instanceGroupsContainer {
            instanceGroupsDecoded0 = [InstanceGroupConfig]()
            for structure0 in instanceGroupsContainer {
                if let structure0 = structure0 {
                    instanceGroupsDecoded0?.append(structure0)
                }
            }
        }
        instanceGroups = instanceGroupsDecoded0
        let instanceFleetsContainer = try containerValues.decodeIfPresent([InstanceFleetConfig?].self, forKey: .instanceFleets)
        var instanceFleetsDecoded0:[InstanceFleetConfig]? = nil
        if let instanceFleetsContainer = instanceFleetsContainer {
            instanceFleetsDecoded0 = [InstanceFleetConfig]()
            for structure0 in instanceFleetsContainer {
                if let structure0 = structure0 {
                    instanceFleetsDecoded0?.append(structure0)
                }
            }
        }
        instanceFleets = instanceFleetsDecoded0
        let ec2KeyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ec2KeyName)
        ec2KeyName = ec2KeyNameDecoded
        let placementDecoded = try containerValues.decodeIfPresent(PlacementType.self, forKey: .placement)
        placement = placementDecoded
        let keepJobFlowAliveWhenNoStepsDecoded = try containerValues.decode(Bool.self, forKey: .keepJobFlowAliveWhenNoSteps)
        keepJobFlowAliveWhenNoSteps = keepJobFlowAliveWhenNoStepsDecoded
        let terminationProtectedDecoded = try containerValues.decode(Bool.self, forKey: .terminationProtected)
        terminationProtected = terminationProtectedDecoded
        let hadoopVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hadoopVersion)
        hadoopVersion = hadoopVersionDecoded
        let ec2SubnetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ec2SubnetId)
        ec2SubnetId = ec2SubnetIdDecoded
        let ec2SubnetIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .ec2SubnetIds)
        var ec2SubnetIdsDecoded0:[String]? = nil
        if let ec2SubnetIdsContainer = ec2SubnetIdsContainer {
            ec2SubnetIdsDecoded0 = [String]()
            for string0 in ec2SubnetIdsContainer {
                if let string0 = string0 {
                    ec2SubnetIdsDecoded0?.append(string0)
                }
            }
        }
        ec2SubnetIds = ec2SubnetIdsDecoded0
        let emrManagedMasterSecurityGroupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .emrManagedMasterSecurityGroup)
        emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroupDecoded
        let emrManagedSlaveSecurityGroupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .emrManagedSlaveSecurityGroup)
        emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroupDecoded
        let serviceAccessSecurityGroupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceAccessSecurityGroup)
        serviceAccessSecurityGroup = serviceAccessSecurityGroupDecoded
        let additionalMasterSecurityGroupsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .additionalMasterSecurityGroups)
        var additionalMasterSecurityGroupsDecoded0:[String]? = nil
        if let additionalMasterSecurityGroupsContainer = additionalMasterSecurityGroupsContainer {
            additionalMasterSecurityGroupsDecoded0 = [String]()
            for string0 in additionalMasterSecurityGroupsContainer {
                if let string0 = string0 {
                    additionalMasterSecurityGroupsDecoded0?.append(string0)
                }
            }
        }
        additionalMasterSecurityGroups = additionalMasterSecurityGroupsDecoded0
        let additionalSlaveSecurityGroupsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .additionalSlaveSecurityGroups)
        var additionalSlaveSecurityGroupsDecoded0:[String]? = nil
        if let additionalSlaveSecurityGroupsContainer = additionalSlaveSecurityGroupsContainer {
            additionalSlaveSecurityGroupsDecoded0 = [String]()
            for string0 in additionalSlaveSecurityGroupsContainer {
                if let string0 = string0 {
                    additionalSlaveSecurityGroupsDecoded0?.append(string0)
                }
            }
        }
        additionalSlaveSecurityGroups = additionalSlaveSecurityGroupsDecoded0
    }
}

extension JobFlowInstancesConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "JobFlowInstancesConfig(additionalMasterSecurityGroups: \(String(describing: additionalMasterSecurityGroups)), additionalSlaveSecurityGroups: \(String(describing: additionalSlaveSecurityGroups)), ec2KeyName: \(String(describing: ec2KeyName)), ec2SubnetId: \(String(describing: ec2SubnetId)), ec2SubnetIds: \(String(describing: ec2SubnetIds)), emrManagedMasterSecurityGroup: \(String(describing: emrManagedMasterSecurityGroup)), emrManagedSlaveSecurityGroup: \(String(describing: emrManagedSlaveSecurityGroup)), hadoopVersion: \(String(describing: hadoopVersion)), instanceCount: \(String(describing: instanceCount)), instanceFleets: \(String(describing: instanceFleets)), instanceGroups: \(String(describing: instanceGroups)), keepJobFlowAliveWhenNoSteps: \(String(describing: keepJobFlowAliveWhenNoSteps)), masterInstanceType: \(String(describing: masterInstanceType)), placement: \(String(describing: placement)), serviceAccessSecurityGroup: \(String(describing: serviceAccessSecurityGroup)), slaveInstanceType: \(String(describing: slaveInstanceType)), terminationProtected: \(String(describing: terminationProtected)))"}
}

/// <p>A description of the Amazon EC2 instance on which the cluster (job flow) runs. A valid
///          JobFlowInstancesConfig must contain either InstanceGroups or InstanceFleets. They cannot be
///          used together. You may also have MasterInstanceType, SlaveInstanceType, and InstanceCount
///          (all three must be present), but we don't recommend this configuration.</p>
public struct JobFlowInstancesConfig: Equatable {
    /// <p>A list of additional Amazon EC2 security group IDs for the master node.</p>
    public let additionalMasterSecurityGroups: [String]?
    /// <p>A list of additional Amazon EC2 security group IDs for the core and task nodes.</p>
    public let additionalSlaveSecurityGroups: [String]?
    /// <p>The name of the EC2 key pair that can be used to connect to the master node using SSH as
    ///          the user called "hadoop."</p>
    public let ec2KeyName: String?
    /// <p>Applies to clusters that use the uniform instance group configuration. To launch the
    ///          cluster in Amazon Virtual Private Cloud (Amazon VPC), set this parameter to the identifier
    ///          of the Amazon VPC subnet where you want the cluster to launch. If you do not specify this
    ///          value and your account supports EC2-Classic, the cluster launches in EC2-Classic.</p>
    public let ec2SubnetId: String?
    /// <p>Applies to clusters that use the instance fleet configuration. When multiple EC2 subnet
    ///          IDs are specified, Amazon EMR evaluates them and launches instances in the optimal
    ///          subnet.</p>
    ///          <note>
    ///             <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and
    ///             later, excluding 5.0.x versions.</p>
    ///          </note>
    public let ec2SubnetIds: [String]?
    /// <p>The identifier of the Amazon EC2 security group for the master node.</p>
    public let emrManagedMasterSecurityGroup: String?
    /// <p>The identifier of the Amazon EC2 security group for the core and task nodes.</p>
    public let emrManagedSlaveSecurityGroup: String?
    /// <p>Applies only to Amazon EMR release versions earlier than 4.0. The Hadoop version for the
    ///          cluster. Valid inputs are "0.18" (no longer maintained), "0.20" (no longer maintained),
    ///          "0.20.205" (no longer maintained), "1.0.3", "2.2.0", or "2.4.0". If you do not set this
    ///          value, the default of 0.18 is used, unless the <code>AmiVersion</code> parameter is set in
    ///          the RunJobFlow call, in which case the default version of Hadoop for that AMI version is
    ///          used.</p>
    public let hadoopVersion: String?
    /// <p>The number of EC2 instances in the cluster.</p>
    public let instanceCount: Int?
    /// <note>
    ///             <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and
    ///             later, excluding 5.0.x versions.</p>
    ///          </note>
    ///          <p>Describes the EC2 instances and instance configurations for clusters that use the
    ///          instance fleet configuration.</p>
    public let instanceFleets: [InstanceFleetConfig]?
    /// <p>Configuration for the instance groups in a cluster.</p>
    public let instanceGroups: [InstanceGroupConfig]?
    /// <p>Specifies whether the cluster should remain available after completing all steps.</p>
    public let keepJobFlowAliveWhenNoSteps: Bool
    /// <p>The EC2 instance type of the master node.</p>
    public let masterInstanceType: String?
    /// <p>The Availability Zone in which the cluster runs.</p>
    public let placement: PlacementType?
    /// <p>The identifier of the Amazon EC2 security group for the Amazon EMR service to access
    ///          clusters in VPC private subnets.</p>
    public let serviceAccessSecurityGroup: String?
    /// <p>The EC2 instance type of the core and task nodes.</p>
    public let slaveInstanceType: String?
    /// <p>Specifies whether to lock the cluster to prevent the Amazon EC2 instances from being
    ///          terminated by API call, user intervention, or in the event of a job-flow error.</p>
    public let terminationProtected: Bool

    public init (
        additionalMasterSecurityGroups: [String]? = nil,
        additionalSlaveSecurityGroups: [String]? = nil,
        ec2KeyName: String? = nil,
        ec2SubnetId: String? = nil,
        ec2SubnetIds: [String]? = nil,
        emrManagedMasterSecurityGroup: String? = nil,
        emrManagedSlaveSecurityGroup: String? = nil,
        hadoopVersion: String? = nil,
        instanceCount: Int? = nil,
        instanceFleets: [InstanceFleetConfig]? = nil,
        instanceGroups: [InstanceGroupConfig]? = nil,
        keepJobFlowAliveWhenNoSteps: Bool = false,
        masterInstanceType: String? = nil,
        placement: PlacementType? = nil,
        serviceAccessSecurityGroup: String? = nil,
        slaveInstanceType: String? = nil,
        terminationProtected: Bool = false
    )
    {
        self.additionalMasterSecurityGroups = additionalMasterSecurityGroups
        self.additionalSlaveSecurityGroups = additionalSlaveSecurityGroups
        self.ec2KeyName = ec2KeyName
        self.ec2SubnetId = ec2SubnetId
        self.ec2SubnetIds = ec2SubnetIds
        self.emrManagedMasterSecurityGroup = emrManagedMasterSecurityGroup
        self.emrManagedSlaveSecurityGroup = emrManagedSlaveSecurityGroup
        self.hadoopVersion = hadoopVersion
        self.instanceCount = instanceCount
        self.instanceFleets = instanceFleets
        self.instanceGroups = instanceGroups
        self.keepJobFlowAliveWhenNoSteps = keepJobFlowAliveWhenNoSteps
        self.masterInstanceType = masterInstanceType
        self.placement = placement
        self.serviceAccessSecurityGroup = serviceAccessSecurityGroup
        self.slaveInstanceType = slaveInstanceType
        self.terminationProtected = terminationProtected
    }
}

extension JobFlowInstancesDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ec2KeyName = "Ec2KeyName"
        case ec2SubnetId = "Ec2SubnetId"
        case hadoopVersion = "HadoopVersion"
        case instanceCount = "InstanceCount"
        case instanceGroups = "InstanceGroups"
        case keepJobFlowAliveWhenNoSteps = "KeepJobFlowAliveWhenNoSteps"
        case masterInstanceId = "MasterInstanceId"
        case masterInstanceType = "MasterInstanceType"
        case masterPublicDnsName = "MasterPublicDnsName"
        case normalizedInstanceHours = "NormalizedInstanceHours"
        case placement = "Placement"
        case slaveInstanceType = "SlaveInstanceType"
        case terminationProtected = "TerminationProtected"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ec2KeyName = ec2KeyName {
            try encodeContainer.encode(ec2KeyName, forKey: .ec2KeyName)
        }
        if let ec2SubnetId = ec2SubnetId {
            try encodeContainer.encode(ec2SubnetId, forKey: .ec2SubnetId)
        }
        if let hadoopVersion = hadoopVersion {
            try encodeContainer.encode(hadoopVersion, forKey: .hadoopVersion)
        }
        if let instanceCount = instanceCount {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let instanceGroups = instanceGroups {
            var instanceGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceGroups)
            for instancegroupdetaillist0 in instanceGroups {
                try instanceGroupsContainer.encode(instancegroupdetaillist0)
            }
        }
        if keepJobFlowAliveWhenNoSteps != false {
            try encodeContainer.encode(keepJobFlowAliveWhenNoSteps, forKey: .keepJobFlowAliveWhenNoSteps)
        }
        if let masterInstanceId = masterInstanceId {
            try encodeContainer.encode(masterInstanceId, forKey: .masterInstanceId)
        }
        if let masterInstanceType = masterInstanceType {
            try encodeContainer.encode(masterInstanceType, forKey: .masterInstanceType)
        }
        if let masterPublicDnsName = masterPublicDnsName {
            try encodeContainer.encode(masterPublicDnsName, forKey: .masterPublicDnsName)
        }
        if let normalizedInstanceHours = normalizedInstanceHours {
            try encodeContainer.encode(normalizedInstanceHours, forKey: .normalizedInstanceHours)
        }
        if let placement = placement {
            try encodeContainer.encode(placement, forKey: .placement)
        }
        if let slaveInstanceType = slaveInstanceType {
            try encodeContainer.encode(slaveInstanceType, forKey: .slaveInstanceType)
        }
        if terminationProtected != false {
            try encodeContainer.encode(terminationProtected, forKey: .terminationProtected)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let masterInstanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .masterInstanceType)
        masterInstanceType = masterInstanceTypeDecoded
        let masterPublicDnsNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .masterPublicDnsName)
        masterPublicDnsName = masterPublicDnsNameDecoded
        let masterInstanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .masterInstanceId)
        masterInstanceId = masterInstanceIdDecoded
        let slaveInstanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .slaveInstanceType)
        slaveInstanceType = slaveInstanceTypeDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let instanceGroupsContainer = try containerValues.decodeIfPresent([InstanceGroupDetail?].self, forKey: .instanceGroups)
        var instanceGroupsDecoded0:[InstanceGroupDetail]? = nil
        if let instanceGroupsContainer = instanceGroupsContainer {
            instanceGroupsDecoded0 = [InstanceGroupDetail]()
            for structure0 in instanceGroupsContainer {
                if let structure0 = structure0 {
                    instanceGroupsDecoded0?.append(structure0)
                }
            }
        }
        instanceGroups = instanceGroupsDecoded0
        let normalizedInstanceHoursDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .normalizedInstanceHours)
        normalizedInstanceHours = normalizedInstanceHoursDecoded
        let ec2KeyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ec2KeyName)
        ec2KeyName = ec2KeyNameDecoded
        let ec2SubnetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ec2SubnetId)
        ec2SubnetId = ec2SubnetIdDecoded
        let placementDecoded = try containerValues.decodeIfPresent(PlacementType.self, forKey: .placement)
        placement = placementDecoded
        let keepJobFlowAliveWhenNoStepsDecoded = try containerValues.decode(Bool.self, forKey: .keepJobFlowAliveWhenNoSteps)
        keepJobFlowAliveWhenNoSteps = keepJobFlowAliveWhenNoStepsDecoded
        let terminationProtectedDecoded = try containerValues.decode(Bool.self, forKey: .terminationProtected)
        terminationProtected = terminationProtectedDecoded
        let hadoopVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hadoopVersion)
        hadoopVersion = hadoopVersionDecoded
    }
}

extension JobFlowInstancesDetail: CustomDebugStringConvertible {
    public var debugDescription: String {
        "JobFlowInstancesDetail(ec2KeyName: \(String(describing: ec2KeyName)), ec2SubnetId: \(String(describing: ec2SubnetId)), hadoopVersion: \(String(describing: hadoopVersion)), instanceCount: \(String(describing: instanceCount)), instanceGroups: \(String(describing: instanceGroups)), keepJobFlowAliveWhenNoSteps: \(String(describing: keepJobFlowAliveWhenNoSteps)), masterInstanceId: \(String(describing: masterInstanceId)), masterInstanceType: \(String(describing: masterInstanceType)), masterPublicDnsName: \(String(describing: masterPublicDnsName)), normalizedInstanceHours: \(String(describing: normalizedInstanceHours)), placement: \(String(describing: placement)), slaveInstanceType: \(String(describing: slaveInstanceType)), terminationProtected: \(String(describing: terminationProtected)))"}
}

/// <p>Specify the type of Amazon EC2 instances that the cluster (job flow) runs on.</p>
public struct JobFlowInstancesDetail: Equatable {
    /// <p>The name of an Amazon EC2 key pair that can be used to connect to the master node using
    ///          SSH.</p>
    public let ec2KeyName: String?
    /// <p>For clusters launched within Amazon Virtual Private Cloud, this is the identifier of the
    ///          subnet where the cluster was launched.</p>
    public let ec2SubnetId: String?
    /// <p>The Hadoop version for the cluster.</p>
    public let hadoopVersion: String?
    /// <p>The number of Amazon EC2 instances in the cluster. If the value is 1, the same instance
    ///          serves as both the master and core and task node. If the value is greater than 1, one
    ///          instance is the master node and all others are core and task nodes.</p>
    public let instanceCount: Int?
    /// <p>Details about the instance groups in a cluster.</p>
    public let instanceGroups: [InstanceGroupDetail]?
    /// <p>Specifies whether the cluster should remain available after completing all steps.</p>
    public let keepJobFlowAliveWhenNoSteps: Bool
    /// <p>The Amazon EC2 instance identifier of the master node.</p>
    public let masterInstanceId: String?
    /// <p>The Amazon EC2 master node instance type.</p>
    public let masterInstanceType: String?
    /// <p>The DNS name of the master node. If the cluster is on a private subnet, this is the
    ///          private DNS name. On a public subnet, this is the public DNS name.</p>
    public let masterPublicDnsName: String?
    /// <p>An approximation of the cost of the cluster, represented in m1.small/hours. This value
    ///          is increased one time for every hour that an m1.small instance runs. Larger instances are
    ///          weighted more heavily, so an Amazon EC2 instance that is roughly four times more expensive
    ///          would result in the normalized instance hours being increased incrementally four times.
    ///          This result is only an approximation and does not reflect the actual billing rate.</p>
    public let normalizedInstanceHours: Int?
    /// <p>The Amazon EC2 Availability Zone for the cluster.</p>
    public let placement: PlacementType?
    /// <p>The Amazon EC2 core and task node instance type.</p>
    public let slaveInstanceType: String?
    /// <p>Specifies whether the Amazon EC2 instances in the cluster are protected from termination
    ///          by API calls, user intervention, or in the event of a job-flow error.</p>
    public let terminationProtected: Bool

    public init (
        ec2KeyName: String? = nil,
        ec2SubnetId: String? = nil,
        hadoopVersion: String? = nil,
        instanceCount: Int? = nil,
        instanceGroups: [InstanceGroupDetail]? = nil,
        keepJobFlowAliveWhenNoSteps: Bool = false,
        masterInstanceId: String? = nil,
        masterInstanceType: String? = nil,
        masterPublicDnsName: String? = nil,
        normalizedInstanceHours: Int? = nil,
        placement: PlacementType? = nil,
        slaveInstanceType: String? = nil,
        terminationProtected: Bool = false
    )
    {
        self.ec2KeyName = ec2KeyName
        self.ec2SubnetId = ec2SubnetId
        self.hadoopVersion = hadoopVersion
        self.instanceCount = instanceCount
        self.instanceGroups = instanceGroups
        self.keepJobFlowAliveWhenNoSteps = keepJobFlowAliveWhenNoSteps
        self.masterInstanceId = masterInstanceId
        self.masterInstanceType = masterInstanceType
        self.masterPublicDnsName = masterPublicDnsName
        self.normalizedInstanceHours = normalizedInstanceHours
        self.placement = placement
        self.slaveInstanceType = slaveInstanceType
        self.terminationProtected = terminationProtected
    }
}

extension KerberosAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aDDomainJoinPassword = "ADDomainJoinPassword"
        case aDDomainJoinUser = "ADDomainJoinUser"
        case crossRealmTrustPrincipalPassword = "CrossRealmTrustPrincipalPassword"
        case kdcAdminPassword = "KdcAdminPassword"
        case realm = "Realm"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aDDomainJoinPassword = aDDomainJoinPassword {
            try encodeContainer.encode(aDDomainJoinPassword, forKey: .aDDomainJoinPassword)
        }
        if let aDDomainJoinUser = aDDomainJoinUser {
            try encodeContainer.encode(aDDomainJoinUser, forKey: .aDDomainJoinUser)
        }
        if let crossRealmTrustPrincipalPassword = crossRealmTrustPrincipalPassword {
            try encodeContainer.encode(crossRealmTrustPrincipalPassword, forKey: .crossRealmTrustPrincipalPassword)
        }
        if let kdcAdminPassword = kdcAdminPassword {
            try encodeContainer.encode(kdcAdminPassword, forKey: .kdcAdminPassword)
        }
        if let realm = realm {
            try encodeContainer.encode(realm, forKey: .realm)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let realmDecoded = try containerValues.decodeIfPresent(String.self, forKey: .realm)
        realm = realmDecoded
        let kdcAdminPasswordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kdcAdminPassword)
        kdcAdminPassword = kdcAdminPasswordDecoded
        let crossRealmTrustPrincipalPasswordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .crossRealmTrustPrincipalPassword)
        crossRealmTrustPrincipalPassword = crossRealmTrustPrincipalPasswordDecoded
        let aDDomainJoinUserDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aDDomainJoinUser)
        aDDomainJoinUser = aDDomainJoinUserDecoded
        let aDDomainJoinPasswordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aDDomainJoinPassword)
        aDDomainJoinPassword = aDDomainJoinPasswordDecoded
    }
}

extension KerberosAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "KerberosAttributes(aDDomainJoinPassword: \(String(describing: aDDomainJoinPassword)), aDDomainJoinUser: \(String(describing: aDDomainJoinUser)), crossRealmTrustPrincipalPassword: \(String(describing: crossRealmTrustPrincipalPassword)), kdcAdminPassword: \(String(describing: kdcAdminPassword)), realm: \(String(describing: realm)))"}
}

/// <p>Attributes for Kerberos configuration when Kerberos authentication is enabled using a
///          security configuration. For more information see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-kerberos.html">Use Kerberos Authentication</a>
///          in the <i>Amazon EMR Management Guide</i>.</p>
public struct KerberosAttributes: Equatable {
    /// <p>The Active Directory password for <code>ADDomainJoinUser</code>.</p>
    public let aDDomainJoinPassword: String?
    /// <p>Required only when establishing a cross-realm trust with an Active Directory domain. A
    ///          user with sufficient privileges to join resources to the domain.</p>
    public let aDDomainJoinUser: String?
    /// <p>Required only when establishing a cross-realm trust with a KDC in a different realm. The
    ///          cross-realm principal password, which must be identical across realms.</p>
    public let crossRealmTrustPrincipalPassword: String?
    /// <p>The password used within the cluster for the kadmin service on the cluster-dedicated
    ///          KDC, which maintains Kerberos principals, password policies, and keytabs for the
    ///          cluster.</p>
    public let kdcAdminPassword: String?
    /// <p>The name of the Kerberos realm to which all nodes in a cluster belong. For example,
    ///             <code>EC2.INTERNAL</code>. </p>
    public let realm: String?

    public init (
        aDDomainJoinPassword: String? = nil,
        aDDomainJoinUser: String? = nil,
        crossRealmTrustPrincipalPassword: String? = nil,
        kdcAdminPassword: String? = nil,
        realm: String? = nil
    )
    {
        self.aDDomainJoinPassword = aDDomainJoinPassword
        self.aDDomainJoinUser = aDDomainJoinUser
        self.crossRealmTrustPrincipalPassword = crossRealmTrustPrincipalPassword
        self.kdcAdminPassword = kdcAdminPassword
        self.realm = realm
    }
}

extension KeyValue: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
    }
}

extension KeyValue: CustomDebugStringConvertible {
    public var debugDescription: String {
        "KeyValue(key: \(String(describing: key)), value: \(String(describing: value)))"}
}

/// <p>A key-value pair.</p>
public struct KeyValue: Equatable {
    /// <p>The unique identifier of a key-value pair.</p>
    public let key: String?
    /// <p>The value part of the identified key.</p>
    public let value: String?

    public init (
        key: String? = nil,
        value: String? = nil
    )
    {
        self.key = key
        self.value = value
    }
}

public struct ListBootstrapActionsInputBodyMiddleware: Middleware {
    public let id: String = "ListBootstrapActionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListBootstrapActionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListBootstrapActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListBootstrapActionsInput>
    public typealias MOutput = OperationOutput<ListBootstrapActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListBootstrapActionsOutputError>
}

extension ListBootstrapActionsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListBootstrapActionsInput(clusterId: \(String(describing: clusterId)), marker: \(String(describing: marker)))"}
}

extension ListBootstrapActionsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case marker = "Marker"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let marker = marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
    }
}

public struct ListBootstrapActionsInputHeadersMiddleware: Middleware {
    public let id: String = "ListBootstrapActionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListBootstrapActionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListBootstrapActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListBootstrapActionsInput>
    public typealias MOutput = OperationOutput<ListBootstrapActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListBootstrapActionsOutputError>
}

public struct ListBootstrapActionsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListBootstrapActionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListBootstrapActionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListBootstrapActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListBootstrapActionsInput>
    public typealias MOutput = OperationOutput<ListBootstrapActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListBootstrapActionsOutputError>
}

/// <p>This input determines which bootstrap actions to retrieve.</p>
public struct ListBootstrapActionsInput: Equatable {
    /// <p>The cluster identifier for the bootstrap actions to list.</p>
    public let clusterId: String?
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    public let marker: String?

    public init (
        clusterId: String? = nil,
        marker: String? = nil
    )
    {
        self.clusterId = clusterId
        self.marker = marker
    }
}

struct ListBootstrapActionsInputBody: Equatable {
    public let clusterId: String?
    public let marker: String?
}

extension ListBootstrapActionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListBootstrapActionsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListBootstrapActionsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListBootstrapActionsOutputError: Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListBootstrapActionsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListBootstrapActionsOutputResponse(bootstrapActions: \(String(describing: bootstrapActions)), marker: \(String(describing: marker)))"}
}

extension ListBootstrapActionsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListBootstrapActionsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.bootstrapActions = output.bootstrapActions
            self.marker = output.marker
        } else {
            self.bootstrapActions = nil
            self.marker = nil
        }
    }
}

/// <p>This output contains the bootstrap actions detail.</p>
public struct ListBootstrapActionsOutputResponse: Equatable {
    /// <p>The bootstrap actions associated with the cluster.</p>
    public let bootstrapActions: [Command]?
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    public let marker: String?

    public init (
        bootstrapActions: [Command]? = nil,
        marker: String? = nil
    )
    {
        self.bootstrapActions = bootstrapActions
        self.marker = marker
    }
}

struct ListBootstrapActionsOutputResponseBody: Equatable {
    public let bootstrapActions: [Command]?
    public let marker: String?
}

extension ListBootstrapActionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case bootstrapActions = "BootstrapActions"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bootstrapActionsContainer = try containerValues.decodeIfPresent([Command?].self, forKey: .bootstrapActions)
        var bootstrapActionsDecoded0:[Command]? = nil
        if let bootstrapActionsContainer = bootstrapActionsContainer {
            bootstrapActionsDecoded0 = [Command]()
            for structure0 in bootstrapActionsContainer {
                if let structure0 = structure0 {
                    bootstrapActionsDecoded0?.append(structure0)
                }
            }
        }
        bootstrapActions = bootstrapActionsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}

public struct ListClustersInputBodyMiddleware: Middleware {
    public let id: String = "ListClustersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListClustersInput>,
                  next: H) -> Swift.Result<OperationOutput<ListClustersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListClustersInput>
    public typealias MOutput = OperationOutput<ListClustersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListClustersOutputError>
}

extension ListClustersInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListClustersInput(clusterStates: \(String(describing: clusterStates)), createdAfter: \(String(describing: createdAfter)), createdBefore: \(String(describing: createdBefore)), marker: \(String(describing: marker)))"}
}

extension ListClustersInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterStates = "ClusterStates"
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case marker = "Marker"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterStates = clusterStates {
            var clusterStatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .clusterStates)
            for clusterstatelist0 in clusterStates {
                try clusterStatesContainer.encode(clusterstatelist0.rawValue)
            }
        }
        if let createdAfter = createdAfter {
            try encodeContainer.encode(createdAfter.timeIntervalSince1970, forKey: .createdAfter)
        }
        if let createdBefore = createdBefore {
            try encodeContainer.encode(createdBefore.timeIntervalSince1970, forKey: .createdBefore)
        }
        if let marker = marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
    }
}

public struct ListClustersInputHeadersMiddleware: Middleware {
    public let id: String = "ListClustersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListClustersInput>,
                  next: H) -> Swift.Result<OperationOutput<ListClustersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListClustersInput>
    public typealias MOutput = OperationOutput<ListClustersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListClustersOutputError>
}

public struct ListClustersInputQueryItemMiddleware: Middleware {
    public let id: String = "ListClustersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListClustersInput>,
                  next: H) -> Swift.Result<OperationOutput<ListClustersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListClustersInput>
    public typealias MOutput = OperationOutput<ListClustersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListClustersOutputError>
}

/// <p>This input determines how the ListClusters action filters the list of clusters that it
///          returns.</p>
public struct ListClustersInput: Equatable {
    /// <p>The cluster state filters to apply when listing clusters.</p>
    public let clusterStates: [ClusterState]?
    /// <p>The creation date and time beginning value filter for listing clusters.</p>
    public let createdAfter: Date?
    /// <p>The creation date and time end value filter for listing clusters.</p>
    public let createdBefore: Date?
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    public let marker: String?

    public init (
        clusterStates: [ClusterState]? = nil,
        createdAfter: Date? = nil,
        createdBefore: Date? = nil,
        marker: String? = nil
    )
    {
        self.clusterStates = clusterStates
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.marker = marker
    }
}

struct ListClustersInputBody: Equatable {
    public let createdAfter: Date?
    public let createdBefore: Date?
    public let clusterStates: [ClusterState]?
    public let marker: String?
}

extension ListClustersInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterStates = "ClusterStates"
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createdAfterDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAfter)
        createdAfter = createdAfterDecoded
        let createdBeforeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdBefore)
        createdBefore = createdBeforeDecoded
        let clusterStatesContainer = try containerValues.decodeIfPresent([ClusterState?].self, forKey: .clusterStates)
        var clusterStatesDecoded0:[ClusterState]? = nil
        if let clusterStatesContainer = clusterStatesContainer {
            clusterStatesDecoded0 = [ClusterState]()
            for string0 in clusterStatesContainer {
                if let string0 = string0 {
                    clusterStatesDecoded0?.append(string0)
                }
            }
        }
        clusterStates = clusterStatesDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListClustersOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListClustersOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListClustersOutputError: Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListClustersOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListClustersOutputResponse(clusters: \(String(describing: clusters)), marker: \(String(describing: marker)))"}
}

extension ListClustersOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListClustersOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.clusters = output.clusters
            self.marker = output.marker
        } else {
            self.clusters = nil
            self.marker = nil
        }
    }
}

/// <p>This contains a ClusterSummaryList with the cluster details; for example, the cluster
///          IDs, names, and status.</p>
public struct ListClustersOutputResponse: Equatable {
    /// <p>The list of clusters for the account based on the given filters.</p>
    public let clusters: [ClusterSummary]?
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    public let marker: String?

    public init (
        clusters: [ClusterSummary]? = nil,
        marker: String? = nil
    )
    {
        self.clusters = clusters
        self.marker = marker
    }
}

struct ListClustersOutputResponseBody: Equatable {
    public let clusters: [ClusterSummary]?
    public let marker: String?
}

extension ListClustersOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusters = "Clusters"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clustersContainer = try containerValues.decodeIfPresent([ClusterSummary?].self, forKey: .clusters)
        var clustersDecoded0:[ClusterSummary]? = nil
        if let clustersContainer = clustersContainer {
            clustersDecoded0 = [ClusterSummary]()
            for structure0 in clustersContainer {
                if let structure0 = structure0 {
                    clustersDecoded0?.append(structure0)
                }
            }
        }
        clusters = clustersDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}

public struct ListInstanceFleetsInputBodyMiddleware: Middleware {
    public let id: String = "ListInstanceFleetsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListInstanceFleetsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListInstanceFleetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListInstanceFleetsInput>
    public typealias MOutput = OperationOutput<ListInstanceFleetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListInstanceFleetsOutputError>
}

extension ListInstanceFleetsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListInstanceFleetsInput(clusterId: \(String(describing: clusterId)), marker: \(String(describing: marker)))"}
}

extension ListInstanceFleetsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case marker = "Marker"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let marker = marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
    }
}

public struct ListInstanceFleetsInputHeadersMiddleware: Middleware {
    public let id: String = "ListInstanceFleetsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListInstanceFleetsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListInstanceFleetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListInstanceFleetsInput>
    public typealias MOutput = OperationOutput<ListInstanceFleetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListInstanceFleetsOutputError>
}

public struct ListInstanceFleetsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListInstanceFleetsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListInstanceFleetsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListInstanceFleetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListInstanceFleetsInput>
    public typealias MOutput = OperationOutput<ListInstanceFleetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListInstanceFleetsOutputError>
}

public struct ListInstanceFleetsInput: Equatable {
    /// <p>The unique identifier of the cluster.</p>
    public let clusterId: String?
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    public let marker: String?

    public init (
        clusterId: String? = nil,
        marker: String? = nil
    )
    {
        self.clusterId = clusterId
        self.marker = marker
    }
}

struct ListInstanceFleetsInputBody: Equatable {
    public let clusterId: String?
    public let marker: String?
}

extension ListInstanceFleetsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListInstanceFleetsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInstanceFleetsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListInstanceFleetsOutputError: Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInstanceFleetsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListInstanceFleetsOutputResponse(instanceFleets: \(String(describing: instanceFleets)), marker: \(String(describing: marker)))"}
}

extension ListInstanceFleetsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListInstanceFleetsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.instanceFleets = output.instanceFleets
            self.marker = output.marker
        } else {
            self.instanceFleets = nil
            self.marker = nil
        }
    }
}

public struct ListInstanceFleetsOutputResponse: Equatable {
    /// <p>The list of instance fleets for the cluster and given filters.</p>
    public let instanceFleets: [InstanceFleet]?
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    public let marker: String?

    public init (
        instanceFleets: [InstanceFleet]? = nil,
        marker: String? = nil
    )
    {
        self.instanceFleets = instanceFleets
        self.marker = marker
    }
}

struct ListInstanceFleetsOutputResponseBody: Equatable {
    public let instanceFleets: [InstanceFleet]?
    public let marker: String?
}

extension ListInstanceFleetsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceFleets = "InstanceFleets"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceFleetsContainer = try containerValues.decodeIfPresent([InstanceFleet?].self, forKey: .instanceFleets)
        var instanceFleetsDecoded0:[InstanceFleet]? = nil
        if let instanceFleetsContainer = instanceFleetsContainer {
            instanceFleetsDecoded0 = [InstanceFleet]()
            for structure0 in instanceFleetsContainer {
                if let structure0 = structure0 {
                    instanceFleetsDecoded0?.append(structure0)
                }
            }
        }
        instanceFleets = instanceFleetsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}

public struct ListInstanceGroupsInputBodyMiddleware: Middleware {
    public let id: String = "ListInstanceGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListInstanceGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListInstanceGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListInstanceGroupsInput>
    public typealias MOutput = OperationOutput<ListInstanceGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListInstanceGroupsOutputError>
}

extension ListInstanceGroupsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListInstanceGroupsInput(clusterId: \(String(describing: clusterId)), marker: \(String(describing: marker)))"}
}

extension ListInstanceGroupsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case marker = "Marker"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let marker = marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
    }
}

public struct ListInstanceGroupsInputHeadersMiddleware: Middleware {
    public let id: String = "ListInstanceGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListInstanceGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListInstanceGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListInstanceGroupsInput>
    public typealias MOutput = OperationOutput<ListInstanceGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListInstanceGroupsOutputError>
}

public struct ListInstanceGroupsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListInstanceGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListInstanceGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListInstanceGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListInstanceGroupsInput>
    public typealias MOutput = OperationOutput<ListInstanceGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListInstanceGroupsOutputError>
}

/// <p>This input determines which instance groups to retrieve.</p>
public struct ListInstanceGroupsInput: Equatable {
    /// <p>The identifier of the cluster for which to list the instance groups.</p>
    public let clusterId: String?
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    public let marker: String?

    public init (
        clusterId: String? = nil,
        marker: String? = nil
    )
    {
        self.clusterId = clusterId
        self.marker = marker
    }
}

struct ListInstanceGroupsInputBody: Equatable {
    public let clusterId: String?
    public let marker: String?
}

extension ListInstanceGroupsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListInstanceGroupsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInstanceGroupsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListInstanceGroupsOutputError: Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInstanceGroupsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListInstanceGroupsOutputResponse(instanceGroups: \(String(describing: instanceGroups)), marker: \(String(describing: marker)))"}
}

extension ListInstanceGroupsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListInstanceGroupsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.instanceGroups = output.instanceGroups
            self.marker = output.marker
        } else {
            self.instanceGroups = nil
            self.marker = nil
        }
    }
}

/// <p>This input determines which instance groups to retrieve.</p>
public struct ListInstanceGroupsOutputResponse: Equatable {
    /// <p>The list of instance groups for the cluster and given filters.</p>
    public let instanceGroups: [InstanceGroup]?
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    public let marker: String?

    public init (
        instanceGroups: [InstanceGroup]? = nil,
        marker: String? = nil
    )
    {
        self.instanceGroups = instanceGroups
        self.marker = marker
    }
}

struct ListInstanceGroupsOutputResponseBody: Equatable {
    public let instanceGroups: [InstanceGroup]?
    public let marker: String?
}

extension ListInstanceGroupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceGroups = "InstanceGroups"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceGroupsContainer = try containerValues.decodeIfPresent([InstanceGroup?].self, forKey: .instanceGroups)
        var instanceGroupsDecoded0:[InstanceGroup]? = nil
        if let instanceGroupsContainer = instanceGroupsContainer {
            instanceGroupsDecoded0 = [InstanceGroup]()
            for structure0 in instanceGroupsContainer {
                if let structure0 = structure0 {
                    instanceGroupsDecoded0?.append(structure0)
                }
            }
        }
        instanceGroups = instanceGroupsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}

public struct ListInstancesInputBodyMiddleware: Middleware {
    public let id: String = "ListInstancesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListInstancesInput>
    public typealias MOutput = OperationOutput<ListInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListInstancesOutputError>
}

extension ListInstancesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListInstancesInput(clusterId: \(String(describing: clusterId)), instanceFleetId: \(String(describing: instanceFleetId)), instanceFleetType: \(String(describing: instanceFleetType)), instanceGroupId: \(String(describing: instanceGroupId)), instanceGroupTypes: \(String(describing: instanceGroupTypes)), instanceStates: \(String(describing: instanceStates)), marker: \(String(describing: marker)))"}
}

extension ListInstancesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case instanceFleetId = "InstanceFleetId"
        case instanceFleetType = "InstanceFleetType"
        case instanceGroupId = "InstanceGroupId"
        case instanceGroupTypes = "InstanceGroupTypes"
        case instanceStates = "InstanceStates"
        case marker = "Marker"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let instanceFleetId = instanceFleetId {
            try encodeContainer.encode(instanceFleetId, forKey: .instanceFleetId)
        }
        if let instanceFleetType = instanceFleetType {
            try encodeContainer.encode(instanceFleetType.rawValue, forKey: .instanceFleetType)
        }
        if let instanceGroupId = instanceGroupId {
            try encodeContainer.encode(instanceGroupId, forKey: .instanceGroupId)
        }
        if let instanceGroupTypes = instanceGroupTypes {
            var instanceGroupTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceGroupTypes)
            for instancegrouptypelist0 in instanceGroupTypes {
                try instanceGroupTypesContainer.encode(instancegrouptypelist0.rawValue)
            }
        }
        if let instanceStates = instanceStates {
            var instanceStatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceStates)
            for instancestatelist0 in instanceStates {
                try instanceStatesContainer.encode(instancestatelist0.rawValue)
            }
        }
        if let marker = marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
    }
}

public struct ListInstancesInputHeadersMiddleware: Middleware {
    public let id: String = "ListInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListInstancesInput>
    public typealias MOutput = OperationOutput<ListInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListInstancesOutputError>
}

public struct ListInstancesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListInstancesInput>
    public typealias MOutput = OperationOutput<ListInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListInstancesOutputError>
}

/// <p>This input determines which instances to list.</p>
public struct ListInstancesInput: Equatable {
    /// <p>The identifier of the cluster for which to list the instances.</p>
    public let clusterId: String?
    /// <p>The unique identifier of the instance fleet.</p>
    public let instanceFleetId: String?
    /// <p>The node type of the instance fleet. For example MASTER, CORE, or TASK.</p>
    public let instanceFleetType: InstanceFleetType?
    /// <p>The identifier of the instance group for which to list the instances.</p>
    public let instanceGroupId: String?
    /// <p>The type of instance group for which to list the instances.</p>
    public let instanceGroupTypes: [InstanceGroupType]?
    /// <p>A list of instance states that will filter the instances returned with this
    ///          request.</p>
    public let instanceStates: [InstanceState]?
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    public let marker: String?

    public init (
        clusterId: String? = nil,
        instanceFleetId: String? = nil,
        instanceFleetType: InstanceFleetType? = nil,
        instanceGroupId: String? = nil,
        instanceGroupTypes: [InstanceGroupType]? = nil,
        instanceStates: [InstanceState]? = nil,
        marker: String? = nil
    )
    {
        self.clusterId = clusterId
        self.instanceFleetId = instanceFleetId
        self.instanceFleetType = instanceFleetType
        self.instanceGroupId = instanceGroupId
        self.instanceGroupTypes = instanceGroupTypes
        self.instanceStates = instanceStates
        self.marker = marker
    }
}

struct ListInstancesInputBody: Equatable {
    public let clusterId: String?
    public let instanceGroupId: String?
    public let instanceGroupTypes: [InstanceGroupType]?
    public let instanceFleetId: String?
    public let instanceFleetType: InstanceFleetType?
    public let instanceStates: [InstanceState]?
    public let marker: String?
}

extension ListInstancesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case instanceFleetId = "InstanceFleetId"
        case instanceFleetType = "InstanceFleetType"
        case instanceGroupId = "InstanceGroupId"
        case instanceGroupTypes = "InstanceGroupTypes"
        case instanceStates = "InstanceStates"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let instanceGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceGroupId)
        instanceGroupId = instanceGroupIdDecoded
        let instanceGroupTypesContainer = try containerValues.decodeIfPresent([InstanceGroupType?].self, forKey: .instanceGroupTypes)
        var instanceGroupTypesDecoded0:[InstanceGroupType]? = nil
        if let instanceGroupTypesContainer = instanceGroupTypesContainer {
            instanceGroupTypesDecoded0 = [InstanceGroupType]()
            for string0 in instanceGroupTypesContainer {
                if let string0 = string0 {
                    instanceGroupTypesDecoded0?.append(string0)
                }
            }
        }
        instanceGroupTypes = instanceGroupTypesDecoded0
        let instanceFleetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceFleetId)
        instanceFleetId = instanceFleetIdDecoded
        let instanceFleetTypeDecoded = try containerValues.decodeIfPresent(InstanceFleetType.self, forKey: .instanceFleetType)
        instanceFleetType = instanceFleetTypeDecoded
        let instanceStatesContainer = try containerValues.decodeIfPresent([InstanceState?].self, forKey: .instanceStates)
        var instanceStatesDecoded0:[InstanceState]? = nil
        if let instanceStatesContainer = instanceStatesContainer {
            instanceStatesDecoded0 = [InstanceState]()
            for string0 in instanceStatesContainer {
                if let string0 = string0 {
                    instanceStatesDecoded0?.append(string0)
                }
            }
        }
        instanceStates = instanceStatesDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListInstancesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInstancesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListInstancesOutputError: Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInstancesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListInstancesOutputResponse(instances: \(String(describing: instances)), marker: \(String(describing: marker)))"}
}

extension ListInstancesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListInstancesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.instances = output.instances
            self.marker = output.marker
        } else {
            self.instances = nil
            self.marker = nil
        }
    }
}

/// <p>This output contains the list of instances.</p>
public struct ListInstancesOutputResponse: Equatable {
    /// <p>The list of instances for the cluster and given filters.</p>
    public let instances: [Instance]?
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    public let marker: String?

    public init (
        instances: [Instance]? = nil,
        marker: String? = nil
    )
    {
        self.instances = instances
        self.marker = marker
    }
}

struct ListInstancesOutputResponseBody: Equatable {
    public let instances: [Instance]?
    public let marker: String?
}

extension ListInstancesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instances = "Instances"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instancesContainer = try containerValues.decodeIfPresent([Instance?].self, forKey: .instances)
        var instancesDecoded0:[Instance]? = nil
        if let instancesContainer = instancesContainer {
            instancesDecoded0 = [Instance]()
            for structure0 in instancesContainer {
                if let structure0 = structure0 {
                    instancesDecoded0?.append(structure0)
                }
            }
        }
        instances = instancesDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}

public struct ListNotebookExecutionsInputBodyMiddleware: Middleware {
    public let id: String = "ListNotebookExecutionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListNotebookExecutionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListNotebookExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListNotebookExecutionsInput>
    public typealias MOutput = OperationOutput<ListNotebookExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListNotebookExecutionsOutputError>
}

extension ListNotebookExecutionsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListNotebookExecutionsInput(editorId: \(String(describing: editorId)), from: \(String(describing: from)), marker: \(String(describing: marker)), status: \(String(describing: status)), to: \(String(describing: to)))"}
}

extension ListNotebookExecutionsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case editorId = "EditorId"
        case from = "From"
        case marker = "Marker"
        case status = "Status"
        case to = "To"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let editorId = editorId {
            try encodeContainer.encode(editorId, forKey: .editorId)
        }
        if let from = from {
            try encodeContainer.encode(from.timeIntervalSince1970, forKey: .from)
        }
        if let marker = marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let to = to {
            try encodeContainer.encode(to.timeIntervalSince1970, forKey: .to)
        }
    }
}

public struct ListNotebookExecutionsInputHeadersMiddleware: Middleware {
    public let id: String = "ListNotebookExecutionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListNotebookExecutionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListNotebookExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListNotebookExecutionsInput>
    public typealias MOutput = OperationOutput<ListNotebookExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListNotebookExecutionsOutputError>
}

public struct ListNotebookExecutionsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListNotebookExecutionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListNotebookExecutionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListNotebookExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListNotebookExecutionsInput>
    public typealias MOutput = OperationOutput<ListNotebookExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListNotebookExecutionsOutputError>
}

public struct ListNotebookExecutionsInput: Equatable {
    /// <p>The unique ID of the editor associated with the notebook execution.</p>
    public let editorId: String?
    /// <p>The beginning of time range filter for listing notebook executions. The default is the
    ///          timestamp of 30 days ago.</p>
    public let from: Date?
    /// <p>The pagination token, returned by a previous <code>ListNotebookExecutions</code> call,
    ///          that indicates the start of the list for this <code>ListNotebookExecutions</code>
    ///          call.</p>
    public let marker: String?
    /// <p>The status filter for listing notebook executions.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>START_PENDING</code> indicates that the cluster has received the execution
    ///                request but execution has not begun.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>STARTING</code> indicates that the execution is starting on the
    ///                cluster.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RUNNING</code> indicates that the execution is being processed by the
    ///                cluster.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FINISHING</code> indicates that execution processing is in the final
    ///                stages.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FINISHED</code> indicates that the execution has completed without
    ///                error.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FAILING</code> indicates that the execution is failing and will not finish
    ///                successfully.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FAILED</code> indicates that the execution failed.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>STOP_PENDING</code> indicates that the cluster has received a
    ///                   <code>StopNotebookExecution</code> request and the stop is pending.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>STOPPING</code> indicates that the cluster is in the process of stopping the
    ///                execution as a result of a <code>StopNotebookExecution</code> request.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>STOPPED</code> indicates that the execution stopped because of a
    ///                   <code>StopNotebookExecution</code> request.</p>
    ///             </li>
    ///          </ul>
    public let status: NotebookExecutionStatus?
    /// <p>The end of time range filter for listing notebook executions. The default is the current
    ///          timestamp.</p>
    public let to: Date?

    public init (
        editorId: String? = nil,
        from: Date? = nil,
        marker: String? = nil,
        status: NotebookExecutionStatus? = nil,
        to: Date? = nil
    )
    {
        self.editorId = editorId
        self.from = from
        self.marker = marker
        self.status = status
        self.to = to
    }
}

struct ListNotebookExecutionsInputBody: Equatable {
    public let editorId: String?
    public let status: NotebookExecutionStatus?
    public let from: Date?
    public let to: Date?
    public let marker: String?
}

extension ListNotebookExecutionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case editorId = "EditorId"
        case from = "From"
        case marker = "Marker"
        case status = "Status"
        case to = "To"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let editorIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .editorId)
        editorId = editorIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(NotebookExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let fromDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .from)
        from = fromDecoded
        let toDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .to)
        to = toDecoded
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListNotebookExecutionsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListNotebookExecutionsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListNotebookExecutionsOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListNotebookExecutionsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListNotebookExecutionsOutputResponse(marker: \(String(describing: marker)), notebookExecutions: \(String(describing: notebookExecutions)))"}
}

extension ListNotebookExecutionsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListNotebookExecutionsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.marker = output.marker
            self.notebookExecutions = output.notebookExecutions
        } else {
            self.marker = nil
            self.notebookExecutions = nil
        }
    }
}

public struct ListNotebookExecutionsOutputResponse: Equatable {
    /// <p>A pagination token that a subsequent <code>ListNotebookExecutions</code> can use to
    ///          determine the next set of results to retrieve.</p>
    public let marker: String?
    /// <p>A list of notebook executions.</p>
    public let notebookExecutions: [NotebookExecutionSummary]?

    public init (
        marker: String? = nil,
        notebookExecutions: [NotebookExecutionSummary]? = nil
    )
    {
        self.marker = marker
        self.notebookExecutions = notebookExecutions
    }
}

struct ListNotebookExecutionsOutputResponseBody: Equatable {
    public let notebookExecutions: [NotebookExecutionSummary]?
    public let marker: String?
}

extension ListNotebookExecutionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case notebookExecutions = "NotebookExecutions"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookExecutionsContainer = try containerValues.decodeIfPresent([NotebookExecutionSummary?].self, forKey: .notebookExecutions)
        var notebookExecutionsDecoded0:[NotebookExecutionSummary]? = nil
        if let notebookExecutionsContainer = notebookExecutionsContainer {
            notebookExecutionsDecoded0 = [NotebookExecutionSummary]()
            for structure0 in notebookExecutionsContainer {
                if let structure0 = structure0 {
                    notebookExecutionsDecoded0?.append(structure0)
                }
            }
        }
        notebookExecutions = notebookExecutionsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}

public struct ListSecurityConfigurationsInputBodyMiddleware: Middleware {
    public let id: String = "ListSecurityConfigurationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListSecurityConfigurationsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListSecurityConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListSecurityConfigurationsInput>
    public typealias MOutput = OperationOutput<ListSecurityConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListSecurityConfigurationsOutputError>
}

extension ListSecurityConfigurationsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListSecurityConfigurationsInput(marker: \(String(describing: marker)))"}
}

extension ListSecurityConfigurationsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let marker = marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
    }
}

public struct ListSecurityConfigurationsInputHeadersMiddleware: Middleware {
    public let id: String = "ListSecurityConfigurationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListSecurityConfigurationsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListSecurityConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListSecurityConfigurationsInput>
    public typealias MOutput = OperationOutput<ListSecurityConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListSecurityConfigurationsOutputError>
}

public struct ListSecurityConfigurationsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListSecurityConfigurationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListSecurityConfigurationsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListSecurityConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListSecurityConfigurationsInput>
    public typealias MOutput = OperationOutput<ListSecurityConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListSecurityConfigurationsOutputError>
}

public struct ListSecurityConfigurationsInput: Equatable {
    /// <p>The pagination token that indicates the set of results to retrieve.</p>
    public let marker: String?

    public init (
        marker: String? = nil
    )
    {
        self.marker = marker
    }
}

struct ListSecurityConfigurationsInputBody: Equatable {
    public let marker: String?
}

extension ListSecurityConfigurationsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListSecurityConfigurationsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSecurityConfigurationsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListSecurityConfigurationsOutputError: Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSecurityConfigurationsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListSecurityConfigurationsOutputResponse(marker: \(String(describing: marker)), securityConfigurations: \(String(describing: securityConfigurations)))"}
}

extension ListSecurityConfigurationsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListSecurityConfigurationsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.marker = output.marker
            self.securityConfigurations = output.securityConfigurations
        } else {
            self.marker = nil
            self.securityConfigurations = nil
        }
    }
}

public struct ListSecurityConfigurationsOutputResponse: Equatable {
    /// <p>A pagination token that indicates the next set of results to retrieve. Include the
    ///          marker in the next ListSecurityConfiguration call to retrieve the next page of results, if
    ///          required.</p>
    public let marker: String?
    /// <p>The creation date and time, and name, of each security configuration.</p>
    public let securityConfigurations: [SecurityConfigurationSummary]?

    public init (
        marker: String? = nil,
        securityConfigurations: [SecurityConfigurationSummary]? = nil
    )
    {
        self.marker = marker
        self.securityConfigurations = securityConfigurations
    }
}

struct ListSecurityConfigurationsOutputResponseBody: Equatable {
    public let securityConfigurations: [SecurityConfigurationSummary]?
    public let marker: String?
}

extension ListSecurityConfigurationsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case securityConfigurations = "SecurityConfigurations"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityConfigurationsContainer = try containerValues.decodeIfPresent([SecurityConfigurationSummary?].self, forKey: .securityConfigurations)
        var securityConfigurationsDecoded0:[SecurityConfigurationSummary]? = nil
        if let securityConfigurationsContainer = securityConfigurationsContainer {
            securityConfigurationsDecoded0 = [SecurityConfigurationSummary]()
            for structure0 in securityConfigurationsContainer {
                if let structure0 = structure0 {
                    securityConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        securityConfigurations = securityConfigurationsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}

public struct ListStepsInputBodyMiddleware: Middleware {
    public let id: String = "ListStepsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListStepsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListStepsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListStepsInput>
    public typealias MOutput = OperationOutput<ListStepsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListStepsOutputError>
}

extension ListStepsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListStepsInput(clusterId: \(String(describing: clusterId)), marker: \(String(describing: marker)), stepIds: \(String(describing: stepIds)), stepStates: \(String(describing: stepStates)))"}
}

extension ListStepsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case marker = "Marker"
        case stepIds = "StepIds"
        case stepStates = "StepStates"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let marker = marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
        if let stepIds = stepIds {
            var stepIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stepIds)
            for xmlstringlist0 in stepIds {
                try stepIdsContainer.encode(xmlstringlist0)
            }
        }
        if let stepStates = stepStates {
            var stepStatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stepStates)
            for stepstatelist0 in stepStates {
                try stepStatesContainer.encode(stepstatelist0.rawValue)
            }
        }
    }
}

public struct ListStepsInputHeadersMiddleware: Middleware {
    public let id: String = "ListStepsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListStepsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListStepsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListStepsInput>
    public typealias MOutput = OperationOutput<ListStepsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListStepsOutputError>
}

public struct ListStepsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListStepsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListStepsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListStepsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListStepsInput>
    public typealias MOutput = OperationOutput<ListStepsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListStepsOutputError>
}

/// <p>This input determines which steps to list.</p>
public struct ListStepsInput: Equatable {
    /// <p>The identifier of the cluster for which to list the steps.</p>
    public let clusterId: String?
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    public let marker: String?
    /// <p>The filter to limit the step list based on the identifier of the steps. You can specify
    ///          a maximum of ten Step IDs. The character constraint applies to the overall length of the
    ///          array.</p>
    public let stepIds: [String]?
    /// <p>The filter to limit the step list based on certain states.</p>
    public let stepStates: [StepState]?

    public init (
        clusterId: String? = nil,
        marker: String? = nil,
        stepIds: [String]? = nil,
        stepStates: [StepState]? = nil
    )
    {
        self.clusterId = clusterId
        self.marker = marker
        self.stepIds = stepIds
        self.stepStates = stepStates
    }
}

struct ListStepsInputBody: Equatable {
    public let clusterId: String?
    public let stepStates: [StepState]?
    public let stepIds: [String]?
    public let marker: String?
}

extension ListStepsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case marker = "Marker"
        case stepIds = "StepIds"
        case stepStates = "StepStates"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let stepStatesContainer = try containerValues.decodeIfPresent([StepState?].self, forKey: .stepStates)
        var stepStatesDecoded0:[StepState]? = nil
        if let stepStatesContainer = stepStatesContainer {
            stepStatesDecoded0 = [StepState]()
            for string0 in stepStatesContainer {
                if let string0 = string0 {
                    stepStatesDecoded0?.append(string0)
                }
            }
        }
        stepStates = stepStatesDecoded0
        let stepIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .stepIds)
        var stepIdsDecoded0:[String]? = nil
        if let stepIdsContainer = stepIdsContainer {
            stepIdsDecoded0 = [String]()
            for string0 in stepIdsContainer {
                if let string0 = string0 {
                    stepIdsDecoded0?.append(string0)
                }
            }
        }
        stepIds = stepIdsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListStepsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListStepsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListStepsOutputError: Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListStepsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListStepsOutputResponse(marker: \(String(describing: marker)), steps: \(String(describing: steps)))"}
}

extension ListStepsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListStepsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.marker = output.marker
            self.steps = output.steps
        } else {
            self.marker = nil
            self.steps = nil
        }
    }
}

/// <p>This output contains the list of steps returned in reverse order. This means that the
///          last step is the first element in the list.</p>
public struct ListStepsOutputResponse: Equatable {
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    public let marker: String?
    /// <p>The filtered list of steps for the cluster.</p>
    public let steps: [StepSummary]?

    public init (
        marker: String? = nil,
        steps: [StepSummary]? = nil
    )
    {
        self.marker = marker
        self.steps = steps
    }
}

struct ListStepsOutputResponseBody: Equatable {
    public let steps: [StepSummary]?
    public let marker: String?
}

extension ListStepsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case steps = "Steps"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stepsContainer = try containerValues.decodeIfPresent([StepSummary?].self, forKey: .steps)
        var stepsDecoded0:[StepSummary]? = nil
        if let stepsContainer = stepsContainer {
            stepsDecoded0 = [StepSummary]()
            for structure0 in stepsContainer {
                if let structure0 = structure0 {
                    stepsDecoded0?.append(structure0)
                }
            }
        }
        steps = stepsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}

public struct ListStudioSessionMappingsInputBodyMiddleware: Middleware {
    public let id: String = "ListStudioSessionMappingsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListStudioSessionMappingsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListStudioSessionMappingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListStudioSessionMappingsInput>
    public typealias MOutput = OperationOutput<ListStudioSessionMappingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListStudioSessionMappingsOutputError>
}

extension ListStudioSessionMappingsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListStudioSessionMappingsInput(identityType: \(String(describing: identityType)), marker: \(String(describing: marker)), studioId: \(String(describing: studioId)))"}
}

extension ListStudioSessionMappingsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case identityType = "IdentityType"
        case marker = "Marker"
        case studioId = "StudioId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identityType = identityType {
            try encodeContainer.encode(identityType.rawValue, forKey: .identityType)
        }
        if let marker = marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
        if let studioId = studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
    }
}

public struct ListStudioSessionMappingsInputHeadersMiddleware: Middleware {
    public let id: String = "ListStudioSessionMappingsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListStudioSessionMappingsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListStudioSessionMappingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListStudioSessionMappingsInput>
    public typealias MOutput = OperationOutput<ListStudioSessionMappingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListStudioSessionMappingsOutputError>
}

public struct ListStudioSessionMappingsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListStudioSessionMappingsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListStudioSessionMappingsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListStudioSessionMappingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListStudioSessionMappingsInput>
    public typealias MOutput = OperationOutput<ListStudioSessionMappingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListStudioSessionMappingsOutputError>
}

public struct ListStudioSessionMappingsInput: Equatable {
    /// <p>Specifies whether to return session mappings for users or groups. If not specified, the
    ///          results include session mapping details for both users and groups.</p>
    public let identityType: IdentityType?
    /// <p>The pagination token that indicates the set of results to retrieve.</p>
    public let marker: String?
    /// <p>The ID of the Amazon EMR Studio.</p>
    public let studioId: String?

    public init (
        identityType: IdentityType? = nil,
        marker: String? = nil,
        studioId: String? = nil
    )
    {
        self.identityType = identityType
        self.marker = marker
        self.studioId = studioId
    }
}

struct ListStudioSessionMappingsInputBody: Equatable {
    public let studioId: String?
    public let identityType: IdentityType?
    public let marker: String?
}

extension ListStudioSessionMappingsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case identityType = "IdentityType"
        case marker = "Marker"
        case studioId = "StudioId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .studioId)
        studioId = studioIdDecoded
        let identityTypeDecoded = try containerValues.decodeIfPresent(IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListStudioSessionMappingsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListStudioSessionMappingsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListStudioSessionMappingsOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListStudioSessionMappingsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListStudioSessionMappingsOutputResponse(marker: \(String(describing: marker)), sessionMappings: \(String(describing: sessionMappings)))"}
}

extension ListStudioSessionMappingsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListStudioSessionMappingsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.marker = output.marker
            self.sessionMappings = output.sessionMappings
        } else {
            self.marker = nil
            self.sessionMappings = nil
        }
    }
}

public struct ListStudioSessionMappingsOutputResponse: Equatable {
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    public let marker: String?
    /// <p>A list of session mapping summary objects. Each object includes session mapping details
    ///          such as creation time, identity type (user or group), and Amazon EMR Studio ID.</p>
    public let sessionMappings: [SessionMappingSummary]?

    public init (
        marker: String? = nil,
        sessionMappings: [SessionMappingSummary]? = nil
    )
    {
        self.marker = marker
        self.sessionMappings = sessionMappings
    }
}

struct ListStudioSessionMappingsOutputResponseBody: Equatable {
    public let sessionMappings: [SessionMappingSummary]?
    public let marker: String?
}

extension ListStudioSessionMappingsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case sessionMappings = "SessionMappings"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sessionMappingsContainer = try containerValues.decodeIfPresent([SessionMappingSummary?].self, forKey: .sessionMappings)
        var sessionMappingsDecoded0:[SessionMappingSummary]? = nil
        if let sessionMappingsContainer = sessionMappingsContainer {
            sessionMappingsDecoded0 = [SessionMappingSummary]()
            for structure0 in sessionMappingsContainer {
                if let structure0 = structure0 {
                    sessionMappingsDecoded0?.append(structure0)
                }
            }
        }
        sessionMappings = sessionMappingsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}

public struct ListStudiosInputBodyMiddleware: Middleware {
    public let id: String = "ListStudiosInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListStudiosInput>,
                  next: H) -> Swift.Result<OperationOutput<ListStudiosOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListStudiosInput>
    public typealias MOutput = OperationOutput<ListStudiosOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListStudiosOutputError>
}

extension ListStudiosInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListStudiosInput(marker: \(String(describing: marker)))"}
}

extension ListStudiosInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let marker = marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
    }
}

public struct ListStudiosInputHeadersMiddleware: Middleware {
    public let id: String = "ListStudiosInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListStudiosInput>,
                  next: H) -> Swift.Result<OperationOutput<ListStudiosOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListStudiosInput>
    public typealias MOutput = OperationOutput<ListStudiosOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListStudiosOutputError>
}

public struct ListStudiosInputQueryItemMiddleware: Middleware {
    public let id: String = "ListStudiosInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListStudiosInput>,
                  next: H) -> Swift.Result<OperationOutput<ListStudiosOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListStudiosInput>
    public typealias MOutput = OperationOutput<ListStudiosOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListStudiosOutputError>
}

public struct ListStudiosInput: Equatable {
    /// <p>The pagination token that indicates the set of results to retrieve.</p>
    public let marker: String?

    public init (
        marker: String? = nil
    )
    {
        self.marker = marker
    }
}

struct ListStudiosInputBody: Equatable {
    public let marker: String?
}

extension ListStudiosInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListStudiosOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListStudiosOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListStudiosOutputError: Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListStudiosOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListStudiosOutputResponse(marker: \(String(describing: marker)), studios: \(String(describing: studios)))"}
}

extension ListStudiosOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListStudiosOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.marker = output.marker
            self.studios = output.studios
        } else {
            self.marker = nil
            self.studios = nil
        }
    }
}

public struct ListStudiosOutputResponse: Equatable {
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    public let marker: String?
    /// <p>The list of Studio summary objects.</p>
    public let studios: [StudioSummary]?

    public init (
        marker: String? = nil,
        studios: [StudioSummary]? = nil
    )
    {
        self.marker = marker
        self.studios = studios
    }
}

struct ListStudiosOutputResponseBody: Equatable {
    public let studios: [StudioSummary]?
    public let marker: String?
}

extension ListStudiosOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case studios = "Studios"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studiosContainer = try containerValues.decodeIfPresent([StudioSummary?].self, forKey: .studios)
        var studiosDecoded0:[StudioSummary]? = nil
        if let studiosContainer = studiosContainer {
            studiosDecoded0 = [StudioSummary]()
            for structure0 in studiosContainer {
                if let structure0 = structure0 {
                    studiosDecoded0?.append(structure0)
                }
            }
        }
        studios = studiosDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ManagedScalingPolicy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case computeLimits = "ComputeLimits"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeLimits = computeLimits {
            try encodeContainer.encode(computeLimits, forKey: .computeLimits)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeLimitsDecoded = try containerValues.decodeIfPresent(ComputeLimits.self, forKey: .computeLimits)
        computeLimits = computeLimitsDecoded
    }
}

extension ManagedScalingPolicy: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ManagedScalingPolicy(computeLimits: \(String(describing: computeLimits)))"}
}

/// <p> Managed scaling policy for an Amazon EMR cluster. The policy specifies the limits for
///          resources that can be added or terminated from a cluster. The policy only applies to the
///          core and task nodes. The master node cannot be scaled after initial configuration. </p>
public struct ManagedScalingPolicy: Equatable {
    /// <p>The EC2 unit limits for a managed scaling policy. The managed scaling activity of a
    ///          cluster is not allowed to go above or below these limits. The limit only applies to the
    ///          core and task nodes. The master node cannot be scaled after initial configuration.</p>
    public let computeLimits: ComputeLimits?

    public init (
        computeLimits: ComputeLimits? = nil
    )
    {
        self.computeLimits = computeLimits
    }
}

public enum MarketType {
    case onDemand
    case spot
    case sdkUnknown(String)
}

extension MarketType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MarketType] {
        return [
            .onDemand,
            .spot,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .onDemand: return "ON_DEMAND"
        case .spot: return "SPOT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MarketType(rawValue: rawValue) ?? MarketType.sdkUnknown(rawValue)
    }
}

extension MetricDimension: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
    }
}

extension MetricDimension: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MetricDimension(key: \(String(describing: key)), value: \(String(describing: value)))"}
}

/// <p>A CloudWatch dimension, which is specified using a <code>Key</code> (known as a
///             <code>Name</code> in CloudWatch), <code>Value</code> pair. By default, Amazon EMR uses
///          one dimension whose <code>Key</code> is <code>JobFlowID</code> and <code>Value</code> is a
///          variable representing the cluster ID, which is <code>${emr.clusterId}</code>. This enables
///          the rule to bootstrap when the cluster ID becomes available.</p>
public struct MetricDimension: Equatable {
    /// <p>The dimension name.</p>
    public let key: String?
    /// <p>The dimension value.</p>
    public let value: String?

    public init (
        key: String? = nil,
        value: String? = nil
    )
    {
        self.key = key
        self.value = value
    }
}

public struct ModifyClusterInputBodyMiddleware: Middleware {
    public let id: String = "ModifyClusterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyClusterInput>
    public typealias MOutput = OperationOutput<ModifyClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyClusterOutputError>
}

extension ModifyClusterInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ModifyClusterInput(clusterId: \(String(describing: clusterId)), stepConcurrencyLevel: \(String(describing: stepConcurrencyLevel)))"}
}

extension ModifyClusterInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case stepConcurrencyLevel = "StepConcurrencyLevel"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let stepConcurrencyLevel = stepConcurrencyLevel {
            try encodeContainer.encode(stepConcurrencyLevel, forKey: .stepConcurrencyLevel)
        }
    }
}

public struct ModifyClusterInputHeadersMiddleware: Middleware {
    public let id: String = "ModifyClusterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyClusterInput>
    public typealias MOutput = OperationOutput<ModifyClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyClusterOutputError>
}

public struct ModifyClusterInputQueryItemMiddleware: Middleware {
    public let id: String = "ModifyClusterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyClusterInput>
    public typealias MOutput = OperationOutput<ModifyClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyClusterOutputError>
}

public struct ModifyClusterInput: Equatable {
    /// <p>The unique identifier of the cluster.</p>
    public let clusterId: String?
    /// <p>The number of steps that can be executed concurrently. You can specify a minimum of 1 step and a maximum of 256
    ///          steps. </p>
    public let stepConcurrencyLevel: Int?

    public init (
        clusterId: String? = nil,
        stepConcurrencyLevel: Int? = nil
    )
    {
        self.clusterId = clusterId
        self.stepConcurrencyLevel = stepConcurrencyLevel
    }
}

struct ModifyClusterInputBody: Equatable {
    public let clusterId: String?
    public let stepConcurrencyLevel: Int?
}

extension ModifyClusterInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case stepConcurrencyLevel = "StepConcurrencyLevel"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let stepConcurrencyLevelDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .stepConcurrencyLevel)
        stepConcurrencyLevel = stepConcurrencyLevelDecoded
    }
}

extension ModifyClusterOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ModifyClusterOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ModifyClusterOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ModifyClusterOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ModifyClusterOutputResponse(stepConcurrencyLevel: \(String(describing: stepConcurrencyLevel)))"}
}

extension ModifyClusterOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ModifyClusterOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.stepConcurrencyLevel = output.stepConcurrencyLevel
        } else {
            self.stepConcurrencyLevel = nil
        }
    }
}

public struct ModifyClusterOutputResponse: Equatable {
    /// <p>The number of steps that can be executed concurrently.</p>
    public let stepConcurrencyLevel: Int?

    public init (
        stepConcurrencyLevel: Int? = nil
    )
    {
        self.stepConcurrencyLevel = stepConcurrencyLevel
    }
}

struct ModifyClusterOutputResponseBody: Equatable {
    public let stepConcurrencyLevel: Int?
}

extension ModifyClusterOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case stepConcurrencyLevel = "StepConcurrencyLevel"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stepConcurrencyLevelDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .stepConcurrencyLevel)
        stepConcurrencyLevel = stepConcurrencyLevelDecoded
    }
}

public struct ModifyInstanceFleetInputBodyMiddleware: Middleware {
    public let id: String = "ModifyInstanceFleetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyInstanceFleetInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyInstanceFleetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyInstanceFleetInput>
    public typealias MOutput = OperationOutput<ModifyInstanceFleetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyInstanceFleetOutputError>
}

extension ModifyInstanceFleetInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ModifyInstanceFleetInput(clusterId: \(String(describing: clusterId)), instanceFleet: \(String(describing: instanceFleet)))"}
}

extension ModifyInstanceFleetInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case instanceFleet = "InstanceFleet"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let instanceFleet = instanceFleet {
            try encodeContainer.encode(instanceFleet, forKey: .instanceFleet)
        }
    }
}

public struct ModifyInstanceFleetInputHeadersMiddleware: Middleware {
    public let id: String = "ModifyInstanceFleetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyInstanceFleetInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyInstanceFleetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyInstanceFleetInput>
    public typealias MOutput = OperationOutput<ModifyInstanceFleetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyInstanceFleetOutputError>
}

public struct ModifyInstanceFleetInputQueryItemMiddleware: Middleware {
    public let id: String = "ModifyInstanceFleetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyInstanceFleetInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyInstanceFleetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyInstanceFleetInput>
    public typealias MOutput = OperationOutput<ModifyInstanceFleetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyInstanceFleetOutputError>
}

public struct ModifyInstanceFleetInput: Equatable {
    /// <p>The unique identifier of the cluster.</p>
    public let clusterId: String?
    /// <p>The unique identifier of the instance fleet.</p>
    public let instanceFleet: InstanceFleetModifyConfig?

    public init (
        clusterId: String? = nil,
        instanceFleet: InstanceFleetModifyConfig? = nil
    )
    {
        self.clusterId = clusterId
        self.instanceFleet = instanceFleet
    }
}

struct ModifyInstanceFleetInputBody: Equatable {
    public let clusterId: String?
    public let instanceFleet: InstanceFleetModifyConfig?
}

extension ModifyInstanceFleetInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case instanceFleet = "InstanceFleet"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let instanceFleetDecoded = try containerValues.decodeIfPresent(InstanceFleetModifyConfig.self, forKey: .instanceFleet)
        instanceFleet = instanceFleetDecoded
    }
}

extension ModifyInstanceFleetOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ModifyInstanceFleetOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ModifyInstanceFleetOutputError: Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ModifyInstanceFleetOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ModifyInstanceFleetOutputResponse()"}
}

extension ModifyInstanceFleetOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct ModifyInstanceFleetOutputResponse: Equatable {

    public init() {}
}

struct ModifyInstanceFleetOutputResponseBody: Equatable {
}

extension ModifyInstanceFleetOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct ModifyInstanceGroupsInputBodyMiddleware: Middleware {
    public let id: String = "ModifyInstanceGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyInstanceGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyInstanceGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyInstanceGroupsInput>
    public typealias MOutput = OperationOutput<ModifyInstanceGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyInstanceGroupsOutputError>
}

extension ModifyInstanceGroupsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ModifyInstanceGroupsInput(clusterId: \(String(describing: clusterId)), instanceGroups: \(String(describing: instanceGroups)))"}
}

extension ModifyInstanceGroupsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case instanceGroups = "InstanceGroups"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let instanceGroups = instanceGroups {
            var instanceGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceGroups)
            for instancegroupmodifyconfiglist0 in instanceGroups {
                try instanceGroupsContainer.encode(instancegroupmodifyconfiglist0)
            }
        }
    }
}

public struct ModifyInstanceGroupsInputHeadersMiddleware: Middleware {
    public let id: String = "ModifyInstanceGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyInstanceGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyInstanceGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyInstanceGroupsInput>
    public typealias MOutput = OperationOutput<ModifyInstanceGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyInstanceGroupsOutputError>
}

public struct ModifyInstanceGroupsInputQueryItemMiddleware: Middleware {
    public let id: String = "ModifyInstanceGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyInstanceGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyInstanceGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyInstanceGroupsInput>
    public typealias MOutput = OperationOutput<ModifyInstanceGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyInstanceGroupsOutputError>
}

/// <p>Change the size of some instance groups.</p>
public struct ModifyInstanceGroupsInput: Equatable {
    /// <p>The ID of the cluster to which the instance group belongs.</p>
    public let clusterId: String?
    /// <p>Instance groups to change.</p>
    public let instanceGroups: [InstanceGroupModifyConfig]?

    public init (
        clusterId: String? = nil,
        instanceGroups: [InstanceGroupModifyConfig]? = nil
    )
    {
        self.clusterId = clusterId
        self.instanceGroups = instanceGroups
    }
}

struct ModifyInstanceGroupsInputBody: Equatable {
    public let clusterId: String?
    public let instanceGroups: [InstanceGroupModifyConfig]?
}

extension ModifyInstanceGroupsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case instanceGroups = "InstanceGroups"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let instanceGroupsContainer = try containerValues.decodeIfPresent([InstanceGroupModifyConfig?].self, forKey: .instanceGroups)
        var instanceGroupsDecoded0:[InstanceGroupModifyConfig]? = nil
        if let instanceGroupsContainer = instanceGroupsContainer {
            instanceGroupsDecoded0 = [InstanceGroupModifyConfig]()
            for structure0 in instanceGroupsContainer {
                if let structure0 = structure0 {
                    instanceGroupsDecoded0?.append(structure0)
                }
            }
        }
        instanceGroups = instanceGroupsDecoded0
    }
}

extension ModifyInstanceGroupsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ModifyInstanceGroupsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ModifyInstanceGroupsOutputError: Equatable {
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension ModifyInstanceGroupsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ModifyInstanceGroupsOutputResponse()"}
}

extension ModifyInstanceGroupsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct ModifyInstanceGroupsOutputResponse: Equatable {

    public init() {}
}

struct ModifyInstanceGroupsOutputResponseBody: Equatable {
}

extension ModifyInstanceGroupsOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension NotebookExecution: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case editorId = "EditorId"
        case endTime = "EndTime"
        case executionEngine = "ExecutionEngine"
        case lastStateChangeReason = "LastStateChangeReason"
        case notebookExecutionId = "NotebookExecutionId"
        case notebookExecutionName = "NotebookExecutionName"
        case notebookInstanceSecurityGroupId = "NotebookInstanceSecurityGroupId"
        case notebookParams = "NotebookParams"
        case outputNotebookURI = "OutputNotebookURI"
        case startTime = "StartTime"
        case status = "Status"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let editorId = editorId {
            try encodeContainer.encode(editorId, forKey: .editorId)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let executionEngine = executionEngine {
            try encodeContainer.encode(executionEngine, forKey: .executionEngine)
        }
        if let lastStateChangeReason = lastStateChangeReason {
            try encodeContainer.encode(lastStateChangeReason, forKey: .lastStateChangeReason)
        }
        if let notebookExecutionId = notebookExecutionId {
            try encodeContainer.encode(notebookExecutionId, forKey: .notebookExecutionId)
        }
        if let notebookExecutionName = notebookExecutionName {
            try encodeContainer.encode(notebookExecutionName, forKey: .notebookExecutionName)
        }
        if let notebookInstanceSecurityGroupId = notebookInstanceSecurityGroupId {
            try encodeContainer.encode(notebookInstanceSecurityGroupId, forKey: .notebookInstanceSecurityGroupId)
        }
        if let notebookParams = notebookParams {
            try encodeContainer.encode(notebookParams, forKey: .notebookParams)
        }
        if let outputNotebookURI = outputNotebookURI {
            try encodeContainer.encode(outputNotebookURI, forKey: .outputNotebookURI)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookExecutionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookExecutionId)
        notebookExecutionId = notebookExecutionIdDecoded
        let editorIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .editorId)
        editorId = editorIdDecoded
        let executionEngineDecoded = try containerValues.decodeIfPresent(ExecutionEngineConfig.self, forKey: .executionEngine)
        executionEngine = executionEngineDecoded
        let notebookExecutionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookExecutionName)
        notebookExecutionName = notebookExecutionNameDecoded
        let notebookParamsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookParams)
        notebookParams = notebookParamsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(NotebookExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let outputNotebookURIDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outputNotebookURI)
        outputNotebookURI = outputNotebookURIDecoded
        let lastStateChangeReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastStateChangeReason)
        lastStateChangeReason = lastStateChangeReasonDecoded
        let notebookInstanceSecurityGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookInstanceSecurityGroupId)
        notebookInstanceSecurityGroupId = notebookInstanceSecurityGroupIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension NotebookExecution: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NotebookExecution(arn: \(String(describing: arn)), editorId: \(String(describing: editorId)), endTime: \(String(describing: endTime)), executionEngine: \(String(describing: executionEngine)), lastStateChangeReason: \(String(describing: lastStateChangeReason)), notebookExecutionId: \(String(describing: notebookExecutionId)), notebookExecutionName: \(String(describing: notebookExecutionName)), notebookInstanceSecurityGroupId: \(String(describing: notebookInstanceSecurityGroupId)), notebookParams: \(String(describing: notebookParams)), outputNotebookURI: \(String(describing: outputNotebookURI)), startTime: \(String(describing: startTime)), status: \(String(describing: status)), tags: \(String(describing: tags)))"}
}

/// <p>A notebook execution. An execution is a specific instance that an EMR Notebook is run
///          using the <code>StartNotebookExecution</code> action.</p>
public struct NotebookExecution: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the notebook execution.</p>
    public let arn: String?
    /// <p>The unique identifier of the EMR Notebook that is used for the notebook
    ///          execution.</p>
    public let editorId: String?
    /// <p>The timestamp when notebook execution ended.</p>
    public let endTime: Date?
    /// <p>The execution engine, such as an EMR cluster, used to run the EMR notebook and perform
    ///          the notebook execution.</p>
    public let executionEngine: ExecutionEngineConfig?
    /// <p>The reason for the latest status change of the notebook execution.</p>
    public let lastStateChangeReason: String?
    /// <p>The unique identifier of a notebook execution.</p>
    public let notebookExecutionId: String?
    /// <p>A name for the notebook execution.</p>
    public let notebookExecutionName: String?
    /// <p>The unique identifier of the EC2 security group associated with the EMR Notebook
    ///          instance. For more information see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-managed-notebooks-security-groups.html">Specifying
    ///             EC2 Security Groups for EMR Notebooks</a> in the <i>EMR Management
    ///             Guide</i>.</p>
    public let notebookInstanceSecurityGroupId: String?
    /// <p>Input parameters in JSON format passed to the EMR Notebook at runtime for
    ///          execution.</p>
    public let notebookParams: String?
    /// <p>The location of the notebook execution's output file in Amazon S3.</p>
    public let outputNotebookURI: String?
    /// <p>The timestamp when notebook execution started.</p>
    public let startTime: Date?
    /// <p>The status of the notebook execution.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>START_PENDING</code> indicates that the cluster has received the execution
    ///                request but execution has not begun.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>STARTING</code> indicates that the execution is starting on the
    ///                cluster.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RUNNING</code> indicates that the execution is being processed by the
    ///                cluster.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FINISHING</code> indicates that execution processing is in the final
    ///                stages.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FINISHED</code> indicates that the execution has completed without
    ///                error.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FAILING</code> indicates that the execution is failing and will not finish
    ///                successfully.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FAILED</code> indicates that the execution failed.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>STOP_PENDING</code> indicates that the cluster has received a
    ///                   <code>StopNotebookExecution</code> request and the stop is pending.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>STOPPING</code> indicates that the cluster is in the process of stopping the
    ///                execution as a result of a <code>StopNotebookExecution</code> request.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>STOPPED</code> indicates that the execution stopped because of a
    ///                   <code>StopNotebookExecution</code> request.</p>
    ///             </li>
    ///          </ul>
    public let status: NotebookExecutionStatus?
    /// <p>A list of tags associated with a notebook execution. Tags are user-defined key-value
    ///          pairs that consist of a required key string with a maximum of 128 characters and an
    ///          optional value string with a maximum of 256 characters.</p>
    public let tags: [Tag]?

    public init (
        arn: String? = nil,
        editorId: String? = nil,
        endTime: Date? = nil,
        executionEngine: ExecutionEngineConfig? = nil,
        lastStateChangeReason: String? = nil,
        notebookExecutionId: String? = nil,
        notebookExecutionName: String? = nil,
        notebookInstanceSecurityGroupId: String? = nil,
        notebookParams: String? = nil,
        outputNotebookURI: String? = nil,
        startTime: Date? = nil,
        status: NotebookExecutionStatus? = nil,
        tags: [Tag]? = nil
    )
    {
        self.arn = arn
        self.editorId = editorId
        self.endTime = endTime
        self.executionEngine = executionEngine
        self.lastStateChangeReason = lastStateChangeReason
        self.notebookExecutionId = notebookExecutionId
        self.notebookExecutionName = notebookExecutionName
        self.notebookInstanceSecurityGroupId = notebookInstanceSecurityGroupId
        self.notebookParams = notebookParams
        self.outputNotebookURI = outputNotebookURI
        self.startTime = startTime
        self.status = status
        self.tags = tags
    }
}

public enum NotebookExecutionStatus {
    case failed
    case failing
    case finished
    case finishing
    case running
    case starting
    case startPending
    case stopped
    case stopping
    case stopPending
    case sdkUnknown(String)
}

extension NotebookExecutionStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [NotebookExecutionStatus] {
        return [
            .failed,
            .failing,
            .finished,
            .finishing,
            .running,
            .starting,
            .startPending,
            .stopped,
            .stopping,
            .stopPending,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .failed: return "FAILED"
        case .failing: return "FAILING"
        case .finished: return "FINISHED"
        case .finishing: return "FINISHING"
        case .running: return "RUNNING"
        case .starting: return "STARTING"
        case .startPending: return "START_PENDING"
        case .stopped: return "STOPPED"
        case .stopping: return "STOPPING"
        case .stopPending: return "STOP_PENDING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = NotebookExecutionStatus(rawValue: rawValue) ?? NotebookExecutionStatus.sdkUnknown(rawValue)
    }
}

extension NotebookExecutionSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case editorId = "EditorId"
        case endTime = "EndTime"
        case notebookExecutionId = "NotebookExecutionId"
        case notebookExecutionName = "NotebookExecutionName"
        case startTime = "StartTime"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let editorId = editorId {
            try encodeContainer.encode(editorId, forKey: .editorId)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let notebookExecutionId = notebookExecutionId {
            try encodeContainer.encode(notebookExecutionId, forKey: .notebookExecutionId)
        }
        if let notebookExecutionName = notebookExecutionName {
            try encodeContainer.encode(notebookExecutionName, forKey: .notebookExecutionName)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookExecutionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookExecutionId)
        notebookExecutionId = notebookExecutionIdDecoded
        let editorIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .editorId)
        editorId = editorIdDecoded
        let notebookExecutionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookExecutionName)
        notebookExecutionName = notebookExecutionNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(NotebookExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
    }
}

extension NotebookExecutionSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NotebookExecutionSummary(editorId: \(String(describing: editorId)), endTime: \(String(describing: endTime)), notebookExecutionId: \(String(describing: notebookExecutionId)), notebookExecutionName: \(String(describing: notebookExecutionName)), startTime: \(String(describing: startTime)), status: \(String(describing: status)))"}
}

/// <p></p>
public struct NotebookExecutionSummary: Equatable {
    /// <p>The unique identifier of the editor associated with the notebook execution.</p>
    public let editorId: String?
    /// <p>The timestamp when notebook execution started.</p>
    public let endTime: Date?
    /// <p>The unique identifier of the notebook execution.</p>
    public let notebookExecutionId: String?
    /// <p>The name of the notebook execution.</p>
    public let notebookExecutionName: String?
    /// <p>The timestamp when notebook execution started.</p>
    public let startTime: Date?
    /// <p>The status of the notebook execution.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>START_PENDING</code> indicates that the cluster has received the execution
    ///                request but execution has not begun.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>STARTING</code> indicates that the execution is starting on the
    ///                cluster.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>RUNNING</code> indicates that the execution is being processed by the
    ///                cluster.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FINISHING</code> indicates that execution processing is in the final
    ///                stages.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FINISHED</code> indicates that the execution has completed without
    ///                error.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FAILING</code> indicates that the execution is failing and will not finish
    ///                successfully.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FAILED</code> indicates that the execution failed.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>STOP_PENDING</code> indicates that the cluster has received a
    ///                   <code>StopNotebookExecution</code> request and the stop is pending.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>STOPPING</code> indicates that the cluster is in the process of stopping the
    ///                execution as a result of a <code>StopNotebookExecution</code> request.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>STOPPED</code> indicates that the execution stopped because of a
    ///                   <code>StopNotebookExecution</code> request.</p>
    ///             </li>
    ///          </ul>
    public let status: NotebookExecutionStatus?

    public init (
        editorId: String? = nil,
        endTime: Date? = nil,
        notebookExecutionId: String? = nil,
        notebookExecutionName: String? = nil,
        startTime: Date? = nil,
        status: NotebookExecutionStatus? = nil
    )
    {
        self.editorId = editorId
        self.endTime = endTime
        self.notebookExecutionId = notebookExecutionId
        self.notebookExecutionName = notebookExecutionName
        self.startTime = startTime
        self.status = status
    }
}

extension OnDemandCapacityReservationOptions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case capacityReservationPreference = "CapacityReservationPreference"
        case capacityReservationResourceGroupArn = "CapacityReservationResourceGroupArn"
        case usageStrategy = "UsageStrategy"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityReservationPreference = capacityReservationPreference {
            try encodeContainer.encode(capacityReservationPreference.rawValue, forKey: .capacityReservationPreference)
        }
        if let capacityReservationResourceGroupArn = capacityReservationResourceGroupArn {
            try encodeContainer.encode(capacityReservationResourceGroupArn, forKey: .capacityReservationResourceGroupArn)
        }
        if let usageStrategy = usageStrategy {
            try encodeContainer.encode(usageStrategy.rawValue, forKey: .usageStrategy)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usageStrategyDecoded = try containerValues.decodeIfPresent(OnDemandCapacityReservationUsageStrategy.self, forKey: .usageStrategy)
        usageStrategy = usageStrategyDecoded
        let capacityReservationPreferenceDecoded = try containerValues.decodeIfPresent(OnDemandCapacityReservationPreference.self, forKey: .capacityReservationPreference)
        capacityReservationPreference = capacityReservationPreferenceDecoded
        let capacityReservationResourceGroupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .capacityReservationResourceGroupArn)
        capacityReservationResourceGroupArn = capacityReservationResourceGroupArnDecoded
    }
}

extension OnDemandCapacityReservationOptions: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OnDemandCapacityReservationOptions(capacityReservationPreference: \(String(describing: capacityReservationPreference)), capacityReservationResourceGroupArn: \(String(describing: capacityReservationResourceGroupArn)), usageStrategy: \(String(describing: usageStrategy)))"}
}

/// <p>Describes the strategy for using unused Capacity Reservations for fulfilling On-Demand capacity.</p>
public struct OnDemandCapacityReservationOptions: Equatable {
    /// <p>Indicates the instance's Capacity Reservation preferences. Possible preferences include:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>open</code> - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>none</code> - The instance avoids running in a Capacity Reservation even if one is available. The instance runs as an On-Demand Instance.</p>
    ///             </li>
    ///          </ul>
    public let capacityReservationPreference: OnDemandCapacityReservationPreference?
    /// <p>The ARN of the Capacity Reservation resource group in which to run the instance.</p>
    public let capacityReservationResourceGroupArn: String?
    /// <p>Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity.</p>
    ///          <p>If you specify <code>use-capacity-reservations-first</code>, the fleet uses unused Capacity Reservations to fulfill On-Demand capacity up to the target On-Demand capacity. If multiple instance pools have unused Capacity Reservations, the On-Demand allocation strategy (<code>lowest-price</code>) is applied. If the number of unused Capacity Reservations is less than the On-Demand target capacity, the remaining On-Demand target capacity is launched according to the On-Demand allocation strategy (<code>lowest-price</code>).</p>
    ///          <p>If you do not specify a value, the fleet fulfils the On-Demand capacity according to the chosen On-Demand allocation strategy.</p>
    public let usageStrategy: OnDemandCapacityReservationUsageStrategy?

    public init (
        capacityReservationPreference: OnDemandCapacityReservationPreference? = nil,
        capacityReservationResourceGroupArn: String? = nil,
        usageStrategy: OnDemandCapacityReservationUsageStrategy? = nil
    )
    {
        self.capacityReservationPreference = capacityReservationPreference
        self.capacityReservationResourceGroupArn = capacityReservationResourceGroupArn
        self.usageStrategy = usageStrategy
    }
}

public enum OnDemandCapacityReservationPreference {
    case `none`
    case `open`
    case sdkUnknown(String)
}

extension OnDemandCapacityReservationPreference : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [OnDemandCapacityReservationPreference] {
        return [
            .none,
            .open,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "none"
        case .open: return "open"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = OnDemandCapacityReservationPreference(rawValue: rawValue) ?? OnDemandCapacityReservationPreference.sdkUnknown(rawValue)
    }
}

public enum OnDemandCapacityReservationUsageStrategy {
    case useCapacityReservationsFirst
    case sdkUnknown(String)
}

extension OnDemandCapacityReservationUsageStrategy : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [OnDemandCapacityReservationUsageStrategy] {
        return [
            .useCapacityReservationsFirst,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .useCapacityReservationsFirst: return "use-capacity-reservations-first"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = OnDemandCapacityReservationUsageStrategy(rawValue: rawValue) ?? OnDemandCapacityReservationUsageStrategy.sdkUnknown(rawValue)
    }
}

public enum OnDemandProvisioningAllocationStrategy {
    case lowestPrice
    case sdkUnknown(String)
}

extension OnDemandProvisioningAllocationStrategy : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [OnDemandProvisioningAllocationStrategy] {
        return [
            .lowestPrice,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .lowestPrice: return "lowest-price"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = OnDemandProvisioningAllocationStrategy(rawValue: rawValue) ?? OnDemandProvisioningAllocationStrategy.sdkUnknown(rawValue)
    }
}

extension OnDemandProvisioningSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allocationStrategy = "AllocationStrategy"
        case capacityReservationOptions = "CapacityReservationOptions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allocationStrategy = allocationStrategy {
            try encodeContainer.encode(allocationStrategy.rawValue, forKey: .allocationStrategy)
        }
        if let capacityReservationOptions = capacityReservationOptions {
            try encodeContainer.encode(capacityReservationOptions, forKey: .capacityReservationOptions)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allocationStrategyDecoded = try containerValues.decodeIfPresent(OnDemandProvisioningAllocationStrategy.self, forKey: .allocationStrategy)
        allocationStrategy = allocationStrategyDecoded
        let capacityReservationOptionsDecoded = try containerValues.decodeIfPresent(OnDemandCapacityReservationOptions.self, forKey: .capacityReservationOptions)
        capacityReservationOptions = capacityReservationOptionsDecoded
    }
}

extension OnDemandProvisioningSpecification: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OnDemandProvisioningSpecification(allocationStrategy: \(String(describing: allocationStrategy)), capacityReservationOptions: \(String(describing: capacityReservationOptions)))"}
}

/// <p> The launch specification for On-Demand Instances in the instance fleet, which
///          determines the allocation strategy. </p>
///          <note>
///             <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and
///             later, excluding 5.0.x versions. On-Demand Instances allocation strategy is available in
///             Amazon EMR version 5.12.1 and later.</p>
///          </note>
public struct OnDemandProvisioningSpecification: Equatable {
    /// <p>Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is <code>lowest-price</code> (the default), which launches the lowest price first.</p>
    public let allocationStrategy: OnDemandProvisioningAllocationStrategy?
    /// <p>The launch specification for On-Demand instances in the instance fleet, which determines the allocation strategy.</p>
    public let capacityReservationOptions: OnDemandCapacityReservationOptions?

    public init (
        allocationStrategy: OnDemandProvisioningAllocationStrategy? = nil,
        capacityReservationOptions: OnDemandCapacityReservationOptions? = nil
    )
    {
        self.allocationStrategy = allocationStrategy
        self.capacityReservationOptions = capacityReservationOptions
    }
}

extension PlacementGroupConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instanceRole = "InstanceRole"
        case placementStrategy = "PlacementStrategy"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceRole = instanceRole {
            try encodeContainer.encode(instanceRole.rawValue, forKey: .instanceRole)
        }
        if let placementStrategy = placementStrategy {
            try encodeContainer.encode(placementStrategy.rawValue, forKey: .placementStrategy)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceRoleDecoded = try containerValues.decodeIfPresent(InstanceRoleType.self, forKey: .instanceRole)
        instanceRole = instanceRoleDecoded
        let placementStrategyDecoded = try containerValues.decodeIfPresent(PlacementGroupStrategy.self, forKey: .placementStrategy)
        placementStrategy = placementStrategyDecoded
    }
}

extension PlacementGroupConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PlacementGroupConfig(instanceRole: \(String(describing: instanceRole)), placementStrategy: \(String(describing: placementStrategy)))"}
}

/// <p>Placement group configuration for an Amazon EMR cluster. The configuration specifies the
///          placement strategy that can be applied to instance roles during cluster creation.</p>
///          <p>To use this configuration, consider attaching managed policy
///          AmazonElasticMapReducePlacementGroupPolicy to the EMR role.</p>
public struct PlacementGroupConfig: Equatable {
    /// <p>Role of the instance in the cluster.</p>
    ///          <p>Starting with Amazon EMR version 5.23.0, the only supported instance role is
    ///             <code>MASTER</code>.</p>
    public let instanceRole: InstanceRoleType?
    /// <p>EC2 Placement Group strategy associated with instance role.</p>
    ///          <p>Starting with Amazon EMR version 5.23.0, the only supported placement strategy is
    ///             <code>SPREAD</code> for the <code>MASTER</code> instance role.</p>
    public let placementStrategy: PlacementGroupStrategy?

    public init (
        instanceRole: InstanceRoleType? = nil,
        placementStrategy: PlacementGroupStrategy? = nil
    )
    {
        self.instanceRole = instanceRole
        self.placementStrategy = placementStrategy
    }
}

public enum PlacementGroupStrategy {
    case cluster
    case `none`
    case partition
    case spread
    case sdkUnknown(String)
}

extension PlacementGroupStrategy : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [PlacementGroupStrategy] {
        return [
            .cluster,
            .none,
            .partition,
            .spread,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cluster: return "CLUSTER"
        case .none: return "NONE"
        case .partition: return "PARTITION"
        case .spread: return "SPREAD"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = PlacementGroupStrategy(rawValue: rawValue) ?? PlacementGroupStrategy.sdkUnknown(rawValue)
    }
}

extension PlacementType: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availabilityZone = "AvailabilityZone"
        case availabilityZones = "AvailabilityZones"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for xmlstringmaxlen256list0 in availabilityZones {
                try availabilityZonesContainer.encode(xmlstringmaxlen256list0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
    }
}

extension PlacementType: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PlacementType(availabilityZone: \(String(describing: availabilityZone)), availabilityZones: \(String(describing: availabilityZones)))"}
}

/// <p>The Amazon EC2 Availability Zone configuration of the cluster (job flow).</p>
public struct PlacementType: Equatable {
    /// <p>The Amazon EC2 Availability Zone for the cluster. <code>AvailabilityZone</code> is used
    ///          for uniform instance groups, while <code>AvailabilityZones</code> (plural) is used for
    ///          instance fleets.</p>
    public let availabilityZone: String?
    /// <p>When multiple Availability Zones are specified, Amazon EMR evaluates them and launches
    ///          instances in the optimal Availability Zone. <code>AvailabilityZones</code> is used for
    ///          instance fleets, while <code>AvailabilityZone</code> (singular) is used for uniform
    ///          instance groups.</p>
    ///          <note>
    ///             <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and
    ///             later, excluding 5.0.x versions.</p>
    ///          </note>
    public let availabilityZones: [String]?

    public init (
        availabilityZone: String? = nil,
        availabilityZones: [String]? = nil
    )
    {
        self.availabilityZone = availabilityZone
        self.availabilityZones = availabilityZones
    }
}

extension PortRange: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maxRange = "MaxRange"
        case minRange = "MinRange"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxRange = maxRange {
            try encodeContainer.encode(maxRange, forKey: .maxRange)
        }
        if let minRange = minRange {
            try encodeContainer.encode(minRange, forKey: .minRange)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minRangeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minRange)
        minRange = minRangeDecoded
        let maxRangeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxRange)
        maxRange = maxRangeDecoded
    }
}

extension PortRange: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PortRange(maxRange: \(String(describing: maxRange)), minRange: \(String(describing: minRange)))"}
}

/// <p>A list of port ranges that are permitted to allow inbound traffic from all public IP
///          addresses. To specify a single port, use the same value for <code>MinRange</code> and
///             <code>MaxRange</code>.</p>
public struct PortRange: Equatable {
    /// <p>The smallest port number in a specified range of port numbers.</p>
    public let maxRange: Int?
    /// <p>The smallest port number in a specified range of port numbers.</p>
    public let minRange: Int?

    public init (
        maxRange: Int? = nil,
        minRange: Int? = nil
    )
    {
        self.maxRange = maxRange
        self.minRange = minRange
    }
}

public struct PutAutoScalingPolicyInputBodyMiddleware: Middleware {
    public let id: String = "PutAutoScalingPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutAutoScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutAutoScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutAutoScalingPolicyInput>
    public typealias MOutput = OperationOutput<PutAutoScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutAutoScalingPolicyOutputError>
}

extension PutAutoScalingPolicyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutAutoScalingPolicyInput(autoScalingPolicy: \(String(describing: autoScalingPolicy)), clusterId: \(String(describing: clusterId)), instanceGroupId: \(String(describing: instanceGroupId)))"}
}

extension PutAutoScalingPolicyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoScalingPolicy = "AutoScalingPolicy"
        case clusterId = "ClusterId"
        case instanceGroupId = "InstanceGroupId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingPolicy = autoScalingPolicy {
            try encodeContainer.encode(autoScalingPolicy, forKey: .autoScalingPolicy)
        }
        if let clusterId = clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let instanceGroupId = instanceGroupId {
            try encodeContainer.encode(instanceGroupId, forKey: .instanceGroupId)
        }
    }
}

public struct PutAutoScalingPolicyInputHeadersMiddleware: Middleware {
    public let id: String = "PutAutoScalingPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutAutoScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutAutoScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutAutoScalingPolicyInput>
    public typealias MOutput = OperationOutput<PutAutoScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutAutoScalingPolicyOutputError>
}

public struct PutAutoScalingPolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "PutAutoScalingPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutAutoScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutAutoScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutAutoScalingPolicyInput>
    public typealias MOutput = OperationOutput<PutAutoScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutAutoScalingPolicyOutputError>
}

public struct PutAutoScalingPolicyInput: Equatable {
    /// <p>Specifies the definition of the automatic scaling policy.</p>
    public let autoScalingPolicy: AutoScalingPolicy?
    /// <p>Specifies the ID of a cluster. The instance group to which the automatic scaling policy
    ///          is applied is within this cluster.</p>
    public let clusterId: String?
    /// <p>Specifies the ID of the instance group to which the automatic scaling policy is
    ///          applied.</p>
    public let instanceGroupId: String?

    public init (
        autoScalingPolicy: AutoScalingPolicy? = nil,
        clusterId: String? = nil,
        instanceGroupId: String? = nil
    )
    {
        self.autoScalingPolicy = autoScalingPolicy
        self.clusterId = clusterId
        self.instanceGroupId = instanceGroupId
    }
}

struct PutAutoScalingPolicyInputBody: Equatable {
    public let clusterId: String?
    public let instanceGroupId: String?
    public let autoScalingPolicy: AutoScalingPolicy?
}

extension PutAutoScalingPolicyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case autoScalingPolicy = "AutoScalingPolicy"
        case clusterId = "ClusterId"
        case instanceGroupId = "InstanceGroupId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let instanceGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceGroupId)
        instanceGroupId = instanceGroupIdDecoded
        let autoScalingPolicyDecoded = try containerValues.decodeIfPresent(AutoScalingPolicy.self, forKey: .autoScalingPolicy)
        autoScalingPolicy = autoScalingPolicyDecoded
    }
}

extension PutAutoScalingPolicyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutAutoScalingPolicyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutAutoScalingPolicyOutputError: Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutAutoScalingPolicyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutAutoScalingPolicyOutputResponse(autoScalingPolicy: \(String(describing: autoScalingPolicy)), clusterArn: \(String(describing: clusterArn)), clusterId: \(String(describing: clusterId)), instanceGroupId: \(String(describing: instanceGroupId)))"}
}

extension PutAutoScalingPolicyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: PutAutoScalingPolicyOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.autoScalingPolicy = output.autoScalingPolicy
            self.clusterArn = output.clusterArn
            self.clusterId = output.clusterId
            self.instanceGroupId = output.instanceGroupId
        } else {
            self.autoScalingPolicy = nil
            self.clusterArn = nil
            self.clusterId = nil
            self.instanceGroupId = nil
        }
    }
}

public struct PutAutoScalingPolicyOutputResponse: Equatable {
    /// <p>The automatic scaling policy definition.</p>
    public let autoScalingPolicy: AutoScalingPolicyDescription?
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    public let clusterArn: String?
    /// <p>Specifies the ID of a cluster. The instance group to which the automatic scaling policy
    ///          is applied is within this cluster.</p>
    public let clusterId: String?
    /// <p>Specifies the ID of the instance group to which the scaling policy is applied.</p>
    public let instanceGroupId: String?

    public init (
        autoScalingPolicy: AutoScalingPolicyDescription? = nil,
        clusterArn: String? = nil,
        clusterId: String? = nil,
        instanceGroupId: String? = nil
    )
    {
        self.autoScalingPolicy = autoScalingPolicy
        self.clusterArn = clusterArn
        self.clusterId = clusterId
        self.instanceGroupId = instanceGroupId
    }
}

struct PutAutoScalingPolicyOutputResponseBody: Equatable {
    public let clusterId: String?
    public let instanceGroupId: String?
    public let autoScalingPolicy: AutoScalingPolicyDescription?
    public let clusterArn: String?
}

extension PutAutoScalingPolicyOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case autoScalingPolicy = "AutoScalingPolicy"
        case clusterArn = "ClusterArn"
        case clusterId = "ClusterId"
        case instanceGroupId = "InstanceGroupId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let instanceGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceGroupId)
        instanceGroupId = instanceGroupIdDecoded
        let autoScalingPolicyDecoded = try containerValues.decodeIfPresent(AutoScalingPolicyDescription.self, forKey: .autoScalingPolicy)
        autoScalingPolicy = autoScalingPolicyDecoded
        let clusterArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
    }
}

public struct PutBlockPublicAccessConfigurationInputBodyMiddleware: Middleware {
    public let id: String = "PutBlockPublicAccessConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutBlockPublicAccessConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<PutBlockPublicAccessConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutBlockPublicAccessConfigurationInput>
    public typealias MOutput = OperationOutput<PutBlockPublicAccessConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutBlockPublicAccessConfigurationOutputError>
}

extension PutBlockPublicAccessConfigurationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutBlockPublicAccessConfigurationInput(blockPublicAccessConfiguration: \(String(describing: blockPublicAccessConfiguration)))"}
}

extension PutBlockPublicAccessConfigurationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case blockPublicAccessConfiguration = "BlockPublicAccessConfiguration"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blockPublicAccessConfiguration = blockPublicAccessConfiguration {
            try encodeContainer.encode(blockPublicAccessConfiguration, forKey: .blockPublicAccessConfiguration)
        }
    }
}

public struct PutBlockPublicAccessConfigurationInputHeadersMiddleware: Middleware {
    public let id: String = "PutBlockPublicAccessConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutBlockPublicAccessConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<PutBlockPublicAccessConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutBlockPublicAccessConfigurationInput>
    public typealias MOutput = OperationOutput<PutBlockPublicAccessConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutBlockPublicAccessConfigurationOutputError>
}

public struct PutBlockPublicAccessConfigurationInputQueryItemMiddleware: Middleware {
    public let id: String = "PutBlockPublicAccessConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutBlockPublicAccessConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<PutBlockPublicAccessConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutBlockPublicAccessConfigurationInput>
    public typealias MOutput = OperationOutput<PutBlockPublicAccessConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutBlockPublicAccessConfigurationOutputError>
}

public struct PutBlockPublicAccessConfigurationInput: Equatable {
    /// <p>A configuration for Amazon EMR block public access. The configuration applies to all
    ///          clusters created in your account for the current Region. The configuration specifies
    ///          whether block public access is enabled. If block public access is enabled, security groups
    ///          associated with the cluster cannot have rules that allow inbound traffic from 0.0.0.0/0 or
    ///          ::/0 on a port, unless the port is specified as an exception using
    ///             <code>PermittedPublicSecurityGroupRuleRanges</code> in the
    ///             <code>BlockPublicAccessConfiguration</code>. By default, Port 22 (SSH) is an exception,
    ///          and public access is allowed on this port. You can change this by updating
    ///             <code>BlockPublicSecurityGroupRules</code> to remove the exception.</p>
    ///          <note>
    ///             <p>For accounts that created clusters in a Region before November 25, 2019, block public
    ///             access is disabled by default in that Region. To use this feature, you must manually
    ///             enable and configure it. For accounts that did not create an EMR cluster in a Region
    ///             before this date, block public access is enabled by default in that Region.</p>
    ///          </note>
    public let blockPublicAccessConfiguration: BlockPublicAccessConfiguration?

    public init (
        blockPublicAccessConfiguration: BlockPublicAccessConfiguration? = nil
    )
    {
        self.blockPublicAccessConfiguration = blockPublicAccessConfiguration
    }
}

struct PutBlockPublicAccessConfigurationInputBody: Equatable {
    public let blockPublicAccessConfiguration: BlockPublicAccessConfiguration?
}

extension PutBlockPublicAccessConfigurationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case blockPublicAccessConfiguration = "BlockPublicAccessConfiguration"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blockPublicAccessConfigurationDecoded = try containerValues.decodeIfPresent(BlockPublicAccessConfiguration.self, forKey: .blockPublicAccessConfiguration)
        blockPublicAccessConfiguration = blockPublicAccessConfigurationDecoded
    }
}

extension PutBlockPublicAccessConfigurationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutBlockPublicAccessConfigurationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutBlockPublicAccessConfigurationOutputError: Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutBlockPublicAccessConfigurationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutBlockPublicAccessConfigurationOutputResponse()"}
}

extension PutBlockPublicAccessConfigurationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct PutBlockPublicAccessConfigurationOutputResponse: Equatable {

    public init() {}
}

struct PutBlockPublicAccessConfigurationOutputResponseBody: Equatable {
}

extension PutBlockPublicAccessConfigurationOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct PutManagedScalingPolicyInputBodyMiddleware: Middleware {
    public let id: String = "PutManagedScalingPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutManagedScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutManagedScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutManagedScalingPolicyInput>
    public typealias MOutput = OperationOutput<PutManagedScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutManagedScalingPolicyOutputError>
}

extension PutManagedScalingPolicyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutManagedScalingPolicyInput(clusterId: \(String(describing: clusterId)), managedScalingPolicy: \(String(describing: managedScalingPolicy)))"}
}

extension PutManagedScalingPolicyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case managedScalingPolicy = "ManagedScalingPolicy"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let managedScalingPolicy = managedScalingPolicy {
            try encodeContainer.encode(managedScalingPolicy, forKey: .managedScalingPolicy)
        }
    }
}

public struct PutManagedScalingPolicyInputHeadersMiddleware: Middleware {
    public let id: String = "PutManagedScalingPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutManagedScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutManagedScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutManagedScalingPolicyInput>
    public typealias MOutput = OperationOutput<PutManagedScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutManagedScalingPolicyOutputError>
}

public struct PutManagedScalingPolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "PutManagedScalingPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutManagedScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<PutManagedScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutManagedScalingPolicyInput>
    public typealias MOutput = OperationOutput<PutManagedScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutManagedScalingPolicyOutputError>
}

public struct PutManagedScalingPolicyInput: Equatable {
    /// <p>Specifies the ID of an EMR cluster where the managed scaling policy is attached. </p>
    public let clusterId: String?
    /// <p>Specifies the constraints for the managed scaling policy. </p>
    public let managedScalingPolicy: ManagedScalingPolicy?

    public init (
        clusterId: String? = nil,
        managedScalingPolicy: ManagedScalingPolicy? = nil
    )
    {
        self.clusterId = clusterId
        self.managedScalingPolicy = managedScalingPolicy
    }
}

struct PutManagedScalingPolicyInputBody: Equatable {
    public let clusterId: String?
    public let managedScalingPolicy: ManagedScalingPolicy?
}

extension PutManagedScalingPolicyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case managedScalingPolicy = "ManagedScalingPolicy"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let managedScalingPolicyDecoded = try containerValues.decodeIfPresent(ManagedScalingPolicy.self, forKey: .managedScalingPolicy)
        managedScalingPolicy = managedScalingPolicyDecoded
    }
}

extension PutManagedScalingPolicyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutManagedScalingPolicyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutManagedScalingPolicyOutputError: Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension PutManagedScalingPolicyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutManagedScalingPolicyOutputResponse()"}
}

extension PutManagedScalingPolicyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct PutManagedScalingPolicyOutputResponse: Equatable {

    public init() {}
}

struct PutManagedScalingPolicyOutputResponseBody: Equatable {
}

extension PutManagedScalingPolicyOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct RemoveAutoScalingPolicyInputBodyMiddleware: Middleware {
    public let id: String = "RemoveAutoScalingPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RemoveAutoScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<RemoveAutoScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RemoveAutoScalingPolicyInput>
    public typealias MOutput = OperationOutput<RemoveAutoScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RemoveAutoScalingPolicyOutputError>
}

extension RemoveAutoScalingPolicyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RemoveAutoScalingPolicyInput(clusterId: \(String(describing: clusterId)), instanceGroupId: \(String(describing: instanceGroupId)))"}
}

extension RemoveAutoScalingPolicyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case instanceGroupId = "InstanceGroupId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let instanceGroupId = instanceGroupId {
            try encodeContainer.encode(instanceGroupId, forKey: .instanceGroupId)
        }
    }
}

public struct RemoveAutoScalingPolicyInputHeadersMiddleware: Middleware {
    public let id: String = "RemoveAutoScalingPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RemoveAutoScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<RemoveAutoScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RemoveAutoScalingPolicyInput>
    public typealias MOutput = OperationOutput<RemoveAutoScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RemoveAutoScalingPolicyOutputError>
}

public struct RemoveAutoScalingPolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "RemoveAutoScalingPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RemoveAutoScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<RemoveAutoScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RemoveAutoScalingPolicyInput>
    public typealias MOutput = OperationOutput<RemoveAutoScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RemoveAutoScalingPolicyOutputError>
}

public struct RemoveAutoScalingPolicyInput: Equatable {
    /// <p>Specifies the ID of a cluster. The instance group to which the automatic scaling policy
    ///          is applied is within this cluster.</p>
    public let clusterId: String?
    /// <p>Specifies the ID of the instance group to which the scaling policy is applied.</p>
    public let instanceGroupId: String?

    public init (
        clusterId: String? = nil,
        instanceGroupId: String? = nil
    )
    {
        self.clusterId = clusterId
        self.instanceGroupId = instanceGroupId
    }
}

struct RemoveAutoScalingPolicyInputBody: Equatable {
    public let clusterId: String?
    public let instanceGroupId: String?
}

extension RemoveAutoScalingPolicyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case instanceGroupId = "InstanceGroupId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let instanceGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceGroupId)
        instanceGroupId = instanceGroupIdDecoded
    }
}

extension RemoveAutoScalingPolicyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RemoveAutoScalingPolicyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RemoveAutoScalingPolicyOutputError: Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveAutoScalingPolicyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RemoveAutoScalingPolicyOutputResponse()"}
}

extension RemoveAutoScalingPolicyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct RemoveAutoScalingPolicyOutputResponse: Equatable {

    public init() {}
}

struct RemoveAutoScalingPolicyOutputResponseBody: Equatable {
}

extension RemoveAutoScalingPolicyOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct RemoveManagedScalingPolicyInputBodyMiddleware: Middleware {
    public let id: String = "RemoveManagedScalingPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RemoveManagedScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<RemoveManagedScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RemoveManagedScalingPolicyInput>
    public typealias MOutput = OperationOutput<RemoveManagedScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RemoveManagedScalingPolicyOutputError>
}

extension RemoveManagedScalingPolicyInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RemoveManagedScalingPolicyInput(clusterId: \(String(describing: clusterId)))"}
}

extension RemoveManagedScalingPolicyInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
    }
}

public struct RemoveManagedScalingPolicyInputHeadersMiddleware: Middleware {
    public let id: String = "RemoveManagedScalingPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RemoveManagedScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<RemoveManagedScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RemoveManagedScalingPolicyInput>
    public typealias MOutput = OperationOutput<RemoveManagedScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RemoveManagedScalingPolicyOutputError>
}

public struct RemoveManagedScalingPolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "RemoveManagedScalingPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RemoveManagedScalingPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<RemoveManagedScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RemoveManagedScalingPolicyInput>
    public typealias MOutput = OperationOutput<RemoveManagedScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RemoveManagedScalingPolicyOutputError>
}

public struct RemoveManagedScalingPolicyInput: Equatable {
    /// <p> Specifies the ID of the cluster from which the managed scaling policy will be removed.
    ///       </p>
    public let clusterId: String?

    public init (
        clusterId: String? = nil
    )
    {
        self.clusterId = clusterId
    }
}

struct RemoveManagedScalingPolicyInputBody: Equatable {
    public let clusterId: String?
}

extension RemoveManagedScalingPolicyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
    }
}

extension RemoveManagedScalingPolicyOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RemoveManagedScalingPolicyOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RemoveManagedScalingPolicyOutputError: Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveManagedScalingPolicyOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RemoveManagedScalingPolicyOutputResponse()"}
}

extension RemoveManagedScalingPolicyOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct RemoveManagedScalingPolicyOutputResponse: Equatable {

    public init() {}
}

struct RemoveManagedScalingPolicyOutputResponseBody: Equatable {
}

extension RemoveManagedScalingPolicyOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct RemoveTagsInputBodyMiddleware: Middleware {
    public let id: String = "RemoveTagsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RemoveTagsInput>,
                  next: H) -> Swift.Result<OperationOutput<RemoveTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RemoveTagsInput>
    public typealias MOutput = OperationOutput<RemoveTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RemoveTagsOutputError>
}

extension RemoveTagsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RemoveTagsInput(resourceId: \(String(describing: resourceId)), tagKeys: \(String(describing: tagKeys)))"}
}

extension RemoveTagsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case resourceId = "ResourceId"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for stringlist0 in tagKeys {
                try tagKeysContainer.encode(stringlist0)
            }
        }
    }
}

public struct RemoveTagsInputHeadersMiddleware: Middleware {
    public let id: String = "RemoveTagsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RemoveTagsInput>,
                  next: H) -> Swift.Result<OperationOutput<RemoveTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RemoveTagsInput>
    public typealias MOutput = OperationOutput<RemoveTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RemoveTagsOutputError>
}

public struct RemoveTagsInputQueryItemMiddleware: Middleware {
    public let id: String = "RemoveTagsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RemoveTagsInput>,
                  next: H) -> Swift.Result<OperationOutput<RemoveTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RemoveTagsInput>
    public typealias MOutput = OperationOutput<RemoveTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RemoveTagsOutputError>
}

/// <p>This input identifies a cluster and a list of tags to remove.</p>
public struct RemoveTagsInput: Equatable {
    /// <p>The Amazon EMR resource identifier from which tags will be removed. This value must be a
    ///          cluster identifier.</p>
    public let resourceId: String?
    /// <p>A list of tag keys to remove from a resource.</p>
    public let tagKeys: [String]?

    public init (
        resourceId: String? = nil,
        tagKeys: [String]? = nil
    )
    {
        self.resourceId = resourceId
        self.tagKeys = tagKeys
    }
}

struct RemoveTagsInputBody: Equatable {
    public let resourceId: String?
    public let tagKeys: [String]?
}

extension RemoveTagsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case resourceId = "ResourceId"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension RemoveTagsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RemoveTagsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RemoveTagsOutputError: Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveTagsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RemoveTagsOutputResponse()"}
}

extension RemoveTagsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

/// <p>This output indicates the result of removing tags from a resource.</p>
public struct RemoveTagsOutputResponse: Equatable {

    public init() {}
}

struct RemoveTagsOutputResponseBody: Equatable {
}

extension RemoveTagsOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public enum RepoUpgradeOnBoot {
    case `none`
    case security
    case sdkUnknown(String)
}

extension RepoUpgradeOnBoot : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [RepoUpgradeOnBoot] {
        return [
            .none,
            .security,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case .security: return "SECURITY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = RepoUpgradeOnBoot(rawValue: rawValue) ?? RepoUpgradeOnBoot.sdkUnknown(rawValue)
    }
}

public struct RunJobFlowInputBodyMiddleware: Middleware {
    public let id: String = "RunJobFlowInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RunJobFlowInput>,
                  next: H) -> Swift.Result<OperationOutput<RunJobFlowOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RunJobFlowInput>
    public typealias MOutput = OperationOutput<RunJobFlowOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RunJobFlowOutputError>
}

extension RunJobFlowInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RunJobFlowInput(additionalInfo: \(String(describing: additionalInfo)), amiVersion: \(String(describing: amiVersion)), applications: \(String(describing: applications)), autoScalingRole: \(String(describing: autoScalingRole)), bootstrapActions: \(String(describing: bootstrapActions)), configurations: \(String(describing: configurations)), customAmiId: \(String(describing: customAmiId)), ebsRootVolumeSize: \(String(describing: ebsRootVolumeSize)), instances: \(String(describing: instances)), jobFlowRole: \(String(describing: jobFlowRole)), kerberosAttributes: \(String(describing: kerberosAttributes)), logEncryptionKmsKeyId: \(String(describing: logEncryptionKmsKeyId)), logUri: \(String(describing: logUri)), managedScalingPolicy: \(String(describing: managedScalingPolicy)), name: \(String(describing: name)), newSupportedProducts: \(String(describing: newSupportedProducts)), placementGroupConfigs: \(String(describing: placementGroupConfigs)), releaseLabel: \(String(describing: releaseLabel)), repoUpgradeOnBoot: \(String(describing: repoUpgradeOnBoot)), scaleDownBehavior: \(String(describing: scaleDownBehavior)), securityConfiguration: \(String(describing: securityConfiguration)), serviceRole: \(String(describing: serviceRole)), stepConcurrencyLevel: \(String(describing: stepConcurrencyLevel)), steps: \(String(describing: steps)), supportedProducts: \(String(describing: supportedProducts)), tags: \(String(describing: tags)), visibleToAllUsers: \(String(describing: visibleToAllUsers)))"}
}

extension RunJobFlowInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case additionalInfo = "AdditionalInfo"
        case amiVersion = "AmiVersion"
        case applications = "Applications"
        case autoScalingRole = "AutoScalingRole"
        case bootstrapActions = "BootstrapActions"
        case configurations = "Configurations"
        case customAmiId = "CustomAmiId"
        case ebsRootVolumeSize = "EbsRootVolumeSize"
        case instances = "Instances"
        case jobFlowRole = "JobFlowRole"
        case kerberosAttributes = "KerberosAttributes"
        case logEncryptionKmsKeyId = "LogEncryptionKmsKeyId"
        case logUri = "LogUri"
        case managedScalingPolicy = "ManagedScalingPolicy"
        case name = "Name"
        case newSupportedProducts = "NewSupportedProducts"
        case placementGroupConfigs = "PlacementGroupConfigs"
        case releaseLabel = "ReleaseLabel"
        case repoUpgradeOnBoot = "RepoUpgradeOnBoot"
        case scaleDownBehavior = "ScaleDownBehavior"
        case securityConfiguration = "SecurityConfiguration"
        case serviceRole = "ServiceRole"
        case stepConcurrencyLevel = "StepConcurrencyLevel"
        case steps = "Steps"
        case supportedProducts = "SupportedProducts"
        case tags = "Tags"
        case visibleToAllUsers = "VisibleToAllUsers"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalInfo = additionalInfo {
            try encodeContainer.encode(additionalInfo, forKey: .additionalInfo)
        }
        if let amiVersion = amiVersion {
            try encodeContainer.encode(amiVersion, forKey: .amiVersion)
        }
        if let applications = applications {
            var applicationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .applications)
            for applicationlist0 in applications {
                try applicationsContainer.encode(applicationlist0)
            }
        }
        if let autoScalingRole = autoScalingRole {
            try encodeContainer.encode(autoScalingRole, forKey: .autoScalingRole)
        }
        if let bootstrapActions = bootstrapActions {
            var bootstrapActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bootstrapActions)
            for bootstrapactionconfiglist0 in bootstrapActions {
                try bootstrapActionsContainer.encode(bootstrapactionconfiglist0)
            }
        }
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configurationlist0 in configurations {
                try configurationsContainer.encode(configurationlist0)
            }
        }
        if let customAmiId = customAmiId {
            try encodeContainer.encode(customAmiId, forKey: .customAmiId)
        }
        if let ebsRootVolumeSize = ebsRootVolumeSize {
            try encodeContainer.encode(ebsRootVolumeSize, forKey: .ebsRootVolumeSize)
        }
        if let instances = instances {
            try encodeContainer.encode(instances, forKey: .instances)
        }
        if let jobFlowRole = jobFlowRole {
            try encodeContainer.encode(jobFlowRole, forKey: .jobFlowRole)
        }
        if let kerberosAttributes = kerberosAttributes {
            try encodeContainer.encode(kerberosAttributes, forKey: .kerberosAttributes)
        }
        if let logEncryptionKmsKeyId = logEncryptionKmsKeyId {
            try encodeContainer.encode(logEncryptionKmsKeyId, forKey: .logEncryptionKmsKeyId)
        }
        if let logUri = logUri {
            try encodeContainer.encode(logUri, forKey: .logUri)
        }
        if let managedScalingPolicy = managedScalingPolicy {
            try encodeContainer.encode(managedScalingPolicy, forKey: .managedScalingPolicy)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let newSupportedProducts = newSupportedProducts {
            var newSupportedProductsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .newSupportedProducts)
            for newsupportedproductslist0 in newSupportedProducts {
                try newSupportedProductsContainer.encode(newsupportedproductslist0)
            }
        }
        if let placementGroupConfigs = placementGroupConfigs {
            var placementGroupConfigsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .placementGroupConfigs)
            for placementgroupconfiglist0 in placementGroupConfigs {
                try placementGroupConfigsContainer.encode(placementgroupconfiglist0)
            }
        }
        if let releaseLabel = releaseLabel {
            try encodeContainer.encode(releaseLabel, forKey: .releaseLabel)
        }
        if let repoUpgradeOnBoot = repoUpgradeOnBoot {
            try encodeContainer.encode(repoUpgradeOnBoot.rawValue, forKey: .repoUpgradeOnBoot)
        }
        if let scaleDownBehavior = scaleDownBehavior {
            try encodeContainer.encode(scaleDownBehavior.rawValue, forKey: .scaleDownBehavior)
        }
        if let securityConfiguration = securityConfiguration {
            try encodeContainer.encode(securityConfiguration, forKey: .securityConfiguration)
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let stepConcurrencyLevel = stepConcurrencyLevel {
            try encodeContainer.encode(stepConcurrencyLevel, forKey: .stepConcurrencyLevel)
        }
        if let steps = steps {
            var stepsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .steps)
            for stepconfiglist0 in steps {
                try stepsContainer.encode(stepconfiglist0)
            }
        }
        if let supportedProducts = supportedProducts {
            var supportedProductsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedProducts)
            for supportedproductslist0 in supportedProducts {
                try supportedProductsContainer.encode(supportedproductslist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if visibleToAllUsers != false {
            try encodeContainer.encode(visibleToAllUsers, forKey: .visibleToAllUsers)
        }
    }
}

public struct RunJobFlowInputHeadersMiddleware: Middleware {
    public let id: String = "RunJobFlowInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RunJobFlowInput>,
                  next: H) -> Swift.Result<OperationOutput<RunJobFlowOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RunJobFlowInput>
    public typealias MOutput = OperationOutput<RunJobFlowOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RunJobFlowOutputError>
}

public struct RunJobFlowInputQueryItemMiddleware: Middleware {
    public let id: String = "RunJobFlowInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RunJobFlowInput>,
                  next: H) -> Swift.Result<OperationOutput<RunJobFlowOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RunJobFlowInput>
    public typealias MOutput = OperationOutput<RunJobFlowOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RunJobFlowOutputError>
}

/// <p> Input to the <a>RunJobFlow</a> operation. </p>
public struct RunJobFlowInput: Equatable {
    /// <p>A JSON string for selecting additional features.</p>
    public let additionalInfo: String?
    /// <p>Applies only to Amazon EMR AMI versions 3.x and 2.x. For Amazon EMR releases 4.0 and
    ///          later, <code>ReleaseLabel</code> is used. To specify a custom AMI, use
    ///             <code>CustomAmiID</code>.</p>
    public let amiVersion: String?
    /// <p>Applies to Amazon EMR releases 4.0 and later. A case-insensitive list of applications
    ///          for Amazon EMR to install and configure when launching the cluster. For a list of
    ///          applications available for each Amazon EMR release version, see the <a href="https://docs.aws.amazon.com/emr/latest/ReleaseGuide/">Amazon EMR Release
    ///          Guide</a>.</p>
    public let applications: [Application]?
    /// <p>An IAM role for automatic scaling policies. The default role is
    ///             <code>EMR_AutoScaling_DefaultRole</code>. The IAM role provides permissions that the
    ///          automatic scaling feature requires to launch and terminate EC2 instances in an instance
    ///          group.</p>
    public let autoScalingRole: String?
    /// <p>A list of bootstrap actions to run before Hadoop starts on the cluster nodes.</p>
    public let bootstrapActions: [BootstrapActionConfig]?
    /// <p>For Amazon EMR releases 4.0 and later. The list of configurations supplied for the EMR
    ///          cluster you are creating.</p>
    public let configurations: [Configuration]?
    /// <p>Available only in Amazon EMR version 5.7.0 and later. The ID of a custom Amazon
    ///          EBS-backed Linux AMI. If specified, Amazon EMR uses this AMI when it launches cluster EC2
    ///          instances. For more information about custom AMIs in Amazon EMR, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-custom-ami.html">Using a Custom
    ///             AMI</a> in the <i>Amazon EMR Management Guide</i>. If omitted, the
    ///          cluster uses the base Linux AMI for the <code>ReleaseLabel</code> specified. For Amazon EMR
    ///          versions 2.x and 3.x, use <code>AmiVersion</code> instead.</p>
    ///          <p>For information about creating a custom AMI, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html">Creating an Amazon EBS-Backed
    ///             Linux AMI</a> in the <i>Amazon Elastic Compute Cloud User Guide for Linux
    ///             Instances</i>. For information about finding an AMI ID, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding a Linux
    ///             AMI</a>. </p>
    public let customAmiId: String?
    /// <p>The size, in GiB, of the Amazon EBS root device volume of the Linux AMI that is used for
    ///          each EC2 instance. Available in Amazon EMR version 4.x and later.</p>
    public let ebsRootVolumeSize: Int?
    /// <p>A specification of the number and type of Amazon EC2 instances.</p>
    public let instances: JobFlowInstancesConfig?
    /// <p>Also called instance profile and EC2 role. An IAM role for an EMR cluster. The EC2
    ///          instances of the cluster assume this role. The default role is
    ///             <code>EMR_EC2_DefaultRole</code>. In order to use the default role, you must have
    ///          already created it using the CLI or console.</p>
    public let jobFlowRole: String?
    /// <p>Attributes for Kerberos configuration when Kerberos authentication is enabled using a
    ///          security configuration. For more information see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-kerberos.html">Use Kerberos Authentication</a>
    ///          in the <i>Amazon EMR Management Guide</i>.</p>
    public let kerberosAttributes: KerberosAttributes?
    /// <p>The AWS KMS customer master key (CMK) used for encrypting log files. If a value is not
    ///          provided, the logs remain encrypted by AES-256. This attribute is only available with
    ///          Amazon EMR version 5.30.0 and later, excluding Amazon EMR 6.0.0.</p>
    public let logEncryptionKmsKeyId: String?
    /// <p>The location in Amazon S3 to write the log files of the job flow. If a value is not
    ///          provided, logs are not created.</p>
    public let logUri: String?
    /// <p> The specified managed scaling policy for an Amazon EMR cluster. </p>
    public let managedScalingPolicy: ManagedScalingPolicy?
    /// <p>The name of the job flow.</p>
    public let name: String?
    /// <note>
    ///             <p>For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and later, use
    ///             Applications.</p>
    ///          </note>
    ///          <p>A list of strings that indicates third-party software to use with the job flow that
    ///          accepts a user argument list. EMR accepts and forwards the argument list to the
    ///          corresponding installation script as bootstrap action arguments. For more information, see
    ///          "Launch a Job Flow on the MapR Distribution for Hadoop" in the <a href="https://docs.aws.amazon.com/emr/latest/DeveloperGuide/emr-dg.pdf">Amazon EMR Developer Guide</a>. Supported
    ///          values are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>"mapr-m3" - launch the cluster using MapR M3 Edition.</p>
    ///             </li>
    ///             <li>
    ///                <p>"mapr-m5" - launch the cluster using MapR M5 Edition.</p>
    ///             </li>
    ///             <li>
    ///                <p>"mapr" with the user arguments specifying "--edition,m3" or "--edition,m5" -
    ///                launch the job flow using MapR M3 or M5 Edition respectively.</p>
    ///             </li>
    ///             <li>
    ///                <p>"mapr-m7" - launch the cluster using MapR M7 Edition.</p>
    ///             </li>
    ///             <li>
    ///                <p>"hunk" - launch the cluster with the Hunk Big Data Analytics Platform.</p>
    ///             </li>
    ///             <li>
    ///                <p>"hue"- launch the cluster with Hue installed.</p>
    ///             </li>
    ///             <li>
    ///                <p>"spark" - launch the cluster with Apache Spark installed.</p>
    ///             </li>
    ///             <li>
    ///                <p>"ganglia" - launch the cluster with the Ganglia Monitoring System
    ///                installed.</p>
    ///             </li>
    ///          </ul>
    public let newSupportedProducts: [SupportedProductConfig]?
    /// <p>The specified placement group configuration for an Amazon EMR cluster.</p>
    public let placementGroupConfigs: [PlacementGroupConfig]?
    /// <p>The Amazon EMR release label, which determines the version of open-source application
    ///          packages installed on the cluster. Release labels are in the form <code>emr-x.x.x</code>,
    ///          where x.x.x is an Amazon EMR release version such as <code>emr-5.14.0</code>. For more
    ///          information about Amazon EMR release versions and included application versions and
    ///          features, see <a href="https://docs.aws.amazon.com/emr/latest/ReleaseGuide/">https://docs.aws.amazon.com/emr/latest/ReleaseGuide/</a>. The release
    ///          label applies only to Amazon EMR releases version 4.0 and later. Earlier versions use
    ///             <code>AmiVersion</code>.</p>
    public let releaseLabel: String?
    /// <p>Applies only when <code>CustomAmiID</code> is used. Specifies which updates from the
    ///          Amazon Linux AMI package repositories to apply automatically when the instance boots using
    ///          the AMI. If omitted, the default is <code>SECURITY</code>, which indicates that only
    ///          security updates are applied. If <code>NONE</code> is specified, no updates are applied,
    ///          and all updates must be applied manually.</p>
    public let repoUpgradeOnBoot: RepoUpgradeOnBoot?
    /// <p>Specifies the way that individual Amazon EC2 instances terminate when an automatic
    ///          scale-in activity occurs or an instance group is resized.
    ///             <code>TERMINATE_AT_INSTANCE_HOUR</code> indicates that Amazon EMR terminates nodes at
    ///          the instance-hour boundary, regardless of when the request to terminate the instance was
    ///          submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default
    ///          for clusters created using that version. <code>TERMINATE_AT_TASK_COMPLETION</code>
    ///          indicates that Amazon EMR adds nodes to a deny list and drains tasks from nodes before
    ///          terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either
    ///          behavior, Amazon EMR removes the least active nodes first and blocks instance termination
    ///          if it could lead to HDFS corruption. <code>TERMINATE_AT_TASK_COMPLETION</code> available
    ///          only in Amazon EMR version 4.1.0 and later, and is the default for versions of Amazon EMR
    ///          earlier than 5.1.0.</p>
    public let scaleDownBehavior: ScaleDownBehavior?
    /// <p>The name of a security configuration to apply to the cluster.</p>
    public let securityConfiguration: String?
    /// <p>The IAM role that will be assumed by the Amazon EMR service to access AWS resources on
    ///          your behalf.</p>
    public let serviceRole: String?
    /// <p>Specifies the number of steps that can be executed concurrently. The default value is
    ///             <code>1</code>. The maximum value is <code>256</code>.</p>
    public let stepConcurrencyLevel: Int?
    /// <p>A list of steps to run.</p>
    public let steps: [StepConfig]?
    /// <note>
    ///             <p>For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and later, use
    ///             Applications.</p>
    ///          </note>
    ///          <p>A list of strings that indicates third-party software to use. For more information, see
    ///          the <a href="https://docs.aws.amazon.com/emr/latest/DeveloperGuide/emr-dg.pdf">Amazon EMR
    ///             Developer Guide</a>. Currently supported values are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>"mapr-m3" - launch the job flow using MapR M3 Edition.</p>
    ///             </li>
    ///             <li>
    ///                <p>"mapr-m5" - launch the job flow using MapR M5 Edition.</p>
    ///             </li>
    ///          </ul>
    public let supportedProducts: [String]?
    /// <p>A list of tags to associate with a cluster and propagate to Amazon EC2 instances.</p>
    public let tags: [Tag]?
    /// <p>A value of <code>true</code> indicates that all IAM users in the AWS account can perform
    ///          cluster actions if they have the proper IAM policy permissions. This is the default. A
    ///          value of <code>false</code> indicates that only the IAM user who created the cluster can
    ///          perform actions.</p>
    public let visibleToAllUsers: Bool

    public init (
        additionalInfo: String? = nil,
        amiVersion: String? = nil,
        applications: [Application]? = nil,
        autoScalingRole: String? = nil,
        bootstrapActions: [BootstrapActionConfig]? = nil,
        configurations: [Configuration]? = nil,
        customAmiId: String? = nil,
        ebsRootVolumeSize: Int? = nil,
        instances: JobFlowInstancesConfig? = nil,
        jobFlowRole: String? = nil,
        kerberosAttributes: KerberosAttributes? = nil,
        logEncryptionKmsKeyId: String? = nil,
        logUri: String? = nil,
        managedScalingPolicy: ManagedScalingPolicy? = nil,
        name: String? = nil,
        newSupportedProducts: [SupportedProductConfig]? = nil,
        placementGroupConfigs: [PlacementGroupConfig]? = nil,
        releaseLabel: String? = nil,
        repoUpgradeOnBoot: RepoUpgradeOnBoot? = nil,
        scaleDownBehavior: ScaleDownBehavior? = nil,
        securityConfiguration: String? = nil,
        serviceRole: String? = nil,
        stepConcurrencyLevel: Int? = nil,
        steps: [StepConfig]? = nil,
        supportedProducts: [String]? = nil,
        tags: [Tag]? = nil,
        visibleToAllUsers: Bool = false
    )
    {
        self.additionalInfo = additionalInfo
        self.amiVersion = amiVersion
        self.applications = applications
        self.autoScalingRole = autoScalingRole
        self.bootstrapActions = bootstrapActions
        self.configurations = configurations
        self.customAmiId = customAmiId
        self.ebsRootVolumeSize = ebsRootVolumeSize
        self.instances = instances
        self.jobFlowRole = jobFlowRole
        self.kerberosAttributes = kerberosAttributes
        self.logEncryptionKmsKeyId = logEncryptionKmsKeyId
        self.logUri = logUri
        self.managedScalingPolicy = managedScalingPolicy
        self.name = name
        self.newSupportedProducts = newSupportedProducts
        self.placementGroupConfigs = placementGroupConfigs
        self.releaseLabel = releaseLabel
        self.repoUpgradeOnBoot = repoUpgradeOnBoot
        self.scaleDownBehavior = scaleDownBehavior
        self.securityConfiguration = securityConfiguration
        self.serviceRole = serviceRole
        self.stepConcurrencyLevel = stepConcurrencyLevel
        self.steps = steps
        self.supportedProducts = supportedProducts
        self.tags = tags
        self.visibleToAllUsers = visibleToAllUsers
    }
}

struct RunJobFlowInputBody: Equatable {
    public let name: String?
    public let logUri: String?
    public let logEncryptionKmsKeyId: String?
    public let additionalInfo: String?
    public let amiVersion: String?
    public let releaseLabel: String?
    public let instances: JobFlowInstancesConfig?
    public let steps: [StepConfig]?
    public let bootstrapActions: [BootstrapActionConfig]?
    public let supportedProducts: [String]?
    public let newSupportedProducts: [SupportedProductConfig]?
    public let applications: [Application]?
    public let configurations: [Configuration]?
    public let visibleToAllUsers: Bool
    public let jobFlowRole: String?
    public let serviceRole: String?
    public let tags: [Tag]?
    public let securityConfiguration: String?
    public let autoScalingRole: String?
    public let scaleDownBehavior: ScaleDownBehavior?
    public let customAmiId: String?
    public let ebsRootVolumeSize: Int?
    public let repoUpgradeOnBoot: RepoUpgradeOnBoot?
    public let kerberosAttributes: KerberosAttributes?
    public let stepConcurrencyLevel: Int?
    public let managedScalingPolicy: ManagedScalingPolicy?
    public let placementGroupConfigs: [PlacementGroupConfig]?
}

extension RunJobFlowInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case additionalInfo = "AdditionalInfo"
        case amiVersion = "AmiVersion"
        case applications = "Applications"
        case autoScalingRole = "AutoScalingRole"
        case bootstrapActions = "BootstrapActions"
        case configurations = "Configurations"
        case customAmiId = "CustomAmiId"
        case ebsRootVolumeSize = "EbsRootVolumeSize"
        case instances = "Instances"
        case jobFlowRole = "JobFlowRole"
        case kerberosAttributes = "KerberosAttributes"
        case logEncryptionKmsKeyId = "LogEncryptionKmsKeyId"
        case logUri = "LogUri"
        case managedScalingPolicy = "ManagedScalingPolicy"
        case name = "Name"
        case newSupportedProducts = "NewSupportedProducts"
        case placementGroupConfigs = "PlacementGroupConfigs"
        case releaseLabel = "ReleaseLabel"
        case repoUpgradeOnBoot = "RepoUpgradeOnBoot"
        case scaleDownBehavior = "ScaleDownBehavior"
        case securityConfiguration = "SecurityConfiguration"
        case serviceRole = "ServiceRole"
        case stepConcurrencyLevel = "StepConcurrencyLevel"
        case steps = "Steps"
        case supportedProducts = "SupportedProducts"
        case tags = "Tags"
        case visibleToAllUsers = "VisibleToAllUsers"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logUri)
        logUri = logUriDecoded
        let logEncryptionKmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logEncryptionKmsKeyId)
        logEncryptionKmsKeyId = logEncryptionKmsKeyIdDecoded
        let additionalInfoDecoded = try containerValues.decodeIfPresent(String.self, forKey: .additionalInfo)
        additionalInfo = additionalInfoDecoded
        let amiVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .amiVersion)
        amiVersion = amiVersionDecoded
        let releaseLabelDecoded = try containerValues.decodeIfPresent(String.self, forKey: .releaseLabel)
        releaseLabel = releaseLabelDecoded
        let instancesDecoded = try containerValues.decodeIfPresent(JobFlowInstancesConfig.self, forKey: .instances)
        instances = instancesDecoded
        let stepsContainer = try containerValues.decodeIfPresent([StepConfig?].self, forKey: .steps)
        var stepsDecoded0:[StepConfig]? = nil
        if let stepsContainer = stepsContainer {
            stepsDecoded0 = [StepConfig]()
            for structure0 in stepsContainer {
                if let structure0 = structure0 {
                    stepsDecoded0?.append(structure0)
                }
            }
        }
        steps = stepsDecoded0
        let bootstrapActionsContainer = try containerValues.decodeIfPresent([BootstrapActionConfig?].self, forKey: .bootstrapActions)
        var bootstrapActionsDecoded0:[BootstrapActionConfig]? = nil
        if let bootstrapActionsContainer = bootstrapActionsContainer {
            bootstrapActionsDecoded0 = [BootstrapActionConfig]()
            for structure0 in bootstrapActionsContainer {
                if let structure0 = structure0 {
                    bootstrapActionsDecoded0?.append(structure0)
                }
            }
        }
        bootstrapActions = bootstrapActionsDecoded0
        let supportedProductsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .supportedProducts)
        var supportedProductsDecoded0:[String]? = nil
        if let supportedProductsContainer = supportedProductsContainer {
            supportedProductsDecoded0 = [String]()
            for string0 in supportedProductsContainer {
                if let string0 = string0 {
                    supportedProductsDecoded0?.append(string0)
                }
            }
        }
        supportedProducts = supportedProductsDecoded0
        let newSupportedProductsContainer = try containerValues.decodeIfPresent([SupportedProductConfig?].self, forKey: .newSupportedProducts)
        var newSupportedProductsDecoded0:[SupportedProductConfig]? = nil
        if let newSupportedProductsContainer = newSupportedProductsContainer {
            newSupportedProductsDecoded0 = [SupportedProductConfig]()
            for structure0 in newSupportedProductsContainer {
                if let structure0 = structure0 {
                    newSupportedProductsDecoded0?.append(structure0)
                }
            }
        }
        newSupportedProducts = newSupportedProductsDecoded0
        let applicationsContainer = try containerValues.decodeIfPresent([Application?].self, forKey: .applications)
        var applicationsDecoded0:[Application]? = nil
        if let applicationsContainer = applicationsContainer {
            applicationsDecoded0 = [Application]()
            for structure0 in applicationsContainer {
                if let structure0 = structure0 {
                    applicationsDecoded0?.append(structure0)
                }
            }
        }
        applications = applicationsDecoded0
        let configurationsContainer = try containerValues.decodeIfPresent([Configuration?].self, forKey: .configurations)
        var configurationsDecoded0:[Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [Configuration]()
            for structure0 in configurationsContainer {
                if let structure0 = structure0 {
                    configurationsDecoded0?.append(structure0)
                }
            }
        }
        configurations = configurationsDecoded0
        let visibleToAllUsersDecoded = try containerValues.decode(Bool.self, forKey: .visibleToAllUsers)
        visibleToAllUsers = visibleToAllUsersDecoded
        let jobFlowRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobFlowRole)
        jobFlowRole = jobFlowRoleDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let autoScalingRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingRole)
        autoScalingRole = autoScalingRoleDecoded
        let scaleDownBehaviorDecoded = try containerValues.decodeIfPresent(ScaleDownBehavior.self, forKey: .scaleDownBehavior)
        scaleDownBehavior = scaleDownBehaviorDecoded
        let customAmiIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customAmiId)
        customAmiId = customAmiIdDecoded
        let ebsRootVolumeSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .ebsRootVolumeSize)
        ebsRootVolumeSize = ebsRootVolumeSizeDecoded
        let repoUpgradeOnBootDecoded = try containerValues.decodeIfPresent(RepoUpgradeOnBoot.self, forKey: .repoUpgradeOnBoot)
        repoUpgradeOnBoot = repoUpgradeOnBootDecoded
        let kerberosAttributesDecoded = try containerValues.decodeIfPresent(KerberosAttributes.self, forKey: .kerberosAttributes)
        kerberosAttributes = kerberosAttributesDecoded
        let stepConcurrencyLevelDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .stepConcurrencyLevel)
        stepConcurrencyLevel = stepConcurrencyLevelDecoded
        let managedScalingPolicyDecoded = try containerValues.decodeIfPresent(ManagedScalingPolicy.self, forKey: .managedScalingPolicy)
        managedScalingPolicy = managedScalingPolicyDecoded
        let placementGroupConfigsContainer = try containerValues.decodeIfPresent([PlacementGroupConfig?].self, forKey: .placementGroupConfigs)
        var placementGroupConfigsDecoded0:[PlacementGroupConfig]? = nil
        if let placementGroupConfigsContainer = placementGroupConfigsContainer {
            placementGroupConfigsDecoded0 = [PlacementGroupConfig]()
            for structure0 in placementGroupConfigsContainer {
                if let structure0 = structure0 {
                    placementGroupConfigsDecoded0?.append(structure0)
                }
            }
        }
        placementGroupConfigs = placementGroupConfigsDecoded0
    }
}

extension RunJobFlowOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RunJobFlowOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RunJobFlowOutputError: Equatable {
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension RunJobFlowOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RunJobFlowOutputResponse(clusterArn: \(String(describing: clusterArn)), jobFlowId: \(String(describing: jobFlowId)))"}
}

extension RunJobFlowOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: RunJobFlowOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.clusterArn = output.clusterArn
            self.jobFlowId = output.jobFlowId
        } else {
            self.clusterArn = nil
            self.jobFlowId = nil
        }
    }
}

/// <p> The result of the <a>RunJobFlow</a> operation. </p>
public struct RunJobFlowOutputResponse: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    public let clusterArn: String?
    /// <p>A unique identifier for the job flow.</p>
    public let jobFlowId: String?

    public init (
        clusterArn: String? = nil,
        jobFlowId: String? = nil
    )
    {
        self.clusterArn = clusterArn
        self.jobFlowId = jobFlowId
    }
}

struct RunJobFlowOutputResponseBody: Equatable {
    public let jobFlowId: String?
    public let clusterArn: String?
}

extension RunJobFlowOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterArn = "ClusterArn"
        case jobFlowId = "JobFlowId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobFlowIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobFlowId)
        jobFlowId = jobFlowIdDecoded
        let clusterArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
    }
}

public enum ScaleDownBehavior {
    case terminateAtInstanceHour
    case terminateAtTaskCompletion
    case sdkUnknown(String)
}

extension ScaleDownBehavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ScaleDownBehavior] {
        return [
            .terminateAtInstanceHour,
            .terminateAtTaskCompletion,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .terminateAtInstanceHour: return "TERMINATE_AT_INSTANCE_HOUR"
        case .terminateAtTaskCompletion: return "TERMINATE_AT_TASK_COMPLETION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ScaleDownBehavior(rawValue: rawValue) ?? ScaleDownBehavior.sdkUnknown(rawValue)
    }
}

extension ScalingAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case market = "Market"
        case simpleScalingPolicyConfiguration = "SimpleScalingPolicyConfiguration"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let market = market {
            try encodeContainer.encode(market.rawValue, forKey: .market)
        }
        if let simpleScalingPolicyConfiguration = simpleScalingPolicyConfiguration {
            try encodeContainer.encode(simpleScalingPolicyConfiguration, forKey: .simpleScalingPolicyConfiguration)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let marketDecoded = try containerValues.decodeIfPresent(MarketType.self, forKey: .market)
        market = marketDecoded
        let simpleScalingPolicyConfigurationDecoded = try containerValues.decodeIfPresent(SimpleScalingPolicyConfiguration.self, forKey: .simpleScalingPolicyConfiguration)
        simpleScalingPolicyConfiguration = simpleScalingPolicyConfigurationDecoded
    }
}

extension ScalingAction: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ScalingAction(market: \(String(describing: market)), simpleScalingPolicyConfiguration: \(String(describing: simpleScalingPolicyConfiguration)))"}
}

/// <p>The type of adjustment the automatic scaling activity makes when triggered, and the
///          periodicity of the adjustment.</p>
public struct ScalingAction: Equatable {
    /// <p>Not available for instance groups. Instance groups use the market type specified for the
    ///          group.</p>
    public let market: MarketType?
    /// <p>The type of adjustment the automatic scaling activity makes when triggered, and the
    ///          periodicity of the adjustment.</p>
    public let simpleScalingPolicyConfiguration: SimpleScalingPolicyConfiguration?

    public init (
        market: MarketType? = nil,
        simpleScalingPolicyConfiguration: SimpleScalingPolicyConfiguration? = nil
    )
    {
        self.market = market
        self.simpleScalingPolicyConfiguration = simpleScalingPolicyConfiguration
    }
}

extension ScalingConstraints: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maxCapacity = "MaxCapacity"
        case minCapacity = "MinCapacity"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxCapacity = maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if let minCapacity = minCapacity {
            try encodeContainer.encode(minCapacity, forKey: .minCapacity)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minCapacity)
        minCapacity = minCapacityDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
    }
}

extension ScalingConstraints: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ScalingConstraints(maxCapacity: \(String(describing: maxCapacity)), minCapacity: \(String(describing: minCapacity)))"}
}

/// <p>The upper and lower EC2 instance limits for an automatic scaling policy. Automatic
///          scaling activities triggered by automatic scaling rules will not cause an instance group to
///          grow above or below these limits.</p>
public struct ScalingConstraints: Equatable {
    /// <p>The upper boundary of EC2 instances in an instance group beyond which scaling activities
    ///          are not allowed to grow. Scale-out activities will not add instances beyond this
    ///          boundary.</p>
    public let maxCapacity: Int?
    /// <p>The lower boundary of EC2 instances in an instance group below which scaling activities
    ///          are not allowed to shrink. Scale-in activities will not terminate instances below this
    ///          boundary.</p>
    public let minCapacity: Int?

    public init (
        maxCapacity: Int? = nil,
        minCapacity: Int? = nil
    )
    {
        self.maxCapacity = maxCapacity
        self.minCapacity = minCapacity
    }
}

extension ScalingRule: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case action = "Action"
        case description = "Description"
        case name = "Name"
        case trigger = "Trigger"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let trigger = trigger {
            try encodeContainer.encode(trigger, forKey: .trigger)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let actionDecoded = try containerValues.decodeIfPresent(ScalingAction.self, forKey: .action)
        action = actionDecoded
        let triggerDecoded = try containerValues.decodeIfPresent(ScalingTrigger.self, forKey: .trigger)
        trigger = triggerDecoded
    }
}

extension ScalingRule: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ScalingRule(action: \(String(describing: action)), description: \(String(describing: description)), name: \(String(describing: name)), trigger: \(String(describing: trigger)))"}
}

/// <p>A scale-in or scale-out rule that defines scaling activity, including the CloudWatch
///          metric alarm that triggers activity, how EC2 instances are added or removed, and the
///          periodicity of adjustments. The automatic scaling policy for an instance group can comprise
///          one or more automatic scaling rules.</p>
public struct ScalingRule: Equatable {
    /// <p>The conditions that trigger an automatic scaling activity.</p>
    public let action: ScalingAction?
    /// <p>A friendly, more verbose description of the automatic scaling rule.</p>
    public let description: String?
    /// <p>The name used to identify an automatic scaling rule. Rule names must be unique within a
    ///          scaling policy.</p>
    public let name: String?
    /// <p>The CloudWatch alarm definition that determines when automatic scaling activity is
    ///          triggered.</p>
    public let trigger: ScalingTrigger?

    public init (
        action: ScalingAction? = nil,
        description: String? = nil,
        name: String? = nil,
        trigger: ScalingTrigger? = nil
    )
    {
        self.action = action
        self.description = description
        self.name = name
        self.trigger = trigger
    }
}

extension ScalingTrigger: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cloudWatchAlarmDefinition = "CloudWatchAlarmDefinition"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchAlarmDefinition = cloudWatchAlarmDefinition {
            try encodeContainer.encode(cloudWatchAlarmDefinition, forKey: .cloudWatchAlarmDefinition)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudWatchAlarmDefinitionDecoded = try containerValues.decodeIfPresent(CloudWatchAlarmDefinition.self, forKey: .cloudWatchAlarmDefinition)
        cloudWatchAlarmDefinition = cloudWatchAlarmDefinitionDecoded
    }
}

extension ScalingTrigger: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ScalingTrigger(cloudWatchAlarmDefinition: \(String(describing: cloudWatchAlarmDefinition)))"}
}

/// <p>The conditions that trigger an automatic scaling activity.</p>
public struct ScalingTrigger: Equatable {
    /// <p>The definition of a CloudWatch metric alarm. When the defined alarm conditions are met
    ///          along with other trigger parameters, scaling activity begins.</p>
    public let cloudWatchAlarmDefinition: CloudWatchAlarmDefinition?

    public init (
        cloudWatchAlarmDefinition: CloudWatchAlarmDefinition? = nil
    )
    {
        self.cloudWatchAlarmDefinition = cloudWatchAlarmDefinition
    }
}

extension ScriptBootstrapActionConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case args = "Args"
        case path = "Path"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let args = args {
            var argsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .args)
            for xmlstringlist0 in args {
                try argsContainer.encode(xmlstringlist0)
            }
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .path)
        path = pathDecoded
        let argsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .args)
        var argsDecoded0:[String]? = nil
        if let argsContainer = argsContainer {
            argsDecoded0 = [String]()
            for string0 in argsContainer {
                if let string0 = string0 {
                    argsDecoded0?.append(string0)
                }
            }
        }
        args = argsDecoded0
    }
}

extension ScriptBootstrapActionConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ScriptBootstrapActionConfig(args: \(String(describing: args)), path: \(String(describing: path)))"}
}

/// <p>Configuration of the script to run during a bootstrap action.</p>
public struct ScriptBootstrapActionConfig: Equatable {
    /// <p>A list of command line arguments to pass to the bootstrap action script.</p>
    public let args: [String]?
    /// <p>Location of the script to run during a bootstrap action. Can be either a location in
    ///          Amazon S3 or on a local file system.</p>
    public let path: String?

    public init (
        args: [String]? = nil,
        path: String? = nil
    )
    {
        self.args = args
        self.path = path
    }
}

extension SecurityConfigurationSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationDateTime = "CreationDateTime"
        case name = "Name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDateTime = creationDateTime {
            try encodeContainer.encode(creationDateTime.timeIntervalSince1970, forKey: .creationDateTime)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
    }
}

extension SecurityConfigurationSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SecurityConfigurationSummary(creationDateTime: \(String(describing: creationDateTime)), name: \(String(describing: name)))"}
}

/// <p>The creation date and time, and name, of a security configuration.</p>
public struct SecurityConfigurationSummary: Equatable {
    /// <p>The date and time the security configuration was created.</p>
    public let creationDateTime: Date?
    /// <p>The name of the security configuration.</p>
    public let name: String?

    public init (
        creationDateTime: Date? = nil,
        name: String? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.name = name
    }
}

extension SessionMappingDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime = "CreationTime"
        case identityId = "IdentityId"
        case identityName = "IdentityName"
        case identityType = "IdentityType"
        case lastModifiedTime = "LastModifiedTime"
        case sessionPolicyArn = "SessionPolicyArn"
        case studioId = "StudioId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let identityId = identityId {
            try encodeContainer.encode(identityId, forKey: .identityId)
        }
        if let identityName = identityName {
            try encodeContainer.encode(identityName, forKey: .identityName)
        }
        if let identityType = identityType {
            try encodeContainer.encode(identityType.rawValue, forKey: .identityType)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let sessionPolicyArn = sessionPolicyArn {
            try encodeContainer.encode(sessionPolicyArn, forKey: .sessionPolicyArn)
        }
        if let studioId = studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .studioId)
        studioId = studioIdDecoded
        let identityIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identityId)
        identityId = identityIdDecoded
        let identityNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identityName)
        identityName = identityNameDecoded
        let identityTypeDecoded = try containerValues.decodeIfPresent(IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
        let sessionPolicyArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sessionPolicyArn)
        sessionPolicyArn = sessionPolicyArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension SessionMappingDetail: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SessionMappingDetail(creationTime: \(String(describing: creationTime)), identityId: \(String(describing: identityId)), identityName: \(String(describing: identityName)), identityType: \(String(describing: identityType)), lastModifiedTime: \(String(describing: lastModifiedTime)), sessionPolicyArn: \(String(describing: sessionPolicyArn)), studioId: \(String(describing: studioId)))"}
}

/// <p>Details for an Amazon EMR Studio session mapping including creation time, user or group
///          ID, Studio ID, and so on.</p>
public struct SessionMappingDetail: Equatable {
    /// <p>The time the session mapping was created.</p>
    public let creationTime: Date?
    /// <p>The globally unique identifier (GUID) of the user or group.</p>
    public let identityId: String?
    /// <p>The name of the user or group. For more information, see <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName">UserName</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName">DisplayName</a> in the <i>AWS SSO Identity Store API
    ///          Reference</i>.</p>
    public let identityName: String?
    /// <p>Specifies whether the identity mapped to the Amazon EMR Studio is a user or a group.</p>
    public let identityType: IdentityType?
    /// <p>The time the session mapping was last modified.</p>
    public let lastModifiedTime: Date?
    /// <p>The Amazon Resource Name (ARN) of the session policy associated with the user or
    ///          group.</p>
    public let sessionPolicyArn: String?
    /// <p>The ID of the Amazon EMR Studio.</p>
    public let studioId: String?

    public init (
        creationTime: Date? = nil,
        identityId: String? = nil,
        identityName: String? = nil,
        identityType: IdentityType? = nil,
        lastModifiedTime: Date? = nil,
        sessionPolicyArn: String? = nil,
        studioId: String? = nil
    )
    {
        self.creationTime = creationTime
        self.identityId = identityId
        self.identityName = identityName
        self.identityType = identityType
        self.lastModifiedTime = lastModifiedTime
        self.sessionPolicyArn = sessionPolicyArn
        self.studioId = studioId
    }
}

extension SessionMappingSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime = "CreationTime"
        case identityId = "IdentityId"
        case identityName = "IdentityName"
        case identityType = "IdentityType"
        case sessionPolicyArn = "SessionPolicyArn"
        case studioId = "StudioId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let identityId = identityId {
            try encodeContainer.encode(identityId, forKey: .identityId)
        }
        if let identityName = identityName {
            try encodeContainer.encode(identityName, forKey: .identityName)
        }
        if let identityType = identityType {
            try encodeContainer.encode(identityType.rawValue, forKey: .identityType)
        }
        if let sessionPolicyArn = sessionPolicyArn {
            try encodeContainer.encode(sessionPolicyArn, forKey: .sessionPolicyArn)
        }
        if let studioId = studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .studioId)
        studioId = studioIdDecoded
        let identityIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identityId)
        identityId = identityIdDecoded
        let identityNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identityName)
        identityName = identityNameDecoded
        let identityTypeDecoded = try containerValues.decodeIfPresent(IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
        let sessionPolicyArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sessionPolicyArn)
        sessionPolicyArn = sessionPolicyArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension SessionMappingSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SessionMappingSummary(creationTime: \(String(describing: creationTime)), identityId: \(String(describing: identityId)), identityName: \(String(describing: identityName)), identityType: \(String(describing: identityType)), sessionPolicyArn: \(String(describing: sessionPolicyArn)), studioId: \(String(describing: studioId)))"}
}

/// <p>Details for an Amazon EMR Studio session mapping. The details do not include the time
///          the session mapping was last modified.</p>
public struct SessionMappingSummary: Equatable {
    /// <p>The time the session mapping was created.</p>
    public let creationTime: Date?
    /// <p>The globally unique identifier (GUID) of the user or group from the AWS SSO Identity
    ///          Store.</p>
    public let identityId: String?
    /// <p>The name of the user or group. For more information, see <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName">UserName</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName">DisplayName</a> in the <i>AWS SSO Identity Store API
    ///          Reference</i>.</p>
    public let identityName: String?
    /// <p>Specifies whether the identity mapped to the Amazon EMR Studio is a user or a group.</p>
    public let identityType: IdentityType?
    /// <p>The Amazon Resource Name (ARN) of the session policy associated with the user or
    ///          group.</p>
    public let sessionPolicyArn: String?
    /// <p>The ID of the Amazon EMR Studio.</p>
    public let studioId: String?

    public init (
        creationTime: Date? = nil,
        identityId: String? = nil,
        identityName: String? = nil,
        identityType: IdentityType? = nil,
        sessionPolicyArn: String? = nil,
        studioId: String? = nil
    )
    {
        self.creationTime = creationTime
        self.identityId = identityId
        self.identityName = identityName
        self.identityType = identityType
        self.sessionPolicyArn = sessionPolicyArn
        self.studioId = studioId
    }
}

public struct SetTerminationProtectionInputBodyMiddleware: Middleware {
    public let id: String = "SetTerminationProtectionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SetTerminationProtectionInput>,
                  next: H) -> Swift.Result<OperationOutput<SetTerminationProtectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SetTerminationProtectionInput>
    public typealias MOutput = OperationOutput<SetTerminationProtectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SetTerminationProtectionOutputError>
}

extension SetTerminationProtectionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SetTerminationProtectionInput(jobFlowIds: \(String(describing: jobFlowIds)), terminationProtected: \(String(describing: terminationProtected)))"}
}

extension SetTerminationProtectionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case jobFlowIds = "JobFlowIds"
        case terminationProtected = "TerminationProtected"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobFlowIds = jobFlowIds {
            var jobFlowIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobFlowIds)
            for xmlstringlist0 in jobFlowIds {
                try jobFlowIdsContainer.encode(xmlstringlist0)
            }
        }
        if terminationProtected != false {
            try encodeContainer.encode(terminationProtected, forKey: .terminationProtected)
        }
    }
}

public struct SetTerminationProtectionInputHeadersMiddleware: Middleware {
    public let id: String = "SetTerminationProtectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SetTerminationProtectionInput>,
                  next: H) -> Swift.Result<OperationOutput<SetTerminationProtectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SetTerminationProtectionInput>
    public typealias MOutput = OperationOutput<SetTerminationProtectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SetTerminationProtectionOutputError>
}

public struct SetTerminationProtectionInputQueryItemMiddleware: Middleware {
    public let id: String = "SetTerminationProtectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SetTerminationProtectionInput>,
                  next: H) -> Swift.Result<OperationOutput<SetTerminationProtectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SetTerminationProtectionInput>
    public typealias MOutput = OperationOutput<SetTerminationProtectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SetTerminationProtectionOutputError>
}

/// <p> The input argument to the <a>TerminationProtection</a> operation. </p>
public struct SetTerminationProtectionInput: Equatable {
    /// <p> A list of strings that uniquely identify the clusters to protect. This identifier is
    ///          returned by <a>RunJobFlow</a> and can also be obtained from <a>DescribeJobFlows</a> . </p>
    public let jobFlowIds: [String]?
    /// <p>A Boolean that indicates whether to protect the cluster and prevent the Amazon EC2
    ///          instances in the cluster from shutting down due to API calls, user intervention, or
    ///          job-flow error.</p>
    public let terminationProtected: Bool

    public init (
        jobFlowIds: [String]? = nil,
        terminationProtected: Bool = false
    )
    {
        self.jobFlowIds = jobFlowIds
        self.terminationProtected = terminationProtected
    }
}

struct SetTerminationProtectionInputBody: Equatable {
    public let jobFlowIds: [String]?
    public let terminationProtected: Bool
}

extension SetTerminationProtectionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case jobFlowIds = "JobFlowIds"
        case terminationProtected = "TerminationProtected"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobFlowIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .jobFlowIds)
        var jobFlowIdsDecoded0:[String]? = nil
        if let jobFlowIdsContainer = jobFlowIdsContainer {
            jobFlowIdsDecoded0 = [String]()
            for string0 in jobFlowIdsContainer {
                if let string0 = string0 {
                    jobFlowIdsDecoded0?.append(string0)
                }
            }
        }
        jobFlowIds = jobFlowIdsDecoded0
        let terminationProtectedDecoded = try containerValues.decode(Bool.self, forKey: .terminationProtected)
        terminationProtected = terminationProtectedDecoded
    }
}

extension SetTerminationProtectionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SetTerminationProtectionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetTerminationProtectionOutputError: Equatable {
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetTerminationProtectionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SetTerminationProtectionOutputResponse()"}
}

extension SetTerminationProtectionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct SetTerminationProtectionOutputResponse: Equatable {

    public init() {}
}

struct SetTerminationProtectionOutputResponseBody: Equatable {
}

extension SetTerminationProtectionOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct SetVisibleToAllUsersInputBodyMiddleware: Middleware {
    public let id: String = "SetVisibleToAllUsersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SetVisibleToAllUsersInput>,
                  next: H) -> Swift.Result<OperationOutput<SetVisibleToAllUsersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SetVisibleToAllUsersInput>
    public typealias MOutput = OperationOutput<SetVisibleToAllUsersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SetVisibleToAllUsersOutputError>
}

extension SetVisibleToAllUsersInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SetVisibleToAllUsersInput(jobFlowIds: \(String(describing: jobFlowIds)), visibleToAllUsers: \(String(describing: visibleToAllUsers)))"}
}

extension SetVisibleToAllUsersInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case jobFlowIds = "JobFlowIds"
        case visibleToAllUsers = "VisibleToAllUsers"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobFlowIds = jobFlowIds {
            var jobFlowIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobFlowIds)
            for xmlstringlist0 in jobFlowIds {
                try jobFlowIdsContainer.encode(xmlstringlist0)
            }
        }
        if visibleToAllUsers != false {
            try encodeContainer.encode(visibleToAllUsers, forKey: .visibleToAllUsers)
        }
    }
}

public struct SetVisibleToAllUsersInputHeadersMiddleware: Middleware {
    public let id: String = "SetVisibleToAllUsersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SetVisibleToAllUsersInput>,
                  next: H) -> Swift.Result<OperationOutput<SetVisibleToAllUsersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SetVisibleToAllUsersInput>
    public typealias MOutput = OperationOutput<SetVisibleToAllUsersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SetVisibleToAllUsersOutputError>
}

public struct SetVisibleToAllUsersInputQueryItemMiddleware: Middleware {
    public let id: String = "SetVisibleToAllUsersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SetVisibleToAllUsersInput>,
                  next: H) -> Swift.Result<OperationOutput<SetVisibleToAllUsersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SetVisibleToAllUsersInput>
    public typealias MOutput = OperationOutput<SetVisibleToAllUsersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SetVisibleToAllUsersOutputError>
}

/// <p>The input to the SetVisibleToAllUsers action.</p>
public struct SetVisibleToAllUsersInput: Equatable {
    /// <p>The unique identifier of the job flow (cluster).</p>
    public let jobFlowIds: [String]?
    /// <p>A value of <code>true</code> indicates that all IAM users in the AWS account can perform
    ///          cluster actions if they have the proper IAM policy permissions. This is the default. A
    ///          value of <code>false</code> indicates that only the IAM user who created the cluster can
    ///          perform actions.</p>
    public let visibleToAllUsers: Bool

    public init (
        jobFlowIds: [String]? = nil,
        visibleToAllUsers: Bool = false
    )
    {
        self.jobFlowIds = jobFlowIds
        self.visibleToAllUsers = visibleToAllUsers
    }
}

struct SetVisibleToAllUsersInputBody: Equatable {
    public let jobFlowIds: [String]?
    public let visibleToAllUsers: Bool
}

extension SetVisibleToAllUsersInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case jobFlowIds = "JobFlowIds"
        case visibleToAllUsers = "VisibleToAllUsers"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobFlowIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .jobFlowIds)
        var jobFlowIdsDecoded0:[String]? = nil
        if let jobFlowIdsContainer = jobFlowIdsContainer {
            jobFlowIdsDecoded0 = [String]()
            for string0 in jobFlowIdsContainer {
                if let string0 = string0 {
                    jobFlowIdsDecoded0?.append(string0)
                }
            }
        }
        jobFlowIds = jobFlowIdsDecoded0
        let visibleToAllUsersDecoded = try containerValues.decode(Bool.self, forKey: .visibleToAllUsers)
        visibleToAllUsers = visibleToAllUsersDecoded
    }
}

extension SetVisibleToAllUsersOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SetVisibleToAllUsersOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetVisibleToAllUsersOutputError: Equatable {
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetVisibleToAllUsersOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SetVisibleToAllUsersOutputResponse()"}
}

extension SetVisibleToAllUsersOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct SetVisibleToAllUsersOutputResponse: Equatable {

    public init() {}
}

struct SetVisibleToAllUsersOutputResponseBody: Equatable {
}

extension SetVisibleToAllUsersOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ShrinkPolicy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case decommissionTimeout = "DecommissionTimeout"
        case instanceResizePolicy = "InstanceResizePolicy"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let decommissionTimeout = decommissionTimeout {
            try encodeContainer.encode(decommissionTimeout, forKey: .decommissionTimeout)
        }
        if let instanceResizePolicy = instanceResizePolicy {
            try encodeContainer.encode(instanceResizePolicy, forKey: .instanceResizePolicy)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let decommissionTimeoutDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .decommissionTimeout)
        decommissionTimeout = decommissionTimeoutDecoded
        let instanceResizePolicyDecoded = try containerValues.decodeIfPresent(InstanceResizePolicy.self, forKey: .instanceResizePolicy)
        instanceResizePolicy = instanceResizePolicyDecoded
    }
}

extension ShrinkPolicy: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ShrinkPolicy(decommissionTimeout: \(String(describing: decommissionTimeout)), instanceResizePolicy: \(String(describing: instanceResizePolicy)))"}
}

/// <p>Policy for customizing shrink operations. Allows configuration of decommissioning
///          timeout and targeted instance shrinking.</p>
public struct ShrinkPolicy: Equatable {
    /// <p>The desired timeout for decommissioning an instance. Overrides the default YARN
    ///          decommissioning timeout.</p>
    public let decommissionTimeout: Int?
    /// <p>Custom policy for requesting termination protection or termination of specific instances
    ///          when shrinking an instance group.</p>
    public let instanceResizePolicy: InstanceResizePolicy?

    public init (
        decommissionTimeout: Int? = nil,
        instanceResizePolicy: InstanceResizePolicy? = nil
    )
    {
        self.decommissionTimeout = decommissionTimeout
        self.instanceResizePolicy = instanceResizePolicy
    }
}

extension SimpleScalingPolicyConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adjustmentType = "AdjustmentType"
        case coolDown = "CoolDown"
        case scalingAdjustment = "ScalingAdjustment"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adjustmentType = adjustmentType {
            try encodeContainer.encode(adjustmentType.rawValue, forKey: .adjustmentType)
        }
        if let coolDown = coolDown {
            try encodeContainer.encode(coolDown, forKey: .coolDown)
        }
        if let scalingAdjustment = scalingAdjustment {
            try encodeContainer.encode(scalingAdjustment, forKey: .scalingAdjustment)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adjustmentTypeDecoded = try containerValues.decodeIfPresent(AdjustmentType.self, forKey: .adjustmentType)
        adjustmentType = adjustmentTypeDecoded
        let scalingAdjustmentDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .scalingAdjustment)
        scalingAdjustment = scalingAdjustmentDecoded
        let coolDownDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .coolDown)
        coolDown = coolDownDecoded
    }
}

extension SimpleScalingPolicyConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SimpleScalingPolicyConfiguration(adjustmentType: \(String(describing: adjustmentType)), coolDown: \(String(describing: coolDown)), scalingAdjustment: \(String(describing: scalingAdjustment)))"}
}

/// <p>An automatic scaling configuration, which describes how the policy adds or removes
///          instances, the cooldown period, and the number of EC2 instances that will be added each
///          time the CloudWatch metric alarm condition is satisfied.</p>
public struct SimpleScalingPolicyConfiguration: Equatable {
    /// <p>The way in which EC2 instances are added (if <code>ScalingAdjustment</code> is a
    ///          positive number) or terminated (if <code>ScalingAdjustment</code> is a negative number)
    ///          each time the scaling activity is triggered. <code>CHANGE_IN_CAPACITY</code> is the
    ///          default. <code>CHANGE_IN_CAPACITY</code> indicates that the EC2 instance count increments
    ///          or decrements by <code>ScalingAdjustment</code>, which should be expressed as an integer.
    ///             <code>PERCENT_CHANGE_IN_CAPACITY</code> indicates the instance count increments or
    ///          decrements by the percentage specified by <code>ScalingAdjustment</code>, which should be
    ///          expressed as an integer. For example, 20 indicates an increase in 20% increments of cluster
    ///          capacity. <code>EXACT_CAPACITY</code> indicates the scaling activity results in an instance
    ///          group with the number of EC2 instances specified by <code>ScalingAdjustment</code>, which
    ///          should be expressed as a positive integer.</p>
    public let adjustmentType: AdjustmentType?
    /// <p>The amount of time, in seconds, after a scaling activity completes before any further
    ///          trigger-related scaling activities can start. The default value is 0.</p>
    public let coolDown: Int?
    /// <p>The amount by which to scale in or scale out, based on the specified
    ///             <code>AdjustmentType</code>. A positive value adds to the instance group's EC2 instance
    ///          count while a negative number removes instances. If <code>AdjustmentType</code> is set to
    ///             <code>EXACT_CAPACITY</code>, the number should only be a positive integer. If
    ///             <code>AdjustmentType</code> is set to <code>PERCENT_CHANGE_IN_CAPACITY</code>, the value
    ///          should express the percentage as an integer. For example, -20 indicates a decrease in 20%
    ///          increments of cluster capacity.</p>
    public let scalingAdjustment: Int?

    public init (
        adjustmentType: AdjustmentType? = nil,
        coolDown: Int? = nil,
        scalingAdjustment: Int? = nil
    )
    {
        self.adjustmentType = adjustmentType
        self.coolDown = coolDown
        self.scalingAdjustment = scalingAdjustment
    }
}

public enum SpotProvisioningAllocationStrategy {
    case capacityOptimized
    case sdkUnknown(String)
}

extension SpotProvisioningAllocationStrategy : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SpotProvisioningAllocationStrategy] {
        return [
            .capacityOptimized,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .capacityOptimized: return "capacity-optimized"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SpotProvisioningAllocationStrategy(rawValue: rawValue) ?? SpotProvisioningAllocationStrategy.sdkUnknown(rawValue)
    }
}

extension SpotProvisioningSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allocationStrategy = "AllocationStrategy"
        case blockDurationMinutes = "BlockDurationMinutes"
        case timeoutAction = "TimeoutAction"
        case timeoutDurationMinutes = "TimeoutDurationMinutes"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allocationStrategy = allocationStrategy {
            try encodeContainer.encode(allocationStrategy.rawValue, forKey: .allocationStrategy)
        }
        if let blockDurationMinutes = blockDurationMinutes {
            try encodeContainer.encode(blockDurationMinutes, forKey: .blockDurationMinutes)
        }
        if let timeoutAction = timeoutAction {
            try encodeContainer.encode(timeoutAction.rawValue, forKey: .timeoutAction)
        }
        if let timeoutDurationMinutes = timeoutDurationMinutes {
            try encodeContainer.encode(timeoutDurationMinutes, forKey: .timeoutDurationMinutes)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeoutDurationMinutesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .timeoutDurationMinutes)
        timeoutDurationMinutes = timeoutDurationMinutesDecoded
        let timeoutActionDecoded = try containerValues.decodeIfPresent(SpotProvisioningTimeoutAction.self, forKey: .timeoutAction)
        timeoutAction = timeoutActionDecoded
        let blockDurationMinutesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .blockDurationMinutes)
        blockDurationMinutes = blockDurationMinutesDecoded
        let allocationStrategyDecoded = try containerValues.decodeIfPresent(SpotProvisioningAllocationStrategy.self, forKey: .allocationStrategy)
        allocationStrategy = allocationStrategyDecoded
    }
}

extension SpotProvisioningSpecification: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SpotProvisioningSpecification(allocationStrategy: \(String(describing: allocationStrategy)), blockDurationMinutes: \(String(describing: blockDurationMinutes)), timeoutAction: \(String(describing: timeoutAction)), timeoutDurationMinutes: \(String(describing: timeoutDurationMinutes)))"}
}

/// <p>The launch specification for Spot Instances in the instance fleet, which determines the
///          defined duration, provisioning timeout behavior, and allocation strategy.</p>
///          <note>
///             <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and
///             later, excluding 5.0.x versions. Spot Instance allocation strategy is available in
///             Amazon EMR version 5.12.1 and later.</p>
///          </note>
public struct SpotProvisioningSpecification: Equatable {
    /// <p> Specifies the strategy to use in launching Spot Instance fleets. Currently, the only
    ///          option is capacity-optimized (the default), which launches instances from Spot Instance
    ///          pools with optimal capacity for the number of instances that are launching. </p>
    public let allocationStrategy: SpotProvisioningAllocationStrategy?
    /// <p>The defined duration for Spot Instances (also known as Spot blocks) in minutes. When
    ///          specified, the Spot Instance does not terminate before the defined duration expires, and
    ///          defined duration pricing for Spot Instances applies. Valid values are 60, 120, 180, 240,
    ///          300, or 360. The duration period starts as soon as a Spot Instance receives its instance
    ///          ID. At the end of the duration, Amazon EC2 marks the Spot Instance for termination and
    ///          provides a Spot Instance termination notice, which gives the instance a two-minute warning
    ///          before it terminates. </p>
    public let blockDurationMinutes: Int?
    /// <p>The action to take when <code>TargetSpotCapacity</code> has not been fulfilled when the
    ///             <code>TimeoutDurationMinutes</code> has expired; that is, when all Spot Instances could
    ///          not be provisioned within the Spot provisioning timeout. Valid values are
    ///             <code>TERMINATE_CLUSTER</code> and <code>SWITCH_TO_ON_DEMAND</code>. SWITCH_TO_ON_DEMAND
    ///          specifies that if no Spot Instances are available, On-Demand Instances should be
    ///          provisioned to fulfill any remaining Spot capacity.</p>
    public let timeoutAction: SpotProvisioningTimeoutAction?
    /// <p>The spot provisioning timeout period in minutes. If Spot Instances are not provisioned
    ///          within this time period, the <code>TimeOutAction</code> is taken. Minimum value is 5 and
    ///          maximum value is 1440. The timeout applies only during initial provisioning, when the
    ///          cluster is first created.</p>
    public let timeoutDurationMinutes: Int?

    public init (
        allocationStrategy: SpotProvisioningAllocationStrategy? = nil,
        blockDurationMinutes: Int? = nil,
        timeoutAction: SpotProvisioningTimeoutAction? = nil,
        timeoutDurationMinutes: Int? = nil
    )
    {
        self.allocationStrategy = allocationStrategy
        self.blockDurationMinutes = blockDurationMinutes
        self.timeoutAction = timeoutAction
        self.timeoutDurationMinutes = timeoutDurationMinutes
    }
}

public enum SpotProvisioningTimeoutAction {
    case switchToOnDemand
    case terminateCluster
    case sdkUnknown(String)
}

extension SpotProvisioningTimeoutAction : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SpotProvisioningTimeoutAction] {
        return [
            .switchToOnDemand,
            .terminateCluster,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .switchToOnDemand: return "SWITCH_TO_ON_DEMAND"
        case .terminateCluster: return "TERMINATE_CLUSTER"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SpotProvisioningTimeoutAction(rawValue: rawValue) ?? SpotProvisioningTimeoutAction.sdkUnknown(rawValue)
    }
}

public struct StartNotebookExecutionInputBodyMiddleware: Middleware {
    public let id: String = "StartNotebookExecutionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartNotebookExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<StartNotebookExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartNotebookExecutionInput>
    public typealias MOutput = OperationOutput<StartNotebookExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartNotebookExecutionOutputError>
}

extension StartNotebookExecutionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartNotebookExecutionInput(editorId: \(String(describing: editorId)), executionEngine: \(String(describing: executionEngine)), notebookExecutionName: \(String(describing: notebookExecutionName)), notebookInstanceSecurityGroupId: \(String(describing: notebookInstanceSecurityGroupId)), notebookParams: \(String(describing: notebookParams)), relativePath: \(String(describing: relativePath)), serviceRole: \(String(describing: serviceRole)), tags: \(String(describing: tags)))"}
}

extension StartNotebookExecutionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case editorId = "EditorId"
        case executionEngine = "ExecutionEngine"
        case notebookExecutionName = "NotebookExecutionName"
        case notebookInstanceSecurityGroupId = "NotebookInstanceSecurityGroupId"
        case notebookParams = "NotebookParams"
        case relativePath = "RelativePath"
        case serviceRole = "ServiceRole"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let editorId = editorId {
            try encodeContainer.encode(editorId, forKey: .editorId)
        }
        if let executionEngine = executionEngine {
            try encodeContainer.encode(executionEngine, forKey: .executionEngine)
        }
        if let notebookExecutionName = notebookExecutionName {
            try encodeContainer.encode(notebookExecutionName, forKey: .notebookExecutionName)
        }
        if let notebookInstanceSecurityGroupId = notebookInstanceSecurityGroupId {
            try encodeContainer.encode(notebookInstanceSecurityGroupId, forKey: .notebookInstanceSecurityGroupId)
        }
        if let notebookParams = notebookParams {
            try encodeContainer.encode(notebookParams, forKey: .notebookParams)
        }
        if let relativePath = relativePath {
            try encodeContainer.encode(relativePath, forKey: .relativePath)
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct StartNotebookExecutionInputHeadersMiddleware: Middleware {
    public let id: String = "StartNotebookExecutionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartNotebookExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<StartNotebookExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartNotebookExecutionInput>
    public typealias MOutput = OperationOutput<StartNotebookExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartNotebookExecutionOutputError>
}

public struct StartNotebookExecutionInputQueryItemMiddleware: Middleware {
    public let id: String = "StartNotebookExecutionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartNotebookExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<StartNotebookExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartNotebookExecutionInput>
    public typealias MOutput = OperationOutput<StartNotebookExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartNotebookExecutionOutputError>
}

public struct StartNotebookExecutionInput: Equatable {
    /// <p>The unique identifier of the EMR Notebook to use for notebook execution.</p>
    public let editorId: String?
    /// <p>Specifies the execution engine (cluster) that runs the notebook execution.</p>
    public let executionEngine: ExecutionEngineConfig?
    /// <p>An optional name for the notebook execution.</p>
    public let notebookExecutionName: String?
    /// <p>The unique identifier of the Amazon EC2 security group to associate with the EMR
    ///          Notebook for this notebook execution.</p>
    public let notebookInstanceSecurityGroupId: String?
    /// <p>Input parameters in JSON format passed to the EMR Notebook at runtime for
    ///          execution.</p>
    public let notebookParams: String?
    /// <p>The path and file name of the notebook file for this execution, relative to the path
    ///          specified for the EMR Notebook. For example, if you specify a path of
    ///             <code>s3://MyBucket/MyNotebooks</code> when you create an EMR Notebook for a notebook
    ///          with an ID of <code>e-ABCDEFGHIJK1234567890ABCD</code> (the <code>EditorID</code> of this
    ///          request), and you specify a <code>RelativePath</code> of
    ///             <code>my_notebook_executions/notebook_execution.ipynb</code>, the location of the file
    ///          for the notebook execution is
    ///             <code>s3://MyBucket/MyNotebooks/e-ABCDEFGHIJK1234567890ABCD/my_notebook_executions/notebook_execution.ipynb</code>.</p>
    public let relativePath: String?
    /// <p>The name or ARN of the IAM role that is used as the service role for Amazon EMR (the EMR
    ///          role) for the notebook execution.</p>
    public let serviceRole: String?
    /// <p>A list of tags associated with a notebook execution. Tags are user-defined key-value
    ///          pairs that consist of a required key string with a maximum of 128 characters and an
    ///          optional value string with a maximum of 256 characters.</p>
    public let tags: [Tag]?

    public init (
        editorId: String? = nil,
        executionEngine: ExecutionEngineConfig? = nil,
        notebookExecutionName: String? = nil,
        notebookInstanceSecurityGroupId: String? = nil,
        notebookParams: String? = nil,
        relativePath: String? = nil,
        serviceRole: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.editorId = editorId
        self.executionEngine = executionEngine
        self.notebookExecutionName = notebookExecutionName
        self.notebookInstanceSecurityGroupId = notebookInstanceSecurityGroupId
        self.notebookParams = notebookParams
        self.relativePath = relativePath
        self.serviceRole = serviceRole
        self.tags = tags
    }
}

struct StartNotebookExecutionInputBody: Equatable {
    public let editorId: String?
    public let relativePath: String?
    public let notebookExecutionName: String?
    public let notebookParams: String?
    public let executionEngine: ExecutionEngineConfig?
    public let serviceRole: String?
    public let notebookInstanceSecurityGroupId: String?
    public let tags: [Tag]?
}

extension StartNotebookExecutionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case editorId = "EditorId"
        case executionEngine = "ExecutionEngine"
        case notebookExecutionName = "NotebookExecutionName"
        case notebookInstanceSecurityGroupId = "NotebookInstanceSecurityGroupId"
        case notebookParams = "NotebookParams"
        case relativePath = "RelativePath"
        case serviceRole = "ServiceRole"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let editorIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .editorId)
        editorId = editorIdDecoded
        let relativePathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .relativePath)
        relativePath = relativePathDecoded
        let notebookExecutionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookExecutionName)
        notebookExecutionName = notebookExecutionNameDecoded
        let notebookParamsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookParams)
        notebookParams = notebookParamsDecoded
        let executionEngineDecoded = try containerValues.decodeIfPresent(ExecutionEngineConfig.self, forKey: .executionEngine)
        executionEngine = executionEngineDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let notebookInstanceSecurityGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookInstanceSecurityGroupId)
        notebookInstanceSecurityGroupId = notebookInstanceSecurityGroupIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension StartNotebookExecutionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartNotebookExecutionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartNotebookExecutionOutputError: Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartNotebookExecutionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StartNotebookExecutionOutputResponse(notebookExecutionId: \(String(describing: notebookExecutionId)))"}
}

extension StartNotebookExecutionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: StartNotebookExecutionOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.notebookExecutionId = output.notebookExecutionId
        } else {
            self.notebookExecutionId = nil
        }
    }
}

public struct StartNotebookExecutionOutputResponse: Equatable {
    /// <p>The unique identifier of the notebook execution.</p>
    public let notebookExecutionId: String?

    public init (
        notebookExecutionId: String? = nil
    )
    {
        self.notebookExecutionId = notebookExecutionId
    }
}

struct StartNotebookExecutionOutputResponseBody: Equatable {
    public let notebookExecutionId: String?
}

extension StartNotebookExecutionOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case notebookExecutionId = "NotebookExecutionId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookExecutionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookExecutionId)
        notebookExecutionId = notebookExecutionIdDecoded
    }
}

public enum Statistic {
    case average
    case maximum
    case minimum
    case sampleCount
    case sum
    case sdkUnknown(String)
}

extension Statistic : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Statistic] {
        return [
            .average,
            .maximum,
            .minimum,
            .sampleCount,
            .sum,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .average: return "AVERAGE"
        case .maximum: return "MAXIMUM"
        case .minimum: return "MINIMUM"
        case .sampleCount: return "SAMPLE_COUNT"
        case .sum: return "SUM"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Statistic(rawValue: rawValue) ?? Statistic.sdkUnknown(rawValue)
    }
}

extension Step: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actionOnFailure = "ActionOnFailure"
        case config = "Config"
        case id = "Id"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionOnFailure = actionOnFailure {
            try encodeContainer.encode(actionOnFailure.rawValue, forKey: .actionOnFailure)
        }
        if let config = config {
            try encodeContainer.encode(config, forKey: .config)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let configDecoded = try containerValues.decodeIfPresent(HadoopStepConfig.self, forKey: .config)
        config = configDecoded
        let actionOnFailureDecoded = try containerValues.decodeIfPresent(ActionOnFailure.self, forKey: .actionOnFailure)
        actionOnFailure = actionOnFailureDecoded
        let statusDecoded = try containerValues.decodeIfPresent(StepStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension Step: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Step(actionOnFailure: \(String(describing: actionOnFailure)), config: \(String(describing: config)), id: \(String(describing: id)), name: \(String(describing: name)), status: \(String(describing: status)))"}
}

/// <p>This represents a step in a cluster.</p>
public struct Step: Equatable {
    /// <p>The action to take when the cluster step fails. Possible values are TERMINATE_CLUSTER,
    ///          CANCEL_AND_WAIT, and CONTINUE. TERMINATE_JOB_FLOW is provided for backward compatibility.
    ///          We recommend using TERMINATE_CLUSTER instead.</p>
    public let actionOnFailure: ActionOnFailure?
    /// <p>The Hadoop job configuration of the cluster step.</p>
    public let config: HadoopStepConfig?
    /// <p>The identifier of the cluster step.</p>
    public let id: String?
    /// <p>The name of the cluster step.</p>
    public let name: String?
    /// <p>The current execution status details of the cluster step.</p>
    public let status: StepStatus?

    public init (
        actionOnFailure: ActionOnFailure? = nil,
        config: HadoopStepConfig? = nil,
        id: String? = nil,
        name: String? = nil,
        status: StepStatus? = nil
    )
    {
        self.actionOnFailure = actionOnFailure
        self.config = config
        self.id = id
        self.name = name
        self.status = status
    }
}

public enum StepCancellationOption {
    case sendInterrupt
    case terminateProcess
    case sdkUnknown(String)
}

extension StepCancellationOption : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [StepCancellationOption] {
        return [
            .sendInterrupt,
            .terminateProcess,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .sendInterrupt: return "SEND_INTERRUPT"
        case .terminateProcess: return "TERMINATE_PROCESS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = StepCancellationOption(rawValue: rawValue) ?? StepCancellationOption.sdkUnknown(rawValue)
    }
}

extension StepConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actionOnFailure = "ActionOnFailure"
        case hadoopJarStep = "HadoopJarStep"
        case name = "Name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionOnFailure = actionOnFailure {
            try encodeContainer.encode(actionOnFailure.rawValue, forKey: .actionOnFailure)
        }
        if let hadoopJarStep = hadoopJarStep {
            try encodeContainer.encode(hadoopJarStep, forKey: .hadoopJarStep)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let actionOnFailureDecoded = try containerValues.decodeIfPresent(ActionOnFailure.self, forKey: .actionOnFailure)
        actionOnFailure = actionOnFailureDecoded
        let hadoopJarStepDecoded = try containerValues.decodeIfPresent(HadoopJarStepConfig.self, forKey: .hadoopJarStep)
        hadoopJarStep = hadoopJarStepDecoded
    }
}

extension StepConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StepConfig(actionOnFailure: \(String(describing: actionOnFailure)), hadoopJarStep: \(String(describing: hadoopJarStep)), name: \(String(describing: name)))"}
}

/// <p>Specification of a cluster (job flow) step.</p>
public struct StepConfig: Equatable {
    /// <p>The action to take when the cluster step fails. Possible values are TERMINATE_CLUSTER,
    ///          CANCEL_AND_WAIT, and CONTINUE. TERMINATE_JOB_FLOW is provided for backward compatibility.
    ///          We recommend using TERMINATE_CLUSTER instead.</p>
    public let actionOnFailure: ActionOnFailure?
    /// <p>The JAR file used for the step.</p>
    public let hadoopJarStep: HadoopJarStepConfig?
    /// <p>The name of the step.</p>
    public let name: String?

    public init (
        actionOnFailure: ActionOnFailure? = nil,
        hadoopJarStep: HadoopJarStepConfig? = nil,
        name: String? = nil
    )
    {
        self.actionOnFailure = actionOnFailure
        self.hadoopJarStep = hadoopJarStep
        self.name = name
    }
}

extension StepDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case executionStatusDetail = "ExecutionStatusDetail"
        case stepConfig = "StepConfig"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionStatusDetail = executionStatusDetail {
            try encodeContainer.encode(executionStatusDetail, forKey: .executionStatusDetail)
        }
        if let stepConfig = stepConfig {
            try encodeContainer.encode(stepConfig, forKey: .stepConfig)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stepConfigDecoded = try containerValues.decodeIfPresent(StepConfig.self, forKey: .stepConfig)
        stepConfig = stepConfigDecoded
        let executionStatusDetailDecoded = try containerValues.decodeIfPresent(StepExecutionStatusDetail.self, forKey: .executionStatusDetail)
        executionStatusDetail = executionStatusDetailDecoded
    }
}

extension StepDetail: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StepDetail(executionStatusDetail: \(String(describing: executionStatusDetail)), stepConfig: \(String(describing: stepConfig)))"}
}

/// <p>Combines the execution state and configuration of a step.</p>
public struct StepDetail: Equatable {
    /// <p>The description of the step status.</p>
    public let executionStatusDetail: StepExecutionStatusDetail?
    /// <p>The step configuration.</p>
    public let stepConfig: StepConfig?

    public init (
        executionStatusDetail: StepExecutionStatusDetail? = nil,
        stepConfig: StepConfig? = nil
    )
    {
        self.executionStatusDetail = executionStatusDetail
        self.stepConfig = stepConfig
    }
}

public enum StepExecutionState {
    case cancelled
    case completed
    case `continue`
    case failed
    case interrupted
    case pending
    case running
    case sdkUnknown(String)
}

extension StepExecutionState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [StepExecutionState] {
        return [
            .cancelled,
            .completed,
            .continue,
            .failed,
            .interrupted,
            .pending,
            .running,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cancelled: return "CANCELLED"
        case .completed: return "COMPLETED"
        case .continue: return "CONTINUE"
        case .failed: return "FAILED"
        case .interrupted: return "INTERRUPTED"
        case .pending: return "PENDING"
        case .running: return "RUNNING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = StepExecutionState(rawValue: rawValue) ?? StepExecutionState.sdkUnknown(rawValue)
    }
}

extension StepExecutionStatusDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationDateTime = "CreationDateTime"
        case endDateTime = "EndDateTime"
        case lastStateChangeReason = "LastStateChangeReason"
        case startDateTime = "StartDateTime"
        case state = "State"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDateTime = creationDateTime {
            try encodeContainer.encode(creationDateTime.timeIntervalSince1970, forKey: .creationDateTime)
        }
        if let endDateTime = endDateTime {
            try encodeContainer.encode(endDateTime.timeIntervalSince1970, forKey: .endDateTime)
        }
        if let lastStateChangeReason = lastStateChangeReason {
            try encodeContainer.encode(lastStateChangeReason, forKey: .lastStateChangeReason)
        }
        if let startDateTime = startDateTime {
            try encodeContainer.encode(startDateTime.timeIntervalSince1970, forKey: .startDateTime)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(StepExecutionState.self, forKey: .state)
        state = stateDecoded
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let startDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startDateTime)
        startDateTime = startDateTimeDecoded
        let endDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endDateTime)
        endDateTime = endDateTimeDecoded
        let lastStateChangeReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastStateChangeReason)
        lastStateChangeReason = lastStateChangeReasonDecoded
    }
}

extension StepExecutionStatusDetail: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StepExecutionStatusDetail(creationDateTime: \(String(describing: creationDateTime)), endDateTime: \(String(describing: endDateTime)), lastStateChangeReason: \(String(describing: lastStateChangeReason)), startDateTime: \(String(describing: startDateTime)), state: \(String(describing: state)))"}
}

/// <p>The execution state of a step.</p>
public struct StepExecutionStatusDetail: Equatable {
    /// <p>The creation date and time of the step.</p>
    public let creationDateTime: Date?
    /// <p>The completion date and time of the step.</p>
    public let endDateTime: Date?
    /// <p>A description of the step's current state.</p>
    public let lastStateChangeReason: String?
    /// <p>The start date and time of the step.</p>
    public let startDateTime: Date?
    /// <p>The state of the step.</p>
    public let state: StepExecutionState?

    public init (
        creationDateTime: Date? = nil,
        endDateTime: Date? = nil,
        lastStateChangeReason: String? = nil,
        startDateTime: Date? = nil,
        state: StepExecutionState? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.endDateTime = endDateTime
        self.lastStateChangeReason = lastStateChangeReason
        self.startDateTime = startDateTime
        self.state = state
    }
}

public enum StepState {
    case cancelled
    case cancelPending
    case completed
    case failed
    case interrupted
    case pending
    case running
    case sdkUnknown(String)
}

extension StepState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [StepState] {
        return [
            .cancelled,
            .cancelPending,
            .completed,
            .failed,
            .interrupted,
            .pending,
            .running,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cancelled: return "CANCELLED"
        case .cancelPending: return "CANCEL_PENDING"
        case .completed: return "COMPLETED"
        case .failed: return "FAILED"
        case .interrupted: return "INTERRUPTED"
        case .pending: return "PENDING"
        case .running: return "RUNNING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = StepState(rawValue: rawValue) ?? StepState.sdkUnknown(rawValue)
    }
}

extension StepStateChangeReason: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(StepStateChangeReasonCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension StepStateChangeReason: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StepStateChangeReason(code: \(String(describing: code)), message: \(String(describing: message)))"}
}

/// <p>The details of the step state change reason.</p>
public struct StepStateChangeReason: Equatable {
    /// <p>The programmable code for the state change reason. Note: Currently, the service provides
    ///          no code for the state change.</p>
    public let code: StepStateChangeReasonCode?
    /// <p>The descriptive message for the state change reason.</p>
    public let message: String?

    public init (
        code: StepStateChangeReasonCode? = nil,
        message: String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

public enum StepStateChangeReasonCode {
    case `none`
    case sdkUnknown(String)
}

extension StepStateChangeReasonCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [StepStateChangeReasonCode] {
        return [
            .none,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .none: return "NONE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = StepStateChangeReasonCode(rawValue: rawValue) ?? StepStateChangeReasonCode.sdkUnknown(rawValue)
    }
}

extension StepStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case failureDetails = "FailureDetails"
        case state = "State"
        case stateChangeReason = "StateChangeReason"
        case timeline = "Timeline"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failureDetails = failureDetails {
            try encodeContainer.encode(failureDetails, forKey: .failureDetails)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateChangeReason = stateChangeReason {
            try encodeContainer.encode(stateChangeReason, forKey: .stateChangeReason)
        }
        if let timeline = timeline {
            try encodeContainer.encode(timeline, forKey: .timeline)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(StepState.self, forKey: .state)
        state = stateDecoded
        let stateChangeReasonDecoded = try containerValues.decodeIfPresent(StepStateChangeReason.self, forKey: .stateChangeReason)
        stateChangeReason = stateChangeReasonDecoded
        let failureDetailsDecoded = try containerValues.decodeIfPresent(FailureDetails.self, forKey: .failureDetails)
        failureDetails = failureDetailsDecoded
        let timelineDecoded = try containerValues.decodeIfPresent(StepTimeline.self, forKey: .timeline)
        timeline = timelineDecoded
    }
}

extension StepStatus: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StepStatus(failureDetails: \(String(describing: failureDetails)), state: \(String(describing: state)), stateChangeReason: \(String(describing: stateChangeReason)), timeline: \(String(describing: timeline)))"}
}

/// <p>The execution status details of the cluster step.</p>
public struct StepStatus: Equatable {
    /// <p>The details for the step failure including reason, message, and log file path where the
    ///          root cause was identified.</p>
    public let failureDetails: FailureDetails?
    /// <p>The execution state of the cluster step.</p>
    public let state: StepState?
    /// <p>The reason for the step execution status change.</p>
    public let stateChangeReason: StepStateChangeReason?
    /// <p>The timeline of the cluster step status over time.</p>
    public let timeline: StepTimeline?

    public init (
        failureDetails: FailureDetails? = nil,
        state: StepState? = nil,
        stateChangeReason: StepStateChangeReason? = nil,
        timeline: StepTimeline? = nil
    )
    {
        self.failureDetails = failureDetails
        self.state = state
        self.stateChangeReason = stateChangeReason
        self.timeline = timeline
    }
}

extension StepSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actionOnFailure = "ActionOnFailure"
        case config = "Config"
        case id = "Id"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionOnFailure = actionOnFailure {
            try encodeContainer.encode(actionOnFailure.rawValue, forKey: .actionOnFailure)
        }
        if let config = config {
            try encodeContainer.encode(config, forKey: .config)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let configDecoded = try containerValues.decodeIfPresent(HadoopStepConfig.self, forKey: .config)
        config = configDecoded
        let actionOnFailureDecoded = try containerValues.decodeIfPresent(ActionOnFailure.self, forKey: .actionOnFailure)
        actionOnFailure = actionOnFailureDecoded
        let statusDecoded = try containerValues.decodeIfPresent(StepStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension StepSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StepSummary(actionOnFailure: \(String(describing: actionOnFailure)), config: \(String(describing: config)), id: \(String(describing: id)), name: \(String(describing: name)), status: \(String(describing: status)))"}
}

/// <p>The summary of the cluster step.</p>
public struct StepSummary: Equatable {
    /// <p>The action to take when the cluster step fails. Possible values are TERMINATE_CLUSTER,
    ///          CANCEL_AND_WAIT, and CONTINUE. TERMINATE_JOB_FLOW is available for backward compatibility.
    ///          We recommend using TERMINATE_CLUSTER instead.</p>
    public let actionOnFailure: ActionOnFailure?
    /// <p>The Hadoop job configuration of the cluster step.</p>
    public let config: HadoopStepConfig?
    /// <p>The identifier of the cluster step.</p>
    public let id: String?
    /// <p>The name of the cluster step.</p>
    public let name: String?
    /// <p>The current execution status details of the cluster step.</p>
    public let status: StepStatus?

    public init (
        actionOnFailure: ActionOnFailure? = nil,
        config: HadoopStepConfig? = nil,
        id: String? = nil,
        name: String? = nil,
        status: StepStatus? = nil
    )
    {
        self.actionOnFailure = actionOnFailure
        self.config = config
        self.id = id
        self.name = name
        self.status = status
    }
}

extension StepTimeline: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationDateTime = "CreationDateTime"
        case endDateTime = "EndDateTime"
        case startDateTime = "StartDateTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDateTime = creationDateTime {
            try encodeContainer.encode(creationDateTime.timeIntervalSince1970, forKey: .creationDateTime)
        }
        if let endDateTime = endDateTime {
            try encodeContainer.encode(endDateTime.timeIntervalSince1970, forKey: .endDateTime)
        }
        if let startDateTime = startDateTime {
            try encodeContainer.encode(startDateTime.timeIntervalSince1970, forKey: .startDateTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let startDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startDateTime)
        startDateTime = startDateTimeDecoded
        let endDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endDateTime)
        endDateTime = endDateTimeDecoded
    }
}

extension StepTimeline: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StepTimeline(creationDateTime: \(String(describing: creationDateTime)), endDateTime: \(String(describing: endDateTime)), startDateTime: \(String(describing: startDateTime)))"}
}

/// <p>The timeline of the cluster step lifecycle.</p>
public struct StepTimeline: Equatable {
    /// <p>The date and time when the cluster step was created.</p>
    public let creationDateTime: Date?
    /// <p>The date and time when the cluster step execution completed or failed.</p>
    public let endDateTime: Date?
    /// <p>The date and time when the cluster step execution started.</p>
    public let startDateTime: Date?

    public init (
        creationDateTime: Date? = nil,
        endDateTime: Date? = nil,
        startDateTime: Date? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.endDateTime = endDateTime
        self.startDateTime = startDateTime
    }
}

public struct StopNotebookExecutionInputBodyMiddleware: Middleware {
    public let id: String = "StopNotebookExecutionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StopNotebookExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<StopNotebookExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StopNotebookExecutionInput>
    public typealias MOutput = OperationOutput<StopNotebookExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StopNotebookExecutionOutputError>
}

extension StopNotebookExecutionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StopNotebookExecutionInput(notebookExecutionId: \(String(describing: notebookExecutionId)))"}
}

extension StopNotebookExecutionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case notebookExecutionId = "NotebookExecutionId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let notebookExecutionId = notebookExecutionId {
            try encodeContainer.encode(notebookExecutionId, forKey: .notebookExecutionId)
        }
    }
}

public struct StopNotebookExecutionInputHeadersMiddleware: Middleware {
    public let id: String = "StopNotebookExecutionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StopNotebookExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<StopNotebookExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StopNotebookExecutionInput>
    public typealias MOutput = OperationOutput<StopNotebookExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StopNotebookExecutionOutputError>
}

public struct StopNotebookExecutionInputQueryItemMiddleware: Middleware {
    public let id: String = "StopNotebookExecutionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StopNotebookExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<StopNotebookExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StopNotebookExecutionInput>
    public typealias MOutput = OperationOutput<StopNotebookExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StopNotebookExecutionOutputError>
}

public struct StopNotebookExecutionInput: Equatable {
    /// <p>The unique identifier of the notebook execution.</p>
    public let notebookExecutionId: String?

    public init (
        notebookExecutionId: String? = nil
    )
    {
        self.notebookExecutionId = notebookExecutionId
    }
}

struct StopNotebookExecutionInputBody: Equatable {
    public let notebookExecutionId: String?
}

extension StopNotebookExecutionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case notebookExecutionId = "NotebookExecutionId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookExecutionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookExecutionId)
        notebookExecutionId = notebookExecutionIdDecoded
    }
}

extension StopNotebookExecutionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopNotebookExecutionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopNotebookExecutionOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopNotebookExecutionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StopNotebookExecutionOutputResponse()"}
}

extension StopNotebookExecutionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct StopNotebookExecutionOutputResponse: Equatable {

    public init() {}
}

struct StopNotebookExecutionOutputResponseBody: Equatable {
}

extension StopNotebookExecutionOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension Studio: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case authMode = "AuthMode"
        case creationTime = "CreationTime"
        case defaultS3Location = "DefaultS3Location"
        case description = "Description"
        case engineSecurityGroupId = "EngineSecurityGroupId"
        case name = "Name"
        case serviceRole = "ServiceRole"
        case studioArn = "StudioArn"
        case studioId = "StudioId"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
        case url = "Url"
        case userRole = "UserRole"
        case vpcId = "VpcId"
        case workspaceSecurityGroupId = "WorkspaceSecurityGroupId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authMode = authMode {
            try encodeContainer.encode(authMode.rawValue, forKey: .authMode)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let defaultS3Location = defaultS3Location {
            try encodeContainer.encode(defaultS3Location, forKey: .defaultS3Location)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let engineSecurityGroupId = engineSecurityGroupId {
            try encodeContainer.encode(engineSecurityGroupId, forKey: .engineSecurityGroupId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let studioArn = studioArn {
            try encodeContainer.encode(studioArn, forKey: .studioArn)
        }
        if let studioId = studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetidlist0 in subnetIds {
                try subnetIdsContainer.encode(subnetidlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
        if let userRole = userRole {
            try encodeContainer.encode(userRole, forKey: .userRole)
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
        if let workspaceSecurityGroupId = workspaceSecurityGroupId {
            try encodeContainer.encode(workspaceSecurityGroupId, forKey: .workspaceSecurityGroupId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .studioId)
        studioId = studioIdDecoded
        let studioArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .studioArn)
        studioArn = studioArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let authModeDecoded = try containerValues.decodeIfPresent(AuthMode.self, forKey: .authMode)
        authMode = authModeDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let serviceRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let userRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userRole)
        userRole = userRoleDecoded
        let workspaceSecurityGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workspaceSecurityGroupId)
        workspaceSecurityGroupId = workspaceSecurityGroupIdDecoded
        let engineSecurityGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineSecurityGroupId)
        engineSecurityGroupId = engineSecurityGroupIdDecoded
        let urlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .url)
        url = urlDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let defaultS3LocationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultS3Location)
        defaultS3Location = defaultS3LocationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension Studio: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Studio(authMode: \(String(describing: authMode)), creationTime: \(String(describing: creationTime)), defaultS3Location: \(String(describing: defaultS3Location)), description: \(String(describing: description)), engineSecurityGroupId: \(String(describing: engineSecurityGroupId)), name: \(String(describing: name)), serviceRole: \(String(describing: serviceRole)), studioArn: \(String(describing: studioArn)), studioId: \(String(describing: studioId)), subnetIds: \(String(describing: subnetIds)), tags: \(String(describing: tags)), url: \(String(describing: url)), userRole: \(String(describing: userRole)), vpcId: \(String(describing: vpcId)), workspaceSecurityGroupId: \(String(describing: workspaceSecurityGroupId)))"}
}

/// <p>Details for an Amazon EMR Studio including ID, creation time, name, and so on.</p>
public struct Studio: Equatable {
    /// <p>Specifies whether the Amazon EMR Studio authenticates users using single sign-on (SSO) or
    ///          IAM.</p>
    public let authMode: AuthMode?
    /// <p>The time the Amazon EMR Studio was created.</p>
    public let creationTime: Date?
    /// <p>The Amazon S3 location to back up Amazon EMR Studio Workspaces and notebook
    ///          files.</p>
    public let defaultS3Location: String?
    /// <p>The detailed description of the Amazon EMR Studio.</p>
    public let description: String?
    /// <p>The ID of the Engine security group associated with the Amazon EMR Studio. The Engine
    ///          security group allows inbound network traffic from resources in the Workspace security
    ///          group.</p>
    public let engineSecurityGroupId: String?
    /// <p>The name of the Amazon EMR Studio.</p>
    public let name: String?
    /// <p>The name of the IAM role assumed by the Amazon EMR Studio.</p>
    public let serviceRole: String?
    /// <p>The Amazon Resource Name (ARN) of the Amazon EMR Studio.</p>
    public let studioArn: String?
    /// <p>The ID of the Amazon EMR Studio.</p>
    public let studioId: String?
    /// <p>The list of IDs of the subnets associated with the Amazon EMR Studio.</p>
    public let subnetIds: [String]?
    /// <p>A list of tags associated with the Amazon EMR Studio.</p>
    public let tags: [Tag]?
    /// <p>The unique access URL of the Amazon EMR Studio.</p>
    public let url: String?
    /// <p>The name of the IAM role assumed by users logged in to the Amazon EMR Studio.</p>
    public let userRole: String?
    /// <p>The ID of the VPC associated with the Amazon EMR Studio.</p>
    public let vpcId: String?
    /// <p>The ID of the Workspace security group associated with the Amazon EMR Studio. The
    ///          Workspace security group allows outbound network traffic to resources in the Engine
    ///          security group and to the internet.</p>
    public let workspaceSecurityGroupId: String?

    public init (
        authMode: AuthMode? = nil,
        creationTime: Date? = nil,
        defaultS3Location: String? = nil,
        description: String? = nil,
        engineSecurityGroupId: String? = nil,
        name: String? = nil,
        serviceRole: String? = nil,
        studioArn: String? = nil,
        studioId: String? = nil,
        subnetIds: [String]? = nil,
        tags: [Tag]? = nil,
        url: String? = nil,
        userRole: String? = nil,
        vpcId: String? = nil,
        workspaceSecurityGroupId: String? = nil
    )
    {
        self.authMode = authMode
        self.creationTime = creationTime
        self.defaultS3Location = defaultS3Location
        self.description = description
        self.engineSecurityGroupId = engineSecurityGroupId
        self.name = name
        self.serviceRole = serviceRole
        self.studioArn = studioArn
        self.studioId = studioId
        self.subnetIds = subnetIds
        self.tags = tags
        self.url = url
        self.userRole = userRole
        self.vpcId = vpcId
        self.workspaceSecurityGroupId = workspaceSecurityGroupId
    }
}

extension StudioSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime = "CreationTime"
        case description = "Description"
        case name = "Name"
        case studioId = "StudioId"
        case url = "Url"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let studioId = studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .studioId)
        studioId = studioIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let urlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .url)
        url = urlDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension StudioSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StudioSummary(creationTime: \(String(describing: creationTime)), description: \(String(describing: description)), name: \(String(describing: name)), studioId: \(String(describing: studioId)), url: \(String(describing: url)), vpcId: \(String(describing: vpcId)))"}
}

/// <p>Details for an Amazon EMR Studio, including ID, Name, VPC, and Description. The details
///          do not include subnets, IAM roles, security groups, or tags associated with the
///          Studio.</p>
public struct StudioSummary: Equatable {
    /// <p>The time when the Amazon EMR Studio was created.</p>
    public let creationTime: Date?
    /// <p>The detailed description of the Amazon EMR Studio.</p>
    public let description: String?
    /// <p>The name of the Amazon EMR Studio.</p>
    public let name: String?
    /// <p>The ID of the Amazon EMR Studio.</p>
    public let studioId: String?
    /// <p>The unique access URL of the Amazon EMR Studio.</p>
    public let url: String?
    /// <p>The ID of the Virtual Private Cloud (Amazon VPC) associated with the Amazon EMR
    ///          Studio.</p>
    public let vpcId: String?

    public init (
        creationTime: Date? = nil,
        description: String? = nil,
        name: String? = nil,
        studioId: String? = nil,
        url: String? = nil,
        vpcId: String? = nil
    )
    {
        self.creationTime = creationTime
        self.description = description
        self.name = name
        self.studioId = studioId
        self.url = url
        self.vpcId = vpcId
    }
}

extension SupportedProductConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case args = "Args"
        case name = "Name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let args = args {
            var argsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .args)
            for xmlstringlist0 in args {
                try argsContainer.encode(xmlstringlist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let argsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .args)
        var argsDecoded0:[String]? = nil
        if let argsContainer = argsContainer {
            argsDecoded0 = [String]()
            for string0 in argsContainer {
                if let string0 = string0 {
                    argsDecoded0?.append(string0)
                }
            }
        }
        args = argsDecoded0
    }
}

extension SupportedProductConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SupportedProductConfig(args: \(String(describing: args)), name: \(String(describing: name)))"}
}

/// <p>The list of supported product configurations that allow user-supplied arguments. EMR
///          accepts these arguments and forwards them to the corresponding installation script as
///          bootstrap action arguments.</p>
public struct SupportedProductConfig: Equatable {
    /// <p>The list of user-supplied arguments.</p>
    public let args: [String]?
    /// <p>The name of the product configuration.</p>
    public let name: String?

    public init (
        args: [String]? = nil,
        name: String? = nil
    )
    {
        self.args = args
        self.name = name
    }
}

extension Tag: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
    }
}

extension Tag: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Tag(key: \(String(describing: key)), value: \(String(describing: value)))"}
}

/// <p>A key-value pair containing user-defined metadata that you can associate with an Amazon
///          EMR resource. Tags make it easier to associate clusters in various ways, such as grouping
///          clusters to track your Amazon EMR resource allocation costs. For more information, see
///             <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-tags.html">Tag
///             Clusters</a>. </p>
public struct Tag: Equatable {
    /// <p>A user-defined key, which is the minimum required information for a valid tag. For more
    ///          information, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-tags.html">Tag </a>. </p>
    public let key: String?
    /// <p>A user-defined value, which is optional in a tag. For more information, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-tags.html">Tag
    ///             Clusters</a>. </p>
    public let value: String?

    public init (
        key: String? = nil,
        value: String? = nil
    )
    {
        self.key = key
        self.value = value
    }
}

public struct TerminateJobFlowsInputBodyMiddleware: Middleware {
    public let id: String = "TerminateJobFlowsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TerminateJobFlowsInput>,
                  next: H) -> Swift.Result<OperationOutput<TerminateJobFlowsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TerminateJobFlowsInput>
    public typealias MOutput = OperationOutput<TerminateJobFlowsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TerminateJobFlowsOutputError>
}

extension TerminateJobFlowsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TerminateJobFlowsInput(jobFlowIds: \(String(describing: jobFlowIds)))"}
}

extension TerminateJobFlowsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case jobFlowIds = "JobFlowIds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobFlowIds = jobFlowIds {
            var jobFlowIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobFlowIds)
            for xmlstringlist0 in jobFlowIds {
                try jobFlowIdsContainer.encode(xmlstringlist0)
            }
        }
    }
}

public struct TerminateJobFlowsInputHeadersMiddleware: Middleware {
    public let id: String = "TerminateJobFlowsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TerminateJobFlowsInput>,
                  next: H) -> Swift.Result<OperationOutput<TerminateJobFlowsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TerminateJobFlowsInput>
    public typealias MOutput = OperationOutput<TerminateJobFlowsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TerminateJobFlowsOutputError>
}

public struct TerminateJobFlowsInputQueryItemMiddleware: Middleware {
    public let id: String = "TerminateJobFlowsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TerminateJobFlowsInput>,
                  next: H) -> Swift.Result<OperationOutput<TerminateJobFlowsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TerminateJobFlowsInput>
    public typealias MOutput = OperationOutput<TerminateJobFlowsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TerminateJobFlowsOutputError>
}

/// <p> Input to the <a>TerminateJobFlows</a> operation. </p>
public struct TerminateJobFlowsInput: Equatable {
    /// <p>A list of job flows to be shut down.</p>
    public let jobFlowIds: [String]?

    public init (
        jobFlowIds: [String]? = nil
    )
    {
        self.jobFlowIds = jobFlowIds
    }
}

struct TerminateJobFlowsInputBody: Equatable {
    public let jobFlowIds: [String]?
}

extension TerminateJobFlowsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case jobFlowIds = "JobFlowIds"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobFlowIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .jobFlowIds)
        var jobFlowIdsDecoded0:[String]? = nil
        if let jobFlowIdsContainer = jobFlowIdsContainer {
            jobFlowIdsDecoded0 = [String]()
            for string0 in jobFlowIdsContainer {
                if let string0 = string0 {
                    jobFlowIdsDecoded0?.append(string0)
                }
            }
        }
        jobFlowIds = jobFlowIdsDecoded0
    }
}

extension TerminateJobFlowsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TerminateJobFlowsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TerminateJobFlowsOutputError: Equatable {
    case internalServerError(InternalServerError)
    case unknown(UnknownAWSHttpServiceError)
}

extension TerminateJobFlowsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TerminateJobFlowsOutputResponse()"}
}

extension TerminateJobFlowsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct TerminateJobFlowsOutputResponse: Equatable {

    public init() {}
}

struct TerminateJobFlowsOutputResponseBody: Equatable {
}

extension TerminateJobFlowsOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public enum Unit {
    case bits
    case bitsPerSecond
    case bytes
    case bytesPerSecond
    case count
    case countPerSecond
    case gigaBits
    case gigaBitsPerSecond
    case gigaBytes
    case gigaBytesPerSecond
    case kiloBits
    case kiloBitsPerSecond
    case kiloBytes
    case kiloBytesPerSecond
    case megaBits
    case megaBitsPerSecond
    case megaBytes
    case megaBytesPerSecond
    case microSeconds
    case milliSeconds
    case `none`
    case percent
    case seconds
    case teraBits
    case teraBitsPerSecond
    case teraBytes
    case teraBytesPerSecond
    case sdkUnknown(String)
}

extension Unit : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Unit] {
        return [
            .bits,
            .bitsPerSecond,
            .bytes,
            .bytesPerSecond,
            .count,
            .countPerSecond,
            .gigaBits,
            .gigaBitsPerSecond,
            .gigaBytes,
            .gigaBytesPerSecond,
            .kiloBits,
            .kiloBitsPerSecond,
            .kiloBytes,
            .kiloBytesPerSecond,
            .megaBits,
            .megaBitsPerSecond,
            .megaBytes,
            .megaBytesPerSecond,
            .microSeconds,
            .milliSeconds,
            .none,
            .percent,
            .seconds,
            .teraBits,
            .teraBitsPerSecond,
            .teraBytes,
            .teraBytesPerSecond,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .bits: return "BITS"
        case .bitsPerSecond: return "BITS_PER_SECOND"
        case .bytes: return "BYTES"
        case .bytesPerSecond: return "BYTES_PER_SECOND"
        case .count: return "COUNT"
        case .countPerSecond: return "COUNT_PER_SECOND"
        case .gigaBits: return "GIGA_BITS"
        case .gigaBitsPerSecond: return "GIGA_BITS_PER_SECOND"
        case .gigaBytes: return "GIGA_BYTES"
        case .gigaBytesPerSecond: return "GIGA_BYTES_PER_SECOND"
        case .kiloBits: return "KILO_BITS"
        case .kiloBitsPerSecond: return "KILO_BITS_PER_SECOND"
        case .kiloBytes: return "KILO_BYTES"
        case .kiloBytesPerSecond: return "KILO_BYTES_PER_SECOND"
        case .megaBits: return "MEGA_BITS"
        case .megaBitsPerSecond: return "MEGA_BITS_PER_SECOND"
        case .megaBytes: return "MEGA_BYTES"
        case .megaBytesPerSecond: return "MEGA_BYTES_PER_SECOND"
        case .microSeconds: return "MICRO_SECONDS"
        case .milliSeconds: return "MILLI_SECONDS"
        case .none: return "NONE"
        case .percent: return "PERCENT"
        case .seconds: return "SECONDS"
        case .teraBits: return "TERA_BITS"
        case .teraBitsPerSecond: return "TERA_BITS_PER_SECOND"
        case .teraBytes: return "TERA_BYTES"
        case .teraBytesPerSecond: return "TERA_BYTES_PER_SECOND"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Unit(rawValue: rawValue) ?? Unit.sdkUnknown(rawValue)
    }
}

public struct UpdateStudioInputBodyMiddleware: Middleware {
    public let id: String = "UpdateStudioInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateStudioInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateStudioOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateStudioInput>
    public typealias MOutput = OperationOutput<UpdateStudioOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateStudioOutputError>
}

extension UpdateStudioInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateStudioInput(defaultS3Location: \(String(describing: defaultS3Location)), description: \(String(describing: description)), name: \(String(describing: name)), studioId: \(String(describing: studioId)), subnetIds: \(String(describing: subnetIds)))"}
}

extension UpdateStudioInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case defaultS3Location = "DefaultS3Location"
        case description = "Description"
        case name = "Name"
        case studioId = "StudioId"
        case subnetIds = "SubnetIds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultS3Location = defaultS3Location {
            try encodeContainer.encode(defaultS3Location, forKey: .defaultS3Location)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let studioId = studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetidlist0 in subnetIds {
                try subnetIdsContainer.encode(subnetidlist0)
            }
        }
    }
}

public struct UpdateStudioInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateStudioInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateStudioInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateStudioOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateStudioInput>
    public typealias MOutput = OperationOutput<UpdateStudioOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateStudioOutputError>
}

public struct UpdateStudioInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateStudioInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateStudioInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateStudioOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateStudioInput>
    public typealias MOutput = OperationOutput<UpdateStudioOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateStudioOutputError>
}

public struct UpdateStudioInput: Equatable {
    /// <p>The Amazon S3 location to back up Workspaces and notebook files for the Amazon EMR Studio.</p>
    public let defaultS3Location: String?
    /// <p>A detailed description to assign to the Amazon EMR Studio.</p>
    public let description: String?
    /// <p>A descriptive name for the Amazon EMR Studio.</p>
    public let name: String?
    /// <p>The ID of the Amazon EMR Studio to update.</p>
    public let studioId: String?
    /// <p>A list of subnet IDs to associate with the Amazon EMR Studio. The list can include new subnet IDs, but must also include all of the subnet IDs previously associated with the Studio. The list order does not matter. A Studio can have a maximum of 5 subnets. The subnets must belong to the same VPC as the Studio. </p>
    public let subnetIds: [String]?

    public init (
        defaultS3Location: String? = nil,
        description: String? = nil,
        name: String? = nil,
        studioId: String? = nil,
        subnetIds: [String]? = nil
    )
    {
        self.defaultS3Location = defaultS3Location
        self.description = description
        self.name = name
        self.studioId = studioId
        self.subnetIds = subnetIds
    }
}

struct UpdateStudioInputBody: Equatable {
    public let studioId: String?
    public let name: String?
    public let description: String?
    public let subnetIds: [String]?
    public let defaultS3Location: String?
}

extension UpdateStudioInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case defaultS3Location = "DefaultS3Location"
        case description = "Description"
        case name = "Name"
        case studioId = "StudioId"
        case subnetIds = "SubnetIds"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .studioId)
        studioId = studioIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let defaultS3LocationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultS3Location)
        defaultS3Location = defaultS3LocationDecoded
    }
}

extension UpdateStudioOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateStudioOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateStudioOutputError: Equatable {
    case internalServerException(InternalServerException)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateStudioOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateStudioOutputResponse()"}
}

extension UpdateStudioOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct UpdateStudioOutputResponse: Equatable {

    public init() {}
}

struct UpdateStudioOutputResponseBody: Equatable {
}

extension UpdateStudioOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct UpdateStudioSessionMappingInputBodyMiddleware: Middleware {
    public let id: String = "UpdateStudioSessionMappingInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateStudioSessionMappingInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateStudioSessionMappingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateStudioSessionMappingInput>
    public typealias MOutput = OperationOutput<UpdateStudioSessionMappingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateStudioSessionMappingOutputError>
}

extension UpdateStudioSessionMappingInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateStudioSessionMappingInput(identityId: \(String(describing: identityId)), identityName: \(String(describing: identityName)), identityType: \(String(describing: identityType)), sessionPolicyArn: \(String(describing: sessionPolicyArn)), studioId: \(String(describing: studioId)))"}
}

extension UpdateStudioSessionMappingInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case identityId = "IdentityId"
        case identityName = "IdentityName"
        case identityType = "IdentityType"
        case sessionPolicyArn = "SessionPolicyArn"
        case studioId = "StudioId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identityId = identityId {
            try encodeContainer.encode(identityId, forKey: .identityId)
        }
        if let identityName = identityName {
            try encodeContainer.encode(identityName, forKey: .identityName)
        }
        if let identityType = identityType {
            try encodeContainer.encode(identityType.rawValue, forKey: .identityType)
        }
        if let sessionPolicyArn = sessionPolicyArn {
            try encodeContainer.encode(sessionPolicyArn, forKey: .sessionPolicyArn)
        }
        if let studioId = studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
    }
}

public struct UpdateStudioSessionMappingInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateStudioSessionMappingInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateStudioSessionMappingInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateStudioSessionMappingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateStudioSessionMappingInput>
    public typealias MOutput = OperationOutput<UpdateStudioSessionMappingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateStudioSessionMappingOutputError>
}

public struct UpdateStudioSessionMappingInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateStudioSessionMappingInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateStudioSessionMappingInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateStudioSessionMappingOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateStudioSessionMappingInput>
    public typealias MOutput = OperationOutput<UpdateStudioSessionMappingOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateStudioSessionMappingOutputError>
}

public struct UpdateStudioSessionMappingInput: Equatable {
    /// <p>The globally unique identifier (GUID) of the user or group. For more information, see
    ///             <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserId">UserId</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-GroupId">GroupId</a> in the <i>AWS SSO Identity Store API Reference</i>.
    ///          Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
    public let identityId: String?
    /// <p>The name of the user or group to update. For more information, see <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName">UserName</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName">DisplayName</a> in the <i>AWS SSO Identity Store API Reference</i>.
    ///          Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
    public let identityName: String?
    /// <p>Specifies whether the identity to update is a user or a group.</p>
    public let identityType: IdentityType?
    /// <p>The Amazon Resource Name (ARN) of the session policy to associate with the specified
    ///          user or group.</p>
    public let sessionPolicyArn: String?
    /// <p>The ID of the Amazon EMR Studio.</p>
    public let studioId: String?

    public init (
        identityId: String? = nil,
        identityName: String? = nil,
        identityType: IdentityType? = nil,
        sessionPolicyArn: String? = nil,
        studioId: String? = nil
    )
    {
        self.identityId = identityId
        self.identityName = identityName
        self.identityType = identityType
        self.sessionPolicyArn = sessionPolicyArn
        self.studioId = studioId
    }
}

struct UpdateStudioSessionMappingInputBody: Equatable {
    public let studioId: String?
    public let identityId: String?
    public let identityName: String?
    public let identityType: IdentityType?
    public let sessionPolicyArn: String?
}

extension UpdateStudioSessionMappingInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case identityId = "IdentityId"
        case identityName = "IdentityName"
        case identityType = "IdentityType"
        case sessionPolicyArn = "SessionPolicyArn"
        case studioId = "StudioId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .studioId)
        studioId = studioIdDecoded
        let identityIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identityId)
        identityId = identityIdDecoded
        let identityNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identityName)
        identityName = identityNameDecoded
        let identityTypeDecoded = try containerValues.decodeIfPresent(IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
        let sessionPolicyArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sessionPolicyArn)
        sessionPolicyArn = sessionPolicyArnDecoded
    }
}

extension UpdateStudioSessionMappingOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateStudioSessionMappingOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateStudioSessionMappingOutputError: Equatable {
    case internalServerError(InternalServerError)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateStudioSessionMappingOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateStudioSessionMappingOutputResponse()"}
}

extension UpdateStudioSessionMappingOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct UpdateStudioSessionMappingOutputResponse: Equatable {

    public init() {}
}

struct UpdateStudioSessionMappingOutputResponseBody: Equatable {
}

extension UpdateStudioSessionMappingOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension VolumeSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case iops = "Iops"
        case sizeInGB = "SizeInGB"
        case volumeType = "VolumeType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let iops = iops {
            try encodeContainer.encode(iops, forKey: .iops)
        }
        if let sizeInGB = sizeInGB {
            try encodeContainer.encode(sizeInGB, forKey: .sizeInGB)
        }
        if let volumeType = volumeType {
            try encodeContainer.encode(volumeType, forKey: .volumeType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .volumeType)
        volumeType = volumeTypeDecoded
        let iopsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .iops)
        iops = iopsDecoded
        let sizeInGBDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .sizeInGB)
        sizeInGB = sizeInGBDecoded
    }
}

extension VolumeSpecification: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VolumeSpecification(iops: \(String(describing: iops)), sizeInGB: \(String(describing: sizeInGB)), volumeType: \(String(describing: volumeType)))"}
}

/// <p>EBS volume specifications such as volume type, IOPS, and size (GiB) that will be
///          requested for the EBS volume attached to an EC2 instance in the cluster.</p>
public struct VolumeSpecification: Equatable {
    /// <p>The number of I/O operations per second (IOPS) that the volume supports.</p>
    public let iops: Int?
    /// <p>The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume
    ///          type is EBS-optimized, the minimum value is 10.</p>
    public let sizeInGB: Int?
    /// <p>The volume type. Volume types supported are gp2, io1, standard.</p>
    public let volumeType: String?

    public init (
        iops: Int? = nil,
        sizeInGB: Int? = nil,
        volumeType: String? = nil
    )
    {
        self.iops = iops
        self.sizeInGB = sizeInGB
        self.volumeType = volumeType
    }
}
