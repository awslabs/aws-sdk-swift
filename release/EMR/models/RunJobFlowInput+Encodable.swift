// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RunJobFlowInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case additionalInfo = "AdditionalInfo"
        case amiVersion = "AmiVersion"
        case applications = "Applications"
        case autoScalingRole = "AutoScalingRole"
        case bootstrapActions = "BootstrapActions"
        case configurations = "Configurations"
        case customAmiId = "CustomAmiId"
        case ebsRootVolumeSize = "EbsRootVolumeSize"
        case instances = "Instances"
        case jobFlowRole = "JobFlowRole"
        case kerberosAttributes = "KerberosAttributes"
        case logEncryptionKmsKeyId = "LogEncryptionKmsKeyId"
        case logUri = "LogUri"
        case managedScalingPolicy = "ManagedScalingPolicy"
        case name = "Name"
        case newSupportedProducts = "NewSupportedProducts"
        case placementGroupConfigs = "PlacementGroupConfigs"
        case releaseLabel = "ReleaseLabel"
        case repoUpgradeOnBoot = "RepoUpgradeOnBoot"
        case scaleDownBehavior = "ScaleDownBehavior"
        case securityConfiguration = "SecurityConfiguration"
        case serviceRole = "ServiceRole"
        case stepConcurrencyLevel = "StepConcurrencyLevel"
        case steps = "Steps"
        case supportedProducts = "SupportedProducts"
        case tags = "Tags"
        case visibleToAllUsers = "VisibleToAllUsers"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalInfo = additionalInfo {
            try encodeContainer.encode(additionalInfo, forKey: .additionalInfo)
        }
        if let amiVersion = amiVersion {
            try encodeContainer.encode(amiVersion, forKey: .amiVersion)
        }
        if let applications = applications {
            var applicationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .applications)
            for applicationlist0 in applications {
                try applicationsContainer.encode(applicationlist0)
            }
        }
        if let autoScalingRole = autoScalingRole {
            try encodeContainer.encode(autoScalingRole, forKey: .autoScalingRole)
        }
        if let bootstrapActions = bootstrapActions {
            var bootstrapActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bootstrapActions)
            for bootstrapactionconfiglist0 in bootstrapActions {
                try bootstrapActionsContainer.encode(bootstrapactionconfiglist0)
            }
        }
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configurationlist0 in configurations {
                try configurationsContainer.encode(configurationlist0)
            }
        }
        if let customAmiId = customAmiId {
            try encodeContainer.encode(customAmiId, forKey: .customAmiId)
        }
        if let ebsRootVolumeSize = ebsRootVolumeSize {
            try encodeContainer.encode(ebsRootVolumeSize, forKey: .ebsRootVolumeSize)
        }
        if let instances = instances {
            try encodeContainer.encode(instances, forKey: .instances)
        }
        if let jobFlowRole = jobFlowRole {
            try encodeContainer.encode(jobFlowRole, forKey: .jobFlowRole)
        }
        if let kerberosAttributes = kerberosAttributes {
            try encodeContainer.encode(kerberosAttributes, forKey: .kerberosAttributes)
        }
        if let logEncryptionKmsKeyId = logEncryptionKmsKeyId {
            try encodeContainer.encode(logEncryptionKmsKeyId, forKey: .logEncryptionKmsKeyId)
        }
        if let logUri = logUri {
            try encodeContainer.encode(logUri, forKey: .logUri)
        }
        if let managedScalingPolicy = managedScalingPolicy {
            try encodeContainer.encode(managedScalingPolicy, forKey: .managedScalingPolicy)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let newSupportedProducts = newSupportedProducts {
            var newSupportedProductsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .newSupportedProducts)
            for newsupportedproductslist0 in newSupportedProducts {
                try newSupportedProductsContainer.encode(newsupportedproductslist0)
            }
        }
        if let placementGroupConfigs = placementGroupConfigs {
            var placementGroupConfigsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .placementGroupConfigs)
            for placementgroupconfiglist0 in placementGroupConfigs {
                try placementGroupConfigsContainer.encode(placementgroupconfiglist0)
            }
        }
        if let releaseLabel = releaseLabel {
            try encodeContainer.encode(releaseLabel, forKey: .releaseLabel)
        }
        if let repoUpgradeOnBoot = repoUpgradeOnBoot {
            try encodeContainer.encode(repoUpgradeOnBoot.rawValue, forKey: .repoUpgradeOnBoot)
        }
        if let scaleDownBehavior = scaleDownBehavior {
            try encodeContainer.encode(scaleDownBehavior.rawValue, forKey: .scaleDownBehavior)
        }
        if let securityConfiguration = securityConfiguration {
            try encodeContainer.encode(securityConfiguration, forKey: .securityConfiguration)
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let stepConcurrencyLevel = stepConcurrencyLevel {
            try encodeContainer.encode(stepConcurrencyLevel, forKey: .stepConcurrencyLevel)
        }
        if let steps = steps {
            var stepsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .steps)
            for stepconfiglist0 in steps {
                try stepsContainer.encode(stepconfiglist0)
            }
        }
        if let supportedProducts = supportedProducts {
            var supportedProductsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedProducts)
            for supportedproductslist0 in supportedProducts {
                try supportedProductsContainer.encode(supportedproductslist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if visibleToAllUsers != false {
            try encodeContainer.encode(visibleToAllUsers, forKey: .visibleToAllUsers)
        }
    }
}
