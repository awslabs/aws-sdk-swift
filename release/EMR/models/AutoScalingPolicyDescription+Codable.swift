// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AutoScalingPolicyDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case constraints = "Constraints"
        case rules = "Rules"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let constraints = constraints {
            try encodeContainer.encode(constraints, forKey: .constraints)
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for scalingrulelist0 in rules {
                try rulesContainer.encode(scalingrulelist0)
            }
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(AutoScalingPolicyStatus.self, forKey: .status)
        status = statusDecoded
        let constraintsDecoded = try containerValues.decodeIfPresent(ScalingConstraints.self, forKey: .constraints)
        constraints = constraintsDecoded
        let rulesContainer = try containerValues.decodeIfPresent([ScalingRule].self, forKey: .rules)
        var rulesDecoded0:[ScalingRule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [ScalingRule]()
            for structure0 in rulesContainer {
                rulesDecoded0?.append(structure0)
            }
        }
        rules = rulesDecoded0
    }
}
