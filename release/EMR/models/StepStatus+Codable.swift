// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StepStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case failureDetails = "FailureDetails"
        case state = "State"
        case stateChangeReason = "StateChangeReason"
        case timeline = "Timeline"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failureDetails = failureDetails {
            try encodeContainer.encode(failureDetails, forKey: .failureDetails)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateChangeReason = stateChangeReason {
            try encodeContainer.encode(stateChangeReason, forKey: .stateChangeReason)
        }
        if let timeline = timeline {
            try encodeContainer.encode(timeline, forKey: .timeline)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(StepState.self, forKey: .state)
        state = stateDecoded
        let stateChangeReasonDecoded = try containerValues.decodeIfPresent(StepStateChangeReason.self, forKey: .stateChangeReason)
        stateChangeReason = stateChangeReasonDecoded
        let failureDetailsDecoded = try containerValues.decodeIfPresent(FailureDetails.self, forKey: .failureDetails)
        failureDetails = failureDetailsDecoded
        let timelineDecoded = try containerValues.decodeIfPresent(StepTimeline.self, forKey: .timeline)
        timeline = timelineDecoded
    }
}
