// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudWatchAlarmDefinition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case comparisonOperator = "ComparisonOperator"
        case dimensions = "Dimensions"
        case evaluationPeriods = "EvaluationPeriods"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case period = "Period"
        case statistic = "Statistic"
        case threshold = "Threshold"
        case unit = "Unit"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparisonOperator = comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let dimensions = dimensions {
            var dimensionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensions)
            for metricdimensionlist0 in dimensions {
                try dimensionsContainer.encode(metricdimensionlist0)
            }
        }
        if let evaluationPeriods = evaluationPeriods {
            try encodeContainer.encode(evaluationPeriods, forKey: .evaluationPeriods)
        }
        if let metricName = metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let namespace = namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
        if let period = period {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let statistic = statistic {
            try encodeContainer.encode(statistic.rawValue, forKey: .statistic)
        }
        if let threshold = threshold {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
        if let unit = unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(ComparisonOperator.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let evaluationPeriodsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .evaluationPeriods)
        evaluationPeriods = evaluationPeriodsDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let periodDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .period)
        period = periodDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(Statistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let thresholdDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .threshold)
        threshold = thresholdDecoded
        let unitDecoded = try containerValues.decodeIfPresent(Unit.self, forKey: .unit)
        unit = unitDecoded
        let dimensionsContainer = try containerValues.decodeIfPresent([MetricDimension].self, forKey: .dimensions)
        var dimensionsDecoded0:[MetricDimension]? = nil
        if let dimensionsContainer = dimensionsContainer {
            dimensionsDecoded0 = [MetricDimension]()
            for structure0 in dimensionsContainer {
                dimensionsDecoded0?.append(structure0)
            }
        }
        dimensions = dimensionsDecoded0
    }
}
