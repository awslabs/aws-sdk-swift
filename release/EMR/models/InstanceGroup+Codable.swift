// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstanceGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoScalingPolicy = "AutoScalingPolicy"
        case bidPrice = "BidPrice"
        case configurations = "Configurations"
        case configurationsVersion = "ConfigurationsVersion"
        case ebsBlockDevices = "EbsBlockDevices"
        case ebsOptimized = "EbsOptimized"
        case id = "Id"
        case instanceGroupType = "InstanceGroupType"
        case instanceType = "InstanceType"
        case lastSuccessfullyAppliedConfigurations = "LastSuccessfullyAppliedConfigurations"
        case lastSuccessfullyAppliedConfigurationsVersion = "LastSuccessfullyAppliedConfigurationsVersion"
        case market = "Market"
        case name = "Name"
        case requestedInstanceCount = "RequestedInstanceCount"
        case runningInstanceCount = "RunningInstanceCount"
        case shrinkPolicy = "ShrinkPolicy"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingPolicy = autoScalingPolicy {
            try encodeContainer.encode(autoScalingPolicy, forKey: .autoScalingPolicy)
        }
        if let bidPrice = bidPrice {
            try encodeContainer.encode(bidPrice, forKey: .bidPrice)
        }
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configurationlist0 in configurations {
                try configurationsContainer.encode(configurationlist0)
            }
        }
        if configurationsVersion != 0 {
            try encodeContainer.encode(configurationsVersion, forKey: .configurationsVersion)
        }
        if let ebsBlockDevices = ebsBlockDevices {
            var ebsBlockDevicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ebsBlockDevices)
            for ebsblockdevicelist0 in ebsBlockDevices {
                try ebsBlockDevicesContainer.encode(ebsblockdevicelist0)
            }
        }
        if let ebsOptimized = ebsOptimized {
            try encodeContainer.encode(ebsOptimized, forKey: .ebsOptimized)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let instanceGroupType = instanceGroupType {
            try encodeContainer.encode(instanceGroupType.rawValue, forKey: .instanceGroupType)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let lastSuccessfullyAppliedConfigurations = lastSuccessfullyAppliedConfigurations {
            var lastSuccessfullyAppliedConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lastSuccessfullyAppliedConfigurations)
            for configurationlist0 in lastSuccessfullyAppliedConfigurations {
                try lastSuccessfullyAppliedConfigurationsContainer.encode(configurationlist0)
            }
        }
        if lastSuccessfullyAppliedConfigurationsVersion != 0 {
            try encodeContainer.encode(lastSuccessfullyAppliedConfigurationsVersion, forKey: .lastSuccessfullyAppliedConfigurationsVersion)
        }
        if let market = market {
            try encodeContainer.encode(market.rawValue, forKey: .market)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let requestedInstanceCount = requestedInstanceCount {
            try encodeContainer.encode(requestedInstanceCount, forKey: .requestedInstanceCount)
        }
        if let runningInstanceCount = runningInstanceCount {
            try encodeContainer.encode(runningInstanceCount, forKey: .runningInstanceCount)
        }
        if let shrinkPolicy = shrinkPolicy {
            try encodeContainer.encode(shrinkPolicy, forKey: .shrinkPolicy)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let marketDecoded = try containerValues.decodeIfPresent(MarketType.self, forKey: .market)
        market = marketDecoded
        let instanceGroupTypeDecoded = try containerValues.decodeIfPresent(InstanceGroupType.self, forKey: .instanceGroupType)
        instanceGroupType = instanceGroupTypeDecoded
        let bidPriceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bidPrice)
        bidPrice = bidPriceDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let requestedInstanceCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .requestedInstanceCount)
        requestedInstanceCount = requestedInstanceCountDecoded
        let runningInstanceCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .runningInstanceCount)
        runningInstanceCount = runningInstanceCountDecoded
        let statusDecoded = try containerValues.decodeIfPresent(InstanceGroupStatus.self, forKey: .status)
        status = statusDecoded
        let configurationsContainer = try containerValues.decodeIfPresent([Configuration].self, forKey: .configurations)
        var configurationsDecoded0:[Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [Configuration]()
            for structure0 in configurationsContainer {
                configurationsDecoded0?.append(structure0)
            }
        }
        configurations = configurationsDecoded0
        let configurationsVersionDecoded = try containerValues.decode(Int.self, forKey: .configurationsVersion)
        configurationsVersion = configurationsVersionDecoded
        let lastSuccessfullyAppliedConfigurationsContainer = try containerValues.decodeIfPresent([Configuration].self, forKey: .lastSuccessfullyAppliedConfigurations)
        var lastSuccessfullyAppliedConfigurationsDecoded0:[Configuration]? = nil
        if let lastSuccessfullyAppliedConfigurationsContainer = lastSuccessfullyAppliedConfigurationsContainer {
            lastSuccessfullyAppliedConfigurationsDecoded0 = [Configuration]()
            for structure0 in lastSuccessfullyAppliedConfigurationsContainer {
                lastSuccessfullyAppliedConfigurationsDecoded0?.append(structure0)
            }
        }
        lastSuccessfullyAppliedConfigurations = lastSuccessfullyAppliedConfigurationsDecoded0
        let lastSuccessfullyAppliedConfigurationsVersionDecoded = try containerValues.decode(Int.self, forKey: .lastSuccessfullyAppliedConfigurationsVersion)
        lastSuccessfullyAppliedConfigurationsVersion = lastSuccessfullyAppliedConfigurationsVersionDecoded
        let ebsBlockDevicesContainer = try containerValues.decodeIfPresent([EbsBlockDevice].self, forKey: .ebsBlockDevices)
        var ebsBlockDevicesDecoded0:[EbsBlockDevice]? = nil
        if let ebsBlockDevicesContainer = ebsBlockDevicesContainer {
            ebsBlockDevicesDecoded0 = [EbsBlockDevice]()
            for structure0 in ebsBlockDevicesContainer {
                ebsBlockDevicesDecoded0?.append(structure0)
            }
        }
        ebsBlockDevices = ebsBlockDevicesDecoded0
        let ebsOptimizedDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .ebsOptimized)
        ebsOptimized = ebsOptimizedDecoded
        let shrinkPolicyDecoded = try containerValues.decodeIfPresent(ShrinkPolicy.self, forKey: .shrinkPolicy)
        shrinkPolicy = shrinkPolicyDecoded
        let autoScalingPolicyDecoded = try containerValues.decodeIfPresent(AutoScalingPolicyDescription.self, forKey: .autoScalingPolicy)
        autoScalingPolicy = autoScalingPolicyDecoded
    }
}
