// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ClusterStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case state = "State"
        case stateChangeReason = "StateChangeReason"
        case timeline = "Timeline"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateChangeReason = stateChangeReason {
            try encodeContainer.encode(stateChangeReason, forKey: .stateChangeReason)
        }
        if let timeline = timeline {
            try encodeContainer.encode(timeline, forKey: .timeline)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(ClusterState.self, forKey: .state)
        state = stateDecoded
        let stateChangeReasonDecoded = try containerValues.decodeIfPresent(ClusterStateChangeReason.self, forKey: .stateChangeReason)
        stateChangeReason = stateChangeReasonDecoded
        let timelineDecoded = try containerValues.decodeIfPresent(ClusterTimeline.self, forKey: .timeline)
        timeline = timelineDecoded
    }
}
