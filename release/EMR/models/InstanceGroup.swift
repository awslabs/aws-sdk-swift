// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>This entity represents an instance group, which is a group of instances that have common
///          purpose. For example, CORE instance group is used for HDFS.</p>
public struct InstanceGroup: Equatable {
    /// <p>An automatic scaling policy for a core instance group or task instance group in an
    ///          Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically
    ///          adds and terminates EC2 instances in response to the value of a CloudWatch metric. See
    ///          PutAutoScalingPolicy.</p>
    public let autoScalingPolicy: AutoScalingPolicyDescription?
    /// <p>If specified, indicates that the instance group uses Spot Instances. This is the maximum price you are willing to pay for Spot Instances. Specify <code>OnDemandPrice</code> to set the amount equal to the On-Demand price, or specify an amount in USD.</p>
    public let bidPrice: String?
    /// <note>
    ///             <p>Amazon EMR releases 4.x or later.</p>
    ///          </note>
    ///          <p>The list of configurations supplied for an EMR cluster instance group. You can specify a
    ///          separate configuration for each instance group (master, core, and task).</p>
    public let configurations: [Configuration]?
    /// <p>The version number of the requested configuration specification for this instance
    ///          group.</p>
    public let configurationsVersion: Int
    /// <p>The EBS block devices that are mapped to this instance group.</p>
    public let ebsBlockDevices: [EbsBlockDevice]?
    /// <p>If the instance group is EBS-optimized. An Amazon EBS-optimized instance uses an
    ///          optimized configuration stack and provides additional, dedicated capacity for Amazon EBS
    ///          I/O.</p>
    public let ebsOptimized: Bool?
    /// <p>The identifier of the instance group.</p>
    public let id: String?
    /// <p>The type of the instance group. Valid values are MASTER, CORE or TASK.</p>
    public let instanceGroupType: InstanceGroupType?
    /// <p>The EC2 instance type for all instances in the instance group.</p>
    public let instanceType: String?
    /// <p>A list of configurations that were successfully applied for an instance group last
    ///          time.</p>
    public let lastSuccessfullyAppliedConfigurations: [Configuration]?
    /// <p>The version number of a configuration specification that was successfully applied for an
    ///          instance group last time. </p>
    public let lastSuccessfullyAppliedConfigurationsVersion: Int
    /// <p>The marketplace to provision instances for this group. Valid values are ON_DEMAND or
    ///          SPOT.</p>
    public let market: MarketType?
    /// <p>The name of the instance group.</p>
    public let name: String?
    /// <p>The target number of instances for the instance group.</p>
    public let requestedInstanceCount: Int?
    /// <p>The number of instances currently running in this instance group.</p>
    public let runningInstanceCount: Int?
    /// <p>Policy for customizing shrink operations.</p>
    public let shrinkPolicy: ShrinkPolicy?
    /// <p>The current status of the instance group.</p>
    public let status: InstanceGroupStatus?

    public init (
        autoScalingPolicy: AutoScalingPolicyDescription? = nil,
        bidPrice: String? = nil,
        configurations: [Configuration]? = nil,
        configurationsVersion: Int = 0,
        ebsBlockDevices: [EbsBlockDevice]? = nil,
        ebsOptimized: Bool? = nil,
        id: String? = nil,
        instanceGroupType: InstanceGroupType? = nil,
        instanceType: String? = nil,
        lastSuccessfullyAppliedConfigurations: [Configuration]? = nil,
        lastSuccessfullyAppliedConfigurationsVersion: Int = 0,
        market: MarketType? = nil,
        name: String? = nil,
        requestedInstanceCount: Int? = nil,
        runningInstanceCount: Int? = nil,
        shrinkPolicy: ShrinkPolicy? = nil,
        status: InstanceGroupStatus? = nil
    )
    {
        self.autoScalingPolicy = autoScalingPolicy
        self.bidPrice = bidPrice
        self.configurations = configurations
        self.configurationsVersion = configurationsVersion
        self.ebsBlockDevices = ebsBlockDevices
        self.ebsOptimized = ebsOptimized
        self.id = id
        self.instanceGroupType = instanceGroupType
        self.instanceType = instanceType
        self.lastSuccessfullyAppliedConfigurations = lastSuccessfullyAppliedConfigurations
        self.lastSuccessfullyAppliedConfigurationsVersion = lastSuccessfullyAppliedConfigurationsVersion
        self.market = market
        self.name = name
        self.requestedInstanceCount = requestedInstanceCount
        self.runningInstanceCount = runningInstanceCount
        self.shrinkPolicy = shrinkPolicy
        self.status = status
    }
}
