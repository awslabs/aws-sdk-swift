// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListStepsInputBody: Equatable {
    public let clusterId: String?
    public let stepStates: [StepState]?
    public let stepIds: [String]?
    public let marker: String?
}

extension ListStepsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clusterId = "ClusterId"
        case marker = "Marker"
        case stepIds = "StepIds"
        case stepStates = "StepStates"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let stepStatesContainer = try containerValues.decodeIfPresent([StepState].self, forKey: .stepStates)
        var stepStatesDecoded0:[StepState]? = nil
        if let stepStatesContainer = stepStatesContainer {
            stepStatesDecoded0 = [StepState]()
            for string0 in stepStatesContainer {
                stepStatesDecoded0?.append(string0)
            }
        }
        stepStates = stepStatesDecoded0
        let stepIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .stepIds)
        var stepIdsDecoded0:[String]? = nil
        if let stepIdsContainer = stepIdsContainer {
            stepIdsDecoded0 = [String]()
            for string0 in stepIdsContainer {
                stepIdsDecoded0?.append(string0)
            }
        }
        stepIds = stepIdsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}
