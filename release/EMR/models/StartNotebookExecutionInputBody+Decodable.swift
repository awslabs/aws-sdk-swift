// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartNotebookExecutionInputBody: Equatable {
    public let editorId: String?
    public let relativePath: String?
    public let notebookExecutionName: String?
    public let notebookParams: String?
    public let executionEngine: ExecutionEngineConfig?
    public let serviceRole: String?
    public let notebookInstanceSecurityGroupId: String?
    public let tags: [Tag]?
}

extension StartNotebookExecutionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case editorId = "EditorId"
        case executionEngine = "ExecutionEngine"
        case notebookExecutionName = "NotebookExecutionName"
        case notebookInstanceSecurityGroupId = "NotebookInstanceSecurityGroupId"
        case notebookParams = "NotebookParams"
        case relativePath = "RelativePath"
        case serviceRole = "ServiceRole"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let editorIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .editorId)
        editorId = editorIdDecoded
        let relativePathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .relativePath)
        relativePath = relativePathDecoded
        let notebookExecutionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookExecutionName)
        notebookExecutionName = notebookExecutionNameDecoded
        let notebookParamsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookParams)
        notebookParams = notebookParamsDecoded
        let executionEngineDecoded = try containerValues.decodeIfPresent(ExecutionEngineConfig.self, forKey: .executionEngine)
        executionEngine = executionEngineDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let notebookInstanceSecurityGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notebookInstanceSecurityGroupId)
        notebookInstanceSecurityGroupId = notebookInstanceSecurityGroupIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
