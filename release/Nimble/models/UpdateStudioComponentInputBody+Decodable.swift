// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateStudioComponentInputBody: Equatable {
    public let configuration: StudioComponentConfiguration?
    public let description: String?
    public let ec2SecurityGroupIds: [String]?
    public let initializationScripts: [StudioComponentInitializationScript]?
    public let name: String?
    public let scriptParameters: [ScriptParameterKeyValue]?
    public let subtype: StudioComponentSubtype?
    public let type: StudioComponentType?
}

extension UpdateStudioComponentInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case configuration = "configuration"
        case description = "description"
        case ec2SecurityGroupIds = "ec2SecurityGroupIds"
        case initializationScripts = "initializationScripts"
        case name = "name"
        case scriptParameters = "scriptParameters"
        case subtype = "subtype"
        case type = "type"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationDecoded = try containerValues.decodeIfPresent(StudioComponentConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let ec2SecurityGroupIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .ec2SecurityGroupIds)
        var ec2SecurityGroupIdsDecoded0:[String]? = nil
        if let ec2SecurityGroupIdsContainer = ec2SecurityGroupIdsContainer {
            ec2SecurityGroupIdsDecoded0 = [String]()
            for string0 in ec2SecurityGroupIdsContainer {
                ec2SecurityGroupIdsDecoded0?.append(string0)
            }
        }
        ec2SecurityGroupIds = ec2SecurityGroupIdsDecoded0
        let initializationScriptsContainer = try containerValues.decodeIfPresent([StudioComponentInitializationScript].self, forKey: .initializationScripts)
        var initializationScriptsDecoded0:[StudioComponentInitializationScript]? = nil
        if let initializationScriptsContainer = initializationScriptsContainer {
            initializationScriptsDecoded0 = [StudioComponentInitializationScript]()
            for structure0 in initializationScriptsContainer {
                initializationScriptsDecoded0?.append(structure0)
            }
        }
        initializationScripts = initializationScriptsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let scriptParametersContainer = try containerValues.decodeIfPresent([ScriptParameterKeyValue].self, forKey: .scriptParameters)
        var scriptParametersDecoded0:[ScriptParameterKeyValue]? = nil
        if let scriptParametersContainer = scriptParametersContainer {
            scriptParametersDecoded0 = [ScriptParameterKeyValue]()
            for structure0 in scriptParametersContainer {
                scriptParametersDecoded0?.append(structure0)
            }
        }
        scriptParameters = scriptParametersDecoded0
        let subtypeDecoded = try containerValues.decodeIfPresent(StudioComponentSubtype.self, forKey: .subtype)
        subtype = subtypeDecoded
        let typeDecoded = try containerValues.decodeIfPresent(StudioComponentType.self, forKey: .type)
        type = typeDecoded
    }
}
