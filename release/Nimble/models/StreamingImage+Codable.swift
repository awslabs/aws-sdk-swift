// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StreamingImage: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case description = "description"
        case ec2ImageId = "ec2ImageId"
        case encryptionConfiguration = "encryptionConfiguration"
        case eulaIds = "eulaIds"
        case name = "name"
        case owner = "owner"
        case platform = "platform"
        case state = "state"
        case statusCode = "statusCode"
        case statusMessage = "statusMessage"
        case streamingImageId = "streamingImageId"
        case tags = "tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let ec2ImageId = ec2ImageId {
            try encodeContainer.encode(ec2ImageId, forKey: .ec2ImageId)
        }
        if let encryptionConfiguration = encryptionConfiguration {
            try encodeContainer.encode(encryptionConfiguration, forKey: .encryptionConfiguration)
        }
        if let eulaIds = eulaIds {
            var eulaIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eulaIds)
            for eulaidlist0 in eulaIds {
                try eulaIdsContainer.encode(eulaidlist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let owner = owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if let platform = platform {
            try encodeContainer.encode(platform, forKey: .platform)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let statusCode = statusCode {
            try encodeContainer.encode(statusCode.rawValue, forKey: .statusCode)
        }
        if let statusMessage = statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
        if let streamingImageId = streamingImageId {
            try encodeContainer.encode(streamingImageId, forKey: .streamingImageId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let ec2ImageIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ec2ImageId)
        ec2ImageId = ec2ImageIdDecoded
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(StreamingImageEncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
        let eulaIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .eulaIds)
        var eulaIdsDecoded0:[String]? = nil
        if let eulaIdsContainer = eulaIdsContainer {
            eulaIdsDecoded0 = [String]()
            for string0 in eulaIdsContainer {
                eulaIdsDecoded0?.append(string0)
            }
        }
        eulaIds = eulaIdsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .owner)
        owner = ownerDecoded
        let platformDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platform)
        platform = platformDecoded
        let stateDecoded = try containerValues.decodeIfPresent(StreamingImageState.self, forKey: .state)
        state = stateDecoded
        let statusCodeDecoded = try containerValues.decodeIfPresent(StreamingImageStatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let streamingImageIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamingImageId)
        streamingImageId = streamingImageIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                tagsDecoded0?[key0] = __string0
            }
        }
        tags = tagsDecoded0
    }
}
