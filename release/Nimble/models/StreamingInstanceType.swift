// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum StreamingInstanceType {
    case g4dn12xlarge
    case g4dn16xlarge
    case g4dn2xlarge
    case g4dn4xlarge
    case g4dn8xlarge
    case g4dnXlarge
    case sdkUnknown(String)
}

extension StreamingInstanceType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [StreamingInstanceType] {
        return [
            .g4dn12xlarge,
            .g4dn16xlarge,
            .g4dn2xlarge,
            .g4dn4xlarge,
            .g4dn8xlarge,
            .g4dnXlarge,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .g4dn12xlarge: return "g4dn.12xlarge"
        case .g4dn16xlarge: return "g4dn.16xlarge"
        case .g4dn2xlarge: return "g4dn.2xlarge"
        case .g4dn4xlarge: return "g4dn.4xlarge"
        case .g4dn8xlarge: return "g4dn.8xlarge"
        case .g4dnXlarge: return "g4dn.xlarge"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = StreamingInstanceType(rawValue: rawValue) ?? StreamingInstanceType.sdkUnknown(rawValue)
    }
}
