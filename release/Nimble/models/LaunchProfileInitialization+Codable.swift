// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LaunchProfileInitialization: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activeDirectory = "activeDirectory"
        case ec2SecurityGroupIds = "ec2SecurityGroupIds"
        case launchProfileId = "launchProfileId"
        case launchProfileProtocolVersion = "launchProfileProtocolVersion"
        case launchPurpose = "launchPurpose"
        case name = "name"
        case platform = "platform"
        case systemInitializationScripts = "systemInitializationScripts"
        case userInitializationScripts = "userInitializationScripts"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeDirectory = activeDirectory {
            try encodeContainer.encode(activeDirectory, forKey: .activeDirectory)
        }
        if let ec2SecurityGroupIds = ec2SecurityGroupIds {
            var ec2SecurityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2SecurityGroupIds)
            for launchprofilesecuritygroupidlist0 in ec2SecurityGroupIds {
                try ec2SecurityGroupIdsContainer.encode(launchprofilesecuritygroupidlist0)
            }
        }
        if let launchProfileId = launchProfileId {
            try encodeContainer.encode(launchProfileId, forKey: .launchProfileId)
        }
        if let launchProfileProtocolVersion = launchProfileProtocolVersion {
            try encodeContainer.encode(launchProfileProtocolVersion, forKey: .launchProfileProtocolVersion)
        }
        if let launchPurpose = launchPurpose {
            try encodeContainer.encode(launchPurpose, forKey: .launchPurpose)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let platform = platform {
            try encodeContainer.encode(platform.rawValue, forKey: .platform)
        }
        if let systemInitializationScripts = systemInitializationScripts {
            var systemInitializationScriptsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .systemInitializationScripts)
            for launchprofileinitializationscriptlist0 in systemInitializationScripts {
                try systemInitializationScriptsContainer.encode(launchprofileinitializationscriptlist0)
            }
        }
        if let userInitializationScripts = userInitializationScripts {
            var userInitializationScriptsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userInitializationScripts)
            for launchprofileinitializationscriptlist0 in userInitializationScripts {
                try userInitializationScriptsContainer.encode(launchprofileinitializationscriptlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeDirectoryDecoded = try containerValues.decodeIfPresent(LaunchProfileInitializationActiveDirectory.self, forKey: .activeDirectory)
        activeDirectory = activeDirectoryDecoded
        let ec2SecurityGroupIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .ec2SecurityGroupIds)
        var ec2SecurityGroupIdsDecoded0:[String]? = nil
        if let ec2SecurityGroupIdsContainer = ec2SecurityGroupIdsContainer {
            ec2SecurityGroupIdsDecoded0 = [String]()
            for string0 in ec2SecurityGroupIdsContainer {
                ec2SecurityGroupIdsDecoded0?.append(string0)
            }
        }
        ec2SecurityGroupIds = ec2SecurityGroupIdsDecoded0
        let launchProfileIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .launchProfileId)
        launchProfileId = launchProfileIdDecoded
        let launchProfileProtocolVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .launchProfileProtocolVersion)
        launchProfileProtocolVersion = launchProfileProtocolVersionDecoded
        let launchPurposeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .launchPurpose)
        launchPurpose = launchPurposeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let platformDecoded = try containerValues.decodeIfPresent(LaunchProfilePlatform.self, forKey: .platform)
        platform = platformDecoded
        let systemInitializationScriptsContainer = try containerValues.decodeIfPresent([LaunchProfileInitializationScript].self, forKey: .systemInitializationScripts)
        var systemInitializationScriptsDecoded0:[LaunchProfileInitializationScript]? = nil
        if let systemInitializationScriptsContainer = systemInitializationScriptsContainer {
            systemInitializationScriptsDecoded0 = [LaunchProfileInitializationScript]()
            for structure0 in systemInitializationScriptsContainer {
                systemInitializationScriptsDecoded0?.append(structure0)
            }
        }
        systemInitializationScripts = systemInitializationScriptsDecoded0
        let userInitializationScriptsContainer = try containerValues.decodeIfPresent([LaunchProfileInitializationScript].self, forKey: .userInitializationScripts)
        var userInitializationScriptsDecoded0:[LaunchProfileInitializationScript]? = nil
        if let userInitializationScriptsContainer = userInitializationScriptsContainer {
            userInitializationScriptsDecoded0 = [LaunchProfileInitializationScript]()
            for structure0 in userInitializationScriptsContainer {
                userInitializationScriptsDecoded0?.append(structure0)
            }
        }
        userInitializationScripts = userInitializationScriptsDecoded0
    }
}
