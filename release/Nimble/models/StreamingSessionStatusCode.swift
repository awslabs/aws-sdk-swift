// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum StreamingSessionStatusCode {
    case activeDirectoryDomainJoinError
    case decryptStreamingImageError
    case initializationScriptError
    case insufficientCapacity
    case internalError
    case networkConnectionError
    case networkInterfaceError
    case streamingSessionCreateInProgress
    case streamingSessionDeleted
    case streamingSessionDeleteInProgress
    case streamingSessionReady
    case sdkUnknown(String)
}

extension StreamingSessionStatusCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [StreamingSessionStatusCode] {
        return [
            .activeDirectoryDomainJoinError,
            .decryptStreamingImageError,
            .initializationScriptError,
            .insufficientCapacity,
            .internalError,
            .networkConnectionError,
            .networkInterfaceError,
            .streamingSessionCreateInProgress,
            .streamingSessionDeleted,
            .streamingSessionDeleteInProgress,
            .streamingSessionReady,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .activeDirectoryDomainJoinError: return "ACTIVE_DIRECTORY_DOMAIN_JOIN_ERROR"
        case .decryptStreamingImageError: return "DECRYPT_STREAMING_IMAGE_ERROR"
        case .initializationScriptError: return "INITIALIZATION_SCRIPT_ERROR"
        case .insufficientCapacity: return "INSUFFICIENT_CAPACITY"
        case .internalError: return "INTERNAL_ERROR"
        case .networkConnectionError: return "NETWORK_CONNECTION_ERROR"
        case .networkInterfaceError: return "NETWORK_INTERFACE_ERROR"
        case .streamingSessionCreateInProgress: return "STREAMING_SESSION_CREATE_IN_PROGRESS"
        case .streamingSessionDeleted: return "STREAMING_SESSION_DELETED"
        case .streamingSessionDeleteInProgress: return "STREAMING_SESSION_DELETE_IN_PROGRESS"
        case .streamingSessionReady: return "STREAMING_SESSION_READY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = StreamingSessionStatusCode(rawValue: rawValue) ?? StreamingSessionStatusCode.sdkUnknown(rawValue)
    }
}
