// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateStreamingSessionInputBody: Equatable {
    public let ec2InstanceType: StreamingInstanceType?
    public let launchProfileId: String?
    public let streamingImageId: String?
    public let tags: [String:String]?
}

extension CreateStreamingSessionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case ec2InstanceType = "ec2InstanceType"
        case launchProfileId = "launchProfileId"
        case streamingImageId = "streamingImageId"
        case tags = "tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ec2InstanceTypeDecoded = try containerValues.decodeIfPresent(StreamingInstanceType.self, forKey: .ec2InstanceType)
        ec2InstanceType = ec2InstanceTypeDecoded
        let launchProfileIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .launchProfileId)
        launchProfileId = launchProfileIdDecoded
        let streamingImageIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamingImageId)
        streamingImageId = streamingImageIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                tagsDecoded0?[key0] = __string0
            }
        }
        tags = tagsDecoded0
    }
}
