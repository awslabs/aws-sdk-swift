// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation

public class NimbleClient {
    let client: SdkHttpClient
    let config: NimbleClientConfiguration
    let serviceName = "nimble"
    let encoder: RequestEncoder
    let decoder: ResponseDecoder

    public init(config: NimbleClientConfiguration) {
        client = SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        self.encoder = config.encoder ?? encoder
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public class NimbleClientConfiguration: ClientRuntime.Configuration, AWSClientConfiguration {

        public var region: String
        public var credentialsProvider: AWSCredentialsProvider
        public var signingRegion: String
        public var endpointResolver: EndpointResolver

        public init (
            credentialsProvider: AWSCredentialsProvider,
            endpointResolver: EndpointResolver,
            region: String,
            signingRegion: String
        ) throws
        {
            self.credentialsProvider = credentialsProvider
            self.endpointResolver = endpointResolver
            self.region = region
            self.signingRegion = signingRegion
        }

        public convenience init(credentialsProvider: AWSCredentialsProvider) throws {
            let region = "us-east-1"
            let signingRegion = "us-east-1"
            let endpointResolver = DefaultEndpointResolver()
            try self.init(
                credentialsProvider: credentialsProvider,
                endpointResolver: endpointResolver,
                region: region,
                signingRegion: signingRegion
            )
        }

        public static func `default`() throws -> NimbleClientConfiguration {
            let awsCredsProvider = try AWSCredentialsProvider.fromEnv()
            return try NimbleClientConfiguration(credentialsProvider: awsCredsProvider)
        }
    }
}

extension NimbleClient: NimbleClientProtocol {
    /// <p>Accept EULAs.</p>
    public func acceptEulas(input: AcceptEulasInput, completion: @escaping (SdkResult<AcceptEulasOutput, AcceptEulasOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/eula-acceptances"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "acceptEulas")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AcceptEulasInput, AcceptEulasOutput, AcceptEulasOutputError>(id: "acceptEulas")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<AcceptEulasOutput>, SdkError<AcceptEulasOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: AcceptEulasInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AcceptEulasInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AcceptEulasInput, AcceptEulasOutput, AcceptEulasOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: AcceptEulasInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Create a launch profile.</p>
    public func createLaunchProfile(input: CreateLaunchProfileInput, completion: @escaping (SdkResult<CreateLaunchProfileOutput, CreateLaunchProfileOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/launch-profiles"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createLaunchProfile")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateLaunchProfileInput, CreateLaunchProfileOutput, CreateLaunchProfileOutputError>(id: "createLaunchProfile")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<CreateLaunchProfileOutput>, SdkError<CreateLaunchProfileOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: CreateLaunchProfileInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateLaunchProfileInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateLaunchProfileInput, CreateLaunchProfileOutput, CreateLaunchProfileOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateLaunchProfileInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a streaming image resource in a studio.</p>
    public func createStreamingImage(input: CreateStreamingImageInput, completion: @escaping (SdkResult<CreateStreamingImageOutput, CreateStreamingImageOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/streaming-images"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createStreamingImage")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateStreamingImageInput, CreateStreamingImageOutput, CreateStreamingImageOutputError>(id: "createStreamingImage")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<CreateStreamingImageOutput>, SdkError<CreateStreamingImageOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: CreateStreamingImageInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateStreamingImageInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateStreamingImageInput, CreateStreamingImageOutput, CreateStreamingImageOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateStreamingImageInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a streaming session in a studio.</p> <p>After invoking this operation, you must poll GetStreamingSession until the streaming session is in state READY.</p>
    public func createStreamingSession(input: CreateStreamingSessionInput, completion: @escaping (SdkResult<CreateStreamingSessionOutput, CreateStreamingSessionOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/streaming-sessions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createStreamingSession")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateStreamingSessionInput, CreateStreamingSessionOutput, CreateStreamingSessionOutputError>(id: "createStreamingSession")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<CreateStreamingSessionOutput>, SdkError<CreateStreamingSessionOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: CreateStreamingSessionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateStreamingSessionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateStreamingSessionInput, CreateStreamingSessionOutput, CreateStreamingSessionOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateStreamingSessionInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a streaming session stream for a streaming session.</p> <p>After invoking this API, invoke GetStreamingSessionStream with the returned streamId to poll the resource until it is in state READY.</p>
    public func createStreamingSessionStream(input: CreateStreamingSessionStreamInput, completion: @escaping (SdkResult<CreateStreamingSessionStreamOutput, CreateStreamingSessionStreamOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        guard let sessionId = input.sessionId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component sessionId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/streaming-sessions/\(sessionId)/streams"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createStreamingSessionStream")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateStreamingSessionStreamInput, CreateStreamingSessionStreamOutput, CreateStreamingSessionStreamOutputError>(id: "createStreamingSessionStream")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<CreateStreamingSessionStreamOutput>, SdkError<CreateStreamingSessionStreamOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: CreateStreamingSessionStreamInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateStreamingSessionStreamInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateStreamingSessionStreamInput, CreateStreamingSessionStreamOutput, CreateStreamingSessionStreamOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateStreamingSessionStreamInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Create a new Studio.</p> <p>When creating a Studio, two IAM roles must be provided: the admin role and the user Role. These roles are assumed by your users when they log in to the Nimble Studio portal.</p> <p>The user role must have the AmazonNimbleStudio-StudioUser managed policy attached for the portal to function properly.</p> <p>The Admin Role must have the AmazonNimbleStudio-StudioAdmin managed policy attached for the portal to function properly.</p> <p>You may optionally specify a KMS key in the StudioEncryptionConfiguration.</p> <p>In Nimble Studio, resource names, descriptions, initialization scripts, and other data you provide are always encrypted at rest using an AWS KMS key. By default, this key is owned by AWS and managed on your behalf. You may provide your own AWS KMS key when calling CreateStudio to encrypt this data using a key you own and manage.</p> <p>When providing an AWS KMS key during studio creation, Nimble Studio creates KMS grants in your account to provide your studio user and admin roles access to these KMS keys.</p> <p>If you delete this grant, the studio will no longer be accessible to your portal users.</p> <p>If you delete the studio KMS key, your studio will no longer be accessible.</p>
    public func createStudio(input: CreateStudioInput, completion: @escaping (SdkResult<CreateStudioOutput, CreateStudioOutputError>) -> Void)
    {
        let urlPath = "/2020-08-01/studios"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createStudio")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateStudioInput, CreateStudioOutput, CreateStudioOutputError>(id: "createStudio")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<CreateStudioOutput>, SdkError<CreateStudioOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: CreateStudioInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateStudioInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateStudioInput, CreateStudioOutput, CreateStudioOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateStudioInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a studio component resource.</p>
    public func createStudioComponent(input: CreateStudioComponentInput, completion: @escaping (SdkResult<CreateStudioComponentOutput, CreateStudioComponentOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/studio-components"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createStudioComponent")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateStudioComponentInput, CreateStudioComponentOutput, CreateStudioComponentOutputError>(id: "createStudioComponent")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<CreateStudioComponentOutput>, SdkError<CreateStudioComponentOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: CreateStudioComponentInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateStudioComponentInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateStudioComponentInput, CreateStudioComponentOutput, CreateStudioComponentOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateStudioComponentInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Permanently delete a launch profile.</p>
    public func deleteLaunchProfile(input: DeleteLaunchProfileInput, completion: @escaping (SdkResult<DeleteLaunchProfileOutput, DeleteLaunchProfileOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        guard let launchProfileId = input.launchProfileId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component launchProfileId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/launch-profiles/\(launchProfileId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteLaunchProfile")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteLaunchProfileInput, DeleteLaunchProfileOutput, DeleteLaunchProfileOutputError>(id: "deleteLaunchProfile")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<DeleteLaunchProfileOutput>, SdkError<DeleteLaunchProfileOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: DeleteLaunchProfileInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteLaunchProfileInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteLaunchProfileInput, DeleteLaunchProfileOutput, DeleteLaunchProfileOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Delete a user from launch profile membership.</p>
    public func deleteLaunchProfileMember(input: DeleteLaunchProfileMemberInput, completion: @escaping (SdkResult<DeleteLaunchProfileMemberOutput, DeleteLaunchProfileMemberOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        guard let launchProfileId = input.launchProfileId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component launchProfileId unexpectedly nil"))))
            return
        }
        guard let principalId = input.principalId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component principalId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/launch-profiles/\(launchProfileId)/membership/\(principalId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteLaunchProfileMember")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteLaunchProfileMemberInput, DeleteLaunchProfileMemberOutput, DeleteLaunchProfileMemberOutputError>(id: "deleteLaunchProfileMember")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<DeleteLaunchProfileMemberOutput>, SdkError<DeleteLaunchProfileMemberOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: DeleteLaunchProfileMemberInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteLaunchProfileMemberInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteLaunchProfileMemberInput, DeleteLaunchProfileMemberOutput, DeleteLaunchProfileMemberOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Delete streaming image.</p>
    public func deleteStreamingImage(input: DeleteStreamingImageInput, completion: @escaping (SdkResult<DeleteStreamingImageOutput, DeleteStreamingImageOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        guard let streamingImageId = input.streamingImageId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component streamingImageId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/streaming-images/\(streamingImageId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteStreamingImage")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteStreamingImageInput, DeleteStreamingImageOutput, DeleteStreamingImageOutputError>(id: "deleteStreamingImage")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<DeleteStreamingImageOutput>, SdkError<DeleteStreamingImageOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: DeleteStreamingImageInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteStreamingImageInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteStreamingImageInput, DeleteStreamingImageOutput, DeleteStreamingImageOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes streaming session resource.</p> <p>After invoking this operation, use GetStreamingSession to poll the resource until it transitions to a DELETED state.</p> <p>A streaming session will count against your streaming session quota until it is marked DELETED.</p>
    public func deleteStreamingSession(input: DeleteStreamingSessionInput, completion: @escaping (SdkResult<DeleteStreamingSessionOutput, DeleteStreamingSessionOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        guard let sessionId = input.sessionId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component sessionId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/streaming-sessions/\(sessionId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteStreamingSession")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteStreamingSessionInput, DeleteStreamingSessionOutput, DeleteStreamingSessionOutputError>(id: "deleteStreamingSession")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<DeleteStreamingSessionOutput>, SdkError<DeleteStreamingSessionOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: DeleteStreamingSessionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteStreamingSessionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteStreamingSessionInput, DeleteStreamingSessionOutput, DeleteStreamingSessionOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Delete a studio resource.</p>
    public func deleteStudio(input: DeleteStudioInput, completion: @escaping (SdkResult<DeleteStudioOutput, DeleteStudioOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteStudio")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteStudioInput, DeleteStudioOutput, DeleteStudioOutputError>(id: "deleteStudio")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<DeleteStudioOutput>, SdkError<DeleteStudioOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: DeleteStudioInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteStudioInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteStudioInput, DeleteStudioOutput, DeleteStudioOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a studio component resource.</p>
    public func deleteStudioComponent(input: DeleteStudioComponentInput, completion: @escaping (SdkResult<DeleteStudioComponentOutput, DeleteStudioComponentOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        guard let studioComponentId = input.studioComponentId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioComponentId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/studio-components/\(studioComponentId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteStudioComponent")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteStudioComponentInput, DeleteStudioComponentOutput, DeleteStudioComponentOutputError>(id: "deleteStudioComponent")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<DeleteStudioComponentOutput>, SdkError<DeleteStudioComponentOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: DeleteStudioComponentInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteStudioComponentInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteStudioComponentInput, DeleteStudioComponentOutput, DeleteStudioComponentOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Delete a user from studio membership.</p>
    public func deleteStudioMember(input: DeleteStudioMemberInput, completion: @escaping (SdkResult<DeleteStudioMemberOutput, DeleteStudioMemberOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        guard let principalId = input.principalId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component principalId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/membership/\(principalId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteStudioMember")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteStudioMemberInput, DeleteStudioMemberOutput, DeleteStudioMemberOutputError>(id: "deleteStudioMember")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<DeleteStudioMemberOutput>, SdkError<DeleteStudioMemberOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: DeleteStudioMemberInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteStudioMemberInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteStudioMemberInput, DeleteStudioMemberOutput, DeleteStudioMemberOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Get Eula.</p>
    public func getEula(input: GetEulaInput, completion: @escaping (SdkResult<GetEulaOutput, GetEulaOutputError>) -> Void)
    {
        guard let eulaId = input.eulaId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component eulaId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/eulas/\(eulaId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getEula")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetEulaInput, GetEulaOutput, GetEulaOutputError>(id: "getEula")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetEulaInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetEulaInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetEulaInput, GetEulaOutput, GetEulaOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Get a launch profile.</p>
    public func getLaunchProfile(input: GetLaunchProfileInput, completion: @escaping (SdkResult<GetLaunchProfileOutput, GetLaunchProfileOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        guard let launchProfileId = input.launchProfileId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component launchProfileId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/launch-profiles/\(launchProfileId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getLaunchProfile")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetLaunchProfileInput, GetLaunchProfileOutput, GetLaunchProfileOutputError>(id: "getLaunchProfile")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetLaunchProfileInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetLaunchProfileInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetLaunchProfileInput, GetLaunchProfileOutput, GetLaunchProfileOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Launch profile details include the launch profile resource and summary information of resources that are used by, or available to, the launch profile. This includes the name and description of all studio components used by the launch profiles, and the name and description of streaming images that can be used with this launch profile.</p>
    public func getLaunchProfileDetails(input: GetLaunchProfileDetailsInput, completion: @escaping (SdkResult<GetLaunchProfileDetailsOutput, GetLaunchProfileDetailsOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        guard let launchProfileId = input.launchProfileId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component launchProfileId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/launch-profiles/\(launchProfileId)/details"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getLaunchProfileDetails")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetLaunchProfileDetailsInput, GetLaunchProfileDetailsOutput, GetLaunchProfileDetailsOutputError>(id: "getLaunchProfileDetails")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetLaunchProfileDetailsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetLaunchProfileDetailsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetLaunchProfileDetailsInput, GetLaunchProfileDetailsOutput, GetLaunchProfileDetailsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Get a launch profile initialization.</p>
    public func getLaunchProfileInitialization(input: GetLaunchProfileInitializationInput, completion: @escaping (SdkResult<GetLaunchProfileInitializationOutput, GetLaunchProfileInitializationOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        guard let launchProfileId = input.launchProfileId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component launchProfileId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/launch-profiles/\(launchProfileId)/init"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getLaunchProfileInitialization")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetLaunchProfileInitializationInput, GetLaunchProfileInitializationOutput, GetLaunchProfileInitializationOutputError>(id: "getLaunchProfileInitialization")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetLaunchProfileInitializationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetLaunchProfileInitializationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetLaunchProfileInitializationInput, GetLaunchProfileInitializationOutput, GetLaunchProfileInitializationOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Get a user persona in launch profile membership.</p>
    public func getLaunchProfileMember(input: GetLaunchProfileMemberInput, completion: @escaping (SdkResult<GetLaunchProfileMemberOutput, GetLaunchProfileMemberOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        guard let launchProfileId = input.launchProfileId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component launchProfileId unexpectedly nil"))))
            return
        }
        guard let principalId = input.principalId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component principalId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/launch-profiles/\(launchProfileId)/membership/\(principalId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getLaunchProfileMember")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetLaunchProfileMemberInput, GetLaunchProfileMemberOutput, GetLaunchProfileMemberOutputError>(id: "getLaunchProfileMember")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetLaunchProfileMemberInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetLaunchProfileMemberInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetLaunchProfileMemberInput, GetLaunchProfileMemberOutput, GetLaunchProfileMemberOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Get streaming image.</p>
    public func getStreamingImage(input: GetStreamingImageInput, completion: @escaping (SdkResult<GetStreamingImageOutput, GetStreamingImageOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        guard let streamingImageId = input.streamingImageId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component streamingImageId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/streaming-images/\(streamingImageId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getStreamingImage")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetStreamingImageInput, GetStreamingImageOutput, GetStreamingImageOutputError>(id: "getStreamingImage")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetStreamingImageInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetStreamingImageInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetStreamingImageInput, GetStreamingImageOutput, GetStreamingImageOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets StreamingSession resource.</p> <p>Invoke this operation to poll for a streaming session state while creating or deleting a session.</p>
    public func getStreamingSession(input: GetStreamingSessionInput, completion: @escaping (SdkResult<GetStreamingSessionOutput, GetStreamingSessionOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        guard let sessionId = input.sessionId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component sessionId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/streaming-sessions/\(sessionId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getStreamingSession")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetStreamingSessionInput, GetStreamingSessionOutput, GetStreamingSessionOutputError>(id: "getStreamingSession")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetStreamingSessionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetStreamingSessionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetStreamingSessionInput, GetStreamingSessionOutput, GetStreamingSessionOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets a StreamingSessionStream for a streaming session.</p> <p>Invoke this operation to poll the resource after invoking CreateStreamingSessionStream.</p> <p>After the StreamingSessionStream changes to the state READY, the url property will contain a stream to be used with the DCV streaming client.</p>
    public func getStreamingSessionStream(input: GetStreamingSessionStreamInput, completion: @escaping (SdkResult<GetStreamingSessionStreamOutput, GetStreamingSessionStreamOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        guard let sessionId = input.sessionId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component sessionId unexpectedly nil"))))
            return
        }
        guard let streamId = input.streamId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component streamId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/streaming-sessions/\(sessionId)/streams/\(streamId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getStreamingSessionStream")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetStreamingSessionStreamInput, GetStreamingSessionStreamOutput, GetStreamingSessionStreamOutputError>(id: "getStreamingSessionStream")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetStreamingSessionStreamInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetStreamingSessionStreamInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetStreamingSessionStreamInput, GetStreamingSessionStreamOutput, GetStreamingSessionStreamOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Get a Studio resource.</p>
    public func getStudio(input: GetStudioInput, completion: @escaping (SdkResult<GetStudioOutput, GetStudioOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getStudio")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetStudioInput, GetStudioOutput, GetStudioOutputError>(id: "getStudio")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetStudioInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetStudioInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetStudioInput, GetStudioOutput, GetStudioOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets a studio component resource.</p>
    public func getStudioComponent(input: GetStudioComponentInput, completion: @escaping (SdkResult<GetStudioComponentOutput, GetStudioComponentOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        guard let studioComponentId = input.studioComponentId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioComponentId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/studio-components/\(studioComponentId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getStudioComponent")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetStudioComponentInput, GetStudioComponentOutput, GetStudioComponentOutputError>(id: "getStudioComponent")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetStudioComponentInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetStudioComponentInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetStudioComponentInput, GetStudioComponentOutput, GetStudioComponentOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Get a user's membership in a studio.</p>
    public func getStudioMember(input: GetStudioMemberInput, completion: @escaping (SdkResult<GetStudioMemberOutput, GetStudioMemberOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        guard let principalId = input.principalId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component principalId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/membership/\(principalId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getStudioMember")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetStudioMemberInput, GetStudioMemberOutput, GetStudioMemberOutputError>(id: "getStudioMember")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetStudioMemberInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetStudioMemberInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetStudioMemberInput, GetStudioMemberOutput, GetStudioMemberOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>List Eula Acceptances.</p>
    public func listEulaAcceptances(input: ListEulaAcceptancesInput, completion: @escaping (SdkResult<ListEulaAcceptancesOutput, ListEulaAcceptancesOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/eula-acceptances"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listEulaAcceptances")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListEulaAcceptancesInput, ListEulaAcceptancesOutput, ListEulaAcceptancesOutputError>(id: "listEulaAcceptances")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListEulaAcceptancesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListEulaAcceptancesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListEulaAcceptancesInput, ListEulaAcceptancesOutput, ListEulaAcceptancesOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>List Eulas.</p>
    public func listEulas(input: ListEulasInput, completion: @escaping (SdkResult<ListEulasOutput, ListEulasOutputError>) -> Void)
    {
        let urlPath = "/2020-08-01/eulas"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listEulas")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListEulasInput, ListEulasOutput, ListEulasOutputError>(id: "listEulas")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListEulasInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListEulasInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListEulasInput, ListEulasOutput, ListEulasOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Get all users in a given launch profile membership.</p>
    public func listLaunchProfileMembers(input: ListLaunchProfileMembersInput, completion: @escaping (SdkResult<ListLaunchProfileMembersOutput, ListLaunchProfileMembersOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        guard let launchProfileId = input.launchProfileId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component launchProfileId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/launch-profiles/\(launchProfileId)/membership"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listLaunchProfileMembers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListLaunchProfileMembersInput, ListLaunchProfileMembersOutput, ListLaunchProfileMembersOutputError>(id: "listLaunchProfileMembers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListLaunchProfileMembersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListLaunchProfileMembersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListLaunchProfileMembersInput, ListLaunchProfileMembersOutput, ListLaunchProfileMembersOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>List all the launch profiles a studio.</p>
    public func listLaunchProfiles(input: ListLaunchProfilesInput, completion: @escaping (SdkResult<ListLaunchProfilesOutput, ListLaunchProfilesOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/launch-profiles"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listLaunchProfiles")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListLaunchProfilesInput, ListLaunchProfilesOutput, ListLaunchProfilesOutputError>(id: "listLaunchProfiles")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListLaunchProfilesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListLaunchProfilesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListLaunchProfilesInput, ListLaunchProfilesOutput, ListLaunchProfilesOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>List the streaming image resources available to this studio.</p> <p>This list will contain both images provided by AWS, as well as streaming images that you have created in your studio.</p>
    public func listStreamingImages(input: ListStreamingImagesInput, completion: @escaping (SdkResult<ListStreamingImagesOutput, ListStreamingImagesOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/streaming-images"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listStreamingImages")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListStreamingImagesInput, ListStreamingImagesOutput, ListStreamingImagesOutputError>(id: "listStreamingImages")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListStreamingImagesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListStreamingImagesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListStreamingImagesInput, ListStreamingImagesOutput, ListStreamingImagesOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the streaming image resources in a studio.</p>
    public func listStreamingSessions(input: ListStreamingSessionsInput, completion: @escaping (SdkResult<ListStreamingSessionsOutput, ListStreamingSessionsOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/streaming-sessions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listStreamingSessions")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListStreamingSessionsInput, ListStreamingSessionsOutput, ListStreamingSessionsOutputError>(id: "listStreamingSessions")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListStreamingSessionsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListStreamingSessionsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListStreamingSessionsInput, ListStreamingSessionsOutput, ListStreamingSessionsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the StudioComponents in a studio.</p>
    public func listStudioComponents(input: ListStudioComponentsInput, completion: @escaping (SdkResult<ListStudioComponentsOutput, ListStudioComponentsOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/studio-components"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listStudioComponents")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListStudioComponentsInput, ListStudioComponentsOutput, ListStudioComponentsOutputError>(id: "listStudioComponents")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListStudioComponentsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListStudioComponentsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListStudioComponentsInput, ListStudioComponentsOutput, ListStudioComponentsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Get all users in a given studio membership.</p>
    public func listStudioMembers(input: ListStudioMembersInput, completion: @escaping (SdkResult<ListStudioMembersOutput, ListStudioMembersOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/membership"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listStudioMembers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListStudioMembersInput, ListStudioMembersOutput, ListStudioMembersOutputError>(id: "listStudioMembers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListStudioMembersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListStudioMembersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListStudioMembersInput, ListStudioMembersOutput, ListStudioMembersOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>List studios in your AWS account in the requested AWS Region.</p>
    public func listStudios(input: ListStudiosInput, completion: @escaping (SdkResult<ListStudiosOutput, ListStudiosOutputError>) -> Void)
    {
        let urlPath = "/2020-08-01/studios"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listStudios")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListStudiosInput, ListStudiosOutput, ListStudiosOutputError>(id: "listStudios")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListStudiosInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListStudiosInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListStudiosInput, ListStudiosOutput, ListStudiosOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets the tags for a resource, given its Amazon Resource Names (ARN).</p> <p>This operation supports ARNs for all resource types in Nimble Studio that support tags, including studio, studio component, launch profile, streaming image, and streaming session. All resources that can be tagged will contain an ARN property, so you do not have to create this ARN yourself.</p>
    public func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutput, ListTagsForResourceOutputError>) -> Void)
    {
        guard let resourceArn = input.resourceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component resourceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/tags/\(resourceArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listTagsForResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListTagsForResourceInput, ListTagsForResourceOutput, ListTagsForResourceOutputError>(id: "listTagsForResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListTagsForResourceInput, ListTagsForResourceOutput, ListTagsForResourceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Add/update users with given persona to launch profile membership.</p>
    public func putLaunchProfileMembers(input: PutLaunchProfileMembersInput, completion: @escaping (SdkResult<PutLaunchProfileMembersOutput, PutLaunchProfileMembersOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        guard let launchProfileId = input.launchProfileId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component launchProfileId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/launch-profiles/\(launchProfileId)/membership"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putLaunchProfileMembers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PutLaunchProfileMembersInput, PutLaunchProfileMembersOutput, PutLaunchProfileMembersOutputError>(id: "putLaunchProfileMembers")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<PutLaunchProfileMembersOutput>, SdkError<PutLaunchProfileMembersOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: PutLaunchProfileMembersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PutLaunchProfileMembersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PutLaunchProfileMembersInput, PutLaunchProfileMembersOutput, PutLaunchProfileMembersOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PutLaunchProfileMembersInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Add/update users with given persona to studio membership.</p>
    public func putStudioMembers(input: PutStudioMembersInput, completion: @escaping (SdkResult<PutStudioMembersOutput, PutStudioMembersOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/membership"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putStudioMembers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PutStudioMembersInput, PutStudioMembersOutput, PutStudioMembersOutputError>(id: "putStudioMembers")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<PutStudioMembersOutput>, SdkError<PutStudioMembersOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: PutStudioMembersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PutStudioMembersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PutStudioMembersInput, PutStudioMembersOutput, PutStudioMembersOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PutStudioMembersInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Repairs the SSO configuration for a given studio.</p> <p>If the studio has a valid AWS SSO configuration currently associated with it, this operation will fail with a validation error.</p> <p>If the studio does not have a valid AWS SSO configuration currently associated with it, then a new AWS SSO application is created for the studio and the studio is changed to the READY state.</p> <p>After the AWS SSO application is repaired, you must use the Amazon Nimble Studio console to add administrators and users to your studio.</p>
    public func startStudioSSOConfigurationRepair(input: StartStudioSSOConfigurationRepairInput, completion: @escaping (SdkResult<StartStudioSSOConfigurationRepairOutput, StartStudioSSOConfigurationRepairOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/sso-configuration"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "startStudioSSOConfigurationRepair")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<StartStudioSSOConfigurationRepairInput, StartStudioSSOConfigurationRepairOutput, StartStudioSSOConfigurationRepairOutputError>(id: "startStudioSSOConfigurationRepair")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<StartStudioSSOConfigurationRepairOutput>, SdkError<StartStudioSSOConfigurationRepairOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: StartStudioSSOConfigurationRepairInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: StartStudioSSOConfigurationRepairInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<StartStudioSSOConfigurationRepairInput, StartStudioSSOConfigurationRepairOutput, StartStudioSSOConfigurationRepairOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates tags for a resource, given its ARN.</p>
    public func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutput, TagResourceOutputError>) -> Void)
    {
        guard let resourceArn = input.resourceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component resourceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/tags/\(resourceArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "tagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<TagResourceInput, TagResourceOutput, TagResourceOutputError>(id: "tagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<TagResourceInput, TagResourceOutput, TagResourceOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the tags for a resource.</p>
    public func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutput, UntagResourceOutputError>) -> Void)
    {
        guard let resourceArn = input.resourceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component resourceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/tags/\(resourceArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "untagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UntagResourceInput, UntagResourceOutput, UntagResourceOutputError>(id: "untagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UntagResourceInput, UntagResourceOutput, UntagResourceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Update a launch profile.</p>
    public func updateLaunchProfile(input: UpdateLaunchProfileInput, completion: @escaping (SdkResult<UpdateLaunchProfileOutput, UpdateLaunchProfileOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        guard let launchProfileId = input.launchProfileId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component launchProfileId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/launch-profiles/\(launchProfileId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .patch)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateLaunchProfile")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateLaunchProfileInput, UpdateLaunchProfileOutput, UpdateLaunchProfileOutputError>(id: "updateLaunchProfile")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<UpdateLaunchProfileOutput>, SdkError<UpdateLaunchProfileOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: UpdateLaunchProfileInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateLaunchProfileInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateLaunchProfileInput, UpdateLaunchProfileOutput, UpdateLaunchProfileOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateLaunchProfileInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Update a user persona in launch profile membership.</p>
    public func updateLaunchProfileMember(input: UpdateLaunchProfileMemberInput, completion: @escaping (SdkResult<UpdateLaunchProfileMemberOutput, UpdateLaunchProfileMemberOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        guard let launchProfileId = input.launchProfileId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component launchProfileId unexpectedly nil"))))
            return
        }
        guard let principalId = input.principalId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component principalId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/launch-profiles/\(launchProfileId)/membership/\(principalId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .patch)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateLaunchProfileMember")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateLaunchProfileMemberInput, UpdateLaunchProfileMemberOutput, UpdateLaunchProfileMemberOutputError>(id: "updateLaunchProfileMember")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<UpdateLaunchProfileMemberOutput>, SdkError<UpdateLaunchProfileMemberOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: UpdateLaunchProfileMemberInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateLaunchProfileMemberInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateLaunchProfileMemberInput, UpdateLaunchProfileMemberOutput, UpdateLaunchProfileMemberOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateLaunchProfileMemberInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Update streaming image.</p>
    public func updateStreamingImage(input: UpdateStreamingImageInput, completion: @escaping (SdkResult<UpdateStreamingImageOutput, UpdateStreamingImageOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        guard let streamingImageId = input.streamingImageId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component streamingImageId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/streaming-images/\(streamingImageId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .patch)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateStreamingImage")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateStreamingImageInput, UpdateStreamingImageOutput, UpdateStreamingImageOutputError>(id: "updateStreamingImage")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<UpdateStreamingImageOutput>, SdkError<UpdateStreamingImageOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: UpdateStreamingImageInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateStreamingImageInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateStreamingImageInput, UpdateStreamingImageOutput, UpdateStreamingImageOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateStreamingImageInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Update a Studio resource.</p> <p>Currently, this operation only supports updating the displayName of your studio.</p>
    public func updateStudio(input: UpdateStudioInput, completion: @escaping (SdkResult<UpdateStudioOutput, UpdateStudioOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .patch)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateStudio")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateStudioInput, UpdateStudioOutput, UpdateStudioOutputError>(id: "updateStudio")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<UpdateStudioOutput>, SdkError<UpdateStudioOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: UpdateStudioInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateStudioInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateStudioInput, UpdateStudioOutput, UpdateStudioOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateStudioInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates a studio component resource.</p>
    public func updateStudioComponent(input: UpdateStudioComponentInput, completion: @escaping (SdkResult<UpdateStudioComponentOutput, UpdateStudioComponentOutputError>) -> Void)
    {
        guard let studioId = input.studioId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioId unexpectedly nil"))))
            return
        }
        guard let studioComponentId = input.studioComponentId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component studioComponentId unexpectedly nil"))))
            return
        }
        let urlPath = "/2020-08-01/studios/\(studioId)/studio-components/\(studioComponentId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .patch)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateStudioComponent")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "nimble.\(config.region).amazonaws.com")
                      .withSigningName(value: "nimble")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateStudioComponentInput, UpdateStudioComponentOutput, UpdateStudioComponentOutputError>(id: "updateStudioComponent")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<UpdateStudioComponentOutput>, SdkError<UpdateStudioComponentOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: UpdateStudioComponentInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateStudioComponentInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateStudioComponentInput, UpdateStudioComponentOutput, UpdateStudioComponentOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateStudioComponentInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
