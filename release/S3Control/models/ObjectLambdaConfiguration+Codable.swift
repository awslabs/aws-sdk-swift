// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ObjectLambdaConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allowedFeatures = "AllowedFeatures"
        case cloudWatchMetricsEnabled = "CloudWatchMetricsEnabled"
        case supportingAccessPoint = "SupportingAccessPoint"
        case transformationConfigurations = "TransformationConfigurations"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://awss3control.amazonaws.com/doc/2018-08-20/", forKey: Key("xmlns"))
        }
        if let allowedFeatures = allowedFeatures {
            var allowedFeaturesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("allowedFeatures"))
            for objectlambdaallowedfeature0 in allowedFeatures {
                try allowedFeaturesContainer.encode(objectlambdaallowedfeature0, forKey: Key("AllowedFeature"))
            }
        }
        if cloudWatchMetricsEnabled != false {
            try container.encode(cloudWatchMetricsEnabled, forKey: Key("cloudWatchMetricsEnabled"))
        }
        if let supportingAccessPoint = supportingAccessPoint {
            try container.encode(supportingAccessPoint, forKey: Key("supportingAccessPoint"))
        }
        if let transformationConfigurations = transformationConfigurations {
            var transformationConfigurationsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("transformationConfigurations"))
            for objectlambdatransformationconfiguration0 in transformationConfigurations {
                try transformationConfigurationsContainer.encode(objectlambdatransformationconfiguration0, forKey: Key("TransformationConfiguration"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let supportingAccessPointDecoded = try containerValues.decodeIfPresent(String.self, forKey: .supportingAccessPoint)
        supportingAccessPoint = supportingAccessPointDecoded
        let cloudWatchMetricsEnabledDecoded = try containerValues.decode(Bool.self, forKey: .cloudWatchMetricsEnabled)
        cloudWatchMetricsEnabled = cloudWatchMetricsEnabledDecoded
        if containerValues.contains(.allowedFeatures) {
            struct KeyVal0{struct AllowedFeature{}}
            let allowedFeaturesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.AllowedFeature>.CodingKeys.self, forKey: .allowedFeatures)
            if let allowedFeaturesWrappedContainer = allowedFeaturesWrappedContainer {
                let allowedFeaturesContainer = try allowedFeaturesWrappedContainer.decodeIfPresent([ObjectLambdaAllowedFeature].self, forKey: .member)
                var allowedFeaturesBuffer:[ObjectLambdaAllowedFeature]? = nil
                if let allowedFeaturesContainer = allowedFeaturesContainer {
                    allowedFeaturesBuffer = [ObjectLambdaAllowedFeature]()
                    for stringContainer0 in allowedFeaturesContainer {
                        allowedFeaturesBuffer?.append(stringContainer0)
                    }
                }
                allowedFeatures = allowedFeaturesBuffer
            } else {
                allowedFeatures = []
            }
        } else {
            allowedFeatures = nil
        }
        if containerValues.contains(.transformationConfigurations) {
            struct KeyVal0{struct TransformationConfiguration{}}
            let transformationConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TransformationConfiguration>.CodingKeys.self, forKey: .transformationConfigurations)
            if let transformationConfigurationsWrappedContainer = transformationConfigurationsWrappedContainer {
                let transformationConfigurationsContainer = try transformationConfigurationsWrappedContainer.decodeIfPresent([ObjectLambdaTransformationConfiguration].self, forKey: .member)
                var transformationConfigurationsBuffer:[ObjectLambdaTransformationConfiguration]? = nil
                if let transformationConfigurationsContainer = transformationConfigurationsContainer {
                    transformationConfigurationsBuffer = [ObjectLambdaTransformationConfiguration]()
                    for structureContainer0 in transformationConfigurationsContainer {
                        transformationConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                transformationConfigurations = transformationConfigurationsBuffer
            } else {
                transformationConfigurations = []
            }
        } else {
            transformationConfigurations = nil
        }
    }
}
