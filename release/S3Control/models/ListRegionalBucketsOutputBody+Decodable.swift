// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListRegionalBucketsOutputBody: Equatable {
    public let regionalBucketList: [RegionalBucket]?
    public let nextToken: String?
}

extension ListRegionalBucketsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case regionalBucketList = "RegionalBucketList"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.regionalBucketList) {
            struct KeyVal0{struct RegionalBucket{}}
            let regionalBucketListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.RegionalBucket>.CodingKeys.self, forKey: .regionalBucketList)
            if let regionalBucketListWrappedContainer = regionalBucketListWrappedContainer {
                let regionalBucketListContainer = try regionalBucketListWrappedContainer.decodeIfPresent([RegionalBucket].self, forKey: .member)
                var regionalBucketListBuffer:[RegionalBucket]? = nil
                if let regionalBucketListContainer = regionalBucketListContainer {
                    regionalBucketListBuffer = [RegionalBucket]()
                    for structureContainer0 in regionalBucketListContainer {
                        regionalBucketListBuffer?.append(structureContainer0)
                    }
                }
                regionalBucketList = regionalBucketListBuffer
            } else {
                regionalBucketList = []
            }
        } else {
            regionalBucketList = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
