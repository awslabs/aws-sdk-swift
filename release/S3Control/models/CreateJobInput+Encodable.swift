// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateJobInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case confirmationRequired = "ConfirmationRequired"
        case description = "Description"
        case manifest = "Manifest"
        case operation = "Operation"
        case priority = "Priority"
        case report = "Report"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://awss3control.amazonaws.com/doc/2018-08-20/", forKey: Key("xmlns"))
        }
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: Key("clientRequestToken"))
        }
        if confirmationRequired != false {
            try container.encode(confirmationRequired, forKey: Key("confirmationRequired"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("description"))
        }
        if let manifest = manifest {
            try container.encode(manifest, forKey: Key("manifest"))
        }
        if let operation = operation {
            try container.encode(operation, forKey: Key("operation"))
        }
        if priority != 0 {
            try container.encode(priority, forKey: Key("priority"))
        }
        if let report = report {
            try container.encode(report, forKey: Key("report"))
        }
        if let roleArn = roleArn {
            try container.encode(roleArn, forKey: Key("roleArn"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("tags"))
            for s3tag0 in tags {
                try tagsContainer.encode(s3tag0, forKey: Key("member"))
            }
        }
    }
}
