// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension JobManifestSpec: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fields = "Fields"
        case format = "Format"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://awss3control.amazonaws.com/doc/2018-08-20/", forKey: Key("xmlns"))
        }
        if let fields = fields {
            var fieldsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("fields"))
            for jobmanifestfieldname0 in fields {
                try fieldsContainer.encode(jobmanifestfieldname0, forKey: Key("member"))
            }
        }
        if let format = format {
            try container.encode(format, forKey: Key("format"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let formatDecoded = try containerValues.decodeIfPresent(JobManifestFormat.self, forKey: .format)
        format = formatDecoded
        if containerValues.contains(.fields) {
            struct KeyVal0{struct member{}}
            let fieldsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .fields)
            if let fieldsWrappedContainer = fieldsWrappedContainer {
                let fieldsContainer = try fieldsWrappedContainer.decodeIfPresent([JobManifestFieldName].self, forKey: .member)
                var fieldsBuffer:[JobManifestFieldName]? = nil
                if let fieldsContainer = fieldsContainer {
                    fieldsBuffer = [JobManifestFieldName]()
                    for stringContainer0 in fieldsContainer {
                        fieldsBuffer?.append(stringContainer0)
                    }
                }
                fields = fieldsBuffer
            } else {
                fields = []
            }
        } else {
            fields = nil
        }
    }
}
