// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Include: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case buckets = "Buckets"
        case regions = "Regions"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://awss3control.amazonaws.com/doc/2018-08-20/", forKey: Key("xmlns"))
        }
        if let buckets = buckets {
            var bucketsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("buckets"))
            for s3bucketarnstring0 in buckets {
                try bucketsContainer.encode(s3bucketarnstring0, forKey: Key("Arn"))
            }
        }
        if let regions = regions {
            var regionsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("regions"))
            for s3awsregion0 in regions {
                try regionsContainer.encode(s3awsregion0, forKey: Key("Region"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.buckets) {
            struct KeyVal0{struct Arn{}}
            let bucketsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Arn>.CodingKeys.self, forKey: .buckets)
            if let bucketsWrappedContainer = bucketsWrappedContainer {
                let bucketsContainer = try bucketsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var bucketsBuffer:[String]? = nil
                if let bucketsContainer = bucketsContainer {
                    bucketsBuffer = [String]()
                    for stringContainer0 in bucketsContainer {
                        bucketsBuffer?.append(stringContainer0)
                    }
                }
                buckets = bucketsBuffer
            } else {
                buckets = []
            }
        } else {
            buckets = nil
        }
        if containerValues.contains(.regions) {
            struct KeyVal0{struct Region{}}
            let regionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Region>.CodingKeys.self, forKey: .regions)
            if let regionsWrappedContainer = regionsWrappedContainer {
                let regionsContainer = try regionsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var regionsBuffer:[String]? = nil
                if let regionsContainer = regionsContainer {
                    regionsBuffer = [String]()
                    for stringContainer0 in regionsContainer {
                        regionsBuffer?.append(stringContainer0)
                    }
                }
                regions = regionsBuffer
            } else {
                regions = []
            }
        } else {
            regions = nil
        }
    }
}
