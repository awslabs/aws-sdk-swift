// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension S3ObjectMetadata: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cacheControl = "CacheControl"
        case contentDisposition = "ContentDisposition"
        case contentEncoding = "ContentEncoding"
        case contentLanguage = "ContentLanguage"
        case contentLength = "ContentLength"
        case contentMD5 = "ContentMD5"
        case contentType = "ContentType"
        case httpExpiresDate = "HttpExpiresDate"
        case requesterCharged = "RequesterCharged"
        case sSEAlgorithm = "SSEAlgorithm"
        case userMetadata = "UserMetadata"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://awss3control.amazonaws.com/doc/2018-08-20/", forKey: Key("xmlns"))
        }
        if let cacheControl = cacheControl {
            try container.encode(cacheControl, forKey: Key("cacheControl"))
        }
        if let contentDisposition = contentDisposition {
            try container.encode(contentDisposition, forKey: Key("contentDisposition"))
        }
        if let contentEncoding = contentEncoding {
            try container.encode(contentEncoding, forKey: Key("contentEncoding"))
        }
        if let contentLanguage = contentLanguage {
            try container.encode(contentLanguage, forKey: Key("contentLanguage"))
        }
        if contentLength != 0 {
            try container.encode(contentLength, forKey: Key("contentLength"))
        }
        if let contentMD5 = contentMD5 {
            try container.encode(contentMD5, forKey: Key("contentMD5"))
        }
        if let contentType = contentType {
            try container.encode(contentType, forKey: Key("contentType"))
        }
        if let httpExpiresDate = httpExpiresDate {
            try container.encode(TimestampWrapper(httpExpiresDate, format: .dateTime), forKey: Key("httpExpiresDate"))
        }
        if requesterCharged != false {
            try container.encode(requesterCharged, forKey: Key("requesterCharged"))
        }
        if let sSEAlgorithm = sSEAlgorithm {
            try container.encode(sSEAlgorithm, forKey: Key("sSEAlgorithm"))
        }
        if let userMetadata = userMetadata {
            var userMetadataContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("userMetadata"))
            for (nonemptymaxlength1024stringKey0, maxlength1024stringValue0) in userMetadata {
                var entryContainer0 = userMetadataContainer.nestedContainer(keyedBy: Key.self, forKey: Key("entry"))
                var keyContainer0 = entryContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("key"))
                try keyContainer0.encode(nonemptymaxlength1024stringKey0, forKey: Key(""))
                var valueContainer0 = entryContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("value"))
                try valueContainer0.encode(maxlength1024stringValue0, forKey: Key(""))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheControlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cacheControl)
        cacheControl = cacheControlDecoded
        let contentDispositionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .contentDisposition)
        contentDisposition = contentDispositionDecoded
        let contentEncodingDecoded = try containerValues.decodeIfPresent(String.self, forKey: .contentEncoding)
        contentEncoding = contentEncodingDecoded
        let contentLanguageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .contentLanguage)
        contentLanguage = contentLanguageDecoded
        if containerValues.contains(.userMetadata) {
            struct KeyVal0{struct key{}; struct value{}}
            let userMetadataWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: MapEntry<String, String, KeyVal0.key, KeyVal0.value>.CodingKeys.self, forKey: .userMetadata)
            if let userMetadataWrappedContainer = userMetadataWrappedContainer {
                let userMetadataContainer = try userMetadataWrappedContainer.decodeIfPresent([MapKeyValue<String, String, KeyVal0.key, KeyVal0.value>].self, forKey: .entry)
                var userMetadataBuffer: [String:String]? = nil
                if let userMetadataContainer = userMetadataContainer {
                    userMetadataBuffer = [String:String]()
                    for stringContainer0 in userMetadataContainer {
                        userMetadataBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                userMetadata = userMetadataBuffer
            } else {
                userMetadata = [:]
            }
        } else {
            userMetadata = nil
        }
        let contentLengthDecoded = try containerValues.decode(Int.self, forKey: .contentLength)
        contentLength = contentLengthDecoded
        let contentMD5Decoded = try containerValues.decodeIfPresent(String.self, forKey: .contentMD5)
        contentMD5 = contentMD5Decoded
        let contentTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .contentType)
        contentType = contentTypeDecoded
        let httpExpiresDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .httpExpiresDate)
        var httpExpiresDateBuffer:Date? = nil
        if let httpExpiresDateDecoded = httpExpiresDateDecoded {
            httpExpiresDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(httpExpiresDateDecoded, format: .dateTime)
        }
        httpExpiresDate = httpExpiresDateBuffer
        let requesterChargedDecoded = try containerValues.decode(Bool.self, forKey: .requesterCharged)
        requesterCharged = requesterChargedDecoded
        let sSEAlgorithmDecoded = try containerValues.decodeIfPresent(S3SSEAlgorithm.self, forKey: .sSEAlgorithm)
        sSEAlgorithm = sSEAlgorithmDecoded
    }
}
