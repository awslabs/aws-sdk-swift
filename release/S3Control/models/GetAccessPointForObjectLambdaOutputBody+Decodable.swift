// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetAccessPointForObjectLambdaOutputBody: Equatable {
    public let name: String?
    public let publicAccessBlockConfiguration: PublicAccessBlockConfiguration?
    public let creationDate: Date?
}

extension GetAccessPointForObjectLambdaOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case creationDate = "CreationDate"
        case name = "Name"
        case publicAccessBlockConfiguration = "PublicAccessBlockConfiguration"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let publicAccessBlockConfigurationDecoded = try containerValues.decodeIfPresent(PublicAccessBlockConfiguration.self, forKey: .publicAccessBlockConfiguration)
        publicAccessBlockConfiguration = publicAccessBlockConfigurationDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .creationDate)
        var creationDateBuffer:Date? = nil
        if let creationDateDecoded = creationDateDecoded {
            creationDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(creationDateDecoded, format: .dateTime)
        }
        creationDate = creationDateBuffer
    }
}
