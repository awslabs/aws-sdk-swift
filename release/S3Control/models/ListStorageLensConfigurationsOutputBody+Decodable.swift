// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListStorageLensConfigurationsOutputBody: Equatable {
    public let nextToken: String?
    public let storageLensConfigurationList: [ListStorageLensConfigurationEntry]?
}

extension ListStorageLensConfigurationsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case storageLensConfigurationList = "StorageLensConfigurationList"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.storageLensConfigurationList) {
            let storageLensConfigurationListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .storageLensConfigurationList)
            if storageLensConfigurationListWrappedContainer != nil {
                let storageLensConfigurationListContainer = try containerValues.decodeIfPresent([ListStorageLensConfigurationEntry].self, forKey: .storageLensConfigurationList)
                var storageLensConfigurationListBuffer:[ListStorageLensConfigurationEntry]? = nil
                if let storageLensConfigurationListContainer = storageLensConfigurationListContainer {
                    storageLensConfigurationListBuffer = [ListStorageLensConfigurationEntry]()
                    for structureContainer0 in storageLensConfigurationListContainer {
                        storageLensConfigurationListBuffer?.append(structureContainer0)
                    }
                }
                storageLensConfigurationList = storageLensConfigurationListBuffer
            } else {
                storageLensConfigurationList = []
            }
        } else {
            storageLensConfigurationList = nil
        }
    }
}
