// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RegionalBucket: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bucket = "Bucket"
        case bucketArn = "BucketArn"
        case creationDate = "CreationDate"
        case outpostId = "OutpostId"
        case publicAccessBlockEnabled = "PublicAccessBlockEnabled"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://awss3control.amazonaws.com/doc/2018-08-20/", forKey: Key("xmlns"))
        }
        if let bucket = bucket {
            try container.encode(bucket, forKey: Key("bucket"))
        }
        if let bucketArn = bucketArn {
            try container.encode(bucketArn, forKey: Key("bucketArn"))
        }
        if let creationDate = creationDate {
            try container.encode(TimestampWrapper(creationDate, format: .dateTime), forKey: Key("creationDate"))
        }
        if let outpostId = outpostId {
            try container.encode(outpostId, forKey: Key("outpostId"))
        }
        if publicAccessBlockEnabled != false {
            try container.encode(publicAccessBlockEnabled, forKey: Key("publicAccessBlockEnabled"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bucket)
        bucket = bucketDecoded
        let bucketArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bucketArn)
        bucketArn = bucketArnDecoded
        let publicAccessBlockEnabledDecoded = try containerValues.decode(Bool.self, forKey: .publicAccessBlockEnabled)
        publicAccessBlockEnabled = publicAccessBlockEnabledDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .creationDate)
        var creationDateBuffer:Date? = nil
        if let creationDateDecoded = creationDateDecoded {
            creationDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(creationDateDecoded, format: .dateTime)
        }
        creationDate = creationDateBuffer
        let outpostIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outpostId)
        outpostId = outpostIdDecoded
    }
}
