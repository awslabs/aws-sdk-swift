// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateJobInputBody: Equatable {
    public let confirmationRequired: Bool
    public let operation: JobOperation?
    public let report: JobReport?
    public let clientRequestToken: String?
    public let manifest: JobManifest?
    public let description: String?
    public let priority: Int
    public let roleArn: String?
    public let tags: [S3Tag]?
}

extension CreateJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case confirmationRequired = "ConfirmationRequired"
        case description = "Description"
        case manifest = "Manifest"
        case operation = "Operation"
        case priority = "Priority"
        case report = "Report"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let confirmationRequiredDecoded = try containerValues.decode(Bool.self, forKey: .confirmationRequired)
        confirmationRequired = confirmationRequiredDecoded
        let operationDecoded = try containerValues.decodeIfPresent(JobOperation.self, forKey: .operation)
        operation = operationDecoded
        let reportDecoded = try containerValues.decodeIfPresent(JobReport.self, forKey: .report)
        report = reportDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let manifestDecoded = try containerValues.decodeIfPresent(JobManifest.self, forKey: .manifest)
        manifest = manifestDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let priorityDecoded = try containerValues.decode(Int.self, forKey: .priority)
        priority = priorityDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([S3Tag].self, forKey: .member)
                var tagsBuffer:[S3Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [S3Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
