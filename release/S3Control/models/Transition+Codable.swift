// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Transition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case date = "Date"
        case days = "Days"
        case storageClass = "StorageClass"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://awss3control.amazonaws.com/doc/2018-08-20/", forKey: Key("xmlns"))
        }
        if let date = date {
            try container.encode(TimestampWrapper(date, format: .dateTime), forKey: Key("date"))
        }
        if days != 0 {
            try container.encode(days, forKey: Key("days"))
        }
        if let storageClass = storageClass {
            try container.encode(storageClass, forKey: Key("storageClass"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .date)
        var dateBuffer:Date? = nil
        if let dateDecoded = dateDecoded {
            dateBuffer = try TimestampWrapperDecoder.parseDateStringValue(dateDecoded, format: .dateTime)
        }
        date = dateBuffer
        let daysDecoded = try containerValues.decode(Int.self, forKey: .days)
        days = daysDecoded
        let storageClassDecoded = try containerValues.decodeIfPresent(TransitionStorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
    }
}
