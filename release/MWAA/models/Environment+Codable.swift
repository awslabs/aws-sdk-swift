// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Environment: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case airflowConfigurationOptions = "AirflowConfigurationOptions"
        case airflowVersion = "AirflowVersion"
        case arn = "Arn"
        case createdAt = "CreatedAt"
        case dagS3Path = "DagS3Path"
        case environmentClass = "EnvironmentClass"
        case executionRoleArn = "ExecutionRoleArn"
        case kmsKey = "KmsKey"
        case lastUpdate = "LastUpdate"
        case loggingConfiguration = "LoggingConfiguration"
        case maxWorkers = "MaxWorkers"
        case minWorkers = "MinWorkers"
        case name = "Name"
        case networkConfiguration = "NetworkConfiguration"
        case pluginsS3ObjectVersion = "PluginsS3ObjectVersion"
        case pluginsS3Path = "PluginsS3Path"
        case requirementsS3ObjectVersion = "RequirementsS3ObjectVersion"
        case requirementsS3Path = "RequirementsS3Path"
        case schedulers = "Schedulers"
        case serviceRoleArn = "ServiceRoleArn"
        case sourceBucketArn = "SourceBucketArn"
        case status = "Status"
        case tags = "Tags"
        case webserverAccessMode = "WebserverAccessMode"
        case webserverUrl = "WebserverUrl"
        case weeklyMaintenanceWindowStart = "WeeklyMaintenanceWindowStart"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let airflowConfigurationOptions = airflowConfigurationOptions {
            var airflowConfigurationOptionsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .airflowConfigurationOptions)
            for (dictKey0, airflowconfigurationoptions0) in airflowConfigurationOptions {
                try airflowConfigurationOptionsContainer.encode(airflowconfigurationoptions0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let airflowVersion = airflowVersion {
            try encodeContainer.encode(airflowVersion, forKey: .airflowVersion)
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let dagS3Path = dagS3Path {
            try encodeContainer.encode(dagS3Path, forKey: .dagS3Path)
        }
        if let environmentClass = environmentClass {
            try encodeContainer.encode(environmentClass, forKey: .environmentClass)
        }
        if let executionRoleArn = executionRoleArn {
            try encodeContainer.encode(executionRoleArn, forKey: .executionRoleArn)
        }
        if let kmsKey = kmsKey {
            try encodeContainer.encode(kmsKey, forKey: .kmsKey)
        }
        if let lastUpdate = lastUpdate {
            try encodeContainer.encode(lastUpdate, forKey: .lastUpdate)
        }
        if let loggingConfiguration = loggingConfiguration {
            try encodeContainer.encode(loggingConfiguration, forKey: .loggingConfiguration)
        }
        if let maxWorkers = maxWorkers {
            try encodeContainer.encode(maxWorkers, forKey: .maxWorkers)
        }
        if let minWorkers = minWorkers {
            try encodeContainer.encode(minWorkers, forKey: .minWorkers)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let networkConfiguration = networkConfiguration {
            try encodeContainer.encode(networkConfiguration, forKey: .networkConfiguration)
        }
        if let pluginsS3ObjectVersion = pluginsS3ObjectVersion {
            try encodeContainer.encode(pluginsS3ObjectVersion, forKey: .pluginsS3ObjectVersion)
        }
        if let pluginsS3Path = pluginsS3Path {
            try encodeContainer.encode(pluginsS3Path, forKey: .pluginsS3Path)
        }
        if let requirementsS3ObjectVersion = requirementsS3ObjectVersion {
            try encodeContainer.encode(requirementsS3ObjectVersion, forKey: .requirementsS3ObjectVersion)
        }
        if let requirementsS3Path = requirementsS3Path {
            try encodeContainer.encode(requirementsS3Path, forKey: .requirementsS3Path)
        }
        if let schedulers = schedulers {
            try encodeContainer.encode(schedulers, forKey: .schedulers)
        }
        if let serviceRoleArn = serviceRoleArn {
            try encodeContainer.encode(serviceRoleArn, forKey: .serviceRoleArn)
        }
        if let sourceBucketArn = sourceBucketArn {
            try encodeContainer.encode(sourceBucketArn, forKey: .sourceBucketArn)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let webserverAccessMode = webserverAccessMode {
            try encodeContainer.encode(webserverAccessMode.rawValue, forKey: .webserverAccessMode)
        }
        if let webserverUrl = webserverUrl {
            try encodeContainer.encode(webserverUrl, forKey: .webserverUrl)
        }
        if let weeklyMaintenanceWindowStart = weeklyMaintenanceWindowStart {
            try encodeContainer.encode(weeklyMaintenanceWindowStart, forKey: .weeklyMaintenanceWindowStart)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EnvironmentStatus.self, forKey: .status)
        status = statusDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let webserverUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .webserverUrl)
        webserverUrl = webserverUrlDecoded
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let serviceRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRoleArn)
        serviceRoleArn = serviceRoleArnDecoded
        let kmsKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKey)
        kmsKey = kmsKeyDecoded
        let airflowVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .airflowVersion)
        airflowVersion = airflowVersionDecoded
        let sourceBucketArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceBucketArn)
        sourceBucketArn = sourceBucketArnDecoded
        let dagS3PathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dagS3Path)
        dagS3Path = dagS3PathDecoded
        let pluginsS3PathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pluginsS3Path)
        pluginsS3Path = pluginsS3PathDecoded
        let pluginsS3ObjectVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pluginsS3ObjectVersion)
        pluginsS3ObjectVersion = pluginsS3ObjectVersionDecoded
        let requirementsS3PathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requirementsS3Path)
        requirementsS3Path = requirementsS3PathDecoded
        let requirementsS3ObjectVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requirementsS3ObjectVersion)
        requirementsS3ObjectVersion = requirementsS3ObjectVersionDecoded
        let airflowConfigurationOptionsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .airflowConfigurationOptions)
        var airflowConfigurationOptionsDecoded0: [String:String]? = nil
        if let airflowConfigurationOptionsContainer = airflowConfigurationOptionsContainer {
            airflowConfigurationOptionsDecoded0 = [String:String]()
            for (key0, configvalue0) in airflowConfigurationOptionsContainer {
                airflowConfigurationOptionsDecoded0?[key0] = configvalue0
            }
        }
        airflowConfigurationOptions = airflowConfigurationOptionsDecoded0
        let environmentClassDecoded = try containerValues.decodeIfPresent(String.self, forKey: .environmentClass)
        environmentClass = environmentClassDecoded
        let maxWorkersDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxWorkers)
        maxWorkers = maxWorkersDecoded
        let networkConfigurationDecoded = try containerValues.decodeIfPresent(NetworkConfiguration.self, forKey: .networkConfiguration)
        networkConfiguration = networkConfigurationDecoded
        let loggingConfigurationDecoded = try containerValues.decodeIfPresent(LoggingConfiguration.self, forKey: .loggingConfiguration)
        loggingConfiguration = loggingConfigurationDecoded
        let lastUpdateDecoded = try containerValues.decodeIfPresent(LastUpdate.self, forKey: .lastUpdate)
        lastUpdate = lastUpdateDecoded
        let weeklyMaintenanceWindowStartDecoded = try containerValues.decodeIfPresent(String.self, forKey: .weeklyMaintenanceWindowStart)
        weeklyMaintenanceWindowStart = weeklyMaintenanceWindowStartDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let webserverAccessModeDecoded = try containerValues.decodeIfPresent(WebserverAccessMode.self, forKey: .webserverAccessMode)
        webserverAccessMode = webserverAccessModeDecoded
        let minWorkersDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minWorkers)
        minWorkers = minWorkersDecoded
        let schedulersDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .schedulers)
        schedulers = schedulersDecoded
    }
}
