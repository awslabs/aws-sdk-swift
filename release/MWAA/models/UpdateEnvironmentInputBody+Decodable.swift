// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateEnvironmentInputBody: Equatable {
    public let executionRoleArn: String?
    public let airflowVersion: String?
    public let sourceBucketArn: String?
    public let dagS3Path: String?
    public let pluginsS3Path: String?
    public let pluginsS3ObjectVersion: String?
    public let requirementsS3Path: String?
    public let requirementsS3ObjectVersion: String?
    public let airflowConfigurationOptions: [String:String]?
    public let environmentClass: String?
    public let maxWorkers: Int?
    public let networkConfiguration: UpdateNetworkConfigurationInput?
    public let loggingConfiguration: LoggingConfigurationInput?
    public let weeklyMaintenanceWindowStart: String?
    public let webserverAccessMode: WebserverAccessMode?
    public let minWorkers: Int?
    public let schedulers: Int?
}

extension UpdateEnvironmentInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case airflowConfigurationOptions = "AirflowConfigurationOptions"
        case airflowVersion = "AirflowVersion"
        case dagS3Path = "DagS3Path"
        case environmentClass = "EnvironmentClass"
        case executionRoleArn = "ExecutionRoleArn"
        case loggingConfiguration = "LoggingConfiguration"
        case maxWorkers = "MaxWorkers"
        case minWorkers = "MinWorkers"
        case networkConfiguration = "NetworkConfiguration"
        case pluginsS3ObjectVersion = "PluginsS3ObjectVersion"
        case pluginsS3Path = "PluginsS3Path"
        case requirementsS3ObjectVersion = "RequirementsS3ObjectVersion"
        case requirementsS3Path = "RequirementsS3Path"
        case schedulers = "Schedulers"
        case sourceBucketArn = "SourceBucketArn"
        case webserverAccessMode = "WebserverAccessMode"
        case weeklyMaintenanceWindowStart = "WeeklyMaintenanceWindowStart"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let airflowVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .airflowVersion)
        airflowVersion = airflowVersionDecoded
        let sourceBucketArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceBucketArn)
        sourceBucketArn = sourceBucketArnDecoded
        let dagS3PathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dagS3Path)
        dagS3Path = dagS3PathDecoded
        let pluginsS3PathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pluginsS3Path)
        pluginsS3Path = pluginsS3PathDecoded
        let pluginsS3ObjectVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pluginsS3ObjectVersion)
        pluginsS3ObjectVersion = pluginsS3ObjectVersionDecoded
        let requirementsS3PathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requirementsS3Path)
        requirementsS3Path = requirementsS3PathDecoded
        let requirementsS3ObjectVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requirementsS3ObjectVersion)
        requirementsS3ObjectVersion = requirementsS3ObjectVersionDecoded
        let airflowConfigurationOptionsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .airflowConfigurationOptions)
        var airflowConfigurationOptionsDecoded0: [String:String]? = nil
        if let airflowConfigurationOptionsContainer = airflowConfigurationOptionsContainer {
            airflowConfigurationOptionsDecoded0 = [String:String]()
            for (key0, configvalue0) in airflowConfigurationOptionsContainer {
                airflowConfigurationOptionsDecoded0?[key0] = configvalue0
            }
        }
        airflowConfigurationOptions = airflowConfigurationOptionsDecoded0
        let environmentClassDecoded = try containerValues.decodeIfPresent(String.self, forKey: .environmentClass)
        environmentClass = environmentClassDecoded
        let maxWorkersDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxWorkers)
        maxWorkers = maxWorkersDecoded
        let networkConfigurationDecoded = try containerValues.decodeIfPresent(UpdateNetworkConfigurationInput.self, forKey: .networkConfiguration)
        networkConfiguration = networkConfigurationDecoded
        let loggingConfigurationDecoded = try containerValues.decodeIfPresent(LoggingConfigurationInput.self, forKey: .loggingConfiguration)
        loggingConfiguration = loggingConfigurationDecoded
        let weeklyMaintenanceWindowStartDecoded = try containerValues.decodeIfPresent(String.self, forKey: .weeklyMaintenanceWindowStart)
        weeklyMaintenanceWindowStart = weeklyMaintenanceWindowStartDecoded
        let webserverAccessModeDecoded = try containerValues.decodeIfPresent(WebserverAccessMode.self, forKey: .webserverAccessMode)
        webserverAccessMode = webserverAccessModeDecoded
        let minWorkersDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minWorkers)
        minWorkers = minWorkersDecoded
        let schedulersDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .schedulers)
        schedulers = schedulersDecoded
    }
}
