// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension IotEventsDataClientTypes.AcknowledgeActionConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case note
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let note = self.note {
            try encodeContainer.encode(note, forKey: .note)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let noteDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .note)
        note = noteDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Contains the configuration information of an acknowledge action.
    public struct AcknowledgeActionConfiguration: Swift.Equatable {
        /// The note that you can leave when you acknowledge the alarm.
        public var note: Swift.String?

        public init (
            note: Swift.String? = nil
        )
        {
            self.note = note
        }
    }

}

extension IotEventsDataClientTypes.AcknowledgeAlarmActionRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmModelName
        case keyValue
        case note
        case requestId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmModelName = self.alarmModelName {
            try encodeContainer.encode(alarmModelName, forKey: .alarmModelName)
        }
        if let keyValue = self.keyValue {
            try encodeContainer.encode(keyValue, forKey: .keyValue)
        }
        if let note = self.note {
            try encodeContainer.encode(note, forKey: .note)
        }
        if let requestId = self.requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let alarmModelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmModelName)
        alarmModelName = alarmModelNameDecoded
        let keyValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyValue)
        keyValue = keyValueDecoded
        let noteDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .note)
        note = noteDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Information needed to acknowledge the alarm.
    public struct AcknowledgeAlarmActionRequest: Swift.Equatable {
        /// The name of the alarm model.
        /// This member is required.
        public var alarmModelName: Swift.String?
        /// The value of the key used as a filter to select only the alarms associated with the [key](https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateAlarmModel.html#iotevents-CreateAlarmModel-request-key).
        public var keyValue: Swift.String?
        /// The note that you can leave when you acknowledge the alarm.
        public var note: Swift.String?
        /// The request ID. Each ID must be unique within each batch.
        /// This member is required.
        public var requestId: Swift.String?

        public init (
            alarmModelName: Swift.String? = nil,
            keyValue: Swift.String? = nil,
            note: Swift.String? = nil,
            requestId: Swift.String? = nil
        )
        {
            self.alarmModelName = alarmModelName
            self.keyValue = keyValue
            self.note = note
            self.requestId = requestId
        }
    }

}

extension IotEventsDataClientTypes.Alarm: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmModelName
        case alarmModelVersion
        case alarmState
        case creationTime
        case keyValue
        case lastUpdateTime
        case severity
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmModelName = self.alarmModelName {
            try encodeContainer.encode(alarmModelName, forKey: .alarmModelName)
        }
        if let alarmModelVersion = self.alarmModelVersion {
            try encodeContainer.encode(alarmModelVersion, forKey: .alarmModelVersion)
        }
        if let alarmState = self.alarmState {
            try encodeContainer.encode(alarmState, forKey: .alarmState)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let keyValue = self.keyValue {
            try encodeContainer.encode(keyValue, forKey: .keyValue)
        }
        if let lastUpdateTime = self.lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let severity = self.severity {
            try encodeContainer.encode(severity, forKey: .severity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmModelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmModelName)
        alarmModelName = alarmModelNameDecoded
        let alarmModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmModelVersion)
        alarmModelVersion = alarmModelVersionDecoded
        let keyValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyValue)
        keyValue = keyValueDecoded
        let alarmStateDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.AlarmState.self, forKey: .alarmState)
        alarmState = alarmStateDecoded
        let severityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .severity)
        severity = severityDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Contains information about an alarm.
    public struct Alarm: Swift.Equatable {
        /// The name of the alarm model.
        public var alarmModelName: Swift.String?
        /// The version of the alarm model.
        public var alarmModelVersion: Swift.String?
        /// Contains information about the current state of the alarm.
        public var alarmState: IotEventsDataClientTypes.AlarmState?
        /// The time the alarm was created, in the Unix epoch format.
        public var creationTime: ClientRuntime.Date?
        /// The value of the key used as a filter to select only the alarms associated with the [key](https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateAlarmModel.html#iotevents-CreateAlarmModel-request-key).
        public var keyValue: Swift.String?
        /// The time the alarm was last updated, in the Unix epoch format.
        public var lastUpdateTime: ClientRuntime.Date?
        /// A non-negative integer that reflects the severity level of the alarm.
        public var severity: Swift.Int?

        public init (
            alarmModelName: Swift.String? = nil,
            alarmModelVersion: Swift.String? = nil,
            alarmState: IotEventsDataClientTypes.AlarmState? = nil,
            creationTime: ClientRuntime.Date? = nil,
            keyValue: Swift.String? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            severity: Swift.Int? = nil
        )
        {
            self.alarmModelName = alarmModelName
            self.alarmModelVersion = alarmModelVersion
            self.alarmState = alarmState
            self.creationTime = creationTime
            self.keyValue = keyValue
            self.lastUpdateTime = lastUpdateTime
            self.severity = severity
        }
    }

}

extension IotEventsDataClientTypes.AlarmState: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customerAction
        case ruleEvaluation
        case stateName
        case systemEvent
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customerAction = self.customerAction {
            try encodeContainer.encode(customerAction, forKey: .customerAction)
        }
        if let ruleEvaluation = self.ruleEvaluation {
            try encodeContainer.encode(ruleEvaluation, forKey: .ruleEvaluation)
        }
        if let stateName = self.stateName {
            try encodeContainer.encode(stateName.rawValue, forKey: .stateName)
        }
        if let systemEvent = self.systemEvent {
            try encodeContainer.encode(systemEvent, forKey: .systemEvent)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateNameDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.AlarmStateName.self, forKey: .stateName)
        stateName = stateNameDecoded
        let ruleEvaluationDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.RuleEvaluation.self, forKey: .ruleEvaluation)
        ruleEvaluation = ruleEvaluationDecoded
        let customerActionDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.CustomerAction.self, forKey: .customerAction)
        customerAction = customerActionDecoded
        let systemEventDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.SystemEvent.self, forKey: .systemEvent)
        systemEvent = systemEventDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Contains information about the current state of the alarm.
    public struct AlarmState: Swift.Equatable {
        /// Contains information about the action that you can take to respond to the alarm.
        public var customerAction: IotEventsDataClientTypes.CustomerAction?
        /// Information needed to evaluate data.
        public var ruleEvaluation: IotEventsDataClientTypes.RuleEvaluation?
        /// The name of the alarm state. The state name can be one of the following values:
        ///
        /// * DISABLED - When the alarm is in the DISABLED state, it isn't ready to evaluate data. To enable the alarm, you must change the alarm to the NORMAL state.
        ///
        /// * NORMAL - When the alarm is in the NORMAL state, it's ready to evaluate data.
        ///
        /// * ACTIVE - If the alarm is in the ACTIVE state, the alarm is invoked.
        ///
        /// * ACKNOWLEDGED - When the alarm is in the ACKNOWLEDGED state, the alarm was invoked and you acknowledged the alarm.
        ///
        /// * SNOOZE_DISABLED - When the alarm is in the SNOOZE_DISABLED state, the alarm is disabled for a specified period of time. After the snooze time, the alarm automatically changes to the NORMAL state.
        ///
        /// * LATCHED - When the alarm is in the LATCHED state, the alarm was invoked. However, the data that the alarm is currently evaluating is within the specified range. To change the alarm to the NORMAL state, you must acknowledge the alarm.
        public var stateName: IotEventsDataClientTypes.AlarmStateName?
        /// Contains information about alarm state changes.
        public var systemEvent: IotEventsDataClientTypes.SystemEvent?

        public init (
            customerAction: IotEventsDataClientTypes.CustomerAction? = nil,
            ruleEvaluation: IotEventsDataClientTypes.RuleEvaluation? = nil,
            stateName: IotEventsDataClientTypes.AlarmStateName? = nil,
            systemEvent: IotEventsDataClientTypes.SystemEvent? = nil
        )
        {
            self.customerAction = customerAction
            self.ruleEvaluation = ruleEvaluation
            self.stateName = stateName
            self.systemEvent = systemEvent
        }
    }

}

extension IotEventsDataClientTypes {
    public enum AlarmStateName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case acknowledged
        case active
        case disabled
        case latched
        case normal
        case snoozeDisabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AlarmStateName] {
            return [
                .acknowledged,
                .active,
                .disabled,
                .latched,
                .normal,
                .snoozeDisabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .acknowledged: return "ACKNOWLEDGED"
            case .active: return "ACTIVE"
            case .disabled: return "DISABLED"
            case .latched: return "LATCHED"
            case .normal: return "NORMAL"
            case .snoozeDisabled: return "SNOOZE_DISABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AlarmStateName(rawValue: rawValue) ?? AlarmStateName.sdkUnknown(rawValue)
        }
    }
}

extension IotEventsDataClientTypes.AlarmSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmModelName
        case alarmModelVersion
        case creationTime
        case keyValue
        case lastUpdateTime
        case stateName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmModelName = self.alarmModelName {
            try encodeContainer.encode(alarmModelName, forKey: .alarmModelName)
        }
        if let alarmModelVersion = self.alarmModelVersion {
            try encodeContainer.encode(alarmModelVersion, forKey: .alarmModelVersion)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let keyValue = self.keyValue {
            try encodeContainer.encode(keyValue, forKey: .keyValue)
        }
        if let lastUpdateTime = self.lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let stateName = self.stateName {
            try encodeContainer.encode(stateName.rawValue, forKey: .stateName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmModelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmModelName)
        alarmModelName = alarmModelNameDecoded
        let alarmModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmModelVersion)
        alarmModelVersion = alarmModelVersionDecoded
        let keyValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyValue)
        keyValue = keyValueDecoded
        let stateNameDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.AlarmStateName.self, forKey: .stateName)
        stateName = stateNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Contains a summary of an alarm.
    public struct AlarmSummary: Swift.Equatable {
        /// The name of the alarm model.
        public var alarmModelName: Swift.String?
        /// The version of the alarm model.
        public var alarmModelVersion: Swift.String?
        /// The time the alarm was created, in the Unix epoch format.
        public var creationTime: ClientRuntime.Date?
        /// The value of the key used as a filter to select only the alarms associated with the [key](https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateAlarmModel.html#iotevents-CreateAlarmModel-request-key).
        public var keyValue: Swift.String?
        /// The time the alarm was last updated, in the Unix epoch format.
        public var lastUpdateTime: ClientRuntime.Date?
        /// The name of the alarm state. The state name can be one of the following values:
        ///
        /// * DISABLED - When the alarm is in the DISABLED state, it isn't ready to evaluate data. To enable the alarm, you must change the alarm to the NORMAL state.
        ///
        /// * NORMAL - When the alarm is in the NORMAL state, it's ready to evaluate data.
        ///
        /// * ACTIVE - If the alarm is in the ACTIVE state, the alarm is invoked.
        ///
        /// * ACKNOWLEDGED - When the alarm is in the ACKNOWLEDGED state, the alarm was invoked and you acknowledged the alarm.
        ///
        /// * SNOOZE_DISABLED - When the alarm is in the SNOOZE_DISABLED state, the alarm is disabled for a specified period of time. After the snooze time, the alarm automatically changes to the NORMAL state.
        ///
        /// * LATCHED - When the alarm is in the LATCHED state, the alarm was invoked. However, the data that the alarm is currently evaluating is within the specified range. To change the alarm to the NORMAL state, you must acknowledge the alarm.
        public var stateName: IotEventsDataClientTypes.AlarmStateName?

        public init (
            alarmModelName: Swift.String? = nil,
            alarmModelVersion: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            keyValue: Swift.String? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            stateName: IotEventsDataClientTypes.AlarmStateName? = nil
        )
        {
            self.alarmModelName = alarmModelName
            self.alarmModelVersion = alarmModelVersion
            self.creationTime = creationTime
            self.keyValue = keyValue
            self.lastUpdateTime = lastUpdateTime
            self.stateName = stateName
        }
    }

}

extension BatchAcknowledgeAlarmInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acknowledgeActionRequests
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acknowledgeActionRequests = acknowledgeActionRequests {
            var acknowledgeActionRequestsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .acknowledgeActionRequests)
            for acknowledgealarmactionrequests0 in acknowledgeActionRequests {
                try acknowledgeActionRequestsContainer.encode(acknowledgealarmactionrequests0)
            }
        }
    }
}

extension BatchAcknowledgeAlarmInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/alarms/acknowledge"
    }
}

public struct BatchAcknowledgeAlarmInput: Swift.Equatable {
    /// The list of acknowledge action requests. You can specify up to 10 requests per operation.
    /// This member is required.
    public var acknowledgeActionRequests: [IotEventsDataClientTypes.AcknowledgeAlarmActionRequest]?

    public init (
        acknowledgeActionRequests: [IotEventsDataClientTypes.AcknowledgeAlarmActionRequest]? = nil
    )
    {
        self.acknowledgeActionRequests = acknowledgeActionRequests
    }
}

struct BatchAcknowledgeAlarmInputBody: Swift.Equatable {
    let acknowledgeActionRequests: [IotEventsDataClientTypes.AcknowledgeAlarmActionRequest]?
}

extension BatchAcknowledgeAlarmInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acknowledgeActionRequests
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let acknowledgeActionRequestsContainer = try containerValues.decodeIfPresent([IotEventsDataClientTypes.AcknowledgeAlarmActionRequest?].self, forKey: .acknowledgeActionRequests)
        var acknowledgeActionRequestsDecoded0:[IotEventsDataClientTypes.AcknowledgeAlarmActionRequest]? = nil
        if let acknowledgeActionRequestsContainer = acknowledgeActionRequestsContainer {
            acknowledgeActionRequestsDecoded0 = [IotEventsDataClientTypes.AcknowledgeAlarmActionRequest]()
            for structure0 in acknowledgeActionRequestsContainer {
                if let structure0 = structure0 {
                    acknowledgeActionRequestsDecoded0?.append(structure0)
                }
            }
        }
        acknowledgeActionRequests = acknowledgeActionRequestsDecoded0
    }
}

extension BatchAcknowledgeAlarmOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchAcknowledgeAlarmOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchAcknowledgeAlarmOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchAcknowledgeAlarmOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchAcknowledgeAlarmOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errorEntries = output.errorEntries
        } else {
            self.errorEntries = nil
        }
    }
}

public struct BatchAcknowledgeAlarmOutputResponse: Swift.Equatable {
    /// A list of errors associated with the request, or null if there are no errors. Each error entry contains an entry ID that helps you identify the entry that failed.
    public var errorEntries: [IotEventsDataClientTypes.BatchAlarmActionErrorEntry]?

    public init (
        errorEntries: [IotEventsDataClientTypes.BatchAlarmActionErrorEntry]? = nil
    )
    {
        self.errorEntries = errorEntries
    }
}

struct BatchAcknowledgeAlarmOutputResponseBody: Swift.Equatable {
    let errorEntries: [IotEventsDataClientTypes.BatchAlarmActionErrorEntry]?
}

extension BatchAcknowledgeAlarmOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorEntries
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorEntriesContainer = try containerValues.decodeIfPresent([IotEventsDataClientTypes.BatchAlarmActionErrorEntry?].self, forKey: .errorEntries)
        var errorEntriesDecoded0:[IotEventsDataClientTypes.BatchAlarmActionErrorEntry]? = nil
        if let errorEntriesContainer = errorEntriesContainer {
            errorEntriesDecoded0 = [IotEventsDataClientTypes.BatchAlarmActionErrorEntry]()
            for structure0 in errorEntriesContainer {
                if let structure0 = structure0 {
                    errorEntriesDecoded0?.append(structure0)
                }
            }
        }
        errorEntries = errorEntriesDecoded0
    }
}

extension IotEventsDataClientTypes.BatchAlarmActionErrorEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode
        case errorMessage
        case requestId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode.rawValue, forKey: .errorCode)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let requestId = self.requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.ErrorCode.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Contains error messages associated with one of the following requests:
    ///
    /// * [BatchAcknowledgeAlarm](https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_BatchAcknowledgeAlarm.html)
    ///
    /// * [BatchDisableAlarm](https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_BatchDisableAlarm.html)
    ///
    /// * [BatchEnableAlarm](https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_BatchEnableAlarm.html)
    ///
    /// * [BatchResetAlarm](https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_BatchResetAlarm.html)
    ///
    /// * [BatchSnoozeAlarm](https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_BatchSnoozeAlarm.html)
    public struct BatchAlarmActionErrorEntry: Swift.Equatable {
        /// The error code.
        public var errorCode: IotEventsDataClientTypes.ErrorCode?
        /// A message that describes the error.
        public var errorMessage: Swift.String?
        /// The request ID. Each ID must be unique within each batch.
        public var requestId: Swift.String?

        public init (
            errorCode: IotEventsDataClientTypes.ErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            requestId: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.requestId = requestId
        }
    }

}

extension IotEventsDataClientTypes.BatchDeleteDetectorErrorEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode
        case errorMessage
        case messageId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode.rawValue, forKey: .errorCode)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let messageId = self.messageId {
            try encodeContainer.encode(messageId, forKey: .messageId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.ErrorCode.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Contains error messages associated with the deletion request.
    public struct BatchDeleteDetectorErrorEntry: Swift.Equatable {
        /// The error code.
        public var errorCode: IotEventsDataClientTypes.ErrorCode?
        /// A message that describes the error.
        public var errorMessage: Swift.String?
        /// The ID of the message that caused the error. (See the value of the "messageId" in the [detectors](https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_BatchDeleteDetector.html#iotevents-iotevents-data_BatchDeleteDetector-request-detectors) object of the DeleteDetectorRequest.)
        public var messageId: Swift.String?

        public init (
            errorCode: IotEventsDataClientTypes.ErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            messageId: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.messageId = messageId
        }
    }

}

extension BatchDeleteDetectorInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case detectors
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let detectors = detectors {
            var detectorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .detectors)
            for deletedetectorrequests0 in detectors {
                try detectorsContainer.encode(deletedetectorrequests0)
            }
        }
    }
}

extension BatchDeleteDetectorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/detectors/delete"
    }
}

public struct BatchDeleteDetectorInput: Swift.Equatable {
    /// The list of one or more detectors to be deleted.
    /// This member is required.
    public var detectors: [IotEventsDataClientTypes.DeleteDetectorRequest]?

    public init (
        detectors: [IotEventsDataClientTypes.DeleteDetectorRequest]? = nil
    )
    {
        self.detectors = detectors
    }
}

struct BatchDeleteDetectorInputBody: Swift.Equatable {
    let detectors: [IotEventsDataClientTypes.DeleteDetectorRequest]?
}

extension BatchDeleteDetectorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case detectors
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detectorsContainer = try containerValues.decodeIfPresent([IotEventsDataClientTypes.DeleteDetectorRequest?].self, forKey: .detectors)
        var detectorsDecoded0:[IotEventsDataClientTypes.DeleteDetectorRequest]? = nil
        if let detectorsContainer = detectorsContainer {
            detectorsDecoded0 = [IotEventsDataClientTypes.DeleteDetectorRequest]()
            for structure0 in detectorsContainer {
                if let structure0 = structure0 {
                    detectorsDecoded0?.append(structure0)
                }
            }
        }
        detectors = detectorsDecoded0
    }
}

extension BatchDeleteDetectorOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchDeleteDetectorOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchDeleteDetectorOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchDeleteDetectorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchDeleteDetectorOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.batchDeleteDetectorErrorEntries = output.batchDeleteDetectorErrorEntries
        } else {
            self.batchDeleteDetectorErrorEntries = nil
        }
    }
}

public struct BatchDeleteDetectorOutputResponse: Swift.Equatable {
    /// A list of errors associated with the request, or an empty array ([]) if there are no errors. Each error entry contains a messageId that helps you identify the entry that failed.
    public var batchDeleteDetectorErrorEntries: [IotEventsDataClientTypes.BatchDeleteDetectorErrorEntry]?

    public init (
        batchDeleteDetectorErrorEntries: [IotEventsDataClientTypes.BatchDeleteDetectorErrorEntry]? = nil
    )
    {
        self.batchDeleteDetectorErrorEntries = batchDeleteDetectorErrorEntries
    }
}

struct BatchDeleteDetectorOutputResponseBody: Swift.Equatable {
    let batchDeleteDetectorErrorEntries: [IotEventsDataClientTypes.BatchDeleteDetectorErrorEntry]?
}

extension BatchDeleteDetectorOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchDeleteDetectorErrorEntries
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchDeleteDetectorErrorEntriesContainer = try containerValues.decodeIfPresent([IotEventsDataClientTypes.BatchDeleteDetectorErrorEntry?].self, forKey: .batchDeleteDetectorErrorEntries)
        var batchDeleteDetectorErrorEntriesDecoded0:[IotEventsDataClientTypes.BatchDeleteDetectorErrorEntry]? = nil
        if let batchDeleteDetectorErrorEntriesContainer = batchDeleteDetectorErrorEntriesContainer {
            batchDeleteDetectorErrorEntriesDecoded0 = [IotEventsDataClientTypes.BatchDeleteDetectorErrorEntry]()
            for structure0 in batchDeleteDetectorErrorEntriesContainer {
                if let structure0 = structure0 {
                    batchDeleteDetectorErrorEntriesDecoded0?.append(structure0)
                }
            }
        }
        batchDeleteDetectorErrorEntries = batchDeleteDetectorErrorEntriesDecoded0
    }
}

extension BatchDisableAlarmInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case disableActionRequests
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let disableActionRequests = disableActionRequests {
            var disableActionRequestsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .disableActionRequests)
            for disablealarmactionrequests0 in disableActionRequests {
                try disableActionRequestsContainer.encode(disablealarmactionrequests0)
            }
        }
    }
}

extension BatchDisableAlarmInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/alarms/disable"
    }
}

public struct BatchDisableAlarmInput: Swift.Equatable {
    /// The list of disable action requests. You can specify up to 10 requests per operation.
    /// This member is required.
    public var disableActionRequests: [IotEventsDataClientTypes.DisableAlarmActionRequest]?

    public init (
        disableActionRequests: [IotEventsDataClientTypes.DisableAlarmActionRequest]? = nil
    )
    {
        self.disableActionRequests = disableActionRequests
    }
}

struct BatchDisableAlarmInputBody: Swift.Equatable {
    let disableActionRequests: [IotEventsDataClientTypes.DisableAlarmActionRequest]?
}

extension BatchDisableAlarmInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case disableActionRequests
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let disableActionRequestsContainer = try containerValues.decodeIfPresent([IotEventsDataClientTypes.DisableAlarmActionRequest?].self, forKey: .disableActionRequests)
        var disableActionRequestsDecoded0:[IotEventsDataClientTypes.DisableAlarmActionRequest]? = nil
        if let disableActionRequestsContainer = disableActionRequestsContainer {
            disableActionRequestsDecoded0 = [IotEventsDataClientTypes.DisableAlarmActionRequest]()
            for structure0 in disableActionRequestsContainer {
                if let structure0 = structure0 {
                    disableActionRequestsDecoded0?.append(structure0)
                }
            }
        }
        disableActionRequests = disableActionRequestsDecoded0
    }
}

extension BatchDisableAlarmOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchDisableAlarmOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchDisableAlarmOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchDisableAlarmOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchDisableAlarmOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errorEntries = output.errorEntries
        } else {
            self.errorEntries = nil
        }
    }
}

public struct BatchDisableAlarmOutputResponse: Swift.Equatable {
    /// A list of errors associated with the request, or null if there are no errors. Each error entry contains an entry ID that helps you identify the entry that failed.
    public var errorEntries: [IotEventsDataClientTypes.BatchAlarmActionErrorEntry]?

    public init (
        errorEntries: [IotEventsDataClientTypes.BatchAlarmActionErrorEntry]? = nil
    )
    {
        self.errorEntries = errorEntries
    }
}

struct BatchDisableAlarmOutputResponseBody: Swift.Equatable {
    let errorEntries: [IotEventsDataClientTypes.BatchAlarmActionErrorEntry]?
}

extension BatchDisableAlarmOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorEntries
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorEntriesContainer = try containerValues.decodeIfPresent([IotEventsDataClientTypes.BatchAlarmActionErrorEntry?].self, forKey: .errorEntries)
        var errorEntriesDecoded0:[IotEventsDataClientTypes.BatchAlarmActionErrorEntry]? = nil
        if let errorEntriesContainer = errorEntriesContainer {
            errorEntriesDecoded0 = [IotEventsDataClientTypes.BatchAlarmActionErrorEntry]()
            for structure0 in errorEntriesContainer {
                if let structure0 = structure0 {
                    errorEntriesDecoded0?.append(structure0)
                }
            }
        }
        errorEntries = errorEntriesDecoded0
    }
}

extension BatchEnableAlarmInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enableActionRequests
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enableActionRequests = enableActionRequests {
            var enableActionRequestsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .enableActionRequests)
            for enablealarmactionrequests0 in enableActionRequests {
                try enableActionRequestsContainer.encode(enablealarmactionrequests0)
            }
        }
    }
}

extension BatchEnableAlarmInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/alarms/enable"
    }
}

public struct BatchEnableAlarmInput: Swift.Equatable {
    /// The list of enable action requests. You can specify up to 10 requests per operation.
    /// This member is required.
    public var enableActionRequests: [IotEventsDataClientTypes.EnableAlarmActionRequest]?

    public init (
        enableActionRequests: [IotEventsDataClientTypes.EnableAlarmActionRequest]? = nil
    )
    {
        self.enableActionRequests = enableActionRequests
    }
}

struct BatchEnableAlarmInputBody: Swift.Equatable {
    let enableActionRequests: [IotEventsDataClientTypes.EnableAlarmActionRequest]?
}

extension BatchEnableAlarmInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enableActionRequests
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enableActionRequestsContainer = try containerValues.decodeIfPresent([IotEventsDataClientTypes.EnableAlarmActionRequest?].self, forKey: .enableActionRequests)
        var enableActionRequestsDecoded0:[IotEventsDataClientTypes.EnableAlarmActionRequest]? = nil
        if let enableActionRequestsContainer = enableActionRequestsContainer {
            enableActionRequestsDecoded0 = [IotEventsDataClientTypes.EnableAlarmActionRequest]()
            for structure0 in enableActionRequestsContainer {
                if let structure0 = structure0 {
                    enableActionRequestsDecoded0?.append(structure0)
                }
            }
        }
        enableActionRequests = enableActionRequestsDecoded0
    }
}

extension BatchEnableAlarmOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchEnableAlarmOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchEnableAlarmOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchEnableAlarmOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchEnableAlarmOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errorEntries = output.errorEntries
        } else {
            self.errorEntries = nil
        }
    }
}

public struct BatchEnableAlarmOutputResponse: Swift.Equatable {
    /// A list of errors associated with the request, or null if there are no errors. Each error entry contains an entry ID that helps you identify the entry that failed.
    public var errorEntries: [IotEventsDataClientTypes.BatchAlarmActionErrorEntry]?

    public init (
        errorEntries: [IotEventsDataClientTypes.BatchAlarmActionErrorEntry]? = nil
    )
    {
        self.errorEntries = errorEntries
    }
}

struct BatchEnableAlarmOutputResponseBody: Swift.Equatable {
    let errorEntries: [IotEventsDataClientTypes.BatchAlarmActionErrorEntry]?
}

extension BatchEnableAlarmOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorEntries
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorEntriesContainer = try containerValues.decodeIfPresent([IotEventsDataClientTypes.BatchAlarmActionErrorEntry?].self, forKey: .errorEntries)
        var errorEntriesDecoded0:[IotEventsDataClientTypes.BatchAlarmActionErrorEntry]? = nil
        if let errorEntriesContainer = errorEntriesContainer {
            errorEntriesDecoded0 = [IotEventsDataClientTypes.BatchAlarmActionErrorEntry]()
            for structure0 in errorEntriesContainer {
                if let structure0 = structure0 {
                    errorEntriesDecoded0?.append(structure0)
                }
            }
        }
        errorEntries = errorEntriesDecoded0
    }
}

extension IotEventsDataClientTypes.BatchPutMessageErrorEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode
        case errorMessage
        case messageId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode.rawValue, forKey: .errorCode)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let messageId = self.messageId {
            try encodeContainer.encode(messageId, forKey: .messageId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.ErrorCode.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Contains information about the errors encountered.
    public struct BatchPutMessageErrorEntry: Swift.Equatable {
        /// The error code.
        public var errorCode: IotEventsDataClientTypes.ErrorCode?
        /// A message that describes the error.
        public var errorMessage: Swift.String?
        /// The ID of the message that caused the error. (See the value corresponding to the "messageId" key in the "message" object.)
        public var messageId: Swift.String?

        public init (
            errorCode: IotEventsDataClientTypes.ErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            messageId: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.messageId = messageId
        }
    }

}

extension BatchPutMessageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messages
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let messages = messages {
            var messagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .messages)
            for messages0 in messages {
                try messagesContainer.encode(messages0)
            }
        }
    }
}

extension BatchPutMessageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/inputs/messages"
    }
}

public struct BatchPutMessageInput: Swift.Equatable {
    /// The list of messages to send. Each message has the following format: '{ "messageId": "string", "inputName": "string", "payload": "string"}'
    /// This member is required.
    public var messages: [IotEventsDataClientTypes.Message]?

    public init (
        messages: [IotEventsDataClientTypes.Message]? = nil
    )
    {
        self.messages = messages
    }
}

struct BatchPutMessageInputBody: Swift.Equatable {
    let messages: [IotEventsDataClientTypes.Message]?
}

extension BatchPutMessageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messages
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messagesContainer = try containerValues.decodeIfPresent([IotEventsDataClientTypes.Message?].self, forKey: .messages)
        var messagesDecoded0:[IotEventsDataClientTypes.Message]? = nil
        if let messagesContainer = messagesContainer {
            messagesDecoded0 = [IotEventsDataClientTypes.Message]()
            for structure0 in messagesContainer {
                if let structure0 = structure0 {
                    messagesDecoded0?.append(structure0)
                }
            }
        }
        messages = messagesDecoded0
    }
}

extension BatchPutMessageOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchPutMessageOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchPutMessageOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchPutMessageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchPutMessageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.batchPutMessageErrorEntries = output.batchPutMessageErrorEntries
        } else {
            self.batchPutMessageErrorEntries = nil
        }
    }
}

public struct BatchPutMessageOutputResponse: Swift.Equatable {
    /// A list of any errors encountered when sending the messages.
    public var batchPutMessageErrorEntries: [IotEventsDataClientTypes.BatchPutMessageErrorEntry]?

    public init (
        batchPutMessageErrorEntries: [IotEventsDataClientTypes.BatchPutMessageErrorEntry]? = nil
    )
    {
        self.batchPutMessageErrorEntries = batchPutMessageErrorEntries
    }
}

struct BatchPutMessageOutputResponseBody: Swift.Equatable {
    let batchPutMessageErrorEntries: [IotEventsDataClientTypes.BatchPutMessageErrorEntry]?
}

extension BatchPutMessageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPutMessageErrorEntries = "BatchPutMessageErrorEntries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchPutMessageErrorEntriesContainer = try containerValues.decodeIfPresent([IotEventsDataClientTypes.BatchPutMessageErrorEntry?].self, forKey: .batchPutMessageErrorEntries)
        var batchPutMessageErrorEntriesDecoded0:[IotEventsDataClientTypes.BatchPutMessageErrorEntry]? = nil
        if let batchPutMessageErrorEntriesContainer = batchPutMessageErrorEntriesContainer {
            batchPutMessageErrorEntriesDecoded0 = [IotEventsDataClientTypes.BatchPutMessageErrorEntry]()
            for structure0 in batchPutMessageErrorEntriesContainer {
                if let structure0 = structure0 {
                    batchPutMessageErrorEntriesDecoded0?.append(structure0)
                }
            }
        }
        batchPutMessageErrorEntries = batchPutMessageErrorEntriesDecoded0
    }
}

extension BatchResetAlarmInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resetActionRequests
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resetActionRequests = resetActionRequests {
            var resetActionRequestsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resetActionRequests)
            for resetalarmactionrequests0 in resetActionRequests {
                try resetActionRequestsContainer.encode(resetalarmactionrequests0)
            }
        }
    }
}

extension BatchResetAlarmInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/alarms/reset"
    }
}

public struct BatchResetAlarmInput: Swift.Equatable {
    /// The list of reset action requests. You can specify up to 10 requests per operation.
    /// This member is required.
    public var resetActionRequests: [IotEventsDataClientTypes.ResetAlarmActionRequest]?

    public init (
        resetActionRequests: [IotEventsDataClientTypes.ResetAlarmActionRequest]? = nil
    )
    {
        self.resetActionRequests = resetActionRequests
    }
}

struct BatchResetAlarmInputBody: Swift.Equatable {
    let resetActionRequests: [IotEventsDataClientTypes.ResetAlarmActionRequest]?
}

extension BatchResetAlarmInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resetActionRequests
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resetActionRequestsContainer = try containerValues.decodeIfPresent([IotEventsDataClientTypes.ResetAlarmActionRequest?].self, forKey: .resetActionRequests)
        var resetActionRequestsDecoded0:[IotEventsDataClientTypes.ResetAlarmActionRequest]? = nil
        if let resetActionRequestsContainer = resetActionRequestsContainer {
            resetActionRequestsDecoded0 = [IotEventsDataClientTypes.ResetAlarmActionRequest]()
            for structure0 in resetActionRequestsContainer {
                if let structure0 = structure0 {
                    resetActionRequestsDecoded0?.append(structure0)
                }
            }
        }
        resetActionRequests = resetActionRequestsDecoded0
    }
}

extension BatchResetAlarmOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchResetAlarmOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchResetAlarmOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchResetAlarmOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchResetAlarmOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errorEntries = output.errorEntries
        } else {
            self.errorEntries = nil
        }
    }
}

public struct BatchResetAlarmOutputResponse: Swift.Equatable {
    /// A list of errors associated with the request, or null if there are no errors. Each error entry contains an entry ID that helps you identify the entry that failed.
    public var errorEntries: [IotEventsDataClientTypes.BatchAlarmActionErrorEntry]?

    public init (
        errorEntries: [IotEventsDataClientTypes.BatchAlarmActionErrorEntry]? = nil
    )
    {
        self.errorEntries = errorEntries
    }
}

struct BatchResetAlarmOutputResponseBody: Swift.Equatable {
    let errorEntries: [IotEventsDataClientTypes.BatchAlarmActionErrorEntry]?
}

extension BatchResetAlarmOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorEntries
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorEntriesContainer = try containerValues.decodeIfPresent([IotEventsDataClientTypes.BatchAlarmActionErrorEntry?].self, forKey: .errorEntries)
        var errorEntriesDecoded0:[IotEventsDataClientTypes.BatchAlarmActionErrorEntry]? = nil
        if let errorEntriesContainer = errorEntriesContainer {
            errorEntriesDecoded0 = [IotEventsDataClientTypes.BatchAlarmActionErrorEntry]()
            for structure0 in errorEntriesContainer {
                if let structure0 = structure0 {
                    errorEntriesDecoded0?.append(structure0)
                }
            }
        }
        errorEntries = errorEntriesDecoded0
    }
}

extension BatchSnoozeAlarmInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snoozeActionRequests
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let snoozeActionRequests = snoozeActionRequests {
            var snoozeActionRequestsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .snoozeActionRequests)
            for snoozealarmactionrequests0 in snoozeActionRequests {
                try snoozeActionRequestsContainer.encode(snoozealarmactionrequests0)
            }
        }
    }
}

extension BatchSnoozeAlarmInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/alarms/snooze"
    }
}

public struct BatchSnoozeAlarmInput: Swift.Equatable {
    /// The list of snooze action requests. You can specify up to 10 requests per operation.
    /// This member is required.
    public var snoozeActionRequests: [IotEventsDataClientTypes.SnoozeAlarmActionRequest]?

    public init (
        snoozeActionRequests: [IotEventsDataClientTypes.SnoozeAlarmActionRequest]? = nil
    )
    {
        self.snoozeActionRequests = snoozeActionRequests
    }
}

struct BatchSnoozeAlarmInputBody: Swift.Equatable {
    let snoozeActionRequests: [IotEventsDataClientTypes.SnoozeAlarmActionRequest]?
}

extension BatchSnoozeAlarmInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snoozeActionRequests
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snoozeActionRequestsContainer = try containerValues.decodeIfPresent([IotEventsDataClientTypes.SnoozeAlarmActionRequest?].self, forKey: .snoozeActionRequests)
        var snoozeActionRequestsDecoded0:[IotEventsDataClientTypes.SnoozeAlarmActionRequest]? = nil
        if let snoozeActionRequestsContainer = snoozeActionRequestsContainer {
            snoozeActionRequestsDecoded0 = [IotEventsDataClientTypes.SnoozeAlarmActionRequest]()
            for structure0 in snoozeActionRequestsContainer {
                if let structure0 = structure0 {
                    snoozeActionRequestsDecoded0?.append(structure0)
                }
            }
        }
        snoozeActionRequests = snoozeActionRequestsDecoded0
    }
}

extension BatchSnoozeAlarmOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchSnoozeAlarmOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchSnoozeAlarmOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchSnoozeAlarmOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchSnoozeAlarmOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errorEntries = output.errorEntries
        } else {
            self.errorEntries = nil
        }
    }
}

public struct BatchSnoozeAlarmOutputResponse: Swift.Equatable {
    /// A list of errors associated with the request, or null if there are no errors. Each error entry contains an entry ID that helps you identify the entry that failed.
    public var errorEntries: [IotEventsDataClientTypes.BatchAlarmActionErrorEntry]?

    public init (
        errorEntries: [IotEventsDataClientTypes.BatchAlarmActionErrorEntry]? = nil
    )
    {
        self.errorEntries = errorEntries
    }
}

struct BatchSnoozeAlarmOutputResponseBody: Swift.Equatable {
    let errorEntries: [IotEventsDataClientTypes.BatchAlarmActionErrorEntry]?
}

extension BatchSnoozeAlarmOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorEntries
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorEntriesContainer = try containerValues.decodeIfPresent([IotEventsDataClientTypes.BatchAlarmActionErrorEntry?].self, forKey: .errorEntries)
        var errorEntriesDecoded0:[IotEventsDataClientTypes.BatchAlarmActionErrorEntry]? = nil
        if let errorEntriesContainer = errorEntriesContainer {
            errorEntriesDecoded0 = [IotEventsDataClientTypes.BatchAlarmActionErrorEntry]()
            for structure0 in errorEntriesContainer {
                if let structure0 = structure0 {
                    errorEntriesDecoded0?.append(structure0)
                }
            }
        }
        errorEntries = errorEntriesDecoded0
    }
}

extension IotEventsDataClientTypes.BatchUpdateDetectorErrorEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode
        case errorMessage
        case messageId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode.rawValue, forKey: .errorCode)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let messageId = self.messageId {
            try encodeContainer.encode(messageId, forKey: .messageId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.ErrorCode.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Information about the error that occurred when attempting to update a detector.
    public struct BatchUpdateDetectorErrorEntry: Swift.Equatable {
        /// The error code.
        public var errorCode: IotEventsDataClientTypes.ErrorCode?
        /// A message that describes the error.
        public var errorMessage: Swift.String?
        /// The "messageId" of the update request that caused the error. (The value of the "messageId" in the update request "Detector" object.)
        public var messageId: Swift.String?

        public init (
            errorCode: IotEventsDataClientTypes.ErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            messageId: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.messageId = messageId
        }
    }

}

extension BatchUpdateDetectorInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case detectors
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let detectors = detectors {
            var detectorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .detectors)
            for updatedetectorrequests0 in detectors {
                try detectorsContainer.encode(updatedetectorrequests0)
            }
        }
    }
}

extension BatchUpdateDetectorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/detectors"
    }
}

public struct BatchUpdateDetectorInput: Swift.Equatable {
    /// The list of detectors (instances) to update, along with the values to update.
    /// This member is required.
    public var detectors: [IotEventsDataClientTypes.UpdateDetectorRequest]?

    public init (
        detectors: [IotEventsDataClientTypes.UpdateDetectorRequest]? = nil
    )
    {
        self.detectors = detectors
    }
}

struct BatchUpdateDetectorInputBody: Swift.Equatable {
    let detectors: [IotEventsDataClientTypes.UpdateDetectorRequest]?
}

extension BatchUpdateDetectorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case detectors
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detectorsContainer = try containerValues.decodeIfPresent([IotEventsDataClientTypes.UpdateDetectorRequest?].self, forKey: .detectors)
        var detectorsDecoded0:[IotEventsDataClientTypes.UpdateDetectorRequest]? = nil
        if let detectorsContainer = detectorsContainer {
            detectorsDecoded0 = [IotEventsDataClientTypes.UpdateDetectorRequest]()
            for structure0 in detectorsContainer {
                if let structure0 = structure0 {
                    detectorsDecoded0?.append(structure0)
                }
            }
        }
        detectors = detectorsDecoded0
    }
}

extension BatchUpdateDetectorOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchUpdateDetectorOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchUpdateDetectorOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchUpdateDetectorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchUpdateDetectorOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.batchUpdateDetectorErrorEntries = output.batchUpdateDetectorErrorEntries
        } else {
            self.batchUpdateDetectorErrorEntries = nil
        }
    }
}

public struct BatchUpdateDetectorOutputResponse: Swift.Equatable {
    /// A list of those detector updates that resulted in errors. (If an error is listed here, the specific update did not occur.)
    public var batchUpdateDetectorErrorEntries: [IotEventsDataClientTypes.BatchUpdateDetectorErrorEntry]?

    public init (
        batchUpdateDetectorErrorEntries: [IotEventsDataClientTypes.BatchUpdateDetectorErrorEntry]? = nil
    )
    {
        self.batchUpdateDetectorErrorEntries = batchUpdateDetectorErrorEntries
    }
}

struct BatchUpdateDetectorOutputResponseBody: Swift.Equatable {
    let batchUpdateDetectorErrorEntries: [IotEventsDataClientTypes.BatchUpdateDetectorErrorEntry]?
}

extension BatchUpdateDetectorOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchUpdateDetectorErrorEntries
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchUpdateDetectorErrorEntriesContainer = try containerValues.decodeIfPresent([IotEventsDataClientTypes.BatchUpdateDetectorErrorEntry?].self, forKey: .batchUpdateDetectorErrorEntries)
        var batchUpdateDetectorErrorEntriesDecoded0:[IotEventsDataClientTypes.BatchUpdateDetectorErrorEntry]? = nil
        if let batchUpdateDetectorErrorEntriesContainer = batchUpdateDetectorErrorEntriesContainer {
            batchUpdateDetectorErrorEntriesDecoded0 = [IotEventsDataClientTypes.BatchUpdateDetectorErrorEntry]()
            for structure0 in batchUpdateDetectorErrorEntriesContainer {
                if let structure0 = structure0 {
                    batchUpdateDetectorErrorEntriesDecoded0?.append(structure0)
                }
            }
        }
        batchUpdateDetectorErrorEntries = batchUpdateDetectorErrorEntriesDecoded0
    }
}

extension IotEventsDataClientTypes {
    public enum ComparisonOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case equal
        case greater
        case greaterOrEqual
        case less
        case lessOrEqual
        case notEqual
        case sdkUnknown(Swift.String)

        public static var allCases: [ComparisonOperator] {
            return [
                .equal,
                .greater,
                .greaterOrEqual,
                .less,
                .lessOrEqual,
                .notEqual,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .equal: return "EQUAL"
            case .greater: return "GREATER"
            case .greaterOrEqual: return "GREATER_OR_EQUAL"
            case .less: return "LESS"
            case .lessOrEqual: return "LESS_OR_EQUAL"
            case .notEqual: return "NOT_EQUAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ComparisonOperator(rawValue: rawValue) ?? ComparisonOperator.sdkUnknown(rawValue)
        }
    }
}

extension IotEventsDataClientTypes.CustomerAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acknowledgeActionConfiguration
        case actionName
        case disableActionConfiguration
        case enableActionConfiguration
        case resetActionConfiguration
        case snoozeActionConfiguration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acknowledgeActionConfiguration = self.acknowledgeActionConfiguration {
            try encodeContainer.encode(acknowledgeActionConfiguration, forKey: .acknowledgeActionConfiguration)
        }
        if let actionName = self.actionName {
            try encodeContainer.encode(actionName.rawValue, forKey: .actionName)
        }
        if let disableActionConfiguration = self.disableActionConfiguration {
            try encodeContainer.encode(disableActionConfiguration, forKey: .disableActionConfiguration)
        }
        if let enableActionConfiguration = self.enableActionConfiguration {
            try encodeContainer.encode(enableActionConfiguration, forKey: .enableActionConfiguration)
        }
        if let resetActionConfiguration = self.resetActionConfiguration {
            try encodeContainer.encode(resetActionConfiguration, forKey: .resetActionConfiguration)
        }
        if let snoozeActionConfiguration = self.snoozeActionConfiguration {
            try encodeContainer.encode(snoozeActionConfiguration, forKey: .snoozeActionConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNameDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.CustomerActionName.self, forKey: .actionName)
        actionName = actionNameDecoded
        let snoozeActionConfigurationDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.SnoozeActionConfiguration.self, forKey: .snoozeActionConfiguration)
        snoozeActionConfiguration = snoozeActionConfigurationDecoded
        let enableActionConfigurationDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.EnableActionConfiguration.self, forKey: .enableActionConfiguration)
        enableActionConfiguration = enableActionConfigurationDecoded
        let disableActionConfigurationDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.DisableActionConfiguration.self, forKey: .disableActionConfiguration)
        disableActionConfiguration = disableActionConfigurationDecoded
        let acknowledgeActionConfigurationDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.AcknowledgeActionConfiguration.self, forKey: .acknowledgeActionConfiguration)
        acknowledgeActionConfiguration = acknowledgeActionConfigurationDecoded
        let resetActionConfigurationDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.ResetActionConfiguration.self, forKey: .resetActionConfiguration)
        resetActionConfiguration = resetActionConfigurationDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Contains information about the action that you can take to respond to the alarm.
    public struct CustomerAction: Swift.Equatable {
        /// Contains the configuration information of an acknowledge action.
        public var acknowledgeActionConfiguration: IotEventsDataClientTypes.AcknowledgeActionConfiguration?
        /// The name of the action. The action name can be one of the following values:
        ///
        /// * SNOOZE - When you snooze the alarm, the alarm state changes to SNOOZE_DISABLED.
        ///
        /// * ENABLE - When you enable the alarm, the alarm state changes to NORMAL.
        ///
        /// * DISABLE - When you disable the alarm, the alarm state changes to DISABLED.
        ///
        /// * ACKNOWLEDGE - When you acknowledge the alarm, the alarm state changes to ACKNOWLEDGED.
        ///
        /// * RESET - When you reset the alarm, the alarm state changes to NORMAL.
        ///
        ///
        /// For more information, see the [AlarmState](https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_AlarmState.html) API.
        public var actionName: IotEventsDataClientTypes.CustomerActionName?
        /// Contains the configuration information of a disable action.
        public var disableActionConfiguration: IotEventsDataClientTypes.DisableActionConfiguration?
        /// Contains the configuration information of an enable action.
        public var enableActionConfiguration: IotEventsDataClientTypes.EnableActionConfiguration?
        /// Contains the configuration information of a reset action.
        public var resetActionConfiguration: IotEventsDataClientTypes.ResetActionConfiguration?
        /// Contains the configuration information of a snooze action.
        public var snoozeActionConfiguration: IotEventsDataClientTypes.SnoozeActionConfiguration?

        public init (
            acknowledgeActionConfiguration: IotEventsDataClientTypes.AcknowledgeActionConfiguration? = nil,
            actionName: IotEventsDataClientTypes.CustomerActionName? = nil,
            disableActionConfiguration: IotEventsDataClientTypes.DisableActionConfiguration? = nil,
            enableActionConfiguration: IotEventsDataClientTypes.EnableActionConfiguration? = nil,
            resetActionConfiguration: IotEventsDataClientTypes.ResetActionConfiguration? = nil,
            snoozeActionConfiguration: IotEventsDataClientTypes.SnoozeActionConfiguration? = nil
        )
        {
            self.acknowledgeActionConfiguration = acknowledgeActionConfiguration
            self.actionName = actionName
            self.disableActionConfiguration = disableActionConfiguration
            self.enableActionConfiguration = enableActionConfiguration
            self.resetActionConfiguration = resetActionConfiguration
            self.snoozeActionConfiguration = snoozeActionConfiguration
        }
    }

}

extension IotEventsDataClientTypes {
    public enum CustomerActionName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case acknowledge
        case disable
        case enable
        case reset
        case snooze
        case sdkUnknown(Swift.String)

        public static var allCases: [CustomerActionName] {
            return [
                .acknowledge,
                .disable,
                .enable,
                .reset,
                .snooze,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .acknowledge: return "ACKNOWLEDGE"
            case .disable: return "DISABLE"
            case .enable: return "ENABLE"
            case .reset: return "RESET"
            case .snooze: return "SNOOZE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CustomerActionName(rawValue: rawValue) ?? CustomerActionName.sdkUnknown(rawValue)
        }
    }
}

extension IotEventsDataClientTypes.DeleteDetectorRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case detectorModelName
        case keyValue
        case messageId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let detectorModelName = self.detectorModelName {
            try encodeContainer.encode(detectorModelName, forKey: .detectorModelName)
        }
        if let keyValue = self.keyValue {
            try encodeContainer.encode(keyValue, forKey: .keyValue)
        }
        if let messageId = self.messageId {
            try encodeContainer.encode(messageId, forKey: .messageId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
        let detectorModelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorModelName)
        detectorModelName = detectorModelNameDecoded
        let keyValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyValue)
        keyValue = keyValueDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Information used to delete the detector model.
    public struct DeleteDetectorRequest: Swift.Equatable {
        /// The name of the detector model that was used to create the detector instance.
        /// This member is required.
        public var detectorModelName: Swift.String?
        /// The value of the [key](https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateDetectorModel.html#iotevents-CreateDetectorModel-request-key) used to identify the detector.
        public var keyValue: Swift.String?
        /// The ID to assign to the DeleteDetectorRequest. Each "messageId" must be unique within each batch sent.
        /// This member is required.
        public var messageId: Swift.String?

        public init (
            detectorModelName: Swift.String? = nil,
            keyValue: Swift.String? = nil,
            messageId: Swift.String? = nil
        )
        {
            self.detectorModelName = detectorModelName
            self.keyValue = keyValue
            self.messageId = messageId
        }
    }

}

extension DescribeAlarmInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        var items = [ClientRuntime.URLQueryItem]()
        if let keyValue = keyValue {
            let keyValueQueryItem = ClientRuntime.URLQueryItem(name: "keyValue".urlPercentEncoding(), value: Swift.String(keyValue).urlPercentEncoding())
            items.append(keyValueQueryItem)
        }
        return items
    }
}

extension DescribeAlarmInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let alarmModelName = alarmModelName else {
            return nil
        }
        return "/alarms/\(alarmModelName.urlPercentEncoding())/keyValues"
    }
}

public struct DescribeAlarmInput: Swift.Equatable {
    /// The name of the alarm model.
    /// This member is required.
    public var alarmModelName: Swift.String?
    /// The value of the key used as a filter to select only the alarms associated with the [key](https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateAlarmModel.html#iotevents-CreateAlarmModel-request-key).
    public var keyValue: Swift.String?

    public init (
        alarmModelName: Swift.String? = nil,
        keyValue: Swift.String? = nil
    )
    {
        self.alarmModelName = alarmModelName
        self.keyValue = keyValue
    }
}

struct DescribeAlarmInputBody: Swift.Equatable {
}

extension DescribeAlarmInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeAlarmOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAlarmOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAlarmOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAlarmOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAlarmOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.alarm = output.alarm
        } else {
            self.alarm = nil
        }
    }
}

public struct DescribeAlarmOutputResponse: Swift.Equatable {
    /// Contains information about an alarm.
    public var alarm: IotEventsDataClientTypes.Alarm?

    public init (
        alarm: IotEventsDataClientTypes.Alarm? = nil
    )
    {
        self.alarm = alarm
    }
}

struct DescribeAlarmOutputResponseBody: Swift.Equatable {
    let alarm: IotEventsDataClientTypes.Alarm?
}

extension DescribeAlarmOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarm
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.Alarm.self, forKey: .alarm)
        alarm = alarmDecoded
    }
}

extension DescribeDetectorInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        var items = [ClientRuntime.URLQueryItem]()
        if let keyValue = keyValue {
            let keyValueQueryItem = ClientRuntime.URLQueryItem(name: "keyValue".urlPercentEncoding(), value: Swift.String(keyValue).urlPercentEncoding())
            items.append(keyValueQueryItem)
        }
        return items
    }
}

extension DescribeDetectorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let detectorModelName = detectorModelName else {
            return nil
        }
        return "/detectors/\(detectorModelName.urlPercentEncoding())/keyValues"
    }
}

public struct DescribeDetectorInput: Swift.Equatable {
    /// The name of the detector model whose detectors (instances) you want information about.
    /// This member is required.
    public var detectorModelName: Swift.String?
    /// A filter used to limit results to detectors (instances) created because of the given key ID.
    public var keyValue: Swift.String?

    public init (
        detectorModelName: Swift.String? = nil,
        keyValue: Swift.String? = nil
    )
    {
        self.detectorModelName = detectorModelName
        self.keyValue = keyValue
    }
}

struct DescribeDetectorInputBody: Swift.Equatable {
}

extension DescribeDetectorInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeDetectorOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDetectorOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeDetectorOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDetectorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeDetectorOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.detector = output.detector
        } else {
            self.detector = nil
        }
    }
}

public struct DescribeDetectorOutputResponse: Swift.Equatable {
    /// Information about the detector (instance).
    public var detector: IotEventsDataClientTypes.Detector?

    public init (
        detector: IotEventsDataClientTypes.Detector? = nil
    )
    {
        self.detector = detector
    }
}

struct DescribeDetectorOutputResponseBody: Swift.Equatable {
    let detector: IotEventsDataClientTypes.Detector?
}

extension DescribeDetectorOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case detector
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detectorDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.Detector.self, forKey: .detector)
        detector = detectorDecoded
    }
}

extension IotEventsDataClientTypes.Detector: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime
        case detectorModelName
        case detectorModelVersion
        case keyValue
        case lastUpdateTime
        case state
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let detectorModelName = self.detectorModelName {
            try encodeContainer.encode(detectorModelName, forKey: .detectorModelName)
        }
        if let detectorModelVersion = self.detectorModelVersion {
            try encodeContainer.encode(detectorModelVersion, forKey: .detectorModelVersion)
        }
        if let keyValue = self.keyValue {
            try encodeContainer.encode(keyValue, forKey: .keyValue)
        }
        if let lastUpdateTime = self.lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detectorModelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorModelName)
        detectorModelName = detectorModelNameDecoded
        let keyValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyValue)
        keyValue = keyValueDecoded
        let detectorModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorModelVersion)
        detectorModelVersion = detectorModelVersionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.DetectorState.self, forKey: .state)
        state = stateDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Information about the detector (instance).
    public struct Detector: Swift.Equatable {
        /// The time the detector (instance) was created.
        public var creationTime: ClientRuntime.Date?
        /// The name of the detector model that created this detector (instance).
        public var detectorModelName: Swift.String?
        /// The version of the detector model that created this detector (instance).
        public var detectorModelVersion: Swift.String?
        /// The value of the key (identifying the device or system) that caused the creation of this detector (instance).
        public var keyValue: Swift.String?
        /// The time the detector (instance) was last updated.
        public var lastUpdateTime: ClientRuntime.Date?
        /// The current state of the detector (instance).
        public var state: IotEventsDataClientTypes.DetectorState?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            detectorModelName: Swift.String? = nil,
            detectorModelVersion: Swift.String? = nil,
            keyValue: Swift.String? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            state: IotEventsDataClientTypes.DetectorState? = nil
        )
        {
            self.creationTime = creationTime
            self.detectorModelName = detectorModelName
            self.detectorModelVersion = detectorModelVersion
            self.keyValue = keyValue
            self.lastUpdateTime = lastUpdateTime
            self.state = state
        }
    }

}

extension IotEventsDataClientTypes.DetectorState: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stateName
        case timers
        case variables
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let stateName = self.stateName {
            try encodeContainer.encode(stateName, forKey: .stateName)
        }
        if let timers = timers {
            var timersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .timers)
            for timers0 in timers {
                try timersContainer.encode(timers0)
            }
        }
        if let variables = variables {
            var variablesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .variables)
            for variables0 in variables {
                try variablesContainer.encode(variables0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateName)
        stateName = stateNameDecoded
        let variablesContainer = try containerValues.decodeIfPresent([IotEventsDataClientTypes.Variable?].self, forKey: .variables)
        var variablesDecoded0:[IotEventsDataClientTypes.Variable]? = nil
        if let variablesContainer = variablesContainer {
            variablesDecoded0 = [IotEventsDataClientTypes.Variable]()
            for structure0 in variablesContainer {
                if let structure0 = structure0 {
                    variablesDecoded0?.append(structure0)
                }
            }
        }
        variables = variablesDecoded0
        let timersContainer = try containerValues.decodeIfPresent([IotEventsDataClientTypes.Timer?].self, forKey: .timers)
        var timersDecoded0:[IotEventsDataClientTypes.Timer]? = nil
        if let timersContainer = timersContainer {
            timersDecoded0 = [IotEventsDataClientTypes.Timer]()
            for structure0 in timersContainer {
                if let structure0 = structure0 {
                    timersDecoded0?.append(structure0)
                }
            }
        }
        timers = timersDecoded0
    }
}

extension IotEventsDataClientTypes {
    /// Information about the current state of the detector instance.
    public struct DetectorState: Swift.Equatable {
        /// The name of the state.
        /// This member is required.
        public var stateName: Swift.String?
        /// The current state of the detector's timers.
        /// This member is required.
        public var timers: [IotEventsDataClientTypes.Timer]?
        /// The current values of the detector's variables.
        /// This member is required.
        public var variables: [IotEventsDataClientTypes.Variable]?

        public init (
            stateName: Swift.String? = nil,
            timers: [IotEventsDataClientTypes.Timer]? = nil,
            variables: [IotEventsDataClientTypes.Variable]? = nil
        )
        {
            self.stateName = stateName
            self.timers = timers
            self.variables = variables
        }
    }

}

extension IotEventsDataClientTypes.DetectorStateDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stateName
        case timers
        case variables
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let stateName = self.stateName {
            try encodeContainer.encode(stateName, forKey: .stateName)
        }
        if let timers = timers {
            var timersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .timers)
            for timerdefinitions0 in timers {
                try timersContainer.encode(timerdefinitions0)
            }
        }
        if let variables = variables {
            var variablesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .variables)
            for variabledefinitions0 in variables {
                try variablesContainer.encode(variabledefinitions0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateName)
        stateName = stateNameDecoded
        let variablesContainer = try containerValues.decodeIfPresent([IotEventsDataClientTypes.VariableDefinition?].self, forKey: .variables)
        var variablesDecoded0:[IotEventsDataClientTypes.VariableDefinition]? = nil
        if let variablesContainer = variablesContainer {
            variablesDecoded0 = [IotEventsDataClientTypes.VariableDefinition]()
            for structure0 in variablesContainer {
                if let structure0 = structure0 {
                    variablesDecoded0?.append(structure0)
                }
            }
        }
        variables = variablesDecoded0
        let timersContainer = try containerValues.decodeIfPresent([IotEventsDataClientTypes.TimerDefinition?].self, forKey: .timers)
        var timersDecoded0:[IotEventsDataClientTypes.TimerDefinition]? = nil
        if let timersContainer = timersContainer {
            timersDecoded0 = [IotEventsDataClientTypes.TimerDefinition]()
            for structure0 in timersContainer {
                if let structure0 = structure0 {
                    timersDecoded0?.append(structure0)
                }
            }
        }
        timers = timersDecoded0
    }
}

extension IotEventsDataClientTypes {
    /// The new state, variable values, and timer settings of the detector (instance).
    public struct DetectorStateDefinition: Swift.Equatable {
        /// The name of the new state of the detector (instance).
        /// This member is required.
        public var stateName: Swift.String?
        /// The new values of the detector's timers. Any timer whose value isn't specified is cleared, and its timeout event won't occur.
        /// This member is required.
        public var timers: [IotEventsDataClientTypes.TimerDefinition]?
        /// The new values of the detector's variables. Any variable whose value isn't specified is cleared.
        /// This member is required.
        public var variables: [IotEventsDataClientTypes.VariableDefinition]?

        public init (
            stateName: Swift.String? = nil,
            timers: [IotEventsDataClientTypes.TimerDefinition]? = nil,
            variables: [IotEventsDataClientTypes.VariableDefinition]? = nil
        )
        {
            self.stateName = stateName
            self.timers = timers
            self.variables = variables
        }
    }

}

extension IotEventsDataClientTypes.DetectorStateSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stateName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let stateName = self.stateName {
            try encodeContainer.encode(stateName, forKey: .stateName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateName)
        stateName = stateNameDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Information about the detector state.
    public struct DetectorStateSummary: Swift.Equatable {
        /// The name of the state.
        public var stateName: Swift.String?

        public init (
            stateName: Swift.String? = nil
        )
        {
            self.stateName = stateName
        }
    }

}

extension IotEventsDataClientTypes.DetectorSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime
        case detectorModelName
        case detectorModelVersion
        case keyValue
        case lastUpdateTime
        case state
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let detectorModelName = self.detectorModelName {
            try encodeContainer.encode(detectorModelName, forKey: .detectorModelName)
        }
        if let detectorModelVersion = self.detectorModelVersion {
            try encodeContainer.encode(detectorModelVersion, forKey: .detectorModelVersion)
        }
        if let keyValue = self.keyValue {
            try encodeContainer.encode(keyValue, forKey: .keyValue)
        }
        if let lastUpdateTime = self.lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detectorModelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorModelName)
        detectorModelName = detectorModelNameDecoded
        let keyValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyValue)
        keyValue = keyValueDecoded
        let detectorModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorModelVersion)
        detectorModelVersion = detectorModelVersionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.DetectorStateSummary.self, forKey: .state)
        state = stateDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Information about the detector (instance).
    public struct DetectorSummary: Swift.Equatable {
        /// The time the detector (instance) was created.
        public var creationTime: ClientRuntime.Date?
        /// The name of the detector model that created this detector (instance).
        public var detectorModelName: Swift.String?
        /// The version of the detector model that created this detector (instance).
        public var detectorModelVersion: Swift.String?
        /// The value of the key (identifying the device or system) that caused the creation of this detector (instance).
        public var keyValue: Swift.String?
        /// The time the detector (instance) was last updated.
        public var lastUpdateTime: ClientRuntime.Date?
        /// The current state of the detector (instance).
        public var state: IotEventsDataClientTypes.DetectorStateSummary?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            detectorModelName: Swift.String? = nil,
            detectorModelVersion: Swift.String? = nil,
            keyValue: Swift.String? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            state: IotEventsDataClientTypes.DetectorStateSummary? = nil
        )
        {
            self.creationTime = creationTime
            self.detectorModelName = detectorModelName
            self.detectorModelVersion = detectorModelVersion
            self.keyValue = keyValue
            self.lastUpdateTime = lastUpdateTime
            self.state = state
        }
    }

}

extension IotEventsDataClientTypes.DisableActionConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case note
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let note = self.note {
            try encodeContainer.encode(note, forKey: .note)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let noteDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .note)
        note = noteDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Contains the configuration information of a disable action.
    public struct DisableActionConfiguration: Swift.Equatable {
        /// The note that you can leave when you disable the alarm.
        public var note: Swift.String?

        public init (
            note: Swift.String? = nil
        )
        {
            self.note = note
        }
    }

}

extension IotEventsDataClientTypes.DisableAlarmActionRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmModelName
        case keyValue
        case note
        case requestId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmModelName = self.alarmModelName {
            try encodeContainer.encode(alarmModelName, forKey: .alarmModelName)
        }
        if let keyValue = self.keyValue {
            try encodeContainer.encode(keyValue, forKey: .keyValue)
        }
        if let note = self.note {
            try encodeContainer.encode(note, forKey: .note)
        }
        if let requestId = self.requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let alarmModelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmModelName)
        alarmModelName = alarmModelNameDecoded
        let keyValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyValue)
        keyValue = keyValueDecoded
        let noteDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .note)
        note = noteDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Information used to disable the alarm.
    public struct DisableAlarmActionRequest: Swift.Equatable {
        /// The name of the alarm model.
        /// This member is required.
        public var alarmModelName: Swift.String?
        /// The value of the key used as a filter to select only the alarms associated with the [key](https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateAlarmModel.html#iotevents-CreateAlarmModel-request-key).
        public var keyValue: Swift.String?
        /// The note that you can leave when you disable the alarm.
        public var note: Swift.String?
        /// The request ID. Each ID must be unique within each batch.
        /// This member is required.
        public var requestId: Swift.String?

        public init (
            alarmModelName: Swift.String? = nil,
            keyValue: Swift.String? = nil,
            note: Swift.String? = nil,
            requestId: Swift.String? = nil
        )
        {
            self.alarmModelName = alarmModelName
            self.keyValue = keyValue
            self.note = note
            self.requestId = requestId
        }
    }

}

extension IotEventsDataClientTypes.EnableActionConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case note
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let note = self.note {
            try encodeContainer.encode(note, forKey: .note)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let noteDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .note)
        note = noteDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Contains the configuration information of an enable action.
    public struct EnableActionConfiguration: Swift.Equatable {
        /// The note that you can leave when you enable the alarm.
        public var note: Swift.String?

        public init (
            note: Swift.String? = nil
        )
        {
            self.note = note
        }
    }

}

extension IotEventsDataClientTypes.EnableAlarmActionRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmModelName
        case keyValue
        case note
        case requestId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmModelName = self.alarmModelName {
            try encodeContainer.encode(alarmModelName, forKey: .alarmModelName)
        }
        if let keyValue = self.keyValue {
            try encodeContainer.encode(keyValue, forKey: .keyValue)
        }
        if let note = self.note {
            try encodeContainer.encode(note, forKey: .note)
        }
        if let requestId = self.requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let alarmModelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmModelName)
        alarmModelName = alarmModelNameDecoded
        let keyValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyValue)
        keyValue = keyValueDecoded
        let noteDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .note)
        note = noteDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Information needed to enable the alarm.
    public struct EnableAlarmActionRequest: Swift.Equatable {
        /// The name of the alarm model.
        /// This member is required.
        public var alarmModelName: Swift.String?
        /// The value of the key used as a filter to select only the alarms associated with the [key](https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateAlarmModel.html#iotevents-CreateAlarmModel-request-key).
        public var keyValue: Swift.String?
        /// The note that you can leave when you enable the alarm.
        public var note: Swift.String?
        /// The request ID. Each ID must be unique within each batch.
        /// This member is required.
        public var requestId: Swift.String?

        public init (
            alarmModelName: Swift.String? = nil,
            keyValue: Swift.String? = nil,
            note: Swift.String? = nil,
            requestId: Swift.String? = nil
        )
        {
            self.alarmModelName = alarmModelName
            self.keyValue = keyValue
            self.note = note
            self.requestId = requestId
        }
    }

}

extension IotEventsDataClientTypes {
    public enum ErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case internalfailureexception
        case invalidrequestexception
        case resourcenotfoundexception
        case serviceunavailableexception
        case throttlingexception
        case sdkUnknown(Swift.String)

        public static var allCases: [ErrorCode] {
            return [
                .internalfailureexception,
                .invalidrequestexception,
                .resourcenotfoundexception,
                .serviceunavailableexception,
                .throttlingexception,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .internalfailureexception: return "InternalFailureException"
            case .invalidrequestexception: return "InvalidRequestException"
            case .resourcenotfoundexception: return "ResourceNotFoundException"
            case .serviceunavailableexception: return "ServiceUnavailableException"
            case .throttlingexception: return "ThrottlingException"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ErrorCode(rawValue: rawValue) ?? ErrorCode.sdkUnknown(rawValue)
        }
    }
}

extension IotEventsDataClientTypes {
    public enum EventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case stateChange
        case sdkUnknown(Swift.String)

        public static var allCases: [EventType] {
            return [
                .stateChange,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .stateChange: return "STATE_CHANGE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EventType(rawValue: rawValue) ?? EventType.sdkUnknown(rawValue)
        }
    }
}

extension InternalFailureException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InternalFailureExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An internal failure occurred.
public struct InternalFailureException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// The message for the exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalFailureExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalFailureExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was invalid.
public struct InvalidRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message for the exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidRequestExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListAlarmsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        var items = [ClientRuntime.URLQueryItem]()
        if let nextToken = nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListAlarmsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let alarmModelName = alarmModelName else {
            return nil
        }
        return "/alarms/\(alarmModelName.urlPercentEncoding())"
    }
}

public struct ListAlarmsInput: Swift.Equatable {
    /// The name of the alarm model.
    /// This member is required.
    public var alarmModelName: Swift.String?
    /// The maximum number of results to be returned per request.
    public var maxResults: Swift.Int?
    /// The token that you can use to return the next set of results.
    public var nextToken: Swift.String?

    public init (
        alarmModelName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.alarmModelName = alarmModelName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListAlarmsInputBody: Swift.Equatable {
}

extension ListAlarmsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListAlarmsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAlarmsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAlarmsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAlarmsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAlarmsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.alarmSummaries = output.alarmSummaries
            self.nextToken = output.nextToken
        } else {
            self.alarmSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListAlarmsOutputResponse: Swift.Equatable {
    /// A list that summarizes each alarm.
    public var alarmSummaries: [IotEventsDataClientTypes.AlarmSummary]?
    /// The token that you can use to return the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?

    public init (
        alarmSummaries: [IotEventsDataClientTypes.AlarmSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.alarmSummaries = alarmSummaries
        self.nextToken = nextToken
    }
}

struct ListAlarmsOutputResponseBody: Swift.Equatable {
    let alarmSummaries: [IotEventsDataClientTypes.AlarmSummary]?
    let nextToken: Swift.String?
}

extension ListAlarmsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmSummaries
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmSummariesContainer = try containerValues.decodeIfPresent([IotEventsDataClientTypes.AlarmSummary?].self, forKey: .alarmSummaries)
        var alarmSummariesDecoded0:[IotEventsDataClientTypes.AlarmSummary]? = nil
        if let alarmSummariesContainer = alarmSummariesContainer {
            alarmSummariesDecoded0 = [IotEventsDataClientTypes.AlarmSummary]()
            for structure0 in alarmSummariesContainer {
                if let structure0 = structure0 {
                    alarmSummariesDecoded0?.append(structure0)
                }
            }
        }
        alarmSummaries = alarmSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDetectorsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        var items = [ClientRuntime.URLQueryItem]()
        if let stateName = stateName {
            let stateNameQueryItem = ClientRuntime.URLQueryItem(name: "stateName".urlPercentEncoding(), value: Swift.String(stateName).urlPercentEncoding())
            items.append(stateNameQueryItem)
        }
        if let nextToken = nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListDetectorsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let detectorModelName = detectorModelName else {
            return nil
        }
        return "/detectors/\(detectorModelName.urlPercentEncoding())"
    }
}

public struct ListDetectorsInput: Swift.Equatable {
    /// The name of the detector model whose detectors (instances) are listed.
    /// This member is required.
    public var detectorModelName: Swift.String?
    /// The maximum number of results to be returned per request.
    public var maxResults: Swift.Int?
    /// The token that you can use to return the next set of results.
    public var nextToken: Swift.String?
    /// A filter that limits results to those detectors (instances) in the given state.
    public var stateName: Swift.String?

    public init (
        detectorModelName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        stateName: Swift.String? = nil
    )
    {
        self.detectorModelName = detectorModelName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.stateName = stateName
    }
}

struct ListDetectorsInputBody: Swift.Equatable {
}

extension ListDetectorsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListDetectorsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDetectorsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDetectorsOutputError: Swift.Error, Swift.Equatable {
    case internalFailureException(InternalFailureException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDetectorsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListDetectorsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.detectorSummaries = output.detectorSummaries
            self.nextToken = output.nextToken
        } else {
            self.detectorSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListDetectorsOutputResponse: Swift.Equatable {
    /// A list of summary information about the detectors (instances).
    public var detectorSummaries: [IotEventsDataClientTypes.DetectorSummary]?
    /// The token that you can use to return the next set of results, or null if there are no more results.
    public var nextToken: Swift.String?

    public init (
        detectorSummaries: [IotEventsDataClientTypes.DetectorSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.detectorSummaries = detectorSummaries
        self.nextToken = nextToken
    }
}

struct ListDetectorsOutputResponseBody: Swift.Equatable {
    let detectorSummaries: [IotEventsDataClientTypes.DetectorSummary]?
    let nextToken: Swift.String?
}

extension ListDetectorsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case detectorSummaries
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detectorSummariesContainer = try containerValues.decodeIfPresent([IotEventsDataClientTypes.DetectorSummary?].self, forKey: .detectorSummaries)
        var detectorSummariesDecoded0:[IotEventsDataClientTypes.DetectorSummary]? = nil
        if let detectorSummariesContainer = detectorSummariesContainer {
            detectorSummariesDecoded0 = [IotEventsDataClientTypes.DetectorSummary]()
            for structure0 in detectorSummariesContainer {
                if let structure0 = structure0 {
                    detectorSummariesDecoded0?.append(structure0)
                }
            }
        }
        detectorSummaries = detectorSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension IotEventsDataClientTypes.Message: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputName
        case messageId
        case payload
        case timestamp
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputName = self.inputName {
            try encodeContainer.encode(inputName, forKey: .inputName)
        }
        if let messageId = self.messageId {
            try encodeContainer.encode(messageId, forKey: .messageId)
        }
        if let payload = self.payload {
            try encodeContainer.encode(payload.base64EncodedString(), forKey: .payload)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
        let inputNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputName)
        inputName = inputNameDecoded
        let payloadDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .payload)
        payload = payloadDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.TimestampValue.self, forKey: .timestamp)
        timestamp = timestampDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Information about a message.
    public struct Message: Swift.Equatable {
        /// The name of the input into which the message payload is transformed.
        /// This member is required.
        public var inputName: Swift.String?
        /// The ID to assign to the message. Within each batch sent, each "messageId" must be unique.
        /// This member is required.
        public var messageId: Swift.String?
        /// The payload of the message. This can be a JSON string or a Base-64-encoded string representing binary data (in which case you must decode it).
        /// This member is required.
        public var payload: ClientRuntime.Data?
        /// The timestamp associated with the message.
        public var timestamp: IotEventsDataClientTypes.TimestampValue?

        public init (
            inputName: Swift.String? = nil,
            messageId: Swift.String? = nil,
            payload: ClientRuntime.Data? = nil,
            timestamp: IotEventsDataClientTypes.TimestampValue? = nil
        )
        {
            self.inputName = inputName
            self.messageId = messageId
            self.payload = payload
            self.timestamp = timestamp
        }
    }

}

extension IotEventsDataClientTypes.ResetActionConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case note
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let note = self.note {
            try encodeContainer.encode(note, forKey: .note)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let noteDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .note)
        note = noteDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Contains the configuration information of a reset action.
    public struct ResetActionConfiguration: Swift.Equatable {
        /// The note that you can leave when you reset the alarm.
        public var note: Swift.String?

        public init (
            note: Swift.String? = nil
        )
        {
            self.note = note
        }
    }

}

extension IotEventsDataClientTypes.ResetAlarmActionRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmModelName
        case keyValue
        case note
        case requestId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmModelName = self.alarmModelName {
            try encodeContainer.encode(alarmModelName, forKey: .alarmModelName)
        }
        if let keyValue = self.keyValue {
            try encodeContainer.encode(keyValue, forKey: .keyValue)
        }
        if let note = self.note {
            try encodeContainer.encode(note, forKey: .note)
        }
        if let requestId = self.requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let alarmModelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmModelName)
        alarmModelName = alarmModelNameDecoded
        let keyValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyValue)
        keyValue = keyValueDecoded
        let noteDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .note)
        note = noteDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Information needed to reset the alarm.
    public struct ResetAlarmActionRequest: Swift.Equatable {
        /// The name of the alarm model.
        /// This member is required.
        public var alarmModelName: Swift.String?
        /// The value of the key used as a filter to select only the alarms associated with the [key](https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateAlarmModel.html#iotevents-CreateAlarmModel-request-key).
        public var keyValue: Swift.String?
        /// The note that you can leave when you reset the alarm.
        public var note: Swift.String?
        /// The request ID. Each ID must be unique within each batch.
        /// This member is required.
        public var requestId: Swift.String?

        public init (
            alarmModelName: Swift.String? = nil,
            keyValue: Swift.String? = nil,
            note: Swift.String? = nil,
            requestId: Swift.String? = nil
        )
        {
            self.alarmModelName = alarmModelName
            self.keyValue = keyValue
            self.note = note
            self.requestId = requestId
        }
    }

}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The resource was not found.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message for the exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IotEventsDataClientTypes.RuleEvaluation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case simpleRuleEvaluation
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let simpleRuleEvaluation = self.simpleRuleEvaluation {
            try encodeContainer.encode(simpleRuleEvaluation, forKey: .simpleRuleEvaluation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let simpleRuleEvaluationDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.SimpleRuleEvaluation.self, forKey: .simpleRuleEvaluation)
        simpleRuleEvaluation = simpleRuleEvaluationDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Information needed to evaluate data.
    public struct RuleEvaluation: Swift.Equatable {
        /// Information needed to compare two values with a comparison operator.
        public var simpleRuleEvaluation: IotEventsDataClientTypes.SimpleRuleEvaluation?

        public init (
            simpleRuleEvaluation: IotEventsDataClientTypes.SimpleRuleEvaluation? = nil
        )
        {
            self.simpleRuleEvaluation = simpleRuleEvaluation
        }
    }

}

extension ServiceUnavailableException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ServiceUnavailableExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The service is currently unavailable.
public struct ServiceUnavailableException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// The message for the exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceUnavailableExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ServiceUnavailableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IotEventsDataClientTypes.SimpleRuleEvaluation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputPropertyValue
        case `operator` = "operator"
        case thresholdValue
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputPropertyValue = self.inputPropertyValue {
            try encodeContainer.encode(inputPropertyValue, forKey: .inputPropertyValue)
        }
        if let `operator` = self.`operator` {
            try encodeContainer.encode(`operator`.rawValue, forKey: .`operator`)
        }
        if let thresholdValue = self.thresholdValue {
            try encodeContainer.encode(thresholdValue, forKey: .thresholdValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputPropertyValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputPropertyValue)
        inputPropertyValue = inputPropertyValueDecoded
        let operatorDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.ComparisonOperator.self, forKey: .operator)
        `operator` = operatorDecoded
        let thresholdValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thresholdValue)
        thresholdValue = thresholdValueDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Information needed to compare two values with a comparison operator.
    public struct SimpleRuleEvaluation: Swift.Equatable {
        /// The value of the input property, on the left side of the comparison operator.
        public var inputPropertyValue: Swift.String?
        /// The comparison operator.
        public var `operator`: IotEventsDataClientTypes.ComparisonOperator?
        /// The threshold value, on the right side of the comparison operator.
        public var thresholdValue: Swift.String?

        public init (
            inputPropertyValue: Swift.String? = nil,
            `operator`: IotEventsDataClientTypes.ComparisonOperator? = nil,
            thresholdValue: Swift.String? = nil
        )
        {
            self.inputPropertyValue = inputPropertyValue
            self.`operator` = `operator`
            self.thresholdValue = thresholdValue
        }
    }

}

extension IotEventsDataClientTypes.SnoozeActionConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case note
        case snoozeDuration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let note = self.note {
            try encodeContainer.encode(note, forKey: .note)
        }
        if let snoozeDuration = self.snoozeDuration {
            try encodeContainer.encode(snoozeDuration, forKey: .snoozeDuration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snoozeDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .snoozeDuration)
        snoozeDuration = snoozeDurationDecoded
        let noteDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .note)
        note = noteDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Contains the configuration information of a snooze action.
    public struct SnoozeActionConfiguration: Swift.Equatable {
        /// The note that you can leave when you snooze the alarm.
        public var note: Swift.String?
        /// The snooze time in seconds. The alarm automatically changes to the NORMAL state after this duration.
        public var snoozeDuration: Swift.Int?

        public init (
            note: Swift.String? = nil,
            snoozeDuration: Swift.Int? = nil
        )
        {
            self.note = note
            self.snoozeDuration = snoozeDuration
        }
    }

}

extension IotEventsDataClientTypes.SnoozeAlarmActionRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmModelName
        case keyValue
        case note
        case requestId
        case snoozeDuration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmModelName = self.alarmModelName {
            try encodeContainer.encode(alarmModelName, forKey: .alarmModelName)
        }
        if let keyValue = self.keyValue {
            try encodeContainer.encode(keyValue, forKey: .keyValue)
        }
        if let note = self.note {
            try encodeContainer.encode(note, forKey: .note)
        }
        if let requestId = self.requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
        if let snoozeDuration = self.snoozeDuration {
            try encodeContainer.encode(snoozeDuration, forKey: .snoozeDuration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let alarmModelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmModelName)
        alarmModelName = alarmModelNameDecoded
        let keyValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyValue)
        keyValue = keyValueDecoded
        let noteDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .note)
        note = noteDecoded
        let snoozeDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .snoozeDuration)
        snoozeDuration = snoozeDurationDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Information needed to snooze the alarm.
    public struct SnoozeAlarmActionRequest: Swift.Equatable {
        /// The name of the alarm model.
        /// This member is required.
        public var alarmModelName: Swift.String?
        /// The value of the key used as a filter to select only the alarms associated with the [key](https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateAlarmModel.html#iotevents-CreateAlarmModel-request-key).
        public var keyValue: Swift.String?
        /// The note that you can leave when you snooze the alarm.
        public var note: Swift.String?
        /// The request ID. Each ID must be unique within each batch.
        /// This member is required.
        public var requestId: Swift.String?
        /// The snooze time in seconds. The alarm automatically changes to the NORMAL state after this duration.
        /// This member is required.
        public var snoozeDuration: Swift.Int?

        public init (
            alarmModelName: Swift.String? = nil,
            keyValue: Swift.String? = nil,
            note: Swift.String? = nil,
            requestId: Swift.String? = nil,
            snoozeDuration: Swift.Int? = nil
        )
        {
            self.alarmModelName = alarmModelName
            self.keyValue = keyValue
            self.note = note
            self.requestId = requestId
            self.snoozeDuration = snoozeDuration
        }
    }

}

extension IotEventsDataClientTypes.StateChangeConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case triggerType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let triggerType = self.triggerType {
            try encodeContainer.encode(triggerType.rawValue, forKey: .triggerType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let triggerTypeDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.TriggerType.self, forKey: .triggerType)
        triggerType = triggerTypeDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Contains the configuration information of alarm state changes.
    public struct StateChangeConfiguration: Swift.Equatable {
        /// The trigger type. If the value is SNOOZE_TIMEOUT, the snooze duration ends and the alarm automatically changes to the NORMAL state.
        public var triggerType: IotEventsDataClientTypes.TriggerType?

        public init (
            triggerType: IotEventsDataClientTypes.TriggerType? = nil
        )
        {
            self.triggerType = triggerType
        }
    }

}

extension IotEventsDataClientTypes.SystemEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventType
        case stateChangeConfiguration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventType = self.eventType {
            try encodeContainer.encode(eventType.rawValue, forKey: .eventType)
        }
        if let stateChangeConfiguration = self.stateChangeConfiguration {
            try encodeContainer.encode(stateChangeConfiguration, forKey: .stateChangeConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventTypeDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.EventType.self, forKey: .eventType)
        eventType = eventTypeDecoded
        let stateChangeConfigurationDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.StateChangeConfiguration.self, forKey: .stateChangeConfiguration)
        stateChangeConfiguration = stateChangeConfigurationDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Contains information about alarm state changes.
    public struct SystemEvent: Swift.Equatable {
        /// The event type. If the value is STATE_CHANGE, the event contains information about alarm state changes.
        public var eventType: IotEventsDataClientTypes.EventType?
        /// Contains the configuration information of alarm state changes.
        public var stateChangeConfiguration: IotEventsDataClientTypes.StateChangeConfiguration?

        public init (
            eventType: IotEventsDataClientTypes.EventType? = nil,
            stateChangeConfiguration: IotEventsDataClientTypes.StateChangeConfiguration? = nil
        )
        {
            self.eventType = eventType
            self.stateChangeConfiguration = stateChangeConfiguration
        }
    }

}

extension ThrottlingException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request could not be completed due to throttling.
public struct ThrottlingException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message for the exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IotEventsDataClientTypes.Timer: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case timestamp
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encode(timestamp.timeIntervalSince1970, forKey: .timestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .timestamp)
        timestamp = timestampDecoded
    }
}

extension IotEventsDataClientTypes {
    /// The current state of a timer.
    public struct Timer: Swift.Equatable {
        /// The name of the timer.
        /// This member is required.
        public var name: Swift.String?
        /// The expiration time for the timer.
        /// This member is required.
        public var timestamp: ClientRuntime.Date?

        public init (
            name: Swift.String? = nil,
            timestamp: ClientRuntime.Date? = nil
        )
        {
            self.name = name
            self.timestamp = timestamp
        }
    }

}

extension IotEventsDataClientTypes.TimerDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case seconds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let seconds = self.seconds {
            try encodeContainer.encode(seconds, forKey: .seconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let secondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .seconds)
        seconds = secondsDecoded
    }
}

extension IotEventsDataClientTypes {
    /// The new setting of a timer.
    public struct TimerDefinition: Swift.Equatable {
        /// The name of the timer.
        /// This member is required.
        public var name: Swift.String?
        /// The new setting of the timer (the number of seconds before the timer elapses).
        /// This member is required.
        public var seconds: Swift.Int?

        public init (
            name: Swift.String? = nil,
            seconds: Swift.Int? = nil
        )
        {
            self.name = name
            self.seconds = seconds
        }
    }

}

extension IotEventsDataClientTypes.TimestampValue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case timeInMillis
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let timeInMillis = self.timeInMillis {
            try encodeContainer.encode(timeInMillis, forKey: .timeInMillis)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeInMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeInMillis)
        timeInMillis = timeInMillisDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Contains information about a timestamp.
    public struct TimestampValue: Swift.Equatable {
        /// The value of the timestamp, in the Unix epoch format.
        public var timeInMillis: Swift.Int?

        public init (
            timeInMillis: Swift.Int? = nil
        )
        {
            self.timeInMillis = timeInMillis
        }
    }

}

extension IotEventsDataClientTypes {
    public enum TriggerType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case snoozeTimeout
        case sdkUnknown(Swift.String)

        public static var allCases: [TriggerType] {
            return [
                .snoozeTimeout,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .snoozeTimeout: return "SNOOZE_TIMEOUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TriggerType(rawValue: rawValue) ?? TriggerType.sdkUnknown(rawValue)
        }
    }
}

extension IotEventsDataClientTypes.UpdateDetectorRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case detectorModelName
        case keyValue
        case messageId
        case state
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let detectorModelName = self.detectorModelName {
            try encodeContainer.encode(detectorModelName, forKey: .detectorModelName)
        }
        if let keyValue = self.keyValue {
            try encodeContainer.encode(keyValue, forKey: .keyValue)
        }
        if let messageId = self.messageId {
            try encodeContainer.encode(messageId, forKey: .messageId)
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageId)
        messageId = messageIdDecoded
        let detectorModelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorModelName)
        detectorModelName = detectorModelNameDecoded
        let keyValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyValue)
        keyValue = keyValueDecoded
        let stateDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.DetectorStateDefinition.self, forKey: .state)
        state = stateDecoded
    }
}

extension IotEventsDataClientTypes {
    /// Information used to update the detector (instance).
    public struct UpdateDetectorRequest: Swift.Equatable {
        /// The name of the detector model that created the detectors (instances).
        /// This member is required.
        public var detectorModelName: Swift.String?
        /// The value of the input key attribute (identifying the device or system) that caused the creation of this detector (instance).
        public var keyValue: Swift.String?
        /// The ID to assign to the detector update "message". Each "messageId" must be unique within each batch sent.
        /// This member is required.
        public var messageId: Swift.String?
        /// The new state, variable values, and timer settings of the detector (instance).
        /// This member is required.
        public var state: IotEventsDataClientTypes.DetectorStateDefinition?

        public init (
            detectorModelName: Swift.String? = nil,
            keyValue: Swift.String? = nil,
            messageId: Swift.String? = nil,
            state: IotEventsDataClientTypes.DetectorStateDefinition? = nil
        )
        {
            self.detectorModelName = detectorModelName
            self.keyValue = keyValue
            self.messageId = messageId
            self.state = state
        }
    }

}

extension IotEventsDataClientTypes.Variable: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension IotEventsDataClientTypes {
    /// The current state of the variable.
    public struct Variable: Swift.Equatable {
        /// The name of the variable.
        /// This member is required.
        public var name: Swift.String?
        /// The current value of the variable.
        /// This member is required.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension IotEventsDataClientTypes.VariableDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension IotEventsDataClientTypes {
    /// The new value of the variable.
    public struct VariableDefinition: Swift.Equatable {
        /// The name of the variable.
        /// This member is required.
        public var name: Swift.String?
        /// The new value of the variable.
        /// This member is required.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}
