// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ServerGroupReplicationConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case serverGroupId
        case serverReplicationConfigurations
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let serverGroupId = serverGroupId {
            try encodeContainer.encode(serverGroupId, forKey: .serverGroupId)
        }
        if let serverReplicationConfigurations = serverReplicationConfigurations {
            var serverReplicationConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .serverReplicationConfigurations)
            for serverreplicationconfigurations0 in serverReplicationConfigurations {
                try serverReplicationConfigurationsContainer.encode(serverreplicationconfigurations0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serverGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serverGroupId)
        serverGroupId = serverGroupIdDecoded
        let serverReplicationConfigurationsContainer = try containerValues.decodeIfPresent([ServerReplicationConfiguration].self, forKey: .serverReplicationConfigurations)
        var serverReplicationConfigurationsDecoded0:[ServerReplicationConfiguration]? = nil
        if let serverReplicationConfigurationsContainer = serverReplicationConfigurationsContainer {
            serverReplicationConfigurationsDecoded0 = [ServerReplicationConfiguration]()
            for structure0 in serverReplicationConfigurationsContainer {
                serverReplicationConfigurationsDecoded0?.append(structure0)
            }
        }
        serverReplicationConfigurations = serverReplicationConfigurationsDecoded0
    }
}
