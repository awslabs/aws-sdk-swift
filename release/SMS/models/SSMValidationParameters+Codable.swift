// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SSMValidationParameters: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case command
        case executionTimeoutSeconds
        case instanceId
        case outputS3BucketName
        case scriptType
        case source
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let command = command {
            try encodeContainer.encode(command, forKey: .command)
        }
        if executionTimeoutSeconds != 0 {
            try encodeContainer.encode(executionTimeoutSeconds, forKey: .executionTimeoutSeconds)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let outputS3BucketName = outputS3BucketName {
            try encodeContainer.encode(outputS3BucketName, forKey: .outputS3BucketName)
        }
        if let scriptType = scriptType {
            try encodeContainer.encode(scriptType.rawValue, forKey: .scriptType)
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDecoded = try containerValues.decodeIfPresent(Source.self, forKey: .source)
        source = sourceDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let scriptTypeDecoded = try containerValues.decodeIfPresent(ScriptType.self, forKey: .scriptType)
        scriptType = scriptTypeDecoded
        let commandDecoded = try containerValues.decodeIfPresent(String.self, forKey: .command)
        command = commandDecoded
        let executionTimeoutSecondsDecoded = try containerValues.decode(Int.self, forKey: .executionTimeoutSeconds)
        executionTimeoutSeconds = executionTimeoutSecondsDecoded
        let outputS3BucketNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outputS3BucketName)
        outputS3BucketName = outputS3BucketNameDecoded
    }
}
