// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NotificationContext: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case status
        case statusMessage
        case validationId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusMessage = statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
        if let validationId = validationId {
            try encodeContainer.encode(validationId, forKey: .validationId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let validationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .validationId)
        validationId = validationIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ValidationStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
    }
}
