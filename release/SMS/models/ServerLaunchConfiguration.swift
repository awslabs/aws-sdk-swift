// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Launch configuration for a server.</p>
public struct ServerLaunchConfiguration: Equatable {
    /// <p>Indicates whether a publicly accessible IP address is created when launching the server.</p>
    public let associatePublicIpAddress: Bool?
    /// <p>Location of an Amazon S3 object.</p>
    public let configureScript: S3Location?
    /// <p>The type of configuration script.</p>
    public let configureScriptType: ScriptType?
    /// <p>The name of the Amazon EC2 SSH key to be used for connecting to the launched server.</p>
    public let ec2KeyName: String?
    /// <p>The name of the IAM instance profile.</p>
    public let iamInstanceProfileName: String?
    /// <p>The instance type to use when launching the server.</p>
    public let instanceType: String?
    /// <p>The logical ID of the server in the AWS CloudFormation template.</p>
    public let logicalId: String?
    /// <p>The ID of the security group that applies to the launched server.</p>
    public let securityGroup: String?
    /// <p>The ID of the server with which the launch configuration is associated.</p>
    public let server: Server?
    /// <p>The ID of the subnet the server should be launched into.</p>
    public let subnet: String?
    /// <p>Location of the user-data script to be executed when launching the server.</p>
    public let userData: UserData?
    /// <p>The ID of the VPC into which the server should be launched.</p>
    public let vpc: String?

    public init (
        associatePublicIpAddress: Bool? = nil,
        configureScript: S3Location? = nil,
        configureScriptType: ScriptType? = nil,
        ec2KeyName: String? = nil,
        iamInstanceProfileName: String? = nil,
        instanceType: String? = nil,
        logicalId: String? = nil,
        securityGroup: String? = nil,
        server: Server? = nil,
        subnet: String? = nil,
        userData: UserData? = nil,
        vpc: String? = nil
    )
    {
        self.associatePublicIpAddress = associatePublicIpAddress
        self.configureScript = configureScript
        self.configureScriptType = configureScriptType
        self.ec2KeyName = ec2KeyName
        self.iamInstanceProfileName = iamInstanceProfileName
        self.instanceType = instanceType
        self.logicalId = logicalId
        self.securityGroup = securityGroup
        self.server = server
        self.subnet = subnet
        self.userData = userData
        self.vpc = vpc
    }
}
