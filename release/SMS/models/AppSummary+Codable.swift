// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case appId
        case creationTime
        case description
        case importedAppId
        case lastModified
        case latestReplicationTime
        case launchConfigurationStatus
        case launchDetails
        case launchStatus
        case launchStatusMessage
        case name
        case replicationConfigurationStatus
        case replicationStatus
        case replicationStatusMessage
        case roleName
        case status
        case statusMessage
        case totalServerGroups
        case totalServers
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appId = appId {
            try encodeContainer.encode(appId, forKey: .appId)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let importedAppId = importedAppId {
            try encodeContainer.encode(importedAppId, forKey: .importedAppId)
        }
        if let lastModified = lastModified {
            try encodeContainer.encode(lastModified.timeIntervalSince1970, forKey: .lastModified)
        }
        if let latestReplicationTime = latestReplicationTime {
            try encodeContainer.encode(latestReplicationTime.timeIntervalSince1970, forKey: .latestReplicationTime)
        }
        if let launchConfigurationStatus = launchConfigurationStatus {
            try encodeContainer.encode(launchConfigurationStatus.rawValue, forKey: .launchConfigurationStatus)
        }
        if let launchDetails = launchDetails {
            try encodeContainer.encode(launchDetails, forKey: .launchDetails)
        }
        if let launchStatus = launchStatus {
            try encodeContainer.encode(launchStatus.rawValue, forKey: .launchStatus)
        }
        if let launchStatusMessage = launchStatusMessage {
            try encodeContainer.encode(launchStatusMessage, forKey: .launchStatusMessage)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let replicationConfigurationStatus = replicationConfigurationStatus {
            try encodeContainer.encode(replicationConfigurationStatus.rawValue, forKey: .replicationConfigurationStatus)
        }
        if let replicationStatus = replicationStatus {
            try encodeContainer.encode(replicationStatus.rawValue, forKey: .replicationStatus)
        }
        if let replicationStatusMessage = replicationStatusMessage {
            try encodeContainer.encode(replicationStatusMessage, forKey: .replicationStatusMessage)
        }
        if let roleName = roleName {
            try encodeContainer.encode(roleName, forKey: .roleName)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusMessage = statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
        if let totalServerGroups = totalServerGroups {
            try encodeContainer.encode(totalServerGroups, forKey: .totalServerGroups)
        }
        if let totalServers = totalServers {
            try encodeContainer.encode(totalServers, forKey: .totalServers)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .appId)
        appId = appIdDecoded
        let importedAppIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .importedAppId)
        importedAppId = importedAppIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AppStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let replicationConfigurationStatusDecoded = try containerValues.decodeIfPresent(AppReplicationConfigurationStatus.self, forKey: .replicationConfigurationStatus)
        replicationConfigurationStatus = replicationConfigurationStatusDecoded
        let replicationStatusDecoded = try containerValues.decodeIfPresent(AppReplicationStatus.self, forKey: .replicationStatus)
        replicationStatus = replicationStatusDecoded
        let replicationStatusMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replicationStatusMessage)
        replicationStatusMessage = replicationStatusMessageDecoded
        let latestReplicationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .latestReplicationTime)
        latestReplicationTime = latestReplicationTimeDecoded
        let launchConfigurationStatusDecoded = try containerValues.decodeIfPresent(AppLaunchConfigurationStatus.self, forKey: .launchConfigurationStatus)
        launchConfigurationStatus = launchConfigurationStatusDecoded
        let launchStatusDecoded = try containerValues.decodeIfPresent(AppLaunchStatus.self, forKey: .launchStatus)
        launchStatus = launchStatusDecoded
        let launchStatusMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .launchStatusMessage)
        launchStatusMessage = launchStatusMessageDecoded
        let launchDetailsDecoded = try containerValues.decodeIfPresent(LaunchDetails.self, forKey: .launchDetails)
        launchDetails = launchDetailsDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModified)
        lastModified = lastModifiedDecoded
        let roleNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleName)
        roleName = roleNameDecoded
        let totalServerGroupsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .totalServerGroups)
        totalServerGroups = totalServerGroupsDecoded
        let totalServersDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .totalServers)
        totalServers = totalServersDecoded
    }
}
