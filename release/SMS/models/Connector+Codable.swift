// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Connector: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case associatedOn
        case capabilityList
        case connectorId
        case ipAddress
        case macAddress
        case status
        case version
        case vmManagerId
        case vmManagerName
        case vmManagerType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associatedOn = associatedOn {
            try encodeContainer.encode(associatedOn.timeIntervalSince1970, forKey: .associatedOn)
        }
        if let capabilityList = capabilityList {
            var capabilityListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .capabilityList)
            for connectorcapabilitylist0 in capabilityList {
                try capabilityListContainer.encode(connectorcapabilitylist0.rawValue)
            }
        }
        if let connectorId = connectorId {
            try encodeContainer.encode(connectorId, forKey: .connectorId)
        }
        if let ipAddress = ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let macAddress = macAddress {
            try encodeContainer.encode(macAddress, forKey: .macAddress)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let vmManagerId = vmManagerId {
            try encodeContainer.encode(vmManagerId, forKey: .vmManagerId)
        }
        if let vmManagerName = vmManagerName {
            try encodeContainer.encode(vmManagerName, forKey: .vmManagerName)
        }
        if let vmManagerType = vmManagerType {
            try encodeContainer.encode(vmManagerType.rawValue, forKey: .vmManagerType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectorIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .connectorId)
        connectorId = connectorIdDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ConnectorStatus.self, forKey: .status)
        status = statusDecoded
        let capabilityListContainer = try containerValues.decodeIfPresent([ConnectorCapability].self, forKey: .capabilityList)
        var capabilityListDecoded0:[ConnectorCapability]? = nil
        if let capabilityListContainer = capabilityListContainer {
            capabilityListDecoded0 = [ConnectorCapability]()
            for string0 in capabilityListContainer {
                capabilityListDecoded0?.append(string0)
            }
        }
        capabilityList = capabilityListDecoded0
        let vmManagerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vmManagerName)
        vmManagerName = vmManagerNameDecoded
        let vmManagerTypeDecoded = try containerValues.decodeIfPresent(VmManagerType.self, forKey: .vmManagerType)
        vmManagerType = vmManagerTypeDecoded
        let vmManagerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vmManagerId)
        vmManagerId = vmManagerIdDecoded
        let ipAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let macAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .macAddress)
        macAddress = macAddressDecoded
        let associatedOnDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .associatedOn)
        associatedOn = associatedOnDecoded
    }
}
