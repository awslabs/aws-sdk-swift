// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ReplicationRunStageDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case stage
        case stageProgress
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let stage = stage {
            try encodeContainer.encode(stage, forKey: .stage)
        }
        if let stageProgress = stageProgress {
            try encodeContainer.encode(stageProgress, forKey: .stageProgress)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stage)
        stage = stageDecoded
        let stageProgressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stageProgress)
        stageProgress = stageProgressDecoded
    }
}
