// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ValidationOutput: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case appValidationOutput
        case latestValidationTime
        case name
        case serverValidationOutput
        case status
        case statusMessage
        case validationId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appValidationOutput = appValidationOutput {
            try encodeContainer.encode(appValidationOutput, forKey: .appValidationOutput)
        }
        if let latestValidationTime = latestValidationTime {
            try encodeContainer.encode(latestValidationTime.timeIntervalSince1970, forKey: .latestValidationTime)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let serverValidationOutput = serverValidationOutput {
            try encodeContainer.encode(serverValidationOutput, forKey: .serverValidationOutput)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusMessage = statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
        if let validationId = validationId {
            try encodeContainer.encode(validationId, forKey: .validationId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let validationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .validationId)
        validationId = validationIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ValidationStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let latestValidationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .latestValidationTime)
        latestValidationTime = latestValidationTimeDecoded
        let appValidationOutputDecoded = try containerValues.decodeIfPresent(AppValidationOutput.self, forKey: .appValidationOutput)
        appValidationOutput = appValidationOutputDecoded
        let serverValidationOutputDecoded = try containerValues.decodeIfPresent(ServerValidationOutput.self, forKey: .serverValidationOutput)
        serverValidationOutput = serverValidationOutputDecoded
    }
}
