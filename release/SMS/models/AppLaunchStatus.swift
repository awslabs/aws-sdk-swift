// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum AppLaunchStatus {
    case configurationinprogress
    case configurationinvalid
    case deltalaunchfailed
    case deltalaunchinprogress
    case launchfailed
    case launchinprogress
    case launchpending
    case launched
    case partiallylaunched
    case readyforconfiguration
    case readyforlaunch
    case terminatefailed
    case terminateinprogress
    case terminated
    case validationinprogress
    case sdkUnknown(String)
}

extension AppLaunchStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AppLaunchStatus] {
        return [
            .configurationinprogress,
            .configurationinvalid,
            .deltalaunchfailed,
            .deltalaunchinprogress,
            .launchfailed,
            .launchinprogress,
            .launchpending,
            .launched,
            .partiallylaunched,
            .readyforconfiguration,
            .readyforlaunch,
            .terminatefailed,
            .terminateinprogress,
            .terminated,
            .validationinprogress,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .configurationinprogress: return "CONFIGURATION_IN_PROGRESS"
        case .configurationinvalid: return "CONFIGURATION_INVALID"
        case .deltalaunchfailed: return "DELTA_LAUNCH_FAILED"
        case .deltalaunchinprogress: return "DELTA_LAUNCH_IN_PROGRESS"
        case .launchfailed: return "LAUNCH_FAILED"
        case .launchinprogress: return "LAUNCH_IN_PROGRESS"
        case .launchpending: return "LAUNCH_PENDING"
        case .launched: return "LAUNCHED"
        case .partiallylaunched: return "PARTIALLY_LAUNCHED"
        case .readyforconfiguration: return "READY_FOR_CONFIGURATION"
        case .readyforlaunch: return "READY_FOR_LAUNCH"
        case .terminatefailed: return "TERMINATE_FAILED"
        case .terminateinprogress: return "TERMINATE_IN_PROGRESS"
        case .terminated: return "TERMINATED"
        case .validationinprogress: return "VALIDATION_IN_PROGRESS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AppLaunchStatus(rawValue: rawValue) ?? AppLaunchStatus.sdkUnknown(rawValue)
    }
}
