// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateAppInputBody: Equatable {
    public let appId: String?
    public let name: String?
    public let description: String?
    public let roleName: String?
    public let serverGroups: [ServerGroup]?
    public let tags: [Tag]?
}

extension UpdateAppInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case appId
        case description
        case name
        case roleName
        case serverGroups
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .appId)
        appId = appIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let roleNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleName)
        roleName = roleNameDecoded
        let serverGroupsContainer = try containerValues.decodeIfPresent([ServerGroup].self, forKey: .serverGroups)
        var serverGroupsDecoded0:[ServerGroup]? = nil
        if let serverGroupsContainer = serverGroupsContainer {
            serverGroupsDecoded0 = [ServerGroup]()
            for structure0 in serverGroupsContainer {
                serverGroupsDecoded0?.append(structure0)
            }
        }
        serverGroups = serverGroupsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
