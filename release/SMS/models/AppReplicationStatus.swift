// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum AppReplicationStatus {
    case configurationinprogress
    case configurationinvalid
    case deltareplicated
    case deltareplicationfailed
    case deltareplicationinprogress
    case partiallyreplicated
    case readyforconfiguration
    case readyforreplication
    case replicated
    case replicationfailed
    case replicationinprogress
    case replicationpending
    case replicationstopfailed
    case replicationstopped
    case replicationstopping
    case validationinprogress
    case sdkUnknown(String)
}

extension AppReplicationStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AppReplicationStatus] {
        return [
            .configurationinprogress,
            .configurationinvalid,
            .deltareplicated,
            .deltareplicationfailed,
            .deltareplicationinprogress,
            .partiallyreplicated,
            .readyforconfiguration,
            .readyforreplication,
            .replicated,
            .replicationfailed,
            .replicationinprogress,
            .replicationpending,
            .replicationstopfailed,
            .replicationstopped,
            .replicationstopping,
            .validationinprogress,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .configurationinprogress: return "CONFIGURATION_IN_PROGRESS"
        case .configurationinvalid: return "CONFIGURATION_INVALID"
        case .deltareplicated: return "DELTA_REPLICATED"
        case .deltareplicationfailed: return "DELTA_REPLICATION_FAILED"
        case .deltareplicationinprogress: return "DELTA_REPLICATION_IN_PROGRESS"
        case .partiallyreplicated: return "PARTIALLY_REPLICATED"
        case .readyforconfiguration: return "READY_FOR_CONFIGURATION"
        case .readyforreplication: return "READY_FOR_REPLICATION"
        case .replicated: return "REPLICATED"
        case .replicationfailed: return "REPLICATION_FAILED"
        case .replicationinprogress: return "REPLICATION_IN_PROGRESS"
        case .replicationpending: return "REPLICATION_PENDING"
        case .replicationstopfailed: return "REPLICATION_STOP_FAILED"
        case .replicationstopped: return "REPLICATION_STOPPED"
        case .replicationstopping: return "REPLICATION_STOPPING"
        case .validationinprogress: return "VALIDATION_IN_PROGRESS"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AppReplicationStatus(rawValue: rawValue) ?? AppReplicationStatus.sdkUnknown(rawValue)
    }
}
