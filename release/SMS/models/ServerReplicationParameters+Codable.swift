// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ServerReplicationParameters: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case encrypted
        case frequency
        case kmsKeyId
        case licenseType
        case numberOfRecentAmisToKeep
        case runOnce
        case seedTime
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encrypted = encrypted {
            try encodeContainer.encode(encrypted, forKey: .encrypted)
        }
        if let frequency = frequency {
            try encodeContainer.encode(frequency, forKey: .frequency)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let licenseType = licenseType {
            try encodeContainer.encode(licenseType.rawValue, forKey: .licenseType)
        }
        if let numberOfRecentAmisToKeep = numberOfRecentAmisToKeep {
            try encodeContainer.encode(numberOfRecentAmisToKeep, forKey: .numberOfRecentAmisToKeep)
        }
        if let runOnce = runOnce {
            try encodeContainer.encode(runOnce, forKey: .runOnce)
        }
        if let seedTime = seedTime {
            try encodeContainer.encode(seedTime.timeIntervalSince1970, forKey: .seedTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let seedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .seedTime)
        seedTime = seedTimeDecoded
        let frequencyDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .frequency)
        frequency = frequencyDecoded
        let runOnceDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .runOnce)
        runOnce = runOnceDecoded
        let licenseTypeDecoded = try containerValues.decodeIfPresent(LicenseType.self, forKey: .licenseType)
        licenseType = licenseTypeDecoded
        let numberOfRecentAmisToKeepDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .numberOfRecentAmisToKeep)
        numberOfRecentAmisToKeep = numberOfRecentAmisToKeepDecoded
        let encryptedDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}
