// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <fullname>AWS Server Migration Service</fullname>
///         <p>AWS Server Migration Service (AWS SMS) makes it easier and faster for you to migrate your
///             on-premises workloads to AWS. To learn more about AWS SMS, see the following
///             resources:</p>
///         <ul>
///             <li>
///                 <p>
///                   <a href="http://aws.amazon.com/server-migration-service/">AWS Server Migration Service
///                     product page</a>
///                </p>
///             </li>
///             <li>
///                 <p>
///                   <a href="https://docs.aws.amazon.com/server-migration-service/latest/userguide/">AWS Server Migration Service User Guide</a>
///                </p>
///             </li>
///          </ul>
public protocol SmsClientProtocol {
    /// <p>Creates an application. An application consists of one or more server groups. Each
    ///             server group contain one or more servers.</p>
    func createApp(input: CreateAppInput, completion: @escaping (SdkResult<CreateAppOutput, CreateAppOutputError>) -> Void)
    /// <p>Creates a replication job. The replication job schedules periodic replication runs
    ///             to replicate your server to AWS. Each replication run creates an Amazon Machine Image
    ///             (AMI).</p>
    func createReplicationJob(input: CreateReplicationJobInput, completion: @escaping (SdkResult<CreateReplicationJobOutput, CreateReplicationJobOutputError>) -> Void)
    /// <p>Deletes the specified application. Optionally deletes the launched stack associated with
    ///             the application and all AWS SMS replication jobs for servers in the application.</p>
    func deleteApp(input: DeleteAppInput, completion: @escaping (SdkResult<DeleteAppOutput, DeleteAppOutputError>) -> Void)
    /// <p>Deletes the launch configuration for the specified application.</p>
    func deleteAppLaunchConfiguration(input: DeleteAppLaunchConfigurationInput, completion: @escaping (SdkResult<DeleteAppLaunchConfigurationOutput, DeleteAppLaunchConfigurationOutputError>) -> Void)
    /// <p>Deletes the replication configuration for the specified application.</p>
    func deleteAppReplicationConfiguration(input: DeleteAppReplicationConfigurationInput, completion: @escaping (SdkResult<DeleteAppReplicationConfigurationOutput, DeleteAppReplicationConfigurationOutputError>) -> Void)
    /// <p>Deletes the validation configuration for the specified application.</p>
    func deleteAppValidationConfiguration(input: DeleteAppValidationConfigurationInput, completion: @escaping (SdkResult<DeleteAppValidationConfigurationOutput, DeleteAppValidationConfigurationOutputError>) -> Void)
    /// <p>Deletes the specified replication job.</p>
    ///         <p>After you delete a replication job, there are no further replication runs. AWS
    ///             deletes the contents of the Amazon S3 bucket used to store AWS SMS artifacts. The AMIs created
    ///             by the replication runs are not deleted.</p>
    func deleteReplicationJob(input: DeleteReplicationJobInput, completion: @escaping (SdkResult<DeleteReplicationJobOutput, DeleteReplicationJobOutputError>) -> Void)
    /// <p>Deletes all servers from your server catalog.</p>
    func deleteServerCatalog(input: DeleteServerCatalogInput, completion: @escaping (SdkResult<DeleteServerCatalogOutput, DeleteServerCatalogOutputError>) -> Void)
    /// <p>Disassociates the specified connector from AWS SMS.</p>
    ///         <p>After you disassociate a connector, it is no longer available to support
    ///             replication jobs.</p>
    func disassociateConnector(input: DisassociateConnectorInput, completion: @escaping (SdkResult<DisassociateConnectorOutput, DisassociateConnectorOutputError>) -> Void)
    /// <p>Generates a target change set for a currently launched stack and writes it to an Amazon S3
    ///             object in the customer’s Amazon S3 bucket.</p>
    func generateChangeSet(input: GenerateChangeSetInput, completion: @escaping (SdkResult<GenerateChangeSetOutput, GenerateChangeSetOutputError>) -> Void)
    /// <p>Generates an AWS CloudFormation template based on the current launch configuration and writes it to
    ///             an Amazon S3 object in the customer’s Amazon S3 bucket.</p>
    func generateTemplate(input: GenerateTemplateInput, completion: @escaping (SdkResult<GenerateTemplateOutput, GenerateTemplateOutputError>) -> Void)
    /// <p>Retrieve information about the specified application.</p>
    func getApp(input: GetAppInput, completion: @escaping (SdkResult<GetAppOutput, GetAppOutputError>) -> Void)
    /// <p>Retrieves the application launch configuration associated with the specified application.</p>
    func getAppLaunchConfiguration(input: GetAppLaunchConfigurationInput, completion: @escaping (SdkResult<GetAppLaunchConfigurationOutput, GetAppLaunchConfigurationOutputError>) -> Void)
    /// <p>Retrieves the application replication configuration associated with the specified
    ///             application.</p>
    func getAppReplicationConfiguration(input: GetAppReplicationConfigurationInput, completion: @escaping (SdkResult<GetAppReplicationConfigurationOutput, GetAppReplicationConfigurationOutputError>) -> Void)
    /// <p>Retrieves information about a configuration for validating an application.</p>
    func getAppValidationConfiguration(input: GetAppValidationConfigurationInput, completion: @escaping (SdkResult<GetAppValidationConfigurationOutput, GetAppValidationConfigurationOutputError>) -> Void)
    /// <p>Retrieves output from validating an application.</p>
    func getAppValidationOutput(input: GetAppValidationOutputInput, completion: @escaping (SdkResult<GetAppValidationOutputOutput, GetAppValidationOutputOutputError>) -> Void)
    /// <p>Describes the connectors registered with the AWS SMS.</p>
    func getConnectors(input: GetConnectorsInput, completion: @escaping (SdkResult<GetConnectorsOutput, GetConnectorsOutputError>) -> Void)
    /// <p>Describes the specified replication job or all of your replication jobs.</p>
    func getReplicationJobs(input: GetReplicationJobsInput, completion: @escaping (SdkResult<GetReplicationJobsOutput, GetReplicationJobsOutputError>) -> Void)
    /// <p>Describes the replication runs for the specified replication job.</p>
    func getReplicationRuns(input: GetReplicationRunsInput, completion: @escaping (SdkResult<GetReplicationRunsOutput, GetReplicationRunsOutputError>) -> Void)
    /// <p>Describes the servers in your server catalog.</p>
    ///         <p>Before you can describe your servers, you must import them using <a>ImportServerCatalog</a>.</p>
    func getServers(input: GetServersInput, completion: @escaping (SdkResult<GetServersOutput, GetServersOutputError>) -> Void)
    /// <p>Allows application import from AWS Migration Hub.</p>
    func importAppCatalog(input: ImportAppCatalogInput, completion: @escaping (SdkResult<ImportAppCatalogOutput, ImportAppCatalogOutputError>) -> Void)
    /// <p>Gathers a complete list of on-premises servers. Connectors must be installed and
    ///             monitoring all servers to import.</p>
    ///         <p>This call returns immediately, but might take additional time to retrieve all the
    ///             servers.</p>
    func importServerCatalog(input: ImportServerCatalogInput, completion: @escaping (SdkResult<ImportServerCatalogOutput, ImportServerCatalogOutputError>) -> Void)
    /// <p>Launches the specified application as a stack in AWS CloudFormation.</p>
    func launchApp(input: LaunchAppInput, completion: @escaping (SdkResult<LaunchAppOutput, LaunchAppOutputError>) -> Void)
    /// <p>Retrieves summaries for all applications.</p>
    func listApps(input: ListAppsInput, completion: @escaping (SdkResult<ListAppsOutput, ListAppsOutputError>) -> Void)
    /// <p>Provides information to AWS SMS about whether application validation is successful.</p>
    func notifyAppValidationOutput(input: NotifyAppValidationOutputInput, completion: @escaping (SdkResult<NotifyAppValidationOutputOutput, NotifyAppValidationOutputOutputError>) -> Void)
    /// <p>Creates or updates the launch configuration for the specified application.</p>
    func putAppLaunchConfiguration(input: PutAppLaunchConfigurationInput, completion: @escaping (SdkResult<PutAppLaunchConfigurationOutput, PutAppLaunchConfigurationOutputError>) -> Void)
    /// <p>Creates or updates the replication configuration for the specified application.</p>
    func putAppReplicationConfiguration(input: PutAppReplicationConfigurationInput, completion: @escaping (SdkResult<PutAppReplicationConfigurationOutput, PutAppReplicationConfigurationOutputError>) -> Void)
    /// <p>Creates or updates a validation configuration for the specified application.</p>
    func putAppValidationConfiguration(input: PutAppValidationConfigurationInput, completion: @escaping (SdkResult<PutAppValidationConfigurationOutput, PutAppValidationConfigurationOutputError>) -> Void)
    /// <p>Starts replicating the specified application by creating replication jobs for each server in the
    ///             application.</p>
    func startAppReplication(input: StartAppReplicationInput, completion: @escaping (SdkResult<StartAppReplicationOutput, StartAppReplicationOutputError>) -> Void)
    /// <p>Starts an on-demand replication run for the specified application.</p>
    func startOnDemandAppReplication(input: StartOnDemandAppReplicationInput, completion: @escaping (SdkResult<StartOnDemandAppReplicationOutput, StartOnDemandAppReplicationOutputError>) -> Void)
    /// <p>Starts an on-demand replication run for the specified replication job. This
    ///             replication run starts immediately. This replication run is in addition to the ones
    ///             already scheduled.</p>
    ///         <p>There is a limit on the number of on-demand replications runs that you can request
    ///             in a 24-hour period.</p>
    func startOnDemandReplicationRun(input: StartOnDemandReplicationRunInput, completion: @escaping (SdkResult<StartOnDemandReplicationRunOutput, StartOnDemandReplicationRunOutputError>) -> Void)
    /// <p>Stops replicating the specified application by deleting the replication job for each server in
    ///             the application.</p>
    func stopAppReplication(input: StopAppReplicationInput, completion: @escaping (SdkResult<StopAppReplicationOutput, StopAppReplicationOutputError>) -> Void)
    /// <p>Terminates the stack for the specified application.</p>
    func terminateApp(input: TerminateAppInput, completion: @escaping (SdkResult<TerminateAppOutput, TerminateAppOutputError>) -> Void)
    /// <p>Updates the specified application.</p>
    func updateApp(input: UpdateAppInput, completion: @escaping (SdkResult<UpdateAppOutput, UpdateAppOutputError>) -> Void)
    /// <p>Updates the specified settings for the specified replication job.</p>
    func updateReplicationJob(input: UpdateReplicationJobInput, completion: @escaping (SdkResult<UpdateReplicationJobOutput, UpdateReplicationJobOutputError>) -> Void)
}
