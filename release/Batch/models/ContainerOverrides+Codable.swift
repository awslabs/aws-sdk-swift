// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ContainerOverrides: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case command
        case environment
        case instanceType
        case memory
        case resourceRequirements
        case vcpus
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let command = command {
            var commandContainer = encodeContainer.nestedUnkeyedContainer(forKey: .command)
            for stringlist0 in command {
                try commandContainer.encode(stringlist0)
            }
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environment)
            for environmentvariables0 in environment {
                try environmentContainer.encode(environmentvariables0)
            }
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if memory != 0 {
            try encodeContainer.encode(memory, forKey: .memory)
        }
        if let resourceRequirements = resourceRequirements {
            var resourceRequirementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceRequirements)
            for resourcerequirements0 in resourceRequirements {
                try resourceRequirementsContainer.encode(resourcerequirements0)
            }
        }
        if vcpus != 0 {
            try encodeContainer.encode(vcpus, forKey: .vcpus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vcpusDecoded = try containerValues.decode(Int.self, forKey: .vcpus)
        vcpus = vcpusDecoded
        let memoryDecoded = try containerValues.decode(Int.self, forKey: .memory)
        memory = memoryDecoded
        let commandContainer = try containerValues.decodeIfPresent([String].self, forKey: .command)
        var commandDecoded0:[String]? = nil
        if let commandContainer = commandContainer {
            commandDecoded0 = [String]()
            for string0 in commandContainer {
                commandDecoded0?.append(string0)
            }
        }
        command = commandDecoded0
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let environmentContainer = try containerValues.decodeIfPresent([KeyValuePair].self, forKey: .environment)
        var environmentDecoded0:[KeyValuePair]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [KeyValuePair]()
            for structure0 in environmentContainer {
                environmentDecoded0?.append(structure0)
            }
        }
        environment = environmentDecoded0
        let resourceRequirementsContainer = try containerValues.decodeIfPresent([ResourceRequirement].self, forKey: .resourceRequirements)
        var resourceRequirementsDecoded0:[ResourceRequirement]? = nil
        if let resourceRequirementsContainer = resourceRequirementsContainer {
            resourceRequirementsDecoded0 = [ResourceRequirement]()
            for structure0 in resourceRequirementsContainer {
                resourceRequirementsDecoded0?.append(structure0)
            }
        }
        resourceRequirements = resourceRequirementsDecoded0
    }
}
