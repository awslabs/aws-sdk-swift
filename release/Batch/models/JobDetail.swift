// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>An object representing an AWS Batch job.</p>
public struct JobDetail: Equatable {
    /// <p>The array properties of the job, if it is an array job.</p>
    public let arrayProperties: ArrayPropertiesDetail?
    /// <p>A list of job attempts associated with this job.</p>
    public let attempts: [AttemptDetail]?
    /// <p>An object representing the details of the container that's associated with the job.</p>
    public let container: ContainerDetail?
    /// <p>The Unix timestamp (in milliseconds) for when the job was created. For non-array jobs and parent array jobs,
    ///    this is when the job entered the <code>SUBMITTED</code> state (at the time <a>SubmitJob</a> was called).
    ///    For array child jobs, this is when the child job was spawned by its parent and entered the <code>PENDING</code>
    ///    state.</p>
    public let createdAt: Int
    /// <p>A list of job IDs that this job depends on.</p>
    public let dependsOn: [JobDependency]?
    /// <p>The Amazon Resource Name (ARN) of the job.</p>
    public let jobArn: String?
    /// <p>The job definition that's used by this job.</p>
    public let jobDefinition: String?
    /// <p>The ID for the job.</p>
    public let jobId: String?
    /// <p>The name of the job.</p>
    public let jobName: String?
    /// <p>The Amazon Resource Name (ARN) of the job queue that the job is associated with.</p>
    public let jobQueue: String?
    /// <p>An object representing the details of a node that's associated with a multi-node parallel job.</p>
    public let nodeDetails: NodeDetails?
    /// <p>An object representing the node properties of a multi-node parallel job.</p>
    ///          <note>
    ///             <p>This isn't applicable to jobs running on Fargate resources.</p>
    ///          </note>
    public let nodeProperties: NodeProperties?
    /// <p>Additional parameters passed to the job that replace parameter substitution placeholders or override any
    ///    corresponding parameter defaults from the job definition.</p>
    public let parameters: [String:String]?
    /// <p>The platform capabilities required by the job definition. If no value is specified, it defaults to
    ///     <code>EC2</code>. Jobs run on Fargate resources specify <code>FARGATE</code>.</p>
    public let platformCapabilities: [PlatformCapability]?
    /// <p>Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no
    ///    value is specified, the tags aren't propagated. Tags can only be propagated to the tasks during task creation. For
    ///    tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags
    ///    from the job and job definition is over 50, the job is moved to the <code>FAILED</code> state.</p>
    public let propagateTags: Bool
    /// <p>The retry strategy to use for this job if an attempt fails.</p>
    public let retryStrategy: RetryStrategy?
    /// <p>The Unix timestamp (in milliseconds) for when the job was started (when the job transitioned from the
    ///     <code>STARTING</code> state to the <code>RUNNING</code> state). This parameter isn't provided for child jobs of
    ///    array jobs or multi-node parallel jobs.</p>
    public let startedAt: Int
    /// <p>The current status for the job.</p>
    ///          <note>
    ///             <p>If your jobs don't progress to <code>STARTING</code>, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#job_stuck_in_runnable">Jobs Stuck in RUNNABLE Status</a> in the
    ///     troubleshooting section of the <i>AWS Batch User Guide</i>.</p>
    ///          </note>
    public let status: JobStatus?
    /// <p>A short, human-readable string to provide additional details about the current status of the job.</p>
    public let statusReason: String?
    /// <p>The Unix timestamp (in milliseconds) for when the job was stopped (when the job transitioned from the
    ///     <code>RUNNING</code> state to a terminal state, such as <code>SUCCEEDED</code> or <code>FAILED</code>).</p>
    public let stoppedAt: Int
    /// <p>The tags applied to the job.</p>
    public let tags: [String:String]?
    /// <p>The timeout configuration for the job.</p>
    public let timeout: JobTimeout?

    public init (
        arrayProperties: ArrayPropertiesDetail? = nil,
        attempts: [AttemptDetail]? = nil,
        container: ContainerDetail? = nil,
        createdAt: Int = 0,
        dependsOn: [JobDependency]? = nil,
        jobArn: String? = nil,
        jobDefinition: String? = nil,
        jobId: String? = nil,
        jobName: String? = nil,
        jobQueue: String? = nil,
        nodeDetails: NodeDetails? = nil,
        nodeProperties: NodeProperties? = nil,
        parameters: [String:String]? = nil,
        platformCapabilities: [PlatformCapability]? = nil,
        propagateTags: Bool = false,
        retryStrategy: RetryStrategy? = nil,
        startedAt: Int = 0,
        status: JobStatus? = nil,
        statusReason: String? = nil,
        stoppedAt: Int = 0,
        tags: [String:String]? = nil,
        timeout: JobTimeout? = nil
    )
    {
        self.arrayProperties = arrayProperties
        self.attempts = attempts
        self.container = container
        self.createdAt = createdAt
        self.dependsOn = dependsOn
        self.jobArn = jobArn
        self.jobDefinition = jobDefinition
        self.jobId = jobId
        self.jobName = jobName
        self.jobQueue = jobQueue
        self.nodeDetails = nodeDetails
        self.nodeProperties = nodeProperties
        self.parameters = parameters
        self.platformCapabilities = platformCapabilities
        self.propagateTags = propagateTags
        self.retryStrategy = retryStrategy
        self.startedAt = startedAt
        self.status = status
        self.statusReason = statusReason
        self.stoppedAt = stoppedAt
        self.tags = tags
        self.timeout = timeout
    }
}
