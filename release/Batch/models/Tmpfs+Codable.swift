// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Tmpfs: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case containerPath
        case mountOptions
        case size
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerPath = containerPath {
            try encodeContainer.encode(containerPath, forKey: .containerPath)
        }
        if let mountOptions = mountOptions {
            var mountOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mountOptions)
            for stringlist0 in mountOptions {
                try mountOptionsContainer.encode(stringlist0)
            }
        }
        if size != 0 {
            try encodeContainer.encode(size, forKey: .size)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .containerPath)
        containerPath = containerPathDecoded
        let sizeDecoded = try containerValues.decode(Int.self, forKey: .size)
        size = sizeDecoded
        let mountOptionsContainer = try containerValues.decodeIfPresent([String].self, forKey: .mountOptions)
        var mountOptionsDecoded0:[String]? = nil
        if let mountOptionsContainer = mountOptionsContainer {
            mountOptionsDecoded0 = [String]()
            for string0 in mountOptionsContainer {
                mountOptionsDecoded0?.append(string0)
            }
        }
        mountOptions = mountOptionsDecoded0
    }
}
