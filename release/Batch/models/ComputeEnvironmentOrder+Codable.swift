// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ComputeEnvironmentOrder: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case computeEnvironment
        case order
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeEnvironment = computeEnvironment {
            try encodeContainer.encode(computeEnvironment, forKey: .computeEnvironment)
        }
        if order != 0 {
            try encodeContainer.encode(order, forKey: .order)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let orderDecoded = try containerValues.decode(Int.self, forKey: .order)
        order = orderDecoded
        let computeEnvironmentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .computeEnvironment)
        computeEnvironment = computeEnvironmentDecoded
    }
}
