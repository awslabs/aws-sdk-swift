// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SubmitJobInputBody: Equatable {
    public let jobName: String?
    public let jobQueue: String?
    public let arrayProperties: ArrayProperties?
    public let dependsOn: [JobDependency]?
    public let jobDefinition: String?
    public let parameters: [String:String]?
    public let containerOverrides: ContainerOverrides?
    public let nodeOverrides: NodeOverrides?
    public let retryStrategy: RetryStrategy?
    public let propagateTags: Bool
    public let timeout: JobTimeout?
    public let tags: [String:String]?
}

extension SubmitJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arrayProperties
        case containerOverrides
        case dependsOn
        case jobDefinition
        case jobName
        case jobQueue
        case nodeOverrides
        case parameters
        case propagateTags
        case retryStrategy
        case tags
        case timeout
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobQueueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobQueue)
        jobQueue = jobQueueDecoded
        let arrayPropertiesDecoded = try containerValues.decodeIfPresent(ArrayProperties.self, forKey: .arrayProperties)
        arrayProperties = arrayPropertiesDecoded
        let dependsOnContainer = try containerValues.decodeIfPresent([JobDependency].self, forKey: .dependsOn)
        var dependsOnDecoded0:[JobDependency]? = nil
        if let dependsOnContainer = dependsOnContainer {
            dependsOnDecoded0 = [JobDependency]()
            for structure0 in dependsOnContainer {
                dependsOnDecoded0?.append(structure0)
            }
        }
        dependsOn = dependsOnDecoded0
        let jobDefinitionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobDefinition)
        jobDefinition = jobDefinitionDecoded
        let parametersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .parameters)
        var parametersDecoded0: [String:String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [String:String]()
            for (key0, string0) in parametersContainer {
                parametersDecoded0?[key0] = string0
            }
        }
        parameters = parametersDecoded0
        let containerOverridesDecoded = try containerValues.decodeIfPresent(ContainerOverrides.self, forKey: .containerOverrides)
        containerOverrides = containerOverridesDecoded
        let nodeOverridesDecoded = try containerValues.decodeIfPresent(NodeOverrides.self, forKey: .nodeOverrides)
        nodeOverrides = nodeOverridesDecoded
        let retryStrategyDecoded = try containerValues.decodeIfPresent(RetryStrategy.self, forKey: .retryStrategy)
        retryStrategy = retryStrategyDecoded
        let propagateTagsDecoded = try containerValues.decode(Bool.self, forKey: .propagateTags)
        propagateTags = propagateTagsDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(JobTimeout.self, forKey: .timeout)
        timeout = timeoutDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
