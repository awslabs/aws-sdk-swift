// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NodeOverrides: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case nodePropertyOverrides
        case numNodes
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nodePropertyOverrides = nodePropertyOverrides {
            var nodePropertyOverridesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nodePropertyOverrides)
            for nodepropertyoverrides0 in nodePropertyOverrides {
                try nodePropertyOverridesContainer.encode(nodepropertyoverrides0)
            }
        }
        if numNodes != 0 {
            try encodeContainer.encode(numNodes, forKey: .numNodes)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numNodesDecoded = try containerValues.decode(Int.self, forKey: .numNodes)
        numNodes = numNodesDecoded
        let nodePropertyOverridesContainer = try containerValues.decodeIfPresent([NodePropertyOverride].self, forKey: .nodePropertyOverrides)
        var nodePropertyOverridesDecoded0:[NodePropertyOverride]? = nil
        if let nodePropertyOverridesContainer = nodePropertyOverridesContainer {
            nodePropertyOverridesDecoded0 = [NodePropertyOverride]()
            for structure0 in nodePropertyOverridesContainer {
                nodePropertyOverridesDecoded0?.append(structure0)
            }
        }
        nodePropertyOverrides = nodePropertyOverridesDecoded0
    }
}
