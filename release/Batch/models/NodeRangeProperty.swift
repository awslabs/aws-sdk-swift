// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>An object representing the properties of the node range for a multi-node parallel job.</p>
public struct NodeRangeProperty: Equatable {
    /// <p>The container details for the node range.</p>
    public let container: ContainerProperties?
    /// <p>The range of nodes, using node index values. A range of <code>0:3</code> indicates nodes with index values of
    ///     <code>0</code> through <code>3</code>. If the starting range value is omitted (<code>:n</code>), then <code>0</code>
    ///    is used to start the range. If the ending range value is omitted (<code>n:</code>), then the highest possible node
    ///    index is used to end the range. Your accumulative node ranges must account for all nodes (<code>0:n</code>). You can
    ///    nest node ranges, for example <code>0:10</code> and <code>4:5</code>, in which case the <code>4:5</code> range
    ///    properties override the <code>0:10</code> properties.</p>
    public let targetNodes: String?

    public init (
        container: ContainerProperties? = nil,
        targetNodes: String? = nil
    )
    {
        self.container = container
        self.targetNodes = targetNodes
    }
}
