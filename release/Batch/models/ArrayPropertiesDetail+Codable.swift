// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ArrayPropertiesDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case index
        case size
        case statusSummary
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if index != 0 {
            try encodeContainer.encode(index, forKey: .index)
        }
        if size != 0 {
            try encodeContainer.encode(size, forKey: .size)
        }
        if let statusSummary = statusSummary {
            var statusSummaryContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .statusSummary)
            for (dictKey0, arrayjobstatussummary0) in statusSummary {
                try statusSummaryContainer.encode(arrayjobstatussummary0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusSummaryContainer = try containerValues.decodeIfPresent([String:Int].self, forKey: .statusSummary)
        var statusSummaryDecoded0: [String:Int]? = nil
        if let statusSummaryContainer = statusSummaryContainer {
            statusSummaryDecoded0 = [String:Int]()
            for (key0, integer0) in statusSummaryContainer {
                statusSummaryDecoded0?[key0] = integer0
            }
        }
        statusSummary = statusSummaryDecoded0
        let sizeDecoded = try containerValues.decode(Int.self, forKey: .size)
        size = sizeDecoded
        let indexDecoded = try containerValues.decode(Int.self, forKey: .index)
        index = indexDecoded
    }
}
