// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EvaluateOnExit: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case action
        case onExitCode
        case onReason
        case onStatusReason
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let onExitCode = onExitCode {
            try encodeContainer.encode(onExitCode, forKey: .onExitCode)
        }
        if let onReason = onReason {
            try encodeContainer.encode(onReason, forKey: .onReason)
        }
        if let onStatusReason = onStatusReason {
            try encodeContainer.encode(onStatusReason, forKey: .onStatusReason)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let onStatusReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .onStatusReason)
        onStatusReason = onStatusReasonDecoded
        let onReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .onReason)
        onReason = onReasonDecoded
        let onExitCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .onExitCode)
        onExitCode = onExitCodeDecoded
        let actionDecoded = try containerValues.decodeIfPresent(RetryAction.self, forKey: .action)
        action = actionDecoded
    }
}
