// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Contains the parameters for <code>CreateJobQueue</code>.</p>
public struct CreateJobQueueInput: Equatable {
    /// <p>The set of compute environments mapped to a job queue and their order relative to each other. The job scheduler
    ///    uses this parameter to determine which compute environment should run a specific job. Compute environments must be in
    ///    the <code>VALID</code> state before you can associate them with a job queue. You can associate up to three compute
    ///    environments with a job queue. All of the compute environments must be either EC2 (<code>EC2</code> or
    ///     <code>SPOT</code>) or Fargate (<code>FARGATE</code> or <code>FARGATE_SPOT</code>); EC2 and Fargate compute
    ///    environments can't be mixed.</p>
    ///          <note>
    ///             <p>All compute environments that are associated with a job queue must share the same architecture. AWS Batch doesn't
    ///     support mixing compute environment architecture types in a single job queue.</p>
    ///          </note>
    public let computeEnvironmentOrder: [ComputeEnvironmentOrder]?
    /// <p>The name of the job queue. Up to 128 letters (uppercase and lowercase), numbers, and underscores are
    ///    allowed.</p>
    public let jobQueueName: String?
    /// <p>The priority of the job queue. Job queues with a higher priority (or a higher integer value for the
    ///     <code>priority</code> parameter) are evaluated first when associated with the same compute environment. Priority is
    ///    determined in descending order. For example, a job queue with a priority value of <code>10</code> is given scheduling
    ///    preference over a job queue with a priority value of <code>1</code>. All of the compute environments must be either
    ///    EC2 (<code>EC2</code> or <code>SPOT</code>) or Fargate (<code>FARGATE</code> or <code>FARGATE_SPOT</code>); EC2 and
    ///    Fargate compute environments cannot be mixed.</p>
    public let priority: Int
    /// <p>The state of the job queue. If the job queue state is <code>ENABLED</code>, it is able to accept jobs. If the
    ///    job queue state is <code>DISABLED</code>, new jobs can't be added to the queue, but jobs already in the queue can
    ///    finish.</p>
    public let state: JQState?
    /// <p>The tags that you apply to the job queue to help you categorize and organize your resources. Each tag consists
    ///    of a key and an optional value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html">Tagging your AWS Batch resources</a> in <i>AWS Batch User Guide</i>.</p>
    public let tags: [String:String]?

    public init (
        computeEnvironmentOrder: [ComputeEnvironmentOrder]? = nil,
        jobQueueName: String? = nil,
        priority: Int = 0,
        state: JQState? = nil,
        tags: [String:String]? = nil
    )
    {
        self.computeEnvironmentOrder = computeEnvironmentOrder
        self.jobQueueName = jobQueueName
        self.priority = priority
        self.state = state
        self.tags = tags
    }
}
