// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateComputeEnvironmentInputBody: Equatable {
    public let computeEnvironmentName: String?
    public let type: CEType?
    public let state: CEState?
    public let computeResources: ComputeResource?
    public let serviceRole: String?
    public let tags: [String:String]?
}

extension CreateComputeEnvironmentInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case computeEnvironmentName
        case computeResources
        case serviceRole
        case state
        case tags
        case type
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeEnvironmentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .computeEnvironmentName)
        computeEnvironmentName = computeEnvironmentNameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CEType.self, forKey: .type)
        type = typeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(CEState.self, forKey: .state)
        state = stateDecoded
        let computeResourcesDecoded = try containerValues.decodeIfPresent(ComputeResource.self, forKey: .computeResources)
        computeResources = computeResourcesDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
