// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateJobQueueInputBody: Equatable {
    public let jobQueue: String?
    public let state: JQState?
    public let priority: Int
    public let computeEnvironmentOrder: [ComputeEnvironmentOrder]?
}

extension UpdateJobQueueInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case computeEnvironmentOrder
        case jobQueue
        case priority
        case state
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobQueueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobQueue)
        jobQueue = jobQueueDecoded
        let stateDecoded = try containerValues.decodeIfPresent(JQState.self, forKey: .state)
        state = stateDecoded
        let priorityDecoded = try containerValues.decode(Int.self, forKey: .priority)
        priority = priorityDecoded
        let computeEnvironmentOrderContainer = try containerValues.decodeIfPresent([ComputeEnvironmentOrder].self, forKey: .computeEnvironmentOrder)
        var computeEnvironmentOrderDecoded0:[ComputeEnvironmentOrder]? = nil
        if let computeEnvironmentOrderContainer = computeEnvironmentOrderContainer {
            computeEnvironmentOrderDecoded0 = [ComputeEnvironmentOrder]()
            for structure0 in computeEnvironmentOrderContainer {
                computeEnvironmentOrderDecoded0?.append(structure0)
            }
        }
        computeEnvironmentOrder = computeEnvironmentOrderDecoded0
    }
}
