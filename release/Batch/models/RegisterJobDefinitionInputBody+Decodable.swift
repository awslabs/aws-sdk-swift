// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RegisterJobDefinitionInputBody: Equatable {
    public let jobDefinitionName: String?
    public let type: JobDefinitionType?
    public let parameters: [String:String]?
    public let containerProperties: ContainerProperties?
    public let nodeProperties: NodeProperties?
    public let retryStrategy: RetryStrategy?
    public let propagateTags: Bool
    public let timeout: JobTimeout?
    public let tags: [String:String]?
    public let platformCapabilities: [PlatformCapability]?
}

extension RegisterJobDefinitionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case containerProperties
        case jobDefinitionName
        case nodeProperties
        case parameters
        case platformCapabilities
        case propagateTags
        case retryStrategy
        case tags
        case timeout
        case type
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(JobDefinitionType.self, forKey: .type)
        type = typeDecoded
        let parametersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .parameters)
        var parametersDecoded0: [String:String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [String:String]()
            for (key0, string0) in parametersContainer {
                parametersDecoded0?[key0] = string0
            }
        }
        parameters = parametersDecoded0
        let containerPropertiesDecoded = try containerValues.decodeIfPresent(ContainerProperties.self, forKey: .containerProperties)
        containerProperties = containerPropertiesDecoded
        let nodePropertiesDecoded = try containerValues.decodeIfPresent(NodeProperties.self, forKey: .nodeProperties)
        nodeProperties = nodePropertiesDecoded
        let retryStrategyDecoded = try containerValues.decodeIfPresent(RetryStrategy.self, forKey: .retryStrategy)
        retryStrategy = retryStrategyDecoded
        let propagateTagsDecoded = try containerValues.decode(Bool.self, forKey: .propagateTags)
        propagateTags = propagateTagsDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(JobTimeout.self, forKey: .timeout)
        timeout = timeoutDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let platformCapabilitiesContainer = try containerValues.decodeIfPresent([PlatformCapability].self, forKey: .platformCapabilities)
        var platformCapabilitiesDecoded0:[PlatformCapability]? = nil
        if let platformCapabilitiesContainer = platformCapabilitiesContainer {
            platformCapabilitiesDecoded0 = [PlatformCapability]()
            for string0 in platformCapabilitiesContainer {
                platformCapabilitiesDecoded0?.append(string0)
            }
        }
        platformCapabilities = platformCapabilitiesDecoded0
    }
}
