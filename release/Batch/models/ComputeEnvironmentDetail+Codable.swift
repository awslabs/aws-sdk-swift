// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ComputeEnvironmentDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case computeEnvironmentArn
        case computeEnvironmentName
        case computeResources
        case ecsClusterArn
        case serviceRole
        case state
        case status
        case statusReason
        case tags
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeEnvironmentArn = computeEnvironmentArn {
            try encodeContainer.encode(computeEnvironmentArn, forKey: .computeEnvironmentArn)
        }
        if let computeEnvironmentName = computeEnvironmentName {
            try encodeContainer.encode(computeEnvironmentName, forKey: .computeEnvironmentName)
        }
        if let computeResources = computeResources {
            try encodeContainer.encode(computeResources, forKey: .computeResources)
        }
        if let ecsClusterArn = ecsClusterArn {
            try encodeContainer.encode(ecsClusterArn, forKey: .ecsClusterArn)
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagristagsmap0) in tags {
                try tagsContainer.encode(tagristagsmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeEnvironmentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .computeEnvironmentName)
        computeEnvironmentName = computeEnvironmentNameDecoded
        let computeEnvironmentArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .computeEnvironmentArn)
        computeEnvironmentArn = computeEnvironmentArnDecoded
        let ecsClusterArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ecsClusterArn)
        ecsClusterArn = ecsClusterArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let typeDecoded = try containerValues.decodeIfPresent(CEType.self, forKey: .type)
        type = typeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(CEState.self, forKey: .state)
        state = stateDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CEStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let computeResourcesDecoded = try containerValues.decodeIfPresent(ComputeResource.self, forKey: .computeResources)
        computeResources = computeResourcesDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
    }
}
