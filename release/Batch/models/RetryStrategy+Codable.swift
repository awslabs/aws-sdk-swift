// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RetryStrategy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attempts
        case evaluateOnExit
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if attempts != 0 {
            try encodeContainer.encode(attempts, forKey: .attempts)
        }
        if let evaluateOnExit = evaluateOnExit {
            var evaluateOnExitContainer = encodeContainer.nestedUnkeyedContainer(forKey: .evaluateOnExit)
            for evaluateonexitlist0 in evaluateOnExit {
                try evaluateOnExitContainer.encode(evaluateonexitlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attemptsDecoded = try containerValues.decode(Int.self, forKey: .attempts)
        attempts = attemptsDecoded
        let evaluateOnExitContainer = try containerValues.decodeIfPresent([EvaluateOnExit].self, forKey: .evaluateOnExit)
        var evaluateOnExitDecoded0:[EvaluateOnExit]? = nil
        if let evaluateOnExitContainer = evaluateOnExitContainer {
            evaluateOnExitDecoded0 = [EvaluateOnExit]()
            for structure0 in evaluateOnExitContainer {
                evaluateOnExitDecoded0?.append(structure0)
            }
        }
        evaluateOnExit = evaluateOnExitDecoded0
    }
}
