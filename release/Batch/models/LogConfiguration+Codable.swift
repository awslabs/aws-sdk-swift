// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LogConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case logDriver
        case options
        case secretOptions
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logDriver = logDriver {
            try encodeContainer.encode(logDriver.rawValue, forKey: .logDriver)
        }
        if let options = options {
            var optionsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .options)
            for (dictKey0, logconfigurationoptionsmap0) in options {
                try optionsContainer.encode(logconfigurationoptionsmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let secretOptions = secretOptions {
            var secretOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secretOptions)
            for secretlist0 in secretOptions {
                try secretOptionsContainer.encode(secretlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logDriverDecoded = try containerValues.decodeIfPresent(LogDriver.self, forKey: .logDriver)
        logDriver = logDriverDecoded
        let optionsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .options)
        var optionsDecoded0: [String:String]? = nil
        if let optionsContainer = optionsContainer {
            optionsDecoded0 = [String:String]()
            for (key0, string0) in optionsContainer {
                optionsDecoded0?[key0] = string0
            }
        }
        options = optionsDecoded0
        let secretOptionsContainer = try containerValues.decodeIfPresent([Secret].self, forKey: .secretOptions)
        var secretOptionsDecoded0:[Secret]? = nil
        if let secretOptionsContainer = secretOptionsContainer {
            secretOptionsDecoded0 = [Secret]()
            for structure0 in secretOptionsContainer {
                secretOptionsDecoded0?.append(structure0)
            }
        }
        secretOptions = secretOptionsDecoded0
    }
}
