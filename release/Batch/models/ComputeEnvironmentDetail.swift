// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>An object representing an AWS Batch compute environment.</p>
public struct ComputeEnvironmentDetail: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the compute environment.</p>
    public let computeEnvironmentArn: String?
    /// <p>The name of the compute environment. Up to 128 letters (uppercase and lowercase), numbers, hyphens, and
    ///  underscores are allowed.</p>
    public let computeEnvironmentName: String?
    /// <p>The compute resources defined for the compute environment. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html">Compute Environments</a> in the
    ///    <i>AWS Batch User Guide</i>.</p>
    public let computeResources: ComputeResource?
    /// <p>The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster used by the compute environment.</p>
    public let ecsClusterArn: String?
    /// <p>The service role associated with the compute environment that allows AWS Batch to make calls to AWS API
    ///    operations on your behalf. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/service_IAM_role.html">AWS Batch service IAM role</a> in the
    ///    <i>AWS Batch User Guide</i>.</p>
    public let serviceRole: String?
    /// <p>The state of the compute environment. The valid values are <code>ENABLED</code> or <code>DISABLED</code>.</p>
    ///          <p>If the state is <code>ENABLED</code>, then the AWS Batch scheduler can attempt to place jobs from an associated
    ///    job queue on the compute resources within the environment. If the compute environment is managed, then it can scale
    ///    its instances out or in automatically, based on the job queue demand.</p>
    ///          <p>If the state is <code>DISABLED</code>, then the AWS Batch scheduler doesn't attempt to place jobs within the
    ///    environment. Jobs in a <code>STARTING</code> or <code>RUNNING</code> state continue to progress normally. Managed
    ///    compute environments in the <code>DISABLED</code> state don't scale out. However, they scale in to
    ///     <code>minvCpus</code> value after instances become idle.</p>
    public let state: CEState?
    /// <p>The current status of the compute environment (for example, <code>CREATING</code> or <code>VALID</code>).</p>
    public let status: CEStatus?
    /// <p>A short, human-readable string to provide additional details about the current status of the compute
    ///    environment.</p>
    public let statusReason: String?
    /// <p>The tags applied to the compute environment.</p>
    public let tags: [String:String]?
    /// <p>The type of the compute environment: <code>MANAGED</code> or <code>UNMANAGED</code>. For more information, see
    ///     <a href="https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html">Compute Environments</a> in the
    ///     <i>AWS Batch User Guide</i>.</p>
    public let type: CEType?

    public init (
        computeEnvironmentArn: String? = nil,
        computeEnvironmentName: String? = nil,
        computeResources: ComputeResource? = nil,
        ecsClusterArn: String? = nil,
        serviceRole: String? = nil,
        state: CEState? = nil,
        status: CEStatus? = nil,
        statusReason: String? = nil,
        tags: [String:String]? = nil,
        type: CEType? = nil
    )
    {
        self.computeEnvironmentArn = computeEnvironmentArn
        self.computeEnvironmentName = computeEnvironmentName
        self.computeResources = computeResources
        self.ecsClusterArn = ecsClusterArn
        self.serviceRole = serviceRole
        self.state = state
        self.status = status
        self.statusReason = statusReason
        self.tags = tags
        self.type = type
    }
}
