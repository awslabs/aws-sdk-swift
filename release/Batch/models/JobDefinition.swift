// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>An object representing an AWS Batch job definition.</p>
public struct JobDefinition: Equatable {
    /// <p>An object with various properties specific to container-based jobs.</p>
    public let containerProperties: ContainerProperties?
    /// <p>The Amazon Resource Name (ARN) for the job definition.</p>
    public let jobDefinitionArn: String?
    /// <p>The name of the job definition.</p>
    public let jobDefinitionName: String?
    /// <p>An object with various properties specific to multi-node parallel jobs.</p>
    ///          <note>
    ///             <p>If the job runs on Fargate resources, then you must not specify <code>nodeProperties</code>; use
    ///      <code>containerProperties</code> instead.</p>
    ///          </note>
    public let nodeProperties: NodeProperties?
    /// <p>Default parameters or parameter substitution placeholders that are set in the job definition. Parameters are
    ///    specified as a key-value pair mapping. Parameters in a <code>SubmitJob</code> request override any corresponding
    ///    parameter defaults from the job definition. For more information about specifying parameters, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html">Job Definition Parameters</a> in the
    ///     <i>AWS Batch User Guide</i>.</p>
    public let parameters: [String:String]?
    /// <p>The platform capabilities required by the job definition. If no value is specified, it defaults to
    ///     <code>EC2</code>. Jobs run on Fargate resources specify <code>FARGATE</code>.</p>
    public let platformCapabilities: [PlatformCapability]?
    /// <p>Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no
    ///    value is specified, the tags aren't propagated. Tags can only be propagated to the tasks during task creation. For
    ///    tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags
    ///    from the job and job definition is over 50, the job is moved to the <code>FAILED</code> state.</p>
    public let propagateTags: Bool
    /// <p>The retry strategy to use for failed jobs that are submitted with this job definition.</p>
    public let retryStrategy: RetryStrategy?
    /// <p>The revision of the job definition.</p>
    public let revision: Int
    /// <p>The status of the job definition.</p>
    public let status: String?
    /// <p>The tags applied to the job definition.</p>
    public let tags: [String:String]?
    /// <p>The timeout configuration for jobs that are submitted with this job definition. You can specify a timeout
    ///    duration after which AWS Batch terminates your jobs if they haven't finished.</p>
    public let timeout: JobTimeout?
    /// <p>The type of job definition. If the job is run on Fargate resources, then <code>multinode</code> isn't
    ///    supported. For more information about multi-node parallel jobs, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html">Creating a multi-node parallel job definition</a> in the
    ///     <i>AWS Batch User Guide</i>.</p>
    public let type: String?

    public init (
        containerProperties: ContainerProperties? = nil,
        jobDefinitionArn: String? = nil,
        jobDefinitionName: String? = nil,
        nodeProperties: NodeProperties? = nil,
        parameters: [String:String]? = nil,
        platformCapabilities: [PlatformCapability]? = nil,
        propagateTags: Bool = false,
        retryStrategy: RetryStrategy? = nil,
        revision: Int = 0,
        status: String? = nil,
        tags: [String:String]? = nil,
        timeout: JobTimeout? = nil,
        type: String? = nil
    )
    {
        self.containerProperties = containerProperties
        self.jobDefinitionArn = jobDefinitionArn
        self.jobDefinitionName = jobDefinitionName
        self.nodeProperties = nodeProperties
        self.parameters = parameters
        self.platformCapabilities = platformCapabilities
        self.propagateTags = propagateTags
        self.retryStrategy = retryStrategy
        self.revision = revision
        self.status = status
        self.tags = tags
        self.timeout = timeout
        self.type = type
    }
}
