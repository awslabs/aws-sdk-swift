// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateJobQueueInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case computeEnvironmentOrder
        case jobQueueName
        case priority
        case state
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeEnvironmentOrder = computeEnvironmentOrder {
            var computeEnvironmentOrderContainer = encodeContainer.nestedUnkeyedContainer(forKey: .computeEnvironmentOrder)
            for computeenvironmentorders0 in computeEnvironmentOrder {
                try computeEnvironmentOrderContainer.encode(computeenvironmentorders0)
            }
        }
        if let jobQueueName = jobQueueName {
            try encodeContainer.encode(jobQueueName, forKey: .jobQueueName)
        }
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagristagsmap0) in tags {
                try tagsContainer.encode(tagristagsmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}
