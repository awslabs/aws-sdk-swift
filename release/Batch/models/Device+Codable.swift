// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Device: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case containerPath
        case hostPath
        case permissions
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerPath = containerPath {
            try encodeContainer.encode(containerPath, forKey: .containerPath)
        }
        if let hostPath = hostPath {
            try encodeContainer.encode(hostPath, forKey: .hostPath)
        }
        if let permissions = permissions {
            var permissionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .permissions)
            for devicecgrouppermissions0 in permissions {
                try permissionsContainer.encode(devicecgrouppermissions0.rawValue)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hostPath)
        hostPath = hostPathDecoded
        let containerPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .containerPath)
        containerPath = containerPathDecoded
        let permissionsContainer = try containerValues.decodeIfPresent([DeviceCgroupPermission].self, forKey: .permissions)
        var permissionsDecoded0:[DeviceCgroupPermission]? = nil
        if let permissionsContainer = permissionsContainer {
            permissionsDecoded0 = [DeviceCgroupPermission]()
            for string0 in permissionsContainer {
                permissionsDecoded0?.append(string0)
            }
        }
        permissions = permissionsDecoded0
    }
}
