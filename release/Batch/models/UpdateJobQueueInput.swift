// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Contains the parameters for <code>UpdateJobQueue</code>.</p>
public struct UpdateJobQueueInput: Equatable {
    /// <p>Details the set of compute environments mapped to a job queue and their order relative to each other. This is
    ///    one of the parameters used by the job scheduler to determine which compute environment should run a given job.
    ///    Compute environments must be in the <code>VALID</code> state before you can associate them with a job queue. All of
    ///    the compute environments must be either EC2 (<code>EC2</code> or <code>SPOT</code>) or Fargate
    ///     (<code>FARGATE</code> or <code>FARGATE_SPOT</code>). EC2 and Fargate compute environments can't be mixed.</p>
    ///          <note>
    ///             <p>All compute environments that are associated with a job queue must share the same architecture. AWS Batch doesn't
    ///     support mixing compute environment architecture types in a single job queue.</p>
    ///          </note>
    public let computeEnvironmentOrder: [ComputeEnvironmentOrder]?
    /// <p>The name or the Amazon Resource Name (ARN) of the job queue.</p>
    public let jobQueue: String?
    /// <p>The priority of the job queue. Job queues with a higher priority (or a higher integer value for the
    ///     <code>priority</code> parameter) are evaluated first when associated with the same compute environment. Priority is
    ///    determined in descending order, for example, a job queue with a priority value of <code>10</code> is given scheduling
    ///    preference over a job queue with a priority value of <code>1</code>. All of the compute environments must be either
    ///    EC2 (<code>EC2</code> or <code>SPOT</code>) or Fargate (<code>FARGATE</code> or <code>FARGATE_SPOT</code>). EC2 and
    ///    Fargate compute environments can't be mixed.</p>
    public let priority: Int
    /// <p>Describes the queue's ability to accept new jobs. If the job queue state is <code>ENABLED</code>, it can accept
    ///    jobs. If the job queue state is <code>DISABLED</code>, new jobs can't be added to the queue, but jobs already in the
    ///    queue can finish.</p>
    public let state: JQState?

    public init (
        computeEnvironmentOrder: [ComputeEnvironmentOrder]? = nil,
        jobQueue: String? = nil,
        priority: Int = 0,
        state: JQState? = nil
    )
    {
        self.computeEnvironmentOrder = computeEnvironmentOrder
        self.jobQueue = jobQueue
        self.priority = priority
        self.state = state
    }
}
