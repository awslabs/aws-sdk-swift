// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Contains the parameters for <code>SubmitJob</code>.</p>
public struct SubmitJobInput: Equatable {
    /// <p>The array properties for the submitted job, such as the size of the array. The array size can be between 2 and
    ///    10,000. If you specify array properties for a job, it becomes an array job. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/array_jobs.html">Array Jobs</a> in the
    ///    <i>AWS Batch User Guide</i>.</p>
    public let arrayProperties: ArrayProperties?
    /// <p>A list of container overrides in the JSON format that specify the name of a container in the specified job
    ///    definition and the overrides it should receive. You can override the default command for a container, which is
    ///    specified in the job definition or the Docker image, with a <code>command</code> override. You can also override
    ///    existing environment variables on a container or add new environment variables to it with an <code>environment</code>
    ///    override.</p>
    public let containerOverrides: ContainerOverrides?
    /// <p>A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a
    ///     <code>SEQUENTIAL</code> type dependency without specifying a job ID for array jobs so that each child array job
    ///    completes sequentially, starting at index 0. You can also specify an <code>N_TO_N</code> type dependency with a job
    ///    ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each
    ///    dependency to complete before it can begin.</p>
    public let dependsOn: [JobDependency]?
    /// <p>The job definition used by this job. This value can be one of <code>name</code>, <code>name:revision</code>, or
    ///    the Amazon Resource Name (ARN) for the job definition. If <code>name</code> is specified without a revision then the latest active
    ///    revision is used.</p>
    public let jobDefinition: String?
    /// <p>The name of the job. The first character must be alphanumeric, and up to 128 letters (uppercase and lowercase),
    ///    numbers, hyphens, and underscores are allowed.</p>
    public let jobName: String?
    /// <p>The job queue where the job is submitted. You can specify either the name or the Amazon Resource Name (ARN) of the queue.</p>
    public let jobQueue: String?
    /// <p>A list of node overrides in JSON format that specify the node range to target and the container overrides for
    ///    that node range.</p>
    ///          <note>
    ///             <p>This parameter isn't applicable to jobs running on Fargate resources; use <code>containerOverrides</code>
    ///     instead.</p>
    ///          </note>
    public let nodeOverrides: NodeOverrides?
    /// <p>Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job
    ///    definition. Parameters are specified as a key and value pair mapping. Parameters in a <code>SubmitJob</code> request
    ///    override any corresponding parameter defaults from the job definition.</p>
    public let parameters: [String:String]?
    /// <p>Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no
    ///    value is specified, the tags aren't propagated. Tags can only be propagated to the tasks during task creation. For
    ///    tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags
    ///    from the job and job definition is over 50, the job is moved to the <code>FAILED</code> state. When specified, this
    ///    overrides the tag propagation setting in the job definition.</p>
    public let propagateTags: Bool
    /// <p>The retry strategy to use for failed jobs from this <a>SubmitJob</a> operation. When a retry strategy
    ///    is specified here, it overrides the retry strategy defined in the job definition.</p>
    public let retryStrategy: RetryStrategy?
    /// <p>The tags that you apply to the job request to help you categorize and organize your resources. Each tag consists
    ///    of a key and an optional value. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging AWS Resources</a> in <i>AWS General
    ///    Reference</i>.</p>
    public let tags: [String:String]?
    /// <p>The timeout configuration for this <a>SubmitJob</a> operation. You can specify a timeout duration
    ///    after which AWS Batch terminates your jobs if they haven't finished. If a job is terminated due to a timeout, it isn't
    ///    retried. The minimum value for the timeout is 60 seconds. This configuration overrides any timeout configuration
    ///    specified in the job definition. For array jobs, child jobs have the same timeout configuration as the parent job.
    ///    For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/job_timeouts.html">Job
    ///     Timeouts</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    public let timeout: JobTimeout?

    public init (
        arrayProperties: ArrayProperties? = nil,
        containerOverrides: ContainerOverrides? = nil,
        dependsOn: [JobDependency]? = nil,
        jobDefinition: String? = nil,
        jobName: String? = nil,
        jobQueue: String? = nil,
        nodeOverrides: NodeOverrides? = nil,
        parameters: [String:String]? = nil,
        propagateTags: Bool = false,
        retryStrategy: RetryStrategy? = nil,
        tags: [String:String]? = nil,
        timeout: JobTimeout? = nil
    )
    {
        self.arrayProperties = arrayProperties
        self.containerOverrides = containerOverrides
        self.dependsOn = dependsOn
        self.jobDefinition = jobDefinition
        self.jobName = jobName
        self.jobQueue = jobQueue
        self.nodeOverrides = nodeOverrides
        self.parameters = parameters
        self.propagateTags = propagateTags
        self.retryStrategy = retryStrategy
        self.tags = tags
        self.timeout = timeout
    }
}
