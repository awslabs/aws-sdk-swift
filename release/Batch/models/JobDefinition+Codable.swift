// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension JobDefinition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case containerProperties
        case jobDefinitionArn
        case jobDefinitionName
        case nodeProperties
        case parameters
        case platformCapabilities
        case propagateTags
        case retryStrategy
        case revision
        case status
        case tags
        case timeout
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerProperties = containerProperties {
            try encodeContainer.encode(containerProperties, forKey: .containerProperties)
        }
        if let jobDefinitionArn = jobDefinitionArn {
            try encodeContainer.encode(jobDefinitionArn, forKey: .jobDefinitionArn)
        }
        if let jobDefinitionName = jobDefinitionName {
            try encodeContainer.encode(jobDefinitionName, forKey: .jobDefinitionName)
        }
        if let nodeProperties = nodeProperties {
            try encodeContainer.encode(nodeProperties, forKey: .nodeProperties)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .parameters)
            for (dictKey0, parametersmap0) in parameters {
                try parametersContainer.encode(parametersmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let platformCapabilities = platformCapabilities {
            var platformCapabilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .platformCapabilities)
            for platformcapabilitylist0 in platformCapabilities {
                try platformCapabilitiesContainer.encode(platformcapabilitylist0.rawValue)
            }
        }
        if propagateTags != false {
            try encodeContainer.encode(propagateTags, forKey: .propagateTags)
        }
        if let retryStrategy = retryStrategy {
            try encodeContainer.encode(retryStrategy, forKey: .retryStrategy)
        }
        if revision != 0 {
            try encodeContainer.encode(revision, forKey: .revision)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagristagsmap0) in tags {
                try tagsContainer.encode(tagristagsmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let timeout = timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
        let jobDefinitionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobDefinitionArn)
        jobDefinitionArn = jobDefinitionArnDecoded
        let revisionDecoded = try containerValues.decode(Int.self, forKey: .revision)
        revision = revisionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let typeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .type)
        type = typeDecoded
        let parametersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .parameters)
        var parametersDecoded0: [String:String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [String:String]()
            for (key0, string0) in parametersContainer {
                parametersDecoded0?[key0] = string0
            }
        }
        parameters = parametersDecoded0
        let retryStrategyDecoded = try containerValues.decodeIfPresent(RetryStrategy.self, forKey: .retryStrategy)
        retryStrategy = retryStrategyDecoded
        let containerPropertiesDecoded = try containerValues.decodeIfPresent(ContainerProperties.self, forKey: .containerProperties)
        containerProperties = containerPropertiesDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(JobTimeout.self, forKey: .timeout)
        timeout = timeoutDecoded
        let nodePropertiesDecoded = try containerValues.decodeIfPresent(NodeProperties.self, forKey: .nodeProperties)
        nodeProperties = nodePropertiesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let propagateTagsDecoded = try containerValues.decode(Bool.self, forKey: .propagateTags)
        propagateTags = propagateTagsDecoded
        let platformCapabilitiesContainer = try containerValues.decodeIfPresent([PlatformCapability].self, forKey: .platformCapabilities)
        var platformCapabilitiesDecoded0:[PlatformCapability]? = nil
        if let platformCapabilitiesContainer = platformCapabilitiesContainer {
            platformCapabilitiesDecoded0 = [PlatformCapability]()
            for string0 in platformCapabilitiesContainer {
                platformCapabilitiesDecoded0?.append(string0)
            }
        }
        platformCapabilities = platformCapabilitiesDecoded0
    }
}
