// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>An object representing an AWS Batch compute resource. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html">Compute Environments</a> in the
///    <i>AWS Batch User Guide</i>.</p>
public struct ComputeResource: Equatable {
    /// <p>The allocation strategy to use for the compute resource if not enough instances of the best fitting instance
    ///    type can be allocated. This might be because of availability of the instance type in the Region or <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html">Amazon EC2 service limits</a>. For more
    ///    information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html">Allocation Strategies</a>
    ///    in the <i>AWS Batch User Guide</i>.</p>
    ///          <note>
    ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
    ///          </note>
    ///          <dl>
    ///             <dt>BEST_FIT (default)</dt>
    ///             <dd>
    ///                <p>AWS Batch selects an instance type that best fits the needs of the jobs with a preference for the lowest-cost
    ///       instance type. If additional instances of the selected instance type aren't available, AWS Batch waits for the
    ///       additional instances to be available. If there aren't enough instances available, or if the user is hitting <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html">Amazon EC2 service limits</a> then
    ///       additional jobs aren't run until the currently running jobs have completed. This allocation strategy keeps costs
    ///       lower but can limit scaling. If you are using Spot Fleets with <code>BEST_FIT</code> then the Spot Fleet IAM Role
    ///       must be specified.</p>
    ///             </dd>
    ///             <dt>BEST_FIT_PROGRESSIVE</dt>
    ///             <dd>
    ///                <p>AWS Batch will select additional instance types that are large enough to meet the requirements of the jobs in
    ///       the queue, with a preference for instance types with a lower cost per unit vCPU. If additional instances of the
    ///       previously selected instance types aren't available, AWS Batch will select new instance types.</p>
    ///             </dd>
    ///             <dt>SPOT_CAPACITY_OPTIMIZED</dt>
    ///             <dd>
    ///                <p>AWS Batch will select one or more instance types that are large enough to meet the requirements of the jobs in
    ///       the queue, with a preference for instance types that are less likely to be interrupted. This allocation strategy
    ///       is only available for Spot Instance compute resources.</p>
    ///             </dd>
    ///          </dl>
    ///          <p>With both <code>BEST_FIT_PROGRESSIVE</code> and <code>SPOT_CAPACITY_OPTIMIZED</code> strategies, AWS Batch might
    ///    need to go above <code>maxvCpus</code> to meet your capacity requirements. In this event, AWS Batch never exceeds
    ///     <code>maxvCpus</code> by more than a single instance.</p>
    public let allocationStrategy: CRAllocationStrategy?
    /// <p>The maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that
    ///    instance type before instances are launched. For example, if your maximum percentage is 20%, then the Spot price must
    ///    be less than 20% of the current On-Demand price for that Amazon EC2 instance. You always pay the lowest (market) price and
    ///    never more than your maximum percentage. If you leave this field empty, the default value is 100% of the On-Demand
    ///    price.</p>
    ///          <note>
    ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
    ///          </note>
    public let bidPercentage: Int
    /// <p>The desired number of Amazon EC2 vCPUS in the compute environment. AWS Batch modifies this value between the minimum
    ///    and maximum values, based on job queue demand.</p>
    ///          <note>
    ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
    ///          </note>
    public let desiredvCpus: Int
    /// <p>Provides information used to select Amazon Machine Images (AMIs) for EC2 instances in the compute environment.
    ///    If <code>Ec2Configuration</code> isn't specified, the default is <code>ECS_AL1</code>.</p>
    ///          <note>
    ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
    ///          </note>
    public let ec2Configuration: [Ec2Configuration]?
    /// <p>The Amazon EC2 key pair that's used for instances launched in the compute environment. You can use this key pair to
    ///    log in to your instances with SSH.</p>
    ///          <note>
    ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
    ///          </note>
    public let ec2KeyPair: String?
    /// <p>The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter is
    ///    overridden by the <code>imageIdOverride</code> member of the <code>Ec2Configuration</code> structure.</p>
    ///          <note>
    ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
    ///          </note>
    ///          <note>
    ///             <p>The AMI that you choose for a compute environment must match the architecture of the instance types that
    ///     you intend to use for that compute environment. For example, if your compute environment uses A1 instance types,
    ///     the compute resource AMI that you choose must support ARM instances. Amazon ECS vends both x86 and ARM versions of the
    ///     Amazon ECS-optimized Amazon Linux 2 AMI. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#ecs-optimized-ami-linux-variants.html">Amazon ECS-optimized
    ///     Amazon Linux 2 AMI</a>
    ///     in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    ///          </note>
    @available(*, deprecated, message: "This field is deprecated, use ec2Configuration[].imageIdOverride instead.")
    public let imageId: String?
    /// <p>The Amazon ECS instance profile applied to Amazon EC2 instances in a compute environment. You can specify the short name
    ///    or full Amazon Resource Name (ARN) of an instance profile. For example,
    ///     <code>
    ///                <i>ecsInstanceRole</i>
    ///             </code> or
    ///      <code>arn:aws:iam::<i><aws_account_id></i>:instance-profile/<i>ecsInstanceRole</i>
    ///             </code>.
    ///    For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/instance_IAM_role.html">Amazon ECS Instance
    ///     Role</a> in the <i>AWS Batch User Guide</i>.</p>
    ///          <note>
    ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
    ///          </note>
    public let instanceRole: String?
    /// <p>The instances types that can be launched. You can specify instance families to launch any instance type within
    ///    those families (for example, <code>c5</code> or <code>p3</code>), or you can specify specific sizes within a family
    ///    (such as <code>c5.8xlarge</code>). You can also choose <code>optimal</code> to select instance types (from the C4,
    ///    M4, and R4 instance families) that match the demand of your job queues.</p>
    ///          <note>
    ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
    ///          </note>
    ///          <note>
    ///             <p>When you create a compute environment, the instance types that you select for the compute environment must
    ///     share the same architecture. For example, you can't mix x86 and ARM instances in the same compute
    ///     environment.</p>
    ///          </note>
    ///          <note>
    ///             <p>Currently, <code>optimal</code> uses instance types from the C4, M4, and R4 instance families. In Regions that
    ///     don't have instance types from those instance families, instance types from the C5, M5. and R5 instance families are
    ///     used.</p>
    ///          </note>
    public let instanceTypes: [String]?
    /// <p>The launch template to use for your compute resources. Any other compute resource parameters that you specify in
    ///    a <a>CreateComputeEnvironment</a> API operation override the same parameters in the launch template. You
    ///    must specify either the launch template ID or launch template name in the request, but not both. For more
    ///    information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/launch-templates.html">Launch Template Support</a> in
    ///    the <i>AWS Batch User Guide</i>.</p>
    ///          <note>
    ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
    ///          </note>
    public let launchTemplate: LaunchTemplateSpecification?
    /// <p>The maximum number of Amazon EC2 vCPUs that a compute environment can reach.</p>
    ///          <note>
    ///             <p>With both <code>BEST_FIT_PROGRESSIVE</code> and <code>SPOT_CAPACITY_OPTIMIZED</code> allocation strategies,
    ///     AWS Batch might need to exceed <code>maxvCpus</code> to meet your capacity requirements. In this event, AWS Batch never
    ///     exceeds <code>maxvCpus</code> by more than a single instance. For example, no more than a single instance from among
    ///     those specified in your compute environment is allocated.</p>
    ///          </note>
    public let maxvCpus: Int
    /// <p>The minimum number of Amazon EC2 vCPUs that an environment should maintain (even if the compute environment is
    ///     <code>DISABLED</code>).</p>
    ///          <note>
    ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
    ///          </note>
    public let minvCpus: Int
    /// <p>The Amazon EC2 placement group to associate with your compute resources. If you intend to submit multi-node parallel
    ///    jobs to your compute environment, you should consider creating a cluster placement group and associate it with your
    ///    compute resources. This keeps your multi-node parallel job on a logical grouping of instances within a single
    ///    Availability Zone with high network flow potential. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for
    ///     Linux Instances</i>.</p>
    ///          <note>
    ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
    ///          </note>
    public let placementGroup: String?
    /// <p>The Amazon EC2 security groups associated with instances launched in the compute environment. One or more security
    ///    groups must be specified, either in <code>securityGroupIds</code> or using a launch template referenced in
    ///     <code>launchTemplate</code>. This parameter is required for jobs running on Fargate resources and must contain at
    ///    least one security group. Fargate doesn't support launch templates. If security groups are specified using both
    ///     <code>securityGroupIds</code> and <code>launchTemplate</code>, the values in <code>securityGroupIds</code> is
    ///    used.</p>
    public let securityGroupIds: [String]?
    /// <p>The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a <code>SPOT</code> compute environment. This role is
    ///    required if the allocation strategy set to <code>BEST_FIT</code> or if the allocation strategy isn't specified. For
    ///    more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html">Amazon EC2 Spot Fleet
    ///     Role</a> in the <i>AWS Batch User Guide</i>.</p>
    ///          <note>
    ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
    ///          </note>
    ///          <important>
    ///             <p>To tag your Spot Instances on creation, the Spot Fleet IAM role specified here must use the newer <b>AmazonEC2SpotFleetTaggingRole</b> managed policy. The previously recommended <b>AmazonEC2SpotFleetRole</b> managed policy doesn't have the required permissions to tag Spot
    ///     Instances. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#spot-instance-no-tag">Spot Instances not tagged on creation</a> in the
    ///      <i>AWS Batch User Guide</i>.</p>
    ///          </important>
    public let spotIamFleetRole: String?
    /// <p>The VPC subnets into which the compute resources are launched. These subnets must be within the same VPC.
    ///    Fargate compute resources can contain up to 16 subnets. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">VPCs and Subnets</a> in the <i>Amazon VPC User
    ///     Guide</i>.</p>
    public let subnets: [String]?
    /// <p>Key-value pair tags to be applied to EC2 resources that are launched in the compute environment. For AWS Batch,
    ///    these take the form of "String1": "String2", where String1 is the tag key and String2 is the tag value−for
    ///    example, { "Name": "AWS Batch Instance - C4OnDemand" }. This is helpful for recognizing your AWS Batch instances in the
    ///    Amazon EC2 console. These tags can't be updated or removed after the compute environment has been created; any changes
    ///    require creating a new compute environment and removing the old compute environment. These tags aren't seen when
    ///    using the AWS Batch <code>ListTagsForResource</code> API operation.</p>
    ///          <note>
    ///             <p>This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.</p>
    ///          </note>
    public let tags: [String:String]?
    /// <p>The type of compute environment: <code>EC2</code>, <code>SPOT</code>, <code>FARGATE</code>, or
    ///     <code>FARGATE_SPOT</code>. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html">Compute Environments</a> in the
    ///    <i>AWS Batch User Guide</i>.</p>
    ///          <p> If you choose <code>SPOT</code>, you must also specify an Amazon EC2 Spot Fleet role with the
    ///     <code>spotIamFleetRole</code> parameter. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html">Amazon EC2 Spot Fleet role</a> in the
    ///     <i>AWS Batch User Guide</i>.</p>
    public let type: CRType?

    public init (
        allocationStrategy: CRAllocationStrategy? = nil,
        bidPercentage: Int = 0,
        desiredvCpus: Int = 0,
        ec2Configuration: [Ec2Configuration]? = nil,
        ec2KeyPair: String? = nil,
        imageId: String? = nil,
        instanceRole: String? = nil,
        instanceTypes: [String]? = nil,
        launchTemplate: LaunchTemplateSpecification? = nil,
        maxvCpus: Int = 0,
        minvCpus: Int = 0,
        placementGroup: String? = nil,
        securityGroupIds: [String]? = nil,
        spotIamFleetRole: String? = nil,
        subnets: [String]? = nil,
        tags: [String:String]? = nil,
        type: CRType? = nil
    )
    {
        self.allocationStrategy = allocationStrategy
        self.bidPercentage = bidPercentage
        self.desiredvCpus = desiredvCpus
        self.ec2Configuration = ec2Configuration
        self.ec2KeyPair = ec2KeyPair
        self.imageId = imageId
        self.instanceRole = instanceRole
        self.instanceTypes = instanceTypes
        self.launchTemplate = launchTemplate
        self.maxvCpus = maxvCpus
        self.minvCpus = minvCpus
        self.placementGroup = placementGroup
        self.securityGroupIds = securityGroupIds
        self.spotIamFleetRole = spotIamFleetRole
        self.subnets = subnets
        self.tags = tags
        self.type = type
    }
}
