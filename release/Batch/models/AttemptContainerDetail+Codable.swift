// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AttemptContainerDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case containerInstanceArn
        case exitCode
        case logStreamName
        case networkInterfaces
        case reason
        case taskArn
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerInstanceArn = containerInstanceArn {
            try encodeContainer.encode(containerInstanceArn, forKey: .containerInstanceArn)
        }
        if exitCode != 0 {
            try encodeContainer.encode(exitCode, forKey: .exitCode)
        }
        if let logStreamName = logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let networkInterfaces = networkInterfaces {
            var networkInterfacesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkInterfaces)
            for networkinterfacelist0 in networkInterfaces {
                try networkInterfacesContainer.encode(networkinterfacelist0)
            }
        }
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let taskArn = taskArn {
            try encodeContainer.encode(taskArn, forKey: .taskArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerInstanceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .containerInstanceArn)
        containerInstanceArn = containerInstanceArnDecoded
        let taskArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
        let exitCodeDecoded = try containerValues.decode(Int.self, forKey: .exitCode)
        exitCode = exitCodeDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reason)
        reason = reasonDecoded
        let logStreamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let networkInterfacesContainer = try containerValues.decodeIfPresent([NetworkInterface].self, forKey: .networkInterfaces)
        var networkInterfacesDecoded0:[NetworkInterface]? = nil
        if let networkInterfacesContainer = networkInterfacesContainer {
            networkInterfacesDecoded0 = [NetworkInterface]()
            for structure0 in networkInterfacesContainer {
                networkInterfacesDecoded0?.append(structure0)
            }
        }
        networkInterfaces = networkInterfacesDecoded0
    }
}
