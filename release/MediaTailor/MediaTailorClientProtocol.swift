// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
public protocol MediaTailorClientProtocol {
    /// <p>Creates a channel.</p>
    func createChannel(input: CreateChannelInput, completion: @escaping (SdkResult<CreateChannelOutputResponse, CreateChannelOutputError>) -> Void)
    /// <p>Creates a program.</p>
    func createProgram(input: CreateProgramInput, completion: @escaping (SdkResult<CreateProgramOutputResponse, CreateProgramOutputError>) -> Void)
    /// <p>Creates a source location on a specific channel.</p>
    func createSourceLocation(input: CreateSourceLocationInput, completion: @escaping (SdkResult<CreateSourceLocationOutputResponse, CreateSourceLocationOutputError>) -> Void)
    /// <p>Creates name for a specific VOD source in a source location.</p>
    func createVodSource(input: CreateVodSourceInput, completion: @escaping (SdkResult<CreateVodSourceOutputResponse, CreateVodSourceOutputError>) -> Void)
    /// <p>Deletes a channel. You must stop the channel before it can be deleted.</p>
    func deleteChannel(input: DeleteChannelInput, completion: @escaping (SdkResult<DeleteChannelOutputResponse, DeleteChannelOutputError>) -> Void)
    /// <p>Deletes a channel's IAM policy.</p>
    func deleteChannelPolicy(input: DeleteChannelPolicyInput, completion: @escaping (SdkResult<DeleteChannelPolicyOutputResponse, DeleteChannelPolicyOutputError>) -> Void)
    /// <p>Deletes the playback configuration for the specified name.</p>
    func deletePlaybackConfiguration(input: DeletePlaybackConfigurationInput, completion: @escaping (SdkResult<DeletePlaybackConfigurationOutputResponse, DeletePlaybackConfigurationOutputError>) -> Void)
    /// <p>Deletes a specific program on a specific channel.</p>
    func deleteProgram(input: DeleteProgramInput, completion: @escaping (SdkResult<DeleteProgramOutputResponse, DeleteProgramOutputError>) -> Void)
    /// <p>Deletes a source location on a specific channel.</p>
    func deleteSourceLocation(input: DeleteSourceLocationInput, completion: @escaping (SdkResult<DeleteSourceLocationOutputResponse, DeleteSourceLocationOutputError>) -> Void)
    /// <p>Deletes a specific VOD source in a specific source location.</p>
    func deleteVodSource(input: DeleteVodSourceInput, completion: @escaping (SdkResult<DeleteVodSourceOutputResponse, DeleteVodSourceOutputError>) -> Void)
    /// <p>Describes the properties of a specific channel.</p>
    func describeChannel(input: DescribeChannelInput, completion: @escaping (SdkResult<DescribeChannelOutputResponse, DescribeChannelOutputError>) -> Void)
    /// <p>Retrieves the properties of the requested program.</p>
    func describeProgram(input: DescribeProgramInput, completion: @escaping (SdkResult<DescribeProgramOutputResponse, DescribeProgramOutputError>) -> Void)
    /// <p>Retrieves the properties of the requested source location.</p>
    func describeSourceLocation(input: DescribeSourceLocationInput, completion: @escaping (SdkResult<DescribeSourceLocationOutputResponse, DescribeSourceLocationOutputError>) -> Void)
    /// <p>Provides details about a specific VOD source in a specific source location.</p>
    func describeVodSource(input: DescribeVodSourceInput, completion: @escaping (SdkResult<DescribeVodSourceOutputResponse, DescribeVodSourceOutputError>) -> Void)
    /// <p>Retrieves information about a channel's IAM policy.</p>
    func getChannelPolicy(input: GetChannelPolicyInput, completion: @escaping (SdkResult<GetChannelPolicyOutputResponse, GetChannelPolicyOutputError>) -> Void)
    /// <p>Retrieves information about your channel's schedule.</p>
    func getChannelSchedule(input: GetChannelScheduleInput, completion: @escaping (SdkResult<GetChannelScheduleOutputResponse, GetChannelScheduleOutputError>) -> Void)
    /// <p>Returns the playback configuration for the specified name.</p>
    func getPlaybackConfiguration(input: GetPlaybackConfigurationInput, completion: @escaping (SdkResult<GetPlaybackConfigurationOutputResponse, GetPlaybackConfigurationOutputError>) -> Void)
    /// <p>Retrieves a list of channels that are associated with this account.</p>
    func listChannels(input: ListChannelsInput, completion: @escaping (SdkResult<ListChannelsOutputResponse, ListChannelsOutputError>) -> Void)
    /// <p>Returns a list of the playback configurations defined in AWS Elemental MediaTailor. You can specify a maximum number of configurations to return at a time. The default maximum is 50. Results are returned in pagefuls. If MediaTailor has more configurations than the specified maximum, it provides parameters in the response that you can use to retrieve the next pageful.</p>
    func listPlaybackConfigurations(input: ListPlaybackConfigurationsInput, completion: @escaping (SdkResult<ListPlaybackConfigurationsOutputResponse, ListPlaybackConfigurationsOutputError>) -> Void)
    /// <p>Retrieves a list of source locations.</p>
    func listSourceLocations(input: ListSourceLocationsInput, completion: @escaping (SdkResult<ListSourceLocationsOutputResponse, ListSourceLocationsOutputError>) -> Void)
    /// <p>Returns a list of the tags assigned to the specified playback configuration resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p>Lists all the VOD sources in a source location.</p>
    func listVodSources(input: ListVodSourcesInput, completion: @escaping (SdkResult<ListVodSourcesOutputResponse, ListVodSourcesOutputError>) -> Void)
    /// <p>Creates an IAM policy for the channel.</p>
    func putChannelPolicy(input: PutChannelPolicyInput, completion: @escaping (SdkResult<PutChannelPolicyOutputResponse, PutChannelPolicyOutputError>) -> Void)
    /// <p>Adds a new playback configuration to AWS Elemental MediaTailor.</p>
    func putPlaybackConfiguration(input: PutPlaybackConfigurationInput, completion: @escaping (SdkResult<PutPlaybackConfigurationOutputResponse, PutPlaybackConfigurationOutputError>) -> Void)
    /// <p>Starts a specific channel.</p>
    func startChannel(input: StartChannelInput, completion: @escaping (SdkResult<StartChannelOutputResponse, StartChannelOutputError>) -> Void)
    /// <p>Stops a specific channel.</p>
    func stopChannel(input: StopChannelInput, completion: @escaping (SdkResult<StopChannelOutputResponse, StopChannelOutputError>) -> Void)
    /// <p>Adds tags to the specified playback configuration resource. You can specify one or more tags to add.</p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p>Removes tags from the specified playback configuration resource. You can specify one or more tags to remove.</p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// <p>Updates an existing channel.</p>
    func updateChannel(input: UpdateChannelInput, completion: @escaping (SdkResult<UpdateChannelOutputResponse, UpdateChannelOutputError>) -> Void)
    /// <p>Updates a source location on a specific channel.</p>
    func updateSourceLocation(input: UpdateSourceLocationInput, completion: @escaping (SdkResult<UpdateSourceLocationOutputResponse, UpdateSourceLocationOutputError>) -> Void)
    /// <p>Updates a specific VOD source in a specific source location.</p>
    func updateVodSource(input: UpdateVodSourceInput, completion: @escaping (SdkResult<UpdateVodSourceOutputResponse, UpdateVodSourceOutputError>) -> Void)
}
