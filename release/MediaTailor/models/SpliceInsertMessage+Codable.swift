// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SpliceInsertMessage: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availNum = "AvailNum"
        case availsExpected = "AvailsExpected"
        case spliceEventId = "SpliceEventId"
        case uniqueProgramId = "UniqueProgramId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if availNum != 0 {
            try encodeContainer.encode(availNum, forKey: .availNum)
        }
        if availsExpected != 0 {
            try encodeContainer.encode(availsExpected, forKey: .availsExpected)
        }
        if spliceEventId != 0 {
            try encodeContainer.encode(spliceEventId, forKey: .spliceEventId)
        }
        if uniqueProgramId != 0 {
            try encodeContainer.encode(uniqueProgramId, forKey: .uniqueProgramId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availNumDecoded = try containerValues.decode(Int.self, forKey: .availNum)
        availNum = availNumDecoded
        let availsExpectedDecoded = try containerValues.decode(Int.self, forKey: .availsExpected)
        availsExpected = availsExpectedDecoded
        let spliceEventIdDecoded = try containerValues.decode(Int.self, forKey: .spliceEventId)
        spliceEventId = spliceEventIdDecoded
        let uniqueProgramIdDecoded = try containerValues.decode(Int.self, forKey: .uniqueProgramId)
        uniqueProgramId = uniqueProgramIdDecoded
    }
}
