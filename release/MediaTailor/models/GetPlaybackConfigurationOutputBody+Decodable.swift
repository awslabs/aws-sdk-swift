// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetPlaybackConfigurationOutputBody: Equatable {
    public let adDecisionServerUrl: String?
    public let availSuppression: AvailSuppression?
    public let bumper: Bumper?
    public let cdnConfiguration: CdnConfiguration?
    public let configurationAliases: [String:[String:String]?]?
    public let dashConfiguration: DashConfiguration?
    public let hlsConfiguration: HlsConfiguration?
    public let livePreRollConfiguration: LivePreRollConfiguration?
    public let manifestProcessingRules: ManifestProcessingRules?
    public let name: String?
    public let personalizationThresholdSeconds: Int
    public let playbackConfigurationArn: String?
    public let playbackEndpointPrefix: String?
    public let sessionInitializationEndpointPrefix: String?
    public let slateAdUrl: String?
    public let tags: [String:String]?
    public let transcodeProfileName: String?
    public let videoContentSourceUrl: String?
}

extension GetPlaybackConfigurationOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case adDecisionServerUrl = "AdDecisionServerUrl"
        case availSuppression = "AvailSuppression"
        case bumper = "Bumper"
        case cdnConfiguration = "CdnConfiguration"
        case configurationAliases = "ConfigurationAliases"
        case dashConfiguration = "DashConfiguration"
        case hlsConfiguration = "HlsConfiguration"
        case livePreRollConfiguration = "LivePreRollConfiguration"
        case manifestProcessingRules = "ManifestProcessingRules"
        case name = "Name"
        case personalizationThresholdSeconds = "PersonalizationThresholdSeconds"
        case playbackConfigurationArn = "PlaybackConfigurationArn"
        case playbackEndpointPrefix = "PlaybackEndpointPrefix"
        case sessionInitializationEndpointPrefix = "SessionInitializationEndpointPrefix"
        case slateAdUrl = "SlateAdUrl"
        case tags = "tags"
        case transcodeProfileName = "TranscodeProfileName"
        case videoContentSourceUrl = "VideoContentSourceUrl"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adDecisionServerUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .adDecisionServerUrl)
        adDecisionServerUrl = adDecisionServerUrlDecoded
        let availSuppressionDecoded = try containerValues.decodeIfPresent(AvailSuppression.self, forKey: .availSuppression)
        availSuppression = availSuppressionDecoded
        let bumperDecoded = try containerValues.decodeIfPresent(Bumper.self, forKey: .bumper)
        bumper = bumperDecoded
        let cdnConfigurationDecoded = try containerValues.decodeIfPresent(CdnConfiguration.self, forKey: .cdnConfiguration)
        cdnConfiguration = cdnConfigurationDecoded
        let configurationAliasesContainer = try containerValues.decodeIfPresent([String:[String:String]?].self, forKey: .configurationAliases)
        var configurationAliasesDecoded0: [String:[String:String]?]? = nil
        if let configurationAliasesContainer = configurationAliasesContainer {
            configurationAliasesDecoded0 = [String:[String:String]?]()
            for (key0, __mapof__string0) in configurationAliasesContainer {
                var __mapof__string0Decoded0 = [String:String]()
                if let __mapof__string0 = __mapof__string0 {
                    for (key1, __string1) in __mapof__string0 {
                        __mapof__string0Decoded0[key1] = __string1
                    }
                }
                configurationAliasesDecoded0?[key0] = __mapof__string0Decoded0
            }
        }
        configurationAliases = configurationAliasesDecoded0
        let dashConfigurationDecoded = try containerValues.decodeIfPresent(DashConfiguration.self, forKey: .dashConfiguration)
        dashConfiguration = dashConfigurationDecoded
        let hlsConfigurationDecoded = try containerValues.decodeIfPresent(HlsConfiguration.self, forKey: .hlsConfiguration)
        hlsConfiguration = hlsConfigurationDecoded
        let livePreRollConfigurationDecoded = try containerValues.decodeIfPresent(LivePreRollConfiguration.self, forKey: .livePreRollConfiguration)
        livePreRollConfiguration = livePreRollConfigurationDecoded
        let manifestProcessingRulesDecoded = try containerValues.decodeIfPresent(ManifestProcessingRules.self, forKey: .manifestProcessingRules)
        manifestProcessingRules = manifestProcessingRulesDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let personalizationThresholdSecondsDecoded = try containerValues.decode(Int.self, forKey: .personalizationThresholdSeconds)
        personalizationThresholdSeconds = personalizationThresholdSecondsDecoded
        let playbackConfigurationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .playbackConfigurationArn)
        playbackConfigurationArn = playbackConfigurationArnDecoded
        let playbackEndpointPrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .playbackEndpointPrefix)
        playbackEndpointPrefix = playbackEndpointPrefixDecoded
        let sessionInitializationEndpointPrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sessionInitializationEndpointPrefix)
        sessionInitializationEndpointPrefix = sessionInitializationEndpointPrefixDecoded
        let slateAdUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .slateAdUrl)
        slateAdUrl = slateAdUrlDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                tagsDecoded0?[key0] = __string0
            }
        }
        tags = tagsDecoded0
        let transcodeProfileNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .transcodeProfileName)
        transcodeProfileName = transcodeProfileNameDecoded
        let videoContentSourceUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .videoContentSourceUrl)
        videoContentSourceUrl = videoContentSourceUrlDecoded
    }
}
