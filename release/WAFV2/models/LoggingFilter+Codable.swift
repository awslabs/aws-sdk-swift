// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LoggingFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case defaultBehavior = "DefaultBehavior"
        case filters = "Filters"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultBehavior = defaultBehavior {
            try encodeContainer.encode(defaultBehavior.rawValue, forKey: .defaultBehavior)
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filters0 in filters {
                try filtersContainer.encode(filters0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersContainer = try containerValues.decodeIfPresent([Filter].self, forKey: .filters)
        var filtersDecoded0:[Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [Filter]()
            for structure0 in filtersContainer {
                filtersDecoded0?.append(structure0)
            }
        }
        filters = filtersDecoded0
        let defaultBehaviorDecoded = try containerValues.decodeIfPresent(FilterBehavior.self, forKey: .defaultBehavior)
        defaultBehavior = defaultBehaviorDecoded
    }
}
