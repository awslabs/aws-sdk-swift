// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RateBasedStatement: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aggregateKeyType = "AggregateKeyType"
        case forwardedIPConfig = "ForwardedIPConfig"
        case limit = "Limit"
        case scopeDownStatement = "ScopeDownStatement"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aggregateKeyType = aggregateKeyType {
            try encodeContainer.encode(aggregateKeyType.rawValue, forKey: .aggregateKeyType)
        }
        if let forwardedIPConfig = forwardedIPConfig {
            try encodeContainer.encode(forwardedIPConfig, forKey: .forwardedIPConfig)
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let scopeDownStatement = scopeDownStatement {
            try encodeContainer.encode(scopeDownStatement.value, forKey: .scopeDownStatement)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitDecoded = try containerValues.decode(Int.self, forKey: .limit)
        limit = limitDecoded
        let aggregateKeyTypeDecoded = try containerValues.decodeIfPresent(RateBasedStatementAggregateKeyType.self, forKey: .aggregateKeyType)
        aggregateKeyType = aggregateKeyTypeDecoded
        let scopeDownStatementDecoded = try containerValues.decodeIfPresent(Box<Statement>.self, forKey: .scopeDownStatement)
        scopeDownStatement = scopeDownStatementDecoded
        let forwardedIPConfigDecoded = try containerValues.decodeIfPresent(ForwardedIPConfig.self, forKey: .forwardedIPConfig)
        forwardedIPConfig = forwardedIPConfigDecoded
    }
}
