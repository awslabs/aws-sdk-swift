// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The override action to apply to the rules in a rule group. Used only for rule statements that reference a rule group,
///            like <code>RuleGroupReferenceStatement</code> and <code>ManagedRuleGroupStatement</code>. </p>
///         <p>Set the override action to none to leave the rule actions in effect. Set it to count to only count matches, regardless of the rule action settings. </p>
///         <p>In a <a>Rule</a>, you must specify either this <code>OverrideAction</code> setting or the rule <code>Action</code> setting, but not both:</p>
///          <ul>
///             <li>
///                <p>If the rule statement references a rule group, use this override action setting and not the action setting.  </p>
///             </li>
///             <li>
///                <p>If the rule statement does not reference a rule group, use the rule action setting and not this rule override action setting. </p>
///             </li>
///          </ul>
public struct OverrideAction: Equatable {
    /// <p>Don't override the rule action setting.</p>
    public let `none`: NoneAction?
    /// <p>Override the rule action setting to count.</p>
    public let count: CountAction?

    public init (
        `none`: NoneAction? = nil,
        count: CountAction? = nil
    )
    {
        self.`none` = `none`
        self.count = count
    }
}
