// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GeoMatchStatement: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case countryCodes = "CountryCodes"
        case forwardedIPConfig = "ForwardedIPConfig"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let countryCodes = countryCodes {
            var countryCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .countryCodes)
            for countrycodes0 in countryCodes {
                try countryCodesContainer.encode(countrycodes0.rawValue)
            }
        }
        if let forwardedIPConfig = forwardedIPConfig {
            try encodeContainer.encode(forwardedIPConfig, forKey: .forwardedIPConfig)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countryCodesContainer = try containerValues.decodeIfPresent([CountryCode].self, forKey: .countryCodes)
        var countryCodesDecoded0:[CountryCode]? = nil
        if let countryCodesContainer = countryCodesContainer {
            countryCodesDecoded0 = [CountryCode]()
            for string0 in countryCodesContainer {
                countryCodesDecoded0?.append(string0)
            }
        }
        countryCodes = countryCodesDecoded0
        let forwardedIPConfigDecoded = try containerValues.decodeIfPresent(ForwardedIPConfig.self, forKey: .forwardedIPConfig)
        forwardedIPConfig = forwardedIPConfigDecoded
    }
}
