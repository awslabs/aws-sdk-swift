// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RegexPatternSet: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aRN = "ARN"
        case description = "Description"
        case id = "Id"
        case name = "Name"
        case regularExpressionList = "RegularExpressionList"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aRN = aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let regularExpressionList = regularExpressionList {
            var regularExpressionListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regularExpressionList)
            for regularexpressionlist0 in regularExpressionList {
                try regularExpressionListContainer.encode(regularexpressionlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aRN)
        aRN = aRNDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let regularExpressionListContainer = try containerValues.decodeIfPresent([Regex].self, forKey: .regularExpressionList)
        var regularExpressionListDecoded0:[Regex]? = nil
        if let regularExpressionListContainer = regularExpressionListContainer {
            regularExpressionListDecoded0 = [Regex]()
            for structure0 in regularExpressionListContainer {
                regularExpressionListDecoded0?.append(structure0)
            }
        }
        regularExpressionList = regularExpressionListDecoded0
    }
}
