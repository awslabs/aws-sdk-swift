// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateRuleGroupInputBody: Equatable {
    public let name: String?
    public let scope: Scope?
    public let id: String?
    public let description: String?
    public let rules: [Rule]?
    public let visibilityConfig: VisibilityConfig?
    public let lockToken: String?
    public let customResponseBodies: [String:CustomResponseBody]?
}

extension UpdateRuleGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case customResponseBodies = "CustomResponseBodies"
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case rules = "Rules"
        case scope = "Scope"
        case visibilityConfig = "VisibilityConfig"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let rulesContainer = try containerValues.decodeIfPresent([Rule].self, forKey: .rules)
        var rulesDecoded0:[Rule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [Rule]()
            for structure0 in rulesContainer {
                rulesDecoded0?.append(structure0)
            }
        }
        rules = rulesDecoded0
        let visibilityConfigDecoded = try containerValues.decodeIfPresent(VisibilityConfig.self, forKey: .visibilityConfig)
        visibilityConfig = visibilityConfigDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
        let customResponseBodiesContainer = try containerValues.decodeIfPresent([String:CustomResponseBody].self, forKey: .customResponseBodies)
        var customResponseBodiesDecoded0: [String:CustomResponseBody]? = nil
        if let customResponseBodiesContainer = customResponseBodiesContainer {
            customResponseBodiesDecoded0 = [String:CustomResponseBody]()
            for (key0, customresponsebody0) in customResponseBodiesContainer {
                customResponseBodiesDecoded0?[key0] = customresponsebody0
            }
        }
        customResponseBodies = customResponseBodiesDecoded0
    }
}
