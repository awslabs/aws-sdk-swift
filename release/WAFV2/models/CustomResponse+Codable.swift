// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CustomResponse: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case customResponseBodyKey = "CustomResponseBodyKey"
        case responseCode = "ResponseCode"
        case responseHeaders = "ResponseHeaders"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customResponseBodyKey = customResponseBodyKey {
            try encodeContainer.encode(customResponseBodyKey, forKey: .customResponseBodyKey)
        }
        if let responseCode = responseCode {
            try encodeContainer.encode(responseCode, forKey: .responseCode)
        }
        if let responseHeaders = responseHeaders {
            var responseHeadersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .responseHeaders)
            for customhttpheaders0 in responseHeaders {
                try responseHeadersContainer.encode(customhttpheaders0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let responseCodeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .responseCode)
        responseCode = responseCodeDecoded
        let customResponseBodyKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customResponseBodyKey)
        customResponseBodyKey = customResponseBodyKeyDecoded
        let responseHeadersContainer = try containerValues.decodeIfPresent([CustomHTTPHeader].self, forKey: .responseHeaders)
        var responseHeadersDecoded0:[CustomHTTPHeader]? = nil
        if let responseHeadersContainer = responseHeadersContainer {
            responseHeadersDecoded0 = [CustomHTTPHeader]()
            for structure0 in responseHeadersContainer {
                responseHeadersDecoded0?.append(structure0)
            }
        }
        responseHeaders = responseHeadersDecoded0
    }
}
