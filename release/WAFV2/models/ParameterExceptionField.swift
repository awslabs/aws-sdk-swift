// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum ParameterExceptionField {
    case andStatement
    case bodyParsingFallbackBehavior
    case byteMatchStatement
    case customRequestHandling
    case customResponse
    case customResponseBody
    case defaultAction
    case entityLimit
    case excludedRule
    case fallbackBehavior
    case fieldToMatch
    case filterCondition
    case firewallManagerStatement
    case forwardedIpConfig
    case geoMatchStatement
    case headerName
    case ipAddress
    case ipAddressVersion
    case ipSet
    case ipSetForwardedIpConfig
    case ipSetReferenceStatement
    case jsonMatchPattern
    case jsonMatchScope
    case labelMatchStatement
    case loggingFilter
    case managedRuleSet
    case managedRuleSetStatement
    case metricName
    case notStatement
    case orStatement
    case overrideAction
    case position
    case rateBasedStatement
    case regexPatternReferenceStatement
    case regexPatternSet
    case resourceArn
    case resourceType
    case responseContentType
    case rule
    case ruleAction
    case ruleGroup
    case ruleGroupReferenceStatement
    case scopeValue
    case singleHeader
    case singleQueryArgument
    case sizeConstraintStatement
    case sqliMatchStatement
    case statement
    case tags
    case tagKeys
    case textTransformation
    case webAcl
    case xssMatchStatement
    case sdkUnknown(String)
}

extension ParameterExceptionField : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ParameterExceptionField] {
        return [
            .andStatement,
            .bodyParsingFallbackBehavior,
            .byteMatchStatement,
            .customRequestHandling,
            .customResponse,
            .customResponseBody,
            .defaultAction,
            .entityLimit,
            .excludedRule,
            .fallbackBehavior,
            .fieldToMatch,
            .filterCondition,
            .firewallManagerStatement,
            .forwardedIpConfig,
            .geoMatchStatement,
            .headerName,
            .ipAddress,
            .ipAddressVersion,
            .ipSet,
            .ipSetForwardedIpConfig,
            .ipSetReferenceStatement,
            .jsonMatchPattern,
            .jsonMatchScope,
            .labelMatchStatement,
            .loggingFilter,
            .managedRuleSet,
            .managedRuleSetStatement,
            .metricName,
            .notStatement,
            .orStatement,
            .overrideAction,
            .position,
            .rateBasedStatement,
            .regexPatternReferenceStatement,
            .regexPatternSet,
            .resourceArn,
            .resourceType,
            .responseContentType,
            .rule,
            .ruleAction,
            .ruleGroup,
            .ruleGroupReferenceStatement,
            .scopeValue,
            .singleHeader,
            .singleQueryArgument,
            .sizeConstraintStatement,
            .sqliMatchStatement,
            .statement,
            .tags,
            .tagKeys,
            .textTransformation,
            .webAcl,
            .xssMatchStatement,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .andStatement: return "AND_STATEMENT"
        case .bodyParsingFallbackBehavior: return "BODY_PARSING_FALLBACK_BEHAVIOR"
        case .byteMatchStatement: return "BYTE_MATCH_STATEMENT"
        case .customRequestHandling: return "CUSTOM_REQUEST_HANDLING"
        case .customResponse: return "CUSTOM_RESPONSE"
        case .customResponseBody: return "CUSTOM_RESPONSE_BODY"
        case .defaultAction: return "DEFAULT_ACTION"
        case .entityLimit: return "ENTITY_LIMIT"
        case .excludedRule: return "EXCLUDED_RULE"
        case .fallbackBehavior: return "FALLBACK_BEHAVIOR"
        case .fieldToMatch: return "FIELD_TO_MATCH"
        case .filterCondition: return "FILTER_CONDITION"
        case .firewallManagerStatement: return "FIREWALL_MANAGER_STATEMENT"
        case .forwardedIpConfig: return "FORWARDED_IP_CONFIG"
        case .geoMatchStatement: return "GEO_MATCH_STATEMENT"
        case .headerName: return "HEADER_NAME"
        case .ipAddress: return "IP_ADDRESS"
        case .ipAddressVersion: return "IP_ADDRESS_VERSION"
        case .ipSet: return "IP_SET"
        case .ipSetForwardedIpConfig: return "IP_SET_FORWARDED_IP_CONFIG"
        case .ipSetReferenceStatement: return "IP_SET_REFERENCE_STATEMENT"
        case .jsonMatchPattern: return "JSON_MATCH_PATTERN"
        case .jsonMatchScope: return "JSON_MATCH_SCOPE"
        case .labelMatchStatement: return "LABEL_MATCH_STATEMENT"
        case .loggingFilter: return "LOGGING_FILTER"
        case .managedRuleSet: return "MANAGED_RULE_SET"
        case .managedRuleSetStatement: return "MANAGED_RULE_SET_STATEMENT"
        case .metricName: return "METRIC_NAME"
        case .notStatement: return "NOT_STATEMENT"
        case .orStatement: return "OR_STATEMENT"
        case .overrideAction: return "OVERRIDE_ACTION"
        case .position: return "POSITION"
        case .rateBasedStatement: return "RATE_BASED_STATEMENT"
        case .regexPatternReferenceStatement: return "REGEX_PATTERN_REFERENCE_STATEMENT"
        case .regexPatternSet: return "REGEX_PATTERN_SET"
        case .resourceArn: return "RESOURCE_ARN"
        case .resourceType: return "RESOURCE_TYPE"
        case .responseContentType: return "RESPONSE_CONTENT_TYPE"
        case .rule: return "RULE"
        case .ruleAction: return "RULE_ACTION"
        case .ruleGroup: return "RULE_GROUP"
        case .ruleGroupReferenceStatement: return "RULE_GROUP_REFERENCE_STATEMENT"
        case .scopeValue: return "SCOPE_VALUE"
        case .singleHeader: return "SINGLE_HEADER"
        case .singleQueryArgument: return "SINGLE_QUERY_ARGUMENT"
        case .sizeConstraintStatement: return "SIZE_CONSTRAINT_STATEMENT"
        case .sqliMatchStatement: return "SQLI_MATCH_STATEMENT"
        case .statement: return "STATEMENT"
        case .tags: return "TAGS"
        case .tagKeys: return "TAG_KEYS"
        case .textTransformation: return "TEXT_TRANSFORMATION"
        case .webAcl: return "WEB_ACL"
        case .xssMatchStatement: return "XSS_MATCH_STATEMENT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ParameterExceptionField(rawValue: rawValue) ?? ParameterExceptionField.sdkUnknown(rawValue)
    }
}
