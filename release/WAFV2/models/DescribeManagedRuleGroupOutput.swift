// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DescribeManagedRuleGroupOutput: Equatable {
    /// <p>The labels that one or more rules in this rule group add to matching web ACLs. These labels are defined in the <code>RuleLabels</code> for a <a>Rule</a>.</p>
    public let availableLabels: [LabelSummary]?
    /// <p>The web ACL capacity units (WCUs) required for this rule group.
    ///          AWS WAF uses web ACL capacity units (WCU) to calculate and control the operating
    ///          resources that are used to run your rules, rule groups, and web ACLs. AWS WAF
    ///          calculates capacity differently for each rule type, to reflect each rule's relative
    ///          cost. Rule group capacity is fixed at creation, so users can plan their
    ///          web ACL WCU usage when they use a rule group.
    ///          The WCU limit for web ACLs is 1,500.  </p>
    public let capacity: Int
    /// <p>The labels that one or more rules in this rule group match against in label match statements. These labels are defined in a <code>LabelMatchStatement</code> specification, in the <a>Statement</a> definition of a rule.  </p>
    public let consumedLabels: [LabelSummary]?
    /// <p>The label namespace prefix for this rule group. All labels added by rules in this rule group have this prefix. </p>
    ///          <ul>
    ///             <li>
    ///                <p>The syntax for the label namespace prefix for a managed rule group is the following: </p>
    ///                <p>
    ///                   <code>awswaf:managed:<vendor>:<rule group name></code>:</p>
    ///             </li>
    ///             <li>
    ///                <p>When a rule with a label matches a web request, AWS WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon: </p>
    ///                <p>
    ///                   <code><label namespace>:<label from rule></code>
    ///                </p>
    ///
    ///             </li>
    ///          </ul>
    public let labelNamespace: String?
    /// <p></p>
    public let rules: [RuleSummary]?

    public init (
        availableLabels: [LabelSummary]? = nil,
        capacity: Int = 0,
        consumedLabels: [LabelSummary]? = nil,
        labelNamespace: String? = nil,
        rules: [RuleSummary]? = nil
    )
    {
        self.availableLabels = availableLabels
        self.capacity = capacity
        self.consumedLabels = consumedLabels
        self.labelNamespace = labelNamespace
        self.rules = rules
    }
}
