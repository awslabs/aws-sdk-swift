// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeManagedRuleGroupOutputBody: Equatable {
    public let capacity: Int
    public let rules: [RuleSummary]?
    public let labelNamespace: String?
    public let availableLabels: [LabelSummary]?
    public let consumedLabels: [LabelSummary]?
}

extension DescribeManagedRuleGroupOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case availableLabels = "AvailableLabels"
        case capacity = "Capacity"
        case consumedLabels = "ConsumedLabels"
        case labelNamespace = "LabelNamespace"
        case rules = "Rules"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let capacityDecoded = try containerValues.decode(Int.self, forKey: .capacity)
        capacity = capacityDecoded
        let rulesContainer = try containerValues.decodeIfPresent([RuleSummary].self, forKey: .rules)
        var rulesDecoded0:[RuleSummary]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [RuleSummary]()
            for structure0 in rulesContainer {
                rulesDecoded0?.append(structure0)
            }
        }
        rules = rulesDecoded0
        let labelNamespaceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .labelNamespace)
        labelNamespace = labelNamespaceDecoded
        let availableLabelsContainer = try containerValues.decodeIfPresent([LabelSummary].self, forKey: .availableLabels)
        var availableLabelsDecoded0:[LabelSummary]? = nil
        if let availableLabelsContainer = availableLabelsContainer {
            availableLabelsDecoded0 = [LabelSummary]()
            for structure0 in availableLabelsContainer {
                availableLabelsDecoded0?.append(structure0)
            }
        }
        availableLabels = availableLabelsDecoded0
        let consumedLabelsContainer = try containerValues.decodeIfPresent([LabelSummary].self, forKey: .consumedLabels)
        var consumedLabelsDecoded0:[LabelSummary]? = nil
        if let consumedLabelsContainer = consumedLabelsContainer {
            consumedLabelsDecoded0 = [LabelSummary]()
            for structure0 in consumedLabelsContainer {
                consumedLabelsDecoded0?.append(structure0)
            }
        }
        consumedLabels = consumedLabelsDecoded0
    }
}
