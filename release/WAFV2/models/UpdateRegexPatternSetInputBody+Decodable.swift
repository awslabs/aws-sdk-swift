// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateRegexPatternSetInputBody: Equatable {
    public let name: String?
    public let scope: Scope?
    public let id: String?
    public let description: String?
    public let regularExpressionList: [Regex]?
    public let lockToken: String?
}

extension UpdateRegexPatternSetInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case regularExpressionList = "RegularExpressionList"
        case scope = "Scope"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let regularExpressionListContainer = try containerValues.decodeIfPresent([Regex].self, forKey: .regularExpressionList)
        var regularExpressionListDecoded0:[Regex]? = nil
        if let regularExpressionListContainer = regularExpressionListContainer {
            regularExpressionListDecoded0 = [Regex]()
            for structure0 in regularExpressionListContainer {
                regularExpressionListDecoded0?.append(structure0)
            }
        }
        regularExpressionList = regularExpressionListDecoded0
        let lockTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
    }
}
