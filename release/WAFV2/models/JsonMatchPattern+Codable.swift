// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension JsonMatchPattern: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case all = "All"
        case includedPaths = "IncludedPaths"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let all = all {
            try encodeContainer.encode(all, forKey: .all)
        }
        if let includedPaths = includedPaths {
            var includedPathsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includedPaths)
            for jsonpointerpaths0 in includedPaths {
                try includedPathsContainer.encode(jsonpointerpaths0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allDecoded = try containerValues.decodeIfPresent(All.self, forKey: .all)
        all = allDecoded
        let includedPathsContainer = try containerValues.decodeIfPresent([String].self, forKey: .includedPaths)
        var includedPathsDecoded0:[String]? = nil
        if let includedPathsContainer = includedPathsContainer {
            includedPathsDecoded0 = [String]()
            for string0 in includedPathsContainer {
                includedPathsDecoded0?.append(string0)
            }
        }
        includedPaths = includedPathsDecoded0
    }
}
