// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DefaultAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allow = "Allow"
        case block = "Block"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allow = allow {
            try encodeContainer.encode(allow, forKey: .allow)
        }
        if let block = block {
            try encodeContainer.encode(block, forKey: .block)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blockDecoded = try containerValues.decodeIfPresent(BlockAction.self, forKey: .block)
        block = blockDecoded
        let allowDecoded = try containerValues.decodeIfPresent(AllowAction.self, forKey: .allow)
        allow = allowDecoded
    }
}
