// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListRuleGroupsOutputBody: Equatable {
    public let nextMarker: String?
    public let ruleGroups: [RuleGroupSummary]?
}

extension ListRuleGroupsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextMarker = "NextMarker"
        case ruleGroups = "RuleGroups"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let ruleGroupsContainer = try containerValues.decodeIfPresent([RuleGroupSummary].self, forKey: .ruleGroups)
        var ruleGroupsDecoded0:[RuleGroupSummary]? = nil
        if let ruleGroupsContainer = ruleGroupsContainer {
            ruleGroupsDecoded0 = [RuleGroupSummary]()
            for structure0 in ruleGroupsContainer {
                ruleGroupsDecoded0?.append(structure0)
            }
        }
        ruleGroups = ruleGroupsDecoded0
    }
}
