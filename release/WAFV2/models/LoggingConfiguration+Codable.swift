// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LoggingConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case logDestinationConfigs = "LogDestinationConfigs"
        case loggingFilter = "LoggingFilter"
        case managedByFirewallManager = "ManagedByFirewallManager"
        case redactedFields = "RedactedFields"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logDestinationConfigs = logDestinationConfigs {
            var logDestinationConfigsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logDestinationConfigs)
            for logdestinationconfigs0 in logDestinationConfigs {
                try logDestinationConfigsContainer.encode(logdestinationconfigs0)
            }
        }
        if let loggingFilter = loggingFilter {
            try encodeContainer.encode(loggingFilter, forKey: .loggingFilter)
        }
        if managedByFirewallManager != false {
            try encodeContainer.encode(managedByFirewallManager, forKey: .managedByFirewallManager)
        }
        if let redactedFields = redactedFields {
            var redactedFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .redactedFields)
            for redactedfields0 in redactedFields {
                try redactedFieldsContainer.encode(redactedfields0)
            }
        }
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let logDestinationConfigsContainer = try containerValues.decodeIfPresent([String].self, forKey: .logDestinationConfigs)
        var logDestinationConfigsDecoded0:[String]? = nil
        if let logDestinationConfigsContainer = logDestinationConfigsContainer {
            logDestinationConfigsDecoded0 = [String]()
            for string0 in logDestinationConfigsContainer {
                logDestinationConfigsDecoded0?.append(string0)
            }
        }
        logDestinationConfigs = logDestinationConfigsDecoded0
        let redactedFieldsContainer = try containerValues.decodeIfPresent([FieldToMatch].self, forKey: .redactedFields)
        var redactedFieldsDecoded0:[FieldToMatch]? = nil
        if let redactedFieldsContainer = redactedFieldsContainer {
            redactedFieldsDecoded0 = [FieldToMatch]()
            for structure0 in redactedFieldsContainer {
                redactedFieldsDecoded0?.append(structure0)
            }
        }
        redactedFields = redactedFieldsDecoded0
        let managedByFirewallManagerDecoded = try containerValues.decode(Bool.self, forKey: .managedByFirewallManager)
        managedByFirewallManager = managedByFirewallManagerDecoded
        let loggingFilterDecoded = try containerValues.decodeIfPresent(LoggingFilter.self, forKey: .loggingFilter)
        loggingFilter = loggingFilterDecoded
    }
}
