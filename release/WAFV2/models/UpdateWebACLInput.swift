// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct UpdateWebACLInput: Equatable {
    /// <p>A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the web ACL, and then use them in the rules and default actions that you define in the web ACL. </p>
    ///          <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in AWS WAF</a> in the
    ///          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. </p>
    ///          <p>For information about the limits on count and size for custom request and response settings, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">AWS WAF quotas</a> in the
    ///          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. </p>
    public let customResponseBodies: [String:CustomResponseBody]?
    /// <p>The action to perform if none of the <code>Rules</code> contained in the <code>WebACL</code> match. </p>
    public let defaultAction: DefaultAction?
    /// <p>A description of the Web ACL that helps with identification. </p>
    public let description: String?
    /// <p>The unique identifier for the Web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    public let id: String?
    /// <p>A token used for optimistic locking. AWS WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. AWS WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another get, and use the new token returned by that operation. </p>
    public let lockToken: String?
    /// <p>The name of the Web ACL. You cannot change the name of a Web ACL after you create it.</p>
    public let name: String?
    /// <p>The <a>Rule</a> statements used to identify the web requests that you
    ///          want to allow, block, or count. Each rule includes one top-level statement that AWS WAF uses to identify matching
    ///          web requests, and parameters that govern how AWS WAF handles them.
    ///       </p>
    public let rules: [Rule]?
    /// <p>Specifies whether this is for an AWS CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an API Gateway REST API, or an AppSync GraphQL API.  </p>
    ///          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
    ///          <ul>
    ///             <li>
    ///                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
    ///             </li>
    ///             <li>
    ///                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
    ///             </li>
    ///          </ul>
    public let scope: Scope?
    /// <p>Defines and enables Amazon CloudWatch metrics and web request sample collection.  </p>
    public let visibilityConfig: VisibilityConfig?

    public init (
        customResponseBodies: [String:CustomResponseBody]? = nil,
        defaultAction: DefaultAction? = nil,
        description: String? = nil,
        id: String? = nil,
        lockToken: String? = nil,
        name: String? = nil,
        rules: [Rule]? = nil,
        scope: Scope? = nil,
        visibilityConfig: VisibilityConfig? = nil
    )
    {
        self.customResponseBodies = customResponseBodies
        self.defaultAction = defaultAction
        self.description = description
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.rules = rules
        self.scope = scope
        self.visibilityConfig = visibilityConfig
    }
}
