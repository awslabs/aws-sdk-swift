// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Condition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actionCondition = "ActionCondition"
        case labelNameCondition = "LabelNameCondition"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionCondition = actionCondition {
            try encodeContainer.encode(actionCondition, forKey: .actionCondition)
        }
        if let labelNameCondition = labelNameCondition {
            try encodeContainer.encode(labelNameCondition, forKey: .labelNameCondition)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionConditionDecoded = try containerValues.decodeIfPresent(ActionCondition.self, forKey: .actionCondition)
        actionCondition = actionConditionDecoded
        let labelNameConditionDecoded = try containerValues.decodeIfPresent(LabelNameCondition.self, forKey: .labelNameCondition)
        labelNameCondition = labelNameConditionDecoded
    }
}
