// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[DescribeDocumentVersionsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeDocumentVersionsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeDocumentVersionsOutputResponse`
extension WorkDocsClient {
    public func describeDocumentVersionsPaginated(input: DescribeDocumentVersionsInput) -> ClientRuntime.PaginatorSequence<DescribeDocumentVersionsInput, DescribeDocumentVersionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeDocumentVersionsInput, DescribeDocumentVersionsOutputResponse>(input: input, inputKey: \DescribeDocumentVersionsInput.marker, outputKey: \DescribeDocumentVersionsOutputResponse.marker, paginationFunction: self.describeDocumentVersions(input:))
    }
}

extension DescribeDocumentVersionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeDocumentVersionsInput {
        return DescribeDocumentVersionsInput(
            authenticationToken: self.authenticationToken,
            documentId: self.documentId,
            fields: self.fields,
            include: self.include,
            limit: self.limit,
            marker: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `describeDocumentVersionsPaginated`
/// to access the nested member `[WorkDocsClientTypes.DocumentVersionMetadata]`
/// - Returns: `[WorkDocsClientTypes.DocumentVersionMetadata]`
extension PaginatorSequence where Input == DescribeDocumentVersionsInput, Output == DescribeDocumentVersionsOutputResponse {
    public func documentVersions() async throws -> [WorkDocsClientTypes.DocumentVersionMetadata] {
        return try await self.asyncCompactMap { item in item.documentVersions }
    }
}

/// Paginate over `[DescribeFolderContentsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeFolderContentsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeFolderContentsOutputResponse`
extension WorkDocsClient {
    public func describeFolderContentsPaginated(input: DescribeFolderContentsInput) -> ClientRuntime.PaginatorSequence<DescribeFolderContentsInput, DescribeFolderContentsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeFolderContentsInput, DescribeFolderContentsOutputResponse>(input: input, inputKey: \DescribeFolderContentsInput.marker, outputKey: \DescribeFolderContentsOutputResponse.marker, paginationFunction: self.describeFolderContents(input:))
    }
}

extension DescribeFolderContentsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeFolderContentsInput {
        return DescribeFolderContentsInput(
            authenticationToken: self.authenticationToken,
            folderId: self.folderId,
            include: self.include,
            limit: self.limit,
            marker: token,
            order: self.order,
            sort: self.sort,
            type: self.type
        )}
}

/// Paginate over `[DescribeUsersOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeUsersInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeUsersOutputResponse`
extension WorkDocsClient {
    public func describeUsersPaginated(input: DescribeUsersInput) -> ClientRuntime.PaginatorSequence<DescribeUsersInput, DescribeUsersOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeUsersInput, DescribeUsersOutputResponse>(input: input, inputKey: \DescribeUsersInput.marker, outputKey: \DescribeUsersOutputResponse.marker, paginationFunction: self.describeUsers(input:))
    }
}

extension DescribeUsersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeUsersInput {
        return DescribeUsersInput(
            authenticationToken: self.authenticationToken,
            fields: self.fields,
            include: self.include,
            limit: self.limit,
            marker: token,
            order: self.order,
            organizationId: self.organizationId,
            query: self.query,
            sort: self.sort,
            userIds: self.userIds
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `describeUsersPaginated`
/// to access the nested member `[WorkDocsClientTypes.User]`
/// - Returns: `[WorkDocsClientTypes.User]`
extension PaginatorSequence where Input == DescribeUsersInput, Output == DescribeUsersOutputResponse {
    public func users() async throws -> [WorkDocsClientTypes.User] {
        return try await self.asyncCompactMap { item in item.users }
    }
}
