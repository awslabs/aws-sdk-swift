// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ConfigureLogsOutputBody: Equatable {
    public let arn: String?
    public let authorization: Authorization?
    public let domainName: String?
    public let egressAccessLogs: EgressAccessLogs?
    public let id: String?
    public let tags: [String:String]?
}

extension ConfigureLogsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case authorization = "authorization"
        case domainName = "domainName"
        case egressAccessLogs = "egressAccessLogs"
        case id = "id"
        case tags = "tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let authorizationDecoded = try containerValues.decodeIfPresent(Authorization.self, forKey: .authorization)
        authorization = authorizationDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let egressAccessLogsDecoded = try containerValues.decodeIfPresent(EgressAccessLogs.self, forKey: .egressAccessLogs)
        egressAccessLogs = egressAccessLogsDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                tagsDecoded0?[key0] = __string0
            }
        }
        tags = tagsDecoded0
    }
}
