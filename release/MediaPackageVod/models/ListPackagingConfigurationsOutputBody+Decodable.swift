// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListPackagingConfigurationsOutputBody: Equatable {
    public let nextToken: String?
    public let packagingConfigurations: [PackagingConfiguration]?
}

extension ListPackagingConfigurationsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "nextToken"
        case packagingConfigurations = "packagingConfigurations"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let packagingConfigurationsContainer = try containerValues.decodeIfPresent([PackagingConfiguration].self, forKey: .packagingConfigurations)
        var packagingConfigurationsDecoded0:[PackagingConfiguration]? = nil
        if let packagingConfigurationsContainer = packagingConfigurationsContainer {
            packagingConfigurationsDecoded0 = [PackagingConfiguration]()
            for structure0 in packagingConfigurationsContainer {
                packagingConfigurationsDecoded0?.append(structure0)
            }
        }
        packagingConfigurations = packagingConfigurationsDecoded0
    }
}
