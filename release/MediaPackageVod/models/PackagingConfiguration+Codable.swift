// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PackagingConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "arn"
        case cmafPackage = "cmafPackage"
        case dashPackage = "dashPackage"
        case hlsPackage = "hlsPackage"
        case id = "id"
        case mssPackage = "mssPackage"
        case packagingGroupId = "packagingGroupId"
        case tags = "tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let cmafPackage = cmafPackage {
            try encodeContainer.encode(cmafPackage, forKey: .cmafPackage)
        }
        if let dashPackage = dashPackage {
            try encodeContainer.encode(dashPackage, forKey: .dashPackage)
        }
        if let hlsPackage = hlsPackage {
            try encodeContainer.encode(hlsPackage, forKey: .hlsPackage)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let mssPackage = mssPackage {
            try encodeContainer.encode(mssPackage, forKey: .mssPackage)
        }
        if let packagingGroupId = packagingGroupId {
            try encodeContainer.encode(packagingGroupId, forKey: .packagingGroupId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let cmafPackageDecoded = try containerValues.decodeIfPresent(CmafPackage.self, forKey: .cmafPackage)
        cmafPackage = cmafPackageDecoded
        let dashPackageDecoded = try containerValues.decodeIfPresent(DashPackage.self, forKey: .dashPackage)
        dashPackage = dashPackageDecoded
        let hlsPackageDecoded = try containerValues.decodeIfPresent(HlsPackage.self, forKey: .hlsPackage)
        hlsPackage = hlsPackageDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let mssPackageDecoded = try containerValues.decodeIfPresent(MssPackage.self, forKey: .mssPackage)
        mssPackage = mssPackageDecoded
        let packagingGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .packagingGroupId)
        packagingGroupId = packagingGroupIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                tagsDecoded0?[key0] = __string0
            }
        }
        tags = tagsDecoded0
    }
}
