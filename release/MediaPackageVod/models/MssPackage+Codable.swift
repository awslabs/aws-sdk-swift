// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MssPackage: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case encryption = "encryption"
        case mssManifests = "mssManifests"
        case segmentDurationSeconds = "segmentDurationSeconds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryption = encryption {
            try encodeContainer.encode(encryption, forKey: .encryption)
        }
        if let mssManifests = mssManifests {
            var mssManifestsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mssManifests)
            for __listofmssmanifest0 in mssManifests {
                try mssManifestsContainer.encode(__listofmssmanifest0)
            }
        }
        if segmentDurationSeconds != 0 {
            try encodeContainer.encode(segmentDurationSeconds, forKey: .segmentDurationSeconds)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let encryptionDecoded = try containerValues.decodeIfPresent(MssEncryption.self, forKey: .encryption)
        encryption = encryptionDecoded
        let mssManifestsContainer = try containerValues.decodeIfPresent([MssManifest].self, forKey: .mssManifests)
        var mssManifestsDecoded0:[MssManifest]? = nil
        if let mssManifestsContainer = mssManifestsContainer {
            mssManifestsDecoded0 = [MssManifest]()
            for structure0 in mssManifestsContainer {
                mssManifestsDecoded0?.append(structure0)
            }
        }
        mssManifests = mssManifestsDecoded0
        let segmentDurationSecondsDecoded = try containerValues.decode(Int.self, forKey: .segmentDurationSeconds)
        segmentDurationSeconds = segmentDurationSecondsDecoded
    }
}
