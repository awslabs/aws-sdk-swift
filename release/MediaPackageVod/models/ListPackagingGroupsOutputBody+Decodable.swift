// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListPackagingGroupsOutputBody: Equatable {
    public let nextToken: String?
    public let packagingGroups: [PackagingGroup]?
}

extension ListPackagingGroupsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "nextToken"
        case packagingGroups = "packagingGroups"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let packagingGroupsContainer = try containerValues.decodeIfPresent([PackagingGroup].self, forKey: .packagingGroups)
        var packagingGroupsDecoded0:[PackagingGroup]? = nil
        if let packagingGroupsContainer = packagingGroupsContainer {
            packagingGroupsDecoded0 = [PackagingGroup]()
            for structure0 in packagingGroupsContainer {
                packagingGroupsDecoded0?.append(structure0)
            }
        }
        packagingGroups = packagingGroupsDecoded0
    }
}
