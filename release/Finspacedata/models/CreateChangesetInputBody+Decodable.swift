// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateChangesetInputBody: Equatable {
    public let changeType: ChangeType?
    public let sourceType: SourceType?
    public let sourceParams: [String:String]?
    public let formatType: FormatType?
    public let formatParams: [String:String]?
    public let tags: [String:String]?
}

extension CreateChangesetInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case changeType
        case formatParams
        case formatType
        case sourceParams
        case sourceType
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeTypeDecoded = try containerValues.decodeIfPresent(ChangeType.self, forKey: .changeType)
        changeType = changeTypeDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(SourceType.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        let sourceParamsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .sourceParams)
        var sourceParamsDecoded0: [String:String]? = nil
        if let sourceParamsContainer = sourceParamsContainer {
            sourceParamsDecoded0 = [String:String]()
            for (key0, stringmapvalue0) in sourceParamsContainer {
                sourceParamsDecoded0?[key0] = stringmapvalue0
            }
        }
        sourceParams = sourceParamsDecoded0
        let formatTypeDecoded = try containerValues.decodeIfPresent(FormatType.self, forKey: .formatType)
        formatType = formatTypeDecoded
        let formatParamsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .formatParams)
        var formatParamsDecoded0: [String:String]? = nil
        if let formatParamsContainer = formatParamsContainer {
            formatParamsDecoded0 = [String:String]()
            for (key0, stringmapvalue0) in formatParamsContainer {
                formatParamsDecoded0?[key0] = stringmapvalue0
            }
        }
        formatParams = formatParamsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, stringmapvalue0) in tagsContainer {
                tagsDecoded0?[key0] = stringmapvalue0
            }
        }
        tags = tagsDecoded0
    }
}
