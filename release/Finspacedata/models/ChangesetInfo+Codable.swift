// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ChangesetInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case changeType
        case changesetArn
        case changesetLabels
        case createTimestamp
        case datasetId
        case errorInfo
        case formatParams
        case formatType
        case id
        case sourceParams
        case sourceType
        case status
        case updatedByChangesetId
        case updatesChangesetId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeType = changeType {
            try encodeContainer.encode(changeType.rawValue, forKey: .changeType)
        }
        if let changesetArn = changesetArn {
            try encodeContainer.encode(changesetArn, forKey: .changesetArn)
        }
        if let changesetLabels = changesetLabels {
            var changesetLabelsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .changesetLabels)
            for (dictKey0, stringmap0) in changesetLabels {
                try changesetLabelsContainer.encode(stringmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let createTimestamp = createTimestamp {
            try encodeContainer.encode(createTimestamp.timeIntervalSince1970, forKey: .createTimestamp)
        }
        if let datasetId = datasetId {
            try encodeContainer.encode(datasetId, forKey: .datasetId)
        }
        if let errorInfo = errorInfo {
            try encodeContainer.encode(errorInfo, forKey: .errorInfo)
        }
        if let formatParams = formatParams {
            var formatParamsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .formatParams)
            for (dictKey0, stringmap0) in formatParams {
                try formatParamsContainer.encode(stringmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let formatType = formatType {
            try encodeContainer.encode(formatType.rawValue, forKey: .formatType)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let sourceParams = sourceParams {
            var sourceParamsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .sourceParams)
            for (dictKey0, stringmap0) in sourceParams {
                try sourceParamsContainer.encode(stringmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let sourceType = sourceType {
            try encodeContainer.encode(sourceType.rawValue, forKey: .sourceType)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let updatedByChangesetId = updatedByChangesetId {
            try encodeContainer.encode(updatedByChangesetId, forKey: .updatedByChangesetId)
        }
        if let updatesChangesetId = updatesChangesetId {
            try encodeContainer.encode(updatesChangesetId, forKey: .updatesChangesetId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let changesetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .changesetArn)
        changesetArn = changesetArnDecoded
        let datasetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .datasetId)
        datasetId = datasetIdDecoded
        let changeTypeDecoded = try containerValues.decodeIfPresent(ChangeType.self, forKey: .changeType)
        changeType = changeTypeDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(SourceType.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        let sourceParamsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .sourceParams)
        var sourceParamsDecoded0: [String:String]? = nil
        if let sourceParamsContainer = sourceParamsContainer {
            sourceParamsDecoded0 = [String:String]()
            for (key0, stringmapvalue0) in sourceParamsContainer {
                sourceParamsDecoded0?[key0] = stringmapvalue0
            }
        }
        sourceParams = sourceParamsDecoded0
        let formatTypeDecoded = try containerValues.decodeIfPresent(FormatType.self, forKey: .formatType)
        formatType = formatTypeDecoded
        let formatParamsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .formatParams)
        var formatParamsDecoded0: [String:String]? = nil
        if let formatParamsContainer = formatParamsContainer {
            formatParamsDecoded0 = [String:String]()
            for (key0, stringmapvalue0) in formatParamsContainer {
                formatParamsDecoded0?[key0] = stringmapvalue0
            }
        }
        formatParams = formatParamsDecoded0
        let createTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createTimestamp)
        createTimestamp = createTimestampDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ChangesetStatus.self, forKey: .status)
        status = statusDecoded
        let errorInfoDecoded = try containerValues.decodeIfPresent(ErrorInfo.self, forKey: .errorInfo)
        errorInfo = errorInfoDecoded
        let changesetLabelsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .changesetLabels)
        var changesetLabelsDecoded0: [String:String]? = nil
        if let changesetLabelsContainer = changesetLabelsContainer {
            changesetLabelsDecoded0 = [String:String]()
            for (key0, stringmapvalue0) in changesetLabelsContainer {
                changesetLabelsDecoded0?[key0] = stringmapvalue0
            }
        }
        changesetLabels = changesetLabelsDecoded0
        let updatesChangesetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .updatesChangesetId)
        updatesChangesetId = updatesChangesetIdDecoded
        let updatedByChangesetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .updatedByChangesetId)
        updatedByChangesetId = updatedByChangesetIdDecoded
    }
}
