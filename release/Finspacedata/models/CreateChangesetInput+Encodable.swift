// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateChangesetInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case changeType
        case formatParams
        case formatType
        case sourceParams
        case sourceType
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeType = changeType {
            try encodeContainer.encode(changeType.rawValue, forKey: .changeType)
        }
        if let formatParams = formatParams {
            var formatParamsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .formatParams)
            for (dictKey0, stringmap0) in formatParams {
                try formatParamsContainer.encode(stringmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let formatType = formatType {
            try encodeContainer.encode(formatType.rawValue, forKey: .formatType)
        }
        if let sourceParams = sourceParams {
            var sourceParamsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .sourceParams)
            for (dictKey0, stringmap0) in sourceParams {
                try sourceParamsContainer.encode(stringmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let sourceType = sourceType {
            try encodeContainer.encode(sourceType.rawValue, forKey: .sourceType)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, stringmap0) in tags {
                try tagsContainer.encode(stringmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}
