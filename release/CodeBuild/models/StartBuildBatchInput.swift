// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct StartBuildBatchInput: Equatable {
    /// <p>An array of <code>ProjectArtifacts</code> objects that contains information about the
    ///             build output artifact overrides for the build project.</p>
    public let artifactsOverride: ProjectArtifacts?
    /// <p>A <code>BuildBatchConfigOverride</code> object that contains batch build configuration
    ///             overrides.</p>
    public let buildBatchConfigOverride: ProjectBuildBatchConfig?
    /// <p>Overrides the build timeout specified in the batch build project.</p>
    public let buildTimeoutInMinutesOverride: Int?
    /// <p>A buildspec file declaration that overrides, for this build only, the latest one
    ///         already defined in the build project.</p>
    ///          <p>If this value is set, it can be either an inline buildspec definition, the path to an
    ///         alternate buildspec file relative to the value of the built-in
    ///         <code>CODEBUILD_SRC_DIR</code> environment variable, or the path to an S3 bucket.
    ///         The bucket must be in the same AWS Region as the build project. Specify the buildspec
    ///         file using its ARN (for example,
    ///         <code>arn:aws:s3:::my-codebuild-sample2/buildspec.yml</code>). If this value is not
    ///         provided or is set to an empty string, the source code must contain a buildspec file in
    ///         its root directory. For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec-ref-name-storage">Buildspec File Name and Storage Location</a>. </p>
    public let buildspecOverride: String?
    /// <p>A <code>ProjectCache</code> object that specifies cache overrides.</p>
    public let cacheOverride: ProjectCache?
    /// <p>The name of a certificate for this batch build that overrides the one specified in the batch build
    ///         project.</p>
    public let certificateOverride: String?
    /// <p>The name of a compute type for this batch build that overrides the one specified in the
    ///         batch build project.</p>
    public let computeTypeOverride: ComputeType?
    /// <p>Specifies if session debugging is enabled for this batch build. For more information, see
    ///   <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/session-manager.html">Viewing a running build in Session Manager</a>. Batch session debugging is not supported for matrix batch builds.</p>
    public let debugSessionEnabled: Bool?
    /// <p>The AWS Key Management Service (AWS KMS) customer master key (CMK) that overrides the one specified in the batch build
    ///         project. The CMK key encrypts the build output artifacts.</p>
    ///          <note>
    ///             <p>You can use a cross-account KMS key to encrypt the build output artifacts if your
    ///           service role has permission to that key. </p>
    ///          </note>
    ///          <p>You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using
    ///         the format <code>alias/<alias-name></code>).</p>
    public let encryptionKeyOverride: String?
    /// <p>A container type for this batch build that overrides the one specified in the batch build
    ///         project.</p>
    public let environmentTypeOverride: EnvironmentType?
    /// <p>An array of <code>EnvironmentVariable</code> objects that override, or add to, the
    ///             environment variables defined in the batch build project.</p>
    public let environmentVariablesOverride: [EnvironmentVariable]?
    /// <p>The user-defined depth of history, with a minimum value of 0, that overrides, for this
    ///         batch build only, any previous depth of history defined in the batch build project.</p>
    public let gitCloneDepthOverride: Int?
    /// <p>A <code>GitSubmodulesConfig</code> object that overrides the Git submodules configuration
    ///             for this batch build.</p>
    public let gitSubmodulesConfigOverride: GitSubmodulesConfig?
    /// <p>A unique, case sensitive identifier you provide to ensure the idempotency of the
    ///                 <code>StartBuildBatch</code> request. The token is included in the
    ///                 <code>StartBuildBatch</code> request and is valid for five minutes. If you repeat
    ///             the <code>StartBuildBatch</code> request with the same token, but change a parameter,
    ///             AWS CodeBuild returns a parameter mismatch error.</p>
    public let idempotencyToken: String?
    /// <p>The name of an image for this batch build that overrides the one specified in the batch
    ///             build project.</p>
    public let imageOverride: String?
    /// <p>The type of credentials AWS CodeBuild uses to pull images in your batch build. There are two valid
    ///         values: </p>
    ///         <dl>
    ///             <dt>CODEBUILD</dt>
    ///             <dd>
    ///                     <p>Specifies that AWS CodeBuild uses its own credentials. This requires that you
    ///                         modify your ECR repository policy to trust AWS CodeBuild's service principal.</p>
    ///                 </dd>
    ///             <dt>SERVICE_ROLE</dt>
    ///             <dd>
    ///                     <p>Specifies that AWS CodeBuild uses your build project's service role. </p>
    ///                 </dd>
    ///          </dl>
    ///          <p>When using a cross-account or private registry image, you must use
    ///                 <code>SERVICE_ROLE</code> credentials. When using an AWS CodeBuild curated image,
    ///             you must use <code>CODEBUILD</code> credentials. </p>
    public let imagePullCredentialsTypeOverride: ImagePullCredentialsType?
    /// <p>Enable this flag to override the insecure SSL setting that is specified in the batch build
    ///         project. The insecure SSL setting determines whether to ignore SSL warnings while
    ///         connecting to the project source code. This override applies only if the build's source
    ///         is GitHub Enterprise.</p>
    public let insecureSslOverride: Bool?
    /// <p>A <code>LogsConfig</code> object that override the log settings defined in the batch build
    ///             project.</p>
    public let logsConfigOverride: LogsConfig?
    /// <p>Enable this flag to override privileged mode in the batch build project.</p>
    public let privilegedModeOverride: Bool?
    /// <p>The name of the project.</p>
    public let projectName: String?
    /// <p>The number of minutes a batch build is allowed to be queued before it times out.</p>
    public let queuedTimeoutInMinutesOverride: Int?
    /// <p>A <code>RegistryCredential</code> object that overrides credentials for access to a
    ///             private registry.</p>
    public let registryCredentialOverride: RegistryCredential?
    /// <p>Set to <code>true</code> to report to your source provider the status of a batch build's
    ///             start and completion. If you use this option with a source provider other than GitHub,
    ///             GitHub Enterprise, or Bitbucket, an <code>invalidInputException</code> is thrown. </p>
    ///          <note>
    ///             <p>The status of a build triggered by a webhook is always reported to your source
    ///           provider. </p>
    ///          </note>
    public let reportBuildBatchStatusOverride: Bool?
    /// <p>An array of <code>ProjectArtifacts</code> objects that override the secondary artifacts
    ///             defined in the batch build project.</p>
    public let secondaryArtifactsOverride: [ProjectArtifacts]?
    /// <p>An array of <code>ProjectSource</code> objects that override the secondary sources
    ///         defined in the batch build project.</p>
    public let secondarySourcesOverride: [ProjectSource]?
    /// <p>An array of <code>ProjectSourceVersion</code> objects that override the secondary source
    ///             versions in the batch build project.</p>
    public let secondarySourcesVersionOverride: [ProjectSourceVersion]?
    /// <p>The name of a service role for this batch build that overrides the one specified in the
    ///         batch build project.</p>
    public let serviceRoleOverride: String?
    /// <p>A <code>SourceAuth</code> object that overrides the one defined in the batch build
    ///             project. This override applies only if the build project's source is BitBucket or
    ///             GitHub.</p>
    public let sourceAuthOverride: SourceAuth?
    /// <p>A location that overrides, for this batch build, the source location defined in
    ///         the batch build project.</p>
    public let sourceLocationOverride: String?
    /// <p>The source input type that overrides the source input defined in the batch
    ///         build project.</p>
    public let sourceTypeOverride: SourceType?
    /// <p>The version of the batch build input to be built, for this build only. If not specified,
    ///             the latest version is used. If specified, the contents depends on the source
    ///             provider:</p>
    ///         <dl>
    ///             <dt>AWS CodeCommit</dt>
    ///             <dd>
    ///                     <p>The commit ID, branch, or Git tag to use.</p>
    ///                 </dd>
    ///             <dt>GitHub</dt>
    ///             <dd>
    ///                     <p>The commit ID, pull request ID, branch name, or tag name that corresponds
    ///                         to the version of the source code you want to build. If a pull request ID is
    ///                         specified, it must use the format <code>pr/pull-request-ID</code> (for
    ///                         example <code>pr/25</code>). If a branch name is specified, the branch's
    ///                         HEAD commit ID is used. If not specified, the default branch's HEAD commit
    ///                         ID is used.</p>
    ///                 </dd>
    ///             <dt>Bitbucket</dt>
    ///             <dd>
    ///                     <p>The commit ID, branch name, or tag name that corresponds to the version of
    ///                         the source code you want to build. If a branch name is specified, the
    ///                         branch's HEAD commit ID is used. If not specified, the default branch's HEAD
    ///                         commit ID is used.</p>
    ///                 </dd>
    ///             <dt>Amazon S3</dt>
    ///             <dd>
    ///                     <p>The version ID of the object that represents the build input ZIP file to
    ///                         use.</p>
    ///                 </dd>
    ///          </dl>
    ///          <p>If <code>sourceVersion</code> is specified at the project level, then this
    ///                 <code>sourceVersion</code> (at the build level) takes precedence. </p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html">Source Version Sample
    ///                 with CodeBuild</a> in the <i>AWS CodeBuild User Guide</i>. </p>
    public let sourceVersion: String?

    public init (
        artifactsOverride: ProjectArtifacts? = nil,
        buildBatchConfigOverride: ProjectBuildBatchConfig? = nil,
        buildTimeoutInMinutesOverride: Int? = nil,
        buildspecOverride: String? = nil,
        cacheOverride: ProjectCache? = nil,
        certificateOverride: String? = nil,
        computeTypeOverride: ComputeType? = nil,
        debugSessionEnabled: Bool? = nil,
        encryptionKeyOverride: String? = nil,
        environmentTypeOverride: EnvironmentType? = nil,
        environmentVariablesOverride: [EnvironmentVariable]? = nil,
        gitCloneDepthOverride: Int? = nil,
        gitSubmodulesConfigOverride: GitSubmodulesConfig? = nil,
        idempotencyToken: String? = nil,
        imageOverride: String? = nil,
        imagePullCredentialsTypeOverride: ImagePullCredentialsType? = nil,
        insecureSslOverride: Bool? = nil,
        logsConfigOverride: LogsConfig? = nil,
        privilegedModeOverride: Bool? = nil,
        projectName: String? = nil,
        queuedTimeoutInMinutesOverride: Int? = nil,
        registryCredentialOverride: RegistryCredential? = nil,
        reportBuildBatchStatusOverride: Bool? = nil,
        secondaryArtifactsOverride: [ProjectArtifacts]? = nil,
        secondarySourcesOverride: [ProjectSource]? = nil,
        secondarySourcesVersionOverride: [ProjectSourceVersion]? = nil,
        serviceRoleOverride: String? = nil,
        sourceAuthOverride: SourceAuth? = nil,
        sourceLocationOverride: String? = nil,
        sourceTypeOverride: SourceType? = nil,
        sourceVersion: String? = nil
    )
    {
        self.artifactsOverride = artifactsOverride
        self.buildBatchConfigOverride = buildBatchConfigOverride
        self.buildTimeoutInMinutesOverride = buildTimeoutInMinutesOverride
        self.buildspecOverride = buildspecOverride
        self.cacheOverride = cacheOverride
        self.certificateOverride = certificateOverride
        self.computeTypeOverride = computeTypeOverride
        self.debugSessionEnabled = debugSessionEnabled
        self.encryptionKeyOverride = encryptionKeyOverride
        self.environmentTypeOverride = environmentTypeOverride
        self.environmentVariablesOverride = environmentVariablesOverride
        self.gitCloneDepthOverride = gitCloneDepthOverride
        self.gitSubmodulesConfigOverride = gitSubmodulesConfigOverride
        self.idempotencyToken = idempotencyToken
        self.imageOverride = imageOverride
        self.imagePullCredentialsTypeOverride = imagePullCredentialsTypeOverride
        self.insecureSslOverride = insecureSslOverride
        self.logsConfigOverride = logsConfigOverride
        self.privilegedModeOverride = privilegedModeOverride
        self.projectName = projectName
        self.queuedTimeoutInMinutesOverride = queuedTimeoutInMinutesOverride
        self.registryCredentialOverride = registryCredentialOverride
        self.reportBuildBatchStatusOverride = reportBuildBatchStatusOverride
        self.secondaryArtifactsOverride = secondaryArtifactsOverride
        self.secondarySourcesOverride = secondarySourcesOverride
        self.secondarySourcesVersionOverride = secondarySourcesVersionOverride
        self.serviceRoleOverride = serviceRoleOverride
        self.sourceAuthOverride = sourceAuthOverride
        self.sourceLocationOverride = sourceLocationOverride
        self.sourceTypeOverride = sourceTypeOverride
        self.sourceVersion = sourceVersion
    }
}
