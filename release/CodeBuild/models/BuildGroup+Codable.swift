// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BuildGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case currentBuildSummary
        case dependsOn
        case identifier
        case ignoreFailure
        case priorBuildSummaryList
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currentBuildSummary = currentBuildSummary {
            try encodeContainer.encode(currentBuildSummary, forKey: .currentBuildSummary)
        }
        if let dependsOn = dependsOn {
            var dependsOnContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dependsOn)
            for identifiers0 in dependsOn {
                try dependsOnContainer.encode(identifiers0)
            }
        }
        if let identifier = identifier {
            try encodeContainer.encode(identifier, forKey: .identifier)
        }
        if ignoreFailure != false {
            try encodeContainer.encode(ignoreFailure, forKey: .ignoreFailure)
        }
        if let priorBuildSummaryList = priorBuildSummaryList {
            var priorBuildSummaryListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .priorBuildSummaryList)
            for buildsummaries0 in priorBuildSummaryList {
                try priorBuildSummaryListContainer.encode(buildsummaries0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identifier)
        identifier = identifierDecoded
        let dependsOnContainer = try containerValues.decodeIfPresent([String].self, forKey: .dependsOn)
        var dependsOnDecoded0:[String]? = nil
        if let dependsOnContainer = dependsOnContainer {
            dependsOnDecoded0 = [String]()
            for string0 in dependsOnContainer {
                dependsOnDecoded0?.append(string0)
            }
        }
        dependsOn = dependsOnDecoded0
        let ignoreFailureDecoded = try containerValues.decode(Bool.self, forKey: .ignoreFailure)
        ignoreFailure = ignoreFailureDecoded
        let currentBuildSummaryDecoded = try containerValues.decodeIfPresent(BuildSummary.self, forKey: .currentBuildSummary)
        currentBuildSummary = currentBuildSummaryDecoded
        let priorBuildSummaryListContainer = try containerValues.decodeIfPresent([BuildSummary].self, forKey: .priorBuildSummaryList)
        var priorBuildSummaryListDecoded0:[BuildSummary]? = nil
        if let priorBuildSummaryListContainer = priorBuildSummaryListContainer {
            priorBuildSummaryListDecoded0 = [BuildSummary]()
            for structure0 in priorBuildSummaryListContainer {
                priorBuildSummaryListDecoded0?.append(structure0)
            }
        }
        priorBuildSummaryList = priorBuildSummaryListDecoded0
    }
}
