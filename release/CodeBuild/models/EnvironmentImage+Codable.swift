// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EnvironmentImage: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description
        case name
        case versions
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let versions = versions {
            var versionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .versions)
            for imageversions0 in versions {
                try versionsContainer.encode(imageversions0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let versionsContainer = try containerValues.decodeIfPresent([String].self, forKey: .versions)
        var versionsDecoded0:[String]? = nil
        if let versionsContainer = versionsContainer {
            versionsDecoded0 = [String]()
            for string0 in versionsContainer {
                versionsDecoded0?.append(string0)
            }
        }
        versions = versionsDecoded0
    }
}
