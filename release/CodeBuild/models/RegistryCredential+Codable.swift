// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RegistryCredential: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case credential
        case credentialProvider
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let credential = credential {
            try encodeContainer.encode(credential, forKey: .credential)
        }
        if let credentialProvider = credentialProvider {
            try encodeContainer.encode(credentialProvider.rawValue, forKey: .credentialProvider)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let credentialDecoded = try containerValues.decodeIfPresent(String.self, forKey: .credential)
        credential = credentialDecoded
        let credentialProviderDecoded = try containerValues.decodeIfPresent(CredentialProviderType.self, forKey: .credentialProvider)
        credentialProvider = credentialProviderDecoded
    }
}
