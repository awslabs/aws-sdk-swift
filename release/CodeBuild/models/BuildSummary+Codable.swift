// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BuildSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case buildStatus
        case primaryArtifact
        case requestedOn
        case secondaryArtifacts
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let buildStatus = buildStatus {
            try encodeContainer.encode(buildStatus.rawValue, forKey: .buildStatus)
        }
        if let primaryArtifact = primaryArtifact {
            try encodeContainer.encode(primaryArtifact, forKey: .primaryArtifact)
        }
        if let requestedOn = requestedOn {
            try encodeContainer.encode(requestedOn.timeIntervalSince1970, forKey: .requestedOn)
        }
        if let secondaryArtifacts = secondaryArtifacts {
            var secondaryArtifactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondaryArtifacts)
            for resolvedsecondaryartifacts0 in secondaryArtifacts {
                try secondaryArtifactsContainer.encode(resolvedsecondaryartifacts0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let requestedOnDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .requestedOn)
        requestedOn = requestedOnDecoded
        let buildStatusDecoded = try containerValues.decodeIfPresent(StatusType.self, forKey: .buildStatus)
        buildStatus = buildStatusDecoded
        let primaryArtifactDecoded = try containerValues.decodeIfPresent(ResolvedArtifact.self, forKey: .primaryArtifact)
        primaryArtifact = primaryArtifactDecoded
        let secondaryArtifactsContainer = try containerValues.decodeIfPresent([ResolvedArtifact].self, forKey: .secondaryArtifacts)
        var secondaryArtifactsDecoded0:[ResolvedArtifact]? = nil
        if let secondaryArtifactsContainer = secondaryArtifactsContainer {
            secondaryArtifactsDecoded0 = [ResolvedArtifact]()
            for structure0 in secondaryArtifactsContainer {
                secondaryArtifactsDecoded0?.append(structure0)
            }
        }
        secondaryArtifacts = secondaryArtifactsDecoded0
    }
}
