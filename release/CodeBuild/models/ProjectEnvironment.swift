// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Information about the build environment of the build project.</p>
public struct ProjectEnvironment: Equatable {
    /// <p>The ARN of the Amazon S3 bucket, path prefix, and object key that contains the PEM-encoded
    ///             certificate for the build project. For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/create-project-cli.html#cli.environment.certificate">certificate</a> in the
    ///                 <i>AWS CodeBuild User Guide</i>.</p>
    public let certificate: String?
    /// <p>Information about the compute resources the build project uses. Available values
    ///             include:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>BUILD_GENERAL1_SMALL</code>: Use up to 3 GB memory and 2 vCPUs for
    ///                     builds.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>BUILD_GENERAL1_MEDIUM</code>: Use up to 7 GB memory and 4 vCPUs for
    ///                     builds.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>BUILD_GENERAL1_LARGE</code>: Use up to 16 GB memory and 8 vCPUs for
    ///                     builds, depending on your environment type.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>BUILD_GENERAL1_2XLARGE</code>: Use up to 145 GB memory, 72 vCPUs, and
    ///                     824 GB of SSD storage for builds. This compute type supports Docker images up to
    ///                     100 GB uncompressed.</p>
    ///             </li>
    ///          </ul>
    ///         <p> If you use <code>BUILD_GENERAL1_LARGE</code>: </p>
    ///         <ul>
    ///             <li>
    ///                 <p> For environment type <code>LINUX_CONTAINER</code>, you can use up to 15 GB
    ///                     memory and 8 vCPUs for builds. </p>
    ///             </li>
    ///             <li>
    ///                 <p> For environment type <code>LINUX_GPU_CONTAINER</code>, you can use up to 255
    ///                     GB memory, 32 vCPUs, and 4 NVIDIA Tesla V100 GPUs for builds.</p>
    ///             </li>
    ///             <li>
    ///                 <p> For environment type <code>ARM_CONTAINER</code>, you can use up to 16 GB
    ///                     memory and 8 vCPUs on ARM-based processors for builds.</p>
    ///             </li>
    ///          </ul>
    ///         <p> For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html">Build Environment
    ///                 Compute Types</a> in the <i>AWS CodeBuild User Guide.</i>
    ///         </p>
    public let computeType: ComputeType?
    /// <p>A set of environment variables to make available to builds for this build
    ///             project.</p>
    public let environmentVariables: [EnvironmentVariable]?
    /// <p>The image tag or image digest that identifies the Docker image to use for this build
    ///             project. Use the following formats:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>For an image tag: <code><registry>/<repository>:<tag></code>. For
    ///                     example, in the Docker repository that CodeBuild uses to manage its Docker
    ///                     images, this would be <code>aws/codebuild/standard:4.0</code>. </p>
    ///             </li>
    ///             <li>
    ///                 <p>For an image digest: <code><registry>/<repository>@<digest></code>.
    ///                     For example, to specify an image with the digest
    ///                     "sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf," use
    ///                         <code><registry>/<repository>@sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf</code>.</p>
    ///             </li>
    ///          </ul>
    public let image: String?
    /// <p> The type of credentials AWS CodeBuild uses to pull images in your build. There are two valid
    ///             values: </p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>CODEBUILD</code> specifies that AWS CodeBuild uses its own credentials.
    ///                     This requires that you modify your ECR repository policy to trust AWS
    ///                     CodeBuild's service principal. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>SERVICE_ROLE</code> specifies that AWS CodeBuild uses your build project's service
    ///                     role. </p>
    ///             </li>
    ///          </ul>
    ///         <p> When you use a cross-account or private registry image, you must use SERVICE_ROLE
    ///             credentials. When you use an AWS CodeBuild curated image, you must use CODEBUILD credentials.
    ///         </p>
    public let imagePullCredentialsType: ImagePullCredentialsType?
    /// <p>Enables running the Docker daemon inside a Docker container. Set to true only if the
    ///             build project is used to build Docker images. Otherwise, a build that attempts to
    ///             interact with the Docker daemon fails. The default setting is <code>false</code>.</p>
    ///         <p>You can initialize the Docker daemon during the install phase of your build by adding
    ///             one of the following sets of commands to the install phase of your buildspec
    ///             file:</p>
    ///         <p>If the operating system's base image is Ubuntu Linux:</p>
    ///         <p>
    ///             <code>- nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay&</code>
    ///         </p>
    ///         <p>
    ///             <code>- timeout 15 sh -c "until docker info; do echo .; sleep 1; done"</code>
    ///         </p>
    ///         <p>If the operating system's base image is Alpine Linux and the previous command does not
    ///             work, add the <code>-t</code> argument to <code>timeout</code>:</p>
    ///         <p>
    ///             <code>- nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay&</code>
    ///          </p>
    ///         <p>
    ///             <code>- timeout -t 15 sh -c "until docker info; do echo .; sleep 1; done"</code>
    ///         </p>
    public let privilegedMode: Bool?
    /// <p> The credentials for access to a private registry.</p>
    public let registryCredential: RegistryCredential?
    /// <p>The type of build environment to use for related builds.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>The environment type <code>ARM_CONTAINER</code> is available only in regions
    ///                     US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland),
    ///                     Asia Pacific (Mumbai), Asia Pacific (Tokyo), Asia Pacific (Sydney), and
    ///                     EU (Frankfurt).</p>
    ///             </li>
    ///             <li>
    ///                 <p>The environment type <code>LINUX_CONTAINER</code> with compute type
    ///                         <code>build.general1.2xlarge</code> is available only in regions
    ///                     US East (N. Virginia), US East (Ohio), US West (Oregon),
    ///                     Canada (Central), EU (Ireland), EU (London),
    ///                     EU (Frankfurt), Asia Pacific (Tokyo), Asia Pacific (Seoul),
    ///                     Asia Pacific (Singapore), Asia Pacific (Sydney), China (Beijing), and
    ///                     China (Ningxia).</p>
    ///             </li>
    ///             <li>
    ///                 <p>The environment type <code>LINUX_GPU_CONTAINER</code> is available only in
    ///                     regions US East (N. Virginia), US East (Ohio), US West (Oregon),
    ///                     Canada (Central), EU (Ireland), EU (London),
    ///                     EU (Frankfurt), Asia Pacific (Tokyo), Asia Pacific (Seoul),
    ///                     Asia Pacific (Singapore), Asia Pacific (Sydney) , China (Beijing), and
    ///                     China (Ningxia).</p>
    ///             </li>
    ///          </ul>
    public let type: EnvironmentType?

    public init (
        certificate: String? = nil,
        computeType: ComputeType? = nil,
        environmentVariables: [EnvironmentVariable]? = nil,
        image: String? = nil,
        imagePullCredentialsType: ImagePullCredentialsType? = nil,
        privilegedMode: Bool? = nil,
        registryCredential: RegistryCredential? = nil,
        type: EnvironmentType? = nil
    )
    {
        self.certificate = certificate
        self.computeType = computeType
        self.environmentVariables = environmentVariables
        self.image = image
        self.imagePullCredentialsType = imagePullCredentialsType
        self.privilegedMode = privilegedMode
        self.registryCredential = registryCredential
        self.type = type
    }
}
