// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchRestrictions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case computeTypesAllowed
        case maximumBuildsAllowed
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeTypesAllowed = computeTypesAllowed {
            var computeTypesAllowedContainer = encodeContainer.nestedUnkeyedContainer(forKey: .computeTypesAllowed)
            for computetypesallowed0 in computeTypesAllowed {
                try computeTypesAllowedContainer.encode(computetypesallowed0)
            }
        }
        if let maximumBuildsAllowed = maximumBuildsAllowed {
            try encodeContainer.encode(maximumBuildsAllowed, forKey: .maximumBuildsAllowed)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maximumBuildsAllowedDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maximumBuildsAllowed)
        maximumBuildsAllowed = maximumBuildsAllowedDecoded
        let computeTypesAllowedContainer = try containerValues.decodeIfPresent([String].self, forKey: .computeTypesAllowed)
        var computeTypesAllowedDecoded0:[String]? = nil
        if let computeTypesAllowedContainer = computeTypesAllowedContainer {
            computeTypesAllowedDecoded0 = [String]()
            for string0 in computeTypesAllowedContainer {
                computeTypesAllowedDecoded0?.append(string0)
            }
        }
        computeTypesAllowed = computeTypesAllowedDecoded0
    }
}
