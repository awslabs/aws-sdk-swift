// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BuildBatch: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case artifacts
        case buildBatchConfig
        case buildBatchNumber
        case buildBatchStatus
        case buildGroups
        case buildTimeoutInMinutes
        case cache
        case complete
        case currentPhase
        case debugSessionEnabled
        case encryptionKey
        case endTime
        case environment
        case fileSystemLocations
        case id
        case initiator
        case logConfig
        case phases
        case projectName
        case queuedTimeoutInMinutes
        case resolvedSourceVersion
        case secondaryArtifacts
        case secondarySourceVersions
        case secondarySources
        case serviceRole
        case source
        case sourceVersion
        case startTime
        case vpcConfig
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let artifacts = artifacts {
            try encodeContainer.encode(artifacts, forKey: .artifacts)
        }
        if let buildBatchConfig = buildBatchConfig {
            try encodeContainer.encode(buildBatchConfig, forKey: .buildBatchConfig)
        }
        if let buildBatchNumber = buildBatchNumber {
            try encodeContainer.encode(buildBatchNumber, forKey: .buildBatchNumber)
        }
        if let buildBatchStatus = buildBatchStatus {
            try encodeContainer.encode(buildBatchStatus.rawValue, forKey: .buildBatchStatus)
        }
        if let buildGroups = buildGroups {
            var buildGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .buildGroups)
            for buildgroups0 in buildGroups {
                try buildGroupsContainer.encode(buildgroups0)
            }
        }
        if let buildTimeoutInMinutes = buildTimeoutInMinutes {
            try encodeContainer.encode(buildTimeoutInMinutes, forKey: .buildTimeoutInMinutes)
        }
        if let cache = cache {
            try encodeContainer.encode(cache, forKey: .cache)
        }
        if complete != false {
            try encodeContainer.encode(complete, forKey: .complete)
        }
        if let currentPhase = currentPhase {
            try encodeContainer.encode(currentPhase, forKey: .currentPhase)
        }
        if let debugSessionEnabled = debugSessionEnabled {
            try encodeContainer.encode(debugSessionEnabled, forKey: .debugSessionEnabled)
        }
        if let encryptionKey = encryptionKey {
            try encodeContainer.encode(encryptionKey, forKey: .encryptionKey)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let environment = environment {
            try encodeContainer.encode(environment, forKey: .environment)
        }
        if let fileSystemLocations = fileSystemLocations {
            var fileSystemLocationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fileSystemLocations)
            for projectfilesystemlocations0 in fileSystemLocations {
                try fileSystemLocationsContainer.encode(projectfilesystemlocations0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let initiator = initiator {
            try encodeContainer.encode(initiator, forKey: .initiator)
        }
        if let logConfig = logConfig {
            try encodeContainer.encode(logConfig, forKey: .logConfig)
        }
        if let phases = phases {
            var phasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .phases)
            for buildbatchphases0 in phases {
                try phasesContainer.encode(buildbatchphases0)
            }
        }
        if let projectName = projectName {
            try encodeContainer.encode(projectName, forKey: .projectName)
        }
        if let queuedTimeoutInMinutes = queuedTimeoutInMinutes {
            try encodeContainer.encode(queuedTimeoutInMinutes, forKey: .queuedTimeoutInMinutes)
        }
        if let resolvedSourceVersion = resolvedSourceVersion {
            try encodeContainer.encode(resolvedSourceVersion, forKey: .resolvedSourceVersion)
        }
        if let secondaryArtifacts = secondaryArtifacts {
            var secondaryArtifactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondaryArtifacts)
            for buildartifactslist0 in secondaryArtifacts {
                try secondaryArtifactsContainer.encode(buildartifactslist0)
            }
        }
        if let secondarySourceVersions = secondarySourceVersions {
            var secondarySourceVersionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondarySourceVersions)
            for projectsecondarysourceversions0 in secondarySourceVersions {
                try secondarySourceVersionsContainer.encode(projectsecondarysourceversions0)
            }
        }
        if let secondarySources = secondarySources {
            var secondarySourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondarySources)
            for projectsources0 in secondarySources {
                try secondarySourcesContainer.encode(projectsources0)
            }
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let sourceVersion = sourceVersion {
            try encodeContainer.encode(sourceVersion, forKey: .sourceVersion)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let vpcConfig = vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let currentPhaseDecoded = try containerValues.decodeIfPresent(String.self, forKey: .currentPhase)
        currentPhase = currentPhaseDecoded
        let buildBatchStatusDecoded = try containerValues.decodeIfPresent(StatusType.self, forKey: .buildBatchStatus)
        buildBatchStatus = buildBatchStatusDecoded
        let sourceVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceVersion)
        sourceVersion = sourceVersionDecoded
        let resolvedSourceVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resolvedSourceVersion)
        resolvedSourceVersion = resolvedSourceVersionDecoded
        let projectNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .projectName)
        projectName = projectNameDecoded
        let phasesContainer = try containerValues.decodeIfPresent([BuildBatchPhase].self, forKey: .phases)
        var phasesDecoded0:[BuildBatchPhase]? = nil
        if let phasesContainer = phasesContainer {
            phasesDecoded0 = [BuildBatchPhase]()
            for structure0 in phasesContainer {
                phasesDecoded0?.append(structure0)
            }
        }
        phases = phasesDecoded0
        let sourceDecoded = try containerValues.decodeIfPresent(ProjectSource.self, forKey: .source)
        source = sourceDecoded
        let secondarySourcesContainer = try containerValues.decodeIfPresent([ProjectSource].self, forKey: .secondarySources)
        var secondarySourcesDecoded0:[ProjectSource]? = nil
        if let secondarySourcesContainer = secondarySourcesContainer {
            secondarySourcesDecoded0 = [ProjectSource]()
            for structure0 in secondarySourcesContainer {
                secondarySourcesDecoded0?.append(structure0)
            }
        }
        secondarySources = secondarySourcesDecoded0
        let secondarySourceVersionsContainer = try containerValues.decodeIfPresent([ProjectSourceVersion].self, forKey: .secondarySourceVersions)
        var secondarySourceVersionsDecoded0:[ProjectSourceVersion]? = nil
        if let secondarySourceVersionsContainer = secondarySourceVersionsContainer {
            secondarySourceVersionsDecoded0 = [ProjectSourceVersion]()
            for structure0 in secondarySourceVersionsContainer {
                secondarySourceVersionsDecoded0?.append(structure0)
            }
        }
        secondarySourceVersions = secondarySourceVersionsDecoded0
        let artifactsDecoded = try containerValues.decodeIfPresent(BuildArtifacts.self, forKey: .artifacts)
        artifacts = artifactsDecoded
        let secondaryArtifactsContainer = try containerValues.decodeIfPresent([BuildArtifacts].self, forKey: .secondaryArtifacts)
        var secondaryArtifactsDecoded0:[BuildArtifacts]? = nil
        if let secondaryArtifactsContainer = secondaryArtifactsContainer {
            secondaryArtifactsDecoded0 = [BuildArtifacts]()
            for structure0 in secondaryArtifactsContainer {
                secondaryArtifactsDecoded0?.append(structure0)
            }
        }
        secondaryArtifacts = secondaryArtifactsDecoded0
        let cacheDecoded = try containerValues.decodeIfPresent(ProjectCache.self, forKey: .cache)
        cache = cacheDecoded
        let environmentDecoded = try containerValues.decodeIfPresent(ProjectEnvironment.self, forKey: .environment)
        environment = environmentDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let logConfigDecoded = try containerValues.decodeIfPresent(LogsConfig.self, forKey: .logConfig)
        logConfig = logConfigDecoded
        let buildTimeoutInMinutesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .buildTimeoutInMinutes)
        buildTimeoutInMinutes = buildTimeoutInMinutesDecoded
        let queuedTimeoutInMinutesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .queuedTimeoutInMinutes)
        queuedTimeoutInMinutes = queuedTimeoutInMinutesDecoded
        let completeDecoded = try containerValues.decode(Bool.self, forKey: .complete)
        complete = completeDecoded
        let initiatorDecoded = try containerValues.decodeIfPresent(String.self, forKey: .initiator)
        initiator = initiatorDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let encryptionKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .encryptionKey)
        encryptionKey = encryptionKeyDecoded
        let buildBatchNumberDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .buildBatchNumber)
        buildBatchNumber = buildBatchNumberDecoded
        let fileSystemLocationsContainer = try containerValues.decodeIfPresent([ProjectFileSystemLocation].self, forKey: .fileSystemLocations)
        var fileSystemLocationsDecoded0:[ProjectFileSystemLocation]? = nil
        if let fileSystemLocationsContainer = fileSystemLocationsContainer {
            fileSystemLocationsDecoded0 = [ProjectFileSystemLocation]()
            for structure0 in fileSystemLocationsContainer {
                fileSystemLocationsDecoded0?.append(structure0)
            }
        }
        fileSystemLocations = fileSystemLocationsDecoded0
        let buildBatchConfigDecoded = try containerValues.decodeIfPresent(ProjectBuildBatchConfig.self, forKey: .buildBatchConfig)
        buildBatchConfig = buildBatchConfigDecoded
        let buildGroupsContainer = try containerValues.decodeIfPresent([BuildGroup].self, forKey: .buildGroups)
        var buildGroupsDecoded0:[BuildGroup]? = nil
        if let buildGroupsContainer = buildGroupsContainer {
            buildGroupsDecoded0 = [BuildGroup]()
            for structure0 in buildGroupsContainer {
                buildGroupsDecoded0?.append(structure0)
            }
        }
        buildGroups = buildGroupsDecoded0
        let debugSessionEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .debugSessionEnabled)
        debugSessionEnabled = debugSessionEnabledDecoded
    }
}
