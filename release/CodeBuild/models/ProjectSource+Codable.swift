// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProjectSource: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case auth
        case buildStatusConfig
        case buildspec
        case gitCloneDepth
        case gitSubmodulesConfig
        case insecureSsl
        case location
        case reportBuildStatus
        case sourceIdentifier
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let auth = auth {
            try encodeContainer.encode(auth, forKey: .auth)
        }
        if let buildStatusConfig = buildStatusConfig {
            try encodeContainer.encode(buildStatusConfig, forKey: .buildStatusConfig)
        }
        if let buildspec = buildspec {
            try encodeContainer.encode(buildspec, forKey: .buildspec)
        }
        if let gitCloneDepth = gitCloneDepth {
            try encodeContainer.encode(gitCloneDepth, forKey: .gitCloneDepth)
        }
        if let gitSubmodulesConfig = gitSubmodulesConfig {
            try encodeContainer.encode(gitSubmodulesConfig, forKey: .gitSubmodulesConfig)
        }
        if let insecureSsl = insecureSsl {
            try encodeContainer.encode(insecureSsl, forKey: .insecureSsl)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let reportBuildStatus = reportBuildStatus {
            try encodeContainer.encode(reportBuildStatus, forKey: .reportBuildStatus)
        }
        if let sourceIdentifier = sourceIdentifier {
            try encodeContainer.encode(sourceIdentifier, forKey: .sourceIdentifier)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(SourceType.self, forKey: .type)
        type = typeDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
        let gitCloneDepthDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .gitCloneDepth)
        gitCloneDepth = gitCloneDepthDecoded
        let gitSubmodulesConfigDecoded = try containerValues.decodeIfPresent(GitSubmodulesConfig.self, forKey: .gitSubmodulesConfig)
        gitSubmodulesConfig = gitSubmodulesConfigDecoded
        let buildspecDecoded = try containerValues.decodeIfPresent(String.self, forKey: .buildspec)
        buildspec = buildspecDecoded
        let authDecoded = try containerValues.decodeIfPresent(SourceAuth.self, forKey: .auth)
        auth = authDecoded
        let reportBuildStatusDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .reportBuildStatus)
        reportBuildStatus = reportBuildStatusDecoded
        let buildStatusConfigDecoded = try containerValues.decodeIfPresent(BuildStatusConfig.self, forKey: .buildStatusConfig)
        buildStatusConfig = buildStatusConfigDecoded
        let insecureSslDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .insecureSsl)
        insecureSsl = insecureSslDecoded
        let sourceIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceIdentifier)
        sourceIdentifier = sourceIdentifierDecoded
    }
}
