// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ListReportsInput: Equatable {
    /// <p>
    ///       A <code>ReportFilter</code> object used to filter the returned reports.
    ///     </p>
    public let filter: ReportFilter?
    /// <p>
    ///       The maximum number of paginated reports returned per response. Use <code>nextToken</code> to iterate pages in
    ///       the list of returned <code>Report</code> objects. The default value is 100.
    ///     </p>
    public let maxResults: Int?
    /// <p>
    ///       During a previous call, the maximum number of items that can be returned is the value specified in
    ///       <code>maxResults</code>. If there more items in the list, then a unique string called a <i>nextToken</i>
    ///       is returned. To get the next batch of items in the list, call this operation again, adding the next token
    ///       to the call. To get all of the items in the list, keep calling this operation with each
    ///       subsequent next token that is returned, until no more next tokens are returned.
    ///     </p>
    public let nextToken: String?
    /// <p>
    ///       Specifies the sort order for the list of returned reports. Valid values are:
    ///     </p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ASCENDING</code>: return reports in chronological order based on their creation date.
    ///         </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DESCENDING</code>: return reports in the reverse chronological order based on their creation date.
    ///         </p>
    ///             </li>
    ///          </ul>
    public let sortOrder: SortOrderType?

    public init (
        filter: ReportFilter? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        sortOrder: SortOrderType? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortOrder = sortOrder
    }
}
