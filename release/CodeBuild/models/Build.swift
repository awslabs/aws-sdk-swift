// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Information about a build.</p>
public struct Build: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the build.</p>
    public let arn: String?
    /// <p>Information about the output artifacts for the build.</p>
    public let artifacts: BuildArtifacts?
    /// <p>The ARN of the batch build that this build is a member of, if applicable.</p>
    public let buildBatchArn: String?
    /// <p>Whether the build is complete. True if complete; otherwise, false.</p>
    public let buildComplete: Bool
    /// <p>The number of the build. For each project, the <code>buildNumber</code> of its first
    ///             build is <code>1</code>. The <code>buildNumber</code> of each subsequent build is
    ///             incremented by <code>1</code>. If a build is deleted, the <code>buildNumber</code> of
    ///             other builds does not change.</p>
    public let buildNumber: Int?
    /// <p>The current status of the build. Valid values include:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>FAILED</code>: The build failed.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>FAULT</code>: The build faulted.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>IN_PROGRESS</code>: The build is still in progress.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>STOPPED</code>: The build stopped.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>SUCCEEDED</code>: The build succeeded.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>TIMED_OUT</code>: The build timed out.</p>
    ///             </li>
    ///          </ul>
    public let buildStatus: StatusType?
    /// <p>Information about the cache for the build.</p>
    public let cache: ProjectCache?
    /// <p>The current build phase.</p>
    public let currentPhase: String?
    /// <p>Contains information about the debug session for this build.</p>
    public let debugSession: DebugSession?
    /// <p>The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build output
    ///             artifacts.</p>
    ///         <note>
    ///             <p> You can use a cross-account KMS key to encrypt the build output artifacts if your
    ///                 service role has permission to that key. </p>
    ///         </note>
    ///         <p>You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using
    ///             the format <code>alias/<alias-name></code>).</p>
    public let encryptionKey: String?
    /// <p>When the build process ended, expressed in Unix time format.</p>
    public let endTime: Date?
    /// <p>Information about the build environment for this build.</p>
    public let environment: ProjectEnvironment?
    /// <p>A list of exported environment variables for this build.</p>
    ///         <p>Exported environment variables are used in conjunction with AWS CodePipeline to export
    ///   environment variables from the current build stage to subsequent stages in the pipeline.
    ///   For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-variables.html">Working with variables</a> in the <i>AWS CodePipeline User Guide</i>.</p>
    public let exportedEnvironmentVariables: [ExportedEnvironmentVariable]?
    /// <p>
    ///       An array of <code>ProjectFileSystemLocation</code> objects for a CodeBuild build project. A <code>ProjectFileSystemLocation</code> object
    ///       specifies the <code>identifier</code>, <code>location</code>, <code>mountOptions</code>,
    ///       <code>mountPoint</code>, and <code>type</code> of a file system created using Amazon Elastic File System.
    ///   </p>
    public let fileSystemLocations: [ProjectFileSystemLocation]?
    /// <p>The unique ID for the build.</p>
    public let id: String?
    /// <p>The entity that started the build. Valid values include:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>If AWS CodePipeline started the build, the pipeline's name (for example,
    ///                         <code>codepipeline/my-demo-pipeline</code>).</p>
    ///             </li>
    ///             <li>
    ///                 <p>If an AWS Identity and Access Management (IAM) user started the build, the user's name (for example,
    ///                         <code>MyUserName</code>).</p>
    ///             </li>
    ///             <li>
    ///                 <p>If the Jenkins plugin for AWS CodeBuild started the build, the string
    ///                         <code>CodeBuild-Jenkins-Plugin</code>.</p>
    ///             </li>
    ///          </ul>
    public let initiator: String?
    /// <p>Information about the build's logs in Amazon CloudWatch Logs.</p>
    public let logs: LogsLocation?
    /// <p>Describes a network interface.</p>
    public let networkInterface: NetworkInterface?
    /// <p>Information about all previous build phases that are complete and information about
    ///             any current build phase that is not yet complete.</p>
    public let phases: [BuildPhase]?
    /// <p>The name of the AWS CodeBuild project.</p>
    public let projectName: String?
    /// <p> The number of minutes a build is allowed to be queued before it times out. </p>
    public let queuedTimeoutInMinutes: Int?
    /// <p> An array of the ARNs associated with this build's reports. </p>
    public let reportArns: [String]?
    /// <p> An identifier for the version of this build's source code. </p>
    ///         <ul>
    ///             <li>
    ///                 <p> For AWS CodeCommit, GitHub, GitHub Enterprise, and BitBucket, the commit ID. </p>
    ///             </li>
    ///             <li>
    ///                 <p> For AWS CodePipeline, the source revision provided by AWS CodePipeline. </p>
    ///             </li>
    ///             <li>
    ///                 <p> For Amazon S3, this does not apply. </p>
    ///             </li>
    ///          </ul>
    public let resolvedSourceVersion: String?
    /// <p> An array of <code>ProjectArtifacts</code> objects. </p>
    public let secondaryArtifacts: [BuildArtifacts]?
    /// <p> An array of <code>ProjectSourceVersion</code> objects. Each
    ///                 <code>ProjectSourceVersion</code> must be one of: </p>
    ///         <ul>
    ///             <li>
    ///                 <p>For AWS CodeCommit: the commit ID, branch, or Git tag to use.</p>
    ///             </li>
    ///             <li>
    ///                 <p>For GitHub: the commit ID, pull request ID, branch name, or tag name that
    ///                     corresponds to the version of the source code you want to build. If a pull
    ///                     request ID is specified, it must use the format <code>pr/pull-request-ID</code>
    ///                     (for example, <code>pr/25</code>). If a branch name is specified, the branch's
    ///                     HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is
    ///                     used.</p>
    ///             </li>
    ///             <li>
    ///                 <p>For Bitbucket: the commit ID, branch name, or tag name that corresponds to the
    ///                     version of the source code you want to build. If a branch name is specified, the
    ///                     branch's HEAD commit ID is used. If not specified, the default branch's HEAD
    ///                     commit ID is used.</p>
    ///             </li>
    ///             <li>
    ///                 <p>For Amazon S3: the version ID of the object that represents the build input ZIP
    ///                     file to use.</p>
    ///             </li>
    ///          </ul>
    public let secondarySourceVersions: [ProjectSourceVersion]?
    /// <p> An array of <code>ProjectSource</code> objects. </p>
    public let secondarySources: [ProjectSource]?
    /// <p>The name of a service role used for this build.</p>
    public let serviceRole: String?
    /// <p>Information about the source code to be built.</p>
    public let source: ProjectSource?
    /// <p>Any version identifier for the version of the source code to be built. If
    ///                 <code>sourceVersion</code> is specified at the project level, then this
    ///                 <code>sourceVersion</code> (at the build level) takes precedence. </p>
    ///         <p> For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html">Source Version Sample
    ///                 with CodeBuild</a> in the <i>AWS CodeBuild User Guide</i>. </p>
    public let sourceVersion: String?
    /// <p>When the build process started, expressed in Unix time format.</p>
    public let startTime: Date?
    /// <p>How long, in minutes, for AWS CodeBuild to wait before timing out this build if it does not
    ///             get marked as completed.</p>
    public let timeoutInMinutes: Int?
    /// <p>If your AWS CodeBuild project accesses resources in an Amazon VPC, you provide this parameter
    ///             that identifies the VPC ID and the list of security group IDs and subnet IDs. The
    ///             security groups and subnets must belong to the same VPC. You must provide at least one
    ///             security group and one subnet ID.</p>
    public let vpcConfig: VpcConfig?

    public init (
        arn: String? = nil,
        artifacts: BuildArtifacts? = nil,
        buildBatchArn: String? = nil,
        buildComplete: Bool = false,
        buildNumber: Int? = nil,
        buildStatus: StatusType? = nil,
        cache: ProjectCache? = nil,
        currentPhase: String? = nil,
        debugSession: DebugSession? = nil,
        encryptionKey: String? = nil,
        endTime: Date? = nil,
        environment: ProjectEnvironment? = nil,
        exportedEnvironmentVariables: [ExportedEnvironmentVariable]? = nil,
        fileSystemLocations: [ProjectFileSystemLocation]? = nil,
        id: String? = nil,
        initiator: String? = nil,
        logs: LogsLocation? = nil,
        networkInterface: NetworkInterface? = nil,
        phases: [BuildPhase]? = nil,
        projectName: String? = nil,
        queuedTimeoutInMinutes: Int? = nil,
        reportArns: [String]? = nil,
        resolvedSourceVersion: String? = nil,
        secondaryArtifacts: [BuildArtifacts]? = nil,
        secondarySourceVersions: [ProjectSourceVersion]? = nil,
        secondarySources: [ProjectSource]? = nil,
        serviceRole: String? = nil,
        source: ProjectSource? = nil,
        sourceVersion: String? = nil,
        startTime: Date? = nil,
        timeoutInMinutes: Int? = nil,
        vpcConfig: VpcConfig? = nil
    )
    {
        self.arn = arn
        self.artifacts = artifacts
        self.buildBatchArn = buildBatchArn
        self.buildComplete = buildComplete
        self.buildNumber = buildNumber
        self.buildStatus = buildStatus
        self.cache = cache
        self.currentPhase = currentPhase
        self.debugSession = debugSession
        self.encryptionKey = encryptionKey
        self.endTime = endTime
        self.environment = environment
        self.exportedEnvironmentVariables = exportedEnvironmentVariables
        self.fileSystemLocations = fileSystemLocations
        self.id = id
        self.initiator = initiator
        self.logs = logs
        self.networkInterface = networkInterface
        self.phases = phases
        self.projectName = projectName
        self.queuedTimeoutInMinutes = queuedTimeoutInMinutes
        self.reportArns = reportArns
        self.resolvedSourceVersion = resolvedSourceVersion
        self.secondaryArtifacts = secondaryArtifacts
        self.secondarySourceVersions = secondarySourceVersions
        self.secondarySources = secondarySources
        self.serviceRole = serviceRole
        self.source = source
        self.sourceVersion = sourceVersion
        self.startTime = startTime
        self.timeoutInMinutes = timeoutInMinutes
        self.vpcConfig = vpcConfig
    }
}
