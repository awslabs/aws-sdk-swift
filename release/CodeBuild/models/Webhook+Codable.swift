// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Webhook: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case branchFilter
        case buildType
        case filterGroups
        case lastModifiedSecret
        case payloadUrl
        case secret
        case url
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let branchFilter = branchFilter {
            try encodeContainer.encode(branchFilter, forKey: .branchFilter)
        }
        if let buildType = buildType {
            try encodeContainer.encode(buildType.rawValue, forKey: .buildType)
        }
        if let filterGroups = filterGroups {
            var filterGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filterGroups)
            for filtergroups0 in filterGroups {
                var filtergroups0Container = filterGroupsContainer.nestedUnkeyedContainer()
                if let filtergroups0 = filtergroups0 {
                    for filtergroup1 in filtergroups0 {
                        try filtergroups0Container.encode(filtergroup1)
                    }
                }
            }
        }
        if let lastModifiedSecret = lastModifiedSecret {
            try encodeContainer.encode(lastModifiedSecret.timeIntervalSince1970, forKey: .lastModifiedSecret)
        }
        if let payloadUrl = payloadUrl {
            try encodeContainer.encode(payloadUrl, forKey: .payloadUrl)
        }
        if let secret = secret {
            try encodeContainer.encode(secret, forKey: .secret)
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let urlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .url)
        url = urlDecoded
        let payloadUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .payloadUrl)
        payloadUrl = payloadUrlDecoded
        let secretDecoded = try containerValues.decodeIfPresent(String.self, forKey: .secret)
        secret = secretDecoded
        let branchFilterDecoded = try containerValues.decodeIfPresent(String.self, forKey: .branchFilter)
        branchFilter = branchFilterDecoded
        let filterGroupsContainer = try containerValues.decodeIfPresent([[WebhookFilter]?].self, forKey: .filterGroups)
        var filterGroupsDecoded0:[[WebhookFilter]?]? = nil
        if let filterGroupsContainer = filterGroupsContainer {
            filterGroupsDecoded0 = [[WebhookFilter]?]()
            for list0 in filterGroupsContainer {
                var list0Decoded0 = [WebhookFilter]()
                if let list0 = list0 {
                    for structure1 in list0 {
                        list0Decoded0.append(structure1)
                    }
                }
                filterGroupsDecoded0?.append(list0Decoded0)
            }
        }
        filterGroups = filterGroupsDecoded0
        let buildTypeDecoded = try containerValues.decodeIfPresent(WebhookBuildType.self, forKey: .buildType)
        buildType = buildTypeDecoded
        let lastModifiedSecretDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedSecret)
        lastModifiedSecret = lastModifiedSecretDecoded
    }
}
