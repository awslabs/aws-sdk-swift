// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateProjectInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let source: ProjectSource?
    public let secondarySources: [ProjectSource]?
    public let sourceVersion: String?
    public let secondarySourceVersions: [ProjectSourceVersion]?
    public let artifacts: ProjectArtifacts?
    public let secondaryArtifacts: [ProjectArtifacts]?
    public let cache: ProjectCache?
    public let environment: ProjectEnvironment?
    public let serviceRole: String?
    public let timeoutInMinutes: Int?
    public let queuedTimeoutInMinutes: Int?
    public let encryptionKey: String?
    public let tags: [Tag]?
    public let vpcConfig: VpcConfig?
    public let badgeEnabled: Bool?
    public let logsConfig: LogsConfig?
    public let fileSystemLocations: [ProjectFileSystemLocation]?
    public let buildBatchConfig: ProjectBuildBatchConfig?
    public let concurrentBuildLimit: Int?
}

extension CreateProjectInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case artifacts
        case badgeEnabled
        case buildBatchConfig
        case cache
        case concurrentBuildLimit
        case description
        case encryptionKey
        case environment
        case fileSystemLocations
        case logsConfig
        case name
        case queuedTimeoutInMinutes
        case secondaryArtifacts
        case secondarySourceVersions
        case secondarySources
        case serviceRole
        case source
        case sourceVersion
        case tags
        case timeoutInMinutes
        case vpcConfig
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(ProjectSource.self, forKey: .source)
        source = sourceDecoded
        let secondarySourcesContainer = try containerValues.decodeIfPresent([ProjectSource].self, forKey: .secondarySources)
        var secondarySourcesDecoded0:[ProjectSource]? = nil
        if let secondarySourcesContainer = secondarySourcesContainer {
            secondarySourcesDecoded0 = [ProjectSource]()
            for structure0 in secondarySourcesContainer {
                secondarySourcesDecoded0?.append(structure0)
            }
        }
        secondarySources = secondarySourcesDecoded0
        let sourceVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceVersion)
        sourceVersion = sourceVersionDecoded
        let secondarySourceVersionsContainer = try containerValues.decodeIfPresent([ProjectSourceVersion].self, forKey: .secondarySourceVersions)
        var secondarySourceVersionsDecoded0:[ProjectSourceVersion]? = nil
        if let secondarySourceVersionsContainer = secondarySourceVersionsContainer {
            secondarySourceVersionsDecoded0 = [ProjectSourceVersion]()
            for structure0 in secondarySourceVersionsContainer {
                secondarySourceVersionsDecoded0?.append(structure0)
            }
        }
        secondarySourceVersions = secondarySourceVersionsDecoded0
        let artifactsDecoded = try containerValues.decodeIfPresent(ProjectArtifacts.self, forKey: .artifacts)
        artifacts = artifactsDecoded
        let secondaryArtifactsContainer = try containerValues.decodeIfPresent([ProjectArtifacts].self, forKey: .secondaryArtifacts)
        var secondaryArtifactsDecoded0:[ProjectArtifacts]? = nil
        if let secondaryArtifactsContainer = secondaryArtifactsContainer {
            secondaryArtifactsDecoded0 = [ProjectArtifacts]()
            for structure0 in secondaryArtifactsContainer {
                secondaryArtifactsDecoded0?.append(structure0)
            }
        }
        secondaryArtifacts = secondaryArtifactsDecoded0
        let cacheDecoded = try containerValues.decodeIfPresent(ProjectCache.self, forKey: .cache)
        cache = cacheDecoded
        let environmentDecoded = try containerValues.decodeIfPresent(ProjectEnvironment.self, forKey: .environment)
        environment = environmentDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let timeoutInMinutesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .timeoutInMinutes)
        timeoutInMinutes = timeoutInMinutesDecoded
        let queuedTimeoutInMinutesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .queuedTimeoutInMinutes)
        queuedTimeoutInMinutes = queuedTimeoutInMinutesDecoded
        let encryptionKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .encryptionKey)
        encryptionKey = encryptionKeyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let vpcConfigDecoded = try containerValues.decodeIfPresent(VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let badgeEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .badgeEnabled)
        badgeEnabled = badgeEnabledDecoded
        let logsConfigDecoded = try containerValues.decodeIfPresent(LogsConfig.self, forKey: .logsConfig)
        logsConfig = logsConfigDecoded
        let fileSystemLocationsContainer = try containerValues.decodeIfPresent([ProjectFileSystemLocation].self, forKey: .fileSystemLocations)
        var fileSystemLocationsDecoded0:[ProjectFileSystemLocation]? = nil
        if let fileSystemLocationsContainer = fileSystemLocationsContainer {
            fileSystemLocationsDecoded0 = [ProjectFileSystemLocation]()
            for structure0 in fileSystemLocationsContainer {
                fileSystemLocationsDecoded0?.append(structure0)
            }
        }
        fileSystemLocations = fileSystemLocationsDecoded0
        let buildBatchConfigDecoded = try containerValues.decodeIfPresent(ProjectBuildBatchConfig.self, forKey: .buildBatchConfig)
        buildBatchConfig = buildBatchConfigDecoded
        let concurrentBuildLimitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .concurrentBuildLimit)
        concurrentBuildLimit = concurrentBuildLimitDecoded
    }
}
