// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetReportGroupTrendInput: Equatable {
    /// <p>The number of reports to analyze. This operation always retrieves the most recent
    ///             reports.</p>
    ///         <p>If this parameter is omitted, the most recent 100 reports are analyzed.</p>
    public let numOfReports: Int?
    /// <p>The ARN of the report group that contains the reports to analyze.</p>
    public let reportGroupArn: String?
    /// <p>The test report value to accumulate. This must be one of the following values:</p>
    ///          <dl>
    ///             <dt>Test reports:</dt>
    ///             <dd>
    ///                     <dl>
    ///                   <dt>DURATION</dt>
    ///                   <dd>
    ///                                 <p>Accumulate the test run times for the specified
    ///                                     reports.</p>
    ///                             </dd>
    ///                   <dt>PASS_RATE</dt>
    ///                   <dd>
    ///                                 <p>Accumulate the percentage of tests that passed for the
    ///                                     specified test reports.</p>
    ///                             </dd>
    ///                   <dt>TOTAL</dt>
    ///                   <dd>
    ///                                 <p>Accumulate the total number of tests for the specified test
    ///                                     reports.</p>
    ///                             </dd>
    ///                </dl>
    ///                 </dd>
    ///          </dl>
    ///          <dl>
    ///             <dt>Code coverage reports:</dt>
    ///             <dd>
    ///                     <dl>
    ///                   <dt>BRANCH_COVERAGE</dt>
    ///                   <dd>
    ///                                 <p>Accumulate the branch coverage percentages for the specified
    ///                                     test reports.</p>
    ///                             </dd>
    ///                   <dt>BRANCHES_COVERED</dt>
    ///                   <dd>
    ///                                 <p>Accumulate the branches covered values for the specified test
    ///                                     reports.</p>
    ///                             </dd>
    ///                   <dt>BRANCHES_MISSED</dt>
    ///                   <dd>
    ///                                 <p>Accumulate the branches missed values for the specified test
    ///                                     reports.</p>
    ///                             </dd>
    ///                   <dt>LINE_COVERAGE</dt>
    ///                   <dd>
    ///                                 <p>Accumulate the line coverage percentages for the specified
    ///                                     test reports.</p>
    ///                             </dd>
    ///                   <dt>LINES_COVERED</dt>
    ///                   <dd>
    ///                                 <p>Accumulate the lines covered values for the specified test
    ///                                     reports.</p>
    ///                             </dd>
    ///                   <dt>LINES_MISSED</dt>
    ///                   <dd>
    ///                                 <p>Accumulate the lines not covered values for the specified test
    ///                                     reports.</p>
    ///                             </dd>
    ///                </dl>
    ///                 </dd>
    ///          </dl>
    public let trendField: ReportGroupTrendFieldType?

    public init (
        numOfReports: Int? = nil,
        reportGroupArn: String? = nil,
        trendField: ReportGroupTrendFieldType? = nil
    )
    {
        self.numOfReports = numOfReports
        self.reportGroupArn = reportGroupArn
        self.trendField = trendField
    }
}
