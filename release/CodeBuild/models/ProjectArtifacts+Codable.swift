// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProjectArtifacts: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case artifactIdentifier
        case bucketOwnerAccess
        case encryptionDisabled
        case location
        case name
        case namespaceType
        case overrideArtifactName
        case packaging
        case path
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let artifactIdentifier = artifactIdentifier {
            try encodeContainer.encode(artifactIdentifier, forKey: .artifactIdentifier)
        }
        if let bucketOwnerAccess = bucketOwnerAccess {
            try encodeContainer.encode(bucketOwnerAccess.rawValue, forKey: .bucketOwnerAccess)
        }
        if let encryptionDisabled = encryptionDisabled {
            try encodeContainer.encode(encryptionDisabled, forKey: .encryptionDisabled)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let namespaceType = namespaceType {
            try encodeContainer.encode(namespaceType.rawValue, forKey: .namespaceType)
        }
        if let overrideArtifactName = overrideArtifactName {
            try encodeContainer.encode(overrideArtifactName, forKey: .overrideArtifactName)
        }
        if let packaging = packaging {
            try encodeContainer.encode(packaging.rawValue, forKey: .packaging)
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(ArtifactsType.self, forKey: .type)
        type = typeDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
        let pathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .path)
        path = pathDecoded
        let namespaceTypeDecoded = try containerValues.decodeIfPresent(ArtifactNamespace.self, forKey: .namespaceType)
        namespaceType = namespaceTypeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let packagingDecoded = try containerValues.decodeIfPresent(ArtifactPackaging.self, forKey: .packaging)
        packaging = packagingDecoded
        let overrideArtifactNameDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .overrideArtifactName)
        overrideArtifactName = overrideArtifactNameDecoded
        let encryptionDisabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .encryptionDisabled)
        encryptionDisabled = encryptionDisabledDecoded
        let artifactIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .artifactIdentifier)
        artifactIdentifier = artifactIdentifierDecoded
        let bucketOwnerAccessDecoded = try containerValues.decodeIfPresent(BucketOwnerAccess.self, forKey: .bucketOwnerAccess)
        bucketOwnerAccess = bucketOwnerAccessDecoded
    }
}
