// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BuildBatchPhase: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case contexts
        case durationInSeconds
        case endTime
        case phaseStatus
        case phaseType
        case startTime
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contexts = contexts {
            var contextsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .contexts)
            for phasecontexts0 in contexts {
                try contextsContainer.encode(phasecontexts0)
            }
        }
        if let durationInSeconds = durationInSeconds {
            try encodeContainer.encode(durationInSeconds, forKey: .durationInSeconds)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let phaseStatus = phaseStatus {
            try encodeContainer.encode(phaseStatus.rawValue, forKey: .phaseStatus)
        }
        if let phaseType = phaseType {
            try encodeContainer.encode(phaseType.rawValue, forKey: .phaseType)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let phaseTypeDecoded = try containerValues.decodeIfPresent(BuildBatchPhaseType.self, forKey: .phaseType)
        phaseType = phaseTypeDecoded
        let phaseStatusDecoded = try containerValues.decodeIfPresent(StatusType.self, forKey: .phaseStatus)
        phaseStatus = phaseStatusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let durationInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .durationInSeconds)
        durationInSeconds = durationInSecondsDecoded
        let contextsContainer = try containerValues.decodeIfPresent([PhaseContext].self, forKey: .contexts)
        var contextsDecoded0:[PhaseContext]? = nil
        if let contextsContainer = contextsContainer {
            contextsDecoded0 = [PhaseContext]()
            for structure0 in contextsContainer {
                contextsDecoded0?.append(structure0)
            }
        }
        contexts = contextsDecoded0
    }
}
