// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DescribeCodeCoveragesInput: Equatable {
    /// <p>The maximum line coverage percentage to report.</p>
    public let maxLineCoveragePercentage: Double?
    /// <p>The maximum number of results to return.</p>
    public let maxResults: Int?
    /// <p>The minimum line coverage percentage to report.</p>
    public let minLineCoveragePercentage: Double?
    /// <p>The <code>nextToken</code> value returned from a previous call to
    ///                 <code>DescribeCodeCoverages</code>. This specifies the next item to return. To
    ///             return the beginning of the list, exclude this parameter.</p>
    public let nextToken: String?
    /// <p>
    ///       The ARN of the report for which test cases are returned.
    ///     </p>
    public let reportArn: String?
    /// <p>Specifies how the results are sorted. Possible values are:</p>
    ///         <dl>
    ///             <dt>FILE_PATH</dt>
    ///             <dd>
    ///                     <p>The results are sorted by file path.</p>
    ///                 </dd>
    ///             <dt>LINE_COVERAGE_PERCENTAGE</dt>
    ///             <dd>
    ///                     <p>The results are sorted by the percentage of lines that are covered.</p>
    ///                 </dd>
    ///          </dl>
    public let sortBy: ReportCodeCoverageSortByType?
    /// <p>Specifies if the results are sorted in ascending or descending order.</p>
    public let sortOrder: SortOrderType?

    public init (
        maxLineCoveragePercentage: Double? = nil,
        maxResults: Int? = nil,
        minLineCoveragePercentage: Double? = nil,
        nextToken: String? = nil,
        reportArn: String? = nil,
        sortBy: ReportCodeCoverageSortByType? = nil,
        sortOrder: SortOrderType? = nil
    )
    {
        self.maxLineCoveragePercentage = maxLineCoveragePercentage
        self.maxResults = maxResults
        self.minLineCoveragePercentage = minLineCoveragePercentage
        self.nextToken = nextToken
        self.reportArn = reportArn
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}
