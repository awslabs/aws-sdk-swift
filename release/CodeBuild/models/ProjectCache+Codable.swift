// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProjectCache: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case location
        case modes
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let modes = modes {
            var modesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .modes)
            for projectcachemodes0 in modes {
                try modesContainer.encode(projectcachemodes0.rawValue)
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CacheType.self, forKey: .type)
        type = typeDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
        let modesContainer = try containerValues.decodeIfPresent([CacheMode].self, forKey: .modes)
        var modesDecoded0:[CacheMode]? = nil
        if let modesContainer = modesContainer {
            modesDecoded0 = [CacheMode]()
            for string0 in modesContainer {
                modesDecoded0?.append(string0)
            }
        }
        modes = modesDecoded0
    }
}
