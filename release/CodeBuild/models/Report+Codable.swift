// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Report: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case codeCoverageSummary
        case created
        case executionId
        case expired
        case exportConfig
        case name
        case reportGroupArn
        case status
        case testSummary
        case truncated
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let codeCoverageSummary = codeCoverageSummary {
            try encodeContainer.encode(codeCoverageSummary, forKey: .codeCoverageSummary)
        }
        if let created = created {
            try encodeContainer.encode(created.timeIntervalSince1970, forKey: .created)
        }
        if let executionId = executionId {
            try encodeContainer.encode(executionId, forKey: .executionId)
        }
        if let expired = expired {
            try encodeContainer.encode(expired.timeIntervalSince1970, forKey: .expired)
        }
        if let exportConfig = exportConfig {
            try encodeContainer.encode(exportConfig, forKey: .exportConfig)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let reportGroupArn = reportGroupArn {
            try encodeContainer.encode(reportGroupArn, forKey: .reportGroupArn)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let testSummary = testSummary {
            try encodeContainer.encode(testSummary, forKey: .testSummary)
        }
        if let truncated = truncated {
            try encodeContainer.encode(truncated, forKey: .truncated)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(ReportType.self, forKey: .type)
        type = typeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let reportGroupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reportGroupArn)
        reportGroupArn = reportGroupArnDecoded
        let executionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .executionId)
        executionId = executionIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ReportStatusType.self, forKey: .status)
        status = statusDecoded
        let createdDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .created)
        created = createdDecoded
        let expiredDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .expired)
        expired = expiredDecoded
        let exportConfigDecoded = try containerValues.decodeIfPresent(ReportExportConfig.self, forKey: .exportConfig)
        exportConfig = exportConfigDecoded
        let truncatedDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .truncated)
        truncated = truncatedDecoded
        let testSummaryDecoded = try containerValues.decodeIfPresent(TestReportSummary.self, forKey: .testSummary)
        testSummary = testSummaryDecoded
        let codeCoverageSummaryDecoded = try containerValues.decodeIfPresent(CodeCoverageReportSummary.self, forKey: .codeCoverageSummary)
        codeCoverageSummary = codeCoverageSummaryDecoded
    }
}
