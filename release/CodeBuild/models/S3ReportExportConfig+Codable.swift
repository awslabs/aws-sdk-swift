// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension S3ReportExportConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bucket
        case bucketOwner
        case encryptionDisabled
        case encryptionKey
        case packaging
        case path
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let bucketOwner = bucketOwner {
            try encodeContainer.encode(bucketOwner, forKey: .bucketOwner)
        }
        if let encryptionDisabled = encryptionDisabled {
            try encodeContainer.encode(encryptionDisabled, forKey: .encryptionDisabled)
        }
        if let encryptionKey = encryptionKey {
            try encodeContainer.encode(encryptionKey, forKey: .encryptionKey)
        }
        if let packaging = packaging {
            try encodeContainer.encode(packaging.rawValue, forKey: .packaging)
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bucket)
        bucket = bucketDecoded
        let bucketOwnerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bucketOwner)
        bucketOwner = bucketOwnerDecoded
        let pathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .path)
        path = pathDecoded
        let packagingDecoded = try containerValues.decodeIfPresent(ReportPackagingType.self, forKey: .packaging)
        packaging = packagingDecoded
        let encryptionKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .encryptionKey)
        encryptionKey = encryptionKeyDecoded
        let encryptionDisabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .encryptionDisabled)
        encryptionDisabled = encryptionDisabledDecoded
    }
}
