// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartBuildInputBody: Equatable {
    public let projectName: String?
    public let secondarySourcesOverride: [ProjectSource]?
    public let secondarySourcesVersionOverride: [ProjectSourceVersion]?
    public let sourceVersion: String?
    public let artifactsOverride: ProjectArtifacts?
    public let secondaryArtifactsOverride: [ProjectArtifacts]?
    public let environmentVariablesOverride: [EnvironmentVariable]?
    public let sourceTypeOverride: SourceType?
    public let sourceLocationOverride: String?
    public let sourceAuthOverride: SourceAuth?
    public let gitCloneDepthOverride: Int?
    public let gitSubmodulesConfigOverride: GitSubmodulesConfig?
    public let buildspecOverride: String?
    public let insecureSslOverride: Bool?
    public let reportBuildStatusOverride: Bool?
    public let buildStatusConfigOverride: BuildStatusConfig?
    public let environmentTypeOverride: EnvironmentType?
    public let imageOverride: String?
    public let computeTypeOverride: ComputeType?
    public let certificateOverride: String?
    public let cacheOverride: ProjectCache?
    public let serviceRoleOverride: String?
    public let privilegedModeOverride: Bool?
    public let timeoutInMinutesOverride: Int?
    public let queuedTimeoutInMinutesOverride: Int?
    public let encryptionKeyOverride: String?
    public let idempotencyToken: String?
    public let logsConfigOverride: LogsConfig?
    public let registryCredentialOverride: RegistryCredential?
    public let imagePullCredentialsTypeOverride: ImagePullCredentialsType?
    public let debugSessionEnabled: Bool?
}

extension StartBuildInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case artifactsOverride
        case buildStatusConfigOverride
        case buildspecOverride
        case cacheOverride
        case certificateOverride
        case computeTypeOverride
        case debugSessionEnabled
        case encryptionKeyOverride
        case environmentTypeOverride
        case environmentVariablesOverride
        case gitCloneDepthOverride
        case gitSubmodulesConfigOverride
        case idempotencyToken
        case imageOverride
        case imagePullCredentialsTypeOverride
        case insecureSslOverride
        case logsConfigOverride
        case privilegedModeOverride
        case projectName
        case queuedTimeoutInMinutesOverride
        case registryCredentialOverride
        case reportBuildStatusOverride
        case secondaryArtifactsOverride
        case secondarySourcesOverride
        case secondarySourcesVersionOverride
        case serviceRoleOverride
        case sourceAuthOverride
        case sourceLocationOverride
        case sourceTypeOverride
        case sourceVersion
        case timeoutInMinutesOverride
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .projectName)
        projectName = projectNameDecoded
        let secondarySourcesOverrideContainer = try containerValues.decodeIfPresent([ProjectSource].self, forKey: .secondarySourcesOverride)
        var secondarySourcesOverrideDecoded0:[ProjectSource]? = nil
        if let secondarySourcesOverrideContainer = secondarySourcesOverrideContainer {
            secondarySourcesOverrideDecoded0 = [ProjectSource]()
            for structure0 in secondarySourcesOverrideContainer {
                secondarySourcesOverrideDecoded0?.append(structure0)
            }
        }
        secondarySourcesOverride = secondarySourcesOverrideDecoded0
        let secondarySourcesVersionOverrideContainer = try containerValues.decodeIfPresent([ProjectSourceVersion].self, forKey: .secondarySourcesVersionOverride)
        var secondarySourcesVersionOverrideDecoded0:[ProjectSourceVersion]? = nil
        if let secondarySourcesVersionOverrideContainer = secondarySourcesVersionOverrideContainer {
            secondarySourcesVersionOverrideDecoded0 = [ProjectSourceVersion]()
            for structure0 in secondarySourcesVersionOverrideContainer {
                secondarySourcesVersionOverrideDecoded0?.append(structure0)
            }
        }
        secondarySourcesVersionOverride = secondarySourcesVersionOverrideDecoded0
        let sourceVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceVersion)
        sourceVersion = sourceVersionDecoded
        let artifactsOverrideDecoded = try containerValues.decodeIfPresent(ProjectArtifacts.self, forKey: .artifactsOverride)
        artifactsOverride = artifactsOverrideDecoded
        let secondaryArtifactsOverrideContainer = try containerValues.decodeIfPresent([ProjectArtifacts].self, forKey: .secondaryArtifactsOverride)
        var secondaryArtifactsOverrideDecoded0:[ProjectArtifacts]? = nil
        if let secondaryArtifactsOverrideContainer = secondaryArtifactsOverrideContainer {
            secondaryArtifactsOverrideDecoded0 = [ProjectArtifacts]()
            for structure0 in secondaryArtifactsOverrideContainer {
                secondaryArtifactsOverrideDecoded0?.append(structure0)
            }
        }
        secondaryArtifactsOverride = secondaryArtifactsOverrideDecoded0
        let environmentVariablesOverrideContainer = try containerValues.decodeIfPresent([EnvironmentVariable].self, forKey: .environmentVariablesOverride)
        var environmentVariablesOverrideDecoded0:[EnvironmentVariable]? = nil
        if let environmentVariablesOverrideContainer = environmentVariablesOverrideContainer {
            environmentVariablesOverrideDecoded0 = [EnvironmentVariable]()
            for structure0 in environmentVariablesOverrideContainer {
                environmentVariablesOverrideDecoded0?.append(structure0)
            }
        }
        environmentVariablesOverride = environmentVariablesOverrideDecoded0
        let sourceTypeOverrideDecoded = try containerValues.decodeIfPresent(SourceType.self, forKey: .sourceTypeOverride)
        sourceTypeOverride = sourceTypeOverrideDecoded
        let sourceLocationOverrideDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceLocationOverride)
        sourceLocationOverride = sourceLocationOverrideDecoded
        let sourceAuthOverrideDecoded = try containerValues.decodeIfPresent(SourceAuth.self, forKey: .sourceAuthOverride)
        sourceAuthOverride = sourceAuthOverrideDecoded
        let gitCloneDepthOverrideDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .gitCloneDepthOverride)
        gitCloneDepthOverride = gitCloneDepthOverrideDecoded
        let gitSubmodulesConfigOverrideDecoded = try containerValues.decodeIfPresent(GitSubmodulesConfig.self, forKey: .gitSubmodulesConfigOverride)
        gitSubmodulesConfigOverride = gitSubmodulesConfigOverrideDecoded
        let buildspecOverrideDecoded = try containerValues.decodeIfPresent(String.self, forKey: .buildspecOverride)
        buildspecOverride = buildspecOverrideDecoded
        let insecureSslOverrideDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .insecureSslOverride)
        insecureSslOverride = insecureSslOverrideDecoded
        let reportBuildStatusOverrideDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .reportBuildStatusOverride)
        reportBuildStatusOverride = reportBuildStatusOverrideDecoded
        let buildStatusConfigOverrideDecoded = try containerValues.decodeIfPresent(BuildStatusConfig.self, forKey: .buildStatusConfigOverride)
        buildStatusConfigOverride = buildStatusConfigOverrideDecoded
        let environmentTypeOverrideDecoded = try containerValues.decodeIfPresent(EnvironmentType.self, forKey: .environmentTypeOverride)
        environmentTypeOverride = environmentTypeOverrideDecoded
        let imageOverrideDecoded = try containerValues.decodeIfPresent(String.self, forKey: .imageOverride)
        imageOverride = imageOverrideDecoded
        let computeTypeOverrideDecoded = try containerValues.decodeIfPresent(ComputeType.self, forKey: .computeTypeOverride)
        computeTypeOverride = computeTypeOverrideDecoded
        let certificateOverrideDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificateOverride)
        certificateOverride = certificateOverrideDecoded
        let cacheOverrideDecoded = try containerValues.decodeIfPresent(ProjectCache.self, forKey: .cacheOverride)
        cacheOverride = cacheOverrideDecoded
        let serviceRoleOverrideDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRoleOverride)
        serviceRoleOverride = serviceRoleOverrideDecoded
        let privilegedModeOverrideDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .privilegedModeOverride)
        privilegedModeOverride = privilegedModeOverrideDecoded
        let timeoutInMinutesOverrideDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .timeoutInMinutesOverride)
        timeoutInMinutesOverride = timeoutInMinutesOverrideDecoded
        let queuedTimeoutInMinutesOverrideDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .queuedTimeoutInMinutesOverride)
        queuedTimeoutInMinutesOverride = queuedTimeoutInMinutesOverrideDecoded
        let encryptionKeyOverrideDecoded = try containerValues.decodeIfPresent(String.self, forKey: .encryptionKeyOverride)
        encryptionKeyOverride = encryptionKeyOverrideDecoded
        let idempotencyTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .idempotencyToken)
        idempotencyToken = idempotencyTokenDecoded
        let logsConfigOverrideDecoded = try containerValues.decodeIfPresent(LogsConfig.self, forKey: .logsConfigOverride)
        logsConfigOverride = logsConfigOverrideDecoded
        let registryCredentialOverrideDecoded = try containerValues.decodeIfPresent(RegistryCredential.self, forKey: .registryCredentialOverride)
        registryCredentialOverride = registryCredentialOverrideDecoded
        let imagePullCredentialsTypeOverrideDecoded = try containerValues.decodeIfPresent(ImagePullCredentialsType.self, forKey: .imagePullCredentialsTypeOverride)
        imagePullCredentialsTypeOverride = imagePullCredentialsTypeOverrideDecoded
        let debugSessionEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .debugSessionEnabled)
        debugSessionEnabled = debugSessionEnabledDecoded
    }
}
