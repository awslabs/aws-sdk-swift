// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Information about a webhook that connects repository events to a build project in
///       AWS CodeBuild.</p>
public struct Webhook: Equatable {
    /// <p>A regular expression used to determine which repository branches are built when a
    ///       webhook is triggered. If the name of a branch matches the regular expression, then it is
    ///       built. If <code>branchFilter</code> is empty, then all branches are built.</p>
    ///          <note>
    ///             <p>It is recommended that you use <code>filterGroups</code> instead of
    ///         <code>branchFilter</code>. </p>
    ///          </note>
    public let branchFilter: String?
    /// <p>Specifies the type of build this webhook will trigger.</p>
    public let buildType: WebhookBuildType?
    /// <p>An array of arrays of <code>WebhookFilter</code> objects used to determine which
    ///       webhooks are triggered. At least one <code>WebhookFilter</code> in the array must
    ///       specify <code>EVENT</code> as its <code>type</code>. </p>
    ///          <p>For a build to be triggered, at least one filter group in the
    ///       <code>filterGroups</code> array must pass. For a filter group to pass, each of its
    ///       filters must pass. </p>
    public let filterGroups: [[WebhookFilter]?]?
    /// <p>A timestamp that indicates the last time a repository's secret token was modified.
    ///     </p>
    public let lastModifiedSecret: Date?
    /// <p>The AWS CodeBuild endpoint where webhook events are sent.</p>
    public let payloadUrl: String?
    /// <p>The secret token of the associated repository. </p>
    ///          <note>
    ///             <p>A Bitbucket webhook does not support <code>secret</code>. </p>
    ///          </note>
    public let secret: String?
    /// <p>The URL to the webhook.</p>
    public let url: String?

    public init (
        branchFilter: String? = nil,
        buildType: WebhookBuildType? = nil,
        filterGroups: [[WebhookFilter]?]? = nil,
        lastModifiedSecret: Date? = nil,
        payloadUrl: String? = nil,
        secret: String? = nil,
        url: String? = nil
    )
    {
        self.branchFilter = branchFilter
        self.buildType = buildType
        self.filterGroups = filterGroups
        self.lastModifiedSecret = lastModifiedSecret
        self.payloadUrl = payloadUrl
        self.secret = secret
        self.url = url
    }
}
