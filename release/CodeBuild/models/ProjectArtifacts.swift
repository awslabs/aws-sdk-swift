// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Information about the build output artifacts for the build project.</p>
public struct ProjectArtifacts: Equatable {
    /// <p> An identifier for this artifact definition. </p>
    public let artifactIdentifier: String?
    /// <p>Specifies the access for objects that are uploaded to an Amazon S3 bucket that is owned by
    ///             another account.</p>
    ///         <p>By default, only the account that uploads the objects to the bucket has access to
    ///             these objects. This property allows you to give the bucket owner access to these
    ///             objects.</p>
    ///          <dl>
    ///             <dt>NONE</dt>
    ///             <dd>
    ///                 <p>The bucket owner does not have access to the objects. This is the
    ///                         default.</p>
    ///             </dd>
    ///             <dt>READ_ONLY</dt>
    ///             <dd>
    ///               <p>The bucket owner has read only access to the objects. The uploading account
    ///                         retains ownership of the objects.</p>
    ///             </dd>
    ///             <dt>FULL</dt>
    ///             <dd>
    ///               <p>The bucket owner has full access to the objects. Object ownership is determined
    ///                         by the following criteria:</p>
    ///                     <ul>
    ///                   <li>
    ///                             <p>If the bucket is configured with the <b>Bucket
    ///                                     owner preferred</b> setting, the bucket owner owns the
    ///                                 objects. The uploading account will have object access as specified
    ///                                 by the bucket's policy.</p>
    ///                         </li>
    ///                   <li>
    ///                             <p>Otherwise, the uploading account retains ownership of the
    ///                                 objects.</p>
    ///                         </li>
    ///                </ul>
    ///                     <p>For more information about Amazon S3 object ownership, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">Controlling ownership of uploaded objects using S3
    ///                             Object Ownership</a> in the <i>Amazon Simple Storage Service User
    ///                         Guide</i>.</p>
    ///             </dd>
    ///          </dl>
    public let bucketOwnerAccess: BucketOwnerAccess?
    /// <p> Set to true if you do not want your output artifacts encrypted. This option is valid
    ///             only if your artifacts type is Amazon S3. If this is set with another artifacts type, an
    ///             invalidInputException is thrown. </p>
    public let encryptionDisabled: Bool?
    /// <p>Information about the build output artifact location:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>If <code>type</code> is set to <code>CODEPIPELINE</code>, AWS CodePipeline ignores this
    ///                     value if specified. This is because AWS CodePipeline manages its build output locations
    ///                     instead of AWS CodeBuild.</p>
    ///             </li>
    ///             <li>
    ///                 <p>If <code>type</code> is set to <code>NO_ARTIFACTS</code>, this value is
    ///                     ignored if specified, because no build output is produced.</p>
    ///             </li>
    ///             <li>
    ///                 <p>If <code>type</code> is set to <code>S3</code>, this is the name of the output
    ///                     bucket.</p>
    ///             </li>
    ///          </ul>
    public let location: String?
    /// <p>Along with <code>path</code> and <code>namespaceType</code>, the pattern that AWS CodeBuild
    ///             uses to name and store the output artifact:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>If <code>type</code> is set to <code>CODEPIPELINE</code>, AWS CodePipeline ignores this
    ///                     value if specified. This is because AWS CodePipeline manages its build output names instead
    ///                     of AWS CodeBuild.</p>
    ///             </li>
    ///             <li>
    ///                 <p>If <code>type</code> is set to <code>NO_ARTIFACTS</code>, this value is
    ///                     ignored if specified, because no build output is produced.</p>
    ///             </li>
    ///             <li>
    ///                 <p>If <code>type</code> is set to <code>S3</code>, this is the name of the output
    ///                     artifact object. If you set the name to be a forward slash ("/"), the artifact
    ///                     is stored in the root of the output bucket.</p>
    ///             </li>
    ///          </ul>
    ///         <p>For example:</p>
    ///         <ul>
    ///             <li>
    ///                 <p> If <code>path</code> is set to <code>MyArtifacts</code>,
    ///                         <code>namespaceType</code> is set to <code>BUILD_ID</code>, and
    ///                         <code>name</code> is set to <code>MyArtifact.zip</code>, then the output
    ///                     artifact is stored in <code>MyArtifacts/<build-ID>/MyArtifact.zip</code>. </p>
    ///             </li>
    ///             <li>
    ///                 <p> If <code>path</code> is empty, <code>namespaceType</code> is set to
    ///                         <code>NONE</code>, and <code>name</code> is set to "<code>/</code>", the
    ///                     output artifact is stored in the root of the output bucket. </p>
    ///             </li>
    ///             <li>
    ///                 <p> If <code>path</code> is set to <code>MyArtifacts</code>,
    ///                         <code>namespaceType</code> is set to <code>BUILD_ID</code>, and
    ///                         <code>name</code> is set to "<code>/</code>", the output artifact is stored
    ///                     in <code>MyArtifacts/<build-ID></code>. </p>
    ///             </li>
    ///          </ul>
    public let name: String?
    /// <p>Along with <code>path</code> and <code>name</code>, the pattern that AWS CodeBuild uses to
    ///             determine the name and location to store the output artifact:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>If <code>type</code> is set to <code>CODEPIPELINE</code>, AWS CodePipeline ignores this
    ///                     value if specified. This is because AWS CodePipeline manages its build output names instead
    ///                     of AWS CodeBuild.</p>
    ///             </li>
    ///             <li>
    ///                 <p>If <code>type</code> is set to <code>NO_ARTIFACTS</code>, this value is
    ///                     ignored if specified, because no build output is produced.</p>
    ///             </li>
    ///             <li>
    ///                 <p>If <code>type</code> is set to <code>S3</code>, valid values include:</p>
    ///                 <ul>
    ///                   <li>
    ///                         <p>
    ///                         <code>BUILD_ID</code>: Include the build ID in the location of the
    ///                             build output artifact.</p>
    ///                     </li>
    ///                   <li>
    ///                         <p>
    ///                         <code>NONE</code>: Do not include the build ID. This is the default if
    ///                                 <code>namespaceType</code> is not specified.</p>
    ///                     </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    ///         <p>For example, if <code>path</code> is set to <code>MyArtifacts</code>,
    ///                 <code>namespaceType</code> is set to <code>BUILD_ID</code>, and <code>name</code> is
    ///             set to <code>MyArtifact.zip</code>, the output artifact is stored in
    ///                 <code>MyArtifacts/<build-ID>/MyArtifact.zip</code>.</p>
    public let namespaceType: ArtifactNamespace?
    /// <p> If this flag is set, a name specified in the buildspec file overrides the artifact
    ///             name. The name specified in a buildspec file is calculated at build time and uses the
    ///             Shell Command Language. For example, you can append a date and time to your artifact
    ///             name so that it is always unique. </p>
    public let overrideArtifactName: Bool?
    /// <p>The type of build output artifact to create:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>If <code>type</code> is set to <code>CODEPIPELINE</code>, AWS CodePipeline ignores this
    ///                     value if specified. This is because AWS CodePipeline manages its build output artifacts
    ///                     instead of AWS CodeBuild.</p>
    ///             </li>
    ///             <li>
    ///                 <p>If <code>type</code> is set to <code>NO_ARTIFACTS</code>, this value is
    ///                     ignored if specified, because no build output is produced.</p>
    ///             </li>
    ///             <li>
    ///                 <p>If <code>type</code> is set to <code>S3</code>, valid values include:</p>
    ///                 <ul>
    ///                   <li>
    ///                         <p>
    ///                         <code>NONE</code>: AWS CodeBuild creates in the output bucket a folder that
    ///                             contains the build output. This is the default if <code>packaging</code>
    ///                             is not specified.</p>
    ///                     </li>
    ///                   <li>
    ///                         <p>
    ///                         <code>ZIP</code>: AWS CodeBuild creates in the output bucket a ZIP file that
    ///                             contains the build output.</p>
    ///                     </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    public let packaging: ArtifactPackaging?
    /// <p>Along with <code>namespaceType</code> and <code>name</code>, the pattern that AWS CodeBuild
    ///             uses to name and store the output artifact:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>If <code>type</code> is set to <code>CODEPIPELINE</code>, AWS CodePipeline ignores this
    ///                     value if specified. This is because AWS CodePipeline manages its build output names instead
    ///                     of AWS CodeBuild.</p>
    ///             </li>
    ///             <li>
    ///                 <p>If <code>type</code> is set to <code>NO_ARTIFACTS</code>, this value is
    ///                     ignored if specified, because no build output is produced.</p>
    ///             </li>
    ///             <li>
    ///                 <p>If <code>type</code> is set to <code>S3</code>, this is the path to the output
    ///                     artifact. If <code>path</code> is not specified, <code>path</code> is not
    ///                     used.</p>
    ///             </li>
    ///          </ul>
    ///         <p>For example, if <code>path</code> is set to <code>MyArtifacts</code>,
    ///                 <code>namespaceType</code> is set to <code>NONE</code>, and <code>name</code> is set
    ///             to <code>MyArtifact.zip</code>, the output artifact is stored in the output bucket at
    ///                 <code>MyArtifacts/MyArtifact.zip</code>.</p>
    public let path: String?
    /// <p>The type of build output artifact. Valid values include:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>CODEPIPELINE</code>: The build project has build output generated
    ///                     through AWS CodePipeline. </p>
    ///                 <note>
    ///                     <p>The <code>CODEPIPELINE</code> type is not supported for
    ///                             <code>secondaryArtifacts</code>.</p>
    ///                 </note>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>NO_ARTIFACTS</code>: The build project does not produce any build
    ///                     output.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>S3</code>: The build project stores build output in Amazon S3.</p>
    ///             </li>
    ///          </ul>
    public let type: ArtifactsType?

    public init (
        artifactIdentifier: String? = nil,
        bucketOwnerAccess: BucketOwnerAccess? = nil,
        encryptionDisabled: Bool? = nil,
        location: String? = nil,
        name: String? = nil,
        namespaceType: ArtifactNamespace? = nil,
        overrideArtifactName: Bool? = nil,
        packaging: ArtifactPackaging? = nil,
        path: String? = nil,
        type: ArtifactsType? = nil
    )
    {
        self.artifactIdentifier = artifactIdentifier
        self.bucketOwnerAccess = bucketOwnerAccess
        self.encryptionDisabled = encryptionDisabled
        self.location = location
        self.name = name
        self.namespaceType = namespaceType
        self.overrideArtifactName = overrideArtifactName
        self.packaging = packaging
        self.path = path
        self.type = type
    }
}
