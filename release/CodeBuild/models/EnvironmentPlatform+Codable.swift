// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EnvironmentPlatform: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case languages
        case platform
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languages = languages {
            var languagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .languages)
            for environmentlanguages0 in languages {
                try languagesContainer.encode(environmentlanguages0)
            }
        }
        if let platform = platform {
            try encodeContainer.encode(platform.rawValue, forKey: .platform)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let platformDecoded = try containerValues.decodeIfPresent(PlatformType.self, forKey: .platform)
        platform = platformDecoded
        let languagesContainer = try containerValues.decodeIfPresent([EnvironmentLanguage].self, forKey: .languages)
        var languagesDecoded0:[EnvironmentLanguage]? = nil
        if let languagesContainer = languagesContainer {
            languagesDecoded0 = [EnvironmentLanguage]()
            for structure0 in languagesContainer {
                languagesDecoded0?.append(structure0)
            }
        }
        languages = languagesDecoded0
    }
}
