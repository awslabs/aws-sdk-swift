// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResponsePartitionKey: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dimensions = "Dimensions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensions = dimensions {
            var dimensionsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .dimensions)
            for (dictKey0, dimensionmap0) in dimensions {
                try dimensionsContainer.encode(dimensionmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .dimensions)
        var dimensionsDecoded0: [String:String]? = nil
        if let dimensionsContainer = dimensionsContainer {
            dimensionsDecoded0 = [String:String]()
            for (key0, requeststring0) in dimensionsContainer {
                dimensionsDecoded0?[key0] = requeststring0
            }
        }
        dimensions = dimensionsDecoded0
    }
}
