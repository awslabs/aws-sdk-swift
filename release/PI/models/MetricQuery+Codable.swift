// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MetricQuery: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case filter = "Filter"
        case groupBy = "GroupBy"
        case metric = "Metric"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = filter {
            var filterContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .filter)
            for (dictKey0, metricqueryfiltermap0) in filter {
                try filterContainer.encode(metricqueryfiltermap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let groupBy = groupBy {
            try encodeContainer.encode(groupBy, forKey: .groupBy)
        }
        if let metric = metric {
            try encodeContainer.encode(metric, forKey: .metric)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricDecoded = try containerValues.decodeIfPresent(String.self, forKey: .metric)
        metric = metricDecoded
        let groupByDecoded = try containerValues.decodeIfPresent(DimensionGroup.self, forKey: .groupBy)
        groupBy = groupByDecoded
        let filterContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .filter)
        var filterDecoded0: [String:String]? = nil
        if let filterContainer = filterContainer {
            filterDecoded0 = [String:String]()
            for (key0, requeststring0) in filterContainer {
                filterDecoded0?[key0] = requeststring0
            }
        }
        filter = filterDecoded0
    }
}
