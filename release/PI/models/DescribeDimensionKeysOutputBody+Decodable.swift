// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDimensionKeysOutputBody: Equatable {
    public let alignedStartTime: Date?
    public let alignedEndTime: Date?
    public let partitionKeys: [ResponsePartitionKey]?
    public let keys: [DimensionKeyDescription]?
    public let nextToken: String?
}

extension DescribeDimensionKeysOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case alignedEndTime = "AlignedEndTime"
        case alignedStartTime = "AlignedStartTime"
        case keys = "Keys"
        case nextToken = "NextToken"
        case partitionKeys = "PartitionKeys"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alignedStartTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .alignedStartTime)
        alignedStartTime = alignedStartTimeDecoded
        let alignedEndTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .alignedEndTime)
        alignedEndTime = alignedEndTimeDecoded
        let partitionKeysContainer = try containerValues.decodeIfPresent([ResponsePartitionKey].self, forKey: .partitionKeys)
        var partitionKeysDecoded0:[ResponsePartitionKey]? = nil
        if let partitionKeysContainer = partitionKeysContainer {
            partitionKeysDecoded0 = [ResponsePartitionKey]()
            for structure0 in partitionKeysContainer {
                partitionKeysDecoded0?.append(structure0)
            }
        }
        partitionKeys = partitionKeysDecoded0
        let keysContainer = try containerValues.decodeIfPresent([DimensionKeyDescription].self, forKey: .keys)
        var keysDecoded0:[DimensionKeyDescription]? = nil
        if let keysContainer = keysContainer {
            keysDecoded0 = [DimensionKeyDescription]()
            for structure0 in keysContainer {
                keysDecoded0?.append(structure0)
            }
        }
        keys = keysDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
