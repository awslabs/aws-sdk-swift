// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DimensionKeyDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dimensions = "Dimensions"
        case partitions = "Partitions"
        case total = "Total"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensions = dimensions {
            var dimensionsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .dimensions)
            for (dictKey0, dimensionmap0) in dimensions {
                try dimensionsContainer.encode(dimensionmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let partitions = partitions {
            var partitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitions)
            for metricvalueslist0 in partitions {
                try partitionsContainer.encode(metricvalueslist0)
            }
        }
        if let total = total {
            try encodeContainer.encode(total, forKey: .total)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .dimensions)
        var dimensionsDecoded0: [String:String]? = nil
        if let dimensionsContainer = dimensionsContainer {
            dimensionsDecoded0 = [String:String]()
            for (key0, requeststring0) in dimensionsContainer {
                dimensionsDecoded0?[key0] = requeststring0
            }
        }
        dimensions = dimensionsDecoded0
        let totalDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .total)
        total = totalDecoded
        let partitionsContainer = try containerValues.decodeIfPresent([Double].self, forKey: .partitions)
        var partitionsDecoded0:[Double]? = nil
        if let partitionsContainer = partitionsContainer {
            partitionsDecoded0 = [Double]()
            for double0 in partitionsContainer {
                partitionsDecoded0?.append(double0)
            }
        }
        partitions = partitionsDecoded0
    }
}
