// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetDimensionKeyDetailsInputBody: Equatable {
    public let serviceType: ServiceType?
    public let identifier: String?
    public let group: String?
    public let groupIdentifier: String?
    public let requestedDimensions: [String]?
}

extension GetDimensionKeyDetailsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case group = "Group"
        case groupIdentifier = "GroupIdentifier"
        case identifier = "Identifier"
        case requestedDimensions = "RequestedDimensions"
        case serviceType = "ServiceType"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceTypeDecoded = try containerValues.decodeIfPresent(ServiceType.self, forKey: .serviceType)
        serviceType = serviceTypeDecoded
        let identifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identifier)
        identifier = identifierDecoded
        let groupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .group)
        group = groupDecoded
        let groupIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .groupIdentifier)
        groupIdentifier = groupIdentifierDecoded
        let requestedDimensionsContainer = try containerValues.decodeIfPresent([String].self, forKey: .requestedDimensions)
        var requestedDimensionsDecoded0:[String]? = nil
        if let requestedDimensionsContainer = requestedDimensionsContainer {
            requestedDimensionsDecoded0 = [String]()
            for string0 in requestedDimensionsContainer {
                requestedDimensionsDecoded0?.append(string0)
            }
        }
        requestedDimensions = requestedDimensionsDecoded0
    }
}
