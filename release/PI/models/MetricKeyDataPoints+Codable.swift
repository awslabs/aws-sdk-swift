// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MetricKeyDataPoints: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dataPoints = "DataPoints"
        case key = "Key"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataPoints = dataPoints {
            var dataPointsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataPoints)
            for datapointslist0 in dataPoints {
                try dataPointsContainer.encode(datapointslist0)
            }
        }
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(ResponseResourceMetricKey.self, forKey: .key)
        key = keyDecoded
        let dataPointsContainer = try containerValues.decodeIfPresent([DataPoint].self, forKey: .dataPoints)
        var dataPointsDecoded0:[DataPoint]? = nil
        if let dataPointsContainer = dataPointsContainer {
            dataPointsDecoded0 = [DataPoint]()
            for structure0 in dataPointsContainer {
                dataPointsDecoded0?.append(structure0)
            }
        }
        dataPoints = dataPointsDecoded0
    }
}
