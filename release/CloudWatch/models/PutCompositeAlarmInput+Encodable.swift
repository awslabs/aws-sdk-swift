// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PutCompositeAlarmInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let actionsEnabled = actionsEnabled {
            try container.encode(actionsEnabled, forKey: Key("ActionsEnabled"))
        }
        if let alarmActions = alarmActions {
            var alarmActionsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("AlarmActions"))
            for (index0, resourcename0) in alarmActions.enumerated() {
                try alarmActionsContainer.encode(resourcename0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let alarmDescription = alarmDescription {
            try container.encode(alarmDescription, forKey: Key("AlarmDescription"))
        }
        if let alarmName = alarmName {
            try container.encode(alarmName, forKey: Key("AlarmName"))
        }
        if let alarmRule = alarmRule {
            try container.encode(alarmRule, forKey: Key("AlarmRule"))
        }
        if let insufficientDataActions = insufficientDataActions {
            var insufficientDataActionsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("InsufficientDataActions"))
            for (index0, resourcename0) in insufficientDataActions.enumerated() {
                try insufficientDataActionsContainer.encode(resourcename0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let oKActions = oKActions {
            var oKActionsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("OKActions"))
            for (index0, resourcename0) in oKActions.enumerated() {
                try oKActionsContainer.encode(resourcename0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("PutCompositeAlarm", forKey:Key("Action"))
        try container.encode("2010-08-01", forKey:Key("Version"))
    }
}
