// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetMetricDataInput: Equatable {
    /// <p>The time stamp indicating the latest data to be returned.</p>
    /// 		       <p>The value specified is exclusive; results include data points up to the specified time stamp.</p>
    /// 		       <p>For better performance, specify <code>StartTime</code> and <code>EndTime</code>
    /// 			values that align with the value of the metric's <code>Period</code> and sync up with
    /// 			the beginning and end of an hour. For example, if the <code>Period</code> of a metric
    /// 			is 5 minutes, specifying 12:05 or 12:30 as <code>EndTime</code> can get a faster response
    /// 			from CloudWatch than setting 12:07 or 12:29 as the <code>EndTime</code>.</p>
    public let endTime: Date?
    /// <p>This structure includes the <code>Timezone</code> parameter, which you can use
    /// 			to specify your time zone so that the labels of returned data display the
    /// 			correct time
    /// 			for your time zone. </p>
    public let labelOptions: LabelOptions?
    /// <p>The maximum number of data points the request should return before paginating. If you omit
    /// 			this, the default of 100,800 is used.</p>
    public let maxDatapoints: Int?
    /// <p>The metric queries to be returned. A single <code>GetMetricData</code> call can include as many as 500 <code>MetricDataQuery</code>
    /// 		structures. Each of these structures can specify either a metric to retrieve, or a math expression to perform on retrieved data. </p>
    public let metricDataQueries: [MetricDataQuery]?
    /// <p>Include this value, if it was returned by the previous <code>GetMetricData</code> operation,
    /// 			to get the next set of data points.</p>
    public let nextToken: String?
    /// <p>The order in which data points should be returned. <code>TimestampDescending</code> returns the newest data first and paginates
    /// 			when the <code>MaxDatapoints</code> limit is reached. <code>TimestampAscending</code> returns the oldest data first and paginates
    /// 			when the <code>MaxDatapoints</code> limit is reached.</p>
    public let scanBy: ScanBy?
    /// <p>The time stamp indicating the earliest data to be returned.</p>
    /// 		       <p>The value specified is inclusive; results include data points with the specified time stamp. </p>
    /// 		       <p>CloudWatch rounds the specified time stamp as follows:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>Start time less than 15 days ago - Round down to the nearest whole minute.
    /// 				For example, 12:32:34 is rounded down to 12:32:00.</p>
    ///             </li>
    ///             <li>
    ///                <p>Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval.
    /// 				For example, 12:32:34 is rounded down to 12:30:00.</p>
    ///             </li>
    ///             <li>
    ///                <p>Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval.
    /// 				For example, 12:32:34 is rounded down to 12:00:00.</p>
    ///             </li>
    ///          </ul>
    /// 		       <p>If you set <code>Period</code> to 5, 10, or 30, the start time of your request is
    /// 			rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions
    /// 			of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous
    /// 			10-second period, the start time of your request is rounded down and you receive data from 01:05:10 to
    /// 			01:05:20. If you make a query at 15:07:17 for the previous 5 minutes of data, using a
    /// 			period of 5 seconds, you receive data
    /// 			timestamped between 15:02:15 and 15:07:15.
    /// 		</p>
    /// 		       <p>For better performance, specify <code>StartTime</code> and <code>EndTime</code>
    /// 		values that align with the value of the metric's <code>Period</code> and sync up with
    /// 		the beginning and end of an hour. For example, if the <code>Period</code> of a metric
    /// 		is 5 minutes, specifying 12:05 or 12:30 as <code>StartTime</code> can get a faster response
    /// 			from CloudWatch than setting 12:07 or 12:29 as the <code>StartTime</code>.</p>
    public let startTime: Date?

    public init (
        endTime: Date? = nil,
        labelOptions: LabelOptions? = nil,
        maxDatapoints: Int? = nil,
        metricDataQueries: [MetricDataQuery]? = nil,
        nextToken: String? = nil,
        scanBy: ScanBy? = nil,
        startTime: Date? = nil
    )
    {
        self.endTime = endTime
        self.labelOptions = labelOptions
        self.maxDatapoints = maxDatapoints
        self.metricDataQueries = metricDataQueries
        self.nextToken = nextToken
        self.scanBy = scanBy
        self.startTime = startTime
    }
}
