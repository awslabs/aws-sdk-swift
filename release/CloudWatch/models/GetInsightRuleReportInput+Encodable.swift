// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GetInsightRuleReportInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let endTime = endTime {
            try container.encode(TimestampWrapper(endTime, format: .dateTime), forKey: Key("endTime"))
        }
        if let maxContributorCount = maxContributorCount {
            try container.encode(maxContributorCount, forKey: Key("MaxContributorCount"))
        }
        if let metrics = metrics {
            var metricsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Metrics"))
            for (index0, insightrulemetricname0) in metrics.enumerated() {
                try metricsContainer.encode(insightrulemetricname0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let orderBy = orderBy {
            try container.encode(orderBy, forKey: Key("OrderBy"))
        }
        if let period = period {
            try container.encode(period, forKey: Key("Period"))
        }
        if let ruleName = ruleName {
            try container.encode(ruleName, forKey: Key("RuleName"))
        }
        if let startTime = startTime {
            try container.encode(TimestampWrapper(startTime, format: .dateTime), forKey: Key("startTime"))
        }
        try container.encode("GetInsightRuleReport", forKey:Key("Action"))
        try container.encode("2010-08-01", forKey:Key("Version"))
    }
}
