// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DashboardEntry: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dashboardArn = "DashboardArn"
        case dashboardName = "DashboardName"
        case lastModified = "LastModified"
        case size = "Size"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let dashboardArn = dashboardArn {
            try container.encode(dashboardArn, forKey: Key("DashboardArn"))
        }
        if let dashboardName = dashboardName {
            try container.encode(dashboardName, forKey: Key("DashboardName"))
        }
        if let lastModified = lastModified {
            try container.encode(TimestampWrapper(lastModified, format: .dateTime), forKey: Key("lastModified"))
        }
        if size != 0 {
            try container.encode(size, forKey: Key("Size"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dashboardNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dashboardName)
        dashboardName = dashboardNameDecoded
        let dashboardArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dashboardArn)
        dashboardArn = dashboardArnDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastModified)
        var lastModifiedBuffer:Date? = nil
        if let lastModifiedDecoded = lastModifiedDecoded {
            lastModifiedBuffer = try TimestampWrapperDecoder.parseDateStringValue(lastModifiedDecoded, format: .dateTime)
        }
        lastModified = lastModifiedBuffer
        let sizeDecoded = try containerValues.decode(Int.self, forKey: .size)
        size = sizeDecoded
    }
}
