// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeInsightRulesOutputBody: Equatable {
    public let nextToken: String?
    public let insightRules: [InsightRule]?
}

extension DescribeInsightRulesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case insightRules = "InsightRules"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeInsightRulesResult"))
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.insightRules) {
            struct KeyVal0{struct member{}}
            let insightRulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .insightRules)
            if let insightRulesWrappedContainer = insightRulesWrappedContainer {
                let insightRulesContainer = try insightRulesWrappedContainer.decodeIfPresent([InsightRule].self, forKey: .member)
                var insightRulesBuffer:[InsightRule]? = nil
                if let insightRulesContainer = insightRulesContainer {
                    insightRulesBuffer = [InsightRule]()
                    for structureContainer0 in insightRulesContainer {
                        insightRulesBuffer?.append(structureContainer0)
                    }
                }
                insightRules = insightRulesBuffer
            } else {
                insightRules = []
            }
        } else {
            insightRules = nil
        }
    }
}
