// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetInsightRuleReportOutput: Equatable {
    /// <p>The sum of the values from all individual contributors that match the rule.</p>
    public let aggregateValue: Double?
    /// <p>Specifies whether this rule aggregates contributor data by COUNT or SUM.</p>
    public let aggregationStatistic: String?
    /// <p>An approximate count of the unique contributors found by this rule in this time period.</p>
    public let approximateUniqueCount: Int?
    /// <p>An array of the unique contributors found by this rule in this time period. If the rule contains multiple keys, each combination of values
    /// 		for the keys counts as a unique contributor.</p>
    public let contributors: [InsightRuleContributor]?
    /// <p>An array of the strings used as the keys for this rule. The keys are the dimensions used to classify contributors.
    /// 			If the rule contains more than one key, then each unique combination of values for the keys is counted as a unique contributor.</p>
    public let keyLabels: [String]?
    /// <p>A time series of metric data points that matches the time period in the rule request.</p>
    public let metricDatapoints: [InsightRuleMetricDatapoint]?

    public init (
        aggregateValue: Double? = nil,
        aggregationStatistic: String? = nil,
        approximateUniqueCount: Int? = nil,
        contributors: [InsightRuleContributor]? = nil,
        keyLabels: [String]? = nil,
        metricDatapoints: [InsightRuleMetricDatapoint]? = nil
    )
    {
        self.aggregateValue = aggregateValue
        self.aggregationStatistic = aggregationStatistic
        self.approximateUniqueCount = approximateUniqueCount
        self.contributors = contributors
        self.keyLabels = keyLabels
        self.metricDatapoints = metricDatapoints
    }
}
