// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InsightRuleMetricDatapoint: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case average = "Average"
        case maxContributorValue = "MaxContributorValue"
        case maximum = "Maximum"
        case minimum = "Minimum"
        case sampleCount = "SampleCount"
        case sum = "Sum"
        case timestamp = "Timestamp"
        case uniqueContributors = "UniqueContributors"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let average = average {
            try container.encode(average, forKey: Key("Average"))
        }
        if let maxContributorValue = maxContributorValue {
            try container.encode(maxContributorValue, forKey: Key("MaxContributorValue"))
        }
        if let maximum = maximum {
            try container.encode(maximum, forKey: Key("Maximum"))
        }
        if let minimum = minimum {
            try container.encode(minimum, forKey: Key("Minimum"))
        }
        if let sampleCount = sampleCount {
            try container.encode(sampleCount, forKey: Key("SampleCount"))
        }
        if let sum = sum {
            try container.encode(sum, forKey: Key("Sum"))
        }
        if let timestamp = timestamp {
            try container.encode(TimestampWrapper(timestamp, format: .dateTime), forKey: Key("timestamp"))
        }
        if let uniqueContributors = uniqueContributors {
            try container.encode(uniqueContributors, forKey: Key("UniqueContributors"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timestamp)
        var timestampBuffer:Date? = nil
        if let timestampDecoded = timestampDecoded {
            timestampBuffer = try TimestampWrapperDecoder.parseDateStringValue(timestampDecoded, format: .dateTime)
        }
        timestamp = timestampBuffer
        let uniqueContributorsDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .uniqueContributors)
        uniqueContributors = uniqueContributorsDecoded
        let maxContributorValueDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .maxContributorValue)
        maxContributorValue = maxContributorValueDecoded
        let sampleCountDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .sampleCount)
        sampleCount = sampleCountDecoded
        let averageDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .average)
        average = averageDecoded
        let sumDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .sum)
        sum = sumDecoded
        let minimumDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .minimum)
        minimum = minimumDecoded
        let maximumDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .maximum)
        maximum = maximumDecoded
    }
}
