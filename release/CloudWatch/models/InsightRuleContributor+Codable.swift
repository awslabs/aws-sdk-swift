// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InsightRuleContributor: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case approximateAggregateValue = "ApproximateAggregateValue"
        case datapoints = "Datapoints"
        case keys = "Keys"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let approximateAggregateValue = approximateAggregateValue {
            try container.encode(approximateAggregateValue, forKey: Key("ApproximateAggregateValue"))
        }
        if let datapoints = datapoints {
            var datapointsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Datapoints"))
            for (index0, insightrulecontributordatapoint0) in datapoints.enumerated() {
                try datapointsContainer.encode(insightrulecontributordatapoint0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let keys = keys {
            var keysContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Keys"))
            for (index0, insightrulecontributorkey0) in keys.enumerated() {
                try keysContainer.encode(insightrulecontributorkey0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.keys) {
            struct KeyVal0{struct member{}}
            let keysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .keys)
            if let keysWrappedContainer = keysWrappedContainer {
                let keysContainer = try keysWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var keysBuffer:[String]? = nil
                if let keysContainer = keysContainer {
                    keysBuffer = [String]()
                    for stringContainer0 in keysContainer {
                        keysBuffer?.append(stringContainer0)
                    }
                }
                keys = keysBuffer
            } else {
                keys = []
            }
        } else {
            keys = nil
        }
        let approximateAggregateValueDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .approximateAggregateValue)
        approximateAggregateValue = approximateAggregateValueDecoded
        if containerValues.contains(.datapoints) {
            struct KeyVal0{struct member{}}
            let datapointsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .datapoints)
            if let datapointsWrappedContainer = datapointsWrappedContainer {
                let datapointsContainer = try datapointsWrappedContainer.decodeIfPresent([InsightRuleContributorDatapoint].self, forKey: .member)
                var datapointsBuffer:[InsightRuleContributorDatapoint]? = nil
                if let datapointsContainer = datapointsContainer {
                    datapointsBuffer = [InsightRuleContributorDatapoint]()
                    for structureContainer0 in datapointsContainer {
                        datapointsBuffer?.append(structureContainer0)
                    }
                }
                datapoints = datapointsBuffer
            } else {
                datapoints = []
            }
        } else {
            datapoints = nil
        }
    }
}
