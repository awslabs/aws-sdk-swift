// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InsightRule: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case definition = "Definition"
        case name = "Name"
        case schema = "Schema"
        case state = "State"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let definition = definition {
            try container.encode(definition, forKey: Key("Definition"))
        }
        if let name = name {
            try container.encode(name, forKey: Key("Name"))
        }
        if let schema = schema {
            try container.encode(schema, forKey: Key("Schema"))
        }
        if let state = state {
            try container.encode(state, forKey: Key("State"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .state)
        state = stateDecoded
        let schemaDecoded = try containerValues.decodeIfPresent(String.self, forKey: .schema)
        schema = schemaDecoded
        let definitionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .definition)
        definition = definitionDecoded
    }
}
