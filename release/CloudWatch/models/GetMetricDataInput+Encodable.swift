// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GetMetricDataInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let endTime = endTime {
            try container.encode(TimestampWrapper(endTime, format: .dateTime), forKey: Key("endTime"))
        }
        if let labelOptions = labelOptions {
            try container.encode(labelOptions, forKey: Key("LabelOptions"))
        }
        if let maxDatapoints = maxDatapoints {
            try container.encode(maxDatapoints, forKey: Key("MaxDatapoints"))
        }
        if let metricDataQueries = metricDataQueries {
            var metricDataQueriesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("MetricDataQueries"))
            for (index0, metricdataquery0) in metricDataQueries.enumerated() {
                try metricDataQueriesContainer.encode(metricdataquery0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: Key("NextToken"))
        }
        if let scanBy = scanBy {
            try container.encode(scanBy, forKey: Key("ScanBy"))
        }
        if let startTime = startTime {
            try container.encode(TimestampWrapper(startTime, format: .dateTime), forKey: Key("startTime"))
        }
        try container.encode("GetMetricData", forKey:Key("Action"))
        try container.encode("2010-08-01", forKey:Key("Version"))
    }
}
