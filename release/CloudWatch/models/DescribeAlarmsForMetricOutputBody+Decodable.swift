// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAlarmsForMetricOutputBody: Equatable {
    public let metricAlarms: [MetricAlarm]?
}

extension DescribeAlarmsForMetricOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case metricAlarms = "MetricAlarms"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeAlarmsForMetricResult"))
        if containerValues.contains(.metricAlarms) {
            struct KeyVal0{struct member{}}
            let metricAlarmsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricAlarms)
            if let metricAlarmsWrappedContainer = metricAlarmsWrappedContainer {
                let metricAlarmsContainer = try metricAlarmsWrappedContainer.decodeIfPresent([MetricAlarm].self, forKey: .member)
                var metricAlarmsBuffer:[MetricAlarm]? = nil
                if let metricAlarmsContainer = metricAlarmsContainer {
                    metricAlarmsBuffer = [MetricAlarm]()
                    for structureContainer0 in metricAlarmsContainer {
                        metricAlarmsBuffer?.append(structureContainer0)
                    }
                }
                metricAlarms = metricAlarmsBuffer
            } else {
                metricAlarms = []
            }
        } else {
            metricAlarms = nil
        }
    }
}
