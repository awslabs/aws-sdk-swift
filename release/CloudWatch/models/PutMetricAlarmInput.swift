// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct PutMetricAlarmInput: Equatable {
    /// <p>Indicates whether actions should be executed during any changes to the alarm state. The default is
    /// 			<code>TRUE</code>.</p>
    public let actionsEnabled: Bool?
    /// <p>The actions to execute when this alarm transitions to the <code>ALARM</code> state from any other state.
    /// 			Each action is specified as an Amazon Resource Name (ARN).</p>
    ///
    /// 		       <p>Valid Values: <code>arn:aws:automate:<i>region</i>:ec2:stop</code> |
    /// 			<code>arn:aws:automate:<i>region</i>:ec2:terminate</code> |
    /// 			<code>arn:aws:automate:<i>region</i>:ec2:recover</code> |
    /// 			<code>arn:aws:automate:<i>region</i>:ec2:reboot</code> |
    /// 			<code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i>
    ///             </code> |
    /// 			<code>arn:aws:autoscaling:<i>region</i>:<i>account-id</i>:scalingPolicy:<i>policy-id</i>:autoScalingGroupName/<i>group-friendly-name</i>:policyName/<i>policy-friendly-name</i>
    ///             </code>
    /// 			| <code>arn:aws:ssm:<i>region</i>:<i>account-id</i>:opsitem:<i>severity</i>
    ///             </code>
    ///          </p>
    ///
    /// 		       <p>Valid Values (for use with IAM roles):
    /// 			<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Stop/1.0</code> |
    /// 				<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Terminate/1.0</code> |
    /// 				<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Reboot/1.0</code>
    ///          </p>
    public let alarmActions: [String]?
    /// <p>The description for the alarm.</p>
    public let alarmDescription: String?
    /// <p>The name for the alarm. This name must be unique within the Region.</p>
    public let alarmName: String?
    /// <p> The arithmetic operation to use when comparing the specified statistic and
    /// 			threshold. The specified statistic value is used as the first operand.</p>
    /// 		       <p>The values <code>LessThanLowerOrGreaterThanUpperThreshold</code>,
    /// 			<code>LessThanLowerThreshold</code>, and <code>GreaterThanUpperThreshold</code>
    /// 		are used only for alarms based on anomaly detection models.</p>
    public let comparisonOperator: ComparisonOperator?
    /// <p>The number of data points that must be breaching to trigger the alarm. This is used only if you are setting
    /// 			an "M out of N" alarm. In that case, this value is the M. For more information, see
    /// 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation">Evaluating an Alarm</a> in the
    /// 			<i>Amazon CloudWatch User Guide</i>.</p>
    public let datapointsToAlarm: Int?
    /// <p>The dimensions for the metric specified in <code>MetricName</code>.</p>
    public let dimensions: [Dimension]?
    /// <p> Used only for alarms based on percentiles. If you specify <code>ignore</code>, the alarm state does not change during periods with too few data points to be
    /// 			statistically significant. If you specify <code>evaluate</code> or omit this parameter, the alarm is always evaluated and possibly changes state
    /// 			no matter how many data points are available. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#percentiles-with-low-samples">Percentile-Based CloudWatch Alarms and Low Data Samples</a>.</p>
    /// 		       <p>Valid Values: <code>evaluate | ignore</code>
    ///          </p>
    public let evaluateLowSampleCountPercentile: String?
    /// <p>The number of periods over which data is compared to the specified threshold. If you are
    /// 			setting an alarm that requires that a number of consecutive data points be breaching to
    /// 			trigger the alarm, this value specifies that number. If you are setting an "M out of N"
    /// 			alarm, this value is the N.</p>
    /// 		       <p>An alarm's total current evaluation period can
    /// 			be no longer than one day, so this number multiplied by <code>Period</code> cannot be more than 86,400 seconds.</p>
    public let evaluationPeriods: Int?
    /// <p>The percentile statistic for the metric specified in <code>MetricName</code>. Specify a value
    /// 			between p0.0 and p100. When you call <code>PutMetricAlarm</code> and specify
    /// 			a <code>MetricName</code>, you must
    /// 			specify either <code>Statistic</code> or <code>ExtendedStatistic,</code> but not both.</p>
    public let extendedStatistic: String?
    /// <p>The actions to execute when this alarm transitions to the <code>INSUFFICIENT_DATA</code> state from any other state.
    /// 			Each action is specified as an Amazon Resource Name (ARN).</p>
    ///
    /// 		       <p>Valid Values: <code>arn:aws:automate:<i>region</i>:ec2:stop</code> |
    /// 			<code>arn:aws:automate:<i>region</i>:ec2:terminate</code> |
    /// 			<code>arn:aws:automate:<i>region</i>:ec2:recover</code> |
    /// 			<code>arn:aws:automate:<i>region</i>:ec2:reboot</code> |
    /// 			<code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i>
    ///             </code> |
    /// 			<code>arn:aws:autoscaling:<i>region</i>:<i>account-id</i>:scalingPolicy:<i>policy-id</i>:autoScalingGroupName/<i>group-friendly-name</i>:policyName/<i>policy-friendly-name</i>
    ///             </code>
    ///          </p>
    ///
    /// 		       <p>Valid Values (for use with IAM roles):
    /// 			<code>>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Stop/1.0</code> |
    /// 				<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Terminate/1.0</code> |
    /// 				<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Reboot/1.0</code>
    ///          </p>
    public let insufficientDataActions: [String]?
    /// <p>The name for the metric associated with the alarm. For each <code>PutMetricAlarm</code>
    /// 		operation, you must specify either <code>MetricName</code> or a <code>Metrics</code> array.</p>
    /// 		       <p>If you are creating an alarm based on a math expression, you cannot specify this parameter, or any of the
    /// 			<code>Dimensions</code>, <code>Period</code>,
    /// 			<code>Namespace</code>, <code>Statistic</code>, or <code>ExtendedStatistic</code> parameters. Instead, you specify
    /// 		all this information in the <code>Metrics</code> array.</p>
    public let metricName: String?
    /// <p>An array of <code>MetricDataQuery</code> structures that enable you to create an alarm based on the result of a
    /// 			metric math expression. For each <code>PutMetricAlarm</code>
    /// 			operation, you must specify either <code>MetricName</code> or a <code>Metrics</code> array.</p>
    /// 		       <p>Each item in the <code>Metrics</code> array either retrieves a metric or performs a math expression.</p>
    /// 		       <p>One item in the <code>Metrics</code> array is the expression that the alarm watches. You designate this expression
    /// 			by setting <code>ReturnData</code> to true for this object in the array. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDataQuery.html">MetricDataQuery</a>.</p>
    /// 		       <p>If you use the <code>Metrics</code> parameter, you cannot include the <code>MetricName</code>, <code>Dimensions</code>, <code>Period</code>,
    /// 			<code>Namespace</code>, <code>Statistic</code>, or <code>ExtendedStatistic</code> parameters of <code>PutMetricAlarm</code> in the same operation.
    /// 			Instead, you retrieve
    /// 		the metrics you are using in your math expression as part of the <code>Metrics</code> array.</p>
    public let metrics: [MetricDataQuery]?
    /// <p>The namespace for the metric associated specified in <code>MetricName</code>.</p>
    public let namespace: String?
    /// <p>The actions to execute when this alarm transitions to an <code>OK</code> state
    /// 			from any other state. Each action is specified as an Amazon Resource Name (ARN).</p>
    ///
    /// 		       <p>Valid Values: <code>arn:aws:automate:<i>region</i>:ec2:stop</code> |
    /// 			<code>arn:aws:automate:<i>region</i>:ec2:terminate</code> |
    /// 			<code>arn:aws:automate:<i>region</i>:ec2:recover</code> |
    /// 			<code>arn:aws:automate:<i>region</i>:ec2:reboot</code> |
    /// 			<code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i>
    ///             </code> |
    /// 			<code>arn:aws:autoscaling:<i>region</i>:<i>account-id</i>:scalingPolicy:<i>policy-id</i>:autoScalingGroupName/<i>group-friendly-name</i>:policyName/<i>policy-friendly-name</i>
    ///             </code>
    ///          </p>
    ///
    /// 		       <p>Valid Values (for use with IAM roles):
    /// 			<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Stop/1.0</code> |
    /// 				<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Terminate/1.0</code> |
    /// 				<code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Reboot/1.0</code> |
    /// 			    <code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Recover/1.0</code>
    ///          </p>
    public let oKActions: [String]?
    /// <p>The length, in seconds, used each time the metric specified in <code>MetricName</code> is
    /// 			evaluated. Valid values are 10, 30, and any multiple of 60.</p>
    /// 		       <p>
    ///             <code>Period</code> is required for alarms based on static thresholds. If
    /// 		you are creating an alarm based on a metric math expression, you specify the
    /// 		period for each metric within the objects in the <code>Metrics</code> array.</p>
    /// 		       <p>Be sure to specify 10 or 30 only for metrics that are stored by a <code>PutMetricData</code> call with a
    /// 				<code>StorageResolution</code> of 1. If you specify a period of 10 or 30 for a metric that does not have
    /// 			sub-minute resolution, the alarm still attempts to gather data at the period rate that you specify. In this case,
    /// 			it does not receive data for the attempts that do not correspond to a one-minute data resolution, and the alarm
    /// 			might often lapse into INSUFFICENT_DATA status. Specifying 10 or 30 also sets this alarm as a high-resolution alarm,
    /// 			which has a higher charge than other alarms. For more information about pricing, see <a href="https://aws.amazon.com/cloudwatch/pricing/">Amazon CloudWatch Pricing</a>.</p>
    /// 		       <p>An alarm's total current evaluation period can
    /// 		be no longer than one day, so <code>Period</code> multiplied by <code>EvaluationPeriods</code> cannot be more than 86,400 seconds.</p>
    public let period: Int?
    /// <p>The statistic for the metric specified in <code>MetricName</code>, other than percentile.
    /// 		    For percentile statistics, use <code>ExtendedStatistic</code>. When you call <code>PutMetricAlarm</code> and specify
    /// 			a <code>MetricName</code>, you must
    /// 		specify either <code>Statistic</code> or <code>ExtendedStatistic,</code> but not both.</p>
    public let statistic: Statistic?
    /// <p>A list of key-value pairs to associate with the alarm. You can associate as many as 50 tags with an alarm.</p>
    /// 		       <p>Tags can help you organize and categorize your resources. You can also use them to scope user
    /// 			permissions by granting a user
    /// 			permission to access or change only resources with certain tag values.</p>
    /// 		       <p>If you are using this operation to update an existing alarm, any tags
    /// 			you specify in this parameter are ignored. To change the tags of an existing alarm, use
    /// 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html">TagResource</a>
    /// 			or <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_UntagResource.html">UntagResource</a>.</p>
    public let tags: [Tag]?
    /// <p>The value against which the specified statistic is compared.</p>
    /// 		       <p>This parameter is required for alarms based on static thresholds, but should
    /// 		not be used for alarms based on anomaly detection models.</p>
    public let threshold: Double?
    /// <p>If this is an alarm based on an anomaly detection model, make this value match
    /// 			the ID of
    /// 			the <code>ANOMALY_DETECTION_BAND</code> function.</p>
    /// 		       <p>For an example of how to use this parameter, see the
    /// 			<b>Anomaly Detection
    /// 		Model Alarm</b> example on this page.</p>
    /// 		       <p>If your alarm uses this parameter, it cannot have Auto Scaling actions.</p>
    public let thresholdMetricId: String?
    /// <p> Sets how this alarm is to handle missing data points. If <code>TreatMissingData</code> is omitted, the default behavior of <code>missing</code> is used.
    /// 			For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data">Configuring How CloudWatch
    /// 				Alarms Treats Missing Data</a>.</p>
    /// 		       <p>Valid Values: <code>breaching | notBreaching | ignore | missing</code>
    ///          </p>
    public let treatMissingData: String?
    /// <p>The unit of measure for the statistic. For example, the units for the Amazon EC2
    /// 			NetworkIn metric are Bytes because NetworkIn tracks the number of bytes that an instance
    /// 			receives on all network interfaces. You can also specify a unit when you create a custom
    /// 			metric. Units help provide conceptual meaning to your data. Metric data points that
    /// 			specify a unit of measure, such as Percent, are aggregated separately.</p>
    /// 		       <p>If you don't specify <code>Unit</code>, CloudWatch retrieves all unit types that have been published for the
    /// 			metric and attempts to evaluate the alarm.
    /// 			Usually, metrics are
    /// 			published with only one unit, so the alarm
    /// 			works as intended.</p>
    /// 			      <p>However, if the metric is published with multiple types of units and you don't specify a unit, the alarm's
    /// 			behavior is not defined and
    /// 			it behaves predictably.</p>
    /// 		       <p>We recommend omitting <code>Unit</code> so that you don't inadvertently
    /// 			specify an incorrect unit that is not published for this metric. Doing so
    /// 			causes the alarm to be stuck in the <code>INSUFFICIENT DATA</code> state.</p>
    public let unit: StandardUnit?

    public init (
        actionsEnabled: Bool? = nil,
        alarmActions: [String]? = nil,
        alarmDescription: String? = nil,
        alarmName: String? = nil,
        comparisonOperator: ComparisonOperator? = nil,
        datapointsToAlarm: Int? = nil,
        dimensions: [Dimension]? = nil,
        evaluateLowSampleCountPercentile: String? = nil,
        evaluationPeriods: Int? = nil,
        extendedStatistic: String? = nil,
        insufficientDataActions: [String]? = nil,
        metricName: String? = nil,
        metrics: [MetricDataQuery]? = nil,
        namespace: String? = nil,
        oKActions: [String]? = nil,
        period: Int? = nil,
        statistic: Statistic? = nil,
        tags: [Tag]? = nil,
        threshold: Double? = nil,
        thresholdMetricId: String? = nil,
        treatMissingData: String? = nil,
        unit: StandardUnit? = nil
    )
    {
        self.actionsEnabled = actionsEnabled
        self.alarmActions = alarmActions
        self.alarmDescription = alarmDescription
        self.alarmName = alarmName
        self.comparisonOperator = comparisonOperator
        self.datapointsToAlarm = datapointsToAlarm
        self.dimensions = dimensions
        self.evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentile
        self.evaluationPeriods = evaluationPeriods
        self.extendedStatistic = extendedStatistic
        self.insufficientDataActions = insufficientDataActions
        self.metricName = metricName
        self.metrics = metrics
        self.namespace = namespace
        self.oKActions = oKActions
        self.period = period
        self.statistic = statistic
        self.tags = tags
        self.threshold = threshold
        self.thresholdMetricId = thresholdMetricId
        self.treatMissingData = treatMissingData
        self.unit = unit
    }
}
