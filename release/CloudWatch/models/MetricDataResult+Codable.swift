// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MetricDataResult: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id = "Id"
        case label = "Label"
        case messages = "Messages"
        case statusCode = "StatusCode"
        case timestamps = "Timestamps"
        case values = "Values"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let id = id {
            try container.encode(id, forKey: Key("Id"))
        }
        if let label = label {
            try container.encode(label, forKey: Key("Label"))
        }
        if let messages = messages {
            var messagesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Messages"))
            for (index0, messagedata0) in messages.enumerated() {
                try messagesContainer.encode(messagedata0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let statusCode = statusCode {
            try container.encode(statusCode, forKey: Key("StatusCode"))
        }
        if let timestamps = timestamps {
            var timestampsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Timestamps"))
            for (index0, timestamp0) in timestamps.enumerated() {
                try timestampsContainer.encode(TimestampWrapper(timestamp0, format: .dateTime), forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let values = values {
            var valuesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Values"))
            for (index0, datapointvalue0) in values.enumerated() {
                try valuesContainer.encode(datapointvalue0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let labelDecoded = try containerValues.decodeIfPresent(String.self, forKey: .label)
        label = labelDecoded
        if containerValues.contains(.timestamps) {
            struct KeyVal0{struct member{}}
            let timestampsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .timestamps)
            if let timestampsWrappedContainer = timestampsWrappedContainer {
                let timestampsContainer = try timestampsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var timestampsBuffer:[Date]? = nil
                if let timestampsContainer = timestampsContainer {
                    timestampsBuffer = [Date]()
                    for timestampContainer0 in timestampsContainer {
                        try timestampsBuffer?.append(TimestampWrapperDecoder.parseDateStringValue(timestampContainer0, format: .dateTime))
                    }
                }
                timestamps = timestampsBuffer
            } else {
                timestamps = []
            }
        } else {
            timestamps = nil
        }
        if containerValues.contains(.values) {
            struct KeyVal0{struct member{}}
            let valuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .values)
            if let valuesWrappedContainer = valuesWrappedContainer {
                let valuesContainer = try valuesWrappedContainer.decodeIfPresent([Double].self, forKey: .member)
                var valuesBuffer:[Double]? = nil
                if let valuesContainer = valuesContainer {
                    valuesBuffer = [Double]()
                    for doubleContainer0 in valuesContainer {
                        valuesBuffer?.append(doubleContainer0)
                    }
                }
                values = valuesBuffer
            } else {
                values = []
            }
        } else {
            values = nil
        }
        let statusCodeDecoded = try containerValues.decodeIfPresent(StatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        if containerValues.contains(.messages) {
            struct KeyVal0{struct member{}}
            let messagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .messages)
            if let messagesWrappedContainer = messagesWrappedContainer {
                let messagesContainer = try messagesWrappedContainer.decodeIfPresent([MessageData].self, forKey: .member)
                var messagesBuffer:[MessageData]? = nil
                if let messagesContainer = messagesContainer {
                    messagesBuffer = [MessageData]()
                    for structureContainer0 in messagesContainer {
                        messagesBuffer?.append(structureContainer0)
                    }
                }
                messages = messagesBuffer
            } else {
                messages = []
            }
        } else {
            messages = nil
        }
    }
}
