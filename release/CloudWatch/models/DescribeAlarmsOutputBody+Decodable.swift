// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAlarmsOutputBody: Equatable {
    public let compositeAlarms: [CompositeAlarm]?
    public let metricAlarms: [MetricAlarm]?
    public let nextToken: String?
}

extension DescribeAlarmsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case compositeAlarms = "CompositeAlarms"
        case metricAlarms = "MetricAlarms"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeAlarmsResult"))
        if containerValues.contains(.compositeAlarms) {
            struct KeyVal0{struct member{}}
            let compositeAlarmsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .compositeAlarms)
            if let compositeAlarmsWrappedContainer = compositeAlarmsWrappedContainer {
                let compositeAlarmsContainer = try compositeAlarmsWrappedContainer.decodeIfPresent([CompositeAlarm].self, forKey: .member)
                var compositeAlarmsBuffer:[CompositeAlarm]? = nil
                if let compositeAlarmsContainer = compositeAlarmsContainer {
                    compositeAlarmsBuffer = [CompositeAlarm]()
                    for structureContainer0 in compositeAlarmsContainer {
                        compositeAlarmsBuffer?.append(structureContainer0)
                    }
                }
                compositeAlarms = compositeAlarmsBuffer
            } else {
                compositeAlarms = []
            }
        } else {
            compositeAlarms = nil
        }
        if containerValues.contains(.metricAlarms) {
            struct KeyVal0{struct member{}}
            let metricAlarmsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricAlarms)
            if let metricAlarmsWrappedContainer = metricAlarmsWrappedContainer {
                let metricAlarmsContainer = try metricAlarmsWrappedContainer.decodeIfPresent([MetricAlarm].self, forKey: .member)
                var metricAlarmsBuffer:[MetricAlarm]? = nil
                if let metricAlarmsContainer = metricAlarmsContainer {
                    metricAlarmsBuffer = [MetricAlarm]()
                    for structureContainer0 in metricAlarmsContainer {
                        metricAlarmsBuffer?.append(structureContainer0)
                    }
                }
                metricAlarms = metricAlarmsBuffer
            } else {
                metricAlarms = []
            }
        } else {
            metricAlarms = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
