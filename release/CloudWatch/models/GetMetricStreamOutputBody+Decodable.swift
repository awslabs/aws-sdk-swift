// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetMetricStreamOutputBody: Equatable {
    public let arn: String?
    public let name: String?
    public let includeFilters: [MetricStreamFilter]?
    public let excludeFilters: [MetricStreamFilter]?
    public let firehoseArn: String?
    public let roleArn: String?
    public let state: String?
    public let creationDate: Date?
    public let lastUpdateDate: Date?
    public let outputFormat: MetricStreamOutputFormat?
}

extension GetMetricStreamOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case creationDate = "CreationDate"
        case excludeFilters = "ExcludeFilters"
        case firehoseArn = "FirehoseArn"
        case includeFilters = "IncludeFilters"
        case lastUpdateDate = "LastUpdateDate"
        case name = "Name"
        case outputFormat = "OutputFormat"
        case roleArn = "RoleArn"
        case state = "State"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("GetMetricStreamResult"))
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        if containerValues.contains(.includeFilters) {
            struct KeyVal0{struct member{}}
            let includeFiltersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .includeFilters)
            if let includeFiltersWrappedContainer = includeFiltersWrappedContainer {
                let includeFiltersContainer = try includeFiltersWrappedContainer.decodeIfPresent([MetricStreamFilter].self, forKey: .member)
                var includeFiltersBuffer:[MetricStreamFilter]? = nil
                if let includeFiltersContainer = includeFiltersContainer {
                    includeFiltersBuffer = [MetricStreamFilter]()
                    for structureContainer0 in includeFiltersContainer {
                        includeFiltersBuffer?.append(structureContainer0)
                    }
                }
                includeFilters = includeFiltersBuffer
            } else {
                includeFilters = []
            }
        } else {
            includeFilters = nil
        }
        if containerValues.contains(.excludeFilters) {
            struct KeyVal0{struct member{}}
            let excludeFiltersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .excludeFilters)
            if let excludeFiltersWrappedContainer = excludeFiltersWrappedContainer {
                let excludeFiltersContainer = try excludeFiltersWrappedContainer.decodeIfPresent([MetricStreamFilter].self, forKey: .member)
                var excludeFiltersBuffer:[MetricStreamFilter]? = nil
                if let excludeFiltersContainer = excludeFiltersContainer {
                    excludeFiltersBuffer = [MetricStreamFilter]()
                    for structureContainer0 in excludeFiltersContainer {
                        excludeFiltersBuffer?.append(structureContainer0)
                    }
                }
                excludeFilters = excludeFiltersBuffer
            } else {
                excludeFilters = []
            }
        } else {
            excludeFilters = nil
        }
        let firehoseArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .firehoseArn)
        firehoseArn = firehoseArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .state)
        state = stateDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .creationDate)
        var creationDateBuffer:Date? = nil
        if let creationDateDecoded = creationDateDecoded {
            creationDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(creationDateDecoded, format: .dateTime)
        }
        creationDate = creationDateBuffer
        let lastUpdateDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastUpdateDate)
        var lastUpdateDateBuffer:Date? = nil
        if let lastUpdateDateDecoded = lastUpdateDateDecoded {
            lastUpdateDateBuffer = try TimestampWrapperDecoder.parseDateStringValue(lastUpdateDateDecoded, format: .dateTime)
        }
        lastUpdateDate = lastUpdateDateBuffer
        let outputFormatDecoded = try containerValues.decodeIfPresent(MetricStreamOutputFormat.self, forKey: .outputFormat)
        outputFormat = outputFormatDecoded
    }
}
