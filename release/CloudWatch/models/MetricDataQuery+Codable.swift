// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MetricDataQuery: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case expression = "Expression"
        case id = "Id"
        case label = "Label"
        case metricStat = "MetricStat"
        case period = "Period"
        case returnData = "ReturnData"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let expression = expression {
            try container.encode(expression, forKey: Key("Expression"))
        }
        if let id = id {
            try container.encode(id, forKey: Key("Id"))
        }
        if let label = label {
            try container.encode(label, forKey: Key("Label"))
        }
        if let metricStat = metricStat {
            try container.encode(metricStat, forKey: Key("MetricStat"))
        }
        if let period = period {
            try container.encode(period, forKey: Key("Period"))
        }
        if let returnData = returnData {
            try container.encode(returnData, forKey: Key("ReturnData"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let metricStatDecoded = try containerValues.decodeIfPresent(MetricStat.self, forKey: .metricStat)
        metricStat = metricStatDecoded
        let expressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .expression)
        expression = expressionDecoded
        let labelDecoded = try containerValues.decodeIfPresent(String.self, forKey: .label)
        label = labelDecoded
        let returnDataDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .returnData)
        returnData = returnDataDecoded
        let periodDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .period)
        period = periodDecoded
    }
}
