// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAnomalyDetectorsOutputBody: Equatable {
    public let anomalyDetectors: [AnomalyDetector]?
    public let nextToken: String?
}

extension DescribeAnomalyDetectorsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case anomalyDetectors = "AnomalyDetectors"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeAnomalyDetectorsResult"))
        if containerValues.contains(.anomalyDetectors) {
            struct KeyVal0{struct member{}}
            let anomalyDetectorsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .anomalyDetectors)
            if let anomalyDetectorsWrappedContainer = anomalyDetectorsWrappedContainer {
                let anomalyDetectorsContainer = try anomalyDetectorsWrappedContainer.decodeIfPresent([AnomalyDetector].self, forKey: .member)
                var anomalyDetectorsBuffer:[AnomalyDetector]? = nil
                if let anomalyDetectorsContainer = anomalyDetectorsContainer {
                    anomalyDetectorsBuffer = [AnomalyDetector]()
                    for structureContainer0 in anomalyDetectorsContainer {
                        anomalyDetectorsBuffer?.append(structureContainer0)
                    }
                }
                anomalyDetectors = anomalyDetectorsBuffer
            } else {
                anomalyDetectors = []
            }
        } else {
            anomalyDetectors = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
