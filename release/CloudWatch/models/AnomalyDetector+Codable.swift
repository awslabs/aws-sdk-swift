// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AnomalyDetector: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case configuration = "Configuration"
        case dimensions = "Dimensions"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case stat = "Stat"
        case stateValue = "StateValue"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let configuration = configuration {
            try container.encode(configuration, forKey: Key("Configuration"))
        }
        if let dimensions = dimensions {
            var dimensionsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Dimensions"))
            for (index0, dimension0) in dimensions.enumerated() {
                try dimensionsContainer.encode(dimension0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: Key("Namespace"))
        }
        if let stat = stat {
            try container.encode(stat, forKey: Key("Stat"))
        }
        if let stateValue = stateValue {
            try container.encode(stateValue, forKey: Key("StateValue"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .metricName)
        metricName = metricNameDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([Dimension].self, forKey: .member)
                var dimensionsBuffer:[Dimension]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [Dimension]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
        let statDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stat)
        stat = statDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(AnomalyDetectorConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
        let stateValueDecoded = try containerValues.decodeIfPresent(AnomalyDetectorStateValue.self, forKey: .stateValue)
        stateValue = stateValueDecoded
    }
}
