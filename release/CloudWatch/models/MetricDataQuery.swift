// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>This structure is used in both <code>GetMetricData</code> and <code>PutMetricAlarm</code>. The supported
/// 			use of this structure is different for those two operations.</p>
/// 		       <p>When used in <code>GetMetricData</code>, it indicates the metric data to return, and whether this call is just retrieving
/// 			a batch set of data for one metric, or is performing a math expression on metric data. A
/// 			single <code>GetMetricData</code> call can include up to 500 <code>MetricDataQuery</code>
/// 			structures.</p>
/// 		       <p>When used in <code>PutMetricAlarm</code>, it enables you to create an alarm based on a
/// 			metric math expression. Each <code>MetricDataQuery</code> in the array specifies either
/// 			a metric to retrieve, or a math expression to be performed on retrieved metrics. A
/// 			single <code>PutMetricAlarm</code> call can include up to 20
/// 				<code>MetricDataQuery</code> structures in the array. The 20 structures can include
/// 			as many as 10 structures that contain a <code>MetricStat</code> parameter to retrieve a
/// 			metric, and as many as 10 structures that contain the <code>Expression</code> parameter
/// 			to perform a math expression. Of those <code>Expression</code> structures, one must have <code>True</code>
/// 		as the value for <code>ReturnData</code>. The result of this expression is the value the alarm watches.</p>
///
/// 		       <p>Any expression used in a <code>PutMetricAlarm</code>
/// 			operation must return a single time series. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax">Metric Math Syntax and Functions</a> in the <i>Amazon CloudWatch User
/// 				Guide</i>.</p>
///
/// 		       <p>Some of the parameters of this structure also have different uses whether you are using this structure in a <code>GetMetricData</code>
/// 			operation or a <code>PutMetricAlarm</code> operation. These differences are explained in the following parameter list.</p>
public struct MetricDataQuery: Equatable {
    /// <p>The math expression to be performed on the returned data, if this object is performing a math expression. This expression
    /// 			can use the <code>Id</code> of the other metrics to refer to those metrics, and can also use the <code>Id</code> of other
    /// 			expressions to use the result of those expressions. For more information about metric math expressions, see
    /// 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax">Metric Math Syntax and Functions</a> in the
    /// 			<i>Amazon CloudWatch User Guide</i>.</p>
    /// 		       <p>Within each MetricDataQuery object, you must specify either
    /// 			<code>Expression</code> or <code>MetricStat</code> but not both.</p>
    public let expression: String?
    /// <p>A short name used to tie this object to the results in the response. This name must be
    /// 			unique within a single call to <code>GetMetricData</code>. If you are performing math
    /// 			expressions on this set of data, this name represents that data and can serve as a
    /// 			variable in the mathematical expression. The valid characters are letters, numbers, and
    /// 			underscore. The first character must be a lowercase letter.</p>
    public let id: String?
    /// <p>A human-readable label for this metric or expression. This is especially useful
    /// 			if this is an expression, so that you know
    /// 			what the value represents. If the metric or expression is shown in a
    /// 			CloudWatch dashboard widget, the label is shown. If Label is omitted, CloudWatch
    /// 			generates a default.</p>
    /// 		       <p>You can put dynamic expressions into a label, so that it is more descriptive.
    /// 			For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html">Using Dynamic Labels</a>.</p>
    public let label: String?
    /// <p>The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric
    /// 			and not performing a math expression on returned data.</p>
    /// 		       <p>Within one MetricDataQuery object, you must specify either
    /// 			<code>Expression</code> or <code>MetricStat</code> but not both.</p>
    public let metricStat: MetricStat?
    /// <p>The granularity, in seconds, of the returned data points. For metrics with regular resolution, a
    /// 			period can be as short as one minute (60 seconds) and must be a multiple of 60.
    /// 			For high-resolution metrics that are collected at intervals of less than one minute,
    /// 			the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics
    /// 			stored by a <code>PutMetricData</code> operation that includes a <code>StorageResolution of 1 second</code>.</p>
    public let period: Int?
    /// <p>When used in <code>GetMetricData</code>, this option indicates whether to return the
    /// 			timestamps and raw data values of this metric. If you are performing this call just to
    /// 			do math expressions and do not also need the raw data returned, you can specify
    /// 				<code>False</code>. If you omit this, the default of <code>True</code> is
    /// 			used.</p>
    /// 		       <p>When used in <code>PutMetricAlarm</code>, specify <code>True</code> for the one expression result to use as the alarm. For all
    /// 		other metrics and expressions in the same <code>PutMetricAlarm</code> operation, specify <code>ReturnData</code> as False.</p>
    public let returnData: Bool?

    public init (
        expression: String? = nil,
        id: String? = nil,
        label: String? = nil,
        metricStat: MetricStat? = nil,
        period: Int? = nil,
        returnData: Bool? = nil
    )
    {
        self.expression = expression
        self.id = id
        self.label = label
        self.metricStat = metricStat
        self.period = period
        self.returnData = returnData
    }
}
