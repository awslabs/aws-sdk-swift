// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DescribeAlarmHistoryInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let alarmName = alarmName {
            try container.encode(alarmName, forKey: Key("AlarmName"))
        }
        if let alarmTypes = alarmTypes {
            var alarmTypesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("AlarmTypes"))
            for (index0, alarmtype0) in alarmTypes.enumerated() {
                try alarmTypesContainer.encode(alarmtype0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let endDate = endDate {
            try container.encode(TimestampWrapper(endDate, format: .dateTime), forKey: Key("endDate"))
        }
        if let historyItemType = historyItemType {
            try container.encode(historyItemType, forKey: Key("HistoryItemType"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: Key("NextToken"))
        }
        if let scanBy = scanBy {
            try container.encode(scanBy, forKey: Key("ScanBy"))
        }
        if let startDate = startDate {
            try container.encode(TimestampWrapper(startDate, format: .dateTime), forKey: Key("startDate"))
        }
        try container.encode("DescribeAlarmHistory", forKey:Key("Action"))
        try container.encode("2010-08-01", forKey:Key("Version"))
    }
}
