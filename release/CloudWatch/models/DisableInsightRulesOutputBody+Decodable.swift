// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DisableInsightRulesOutputBody: Equatable {
    public let failures: [PartialFailure]?
}

extension DisableInsightRulesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case failures = "Failures"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DisableInsightRulesResult"))
        if containerValues.contains(.failures) {
            struct KeyVal0{struct member{}}
            let failuresWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .failures)
            if let failuresWrappedContainer = failuresWrappedContainer {
                let failuresContainer = try failuresWrappedContainer.decodeIfPresent([PartialFailure].self, forKey: .member)
                var failuresBuffer:[PartialFailure]? = nil
                if let failuresContainer = failuresContainer {
                    failuresBuffer = [PartialFailure]()
                    for structureContainer0 in failuresContainer {
                        failuresBuffer?.append(structureContainer0)
                    }
                }
                failures = failuresBuffer
            } else {
                failures = []
            }
        } else {
            failures = nil
        }
    }
}
