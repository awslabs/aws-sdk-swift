// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ListMetricsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let dimensions = dimensions {
            var dimensionsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Dimensions"))
            for (index0, dimensionfilter0) in dimensions.enumerated() {
                try dimensionsContainer.encode(dimensionfilter0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: Key("Namespace"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: Key("NextToken"))
        }
        if let recentlyActive = recentlyActive {
            try container.encode(recentlyActive, forKey: Key("RecentlyActive"))
        }
        try container.encode("ListMetrics", forKey:Key("Action"))
        try container.encode("2010-08-01", forKey:Key("Version"))
    }
}
