// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation

public class ChimeClient {
    let client: SdkHttpClient
    let config: ChimeClientConfiguration
    let serviceName = "Chime"
    let encoder: RequestEncoder
    let decoder: ResponseDecoder

    public init(config: ChimeClientConfiguration) {
        client = SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        self.encoder = config.encoder ?? encoder
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public class ChimeClientConfiguration: ClientRuntime.Configuration, AWSClientConfiguration {

        public var region: String
        public var credentialsProvider: AWSCredentialsProvider
        public var signingRegion: String
        public var endpointResolver: EndpointResolver

        public init (
            credentialsProvider: AWSCredentialsProvider,
            endpointResolver: EndpointResolver,
            region: String,
            signingRegion: String
        ) throws
        {
            self.credentialsProvider = credentialsProvider
            self.endpointResolver = endpointResolver
            self.region = region
            self.signingRegion = signingRegion
        }

        public convenience init(credentialsProvider: AWSCredentialsProvider) throws {
            let region = "us-east-1"
            let signingRegion = "us-east-1"
            let endpointResolver = DefaultEndpointResolver()
            try self.init(
                credentialsProvider: credentialsProvider,
                endpointResolver: endpointResolver,
                region: region,
                signingRegion: signingRegion
            )
        }

        public static func `default`() throws -> ChimeClientConfiguration {
            let awsCredsProvider = try AWSCredentialsProvider.fromEnv()
            return try ChimeClientConfiguration(credentialsProvider: awsCredsProvider)
        }
    }
}

extension ChimeClient: ChimeClientProtocol {
    /// <p>Associates a phone number with the specified Amazon Chime user.</p>
    public func associatePhoneNumberWithUser(input: AssociatePhoneNumberWithUserInput, completion: @escaping (SdkResult<AssociatePhoneNumberWithUserOutput, AssociatePhoneNumberWithUserOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        guard let userId = input.userId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component userId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/users/\(userId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "associatePhoneNumberWithUser")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AssociatePhoneNumberWithUserInput, AssociatePhoneNumberWithUserOutput, AssociatePhoneNumberWithUserOutputError>(id: "associatePhoneNumberWithUser")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AssociatePhoneNumberWithUserInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AssociatePhoneNumberWithUserInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AssociatePhoneNumberWithUserInput, AssociatePhoneNumberWithUserOutput, AssociatePhoneNumberWithUserOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: AssociatePhoneNumberWithUserInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Associates phone numbers with the specified Amazon Chime Voice Connector.</p>
    public func associatePhoneNumbersWithVoiceConnector(input: AssociatePhoneNumbersWithVoiceConnectorInput, completion: @escaping (SdkResult<AssociatePhoneNumbersWithVoiceConnectorOutput, AssociatePhoneNumbersWithVoiceConnectorOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "associatePhoneNumbersWithVoiceConnector")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AssociatePhoneNumbersWithVoiceConnectorInput, AssociatePhoneNumbersWithVoiceConnectorOutput, AssociatePhoneNumbersWithVoiceConnectorOutputError>(id: "associatePhoneNumbersWithVoiceConnector")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AssociatePhoneNumbersWithVoiceConnectorInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AssociatePhoneNumbersWithVoiceConnectorInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AssociatePhoneNumbersWithVoiceConnectorInput, AssociatePhoneNumbersWithVoiceConnectorOutput, AssociatePhoneNumbersWithVoiceConnectorOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: AssociatePhoneNumbersWithVoiceConnectorInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Associates phone numbers with the specified Amazon Chime Voice Connector group.</p>
    public func associatePhoneNumbersWithVoiceConnectorGroup(input: AssociatePhoneNumbersWithVoiceConnectorGroupInput, completion: @escaping (SdkResult<AssociatePhoneNumbersWithVoiceConnectorGroupOutput, AssociatePhoneNumbersWithVoiceConnectorGroupOutputError>) -> Void)
    {
        guard let voiceConnectorGroupId = input.voiceConnectorGroupId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorGroupId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connector-groups/\(voiceConnectorGroupId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "associatePhoneNumbersWithVoiceConnectorGroup")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AssociatePhoneNumbersWithVoiceConnectorGroupInput, AssociatePhoneNumbersWithVoiceConnectorGroupOutput, AssociatePhoneNumbersWithVoiceConnectorGroupOutputError>(id: "associatePhoneNumbersWithVoiceConnectorGroup")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AssociatePhoneNumbersWithVoiceConnectorGroupInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AssociatePhoneNumbersWithVoiceConnectorGroupInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AssociatePhoneNumbersWithVoiceConnectorGroupInput, AssociatePhoneNumbersWithVoiceConnectorGroupOutput, AssociatePhoneNumbersWithVoiceConnectorGroupOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: AssociatePhoneNumbersWithVoiceConnectorGroupInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Associates the specified sign-in delegate groups with the specified Amazon Chime account.</p>
    public func associateSigninDelegateGroupsWithAccount(input: AssociateSigninDelegateGroupsWithAccountInput, completion: @escaping (SdkResult<AssociateSigninDelegateGroupsWithAccountOutput, AssociateSigninDelegateGroupsWithAccountOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "associateSigninDelegateGroupsWithAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AssociateSigninDelegateGroupsWithAccountInput, AssociateSigninDelegateGroupsWithAccountOutput, AssociateSigninDelegateGroupsWithAccountOutputError>(id: "associateSigninDelegateGroupsWithAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AssociateSigninDelegateGroupsWithAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AssociateSigninDelegateGroupsWithAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AssociateSigninDelegateGroupsWithAccountInput, AssociateSigninDelegateGroupsWithAccountOutput, AssociateSigninDelegateGroupsWithAccountOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: AssociateSigninDelegateGroupsWithAccountInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    /// Creates up to 100 new attendees for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a>
    /// in the
    /// <i>Amazon Chime Developer Guide</i>.
    /// </p>
    public func batchCreateAttendee(input: BatchCreateAttendeeInput, completion: @escaping (SdkResult<BatchCreateAttendeeOutput, BatchCreateAttendeeOutputError>) -> Void)
    {
        guard let meetingId = input.meetingId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component meetingId unexpectedly nil"))))
            return
        }
        let urlPath = "/meetings/\(meetingId)/attendees"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "batchCreateAttendee")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<BatchCreateAttendeeInput, BatchCreateAttendeeOutput, BatchCreateAttendeeOutputError>(id: "batchCreateAttendee")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: BatchCreateAttendeeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: BatchCreateAttendeeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<BatchCreateAttendeeInput, BatchCreateAttendeeOutput, BatchCreateAttendeeOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: BatchCreateAttendeeInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Adds a specified number of users to a channel. </p>
    public func batchCreateChannelMembership(input: BatchCreateChannelMembershipInput, completion: @escaping (SdkResult<BatchCreateChannelMembershipOutput, BatchCreateChannelMembershipOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)/memberships"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "batchCreateChannelMembership")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<BatchCreateChannelMembershipInput, BatchCreateChannelMembershipOutput, BatchCreateChannelMembershipOutputError>(id: "batchCreateChannelMembership")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: BatchCreateChannelMembershipInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: BatchCreateChannelMembershipInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<BatchCreateChannelMembershipInput, BatchCreateChannelMembershipOutput, BatchCreateChannelMembershipOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: BatchCreateChannelMembershipInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Adds up to 50 members to a chat room in an Amazon Chime Enterprise account. Members can be users or bots. The member role designates whether the member is a chat room administrator or a general chat room member.</p>
    public func batchCreateRoomMembership(input: BatchCreateRoomMembershipInput, completion: @escaping (SdkResult<BatchCreateRoomMembershipOutput, BatchCreateRoomMembershipOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        guard let roomId = input.roomId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component roomId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/rooms/\(roomId)/memberships"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "batchCreateRoomMembership")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<BatchCreateRoomMembershipInput, BatchCreateRoomMembershipOutput, BatchCreateRoomMembershipOutputError>(id: "batchCreateRoomMembership")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: BatchCreateRoomMembershipInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: BatchCreateRoomMembershipInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<BatchCreateRoomMembershipInput, BatchCreateRoomMembershipOutput, BatchCreateRoomMembershipOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: BatchCreateRoomMembershipInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    /// Moves phone numbers into the
    /// <b>Deletion queue</b>. Phone numbers must be disassociated from any users or Amazon Chime Voice Connectors before they can be deleted.
    /// </p>
    ///
    ///          <p>
    /// Phone numbers remain in the
    /// <b>Deletion queue</b> for 7 days before they are deleted permanently.
    /// </p>
    public func batchDeletePhoneNumber(input: BatchDeletePhoneNumberInput, completion: @escaping (SdkResult<BatchDeletePhoneNumberOutput, BatchDeletePhoneNumberOutputError>) -> Void)
    {
        let urlPath = "/phone-numbers"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "batchDeletePhoneNumber")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<BatchDeletePhoneNumberInput, BatchDeletePhoneNumberOutput, BatchDeletePhoneNumberOutputError>(id: "batchDeletePhoneNumber")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: BatchDeletePhoneNumberInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: BatchDeletePhoneNumberInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<BatchDeletePhoneNumberInput, BatchDeletePhoneNumberOutput, BatchDeletePhoneNumberOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: BatchDeletePhoneNumberInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Suspends up to 50 users from a <code>Team</code> or <code>EnterpriseLWA</code> Amazon Chime
    ///             account. For more information about different account types, see <a href="https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html">Managing Your
    ///                 Amazon Chime Accounts</a> in the <i>Amazon Chime Administration
    ///                 Guide</i>.</p>
    ///
    ///          <p>Users suspended from a <code>Team</code> account are disassociated from the account,but they
    ///             can continue to use Amazon Chime as free users. To remove the suspension from suspended
    ///                 <code>Team</code> account users, invite them to the <code>Team</code> account again.
    ///             You can use the <a>InviteUsers</a> action to do so.</p>
    ///
    ///          <p>Users suspended from an <code>EnterpriseLWA</code> account are immediately signed out of
    ///             Amazon Chime and can no longer sign in. To remove the suspension from suspended
    ///                 <code>EnterpriseLWA</code> account users, use the <a>BatchUnsuspendUser</a> action.</p>
    ///
    ///          <p>
    /// To sign out users without suspending them, use the
    /// <a>LogoutUser</a>
    /// action.
    /// </p>
    public func batchSuspendUser(input: BatchSuspendUserInput, completion: @escaping (SdkResult<BatchSuspendUserOutput, BatchSuspendUserOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/users"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "batchSuspendUser")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<BatchSuspendUserInput, BatchSuspendUserOutput, BatchSuspendUserOutputError>(id: "batchSuspendUser")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: BatchSuspendUserInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: BatchSuspendUserInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<BatchSuspendUserInput, BatchSuspendUserOutput, BatchSuspendUserOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: BatchSuspendUserInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Removes the suspension from up to 50 previously suspended users for the specified Amazon
    ///             Chime <code>EnterpriseLWA</code> account. Only users on <code>EnterpriseLWA</code>
    ///             accounts can be unsuspended using this action. For more information about different
    ///             account types, see <a href="https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html">Managing Your Amazon Chime Accounts</a> in the
    ///                 <i>Amazon Chime Administration Guide</i>.</p>
    ///
    ///          <p>
    /// Previously suspended users who are unsuspended using this action are returned to
    /// <code>Registered</code>
    /// status. Users who are not previously suspended are ignored.
    /// </p>
    public func batchUnsuspendUser(input: BatchUnsuspendUserInput, completion: @escaping (SdkResult<BatchUnsuspendUserOutput, BatchUnsuspendUserOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/users"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "batchUnsuspendUser")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<BatchUnsuspendUserInput, BatchUnsuspendUserOutput, BatchUnsuspendUserOutputError>(id: "batchUnsuspendUser")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: BatchUnsuspendUserInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: BatchUnsuspendUserInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<BatchUnsuspendUserInput, BatchUnsuspendUserOutput, BatchUnsuspendUserOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: BatchUnsuspendUserInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates phone number product types or calling names. You can update one attribute at a time for each
    ///         <code>UpdatePhoneNumberRequestItem</code>. For example, you can update the product type or the calling name.</p>
    ///
    ///          <p>For toll-free numbers, you cannot use the Amazon Chime Business Calling product type. For
    ///             numbers outside the
    ///             US,
    ///             you must use the Amazon Chime SIP Media Application Dial-In product type.</p>
    ///
    ///          <p>Updates to outbound calling names can take 72 hours to complete. Pending updates to outbound calling names must be complete before you
    ///             can request another update.</p>
    public func batchUpdatePhoneNumber(input: BatchUpdatePhoneNumberInput, completion: @escaping (SdkResult<BatchUpdatePhoneNumberOutput, BatchUpdatePhoneNumberOutputError>) -> Void)
    {
        let urlPath = "/phone-numbers"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "batchUpdatePhoneNumber")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<BatchUpdatePhoneNumberInput, BatchUpdatePhoneNumberOutput, BatchUpdatePhoneNumberOutputError>(id: "batchUpdatePhoneNumber")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: BatchUpdatePhoneNumberInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: BatchUpdatePhoneNumberInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<BatchUpdatePhoneNumberInput, BatchUpdatePhoneNumberOutput, BatchUpdatePhoneNumberOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: BatchUpdatePhoneNumberInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    /// Updates user details within the
    /// <a>UpdateUserRequestItem</a>
    /// object for up to 20 users for the specified Amazon Chime account.
    /// Currently, only <code>LicenseType</code>
    /// updates are supported for this action.
    /// </p>
    public func batchUpdateUser(input: BatchUpdateUserInput, completion: @escaping (SdkResult<BatchUpdateUserOutput, BatchUpdateUserOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/users"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "batchUpdateUser")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<BatchUpdateUserInput, BatchUpdateUserOutput, BatchUpdateUserOutputError>(id: "batchUpdateUser")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: BatchUpdateUserInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: BatchUpdateUserInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<BatchUpdateUserInput, BatchUpdateUserOutput, BatchUpdateUserOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: BatchUpdateUserInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates an Amazon Chime account under the administrator's AWS account. Only <code>Team</code>
    ///             account types are currently supported for this action. For more information about
    ///             different account types, see <a href="https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html">Managing Your Amazon Chime Accounts</a> in the
    ///                 <i>Amazon Chime Administration Guide</i>.</p>
    public func createAccount(input: CreateAccountInput, completion: @escaping (SdkResult<CreateAccountOutput, CreateAccountOutputError>) -> Void)
    {
        let urlPath = "/accounts"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateAccountInput, CreateAccountOutput, CreateAccountOutputError>(id: "createAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateAccountInput, CreateAccountOutput, CreateAccountOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateAccountInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates an Amazon Chime SDK messaging <code>AppInstance</code> under an AWS account. Only SDK messaging customers use this API.
    /// <code>CreateAppInstance</code> supports idempotency behavior as described in the AWS API Standard.</p>
    public func createAppInstance(input: CreateAppInstanceInput, completion: @escaping (SdkResult<CreateAppInstanceOutput, CreateAppInstanceOutputError>) -> Void)
    {
        let urlPath = "/app-instances"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createAppInstance")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "identity-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateAppInstanceInput, CreateAppInstanceOutput, CreateAppInstanceOutputError>(id: "createAppInstance")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<CreateAppInstanceOutput>, SdkError<CreateAppInstanceOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientRequestToken == nil {
                copiedInput.clientRequestToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: CreateAppInstanceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateAppInstanceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateAppInstanceInput, CreateAppInstanceOutput, CreateAppInstanceOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateAppInstanceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Promotes an <code>AppInstanceUser</code> to an <code>AppInstanceAdmin</code>. The promoted user can perform the following actions.
    /// </p>
    ///
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ChannelModerator</code> actions across all channels in the <code>AppInstance</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DeleteChannelMessage</code> actions.</p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p>Only an <code>AppInstanceUser</code> can be promoted to an <code>AppInstanceAdmin</code> role.</p>
    public func createAppInstanceAdmin(input: CreateAppInstanceAdminInput, completion: @escaping (SdkResult<CreateAppInstanceAdminOutput, CreateAppInstanceAdminOutputError>) -> Void)
    {
        guard let appInstanceArn = input.appInstanceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component appInstanceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/app-instances/\(appInstanceArn)/admins"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createAppInstanceAdmin")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "identity-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateAppInstanceAdminInput, CreateAppInstanceAdminOutput, CreateAppInstanceAdminOutputError>(id: "createAppInstanceAdmin")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateAppInstanceAdminInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateAppInstanceAdminInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateAppInstanceAdminInput, CreateAppInstanceAdminOutput, CreateAppInstanceAdminOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateAppInstanceAdminInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a user under an Amazon Chime <code>AppInstance</code>. The request consists of a unique <code>appInstanceUserId</code> and
    /// <code>Name</code> for that user.</p>
    public func createAppInstanceUser(input: CreateAppInstanceUserInput, completion: @escaping (SdkResult<CreateAppInstanceUserOutput, CreateAppInstanceUserOutputError>) -> Void)
    {
        let urlPath = "/app-instance-users"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createAppInstanceUser")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "identity-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateAppInstanceUserInput, CreateAppInstanceUserOutput, CreateAppInstanceUserOutputError>(id: "createAppInstanceUser")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<CreateAppInstanceUserOutput>, SdkError<CreateAppInstanceUserOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientRequestToken == nil {
                copiedInput.clientRequestToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: CreateAppInstanceUserInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateAppInstanceUserInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateAppInstanceUserInput, CreateAppInstanceUserOutput, CreateAppInstanceUserOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateAppInstanceUserInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    /// Creates a new attendee for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a>
    /// in the
    /// <i>Amazon Chime Developer Guide</i>.
    /// </p>
    public func createAttendee(input: CreateAttendeeInput, completion: @escaping (SdkResult<CreateAttendeeOutput, CreateAttendeeOutputError>) -> Void)
    {
        guard let meetingId = input.meetingId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component meetingId unexpectedly nil"))))
            return
        }
        let urlPath = "/meetings/\(meetingId)/attendees"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createAttendee")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateAttendeeInput, CreateAttendeeOutput, CreateAttendeeOutputError>(id: "createAttendee")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateAttendeeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateAttendeeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateAttendeeInput, CreateAttendeeOutput, CreateAttendeeOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateAttendeeInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a bot for an Amazon Chime Enterprise account.</p>
    public func createBot(input: CreateBotInput, completion: @escaping (SdkResult<CreateBotOutput, CreateBotOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/bots"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createBot")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateBotInput, CreateBotOutput, CreateBotOutputError>(id: "createBot")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateBotInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateBotInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateBotInput, CreateBotOutput, CreateBotOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateBotInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a channel to which you can add users and send messages.</p>
    ///
    ///          <p>
    ///             <b>Restriction</b>: You can't change a channel's privacy.</p>
    ///
    ///          <note>
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func createChannel(input: CreateChannelInput, completion: @escaping (SdkResult<CreateChannelOutput, CreateChannelOutputError>) -> Void)
    {
        let urlPath = "/channels"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createChannel")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateChannelInput, CreateChannelOutput, CreateChannelOutputError>(id: "createChannel")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<CreateChannelOutput>, SdkError<CreateChannelOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientRequestToken == nil {
                copiedInput.clientRequestToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: CreateChannelInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateChannelInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateChannelInput, CreateChannelOutput, CreateChannelOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateChannelInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Permanently bans a member from a channel. Moderators can't add banned members to a channel.
    ///             To undo a ban, you first have to <code>DeleteChannelBan</code>, and then
    ///                 <code>CreateChannelMembership</code>. Bans are cleaned up when you delete users or
    ///             channels.</p>
    ///          <p>If you ban a user who is already part of a channel, that user is automatically kicked from the channel.</p>
    ///
    ///          <note>
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func createChannelBan(input: CreateChannelBanInput, completion: @escaping (SdkResult<CreateChannelBanOutput, CreateChannelBanOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)/bans"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createChannelBan")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateChannelBanInput, CreateChannelBanOutput, CreateChannelBanOutputError>(id: "createChannelBan")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateChannelBanInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateChannelBanInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateChannelBanInput, CreateChannelBanOutput, CreateChannelBanOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateChannelBanInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Adds a user to a channel. The <code>InvitedBy</code> response field is derived from the
    ///             request header. A channel member can:</p>
    ///
    ///          <ul>
    ///             <li>
    ///                <p>List messages</p>
    ///             </li>
    ///             <li>
    ///                <p>Send messages</p>
    ///             </li>
    ///             <li>
    ///                <p>Receive messages</p>
    ///             </li>
    ///             <li>
    ///                <p>Edit their own messages</p>
    ///             </li>
    ///             <li>
    ///                <p>Leave the channel</p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p>Privacy settings impact this action as follows:</p>
    ///
    ///          <ul>
    ///             <li>
    ///                <p>Public Channels: You do not need to be a member to list messages, but you must be a member to send messages.</p>
    ///             </li>
    ///             <li>
    ///                <p>Private Channels: You must be a member to list or send messages.</p>
    ///             </li>
    ///          </ul>
    ///
    ///          <note>
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func createChannelMembership(input: CreateChannelMembershipInput, completion: @escaping (SdkResult<CreateChannelMembershipOutput, CreateChannelMembershipOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)/memberships"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createChannelMembership")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateChannelMembershipInput, CreateChannelMembershipOutput, CreateChannelMembershipOutputError>(id: "createChannelMembership")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateChannelMembershipInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateChannelMembershipInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateChannelMembershipInput, CreateChannelMembershipOutput, CreateChannelMembershipOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateChannelMembershipInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a new <code>ChannelModerator</code>. A channel moderator can:</p>
    ///
    ///          <ul>
    ///             <li>
    ///                <p>Add and remove other members of the channel.</p>
    ///             </li>
    ///             <li>
    ///                <p>Add and remove other moderators of the channel.</p>
    ///             </li>
    ///             <li>
    ///                <p>Add and remove user bans for the channel.</p>
    ///             </li>
    ///             <li>
    ///                <p>Redact messages in the channel.</p>
    ///             </li>
    ///             <li>
    ///                <p>List messages in the channel.</p>
    ///             </li>
    ///          </ul>
    ///
    ///          <note>
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func createChannelModerator(input: CreateChannelModeratorInput, completion: @escaping (SdkResult<CreateChannelModeratorOutput, CreateChannelModeratorOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)/moderators"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createChannelModerator")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateChannelModeratorInput, CreateChannelModeratorOutput, CreateChannelModeratorOutputError>(id: "createChannelModerator")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateChannelModeratorInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateChannelModeratorInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateChannelModeratorInput, CreateChannelModeratorOutput, CreateChannelModeratorOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateChannelModeratorInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    /// Creates a new Amazon Chime SDK meeting in the specified media Region with no initial attendees. For more information about specifying media Regions, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/dg/chime-sdk-meetings-regions.html">Amazon Chime SDK Media Regions</a>
    /// in the
    /// <i>Amazon Chime Developer Guide</i>
    /// . For more information about the Amazon Chime SDK, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a>
    /// in the
    /// <i>Amazon Chime Developer Guide</i>
    /// .
    /// </p>
    public func createMeeting(input: CreateMeetingInput, completion: @escaping (SdkResult<CreateMeetingOutput, CreateMeetingOutputError>) -> Void)
    {
        let urlPath = "/meetings"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createMeeting")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateMeetingInput, CreateMeetingOutput, CreateMeetingOutputError>(id: "createMeeting")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<CreateMeetingOutput>, SdkError<CreateMeetingOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientRequestToken == nil {
                copiedInput.clientRequestToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: CreateMeetingInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateMeetingInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateMeetingInput, CreateMeetingOutput, CreateMeetingOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateMeetingInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Uses the join token and call metadata in a meeting request (From number, To number, and so forth) to initiate an outbound call to a public
    ///     switched telephone network (PSTN) and join them into a Chime meeting. Also ensures that the From number belongs to the customer.</p>
    ///
    ///          <p>To play welcome audio or implement an interactive voice response (IVR), use the
    /// <code>CreateSipMediaApplicationCall</code> action with the corresponding SIP media application ID.</p>
    public func createMeetingDialOut(input: CreateMeetingDialOutInput, completion: @escaping (SdkResult<CreateMeetingDialOutOutput, CreateMeetingDialOutOutputError>) -> Void)
    {
        guard let meetingId = input.meetingId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component meetingId unexpectedly nil"))))
            return
        }
        let urlPath = "/meetings/\(meetingId)/dial-outs"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createMeetingDialOut")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateMeetingDialOutInput, CreateMeetingDialOutOutput, CreateMeetingDialOutOutputError>(id: "createMeetingDialOut")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateMeetingDialOutInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateMeetingDialOutInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateMeetingDialOutInput, CreateMeetingDialOutOutput, CreateMeetingDialOutOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateMeetingDialOutInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    /// Creates a new Amazon Chime SDK meeting in the specified media Region, with attendees. For more information about specifying media Regions, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/dg/chime-sdk-meetings-regions.html">Amazon Chime SDK Media Regions</a>
    /// in the
    /// <i>Amazon Chime Developer Guide</i>
    /// . For more information about the Amazon Chime SDK, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a>
    /// in the
    /// <i>Amazon Chime Developer Guide</i>
    /// .
    /// </p>
    public func createMeetingWithAttendees(input: CreateMeetingWithAttendeesInput, completion: @escaping (SdkResult<CreateMeetingWithAttendeesOutput, CreateMeetingWithAttendeesOutputError>) -> Void)
    {
        let urlPath = "/meetings"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createMeetingWithAttendees")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateMeetingWithAttendeesInput, CreateMeetingWithAttendeesOutput, CreateMeetingWithAttendeesOutputError>(id: "createMeetingWithAttendees")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<CreateMeetingWithAttendeesOutput>, SdkError<CreateMeetingWithAttendeesOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientRequestToken == nil {
                copiedInput.clientRequestToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: CreateMeetingWithAttendeesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateMeetingWithAttendeesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateMeetingWithAttendeesInput, CreateMeetingWithAttendeesOutput, CreateMeetingWithAttendeesOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateMeetingWithAttendeesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates an order for phone numbers to be provisioned. For toll-free numbers, you cannot
    ///             use the Amazon Chime Business Calling product type. For numbers outside the
    ///             US,
    ///             you must use the Amazon Chime SIP Media Application Dial-In product type.</p>
    public func createPhoneNumberOrder(input: CreatePhoneNumberOrderInput, completion: @escaping (SdkResult<CreatePhoneNumberOrderOutput, CreatePhoneNumberOrderOutputError>) -> Void)
    {
        let urlPath = "/phone-number-orders"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createPhoneNumberOrder")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreatePhoneNumberOrderInput, CreatePhoneNumberOrderOutput, CreatePhoneNumberOrderOutputError>(id: "createPhoneNumberOrder")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreatePhoneNumberOrderInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreatePhoneNumberOrderInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreatePhoneNumberOrderInput, CreatePhoneNumberOrderOutput, CreatePhoneNumberOrderOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreatePhoneNumberOrderInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a proxy session on the specified Amazon Chime Voice Connector for the specified participant phone numbers.</p>
    public func createProxySession(input: CreateProxySessionInput, completion: @escaping (SdkResult<CreateProxySessionOutput, CreateProxySessionOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/proxy-sessions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createProxySession")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateProxySessionInput, CreateProxySessionOutput, CreateProxySessionOutputError>(id: "createProxySession")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateProxySessionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateProxySessionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateProxySessionInput, CreateProxySessionOutput, CreateProxySessionOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateProxySessionInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a chat room for the specified Amazon Chime Enterprise account.</p>
    public func createRoom(input: CreateRoomInput, completion: @escaping (SdkResult<CreateRoomOutput, CreateRoomOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/rooms"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createRoom")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateRoomInput, CreateRoomOutput, CreateRoomOutputError>(id: "createRoom")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<CreateRoomOutput>, SdkError<CreateRoomOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientRequestToken == nil {
                copiedInput.clientRequestToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: CreateRoomInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateRoomInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateRoomInput, CreateRoomOutput, CreateRoomOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateRoomInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Adds a member to a chat room in an Amazon Chime Enterprise account. A member can be either a user or a bot. The member role designates whether the member is a chat room administrator or a general chat room member.</p>
    public func createRoomMembership(input: CreateRoomMembershipInput, completion: @escaping (SdkResult<CreateRoomMembershipOutput, CreateRoomMembershipOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        guard let roomId = input.roomId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component roomId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/rooms/\(roomId)/memberships"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createRoomMembership")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateRoomMembershipInput, CreateRoomMembershipOutput, CreateRoomMembershipOutputError>(id: "createRoomMembership")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateRoomMembershipInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateRoomMembershipInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateRoomMembershipInput, CreateRoomMembershipOutput, CreateRoomMembershipOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateRoomMembershipInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a SIP media application.</p>
    public func createSipMediaApplication(input: CreateSipMediaApplicationInput, completion: @escaping (SdkResult<CreateSipMediaApplicationOutput, CreateSipMediaApplicationOutputError>) -> Void)
    {
        let urlPath = "/sip-media-applications"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createSipMediaApplication")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateSipMediaApplicationInput, CreateSipMediaApplicationOutput, CreateSipMediaApplicationOutputError>(id: "createSipMediaApplication")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateSipMediaApplicationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateSipMediaApplicationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateSipMediaApplicationInput, CreateSipMediaApplicationOutput, CreateSipMediaApplicationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateSipMediaApplicationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates an outbound call to a phone number from the phone number specified in the request, and it invokes the endpoint of the specified
    /// <code>sipMediaApplicationId</code>.</p>
    public func createSipMediaApplicationCall(input: CreateSipMediaApplicationCallInput, completion: @escaping (SdkResult<CreateSipMediaApplicationCallOutput, CreateSipMediaApplicationCallOutputError>) -> Void)
    {
        guard let sipMediaApplicationId = input.sipMediaApplicationId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component sipMediaApplicationId unexpectedly nil"))))
            return
        }
        let urlPath = "/sip-media-applications/\(sipMediaApplicationId)/calls"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createSipMediaApplicationCall")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateSipMediaApplicationCallInput, CreateSipMediaApplicationCallOutput, CreateSipMediaApplicationCallOutputError>(id: "createSipMediaApplicationCall")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateSipMediaApplicationCallInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateSipMediaApplicationCallInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateSipMediaApplicationCallInput, CreateSipMediaApplicationCallOutput, CreateSipMediaApplicationCallOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateSipMediaApplicationCallInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a SIP rule which can be used to run a SIP media application as a target for a specific trigger type.</p>
    public func createSipRule(input: CreateSipRuleInput, completion: @escaping (SdkResult<CreateSipRuleOutput, CreateSipRuleOutputError>) -> Void)
    {
        let urlPath = "/sip-rules"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createSipRule")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateSipRuleInput, CreateSipRuleOutput, CreateSipRuleOutputError>(id: "createSipRule")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateSipRuleInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateSipRuleInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateSipRuleInput, CreateSipRuleOutput, CreateSipRuleOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateSipRuleInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a user under the specified Amazon Chime account.</p>
    public func createUser(input: CreateUserInput, completion: @escaping (SdkResult<CreateUserOutput, CreateUserOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/users"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createUser")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateUserInput, CreateUserOutput, CreateUserOutputError>(id: "createUser")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateUserInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateUserInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateUserInput, CreateUserOutput, CreateUserOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateUserInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates an Amazon Chime Voice Connector under the administrator's AWS account. You can choose to create an Amazon Chime Voice Connector in a specific AWS Region.</p>
    ///
    ///          <p>
    /// Enabling
    /// <a>CreateVoiceConnectorRequest$RequireEncryption</a>
    /// configures your Amazon Chime Voice Connector to use TLS transport for SIP signaling and Secure RTP (SRTP) for media. Inbound calls use TLS transport, and unencrypted outbound calls are blocked.
    /// </p>
    public func createVoiceConnector(input: CreateVoiceConnectorInput, completion: @escaping (SdkResult<CreateVoiceConnectorOutput, CreateVoiceConnectorOutputError>) -> Void)
    {
        let urlPath = "/voice-connectors"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createVoiceConnector")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateVoiceConnectorInput, CreateVoiceConnectorOutput, CreateVoiceConnectorOutputError>(id: "createVoiceConnector")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateVoiceConnectorInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateVoiceConnectorInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateVoiceConnectorInput, CreateVoiceConnectorOutput, CreateVoiceConnectorOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateVoiceConnectorInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates an Amazon Chime Voice Connector group under the administrator's AWS account. You can
    ///             associate Amazon Chime Voice Connectors with the Amazon Chime Voice Connector group by
    ///             including <code>VoiceConnectorItems</code> in the request.</p>
    ///          <p>You can include Amazon Chime Voice Connectors from different AWS Regions in your group. This
    ///             creates a fault tolerant mechanism for fallback in case of availability events.</p>
    public func createVoiceConnectorGroup(input: CreateVoiceConnectorGroupInput, completion: @escaping (SdkResult<CreateVoiceConnectorGroupOutput, CreateVoiceConnectorGroupOutputError>) -> Void)
    {
        let urlPath = "/voice-connector-groups"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createVoiceConnectorGroup")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateVoiceConnectorGroupInput, CreateVoiceConnectorGroupOutput, CreateVoiceConnectorGroupOutputError>(id: "createVoiceConnectorGroup")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateVoiceConnectorGroupInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateVoiceConnectorGroupInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateVoiceConnectorGroupInput, CreateVoiceConnectorGroupOutput, CreateVoiceConnectorGroupOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateVoiceConnectorGroupInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the specified Amazon Chime account. You must suspend all users before deleting
    ///                 <code>Team</code> account. You can use the <a>BatchSuspendUser</a> action
    ///             to dodo.</p>
    ///
    ///          <p>For <code>EnterpriseLWA</code> and <code>EnterpriseAD</code> accounts, you must release the
    ///             claimed domains for your Amazon Chime account before deletion. As soon as you release
    ///             the domain, all users under that account are suspended.</p>
    ///
    ///          <p>Deleted accounts appear in your <code>Disabled</code> accounts list for 90 days. To restore
    ///             deleted account from your <code>Disabled</code> accounts list, you must contact AWS
    ///             Support.</p>
    ///
    ///          <p>After 90 days, deleted accounts are permanently removed from your
    /// <code>Disabled</code> accounts list.</p>
    public func deleteAccount(input: DeleteAccountInput, completion: @escaping (SdkResult<DeleteAccountOutput, DeleteAccountOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteAccountInput, DeleteAccountOutput, DeleteAccountOutputError>(id: "deleteAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteAccountInput, DeleteAccountOutput, DeleteAccountOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes an <code>AppInstance</code> and all associated data asynchronously.</p>
    public func deleteAppInstance(input: DeleteAppInstanceInput, completion: @escaping (SdkResult<DeleteAppInstanceOutput, DeleteAppInstanceOutputError>) -> Void)
    {
        guard let appInstanceArn = input.appInstanceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component appInstanceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/app-instances/\(appInstanceArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteAppInstance")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "identity-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteAppInstanceInput, DeleteAppInstanceOutput, DeleteAppInstanceOutputError>(id: "deleteAppInstance")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteAppInstanceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteAppInstanceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteAppInstanceInput, DeleteAppInstanceOutput, DeleteAppInstanceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Demotes an <code>AppInstanceAdmin</code> to an <code>AppInstanceUser</code>. This action does not delete the user.</p>
    public func deleteAppInstanceAdmin(input: DeleteAppInstanceAdminInput, completion: @escaping (SdkResult<DeleteAppInstanceAdminOutput, DeleteAppInstanceAdminOutputError>) -> Void)
    {
        guard let appInstanceArn = input.appInstanceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component appInstanceArn unexpectedly nil"))))
            return
        }
        guard let appInstanceAdminArn = input.appInstanceAdminArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component appInstanceAdminArn unexpectedly nil"))))
            return
        }
        let urlPath = "/app-instances/\(appInstanceArn)/admins/\(appInstanceAdminArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteAppInstanceAdmin")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "identity-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteAppInstanceAdminInput, DeleteAppInstanceAdminOutput, DeleteAppInstanceAdminOutputError>(id: "deleteAppInstanceAdmin")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteAppInstanceAdminInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteAppInstanceAdminInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteAppInstanceAdminInput, DeleteAppInstanceAdminOutput, DeleteAppInstanceAdminOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the streaming configurations of an <code>AppInstance</code>.</p>
    public func deleteAppInstanceStreamingConfigurations(input: DeleteAppInstanceStreamingConfigurationsInput, completion: @escaping (SdkResult<DeleteAppInstanceStreamingConfigurationsOutput, DeleteAppInstanceStreamingConfigurationsOutputError>) -> Void)
    {
        guard let appInstanceArn = input.appInstanceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component appInstanceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/app-instances/\(appInstanceArn)/streaming-configurations"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteAppInstanceStreamingConfigurations")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteAppInstanceStreamingConfigurationsInput, DeleteAppInstanceStreamingConfigurationsOutput, DeleteAppInstanceStreamingConfigurationsOutputError>(id: "deleteAppInstanceStreamingConfigurations")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteAppInstanceStreamingConfigurationsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteAppInstanceStreamingConfigurationsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteAppInstanceStreamingConfigurationsInput, DeleteAppInstanceStreamingConfigurationsOutput, DeleteAppInstanceStreamingConfigurationsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes an <code>AppInstanceUser</code>.</p>
    public func deleteAppInstanceUser(input: DeleteAppInstanceUserInput, completion: @escaping (SdkResult<DeleteAppInstanceUserOutput, DeleteAppInstanceUserOutputError>) -> Void)
    {
        guard let appInstanceUserArn = input.appInstanceUserArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component appInstanceUserArn unexpectedly nil"))))
            return
        }
        let urlPath = "/app-instance-users/\(appInstanceUserArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteAppInstanceUser")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "identity-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteAppInstanceUserInput, DeleteAppInstanceUserOutput, DeleteAppInstanceUserOutputError>(id: "deleteAppInstanceUser")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteAppInstanceUserInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteAppInstanceUserInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteAppInstanceUserInput, DeleteAppInstanceUserOutput, DeleteAppInstanceUserOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes an attendee from the specified Amazon Chime SDK meeting and deletes their
    /// <code>JoinToken</code>. Attendees are automatically deleted when a Amazon Chime SDK meeting is deleted. For more information about the Amazon Chime SDK, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a>
    /// in the <i>Amazon Chime Developer Guide</i>.</p>
    public func deleteAttendee(input: DeleteAttendeeInput, completion: @escaping (SdkResult<DeleteAttendeeOutput, DeleteAttendeeOutputError>) -> Void)
    {
        guard let meetingId = input.meetingId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component meetingId unexpectedly nil"))))
            return
        }
        guard let attendeeId = input.attendeeId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component attendeeId unexpectedly nil"))))
            return
        }
        let urlPath = "/meetings/\(meetingId)/attendees/\(attendeeId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteAttendee")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteAttendeeInput, DeleteAttendeeOutput, DeleteAttendeeOutputError>(id: "deleteAttendee")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteAttendeeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteAttendeeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteAttendeeInput, DeleteAttendeeOutput, DeleteAttendeeOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Immediately makes a channel and its memberships inaccessible and marks them for deletion. This is an irreversible process.</p>
    ///
    ///          <note>
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func deleteChannel(input: DeleteChannelInput, completion: @escaping (SdkResult<DeleteChannelOutput, DeleteChannelOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteChannel")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteChannelInput, DeleteChannelOutput, DeleteChannelOutputError>(id: "deleteChannel")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteChannelInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteChannelInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteChannelInput, DeleteChannelOutput, DeleteChannelOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Removes a user from a channel's ban list.</p>
    ///
    ///          <note>
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func deleteChannelBan(input: DeleteChannelBanInput, completion: @escaping (SdkResult<DeleteChannelBanOutput, DeleteChannelBanOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        guard let memberArn = input.memberArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component memberArn unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)/bans/\(memberArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteChannelBan")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteChannelBanInput, DeleteChannelBanOutput, DeleteChannelBanOutputError>(id: "deleteChannelBan")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteChannelBanInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteChannelBanInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteChannelBanInput, DeleteChannelBanOutput, DeleteChannelBanOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Removes a member from a channel.</p>
    ///
    ///          <note>
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func deleteChannelMembership(input: DeleteChannelMembershipInput, completion: @escaping (SdkResult<DeleteChannelMembershipOutput, DeleteChannelMembershipOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        guard let memberArn = input.memberArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component memberArn unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)/memberships/\(memberArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteChannelMembership")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteChannelMembershipInput, DeleteChannelMembershipOutput, DeleteChannelMembershipOutputError>(id: "deleteChannelMembership")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteChannelMembershipInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteChannelMembershipInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteChannelMembershipInput, DeleteChannelMembershipOutput, DeleteChannelMembershipOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a channel message. Only admins can perform this action. Deletion makes messages
    ///             inaccessible immediately. A background process deletes any revisions created by
    ///                 <code>UpdateChannelMessage</code>.</p>
    ///
    ///          <note>
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func deleteChannelMessage(input: DeleteChannelMessageInput, completion: @escaping (SdkResult<DeleteChannelMessageOutput, DeleteChannelMessageOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        guard let messageId = input.messageId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component messageId unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)/messages/\(messageId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteChannelMessage")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteChannelMessageInput, DeleteChannelMessageOutput, DeleteChannelMessageOutputError>(id: "deleteChannelMessage")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteChannelMessageInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteChannelMessageInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteChannelMessageInput, DeleteChannelMessageOutput, DeleteChannelMessageOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a channel moderator.</p>
    ///
    ///          <note>
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func deleteChannelModerator(input: DeleteChannelModeratorInput, completion: @escaping (SdkResult<DeleteChannelModeratorOutput, DeleteChannelModeratorOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        guard let channelModeratorArn = input.channelModeratorArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelModeratorArn unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)/moderators/\(channelModeratorArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteChannelModerator")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteChannelModeratorInput, DeleteChannelModeratorOutput, DeleteChannelModeratorOutputError>(id: "deleteChannelModerator")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteChannelModeratorInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteChannelModeratorInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteChannelModeratorInput, DeleteChannelModeratorOutput, DeleteChannelModeratorOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the events configuration that allows a bot to receive outgoing events.</p>
    public func deleteEventsConfiguration(input: DeleteEventsConfigurationInput, completion: @escaping (SdkResult<DeleteEventsConfigurationOutput, DeleteEventsConfigurationOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        guard let botId = input.botId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component botId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/bots/\(botId)/events-configuration"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteEventsConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteEventsConfigurationInput, DeleteEventsConfigurationOutput, DeleteEventsConfigurationOutputError>(id: "deleteEventsConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteEventsConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteEventsConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteEventsConfigurationInput, DeleteEventsConfigurationOutput, DeleteEventsConfigurationOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the specified Amazon Chime SDK meeting. The operation deletes all attendees, disconnects all clients, and prevents new clients from
    ///     joining the meeting. For more information about the Amazon Chime SDK, see
    ///     <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the
    ///     <i>Amazon Chime Developer Guide</i>.</p>
    public func deleteMeeting(input: DeleteMeetingInput, completion: @escaping (SdkResult<DeleteMeetingOutput, DeleteMeetingOutputError>) -> Void)
    {
        guard let meetingId = input.meetingId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component meetingId unexpectedly nil"))))
            return
        }
        let urlPath = "/meetings/\(meetingId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteMeeting")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteMeetingInput, DeleteMeetingOutput, DeleteMeetingOutputError>(id: "deleteMeeting")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteMeetingInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteMeetingInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteMeetingInput, DeleteMeetingOutput, DeleteMeetingOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Moves the specified phone number into the <b>Deletion
    ///                 queue</b>. A phone number must be disassociated from any
    ///             users or Amazon Chime Voice Connectors before it can be deleted.</p>
    ///
    ///          <p>Deleted phone numbers remain in the
    /// <b>Deletion queue</b>
    /// for 7 days before they are deleted permanently.</p>
    public func deletePhoneNumber(input: DeletePhoneNumberInput, completion: @escaping (SdkResult<DeletePhoneNumberOutput, DeletePhoneNumberOutputError>) -> Void)
    {
        guard let phoneNumberId = input.phoneNumberId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component phoneNumberId unexpectedly nil"))))
            return
        }
        let urlPath = "/phone-numbers/\(phoneNumberId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deletePhoneNumber")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeletePhoneNumberInput, DeletePhoneNumberOutput, DeletePhoneNumberOutputError>(id: "deletePhoneNumber")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeletePhoneNumberInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeletePhoneNumberInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeletePhoneNumberInput, DeletePhoneNumberOutput, DeletePhoneNumberOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the specified proxy session from the specified Amazon Chime Voice Connector.</p>
    public func deleteProxySession(input: DeleteProxySessionInput, completion: @escaping (SdkResult<DeleteProxySessionOutput, DeleteProxySessionOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        guard let proxySessionId = input.proxySessionId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component proxySessionId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/proxy-sessions/\(proxySessionId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteProxySession")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteProxySessionInput, DeleteProxySessionOutput, DeleteProxySessionOutputError>(id: "deleteProxySession")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteProxySessionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteProxySessionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteProxySessionInput, DeleteProxySessionOutput, DeleteProxySessionOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a chat room in an Amazon Chime Enterprise account.</p>
    public func deleteRoom(input: DeleteRoomInput, completion: @escaping (SdkResult<DeleteRoomOutput, DeleteRoomOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        guard let roomId = input.roomId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component roomId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/rooms/\(roomId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteRoom")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteRoomInput, DeleteRoomOutput, DeleteRoomOutputError>(id: "deleteRoom")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteRoomInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteRoomInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteRoomInput, DeleteRoomOutput, DeleteRoomOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Removes a member from a chat room in an Amazon Chime Enterprise account.</p>
    public func deleteRoomMembership(input: DeleteRoomMembershipInput, completion: @escaping (SdkResult<DeleteRoomMembershipOutput, DeleteRoomMembershipOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        guard let roomId = input.roomId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component roomId unexpectedly nil"))))
            return
        }
        guard let memberId = input.memberId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component memberId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/rooms/\(roomId)/memberships/\(memberId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteRoomMembership")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteRoomMembershipInput, DeleteRoomMembershipOutput, DeleteRoomMembershipOutputError>(id: "deleteRoomMembership")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteRoomMembershipInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteRoomMembershipInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteRoomMembershipInput, DeleteRoomMembershipOutput, DeleteRoomMembershipOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a SIP media application.</p>
    public func deleteSipMediaApplication(input: DeleteSipMediaApplicationInput, completion: @escaping (SdkResult<DeleteSipMediaApplicationOutput, DeleteSipMediaApplicationOutputError>) -> Void)
    {
        guard let sipMediaApplicationId = input.sipMediaApplicationId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component sipMediaApplicationId unexpectedly nil"))))
            return
        }
        let urlPath = "/sip-media-applications/\(sipMediaApplicationId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteSipMediaApplication")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteSipMediaApplicationInput, DeleteSipMediaApplicationOutput, DeleteSipMediaApplicationOutputError>(id: "deleteSipMediaApplication")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteSipMediaApplicationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteSipMediaApplicationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteSipMediaApplicationInput, DeleteSipMediaApplicationOutput, DeleteSipMediaApplicationOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a SIP rule. You must disable a SIP rule before you can delete it.</p>
    public func deleteSipRule(input: DeleteSipRuleInput, completion: @escaping (SdkResult<DeleteSipRuleOutput, DeleteSipRuleOutputError>) -> Void)
    {
        guard let sipRuleId = input.sipRuleId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component sipRuleId unexpectedly nil"))))
            return
        }
        let urlPath = "/sip-rules/\(sipRuleId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteSipRule")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteSipRuleInput, DeleteSipRuleOutput, DeleteSipRuleOutputError>(id: "deleteSipRule")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteSipRuleInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteSipRuleInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteSipRuleInput, DeleteSipRuleOutput, DeleteSipRuleOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the specified Amazon Chime Voice Connector. Any phone numbers associated with the
    ///             Amazon Chime Voice Connector must be disassociated from it before it can be
    ///             deleted.</p>
    public func deleteVoiceConnector(input: DeleteVoiceConnectorInput, completion: @escaping (SdkResult<DeleteVoiceConnectorOutput, DeleteVoiceConnectorOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteVoiceConnector")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteVoiceConnectorInput, DeleteVoiceConnectorOutput, DeleteVoiceConnectorOutputError>(id: "deleteVoiceConnector")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteVoiceConnectorInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteVoiceConnectorInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteVoiceConnectorInput, DeleteVoiceConnectorOutput, DeleteVoiceConnectorOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the emergency calling configuration details from the specified Amazon Chime Voice Connector.</p>
    public func deleteVoiceConnectorEmergencyCallingConfiguration(input: DeleteVoiceConnectorEmergencyCallingConfigurationInput, completion: @escaping (SdkResult<DeleteVoiceConnectorEmergencyCallingConfigurationOutput, DeleteVoiceConnectorEmergencyCallingConfigurationOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/emergency-calling-configuration"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteVoiceConnectorEmergencyCallingConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteVoiceConnectorEmergencyCallingConfigurationInput, DeleteVoiceConnectorEmergencyCallingConfigurationOutput, DeleteVoiceConnectorEmergencyCallingConfigurationOutputError>(id: "deleteVoiceConnectorEmergencyCallingConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteVoiceConnectorEmergencyCallingConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteVoiceConnectorEmergencyCallingConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteVoiceConnectorEmergencyCallingConfigurationInput, DeleteVoiceConnectorEmergencyCallingConfigurationOutput, DeleteVoiceConnectorEmergencyCallingConfigurationOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the specified Amazon Chime Voice Connector group. Any
    /// <code>VoiceConnectorItems</code>
    /// and phone numbers associated with the group must be removed before it can be deleted.</p>
    public func deleteVoiceConnectorGroup(input: DeleteVoiceConnectorGroupInput, completion: @escaping (SdkResult<DeleteVoiceConnectorGroupOutput, DeleteVoiceConnectorGroupOutputError>) -> Void)
    {
        guard let voiceConnectorGroupId = input.voiceConnectorGroupId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorGroupId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connector-groups/\(voiceConnectorGroupId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteVoiceConnectorGroup")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteVoiceConnectorGroupInput, DeleteVoiceConnectorGroupOutput, DeleteVoiceConnectorGroupOutputError>(id: "deleteVoiceConnectorGroup")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteVoiceConnectorGroupInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteVoiceConnectorGroupInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteVoiceConnectorGroupInput, DeleteVoiceConnectorGroupOutput, DeleteVoiceConnectorGroupOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the origination settings for the specified Amazon Chime Voice Connector.</p>
    ///
    ///          <note>
    ///             <p>If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to deleting the origination settings.</p>
    ///          </note>
    public func deleteVoiceConnectorOrigination(input: DeleteVoiceConnectorOriginationInput, completion: @escaping (SdkResult<DeleteVoiceConnectorOriginationOutput, DeleteVoiceConnectorOriginationOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/origination"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteVoiceConnectorOrigination")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteVoiceConnectorOriginationInput, DeleteVoiceConnectorOriginationOutput, DeleteVoiceConnectorOriginationOutputError>(id: "deleteVoiceConnectorOrigination")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteVoiceConnectorOriginationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteVoiceConnectorOriginationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteVoiceConnectorOriginationInput, DeleteVoiceConnectorOriginationOutput, DeleteVoiceConnectorOriginationOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the proxy configuration from the specified Amazon Chime Voice Connector.</p>
    public func deleteVoiceConnectorProxy(input: DeleteVoiceConnectorProxyInput, completion: @escaping (SdkResult<DeleteVoiceConnectorProxyOutput, DeleteVoiceConnectorProxyOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/programmable-numbers/proxy"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteVoiceConnectorProxy")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteVoiceConnectorProxyInput, DeleteVoiceConnectorProxyOutput, DeleteVoiceConnectorProxyOutputError>(id: "deleteVoiceConnectorProxy")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteVoiceConnectorProxyInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteVoiceConnectorProxyInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteVoiceConnectorProxyInput, DeleteVoiceConnectorProxyOutput, DeleteVoiceConnectorProxyOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the streaming configuration for the specified Amazon Chime Voice Connector.</p>
    public func deleteVoiceConnectorStreamingConfiguration(input: DeleteVoiceConnectorStreamingConfigurationInput, completion: @escaping (SdkResult<DeleteVoiceConnectorStreamingConfigurationOutput, DeleteVoiceConnectorStreamingConfigurationOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/streaming-configuration"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteVoiceConnectorStreamingConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteVoiceConnectorStreamingConfigurationInput, DeleteVoiceConnectorStreamingConfigurationOutput, DeleteVoiceConnectorStreamingConfigurationOutputError>(id: "deleteVoiceConnectorStreamingConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteVoiceConnectorStreamingConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteVoiceConnectorStreamingConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteVoiceConnectorStreamingConfigurationInput, DeleteVoiceConnectorStreamingConfigurationOutput, DeleteVoiceConnectorStreamingConfigurationOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the termination settings for the specified Amazon Chime Voice Connector.</p>
    ///
    ///          <note>
    ///             <p>If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to deleting the termination settings.</p>
    ///          </note>
    public func deleteVoiceConnectorTermination(input: DeleteVoiceConnectorTerminationInput, completion: @escaping (SdkResult<DeleteVoiceConnectorTerminationOutput, DeleteVoiceConnectorTerminationOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/termination"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteVoiceConnectorTermination")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteVoiceConnectorTerminationInput, DeleteVoiceConnectorTerminationOutput, DeleteVoiceConnectorTerminationOutputError>(id: "deleteVoiceConnectorTermination")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteVoiceConnectorTerminationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteVoiceConnectorTerminationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteVoiceConnectorTerminationInput, DeleteVoiceConnectorTerminationOutput, DeleteVoiceConnectorTerminationOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the specified SIP credentials used by your equipment to authenticate during call termination.</p>
    public func deleteVoiceConnectorTerminationCredentials(input: DeleteVoiceConnectorTerminationCredentialsInput, completion: @escaping (SdkResult<DeleteVoiceConnectorTerminationCredentialsOutput, DeleteVoiceConnectorTerminationCredentialsOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/termination/credentials"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteVoiceConnectorTerminationCredentials")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteVoiceConnectorTerminationCredentialsInput, DeleteVoiceConnectorTerminationCredentialsOutput, DeleteVoiceConnectorTerminationCredentialsOutputError>(id: "deleteVoiceConnectorTerminationCredentials")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteVoiceConnectorTerminationCredentialsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteVoiceConnectorTerminationCredentialsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteVoiceConnectorTerminationCredentialsInput, DeleteVoiceConnectorTerminationCredentialsOutput, DeleteVoiceConnectorTerminationCredentialsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: DeleteVoiceConnectorTerminationCredentialsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the full details of an <code>AppInstance</code>.</p>
    public func describeAppInstance(input: DescribeAppInstanceInput, completion: @escaping (SdkResult<DescribeAppInstanceOutput, DescribeAppInstanceOutputError>) -> Void)
    {
        guard let appInstanceArn = input.appInstanceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component appInstanceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/app-instances/\(appInstanceArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeAppInstance")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "identity-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeAppInstanceInput, DescribeAppInstanceOutput, DescribeAppInstanceOutputError>(id: "describeAppInstance")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeAppInstanceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeAppInstanceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeAppInstanceInput, DescribeAppInstanceOutput, DescribeAppInstanceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the full details of an <code>AppInstanceAdmin</code>.</p>
    public func describeAppInstanceAdmin(input: DescribeAppInstanceAdminInput, completion: @escaping (SdkResult<DescribeAppInstanceAdminOutput, DescribeAppInstanceAdminOutputError>) -> Void)
    {
        guard let appInstanceArn = input.appInstanceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component appInstanceArn unexpectedly nil"))))
            return
        }
        guard let appInstanceAdminArn = input.appInstanceAdminArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component appInstanceAdminArn unexpectedly nil"))))
            return
        }
        let urlPath = "/app-instances/\(appInstanceArn)/admins/\(appInstanceAdminArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeAppInstanceAdmin")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "identity-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeAppInstanceAdminInput, DescribeAppInstanceAdminOutput, DescribeAppInstanceAdminOutputError>(id: "describeAppInstanceAdmin")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeAppInstanceAdminInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeAppInstanceAdminInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeAppInstanceAdminInput, DescribeAppInstanceAdminOutput, DescribeAppInstanceAdminOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    /// Returns the full details of an
    /// <code>AppInstanceUser</code>
    /// .
    /// </p>
    public func describeAppInstanceUser(input: DescribeAppInstanceUserInput, completion: @escaping (SdkResult<DescribeAppInstanceUserOutput, DescribeAppInstanceUserOutputError>) -> Void)
    {
        guard let appInstanceUserArn = input.appInstanceUserArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component appInstanceUserArn unexpectedly nil"))))
            return
        }
        let urlPath = "/app-instance-users/\(appInstanceUserArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeAppInstanceUser")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "identity-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeAppInstanceUserInput, DescribeAppInstanceUserOutput, DescribeAppInstanceUserOutputError>(id: "describeAppInstanceUser")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeAppInstanceUserInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeAppInstanceUserInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeAppInstanceUserInput, DescribeAppInstanceUserOutput, DescribeAppInstanceUserOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the full details of a channel in an Amazon Chime <code>AppInstance</code>.</p>
    ///
    ///          <note>
    ///
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func describeChannel(input: DescribeChannelInput, completion: @escaping (SdkResult<DescribeChannelOutput, DescribeChannelOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeChannel")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeChannelInput, DescribeChannelOutput, DescribeChannelOutputError>(id: "describeChannel")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeChannelInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeChannelInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeChannelInput, DescribeChannelOutput, DescribeChannelOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the full details of a channel ban.</p>
    ///
    ///          <note>
    ///
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func describeChannelBan(input: DescribeChannelBanInput, completion: @escaping (SdkResult<DescribeChannelBanOutput, DescribeChannelBanOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        guard let memberArn = input.memberArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component memberArn unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)/bans/\(memberArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeChannelBan")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeChannelBanInput, DescribeChannelBanOutput, DescribeChannelBanOutputError>(id: "describeChannelBan")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeChannelBanInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeChannelBanInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeChannelBanInput, DescribeChannelBanOutput, DescribeChannelBanOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the full details of a user's channel membership.</p>
    ///
    ///          <note>
    ///
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func describeChannelMembership(input: DescribeChannelMembershipInput, completion: @escaping (SdkResult<DescribeChannelMembershipOutput, DescribeChannelMembershipOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        guard let memberArn = input.memberArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component memberArn unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)/memberships/\(memberArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeChannelMembership")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeChannelMembershipInput, DescribeChannelMembershipOutput, DescribeChannelMembershipOutputError>(id: "describeChannelMembership")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeChannelMembershipInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeChannelMembershipInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeChannelMembershipInput, DescribeChannelMembershipOutput, DescribeChannelMembershipOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    /// Returns the details of a channel based on the membership of the specified <code>AppInstanceUser</code>.</p>
    ///
    ///          <note>
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func describeChannelMembershipForAppInstanceUser(input: DescribeChannelMembershipForAppInstanceUserInput, completion: @escaping (SdkResult<DescribeChannelMembershipForAppInstanceUserOutput, DescribeChannelMembershipForAppInstanceUserOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeChannelMembershipForAppInstanceUser")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeChannelMembershipForAppInstanceUserInput, DescribeChannelMembershipForAppInstanceUserOutput, DescribeChannelMembershipForAppInstanceUserOutputError>(id: "describeChannelMembershipForAppInstanceUser")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeChannelMembershipForAppInstanceUserInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeChannelMembershipForAppInstanceUserInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeChannelMembershipForAppInstanceUserInput, DescribeChannelMembershipForAppInstanceUserOutput, DescribeChannelMembershipForAppInstanceUserOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the full details of a channel moderated by the specified <code>AppInstanceUser</code>.</p>
    ///
    ///          <note>
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func describeChannelModeratedByAppInstanceUser(input: DescribeChannelModeratedByAppInstanceUserInput, completion: @escaping (SdkResult<DescribeChannelModeratedByAppInstanceUserOutput, DescribeChannelModeratedByAppInstanceUserOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeChannelModeratedByAppInstanceUser")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeChannelModeratedByAppInstanceUserInput, DescribeChannelModeratedByAppInstanceUserOutput, DescribeChannelModeratedByAppInstanceUserOutputError>(id: "describeChannelModeratedByAppInstanceUser")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeChannelModeratedByAppInstanceUserInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeChannelModeratedByAppInstanceUserInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeChannelModeratedByAppInstanceUserInput, DescribeChannelModeratedByAppInstanceUserOutput, DescribeChannelModeratedByAppInstanceUserOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the full details of a single ChannelModerator.</p>
    ///
    ///          <note>
    ///
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func describeChannelModerator(input: DescribeChannelModeratorInput, completion: @escaping (SdkResult<DescribeChannelModeratorOutput, DescribeChannelModeratorOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        guard let channelModeratorArn = input.channelModeratorArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelModeratorArn unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)/moderators/\(channelModeratorArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeChannelModerator")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeChannelModeratorInput, DescribeChannelModeratorOutput, DescribeChannelModeratorOutputError>(id: "describeChannelModerator")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeChannelModeratorInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeChannelModeratorInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeChannelModeratorInput, DescribeChannelModeratorOutput, DescribeChannelModeratorOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Disassociates the primary provisioned phone number from the specified Amazon Chime
    ///             user.</p>
    public func disassociatePhoneNumberFromUser(input: DisassociatePhoneNumberFromUserInput, completion: @escaping (SdkResult<DisassociatePhoneNumberFromUserOutput, DisassociatePhoneNumberFromUserOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        guard let userId = input.userId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component userId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/users/\(userId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disassociatePhoneNumberFromUser")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisassociatePhoneNumberFromUserInput, DisassociatePhoneNumberFromUserOutput, DisassociatePhoneNumberFromUserOutputError>(id: "disassociatePhoneNumberFromUser")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisassociatePhoneNumberFromUserInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisassociatePhoneNumberFromUserInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisassociatePhoneNumberFromUserInput, DisassociatePhoneNumberFromUserOutput, DisassociatePhoneNumberFromUserOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector.</p>
    public func disassociatePhoneNumbersFromVoiceConnector(input: DisassociatePhoneNumbersFromVoiceConnectorInput, completion: @escaping (SdkResult<DisassociatePhoneNumbersFromVoiceConnectorOutput, DisassociatePhoneNumbersFromVoiceConnectorOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disassociatePhoneNumbersFromVoiceConnector")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisassociatePhoneNumbersFromVoiceConnectorInput, DisassociatePhoneNumbersFromVoiceConnectorOutput, DisassociatePhoneNumbersFromVoiceConnectorOutputError>(id: "disassociatePhoneNumbersFromVoiceConnector")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisassociatePhoneNumbersFromVoiceConnectorInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisassociatePhoneNumbersFromVoiceConnectorInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisassociatePhoneNumbersFromVoiceConnectorInput, DisassociatePhoneNumbersFromVoiceConnectorOutput, DisassociatePhoneNumbersFromVoiceConnectorOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: DisassociatePhoneNumbersFromVoiceConnectorInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector group.</p>
    public func disassociatePhoneNumbersFromVoiceConnectorGroup(input: DisassociatePhoneNumbersFromVoiceConnectorGroupInput, completion: @escaping (SdkResult<DisassociatePhoneNumbersFromVoiceConnectorGroupOutput, DisassociatePhoneNumbersFromVoiceConnectorGroupOutputError>) -> Void)
    {
        guard let voiceConnectorGroupId = input.voiceConnectorGroupId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorGroupId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connector-groups/\(voiceConnectorGroupId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disassociatePhoneNumbersFromVoiceConnectorGroup")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisassociatePhoneNumbersFromVoiceConnectorGroupInput, DisassociatePhoneNumbersFromVoiceConnectorGroupOutput, DisassociatePhoneNumbersFromVoiceConnectorGroupOutputError>(id: "disassociatePhoneNumbersFromVoiceConnectorGroup")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisassociatePhoneNumbersFromVoiceConnectorGroupInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisassociatePhoneNumbersFromVoiceConnectorGroupInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisassociatePhoneNumbersFromVoiceConnectorGroupInput, DisassociatePhoneNumbersFromVoiceConnectorGroupOutput, DisassociatePhoneNumbersFromVoiceConnectorGroupOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: DisassociatePhoneNumbersFromVoiceConnectorGroupInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Disassociates the specified sign-in delegate groups from the specified Amazon Chime account.</p>
    public func disassociateSigninDelegateGroupsFromAccount(input: DisassociateSigninDelegateGroupsFromAccountInput, completion: @escaping (SdkResult<DisassociateSigninDelegateGroupsFromAccountOutput, DisassociateSigninDelegateGroupsFromAccountOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disassociateSigninDelegateGroupsFromAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisassociateSigninDelegateGroupsFromAccountInput, DisassociateSigninDelegateGroupsFromAccountOutput, DisassociateSigninDelegateGroupsFromAccountOutputError>(id: "disassociateSigninDelegateGroupsFromAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisassociateSigninDelegateGroupsFromAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisassociateSigninDelegateGroupsFromAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisassociateSigninDelegateGroupsFromAccountInput, DisassociateSigninDelegateGroupsFromAccountOutput, DisassociateSigninDelegateGroupsFromAccountOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: DisassociateSigninDelegateGroupsFromAccountInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves details for the specified Amazon Chime account, such as account type and supported
    ///             licenses.</p>
    public func getAccount(input: GetAccountInput, completion: @escaping (SdkResult<GetAccountOutput, GetAccountOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetAccountInput, GetAccountOutput, GetAccountOutputError>(id: "getAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetAccountInput, GetAccountOutput, GetAccountOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves account settings for the specified Amazon Chime account ID, such as remote control
    ///             and dialout settings. For more information about these settings, see <a href="https://docs.aws.amazon.com/chime/latest/ag/policies.html">Use the Policies
    ///                 Page</a> in the <i>Amazon Chime Administration Guide</i>.</p>
    public func getAccountSettings(input: GetAccountSettingsInput, completion: @escaping (SdkResult<GetAccountSettingsOutput, GetAccountSettingsOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/settings"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getAccountSettings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetAccountSettingsInput, GetAccountSettingsOutput, GetAccountSettingsOutputError>(id: "getAccountSettings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetAccountSettingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetAccountSettingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetAccountSettingsInput, GetAccountSettingsOutput, GetAccountSettingsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets the retention settings for an <code>AppInstance</code>.</p>
    public func getAppInstanceRetentionSettings(input: GetAppInstanceRetentionSettingsInput, completion: @escaping (SdkResult<GetAppInstanceRetentionSettingsOutput, GetAppInstanceRetentionSettingsOutputError>) -> Void)
    {
        guard let appInstanceArn = input.appInstanceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component appInstanceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/app-instances/\(appInstanceArn)/retention-settings"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getAppInstanceRetentionSettings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "identity-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetAppInstanceRetentionSettingsInput, GetAppInstanceRetentionSettingsOutput, GetAppInstanceRetentionSettingsOutputError>(id: "getAppInstanceRetentionSettings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetAppInstanceRetentionSettingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetAppInstanceRetentionSettingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetAppInstanceRetentionSettingsInput, GetAppInstanceRetentionSettingsOutput, GetAppInstanceRetentionSettingsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets the streaming settings for an <code>AppInstance</code>.</p>
    public func getAppInstanceStreamingConfigurations(input: GetAppInstanceStreamingConfigurationsInput, completion: @escaping (SdkResult<GetAppInstanceStreamingConfigurationsOutput, GetAppInstanceStreamingConfigurationsOutputError>) -> Void)
    {
        guard let appInstanceArn = input.appInstanceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component appInstanceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/app-instances/\(appInstanceArn)/streaming-configurations"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getAppInstanceStreamingConfigurations")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetAppInstanceStreamingConfigurationsInput, GetAppInstanceStreamingConfigurationsOutput, GetAppInstanceStreamingConfigurationsOutputError>(id: "getAppInstanceStreamingConfigurations")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetAppInstanceStreamingConfigurationsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetAppInstanceStreamingConfigurationsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetAppInstanceStreamingConfigurationsInput, GetAppInstanceStreamingConfigurationsOutput, GetAppInstanceStreamingConfigurationsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    /// Gets the Amazon Chime SDK attendee details for a specified meeting ID and attendee ID. For more information about the Amazon Chime SDK, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a>
    /// in the
    /// <i>Amazon Chime Developer Guide</i>
    /// .
    /// </p>
    public func getAttendee(input: GetAttendeeInput, completion: @escaping (SdkResult<GetAttendeeOutput, GetAttendeeOutputError>) -> Void)
    {
        guard let meetingId = input.meetingId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component meetingId unexpectedly nil"))))
            return
        }
        guard let attendeeId = input.attendeeId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component attendeeId unexpectedly nil"))))
            return
        }
        let urlPath = "/meetings/\(meetingId)/attendees/\(attendeeId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getAttendee")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetAttendeeInput, GetAttendeeOutput, GetAttendeeOutputError>(id: "getAttendee")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetAttendeeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetAttendeeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetAttendeeInput, GetAttendeeOutput, GetAttendeeOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves details for the specified bot, such as bot email address, bot type, status, and display name.</p>
    public func getBot(input: GetBotInput, completion: @escaping (SdkResult<GetBotOutput, GetBotOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        guard let botId = input.botId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component botId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/bots/\(botId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getBot")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetBotInput, GetBotOutput, GetBotOutputError>(id: "getBot")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetBotInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetBotInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetBotInput, GetBotOutput, GetBotOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets the full details of a channel message.</p>
    ///
    ///          <note>
    ///             <p>The x-amz-chime-bearer request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the
    ///         value in the header.</p>
    ///          </note>
    public func getChannelMessage(input: GetChannelMessageInput, completion: @escaping (SdkResult<GetChannelMessageOutput, GetChannelMessageOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        guard let messageId = input.messageId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component messageId unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)/messages/\(messageId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getChannelMessage")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetChannelMessageInput, GetChannelMessageOutput, GetChannelMessageOutputError>(id: "getChannelMessage")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetChannelMessageInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetChannelMessageInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetChannelMessageInput, GetChannelMessageOutput, GetChannelMessageOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets details for an events configuration that allows a bot to receive outgoing events, such as an HTTPS endpoint or Lambda function ARN.</p>
    public func getEventsConfiguration(input: GetEventsConfigurationInput, completion: @escaping (SdkResult<GetEventsConfigurationOutput, GetEventsConfigurationOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        guard let botId = input.botId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component botId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/bots/\(botId)/events-configuration"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getEventsConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetEventsConfigurationInput, GetEventsConfigurationOutput, GetEventsConfigurationOutputError>(id: "getEventsConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetEventsConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetEventsConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetEventsConfigurationInput, GetEventsConfigurationOutput, GetEventsConfigurationOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves global settings for the administrator's AWS account, such as Amazon Chime Business
    ///             Calling and Amazon Chime Voice Connector settings.</p>
    public func getGlobalSettings(input: GetGlobalSettingsInput, completion: @escaping (SdkResult<GetGlobalSettingsOutput, GetGlobalSettingsOutputError>) -> Void)
    {
        let urlPath = "/settings"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getGlobalSettings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetGlobalSettingsInput, GetGlobalSettingsOutput, GetGlobalSettingsOutputError>(id: "getGlobalSettings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetGlobalSettingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetGlobalSettingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetGlobalSettingsInput, GetGlobalSettingsOutput, GetGlobalSettingsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    /// Gets the Amazon Chime SDK meeting details for the specified meeting ID. For more information about the Amazon Chime SDK, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a>
    /// in the
    /// <i>Amazon Chime Developer Guide</i>
    /// .
    /// </p>
    public func getMeeting(input: GetMeetingInput, completion: @escaping (SdkResult<GetMeetingOutput, GetMeetingOutputError>) -> Void)
    {
        guard let meetingId = input.meetingId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component meetingId unexpectedly nil"))))
            return
        }
        let urlPath = "/meetings/\(meetingId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getMeeting")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetMeetingInput, GetMeetingOutput, GetMeetingOutputError>(id: "getMeeting")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetMeetingInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetMeetingInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetMeetingInput, GetMeetingOutput, GetMeetingOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>The details of the endpoint for the messaging session.</p>
    public func getMessagingSessionEndpoint(input: GetMessagingSessionEndpointInput, completion: @escaping (SdkResult<GetMessagingSessionEndpointOutput, GetMessagingSessionEndpointOutputError>) -> Void)
    {
        let urlPath = "/endpoints/messaging-session"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getMessagingSessionEndpoint")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetMessagingSessionEndpointInput, GetMessagingSessionEndpointOutput, GetMessagingSessionEndpointOutputError>(id: "getMessagingSessionEndpoint")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetMessagingSessionEndpointInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetMessagingSessionEndpointInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetMessagingSessionEndpointInput, GetMessagingSessionEndpointOutput, GetMessagingSessionEndpointOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves details for the specified phone number ID, such as associations, capabilities, and product type.</p>
    public func getPhoneNumber(input: GetPhoneNumberInput, completion: @escaping (SdkResult<GetPhoneNumberOutput, GetPhoneNumberOutputError>) -> Void)
    {
        guard let phoneNumberId = input.phoneNumberId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component phoneNumberId unexpectedly nil"))))
            return
        }
        let urlPath = "/phone-numbers/\(phoneNumberId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getPhoneNumber")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetPhoneNumberInput, GetPhoneNumberOutput, GetPhoneNumberOutputError>(id: "getPhoneNumber")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetPhoneNumberInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetPhoneNumberInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetPhoneNumberInput, GetPhoneNumberOutput, GetPhoneNumberOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves details for the specified phone number order, such as the order creation timestamp, phone
    ///             numbers in E.164 format, product type, and order status.</p>
    public func getPhoneNumberOrder(input: GetPhoneNumberOrderInput, completion: @escaping (SdkResult<GetPhoneNumberOrderOutput, GetPhoneNumberOrderOutputError>) -> Void)
    {
        guard let phoneNumberOrderId = input.phoneNumberOrderId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component phoneNumberOrderId unexpectedly nil"))))
            return
        }
        let urlPath = "/phone-number-orders/\(phoneNumberOrderId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getPhoneNumberOrder")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetPhoneNumberOrderInput, GetPhoneNumberOrderOutput, GetPhoneNumberOrderOutputError>(id: "getPhoneNumberOrder")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetPhoneNumberOrderInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetPhoneNumberOrderInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetPhoneNumberOrderInput, GetPhoneNumberOrderOutput, GetPhoneNumberOrderOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves the phone number settings for the administrator's AWS account, such as the default outbound calling name.</p>
    public func getPhoneNumberSettings(input: GetPhoneNumberSettingsInput, completion: @escaping (SdkResult<GetPhoneNumberSettingsOutput, GetPhoneNumberSettingsOutputError>) -> Void)
    {
        let urlPath = "/settings/phone-number"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getPhoneNumberSettings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetPhoneNumberSettingsInput, GetPhoneNumberSettingsOutput, GetPhoneNumberSettingsOutputError>(id: "getPhoneNumberSettings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetPhoneNumberSettingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetPhoneNumberSettingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetPhoneNumberSettingsInput, GetPhoneNumberSettingsOutput, GetPhoneNumberSettingsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets the specified proxy session details for the specified Amazon Chime Voice Connector.</p>
    public func getProxySession(input: GetProxySessionInput, completion: @escaping (SdkResult<GetProxySessionOutput, GetProxySessionOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        guard let proxySessionId = input.proxySessionId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component proxySessionId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/proxy-sessions/\(proxySessionId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getProxySession")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetProxySessionInput, GetProxySessionOutput, GetProxySessionOutputError>(id: "getProxySession")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetProxySessionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetProxySessionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetProxySessionInput, GetProxySessionOutput, GetProxySessionOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    /// Gets the retention settings for the specified Amazon Chime Enterprise account. For more information about retention settings, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/ag/chat-retention.html">Managing Chat Retention Policies</a>
    /// in the
    /// <i>Amazon Chime Administration Guide</i>
    /// .
    /// </p>
    public func getRetentionSettings(input: GetRetentionSettingsInput, completion: @escaping (SdkResult<GetRetentionSettingsOutput, GetRetentionSettingsOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/retention-settings"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getRetentionSettings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetRetentionSettingsInput, GetRetentionSettingsOutput, GetRetentionSettingsOutputError>(id: "getRetentionSettings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetRetentionSettingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetRetentionSettingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetRetentionSettingsInput, GetRetentionSettingsOutput, GetRetentionSettingsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves room details, such as the room name, for a room in an Amazon Chime Enterprise account.</p>
    public func getRoom(input: GetRoomInput, completion: @escaping (SdkResult<GetRoomOutput, GetRoomOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        guard let roomId = input.roomId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component roomId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/rooms/\(roomId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getRoom")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetRoomInput, GetRoomOutput, GetRoomOutputError>(id: "getRoom")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetRoomInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetRoomInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetRoomInput, GetRoomOutput, GetRoomOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves the information for a SIP media application, including name, AWS Region, and endpoints.</p>
    public func getSipMediaApplication(input: GetSipMediaApplicationInput, completion: @escaping (SdkResult<GetSipMediaApplicationOutput, GetSipMediaApplicationOutputError>) -> Void)
    {
        guard let sipMediaApplicationId = input.sipMediaApplicationId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component sipMediaApplicationId unexpectedly nil"))))
            return
        }
        let urlPath = "/sip-media-applications/\(sipMediaApplicationId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getSipMediaApplication")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetSipMediaApplicationInput, GetSipMediaApplicationOutput, GetSipMediaApplicationOutputError>(id: "getSipMediaApplication")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetSipMediaApplicationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetSipMediaApplicationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetSipMediaApplicationInput, GetSipMediaApplicationOutput, GetSipMediaApplicationOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the logging configuration for the specified SIP media application.</p>
    public func getSipMediaApplicationLoggingConfiguration(input: GetSipMediaApplicationLoggingConfigurationInput, completion: @escaping (SdkResult<GetSipMediaApplicationLoggingConfigurationOutput, GetSipMediaApplicationLoggingConfigurationOutputError>) -> Void)
    {
        guard let sipMediaApplicationId = input.sipMediaApplicationId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component sipMediaApplicationId unexpectedly nil"))))
            return
        }
        let urlPath = "/sip-media-applications/\(sipMediaApplicationId)/logging-configuration"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getSipMediaApplicationLoggingConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetSipMediaApplicationLoggingConfigurationInput, GetSipMediaApplicationLoggingConfigurationOutput, GetSipMediaApplicationLoggingConfigurationOutputError>(id: "getSipMediaApplicationLoggingConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetSipMediaApplicationLoggingConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetSipMediaApplicationLoggingConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetSipMediaApplicationLoggingConfigurationInput, GetSipMediaApplicationLoggingConfigurationOutput, GetSipMediaApplicationLoggingConfigurationOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves the details of a SIP rule, such as the rule ID, name, triggers, and target endpoints.</p>
    public func getSipRule(input: GetSipRuleInput, completion: @escaping (SdkResult<GetSipRuleOutput, GetSipRuleOutputError>) -> Void)
    {
        guard let sipRuleId = input.sipRuleId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component sipRuleId unexpectedly nil"))))
            return
        }
        let urlPath = "/sip-rules/\(sipRuleId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getSipRule")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetSipRuleInput, GetSipRuleOutput, GetSipRuleOutputError>(id: "getSipRule")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetSipRuleInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetSipRuleInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetSipRuleInput, GetSipRuleOutput, GetSipRuleOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves details for the specified user ID, such as primary email address, license type,and personal meeting PIN.</p>
    ///
    ///          <p>
    /// To retrieve user details with an email address instead of a user ID, use the
    /// <a>ListUsers</a>
    /// action, and then filter by email address.
    /// </p>
    public func getUser(input: GetUserInput, completion: @escaping (SdkResult<GetUserOutput, GetUserOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        guard let userId = input.userId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component userId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/users/\(userId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getUser")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetUserInput, GetUserOutput, GetUserOutputError>(id: "getUser")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetUserInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetUserInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetUserInput, GetUserOutput, GetUserOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves settings for the specified user ID, such as any associated phone number settings.</p>
    public func getUserSettings(input: GetUserSettingsInput, completion: @escaping (SdkResult<GetUserSettingsOutput, GetUserSettingsOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        guard let userId = input.userId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component userId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/users/\(userId)/settings"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getUserSettings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetUserSettingsInput, GetUserSettingsOutput, GetUserSettingsOutputError>(id: "getUserSettings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetUserSettingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetUserSettingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetUserSettingsInput, GetUserSettingsOutput, GetUserSettingsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves details for the specified Amazon Chime Voice Connector, such as timestamps,name, outbound host, and encryption requirements.</p>
    public func getVoiceConnector(input: GetVoiceConnectorInput, completion: @escaping (SdkResult<GetVoiceConnectorOutput, GetVoiceConnectorOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getVoiceConnector")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetVoiceConnectorInput, GetVoiceConnectorOutput, GetVoiceConnectorOutputError>(id: "getVoiceConnector")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetVoiceConnectorInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetVoiceConnectorInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetVoiceConnectorInput, GetVoiceConnectorOutput, GetVoiceConnectorOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets the emergency calling configuration details for the specified Amazon Chime Voice Connector.</p>
    public func getVoiceConnectorEmergencyCallingConfiguration(input: GetVoiceConnectorEmergencyCallingConfigurationInput, completion: @escaping (SdkResult<GetVoiceConnectorEmergencyCallingConfigurationOutput, GetVoiceConnectorEmergencyCallingConfigurationOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/emergency-calling-configuration"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getVoiceConnectorEmergencyCallingConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetVoiceConnectorEmergencyCallingConfigurationInput, GetVoiceConnectorEmergencyCallingConfigurationOutput, GetVoiceConnectorEmergencyCallingConfigurationOutputError>(id: "getVoiceConnectorEmergencyCallingConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetVoiceConnectorEmergencyCallingConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetVoiceConnectorEmergencyCallingConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetVoiceConnectorEmergencyCallingConfigurationInput, GetVoiceConnectorEmergencyCallingConfigurationOutput, GetVoiceConnectorEmergencyCallingConfigurationOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    /// Retrieves details for the specified Amazon Chime Voice Connector group, such as timestamps,name, and associated
    /// <code>VoiceConnectorItems</code>
    /// .
    /// </p>
    public func getVoiceConnectorGroup(input: GetVoiceConnectorGroupInput, completion: @escaping (SdkResult<GetVoiceConnectorGroupOutput, GetVoiceConnectorGroupOutputError>) -> Void)
    {
        guard let voiceConnectorGroupId = input.voiceConnectorGroupId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorGroupId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connector-groups/\(voiceConnectorGroupId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getVoiceConnectorGroup")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetVoiceConnectorGroupInput, GetVoiceConnectorGroupOutput, GetVoiceConnectorGroupOutputError>(id: "getVoiceConnectorGroup")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetVoiceConnectorGroupInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetVoiceConnectorGroupInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetVoiceConnectorGroupInput, GetVoiceConnectorGroupOutput, GetVoiceConnectorGroupOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves the logging configuration details for the specified Amazon Chime Voice Connector. Shows whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.</p>
    public func getVoiceConnectorLoggingConfiguration(input: GetVoiceConnectorLoggingConfigurationInput, completion: @escaping (SdkResult<GetVoiceConnectorLoggingConfigurationOutput, GetVoiceConnectorLoggingConfigurationOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/logging-configuration"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getVoiceConnectorLoggingConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetVoiceConnectorLoggingConfigurationInput, GetVoiceConnectorLoggingConfigurationOutput, GetVoiceConnectorLoggingConfigurationOutputError>(id: "getVoiceConnectorLoggingConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetVoiceConnectorLoggingConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetVoiceConnectorLoggingConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetVoiceConnectorLoggingConfigurationInput, GetVoiceConnectorLoggingConfigurationOutput, GetVoiceConnectorLoggingConfigurationOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves origination setting details for the specified Amazon Chime Voice Connector.</p>
    public func getVoiceConnectorOrigination(input: GetVoiceConnectorOriginationInput, completion: @escaping (SdkResult<GetVoiceConnectorOriginationOutput, GetVoiceConnectorOriginationOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/origination"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getVoiceConnectorOrigination")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetVoiceConnectorOriginationInput, GetVoiceConnectorOriginationOutput, GetVoiceConnectorOriginationOutputError>(id: "getVoiceConnectorOrigination")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetVoiceConnectorOriginationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetVoiceConnectorOriginationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetVoiceConnectorOriginationInput, GetVoiceConnectorOriginationOutput, GetVoiceConnectorOriginationOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets the proxy configuration details for the specified Amazon Chime Voice Connector.</p>
    public func getVoiceConnectorProxy(input: GetVoiceConnectorProxyInput, completion: @escaping (SdkResult<GetVoiceConnectorProxyOutput, GetVoiceConnectorProxyOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/programmable-numbers/proxy"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getVoiceConnectorProxy")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetVoiceConnectorProxyInput, GetVoiceConnectorProxyOutput, GetVoiceConnectorProxyOutputError>(id: "getVoiceConnectorProxy")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetVoiceConnectorProxyInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetVoiceConnectorProxyInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetVoiceConnectorProxyInput, GetVoiceConnectorProxyOutput, GetVoiceConnectorProxyOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves the streaming configuration details for the specified Amazon Chime Voice Connector.
    ///             Shows whether media streaming is enabled for sending to Amazon Kinesis. It also shows
    ///             the retention period, in hours, for the Amazon Kinesis data.</p>
    public func getVoiceConnectorStreamingConfiguration(input: GetVoiceConnectorStreamingConfigurationInput, completion: @escaping (SdkResult<GetVoiceConnectorStreamingConfigurationOutput, GetVoiceConnectorStreamingConfigurationOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/streaming-configuration"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getVoiceConnectorStreamingConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetVoiceConnectorStreamingConfigurationInput, GetVoiceConnectorStreamingConfigurationOutput, GetVoiceConnectorStreamingConfigurationOutputError>(id: "getVoiceConnectorStreamingConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetVoiceConnectorStreamingConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetVoiceConnectorStreamingConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetVoiceConnectorStreamingConfigurationInput, GetVoiceConnectorStreamingConfigurationOutput, GetVoiceConnectorStreamingConfigurationOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves termination setting details for the specified Amazon Chime Voice Connector.</p>
    public func getVoiceConnectorTermination(input: GetVoiceConnectorTerminationInput, completion: @escaping (SdkResult<GetVoiceConnectorTerminationOutput, GetVoiceConnectorTerminationOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/termination"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getVoiceConnectorTermination")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetVoiceConnectorTerminationInput, GetVoiceConnectorTerminationOutput, GetVoiceConnectorTerminationOutputError>(id: "getVoiceConnectorTermination")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetVoiceConnectorTerminationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetVoiceConnectorTerminationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetVoiceConnectorTerminationInput, GetVoiceConnectorTerminationOutput, GetVoiceConnectorTerminationOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Retrieves information about the last time a SIP <code>OPTIONS</code> ping was received from
    ///             your SIP infrastructure for the specified Amazon Chime Voice Connector.</p>
    public func getVoiceConnectorTerminationHealth(input: GetVoiceConnectorTerminationHealthInput, completion: @escaping (SdkResult<GetVoiceConnectorTerminationHealthOutput, GetVoiceConnectorTerminationHealthOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/termination/health"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getVoiceConnectorTerminationHealth")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetVoiceConnectorTerminationHealthInput, GetVoiceConnectorTerminationHealthOutput, GetVoiceConnectorTerminationHealthOutputError>(id: "getVoiceConnectorTerminationHealth")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetVoiceConnectorTerminationHealthInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetVoiceConnectorTerminationHealthInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetVoiceConnectorTerminationHealthInput, GetVoiceConnectorTerminationHealthOutput, GetVoiceConnectorTerminationHealthOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Sends email to a maximum of 50 users, inviting them to the specified Amazon Chime
    ///                 <code>Team</code> account. Only <code>Team</code> account types are currently
    ///             supported for this action.</p>
    public func inviteUsers(input: InviteUsersInput, completion: @escaping (SdkResult<InviteUsersOutput, InviteUsersOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/users"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "inviteUsers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<InviteUsersInput, InviteUsersOutput, InviteUsersOutputError>(id: "inviteUsers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: InviteUsersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: InviteUsersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<InviteUsersInput, InviteUsersOutput, InviteUsersOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: InviteUsersInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the Amazon Chime accounts under the administrator's AWS account. You can filter accounts
    ///             by account name prefix. To find out which Amazon Chime account a user belongs to, you can
    ///             filter by the user's email address, which returns one account result.</p>
    public func listAccounts(input: ListAccountsInput, completion: @escaping (SdkResult<ListAccountsOutput, ListAccountsOutputError>) -> Void)
    {
        let urlPath = "/accounts"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listAccounts")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListAccountsInput, ListAccountsOutput, ListAccountsOutputError>(id: "listAccounts")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListAccountsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListAccountsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListAccountsInput, ListAccountsOutput, ListAccountsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of the administrators in the <code>AppInstance</code>.</p>
    public func listAppInstanceAdmins(input: ListAppInstanceAdminsInput, completion: @escaping (SdkResult<ListAppInstanceAdminsOutput, ListAppInstanceAdminsOutputError>) -> Void)
    {
        guard let appInstanceArn = input.appInstanceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component appInstanceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/app-instances/\(appInstanceArn)/admins"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listAppInstanceAdmins")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "identity-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListAppInstanceAdminsInput, ListAppInstanceAdminsOutput, ListAppInstanceAdminsOutputError>(id: "listAppInstanceAdmins")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListAppInstanceAdminsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListAppInstanceAdminsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListAppInstanceAdminsInput, ListAppInstanceAdminsOutput, ListAppInstanceAdminsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    /// List all
    /// <code>AppInstanceUsers</code>
    /// created under a single <code>AppInstance</code>.
    /// </p>
    public func listAppInstanceUsers(input: ListAppInstanceUsersInput, completion: @escaping (SdkResult<ListAppInstanceUsersOutput, ListAppInstanceUsersOutputError>) -> Void)
    {
        let urlPath = "/app-instance-users"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listAppInstanceUsers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "identity-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListAppInstanceUsersInput, ListAppInstanceUsersOutput, ListAppInstanceUsersOutputError>(id: "listAppInstanceUsers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListAppInstanceUsersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListAppInstanceUsersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListAppInstanceUsersInput, ListAppInstanceUsersOutput, ListAppInstanceUsersOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists all Amazon Chime <code>AppInstance</code>s created under a single AWS account.</p>
    public func listAppInstances(input: ListAppInstancesInput, completion: @escaping (SdkResult<ListAppInstancesOutput, ListAppInstancesOutputError>) -> Void)
    {
        let urlPath = "/app-instances"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listAppInstances")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "identity-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListAppInstancesInput, ListAppInstancesOutput, ListAppInstancesOutputError>(id: "listAppInstances")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListAppInstancesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListAppInstancesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListAppInstancesInput, ListAppInstancesOutput, ListAppInstancesOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the tags applied to an Amazon Chime SDK attendee resource.</p>
    public func listAttendeeTags(input: ListAttendeeTagsInput, completion: @escaping (SdkResult<ListAttendeeTagsOutput, ListAttendeeTagsOutputError>) -> Void)
    {
        guard let meetingId = input.meetingId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component meetingId unexpectedly nil"))))
            return
        }
        guard let attendeeId = input.attendeeId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component attendeeId unexpectedly nil"))))
            return
        }
        let urlPath = "/meetings/\(meetingId)/attendees/\(attendeeId)/tags"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listAttendeeTags")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListAttendeeTagsInput, ListAttendeeTagsOutput, ListAttendeeTagsOutputError>(id: "listAttendeeTags")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListAttendeeTagsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListAttendeeTagsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListAttendeeTagsInput, ListAttendeeTagsOutput, ListAttendeeTagsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    /// Lists the attendees for the specified Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a>
    /// in the
    /// <i>Amazon Chime Developer Guide</i>
    /// .
    /// </p>
    public func listAttendees(input: ListAttendeesInput, completion: @escaping (SdkResult<ListAttendeesOutput, ListAttendeesOutputError>) -> Void)
    {
        guard let meetingId = input.meetingId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component meetingId unexpectedly nil"))))
            return
        }
        let urlPath = "/meetings/\(meetingId)/attendees"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listAttendees")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListAttendeesInput, ListAttendeesOutput, ListAttendeesOutputError>(id: "listAttendees")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListAttendeesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListAttendeesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListAttendeesInput, ListAttendeesOutput, ListAttendeesOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the bots associated with the administrator's Amazon Chime Enterprise account ID.</p>
    public func listBots(input: ListBotsInput, completion: @escaping (SdkResult<ListBotsOutput, ListBotsOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/bots"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listBots")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListBotsInput, ListBotsOutput, ListBotsOutputError>(id: "listBots")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListBotsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListBotsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListBotsInput, ListBotsOutput, ListBotsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists all the users banned from a particular channel.</p>
    ///
    ///          <note>
    ///
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func listChannelBans(input: ListChannelBansInput, completion: @escaping (SdkResult<ListChannelBansOutput, ListChannelBansOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)/bans"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listChannelBans")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListChannelBansInput, ListChannelBansOutput, ListChannelBansOutputError>(id: "listChannelBans")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListChannelBansInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListChannelBansInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListChannelBansInput, ListChannelBansOutput, ListChannelBansOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists all channel memberships in a channel.</p>
    ///
    ///          <note>
    ///
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func listChannelMemberships(input: ListChannelMembershipsInput, completion: @escaping (SdkResult<ListChannelMembershipsOutput, ListChannelMembershipsOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)/memberships"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listChannelMemberships")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListChannelMembershipsInput, ListChannelMembershipsOutput, ListChannelMembershipsOutputError>(id: "listChannelMemberships")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListChannelMembershipsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListChannelMembershipsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListChannelMembershipsInput, ListChannelMembershipsOutput, ListChannelMembershipsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p> Lists all channels that a particular <code>AppInstanceUser</code> is a part of. Only an
    ///                 <code>AppInstanceAdmin</code> can call the API with a user ARN that is not their
    ///             own. </p>
    ///
    ///          <note>
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func listChannelMembershipsForAppInstanceUser(input: ListChannelMembershipsForAppInstanceUserInput, completion: @escaping (SdkResult<ListChannelMembershipsForAppInstanceUserOutput, ListChannelMembershipsForAppInstanceUserOutputError>) -> Void)
    {
        let urlPath = "/channels"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listChannelMembershipsForAppInstanceUser")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListChannelMembershipsForAppInstanceUserInput, ListChannelMembershipsForAppInstanceUserOutput, ListChannelMembershipsForAppInstanceUserOutputError>(id: "listChannelMembershipsForAppInstanceUser")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListChannelMembershipsForAppInstanceUserInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListChannelMembershipsForAppInstanceUserInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListChannelMembershipsForAppInstanceUserInput, ListChannelMembershipsForAppInstanceUserOutput, ListChannelMembershipsForAppInstanceUserOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>List all the messages in a channel. Returns a paginated list of <code>ChannelMessages</code>.
    ///             By default, sorted by creation timestamp in descending
    ///             order.</p>
    ///
    ///          <note>
    ///             <p>Redacted messages appear in the results as empty, since they are only redacted, not deleted.
    ///                 Deleted messages do not appear in the results. This action always returns the latest
    ///                 version of an edited message.</p>
    ///             <p>Also, the x-amz-chime-bearer request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the
    ///         value in the header.</p>
    ///          </note>
    public func listChannelMessages(input: ListChannelMessagesInput, completion: @escaping (SdkResult<ListChannelMessagesOutput, ListChannelMessagesOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)/messages"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listChannelMessages")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListChannelMessagesInput, ListChannelMessagesOutput, ListChannelMessagesOutputError>(id: "listChannelMessages")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListChannelMessagesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListChannelMessagesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListChannelMessagesInput, ListChannelMessagesOutput, ListChannelMessagesOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists all the moderators for a channel.</p>
    ///
    ///          <note>
    ///
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func listChannelModerators(input: ListChannelModeratorsInput, completion: @escaping (SdkResult<ListChannelModeratorsOutput, ListChannelModeratorsOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)/moderators"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listChannelModerators")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListChannelModeratorsInput, ListChannelModeratorsOutput, ListChannelModeratorsOutputError>(id: "listChannelModerators")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListChannelModeratorsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListChannelModeratorsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListChannelModeratorsInput, ListChannelModeratorsOutput, ListChannelModeratorsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists all Channels created under a single Chime App as a paginated list. You can specify filters to narrow results.</p>
    ///
    ///          <p class="title">
    ///             <b>Functionality & restrictions</b>
    ///          </p>
    ///          <ul>
    ///             <li>
    ///                <p>Use privacy = <code>PUBLIC</code> to retrieve all public channels in the account.</p>
    ///             </li>
    ///             <li>
    ///                <p>Only an <code>AppInstanceAdmin</code> can set privacy = <code>PRIVATE</code> to list the
    ///                     private channels in an account.</p>
    ///             </li>
    ///          </ul>
    ///
    ///          <note>
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func listChannels(input: ListChannelsInput, completion: @escaping (SdkResult<ListChannelsOutput, ListChannelsOutputError>) -> Void)
    {
        let urlPath = "/channels"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listChannels")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListChannelsInput, ListChannelsOutput, ListChannelsOutputError>(id: "listChannels")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListChannelsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListChannelsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListChannelsInput, ListChannelsOutput, ListChannelsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>A list of the channels moderated by an <code>AppInstanceUser</code>.</p>
    ///
    ///          <note>
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func listChannelsModeratedByAppInstanceUser(input: ListChannelsModeratedByAppInstanceUserInput, completion: @escaping (SdkResult<ListChannelsModeratedByAppInstanceUserOutput, ListChannelsModeratedByAppInstanceUserOutputError>) -> Void)
    {
        let urlPath = "/channels"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listChannelsModeratedByAppInstanceUser")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListChannelsModeratedByAppInstanceUserInput, ListChannelsModeratedByAppInstanceUserOutput, ListChannelsModeratedByAppInstanceUserOutputError>(id: "listChannelsModeratedByAppInstanceUser")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListChannelsModeratedByAppInstanceUserInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListChannelsModeratedByAppInstanceUserInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListChannelsModeratedByAppInstanceUserInput, ListChannelsModeratedByAppInstanceUserOutput, ListChannelsModeratedByAppInstanceUserOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the tags applied to an Amazon Chime SDK meeting resource.</p>
    public func listMeetingTags(input: ListMeetingTagsInput, completion: @escaping (SdkResult<ListMeetingTagsOutput, ListMeetingTagsOutputError>) -> Void)
    {
        guard let meetingId = input.meetingId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component meetingId unexpectedly nil"))))
            return
        }
        let urlPath = "/meetings/\(meetingId)/tags"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listMeetingTags")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListMeetingTagsInput, ListMeetingTagsOutput, ListMeetingTagsOutputError>(id: "listMeetingTags")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListMeetingTagsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListMeetingTagsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListMeetingTagsInput, ListMeetingTagsOutput, ListMeetingTagsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    /// Lists up to 100 active Amazon Chime SDK meetings. For more information about the Amazon Chime SDK, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a>
    /// in the
    /// <i>Amazon Chime Developer Guide</i>
    /// .
    /// </p>
    public func listMeetings(input: ListMeetingsInput, completion: @escaping (SdkResult<ListMeetingsOutput, ListMeetingsOutputError>) -> Void)
    {
        let urlPath = "/meetings"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listMeetings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListMeetingsInput, ListMeetingsOutput, ListMeetingsOutputError>(id: "listMeetings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListMeetingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListMeetingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListMeetingsInput, ListMeetingsOutput, ListMeetingsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the phone number orders for the administrator's Amazon Chime account.</p>
    public func listPhoneNumberOrders(input: ListPhoneNumberOrdersInput, completion: @escaping (SdkResult<ListPhoneNumberOrdersOutput, ListPhoneNumberOrdersOutputError>) -> Void)
    {
        let urlPath = "/phone-number-orders"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listPhoneNumberOrders")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListPhoneNumberOrdersInput, ListPhoneNumberOrdersOutput, ListPhoneNumberOrdersOutputError>(id: "listPhoneNumberOrders")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListPhoneNumberOrdersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListPhoneNumberOrdersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListPhoneNumberOrdersInput, ListPhoneNumberOrdersOutput, ListPhoneNumberOrdersOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the phone numbers for the specified Amazon Chime account, Amazon Chime user, Amazon Chime Voice Connector, or Amazon Chime Voice Connector group.</p>
    public func listPhoneNumbers(input: ListPhoneNumbersInput, completion: @escaping (SdkResult<ListPhoneNumbersOutput, ListPhoneNumbersOutputError>) -> Void)
    {
        let urlPath = "/phone-numbers"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listPhoneNumbers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListPhoneNumbersInput, ListPhoneNumbersOutput, ListPhoneNumbersOutputError>(id: "listPhoneNumbers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListPhoneNumbersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListPhoneNumbersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListPhoneNumbersInput, ListPhoneNumbersOutput, ListPhoneNumbersOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the proxy sessions for the specified Amazon Chime Voice Connector.</p>
    public func listProxySessions(input: ListProxySessionsInput, completion: @escaping (SdkResult<ListProxySessionsOutput, ListProxySessionsOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/proxy-sessions"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listProxySessions")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListProxySessionsInput, ListProxySessionsOutput, ListProxySessionsOutputError>(id: "listProxySessions")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListProxySessionsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListProxySessionsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListProxySessionsInput, ListProxySessionsOutput, ListProxySessionsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the membership details for the specified room in an Amazon Chime Enterprise account,
    ///             such as the members' IDs, email addresses, and names.</p>
    public func listRoomMemberships(input: ListRoomMembershipsInput, completion: @escaping (SdkResult<ListRoomMembershipsOutput, ListRoomMembershipsOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        guard let roomId = input.roomId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component roomId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/rooms/\(roomId)/memberships"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listRoomMemberships")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListRoomMembershipsInput, ListRoomMembershipsOutput, ListRoomMembershipsOutputError>(id: "listRoomMemberships")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListRoomMembershipsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListRoomMembershipsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListRoomMembershipsInput, ListRoomMembershipsOutput, ListRoomMembershipsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the room details for the specified Amazon Chime Enterprise account. Optionally, filter the results by a member ID (user ID or bot ID) to see a list of rooms that the member belongs to.</p>
    public func listRooms(input: ListRoomsInput, completion: @escaping (SdkResult<ListRoomsOutput, ListRoomsOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/rooms"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listRooms")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListRoomsInput, ListRoomsOutput, ListRoomsOutputError>(id: "listRooms")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListRoomsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListRoomsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListRoomsInput, ListRoomsOutput, ListRoomsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the SIP media applications under the administrator's AWS account.</p>
    public func listSipMediaApplications(input: ListSipMediaApplicationsInput, completion: @escaping (SdkResult<ListSipMediaApplicationsOutput, ListSipMediaApplicationsOutputError>) -> Void)
    {
        let urlPath = "/sip-media-applications"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listSipMediaApplications")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListSipMediaApplicationsInput, ListSipMediaApplicationsOutput, ListSipMediaApplicationsOutputError>(id: "listSipMediaApplications")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListSipMediaApplicationsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListSipMediaApplicationsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListSipMediaApplicationsInput, ListSipMediaApplicationsOutput, ListSipMediaApplicationsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the SIP rules under the administrator's AWS account.</p>
    public func listSipRules(input: ListSipRulesInput, completion: @escaping (SdkResult<ListSipRulesOutput, ListSipRulesOutputError>) -> Void)
    {
        let urlPath = "/sip-rules"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listSipRules")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListSipRulesInput, ListSipRulesOutput, ListSipRulesOutputError>(id: "listSipRules")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListSipRulesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListSipRulesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListSipRulesInput, ListSipRulesOutput, ListSipRulesOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists supported phone number countries.</p>
    public func listSupportedPhoneNumberCountries(input: ListSupportedPhoneNumberCountriesInput, completion: @escaping (SdkResult<ListSupportedPhoneNumberCountriesOutput, ListSupportedPhoneNumberCountriesOutputError>) -> Void)
    {
        let urlPath = "/phone-number-countries"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listSupportedPhoneNumberCountries")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListSupportedPhoneNumberCountriesInput, ListSupportedPhoneNumberCountriesOutput, ListSupportedPhoneNumberCountriesOutputError>(id: "listSupportedPhoneNumberCountries")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListSupportedPhoneNumberCountriesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListSupportedPhoneNumberCountriesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListSupportedPhoneNumberCountriesInput, ListSupportedPhoneNumberCountriesOutput, ListSupportedPhoneNumberCountriesOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the tags applied to an Amazon Chime SDK meeting resource.</p>
    public func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutput, ListTagsForResourceOutputError>) -> Void)
    {
        let urlPath = "/tags"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listTagsForResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListTagsForResourceInput, ListTagsForResourceOutput, ListTagsForResourceOutputError>(id: "listTagsForResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListTagsForResourceInput, ListTagsForResourceOutput, ListTagsForResourceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the users that belong to the specified Amazon Chime account. You can specify an email
    ///             address to list only the user that the email address belongs to.</p>
    public func listUsers(input: ListUsersInput, completion: @escaping (SdkResult<ListUsersOutput, ListUsersOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/users"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listUsers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListUsersInput, ListUsersOutput, ListUsersOutputError>(id: "listUsers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListUsersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListUsersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListUsersInput, ListUsersOutput, ListUsersOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the Amazon Chime Voice Connector groups for the administrator's AWS account.</p>
    public func listVoiceConnectorGroups(input: ListVoiceConnectorGroupsInput, completion: @escaping (SdkResult<ListVoiceConnectorGroupsOutput, ListVoiceConnectorGroupsOutputError>) -> Void)
    {
        let urlPath = "/voice-connector-groups"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listVoiceConnectorGroups")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListVoiceConnectorGroupsInput, ListVoiceConnectorGroupsOutput, ListVoiceConnectorGroupsOutputError>(id: "listVoiceConnectorGroups")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListVoiceConnectorGroupsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListVoiceConnectorGroupsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListVoiceConnectorGroupsInput, ListVoiceConnectorGroupsOutput, ListVoiceConnectorGroupsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the SIP credentials for the specified Amazon Chime Voice Connector.</p>
    public func listVoiceConnectorTerminationCredentials(input: ListVoiceConnectorTerminationCredentialsInput, completion: @escaping (SdkResult<ListVoiceConnectorTerminationCredentialsOutput, ListVoiceConnectorTerminationCredentialsOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/termination/credentials"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listVoiceConnectorTerminationCredentials")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListVoiceConnectorTerminationCredentialsInput, ListVoiceConnectorTerminationCredentialsOutput, ListVoiceConnectorTerminationCredentialsOutputError>(id: "listVoiceConnectorTerminationCredentials")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListVoiceConnectorTerminationCredentialsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListVoiceConnectorTerminationCredentialsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListVoiceConnectorTerminationCredentialsInput, ListVoiceConnectorTerminationCredentialsOutput, ListVoiceConnectorTerminationCredentialsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the Amazon Chime Voice Connectors for the administrator's AWS account.</p>
    public func listVoiceConnectors(input: ListVoiceConnectorsInput, completion: @escaping (SdkResult<ListVoiceConnectorsOutput, ListVoiceConnectorsOutputError>) -> Void)
    {
        let urlPath = "/voice-connectors"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listVoiceConnectors")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListVoiceConnectorsInput, ListVoiceConnectorsOutput, ListVoiceConnectorsOutputError>(id: "listVoiceConnectors")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListVoiceConnectorsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListVoiceConnectorsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListVoiceConnectorsInput, ListVoiceConnectorsOutput, ListVoiceConnectorsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Logs out the specified user from all of the devices they are currently logged into.</p>
    public func logoutUser(input: LogoutUserInput, completion: @escaping (SdkResult<LogoutUserOutput, LogoutUserOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        guard let userId = input.userId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component userId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/users/\(userId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "logoutUser")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<LogoutUserInput, LogoutUserOutput, LogoutUserOutputError>(id: "logoutUser")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: LogoutUserInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: LogoutUserInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<LogoutUserInput, LogoutUserOutput, LogoutUserOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Sets the amount of time in days that a given <code>AppInstance</code> retains data.</p>
    public func putAppInstanceRetentionSettings(input: PutAppInstanceRetentionSettingsInput, completion: @escaping (SdkResult<PutAppInstanceRetentionSettingsOutput, PutAppInstanceRetentionSettingsOutputError>) -> Void)
    {
        guard let appInstanceArn = input.appInstanceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component appInstanceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/app-instances/\(appInstanceArn)/retention-settings"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putAppInstanceRetentionSettings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "identity-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PutAppInstanceRetentionSettingsInput, PutAppInstanceRetentionSettingsOutput, PutAppInstanceRetentionSettingsOutputError>(id: "putAppInstanceRetentionSettings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PutAppInstanceRetentionSettingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PutAppInstanceRetentionSettingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PutAppInstanceRetentionSettingsInput, PutAppInstanceRetentionSettingsOutput, PutAppInstanceRetentionSettingsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PutAppInstanceRetentionSettingsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>The data streaming configurations of an <code>AppInstance</code>.</p>
    public func putAppInstanceStreamingConfigurations(input: PutAppInstanceStreamingConfigurationsInput, completion: @escaping (SdkResult<PutAppInstanceStreamingConfigurationsOutput, PutAppInstanceStreamingConfigurationsOutputError>) -> Void)
    {
        guard let appInstanceArn = input.appInstanceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component appInstanceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/app-instances/\(appInstanceArn)/streaming-configurations"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putAppInstanceStreamingConfigurations")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PutAppInstanceStreamingConfigurationsInput, PutAppInstanceStreamingConfigurationsOutput, PutAppInstanceStreamingConfigurationsOutputError>(id: "putAppInstanceStreamingConfigurations")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PutAppInstanceStreamingConfigurationsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PutAppInstanceStreamingConfigurationsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PutAppInstanceStreamingConfigurationsInput, PutAppInstanceStreamingConfigurationsOutput, PutAppInstanceStreamingConfigurationsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PutAppInstanceStreamingConfigurationsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates an events configuration that allows a bot to receive outgoing events sent by Amazon
    ///             Chime. Choose either an HTTPS endpoint or a Lambda function ARN. For more information,
    ///             see <a>Bot</a>.</p>
    public func putEventsConfiguration(input: PutEventsConfigurationInput, completion: @escaping (SdkResult<PutEventsConfigurationOutput, PutEventsConfigurationOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        guard let botId = input.botId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component botId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/bots/\(botId)/events-configuration"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putEventsConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PutEventsConfigurationInput, PutEventsConfigurationOutput, PutEventsConfigurationOutputError>(id: "putEventsConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PutEventsConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PutEventsConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PutEventsConfigurationInput, PutEventsConfigurationOutput, PutEventsConfigurationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PutEventsConfigurationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    /// Puts retention settings for the specified Amazon Chime Enterprise account. We recommend using AWS CloudTrail to monitor usage of this API for your account. For more information, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/ag/cloudtrail.html">Logging Amazon Chime API Calls with AWS CloudTrail</a>
    /// in the
    /// <i>Amazon Chime Administration Guide</i>
    /// .
    /// </p>
    ///
    ///          <p>
    /// To turn off existing retention settings, remove the number of days from the corresponding
    /// <b>RetentionDays</b>
    /// field in the
    /// <b>RetentionSettings</b>
    /// object. For more information about retention settings, see
    /// <a href="https://docs.aws.amazon.com/chime/latest/ag/chat-retention.html">Managing Chat Retention Policies</a>
    /// in the
    /// <i>Amazon Chime Administration Guide</i>
    /// .
    /// </p>
    public func putRetentionSettings(input: PutRetentionSettingsInput, completion: @escaping (SdkResult<PutRetentionSettingsOutput, PutRetentionSettingsOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/retention-settings"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putRetentionSettings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PutRetentionSettingsInput, PutRetentionSettingsOutput, PutRetentionSettingsOutputError>(id: "putRetentionSettings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PutRetentionSettingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PutRetentionSettingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PutRetentionSettingsInput, PutRetentionSettingsOutput, PutRetentionSettingsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PutRetentionSettingsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the logging configuration for the specified SIP media application.</p>
    public func putSipMediaApplicationLoggingConfiguration(input: PutSipMediaApplicationLoggingConfigurationInput, completion: @escaping (SdkResult<PutSipMediaApplicationLoggingConfigurationOutput, PutSipMediaApplicationLoggingConfigurationOutputError>) -> Void)
    {
        guard let sipMediaApplicationId = input.sipMediaApplicationId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component sipMediaApplicationId unexpectedly nil"))))
            return
        }
        let urlPath = "/sip-media-applications/\(sipMediaApplicationId)/logging-configuration"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putSipMediaApplicationLoggingConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PutSipMediaApplicationLoggingConfigurationInput, PutSipMediaApplicationLoggingConfigurationOutput, PutSipMediaApplicationLoggingConfigurationOutputError>(id: "putSipMediaApplicationLoggingConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PutSipMediaApplicationLoggingConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PutSipMediaApplicationLoggingConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PutSipMediaApplicationLoggingConfigurationInput, PutSipMediaApplicationLoggingConfigurationOutput, PutSipMediaApplicationLoggingConfigurationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PutSipMediaApplicationLoggingConfigurationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Puts emergency calling configuration details to the specified Amazon Chime Voice Connector, such as emergency phone numbers and calling countries. Origination and termination settings must be enabled for the Amazon Chime Voice Connector before emergency calling can be configured.</p>
    public func putVoiceConnectorEmergencyCallingConfiguration(input: PutVoiceConnectorEmergencyCallingConfigurationInput, completion: @escaping (SdkResult<PutVoiceConnectorEmergencyCallingConfigurationOutput, PutVoiceConnectorEmergencyCallingConfigurationOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/emergency-calling-configuration"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putVoiceConnectorEmergencyCallingConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PutVoiceConnectorEmergencyCallingConfigurationInput, PutVoiceConnectorEmergencyCallingConfigurationOutput, PutVoiceConnectorEmergencyCallingConfigurationOutputError>(id: "putVoiceConnectorEmergencyCallingConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PutVoiceConnectorEmergencyCallingConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PutVoiceConnectorEmergencyCallingConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PutVoiceConnectorEmergencyCallingConfigurationInput, PutVoiceConnectorEmergencyCallingConfigurationOutput, PutVoiceConnectorEmergencyCallingConfigurationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PutVoiceConnectorEmergencyCallingConfigurationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Adds a logging configuration for the specified Amazon Chime Voice Connector. The logging configuration specifies whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.</p>
    public func putVoiceConnectorLoggingConfiguration(input: PutVoiceConnectorLoggingConfigurationInput, completion: @escaping (SdkResult<PutVoiceConnectorLoggingConfigurationOutput, PutVoiceConnectorLoggingConfigurationOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/logging-configuration"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putVoiceConnectorLoggingConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PutVoiceConnectorLoggingConfigurationInput, PutVoiceConnectorLoggingConfigurationOutput, PutVoiceConnectorLoggingConfigurationOutputError>(id: "putVoiceConnectorLoggingConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PutVoiceConnectorLoggingConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PutVoiceConnectorLoggingConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PutVoiceConnectorLoggingConfigurationInput, PutVoiceConnectorLoggingConfigurationOutput, PutVoiceConnectorLoggingConfigurationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PutVoiceConnectorLoggingConfigurationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Adds origination settings for the specified Amazon Chime Voice Connector.</p>
    ///
    ///          <note>
    ///             <p>If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to turning off origination settings.</p>
    ///          </note>
    public func putVoiceConnectorOrigination(input: PutVoiceConnectorOriginationInput, completion: @escaping (SdkResult<PutVoiceConnectorOriginationOutput, PutVoiceConnectorOriginationOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/origination"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putVoiceConnectorOrigination")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PutVoiceConnectorOriginationInput, PutVoiceConnectorOriginationOutput, PutVoiceConnectorOriginationOutputError>(id: "putVoiceConnectorOrigination")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PutVoiceConnectorOriginationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PutVoiceConnectorOriginationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PutVoiceConnectorOriginationInput, PutVoiceConnectorOriginationOutput, PutVoiceConnectorOriginationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PutVoiceConnectorOriginationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Puts the specified proxy configuration to the specified Amazon Chime Voice Connector.</p>
    public func putVoiceConnectorProxy(input: PutVoiceConnectorProxyInput, completion: @escaping (SdkResult<PutVoiceConnectorProxyOutput, PutVoiceConnectorProxyOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/programmable-numbers/proxy"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putVoiceConnectorProxy")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PutVoiceConnectorProxyInput, PutVoiceConnectorProxyOutput, PutVoiceConnectorProxyOutputError>(id: "putVoiceConnectorProxy")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PutVoiceConnectorProxyInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PutVoiceConnectorProxyInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PutVoiceConnectorProxyInput, PutVoiceConnectorProxyOutput, PutVoiceConnectorProxyOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PutVoiceConnectorProxyInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Adds a streaming configuration for the specified Amazon Chime Voice Connector. The streaming
    ///             configuration specifies whether media streaming is enabled for sending to Indonesians.
    ///             It also sets the retention period, in hours, for the Amazon Kinesis data.</p>
    public func putVoiceConnectorStreamingConfiguration(input: PutVoiceConnectorStreamingConfigurationInput, completion: @escaping (SdkResult<PutVoiceConnectorStreamingConfigurationOutput, PutVoiceConnectorStreamingConfigurationOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/streaming-configuration"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putVoiceConnectorStreamingConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PutVoiceConnectorStreamingConfigurationInput, PutVoiceConnectorStreamingConfigurationOutput, PutVoiceConnectorStreamingConfigurationOutputError>(id: "putVoiceConnectorStreamingConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PutVoiceConnectorStreamingConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PutVoiceConnectorStreamingConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PutVoiceConnectorStreamingConfigurationInput, PutVoiceConnectorStreamingConfigurationOutput, PutVoiceConnectorStreamingConfigurationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PutVoiceConnectorStreamingConfigurationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Adds termination settings for the specified Amazon Chime Voice Connector.</p>
    ///
    ///          <note>
    ///             <p>If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to turning off termination settings.</p>
    ///          </note>
    public func putVoiceConnectorTermination(input: PutVoiceConnectorTerminationInput, completion: @escaping (SdkResult<PutVoiceConnectorTerminationOutput, PutVoiceConnectorTerminationOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/termination"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putVoiceConnectorTermination")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PutVoiceConnectorTerminationInput, PutVoiceConnectorTerminationOutput, PutVoiceConnectorTerminationOutputError>(id: "putVoiceConnectorTermination")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PutVoiceConnectorTerminationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PutVoiceConnectorTerminationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PutVoiceConnectorTerminationInput, PutVoiceConnectorTerminationOutput, PutVoiceConnectorTerminationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PutVoiceConnectorTerminationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Adds termination SIP credentials for the specified Amazon Chime Voice Connector.</p>
    public func putVoiceConnectorTerminationCredentials(input: PutVoiceConnectorTerminationCredentialsInput, completion: @escaping (SdkResult<PutVoiceConnectorTerminationCredentialsOutput, PutVoiceConnectorTerminationCredentialsOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/termination/credentials"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putVoiceConnectorTerminationCredentials")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PutVoiceConnectorTerminationCredentialsInput, PutVoiceConnectorTerminationCredentialsOutput, PutVoiceConnectorTerminationCredentialsOutputError>(id: "putVoiceConnectorTerminationCredentials")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PutVoiceConnectorTerminationCredentialsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PutVoiceConnectorTerminationCredentialsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PutVoiceConnectorTerminationCredentialsInput, PutVoiceConnectorTerminationCredentialsOutput, PutVoiceConnectorTerminationCredentialsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PutVoiceConnectorTerminationCredentialsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Redacts message content, but not metadata. The message exists in the back end, but the action returns null content, and the state shows as redacted.</p>
    ///
    ///          <note>
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func redactChannelMessage(input: RedactChannelMessageInput, completion: @escaping (SdkResult<RedactChannelMessageOutput, RedactChannelMessageOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        guard let messageId = input.messageId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component messageId unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)/messages/\(messageId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "redactChannelMessage")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RedactChannelMessageInput, RedactChannelMessageOutput, RedactChannelMessageOutputError>(id: "redactChannelMessage")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RedactChannelMessageInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RedactChannelMessageInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RedactChannelMessageInput, RedactChannelMessageOutput, RedactChannelMessageOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Redacts the specified message from the specified Amazon Chime conversation.</p>
    public func redactConversationMessage(input: RedactConversationMessageInput, completion: @escaping (SdkResult<RedactConversationMessageOutput, RedactConversationMessageOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        guard let conversationId = input.conversationId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component conversationId unexpectedly nil"))))
            return
        }
        guard let messageId = input.messageId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component messageId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/conversations/\(conversationId)/messages/\(messageId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "redactConversationMessage")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RedactConversationMessageInput, RedactConversationMessageOutput, RedactConversationMessageOutputError>(id: "redactConversationMessage")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RedactConversationMessageInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RedactConversationMessageInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RedactConversationMessageInput, RedactConversationMessageOutput, RedactConversationMessageOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Redacts the specified message from the specified Amazon Chime channel.</p>
    public func redactRoomMessage(input: RedactRoomMessageInput, completion: @escaping (SdkResult<RedactRoomMessageOutput, RedactRoomMessageOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        guard let roomId = input.roomId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component roomId unexpectedly nil"))))
            return
        }
        guard let messageId = input.messageId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component messageId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/rooms/\(roomId)/messages/\(messageId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "redactRoomMessage")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RedactRoomMessageInput, RedactRoomMessageOutput, RedactRoomMessageOutputError>(id: "redactRoomMessage")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RedactRoomMessageInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RedactRoomMessageInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RedactRoomMessageInput, RedactRoomMessageOutput, RedactRoomMessageOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Regenerates the security token for a bot.</p>
    public func regenerateSecurityToken(input: RegenerateSecurityTokenInput, completion: @escaping (SdkResult<RegenerateSecurityTokenOutput, RegenerateSecurityTokenOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        guard let botId = input.botId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component botId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/bots/\(botId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "regenerateSecurityToken")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RegenerateSecurityTokenInput, RegenerateSecurityTokenOutput, RegenerateSecurityTokenOutputError>(id: "regenerateSecurityToken")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RegenerateSecurityTokenInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RegenerateSecurityTokenInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RegenerateSecurityTokenInput, RegenerateSecurityTokenOutput, RegenerateSecurityTokenOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Resets the personal meeting PIN for the specified user on an Amazon Chime account. Returns
    ///             the <a>User</a> object with the updated personal meeting PIN.</p>
    public func resetPersonalPIN(input: ResetPersonalPINInput, completion: @escaping (SdkResult<ResetPersonalPINOutput, ResetPersonalPINOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        guard let userId = input.userId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component userId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/users/\(userId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "resetPersonalPIN")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ResetPersonalPINInput, ResetPersonalPINOutput, ResetPersonalPINOutputError>(id: "resetPersonalPIN")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ResetPersonalPINInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ResetPersonalPINInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ResetPersonalPINInput, ResetPersonalPINOutput, ResetPersonalPINOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Moves a phone number from the <b>Deletion queue</b> back into the
    ///             phone number <b>Inventory</b>.</p>
    public func restorePhoneNumber(input: RestorePhoneNumberInput, completion: @escaping (SdkResult<RestorePhoneNumberOutput, RestorePhoneNumberOutputError>) -> Void)
    {
        guard let phoneNumberId = input.phoneNumberId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component phoneNumberId unexpectedly nil"))))
            return
        }
        let urlPath = "/phone-numbers/\(phoneNumberId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "restorePhoneNumber")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RestorePhoneNumberInput, RestorePhoneNumberOutput, RestorePhoneNumberOutputError>(id: "restorePhoneNumber")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RestorePhoneNumberInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RestorePhoneNumberInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RestorePhoneNumberInput, RestorePhoneNumberOutput, RestorePhoneNumberOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Searches for phone numbers that can be ordered. For
    ///             US
    ///             numbers, provide at least one of the following search filters: <code>AreaCode</code>,
    ///                 <code>City</code>, <code>State</code>, or <code>TollFreePrefix</code>. If you
    ///             provide <code>City</code>, you must also provide <code>State</code>. Numbers outside the
    ///             US
    ///             only support the <code>PhoneNumberType</code> filter, which you must use.</p>
    public func searchAvailablePhoneNumbers(input: SearchAvailablePhoneNumbersInput, completion: @escaping (SdkResult<SearchAvailablePhoneNumbersOutput, SearchAvailablePhoneNumbersOutputError>) -> Void)
    {
        let urlPath = "/search"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "searchAvailablePhoneNumbers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<SearchAvailablePhoneNumbersInput, SearchAvailablePhoneNumbersOutput, SearchAvailablePhoneNumbersOutputError>(id: "searchAvailablePhoneNumbers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: SearchAvailablePhoneNumbersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: SearchAvailablePhoneNumbersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<SearchAvailablePhoneNumbersInput, SearchAvailablePhoneNumbersOutput, SearchAvailablePhoneNumbersOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Sends a message to a particular channel that the member is a part of.</p>
    ///
    ///          <note>
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///
    ///             <p>Also, <code>STANDARD</code> messages can contain 4KB of data and the 1KB of metadata. <code>CONTROL</code> messages can contain 30 bytes of
    ///     data and no metadata.</p>
    ///          </note>
    public func sendChannelMessage(input: SendChannelMessageInput, completion: @escaping (SdkResult<SendChannelMessageOutput, SendChannelMessageOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)/messages"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "sendChannelMessage")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<SendChannelMessageInput, SendChannelMessageOutput, SendChannelMessageOutputError>(id: "sendChannelMessage")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<SendChannelMessageOutput>, SdkError<SendChannelMessageOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientRequestToken == nil {
                copiedInput.clientRequestToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: SendChannelMessageInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: SendChannelMessageInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<SendChannelMessageInput, SendChannelMessageOutput, SendChannelMessageOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: SendChannelMessageInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Applies the specified tags to the specified Amazon Chime SDK attendee.</p>
    public func tagAttendee(input: TagAttendeeInput, completion: @escaping (SdkResult<TagAttendeeOutput, TagAttendeeOutputError>) -> Void)
    {
        guard let meetingId = input.meetingId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component meetingId unexpectedly nil"))))
            return
        }
        guard let attendeeId = input.attendeeId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component attendeeId unexpectedly nil"))))
            return
        }
        let urlPath = "/meetings/\(meetingId)/attendees/\(attendeeId)/tags"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "tagAttendee")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<TagAttendeeInput, TagAttendeeOutput, TagAttendeeOutputError>(id: "tagAttendee")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: TagAttendeeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: TagAttendeeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<TagAttendeeInput, TagAttendeeOutput, TagAttendeeOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: TagAttendeeInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Applies the specified tags to the specified Amazon Chime SDK meeting.</p>
    public func tagMeeting(input: TagMeetingInput, completion: @escaping (SdkResult<TagMeetingOutput, TagMeetingOutputError>) -> Void)
    {
        guard let meetingId = input.meetingId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component meetingId unexpectedly nil"))))
            return
        }
        let urlPath = "/meetings/\(meetingId)/tags"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "tagMeeting")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<TagMeetingInput, TagMeetingOutput, TagMeetingOutputError>(id: "tagMeeting")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: TagMeetingInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: TagMeetingInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<TagMeetingInput, TagMeetingOutput, TagMeetingOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: TagMeetingInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Applies the specified tags to the specified Amazon Chime SDK meeting resource.</p>
    public func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutput, TagResourceOutputError>) -> Void)
    {
        let urlPath = "/tags"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "tagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<TagResourceInput, TagResourceOutput, TagResourceOutputError>(id: "tagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<TagResourceInput, TagResourceOutput, TagResourceOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Untags the specified tags from the specified Amazon Chime SDK attendee.</p>
    public func untagAttendee(input: UntagAttendeeInput, completion: @escaping (SdkResult<UntagAttendeeOutput, UntagAttendeeOutputError>) -> Void)
    {
        guard let meetingId = input.meetingId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component meetingId unexpectedly nil"))))
            return
        }
        guard let attendeeId = input.attendeeId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component attendeeId unexpectedly nil"))))
            return
        }
        let urlPath = "/meetings/\(meetingId)/attendees/\(attendeeId)/tags"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "untagAttendee")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UntagAttendeeInput, UntagAttendeeOutput, UntagAttendeeOutputError>(id: "untagAttendee")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UntagAttendeeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UntagAttendeeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UntagAttendeeInput, UntagAttendeeOutput, UntagAttendeeOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UntagAttendeeInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Untags the specified tags from the specified Amazon Chime SDK meeting.</p>
    public func untagMeeting(input: UntagMeetingInput, completion: @escaping (SdkResult<UntagMeetingOutput, UntagMeetingOutputError>) -> Void)
    {
        guard let meetingId = input.meetingId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component meetingId unexpectedly nil"))))
            return
        }
        let urlPath = "/meetings/\(meetingId)/tags"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "untagMeeting")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UntagMeetingInput, UntagMeetingOutput, UntagMeetingOutputError>(id: "untagMeeting")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UntagMeetingInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UntagMeetingInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UntagMeetingInput, UntagMeetingOutput, UntagMeetingOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UntagMeetingInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Untags the specified tags from the specified Amazon Chime SDK meeting resource.</p>
    public func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutput, UntagResourceOutputError>) -> Void)
    {
        let urlPath = "/tags"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "untagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UntagResourceInput, UntagResourceOutput, UntagResourceOutputError>(id: "untagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UntagResourceInput, UntagResourceOutput, UntagResourceOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates account details for the specified Amazon Chime account. Currently, only account name
    ///             updates are supported for this action.</p>
    public func updateAccount(input: UpdateAccountInput, completion: @escaping (SdkResult<UpdateAccountOutput, UpdateAccountOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateAccountInput, UpdateAccountOutput, UpdateAccountOutputError>(id: "updateAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateAccountInput, UpdateAccountOutput, UpdateAccountOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateAccountInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the settings for the specified Amazon Chime account. You can update settings for
    ///             remote control of shared screens, or for the dial-out option. For more information about
    ///             these settings, see <a href="https://docs.aws.amazon.com/chime/latest/ag/policies.html">Use
    ///                 the Policies Page</a> in the <i>Amazon Chime Administration
    ///                 Guide</i>.</p>
    public func updateAccountSettings(input: UpdateAccountSettingsInput, completion: @escaping (SdkResult<UpdateAccountSettingsOutput, UpdateAccountSettingsOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/settings"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateAccountSettings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateAccountSettingsInput, UpdateAccountSettingsOutput, UpdateAccountSettingsOutputError>(id: "updateAccountSettings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateAccountSettingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateAccountSettingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateAccountSettingsInput, UpdateAccountSettingsOutput, UpdateAccountSettingsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateAccountSettingsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates <code>AppInstance</code> metadata.</p>
    public func updateAppInstance(input: UpdateAppInstanceInput, completion: @escaping (SdkResult<UpdateAppInstanceOutput, UpdateAppInstanceOutputError>) -> Void)
    {
        guard let appInstanceArn = input.appInstanceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component appInstanceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/app-instances/\(appInstanceArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateAppInstance")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "identity-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateAppInstanceInput, UpdateAppInstanceOutput, UpdateAppInstanceOutputError>(id: "updateAppInstance")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateAppInstanceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateAppInstanceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateAppInstanceInput, UpdateAppInstanceOutput, UpdateAppInstanceOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateAppInstanceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the details of an <code>AppInstanceUser</code>. You can update names and metadata.</p>
    public func updateAppInstanceUser(input: UpdateAppInstanceUserInput, completion: @escaping (SdkResult<UpdateAppInstanceUserOutput, UpdateAppInstanceUserOutputError>) -> Void)
    {
        guard let appInstanceUserArn = input.appInstanceUserArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component appInstanceUserArn unexpectedly nil"))))
            return
        }
        let urlPath = "/app-instance-users/\(appInstanceUserArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateAppInstanceUser")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "identity-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateAppInstanceUserInput, UpdateAppInstanceUserOutput, UpdateAppInstanceUserOutputError>(id: "updateAppInstanceUser")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateAppInstanceUserInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateAppInstanceUserInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateAppInstanceUserInput, UpdateAppInstanceUserOutput, UpdateAppInstanceUserOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateAppInstanceUserInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the status of the specified bot, such as starting or stopping the bot from running in your Amazon Chime Enterprise account.</p>
    public func updateBot(input: UpdateBotInput, completion: @escaping (SdkResult<UpdateBotOutput, UpdateBotOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        guard let botId = input.botId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component botId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/bots/\(botId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateBot")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateBotInput, UpdateBotOutput, UpdateBotOutputError>(id: "updateBot")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateBotInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateBotInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateBotInput, UpdateBotOutput, UpdateBotOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateBotInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Update a channel's attributes.</p>
    ///          <p>
    ///             <b>Restriction</b>: You can't change a channel's privacy.
    /// </p>
    ///
    ///          <note>
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func updateChannel(input: UpdateChannelInput, completion: @escaping (SdkResult<UpdateChannelOutput, UpdateChannelOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateChannel")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateChannelInput, UpdateChannelOutput, UpdateChannelOutputError>(id: "updateChannel")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateChannelInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateChannelInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateChannelInput, UpdateChannelOutput, UpdateChannelOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateChannelInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the content of a message.</p>
    ///
    ///          <note>
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func updateChannelMessage(input: UpdateChannelMessageInput, completion: @escaping (SdkResult<UpdateChannelMessageOutput, UpdateChannelMessageOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        guard let messageId = input.messageId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component messageId unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)/messages/\(messageId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateChannelMessage")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateChannelMessageInput, UpdateChannelMessageOutput, UpdateChannelMessageOutputError>(id: "updateChannelMessage")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateChannelMessageInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateChannelMessageInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateChannelMessageInput, UpdateChannelMessageOutput, UpdateChannelMessageOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateChannelMessageInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>The details of the time when a user last read messages in a channel.</p>
    ///
    ///          <note>
    ///             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes
    ///         the API call as the value in the header.</p>
    ///          </note>
    public func updateChannelReadMarker(input: UpdateChannelReadMarkerInput, completion: @escaping (SdkResult<UpdateChannelReadMarkerOutput, UpdateChannelReadMarkerOutputError>) -> Void)
    {
        guard let channelArn = input.channelArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelArn unexpectedly nil"))))
            return
        }
        let urlPath = "/channels/\(channelArn)/readMarker"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateChannelReadMarker")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withHostPrefix(value: "messaging-")
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateChannelReadMarkerInput, UpdateChannelReadMarkerOutput, UpdateChannelReadMarkerOutputError>(id: "updateChannelReadMarker")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateChannelReadMarkerInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateChannelReadMarkerInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateChannelReadMarkerInput, UpdateChannelReadMarkerOutput, UpdateChannelReadMarkerOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates global settings for the administrator's AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings.</p>
    public func updateGlobalSettings(input: UpdateGlobalSettingsInput, completion: @escaping (SdkResult<UpdateGlobalSettingsOutput, UpdateGlobalSettingsOutputError>) -> Void)
    {
        let urlPath = "/settings"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateGlobalSettings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateGlobalSettingsInput, UpdateGlobalSettingsOutput, UpdateGlobalSettingsOutputError>(id: "updateGlobalSettings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateGlobalSettingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateGlobalSettingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateGlobalSettingsInput, UpdateGlobalSettingsOutput, UpdateGlobalSettingsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateGlobalSettingsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates phone number details, such as product type or calling name, for the specified phone number ID. You can update one phone number
    ///         detail at a time. For example, you can update either the product type or the calling name in one action.</p>
    ///
    ///          <p>For toll-free numbers, you cannot use the Amazon Chime Business Calling product type. For numbers outside the U.S., you must use the
    ///         Amazon Chime SIP Media Application Dial-In product type.</p>
    ///
    ///          <p>Updates to outbound calling names can take 72 hours to complete. Pending updates to outbound calling names must be complete before you
    ///          can request another update.</p>
    public func updatePhoneNumber(input: UpdatePhoneNumberInput, completion: @escaping (SdkResult<UpdatePhoneNumberOutput, UpdatePhoneNumberOutputError>) -> Void)
    {
        guard let phoneNumberId = input.phoneNumberId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component phoneNumberId unexpectedly nil"))))
            return
        }
        let urlPath = "/phone-numbers/\(phoneNumberId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updatePhoneNumber")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdatePhoneNumberInput, UpdatePhoneNumberOutput, UpdatePhoneNumberOutputError>(id: "updatePhoneNumber")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdatePhoneNumberInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdatePhoneNumberInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdatePhoneNumberInput, UpdatePhoneNumberOutput, UpdatePhoneNumberOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdatePhoneNumberInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the phone number settings for the administrator's AWS account, such as the default
    ///             outbound calling name. You can update the default outbound calling name once every seven
    ///             days. Outbound calling names can take up to 72 hours to update.</p>
    public func updatePhoneNumberSettings(input: UpdatePhoneNumberSettingsInput, completion: @escaping (SdkResult<UpdatePhoneNumberSettingsOutput, UpdatePhoneNumberSettingsOutputError>) -> Void)
    {
        let urlPath = "/settings/phone-number"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updatePhoneNumberSettings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdatePhoneNumberSettingsInput, UpdatePhoneNumberSettingsOutput, UpdatePhoneNumberSettingsOutputError>(id: "updatePhoneNumberSettings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdatePhoneNumberSettingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdatePhoneNumberSettingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdatePhoneNumberSettingsInput, UpdatePhoneNumberSettingsOutput, UpdatePhoneNumberSettingsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdatePhoneNumberSettingsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the specified proxy session details, such as voice or SMS capabilities.</p>
    public func updateProxySession(input: UpdateProxySessionInput, completion: @escaping (SdkResult<UpdateProxySessionOutput, UpdateProxySessionOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        guard let proxySessionId = input.proxySessionId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component proxySessionId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)/proxy-sessions/\(proxySessionId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateProxySession")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateProxySessionInput, UpdateProxySessionOutput, UpdateProxySessionOutputError>(id: "updateProxySession")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateProxySessionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateProxySessionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateProxySessionInput, UpdateProxySessionOutput, UpdateProxySessionOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateProxySessionInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates room details, such as the room name, for a room in an Amazon Chime Enterprise account.</p>
    public func updateRoom(input: UpdateRoomInput, completion: @escaping (SdkResult<UpdateRoomOutput, UpdateRoomOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        guard let roomId = input.roomId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component roomId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/rooms/\(roomId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateRoom")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateRoomInput, UpdateRoomOutput, UpdateRoomOutputError>(id: "updateRoom")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateRoomInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateRoomInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateRoomInput, UpdateRoomOutput, UpdateRoomOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateRoomInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates room membership details, such as the member role, for a room in an Amazon Chime
    ///             Enterprise account. The member role designates whether the member is a chat room
    ///             administrator or a general chat room member. The member role can be updated only for
    ///             user IDs.</p>
    public func updateRoomMembership(input: UpdateRoomMembershipInput, completion: @escaping (SdkResult<UpdateRoomMembershipOutput, UpdateRoomMembershipOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        guard let roomId = input.roomId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component roomId unexpectedly nil"))))
            return
        }
        guard let memberId = input.memberId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component memberId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/rooms/\(roomId)/memberships/\(memberId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateRoomMembership")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateRoomMembershipInput, UpdateRoomMembershipOutput, UpdateRoomMembershipOutputError>(id: "updateRoomMembership")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateRoomMembershipInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateRoomMembershipInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateRoomMembershipInput, UpdateRoomMembershipOutput, UpdateRoomMembershipOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateRoomMembershipInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the details of the specified SIP media application.</p>
    public func updateSipMediaApplication(input: UpdateSipMediaApplicationInput, completion: @escaping (SdkResult<UpdateSipMediaApplicationOutput, UpdateSipMediaApplicationOutputError>) -> Void)
    {
        guard let sipMediaApplicationId = input.sipMediaApplicationId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component sipMediaApplicationId unexpectedly nil"))))
            return
        }
        let urlPath = "/sip-media-applications/\(sipMediaApplicationId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateSipMediaApplication")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateSipMediaApplicationInput, UpdateSipMediaApplicationOutput, UpdateSipMediaApplicationOutputError>(id: "updateSipMediaApplication")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateSipMediaApplicationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateSipMediaApplicationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateSipMediaApplicationInput, UpdateSipMediaApplicationOutput, UpdateSipMediaApplicationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateSipMediaApplicationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the details of the specified SIP rule.</p>
    public func updateSipRule(input: UpdateSipRuleInput, completion: @escaping (SdkResult<UpdateSipRuleOutput, UpdateSipRuleOutputError>) -> Void)
    {
        guard let sipRuleId = input.sipRuleId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component sipRuleId unexpectedly nil"))))
            return
        }
        let urlPath = "/sip-rules/\(sipRuleId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateSipRule")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateSipRuleInput, UpdateSipRuleOutput, UpdateSipRuleOutputError>(id: "updateSipRule")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateSipRuleInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateSipRuleInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateSipRuleInput, UpdateSipRuleOutput, UpdateSipRuleOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateSipRuleInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    /// Updates user details for a specified user ID. Currently, only
    /// <code>LicenseType</code>
    /// updates are supported for this action.
    /// </p>
    public func updateUser(input: UpdateUserInput, completion: @escaping (SdkResult<UpdateUserOutput, UpdateUserOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        guard let userId = input.userId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component userId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/users/\(userId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateUser")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateUserInput, UpdateUserOutput, UpdateUserOutputError>(id: "updateUser")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateUserInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateUserInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateUserInput, UpdateUserOutput, UpdateUserOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateUserInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the settings for the specified user, such as phone number settings.</p>
    public func updateUserSettings(input: UpdateUserSettingsInput, completion: @escaping (SdkResult<UpdateUserSettingsOutput, UpdateUserSettingsOutputError>) -> Void)
    {
        guard let accountId = input.accountId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component accountId unexpectedly nil"))))
            return
        }
        guard let userId = input.userId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component userId unexpectedly nil"))))
            return
        }
        let urlPath = "/accounts/\(accountId)/users/\(userId)/settings"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateUserSettings")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateUserSettingsInput, UpdateUserSettingsOutput, UpdateUserSettingsOutputError>(id: "updateUserSettings")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateUserSettingsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateUserSettingsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateUserSettingsInput, UpdateUserSettingsOutput, UpdateUserSettingsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateUserSettingsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates details for the specified Amazon Chime Voice Connector.</p>
    public func updateVoiceConnector(input: UpdateVoiceConnectorInput, completion: @escaping (SdkResult<UpdateVoiceConnectorOutput, UpdateVoiceConnectorOutputError>) -> Void)
    {
        guard let voiceConnectorId = input.voiceConnectorId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connectors/\(voiceConnectorId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateVoiceConnector")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateVoiceConnectorInput, UpdateVoiceConnectorOutput, UpdateVoiceConnectorOutputError>(id: "updateVoiceConnector")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateVoiceConnectorInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateVoiceConnectorInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateVoiceConnectorInput, UpdateVoiceConnectorOutput, UpdateVoiceConnectorOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateVoiceConnectorInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates details of the specified Amazon Chime Voice Connector group, such as the name and
    ///             Amazon Chime Voice Connector priority ranking.</p>
    public func updateVoiceConnectorGroup(input: UpdateVoiceConnectorGroupInput, completion: @escaping (SdkResult<UpdateVoiceConnectorGroupOutput, UpdateVoiceConnectorGroupOutputError>) -> Void)
    {
        guard let voiceConnectorGroupId = input.voiceConnectorGroupId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component voiceConnectorGroupId unexpectedly nil"))))
            return
        }
        let urlPath = "/voice-connector-groups/\(voiceConnectorGroupId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateVoiceConnectorGroup")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "chime.\(config.region).amazonaws.com")
                      .withSigningName(value: "chime")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateVoiceConnectorGroupInput, UpdateVoiceConnectorGroupOutput, UpdateVoiceConnectorGroupOutputError>(id: "updateVoiceConnectorGroup")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateVoiceConnectorGroupInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateVoiceConnectorGroupInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateVoiceConnectorGroupInput, UpdateVoiceConnectorGroupOutput, UpdateVoiceConnectorGroupOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateVoiceConnectorGroupInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
