// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Meeting: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case externalMeetingId = "ExternalMeetingId"
        case mediaPlacement = "MediaPlacement"
        case mediaRegion = "MediaRegion"
        case meetingId = "MeetingId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let externalMeetingId = externalMeetingId {
            try encodeContainer.encode(externalMeetingId, forKey: .externalMeetingId)
        }
        if let mediaPlacement = mediaPlacement {
            try encodeContainer.encode(mediaPlacement, forKey: .mediaPlacement)
        }
        if let mediaRegion = mediaRegion {
            try encodeContainer.encode(mediaRegion, forKey: .mediaRegion)
        }
        if let meetingId = meetingId {
            try encodeContainer.encode(meetingId, forKey: .meetingId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meetingIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .meetingId)
        meetingId = meetingIdDecoded
        let externalMeetingIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .externalMeetingId)
        externalMeetingId = externalMeetingIdDecoded
        let mediaPlacementDecoded = try containerValues.decodeIfPresent(MediaPlacement.self, forKey: .mediaPlacement)
        mediaPlacement = mediaPlacementDecoded
        let mediaRegionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mediaRegion)
        mediaRegion = mediaRegionDecoded
    }
}
