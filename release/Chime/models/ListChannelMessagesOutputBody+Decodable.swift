// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListChannelMessagesOutputBody: Equatable {
    public let channelArn: String?
    public let nextToken: String?
    public let channelMessages: [ChannelMessageSummary]?
}

extension ListChannelMessagesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case channelArn = "ChannelArn"
        case channelMessages = "ChannelMessages"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .channelArn)
        channelArn = channelArnDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let channelMessagesContainer = try containerValues.decodeIfPresent([ChannelMessageSummary].self, forKey: .channelMessages)
        var channelMessagesDecoded0:[ChannelMessageSummary]? = nil
        if let channelMessagesContainer = channelMessagesContainer {
            channelMessagesDecoded0 = [ChannelMessageSummary]()
            for structure0 in channelMessagesContainer {
                channelMessagesDecoded0?.append(structure0)
            }
        }
        channelMessages = channelMessagesDecoded0
    }
}
