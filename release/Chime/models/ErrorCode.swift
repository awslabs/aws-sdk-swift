// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum ErrorCode {
    case accessdenied
    case badrequest
    case conflict
    case forbidden
    case notfound
    case phonenumberassociationsexist
    case preconditionfailed
    case resourcelimitexceeded
    case servicefailure
    case serviceunavailable
    case throttled
    case throttling
    case unauthorized
    case unprocessable
    case voiceconnectorgroupassociationsexist
    case sdkUnknown(String)
}

extension ErrorCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ErrorCode] {
        return [
            .accessdenied,
            .badrequest,
            .conflict,
            .forbidden,
            .notfound,
            .phonenumberassociationsexist,
            .preconditionfailed,
            .resourcelimitexceeded,
            .servicefailure,
            .serviceunavailable,
            .throttled,
            .throttling,
            .unauthorized,
            .unprocessable,
            .voiceconnectorgroupassociationsexist,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accessdenied: return "AccessDenied"
        case .badrequest: return "BadRequest"
        case .conflict: return "Conflict"
        case .forbidden: return "Forbidden"
        case .notfound: return "NotFound"
        case .phonenumberassociationsexist: return "PhoneNumberAssociationsExist"
        case .preconditionfailed: return "PreconditionFailed"
        case .resourcelimitexceeded: return "ResourceLimitExceeded"
        case .servicefailure: return "ServiceFailure"
        case .serviceunavailable: return "ServiceUnavailable"
        case .throttled: return "Throttled"
        case .throttling: return "Throttling"
        case .unauthorized: return "Unauthorized"
        case .unprocessable: return "Unprocessable"
        case .voiceconnectorgroupassociationsexist: return "VoiceConnectorGroupAssociationsExist"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ErrorCode(rawValue: rawValue) ?? ErrorCode.sdkUnknown(rawValue)
    }
}
