// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListSipRulesOutputBody: Equatable {
    public let sipRules: [SipRule]?
    public let nextToken: String?
}

extension ListSipRulesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case sipRules = "SipRules"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sipRulesContainer = try containerValues.decodeIfPresent([SipRule].self, forKey: .sipRules)
        var sipRulesDecoded0:[SipRule]? = nil
        if let sipRulesContainer = sipRulesContainer {
            sipRulesDecoded0 = [SipRule]()
            for structure0 in sipRulesContainer {
                sipRulesDecoded0?.append(structure0)
            }
        }
        sipRules = sipRulesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
