// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension User: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountId = "AccountId"
        case alexaForBusinessMetadata = "AlexaForBusinessMetadata"
        case displayName = "DisplayName"
        case invitedOn = "InvitedOn"
        case licenseType = "LicenseType"
        case personalPIN = "PersonalPIN"
        case primaryEmail = "PrimaryEmail"
        case primaryProvisionedNumber = "PrimaryProvisionedNumber"
        case registeredOn = "RegisteredOn"
        case userId = "UserId"
        case userInvitationStatus = "UserInvitationStatus"
        case userRegistrationStatus = "UserRegistrationStatus"
        case userType = "UserType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let alexaForBusinessMetadata = alexaForBusinessMetadata {
            try encodeContainer.encode(alexaForBusinessMetadata, forKey: .alexaForBusinessMetadata)
        }
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let invitedOn = invitedOn {
            try encodeContainer.encode(invitedOn.timeIntervalSince1970, forKey: .invitedOn)
        }
        if let licenseType = licenseType {
            try encodeContainer.encode(licenseType.rawValue, forKey: .licenseType)
        }
        if let personalPIN = personalPIN {
            try encodeContainer.encode(personalPIN, forKey: .personalPIN)
        }
        if let primaryEmail = primaryEmail {
            try encodeContainer.encode(primaryEmail, forKey: .primaryEmail)
        }
        if let primaryProvisionedNumber = primaryProvisionedNumber {
            try encodeContainer.encode(primaryProvisionedNumber, forKey: .primaryProvisionedNumber)
        }
        if let registeredOn = registeredOn {
            try encodeContainer.encode(registeredOn.timeIntervalSince1970, forKey: .registeredOn)
        }
        if let userId = userId {
            try encodeContainer.encode(userId, forKey: .userId)
        }
        if let userInvitationStatus = userInvitationStatus {
            try encodeContainer.encode(userInvitationStatus.rawValue, forKey: .userInvitationStatus)
        }
        if let userRegistrationStatus = userRegistrationStatus {
            try encodeContainer.encode(userRegistrationStatus.rawValue, forKey: .userRegistrationStatus)
        }
        if let userType = userType {
            try encodeContainer.encode(userType.rawValue, forKey: .userType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userId)
        userId = userIdDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let primaryEmailDecoded = try containerValues.decodeIfPresent(String.self, forKey: .primaryEmail)
        primaryEmail = primaryEmailDecoded
        let primaryProvisionedNumberDecoded = try containerValues.decodeIfPresent(String.self, forKey: .primaryProvisionedNumber)
        primaryProvisionedNumber = primaryProvisionedNumberDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let licenseTypeDecoded = try containerValues.decodeIfPresent(License.self, forKey: .licenseType)
        licenseType = licenseTypeDecoded
        let userTypeDecoded = try containerValues.decodeIfPresent(UserType.self, forKey: .userType)
        userType = userTypeDecoded
        let userRegistrationStatusDecoded = try containerValues.decodeIfPresent(RegistrationStatus.self, forKey: .userRegistrationStatus)
        userRegistrationStatus = userRegistrationStatusDecoded
        let userInvitationStatusDecoded = try containerValues.decodeIfPresent(InviteStatus.self, forKey: .userInvitationStatus)
        userInvitationStatus = userInvitationStatusDecoded
        let registeredOnDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .registeredOn)
        registeredOn = registeredOnDecoded
        let invitedOnDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .invitedOn)
        invitedOn = invitedOnDecoded
        let alexaForBusinessMetadataDecoded = try containerValues.decodeIfPresent(AlexaForBusinessMetadata.self, forKey: .alexaForBusinessMetadata)
        alexaForBusinessMetadata = alexaForBusinessMetadataDecoded
        let personalPINDecoded = try containerValues.decodeIfPresent(String.self, forKey: .personalPIN)
        personalPIN = personalPINDecoded
    }
}
