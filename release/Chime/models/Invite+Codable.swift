// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Invite: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case emailAddress = "EmailAddress"
        case emailStatus = "EmailStatus"
        case inviteId = "InviteId"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let emailAddress = emailAddress {
            try encodeContainer.encode(emailAddress, forKey: .emailAddress)
        }
        if let emailStatus = emailStatus {
            try encodeContainer.encode(emailStatus.rawValue, forKey: .emailStatus)
        }
        if let inviteId = inviteId {
            try encodeContainer.encode(inviteId, forKey: .inviteId)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inviteIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inviteId)
        inviteId = inviteIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(InviteStatus.self, forKey: .status)
        status = statusDecoded
        let emailAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let emailStatusDecoded = try containerValues.decodeIfPresent(EmailStatus.self, forKey: .emailStatus)
        emailStatus = emailStatusDecoded
    }
}
