// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Bot: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case botEmail = "BotEmail"
        case botId = "BotId"
        case botType = "BotType"
        case createdTimestamp = "CreatedTimestamp"
        case disabled = "Disabled"
        case displayName = "DisplayName"
        case securityToken = "SecurityToken"
        case updatedTimestamp = "UpdatedTimestamp"
        case userId = "UserId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let botEmail = botEmail {
            try encodeContainer.encode(botEmail, forKey: .botEmail)
        }
        if let botId = botId {
            try encodeContainer.encode(botId, forKey: .botId)
        }
        if let botType = botType {
            try encodeContainer.encode(botType.rawValue, forKey: .botType)
        }
        if let createdTimestamp = createdTimestamp {
            try encodeContainer.encode(createdTimestamp.timeIntervalSince1970, forKey: .createdTimestamp)
        }
        if let disabled = disabled {
            try encodeContainer.encode(disabled, forKey: .disabled)
        }
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let securityToken = securityToken {
            try encodeContainer.encode(securityToken, forKey: .securityToken)
        }
        if let updatedTimestamp = updatedTimestamp {
            try encodeContainer.encode(updatedTimestamp.timeIntervalSince1970, forKey: .updatedTimestamp)
        }
        if let userId = userId {
            try encodeContainer.encode(userId, forKey: .userId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let botIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .botId)
        botId = botIdDecoded
        let userIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userId)
        userId = userIdDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let botTypeDecoded = try containerValues.decodeIfPresent(BotType.self, forKey: .botType)
        botType = botTypeDecoded
        let disabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .disabled)
        disabled = disabledDecoded
        let createdTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
        let updatedTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .updatedTimestamp)
        updatedTimestamp = updatedTimestampDecoded
        let botEmailDecoded = try containerValues.decodeIfPresent(String.self, forKey: .botEmail)
        botEmail = botEmailDecoded
        let securityTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .securityToken)
        securityToken = securityTokenDecoded
    }
}
