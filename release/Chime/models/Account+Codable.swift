// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Account: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountId = "AccountId"
        case accountType = "AccountType"
        case awsAccountId = "AwsAccountId"
        case createdTimestamp = "CreatedTimestamp"
        case defaultLicense = "DefaultLicense"
        case name = "Name"
        case signinDelegateGroups = "SigninDelegateGroups"
        case supportedLicenses = "SupportedLicenses"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let accountType = accountType {
            try encodeContainer.encode(accountType.rawValue, forKey: .accountType)
        }
        if let awsAccountId = awsAccountId {
            try encodeContainer.encode(awsAccountId, forKey: .awsAccountId)
        }
        if let createdTimestamp = createdTimestamp {
            try encodeContainer.encode(createdTimestamp.timeIntervalSince1970, forKey: .createdTimestamp)
        }
        if let defaultLicense = defaultLicense {
            try encodeContainer.encode(defaultLicense.rawValue, forKey: .defaultLicense)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let signinDelegateGroups = signinDelegateGroups {
            var signinDelegateGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .signinDelegateGroups)
            for signindelegategrouplist0 in signinDelegateGroups {
                try signinDelegateGroupsContainer.encode(signindelegategrouplist0)
            }
        }
        if let supportedLicenses = supportedLicenses {
            var supportedLicensesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedLicenses)
            for licenselist0 in supportedLicenses {
                try supportedLicensesContainer.encode(licenselist0.rawValue)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let awsAccountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .awsAccountId)
        awsAccountId = awsAccountIdDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let accountTypeDecoded = try containerValues.decodeIfPresent(AccountType.self, forKey: .accountType)
        accountType = accountTypeDecoded
        let createdTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
        let defaultLicenseDecoded = try containerValues.decodeIfPresent(License.self, forKey: .defaultLicense)
        defaultLicense = defaultLicenseDecoded
        let supportedLicensesContainer = try containerValues.decodeIfPresent([License].self, forKey: .supportedLicenses)
        var supportedLicensesDecoded0:[License]? = nil
        if let supportedLicensesContainer = supportedLicensesContainer {
            supportedLicensesDecoded0 = [License]()
            for string0 in supportedLicensesContainer {
                supportedLicensesDecoded0?.append(string0)
            }
        }
        supportedLicenses = supportedLicensesDecoded0
        let signinDelegateGroupsContainer = try containerValues.decodeIfPresent([SigninDelegateGroup].self, forKey: .signinDelegateGroups)
        var signinDelegateGroupsDecoded0:[SigninDelegateGroup]? = nil
        if let signinDelegateGroupsContainer = signinDelegateGroupsContainer {
            signinDelegateGroupsDecoded0 = [SigninDelegateGroup]()
            for structure0 in signinDelegateGroupsContainer {
                signinDelegateGroupsDecoded0?.append(structure0)
            }
        }
        signinDelegateGroups = signinDelegateGroupsDecoded0
    }
}
