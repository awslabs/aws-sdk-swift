// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListChannelBansOutputBody: Equatable {
    public let channelArn: String?
    public let nextToken: String?
    public let channelBans: [ChannelBanSummary]?
}

extension ListChannelBansOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case channelArn = "ChannelArn"
        case channelBans = "ChannelBans"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .channelArn)
        channelArn = channelArnDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let channelBansContainer = try containerValues.decodeIfPresent([ChannelBanSummary].self, forKey: .channelBans)
        var channelBansDecoded0:[ChannelBanSummary]? = nil
        if let channelBansContainer = channelBansContainer {
            channelBansDecoded0 = [ChannelBanSummary]()
            for structure0 in channelBansContainer {
                channelBansDecoded0?.append(structure0)
            }
        }
        channelBans = channelBansDecoded0
    }
}
