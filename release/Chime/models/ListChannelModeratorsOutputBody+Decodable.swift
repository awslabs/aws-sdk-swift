// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListChannelModeratorsOutputBody: Equatable {
    public let channelArn: String?
    public let nextToken: String?
    public let channelModerators: [ChannelModeratorSummary]?
}

extension ListChannelModeratorsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case channelArn = "ChannelArn"
        case channelModerators = "ChannelModerators"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .channelArn)
        channelArn = channelArnDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let channelModeratorsContainer = try containerValues.decodeIfPresent([ChannelModeratorSummary].self, forKey: .channelModerators)
        var channelModeratorsDecoded0:[ChannelModeratorSummary]? = nil
        if let channelModeratorsContainer = channelModeratorsContainer {
            channelModeratorsDecoded0 = [ChannelModeratorSummary]()
            for structure0 in channelModeratorsContainer {
                channelModeratorsDecoded0?.append(structure0)
            }
        }
        channelModerators = channelModeratorsDecoded0
    }
}
