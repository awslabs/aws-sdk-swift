// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateProxySessionInputBody: Equatable {
    public let participantPhoneNumbers: [String]?
    public let name: String?
    public let expiryMinutes: Int?
    public let capabilities: [Capability]?
    public let numberSelectionBehavior: NumberSelectionBehavior?
    public let geoMatchLevel: GeoMatchLevel?
    public let geoMatchParams: GeoMatchParams?
}

extension CreateProxySessionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case capabilities = "Capabilities"
        case expiryMinutes = "ExpiryMinutes"
        case geoMatchLevel = "GeoMatchLevel"
        case geoMatchParams = "GeoMatchParams"
        case name = "Name"
        case numberSelectionBehavior = "NumberSelectionBehavior"
        case participantPhoneNumbers = "ParticipantPhoneNumbers"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let participantPhoneNumbersContainer = try containerValues.decodeIfPresent([String].self, forKey: .participantPhoneNumbers)
        var participantPhoneNumbersDecoded0:[String]? = nil
        if let participantPhoneNumbersContainer = participantPhoneNumbersContainer {
            participantPhoneNumbersDecoded0 = [String]()
            for string0 in participantPhoneNumbersContainer {
                participantPhoneNumbersDecoded0?.append(string0)
            }
        }
        participantPhoneNumbers = participantPhoneNumbersDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let expiryMinutesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .expiryMinutes)
        expiryMinutes = expiryMinutesDecoded
        let capabilitiesContainer = try containerValues.decodeIfPresent([Capability].self, forKey: .capabilities)
        var capabilitiesDecoded0:[Capability]? = nil
        if let capabilitiesContainer = capabilitiesContainer {
            capabilitiesDecoded0 = [Capability]()
            for string0 in capabilitiesContainer {
                capabilitiesDecoded0?.append(string0)
            }
        }
        capabilities = capabilitiesDecoded0
        let numberSelectionBehaviorDecoded = try containerValues.decodeIfPresent(NumberSelectionBehavior.self, forKey: .numberSelectionBehavior)
        numberSelectionBehavior = numberSelectionBehaviorDecoded
        let geoMatchLevelDecoded = try containerValues.decodeIfPresent(GeoMatchLevel.self, forKey: .geoMatchLevel)
        geoMatchLevel = geoMatchLevelDecoded
        let geoMatchParamsDecoded = try containerValues.decodeIfPresent(GeoMatchParams.self, forKey: .geoMatchParams)
        geoMatchParams = geoMatchParamsDecoded
    }
}
