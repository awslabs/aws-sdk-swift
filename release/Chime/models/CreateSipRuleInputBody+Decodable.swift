// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateSipRuleInputBody: Equatable {
    public let name: String?
    public let triggerType: SipRuleTriggerType?
    public let triggerValue: String?
    public let disabled: Bool?
    public let targetApplications: [SipRuleTargetApplication]?
}

extension CreateSipRuleInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case disabled = "Disabled"
        case name = "Name"
        case targetApplications = "TargetApplications"
        case triggerType = "TriggerType"
        case triggerValue = "TriggerValue"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let triggerTypeDecoded = try containerValues.decodeIfPresent(SipRuleTriggerType.self, forKey: .triggerType)
        triggerType = triggerTypeDecoded
        let triggerValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .triggerValue)
        triggerValue = triggerValueDecoded
        let disabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .disabled)
        disabled = disabledDecoded
        let targetApplicationsContainer = try containerValues.decodeIfPresent([SipRuleTargetApplication].self, forKey: .targetApplications)
        var targetApplicationsDecoded0:[SipRuleTargetApplication]? = nil
        if let targetApplicationsContainer = targetApplicationsContainer {
            targetApplicationsDecoded0 = [SipRuleTargetApplication]()
            for structure0 in targetApplicationsContainer {
                targetApplicationsDecoded0?.append(structure0)
            }
        }
        targetApplications = targetApplicationsDecoded0
    }
}
