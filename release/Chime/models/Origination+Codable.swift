// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Origination: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case disabled = "Disabled"
        case routes = "Routes"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let disabled = disabled {
            try encodeContainer.encode(disabled, forKey: .disabled)
        }
        if let routes = routes {
            var routesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .routes)
            for originationroutelist0 in routes {
                try routesContainer.encode(originationroutelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routesContainer = try containerValues.decodeIfPresent([OriginationRoute].self, forKey: .routes)
        var routesDecoded0:[OriginationRoute]? = nil
        if let routesContainer = routesContainer {
            routesDecoded0 = [OriginationRoute]()
            for structure0 in routesContainer {
                routesDecoded0?.append(structure0)
            }
        }
        routes = routesDecoded0
        let disabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .disabled)
        disabled = disabledDecoded
    }
}
