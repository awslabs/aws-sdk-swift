// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeImportOutputBody: Equatable {
    public let importId: String?
    public let resourceSpecification: ImportResourceSpecification?
    public let importedResourceId: String?
    public let importedResourceName: String?
    public let mergeStrategy: MergeStrategy?
    public let importStatus: ImportStatus?
    public let failureReasons: [String]?
    public let creationDateTime: Date?
    public let lastUpdatedDateTime: Date?
}

extension DescribeImportOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case creationDateTime
        case failureReasons
        case importId
        case importStatus
        case importedResourceId
        case importedResourceName
        case lastUpdatedDateTime
        case mergeStrategy
        case resourceSpecification
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .importId)
        importId = importIdDecoded
        let resourceSpecificationDecoded = try containerValues.decodeIfPresent(ImportResourceSpecification.self, forKey: .resourceSpecification)
        resourceSpecification = resourceSpecificationDecoded
        let importedResourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .importedResourceId)
        importedResourceId = importedResourceIdDecoded
        let importedResourceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .importedResourceName)
        importedResourceName = importedResourceNameDecoded
        let mergeStrategyDecoded = try containerValues.decodeIfPresent(MergeStrategy.self, forKey: .mergeStrategy)
        mergeStrategy = mergeStrategyDecoded
        let importStatusDecoded = try containerValues.decodeIfPresent(ImportStatus.self, forKey: .importStatus)
        importStatus = importStatusDecoded
        let failureReasonsContainer = try containerValues.decodeIfPresent([String].self, forKey: .failureReasons)
        var failureReasonsDecoded0:[String]? = nil
        if let failureReasonsContainer = failureReasonsContainer {
            failureReasonsDecoded0 = [String]()
            for string0 in failureReasonsContainer {
                failureReasonsDecoded0?.append(string0)
            }
        }
        failureReasons = failureReasonsDecoded0
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let lastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedDateTime)
        lastUpdatedDateTime = lastUpdatedDateTimeDecoded
    }
}
