// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SlotValueElicitationSetting: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case defaultValueSpecification
        case promptSpecification
        case sampleUtterances
        case slotConstraint
        case waitAndContinueSpecification
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultValueSpecification = defaultValueSpecification {
            try encodeContainer.encode(defaultValueSpecification, forKey: .defaultValueSpecification)
        }
        if let promptSpecification = promptSpecification {
            try encodeContainer.encode(promptSpecification, forKey: .promptSpecification)
        }
        if let sampleUtterances = sampleUtterances {
            var sampleUtterancesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sampleUtterances)
            for sampleutteranceslist0 in sampleUtterances {
                try sampleUtterancesContainer.encode(sampleutteranceslist0)
            }
        }
        if let slotConstraint = slotConstraint {
            try encodeContainer.encode(slotConstraint.rawValue, forKey: .slotConstraint)
        }
        if let waitAndContinueSpecification = waitAndContinueSpecification {
            try encodeContainer.encode(waitAndContinueSpecification, forKey: .waitAndContinueSpecification)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultValueSpecificationDecoded = try containerValues.decodeIfPresent(SlotDefaultValueSpecification.self, forKey: .defaultValueSpecification)
        defaultValueSpecification = defaultValueSpecificationDecoded
        let slotConstraintDecoded = try containerValues.decodeIfPresent(SlotConstraint.self, forKey: .slotConstraint)
        slotConstraint = slotConstraintDecoded
        let promptSpecificationDecoded = try containerValues.decodeIfPresent(PromptSpecification.self, forKey: .promptSpecification)
        promptSpecification = promptSpecificationDecoded
        let sampleUtterancesContainer = try containerValues.decodeIfPresent([SampleUtterance].self, forKey: .sampleUtterances)
        var sampleUtterancesDecoded0:[SampleUtterance]? = nil
        if let sampleUtterancesContainer = sampleUtterancesContainer {
            sampleUtterancesDecoded0 = [SampleUtterance]()
            for structure0 in sampleUtterancesContainer {
                sampleUtterancesDecoded0?.append(structure0)
            }
        }
        sampleUtterances = sampleUtterancesDecoded0
        let waitAndContinueSpecificationDecoded = try containerValues.decodeIfPresent(WaitAndContinueSpecification.self, forKey: .waitAndContinueSpecification)
        waitAndContinueSpecification = waitAndContinueSpecificationDecoded
    }
}
