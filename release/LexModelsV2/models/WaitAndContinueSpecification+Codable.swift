// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WaitAndContinueSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case continueResponse
        case stillWaitingResponse
        case waitingResponse
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let continueResponse = continueResponse {
            try encodeContainer.encode(continueResponse, forKey: .continueResponse)
        }
        if let stillWaitingResponse = stillWaitingResponse {
            try encodeContainer.encode(stillWaitingResponse, forKey: .stillWaitingResponse)
        }
        if let waitingResponse = waitingResponse {
            try encodeContainer.encode(waitingResponse, forKey: .waitingResponse)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let waitingResponseDecoded = try containerValues.decodeIfPresent(ResponseSpecification.self, forKey: .waitingResponse)
        waitingResponse = waitingResponseDecoded
        let continueResponseDecoded = try containerValues.decodeIfPresent(ResponseSpecification.self, forKey: .continueResponse)
        continueResponse = continueResponseDecoded
        let stillWaitingResponseDecoded = try containerValues.decodeIfPresent(StillWaitingResponseSpecification.self, forKey: .stillWaitingResponse)
        stillWaitingResponse = stillWaitingResponseDecoded
    }
}
