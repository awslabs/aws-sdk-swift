// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeBotOutputBody: Equatable {
    public let botId: String?
    public let botName: String?
    public let description: String?
    public let roleArn: String?
    public let dataPrivacy: DataPrivacy?
    public let idleSessionTTLInSeconds: Int?
    public let botStatus: BotStatus?
    public let creationDateTime: Date?
    public let lastUpdatedDateTime: Date?
}

extension DescribeBotOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case botId
        case botName
        case botStatus
        case creationDateTime
        case dataPrivacy
        case description
        case idleSessionTTLInSeconds
        case lastUpdatedDateTime
        case roleArn
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let botIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .botId)
        botId = botIdDecoded
        let botNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .botName)
        botName = botNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let dataPrivacyDecoded = try containerValues.decodeIfPresent(DataPrivacy.self, forKey: .dataPrivacy)
        dataPrivacy = dataPrivacyDecoded
        let idleSessionTTLInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .idleSessionTTLInSeconds)
        idleSessionTTLInSeconds = idleSessionTTLInSecondsDecoded
        let botStatusDecoded = try containerValues.decodeIfPresent(BotStatus.self, forKey: .botStatus)
        botStatus = botStatusDecoded
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let lastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedDateTime)
        lastUpdatedDateTime = lastUpdatedDateTimeDecoded
    }
}
