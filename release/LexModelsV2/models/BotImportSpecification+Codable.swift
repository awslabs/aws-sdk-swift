// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BotImportSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case botName
        case botTags
        case dataPrivacy
        case idleSessionTTLInSeconds
        case roleArn
        case testBotAliasTags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let botName = botName {
            try encodeContainer.encode(botName, forKey: .botName)
        }
        if let botTags = botTags {
            var botTagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .botTags)
            for (dictKey0, tagmap0) in botTags {
                try botTagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let dataPrivacy = dataPrivacy {
            try encodeContainer.encode(dataPrivacy, forKey: .dataPrivacy)
        }
        if let idleSessionTTLInSeconds = idleSessionTTLInSeconds {
            try encodeContainer.encode(idleSessionTTLInSeconds, forKey: .idleSessionTTLInSeconds)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let testBotAliasTags = testBotAliasTags {
            var testBotAliasTagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .testBotAliasTags)
            for (dictKey0, tagmap0) in testBotAliasTags {
                try testBotAliasTagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let botNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .botName)
        botName = botNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let dataPrivacyDecoded = try containerValues.decodeIfPresent(DataPrivacy.self, forKey: .dataPrivacy)
        dataPrivacy = dataPrivacyDecoded
        let idleSessionTTLInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .idleSessionTTLInSeconds)
        idleSessionTTLInSeconds = idleSessionTTLInSecondsDecoded
        let botTagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .botTags)
        var botTagsDecoded0: [String:String]? = nil
        if let botTagsContainer = botTagsContainer {
            botTagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in botTagsContainer {
                botTagsDecoded0?[key0] = tagvalue0
            }
        }
        botTags = botTagsDecoded0
        let testBotAliasTagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .testBotAliasTags)
        var testBotAliasTagsDecoded0: [String:String]? = nil
        if let testBotAliasTagsContainer = testBotAliasTagsContainer {
            testBotAliasTagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in testBotAliasTagsContainer {
                testBotAliasTagsDecoded0?[key0] = tagvalue0
            }
        }
        testBotAliasTags = testBotAliasTagsDecoded0
    }
}
