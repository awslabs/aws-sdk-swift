// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeBotVersionOutputBody: Equatable {
    public let botId: String?
    public let botName: String?
    public let botVersion: String?
    public let description: String?
    public let roleArn: String?
    public let dataPrivacy: DataPrivacy?
    public let idleSessionTTLInSeconds: Int?
    public let botStatus: BotStatus?
    public let failureReasons: [String]?
    public let creationDateTime: Date?
}

extension DescribeBotVersionOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case botId
        case botName
        case botStatus
        case botVersion
        case creationDateTime
        case dataPrivacy
        case description
        case failureReasons
        case idleSessionTTLInSeconds
        case roleArn
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let botIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .botId)
        botId = botIdDecoded
        let botNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .botName)
        botName = botNameDecoded
        let botVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .botVersion)
        botVersion = botVersionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let dataPrivacyDecoded = try containerValues.decodeIfPresent(DataPrivacy.self, forKey: .dataPrivacy)
        dataPrivacy = dataPrivacyDecoded
        let idleSessionTTLInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .idleSessionTTLInSeconds)
        idleSessionTTLInSeconds = idleSessionTTLInSecondsDecoded
        let botStatusDecoded = try containerValues.decodeIfPresent(BotStatus.self, forKey: .botStatus)
        botStatus = botStatusDecoded
        let failureReasonsContainer = try containerValues.decodeIfPresent([String].self, forKey: .failureReasons)
        var failureReasonsDecoded0:[String]? = nil
        if let failureReasonsContainer = failureReasonsContainer {
            failureReasonsDecoded0 = [String]()
            for string0 in failureReasonsContainer {
                failureReasonsDecoded0?.append(string0)
            }
        }
        failureReasons = failureReasonsDecoded0
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
    }
}
