// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListImportsInputBody: Equatable {
    public let botId: String?
    public let botVersion: String?
    public let sortBy: ImportSortBy?
    public let filters: [ImportFilter]?
    public let maxResults: Int?
    public let nextToken: String?
}

extension ListImportsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case botId
        case botVersion
        case filters
        case maxResults
        case nextToken
        case sortBy
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let botIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .botId)
        botId = botIdDecoded
        let botVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .botVersion)
        botVersion = botVersionDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(ImportSortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let filtersContainer = try containerValues.decodeIfPresent([ImportFilter].self, forKey: .filters)
        var filtersDecoded0:[ImportFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ImportFilter]()
            for structure0 in filtersContainer {
                filtersDecoded0?.append(structure0)
            }
        }
        filters = filtersDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
