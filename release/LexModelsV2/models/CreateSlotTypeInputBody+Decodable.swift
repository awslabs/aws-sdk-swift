// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateSlotTypeInputBody: Equatable {
    public let slotTypeName: String?
    public let description: String?
    public let slotTypeValues: [SlotTypeValue]?
    public let valueSelectionSetting: SlotValueSelectionSetting?
    public let parentSlotTypeSignature: String?
}

extension CreateSlotTypeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description
        case parentSlotTypeSignature
        case slotTypeName
        case slotTypeValues
        case valueSelectionSetting
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let slotTypeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .slotTypeName)
        slotTypeName = slotTypeNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let slotTypeValuesContainer = try containerValues.decodeIfPresent([SlotTypeValue].self, forKey: .slotTypeValues)
        var slotTypeValuesDecoded0:[SlotTypeValue]? = nil
        if let slotTypeValuesContainer = slotTypeValuesContainer {
            slotTypeValuesDecoded0 = [SlotTypeValue]()
            for structure0 in slotTypeValuesContainer {
                slotTypeValuesDecoded0?.append(structure0)
            }
        }
        slotTypeValues = slotTypeValuesDecoded0
        let valueSelectionSettingDecoded = try containerValues.decodeIfPresent(SlotValueSelectionSetting.self, forKey: .valueSelectionSetting)
        valueSelectionSetting = valueSelectionSettingDecoded
        let parentSlotTypeSignatureDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parentSlotTypeSignature)
        parentSlotTypeSignature = parentSlotTypeSignatureDecoded
    }
}
