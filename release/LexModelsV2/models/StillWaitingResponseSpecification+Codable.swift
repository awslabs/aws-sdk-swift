// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StillWaitingResponseSpecification: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allowInterrupt
        case frequencyInSeconds
        case messageGroups
        case timeoutInSeconds
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowInterrupt = allowInterrupt {
            try encodeContainer.encode(allowInterrupt, forKey: .allowInterrupt)
        }
        if let frequencyInSeconds = frequencyInSeconds {
            try encodeContainer.encode(frequencyInSeconds, forKey: .frequencyInSeconds)
        }
        if let messageGroups = messageGroups {
            var messageGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .messageGroups)
            for messagegroupslist0 in messageGroups {
                try messageGroupsContainer.encode(messagegroupslist0)
            }
        }
        if let timeoutInSeconds = timeoutInSeconds {
            try encodeContainer.encode(timeoutInSeconds, forKey: .timeoutInSeconds)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageGroupsContainer = try containerValues.decodeIfPresent([MessageGroup].self, forKey: .messageGroups)
        var messageGroupsDecoded0:[MessageGroup]? = nil
        if let messageGroupsContainer = messageGroupsContainer {
            messageGroupsDecoded0 = [MessageGroup]()
            for structure0 in messageGroupsContainer {
                messageGroupsDecoded0?.append(structure0)
            }
        }
        messageGroups = messageGroupsDecoded0
        let frequencyInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .frequencyInSeconds)
        frequencyInSeconds = frequencyInSecondsDecoded
        let timeoutInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .timeoutInSeconds)
        timeoutInSeconds = timeoutInSecondsDecoded
        let allowInterruptDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .allowInterrupt)
        allowInterrupt = allowInterruptDecoded
    }
}
