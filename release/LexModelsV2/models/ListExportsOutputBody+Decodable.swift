// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListExportsOutputBody: Equatable {
    public let botId: String?
    public let botVersion: String?
    public let exportSummaries: [ExportSummary]?
    public let nextToken: String?
}

extension ListExportsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case botId
        case botVersion
        case exportSummaries
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let botIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .botId)
        botId = botIdDecoded
        let botVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .botVersion)
        botVersion = botVersionDecoded
        let exportSummariesContainer = try containerValues.decodeIfPresent([ExportSummary].self, forKey: .exportSummaries)
        var exportSummariesDecoded0:[ExportSummary]? = nil
        if let exportSummariesContainer = exportSummariesContainer {
            exportSummariesDecoded0 = [ExportSummary]()
            for structure0 in exportSummariesContainer {
                exportSummariesDecoded0?.append(structure0)
            }
        }
        exportSummaries = exportSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
