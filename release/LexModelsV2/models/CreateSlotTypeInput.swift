// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateSlotTypeInput: Equatable {
    /// <p>The identifier of the bot associated with this slot type.</p>
    public let botId: String?
    /// <p>The identifier of the bot version associated with this slot
    ///          type.</p>
    public let botVersion: String?
    /// <p>A description of the slot type. Use the description to help identify
    ///          the slot type in lists.</p>
    public let description: String?
    /// <p>The identifier of the language and locale that the slot type will be
    ///          used in. The string must match one of the supported locales. All of the
    ///          bots, intents, and slots used by the slot type must have the same
    ///          locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.</p>
    public let localeId: String?
    /// <p>The built-in slot type used as a parent of this slot type. When you
    ///          define a parent slot type, the new slot type has the configuration of
    ///          the parent slot type.</p>
    ///          <p>Only <code>AMAZON.AlphaNumeric</code> is supported.</p>
    public let parentSlotTypeSignature: String?
    /// <p>The name for the slot. A slot type name must be unique within the
    ///          account.</p>
    public let slotTypeName: String?
    /// <p>A list of <code>SlotTypeValue</code> objects that defines the values
    ///          that the slot type can take. Each value can have a list of synonyms,
    ///          additional values that help train the machine learning model about the
    ///          values that it resolves for a slot.</p>
    public let slotTypeValues: [SlotTypeValue]?
    /// <p>Determines the strategy that Amazon Lex uses to select a value from the
    ///          list of possible values. The field can be set to one of the following
    ///          values:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>OriginalValue</code> - Returns the value entered by the
    ///                user, if the user value is similar to the slot value.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TopResolution</code> - If there is a resolution list for
    ///                the slot, return the first value in the resolution list. If there
    ///                is no resolution list, return null.</p>
    ///             </li>
    ///          </ul>
    ///          <p>If you don't specify the <code>valueSelectionSetting</code>
    ///          parameter, the default is <code>OriginalValue</code>.</p>
    public let valueSelectionSetting: SlotValueSelectionSetting?

    public init (
        botId: String? = nil,
        botVersion: String? = nil,
        description: String? = nil,
        localeId: String? = nil,
        parentSlotTypeSignature: String? = nil,
        slotTypeName: String? = nil,
        slotTypeValues: [SlotTypeValue]? = nil,
        valueSelectionSetting: SlotValueSelectionSetting? = nil
    )
    {
        self.botId = botId
        self.botVersion = botVersion
        self.description = description
        self.localeId = localeId
        self.parentSlotTypeSignature = parentSlotTypeSignature
        self.slotTypeName = slotTypeName
        self.slotTypeValues = slotTypeValues
        self.valueSelectionSetting = valueSelectionSetting
    }
}
