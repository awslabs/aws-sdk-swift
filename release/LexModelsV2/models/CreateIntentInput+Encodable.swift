// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateIntentInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description
        case dialogCodeHook
        case fulfillmentCodeHook
        case inputContexts
        case intentClosingSetting
        case intentConfirmationSetting
        case intentName
        case kendraConfiguration
        case outputContexts
        case parentIntentSignature
        case sampleUtterances
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let dialogCodeHook = dialogCodeHook {
            try encodeContainer.encode(dialogCodeHook, forKey: .dialogCodeHook)
        }
        if let fulfillmentCodeHook = fulfillmentCodeHook {
            try encodeContainer.encode(fulfillmentCodeHook, forKey: .fulfillmentCodeHook)
        }
        if let inputContexts = inputContexts {
            var inputContextsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputContexts)
            for inputcontextslist0 in inputContexts {
                try inputContextsContainer.encode(inputcontextslist0)
            }
        }
        if let intentClosingSetting = intentClosingSetting {
            try encodeContainer.encode(intentClosingSetting, forKey: .intentClosingSetting)
        }
        if let intentConfirmationSetting = intentConfirmationSetting {
            try encodeContainer.encode(intentConfirmationSetting, forKey: .intentConfirmationSetting)
        }
        if let intentName = intentName {
            try encodeContainer.encode(intentName, forKey: .intentName)
        }
        if let kendraConfiguration = kendraConfiguration {
            try encodeContainer.encode(kendraConfiguration, forKey: .kendraConfiguration)
        }
        if let outputContexts = outputContexts {
            var outputContextsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputContexts)
            for outputcontextslist0 in outputContexts {
                try outputContextsContainer.encode(outputcontextslist0)
            }
        }
        if let parentIntentSignature = parentIntentSignature {
            try encodeContainer.encode(parentIntentSignature, forKey: .parentIntentSignature)
        }
        if let sampleUtterances = sampleUtterances {
            var sampleUtterancesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sampleUtterances)
            for sampleutteranceslist0 in sampleUtterances {
                try sampleUtterancesContainer.encode(sampleutteranceslist0)
            }
        }
    }
}
