// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ImportSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationDateTime
        case importId
        case importStatus
        case importedResourceId
        case importedResourceName
        case lastUpdatedDateTime
        case mergeStrategy
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDateTime = creationDateTime {
            try encodeContainer.encode(creationDateTime.timeIntervalSince1970, forKey: .creationDateTime)
        }
        if let importId = importId {
            try encodeContainer.encode(importId, forKey: .importId)
        }
        if let importStatus = importStatus {
            try encodeContainer.encode(importStatus.rawValue, forKey: .importStatus)
        }
        if let importedResourceId = importedResourceId {
            try encodeContainer.encode(importedResourceId, forKey: .importedResourceId)
        }
        if let importedResourceName = importedResourceName {
            try encodeContainer.encode(importedResourceName, forKey: .importedResourceName)
        }
        if let lastUpdatedDateTime = lastUpdatedDateTime {
            try encodeContainer.encode(lastUpdatedDateTime.timeIntervalSince1970, forKey: .lastUpdatedDateTime)
        }
        if let mergeStrategy = mergeStrategy {
            try encodeContainer.encode(mergeStrategy.rawValue, forKey: .mergeStrategy)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .importId)
        importId = importIdDecoded
        let importedResourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .importedResourceId)
        importedResourceId = importedResourceIdDecoded
        let importedResourceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .importedResourceName)
        importedResourceName = importedResourceNameDecoded
        let importStatusDecoded = try containerValues.decodeIfPresent(ImportStatus.self, forKey: .importStatus)
        importStatus = importStatusDecoded
        let mergeStrategyDecoded = try containerValues.decodeIfPresent(MergeStrategy.self, forKey: .mergeStrategy)
        mergeStrategy = mergeStrategyDecoded
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let lastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedDateTime)
        lastUpdatedDateTime = lastUpdatedDateTimeDecoded
    }
}
