// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SlotTypeSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description
        case lastUpdatedDateTime
        case parentSlotTypeSignature
        case slotTypeId
        case slotTypeName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lastUpdatedDateTime = lastUpdatedDateTime {
            try encodeContainer.encode(lastUpdatedDateTime.timeIntervalSince1970, forKey: .lastUpdatedDateTime)
        }
        if let parentSlotTypeSignature = parentSlotTypeSignature {
            try encodeContainer.encode(parentSlotTypeSignature, forKey: .parentSlotTypeSignature)
        }
        if let slotTypeId = slotTypeId {
            try encodeContainer.encode(slotTypeId, forKey: .slotTypeId)
        }
        if let slotTypeName = slotTypeName {
            try encodeContainer.encode(slotTypeName, forKey: .slotTypeName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let slotTypeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .slotTypeId)
        slotTypeId = slotTypeIdDecoded
        let slotTypeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .slotTypeName)
        slotTypeName = slotTypeNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let parentSlotTypeSignatureDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parentSlotTypeSignature)
        parentSlotTypeSignature = parentSlotTypeSignatureDecoded
        let lastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedDateTime)
        lastUpdatedDateTime = lastUpdatedDateTimeDecoded
    }
}
