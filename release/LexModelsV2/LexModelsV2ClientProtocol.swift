// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p></p>
public protocol LexModelsV2ClientProtocol {
    /// <p>Builds a bot, its intents, and its slot types into a specific
    ///          locale. A bot can be built into multiple locales. At runtime the locale
    ///          is used to choose a specific build of the bot.</p>
    func buildBotLocale(input: BuildBotLocaleInput, completion: @escaping (SdkResult<BuildBotLocaleOutputResponse, BuildBotLocaleOutputError>) -> Void)
    /// <p>Creates an Amazon Lex conversational bot. </p>
    func createBot(input: CreateBotInput, completion: @escaping (SdkResult<CreateBotOutputResponse, CreateBotOutputError>) -> Void)
    /// <p>Creates an alias for the specified version of a bot. Use an alias to
    ///          enable you to change the version of a bot without updating applications
    ///          that use the bot.</p>
    ///          <p>For example, you can create an alias called "PROD" that your
    ///          applications use to call the Amazon Lex bot. </p>
    func createBotAlias(input: CreateBotAliasInput, completion: @escaping (SdkResult<CreateBotAliasOutputResponse, CreateBotAliasOutputError>) -> Void)
    /// <p>Creates a locale in the bot. The locale contains the intents and
    ///          slot types that the bot uses in conversations with users in the
    ///          specified language and locale. You must add a locale to a bot before
    ///          you can add intents and slot types to the bot.</p>
    func createBotLocale(input: CreateBotLocaleInput, completion: @escaping (SdkResult<CreateBotLocaleOutputResponse, CreateBotLocaleOutputError>) -> Void)
    /// <p>Creates a new version of the bot based on the <code>DRAFT</code>
    ///          version. If the <code>DRAFT</code> version of this resource hasn't
    ///          changed since you created the last version, Amazon Lex doesn't create a new
    ///          version, it returns the last created version.</p>
    ///          <p>When you create the first version of a bot, Amazon Lex sets the version
    ///          to 1. Subsequent versions increment by 1.</p>
    func createBotVersion(input: CreateBotVersionInput, completion: @escaping (SdkResult<CreateBotVersionOutputResponse, CreateBotVersionOutputError>) -> Void)
    /// <p>Creates a zip archive containing the contents of a bot or a bot
    ///          locale. The archive contains a directory structure that contains JSON
    ///          files that define the bot.</p>
    ///          <p>You can create an archive that contains the complete definition of a
    ///          bot, or you can specify that the archive contain only the definition of
    ///          a single bot locale.</p>
    ///          <p>For more information about exporting bots, and about the structure
    ///          of the export archive, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/importing-exporting.html"> Importing and
    ///             exporting bots </a>
    ///          </p>
    func createExport(input: CreateExportInput, completion: @escaping (SdkResult<CreateExportOutputResponse, CreateExportOutputError>) -> Void)
    /// <p>Creates an intent.</p>
    ///          <p>To define the interaction between the user and your bot, you define
    ///          one or more intents. For example, for a pizza ordering bot you would
    ///          create an <code>OrderPizza</code> intent.</p>
    ///          <p>When you create an intent, you must provide a name. You can
    ///          optionally provide the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Sample utterances. For example, "I want to order a pizza" and
    ///                "Can I order a pizza." You can't provide utterances for built-in
    ///                intents.</p>
    ///             </li>
    ///             <li>
    ///                <p>Information to be gathered. You specify slots for the
    ///                information that you bot requests from the user. You can specify
    ///                standard slot types, such as date and time, or custom slot types
    ///                for your application.</p>
    ///             </li>
    ///             <li>
    ///                <p>How the intent is fulfilled. You can provide a Lambda function
    ///                or configure the intent to return the intent information to your
    ///                client application. If you use a Lambda function, Amazon Lex invokes
    ///                the function when all of the intent information is
    ///                available.</p>
    ///             </li>
    ///             <li>
    ///                <p>A confirmation prompt to send to the user to confirm an
    ///                intent. For example, "Shall I order your pizza?"</p>
    ///             </li>
    ///             <li>
    ///                <p>A conclusion statement to send to the user after the intent is
    ///                fulfilled. For example, "I ordered your pizza."</p>
    ///             </li>
    ///             <li>
    ///                <p>A follow-up prompt that asks the user for additional activity.
    ///                For example, "Do you want a drink with your pizza?"</p>
    ///             </li>
    ///          </ul>
    func createIntent(input: CreateIntentInput, completion: @escaping (SdkResult<CreateIntentOutputResponse, CreateIntentOutputError>) -> Void)
    /// <p>Creates a new resource policy with the specified policy
    ///          statements.</p>
    func createResourcePolicy(input: CreateResourcePolicyInput, completion: @escaping (SdkResult<CreateResourcePolicyOutputResponse, CreateResourcePolicyOutputError>) -> Void)
    /// <p>Adds a new resource policy statement to a bot or bot alias. If a
    ///          resource policy exists, the statement is added to the current resource
    ///          policy. If a policy doesn't exist, a new policy is created.</p>
    ///          <p>You can create a resource policy statement that allows cross-account
    ///          access.</p>
    func createResourcePolicyStatement(input: CreateResourcePolicyStatementInput, completion: @escaping (SdkResult<CreateResourcePolicyStatementOutputResponse, CreateResourcePolicyStatementOutputError>) -> Void)
    /// <p>Creates a slot in an intent. A slot is a variable needed to fulfill
    ///          an intent. For example, an <code>OrderPizza</code> intent might need
    ///          slots for size, crust, and number of pizzas. For each slot, you define
    ///          one or more utterances that Amazon Lex uses to elicit a response from the
    ///          user. </p>
    func createSlot(input: CreateSlotInput, completion: @escaping (SdkResult<CreateSlotOutputResponse, CreateSlotOutputError>) -> Void)
    /// <p>Creates a custom slot type</p>
    ///          <p> To create a custom slot type, specify a name for the slot type and
    ///          a set of enumeration values, the values that a slot of this type can
    ///          assume. </p>
    func createSlotType(input: CreateSlotTypeInput, completion: @escaping (SdkResult<CreateSlotTypeOutputResponse, CreateSlotTypeOutputError>) -> Void)
    /// <p>Gets a pre-signed S3 write URL that you use to upload the zip
    ///          archive when importing a bot or a bot locale. </p>
    func createUploadUrl(input: CreateUploadUrlInput, completion: @escaping (SdkResult<CreateUploadUrlOutputResponse, CreateUploadUrlOutputError>) -> Void)
    /// <p>Deletes all versions of a bot, including the <code>Draft</code>
    ///          version. To delete a specific version, use the
    ///             <code>DeleteBotVersion</code> operation.</p>
    ///          <p>When you delete a bot, all of the resources contained in the bot are
    ///          also deleted. Deleting a bot removes all locales, intents, slot, and
    ///          slot types defined for the bot.</p>
    ///          <p>If a bot has an alias, the <code>DeleteBot</code> operation returns
    ///          a <code>ResourceInUseException</code> exception. If you want to delete
    ///          the bot and the alias, set the <code>skipResourceInUseCheck</code>
    ///          parameter to <code>true</code>.</p>
    func deleteBot(input: DeleteBotInput, completion: @escaping (SdkResult<DeleteBotOutputResponse, DeleteBotOutputError>) -> Void)
    /// <p>Deletes the specified bot alias.</p>
    func deleteBotAlias(input: DeleteBotAliasInput, completion: @escaping (SdkResult<DeleteBotAliasOutputResponse, DeleteBotAliasOutputError>) -> Void)
    /// <p>Removes a locale from a bot.</p>
    ///          <p>When you delete a locale, all intents, slots, and slot types defined
    ///          for the locale are also deleted.</p>
    func deleteBotLocale(input: DeleteBotLocaleInput, completion: @escaping (SdkResult<DeleteBotLocaleOutputResponse, DeleteBotLocaleOutputError>) -> Void)
    /// <p>Deletes a specific version of a bot. To delete all version of a bot,
    ///          use the <a>DeleteBot</a> operation.</p>
    func deleteBotVersion(input: DeleteBotVersionInput, completion: @escaping (SdkResult<DeleteBotVersionOutputResponse, DeleteBotVersionOutputError>) -> Void)
    /// <p>Removes a previous export and the associated files stored in an S3
    ///          bucket.</p>
    func deleteExport(input: DeleteExportInput, completion: @escaping (SdkResult<DeleteExportOutputResponse, DeleteExportOutputError>) -> Void)
    /// <p>Removes a previous import and the associated file stored in an S3
    ///          bucket.</p>
    func deleteImport(input: DeleteImportInput, completion: @escaping (SdkResult<DeleteImportOutputResponse, DeleteImportOutputError>) -> Void)
    /// <p>Removes the specified intent.</p>
    ///          <p>Deleting an intent also deletes the slots associated with the
    ///          intent.</p>
    func deleteIntent(input: DeleteIntentInput, completion: @escaping (SdkResult<DeleteIntentOutputResponse, DeleteIntentOutputError>) -> Void)
    /// <p>Removes an existing policy from a bot or bot alias. If the resource
    ///          doesn't have a policy attached, Amazon Lex returns an exception.</p>
    func deleteResourcePolicy(input: DeleteResourcePolicyInput, completion: @escaping (SdkResult<DeleteResourcePolicyOutputResponse, DeleteResourcePolicyOutputError>) -> Void)
    /// <p>Deletes a policy statement from a resource policy. If you delete the
    ///          last statement from a policy, the policy is deleted. If you specify a
    ///          statement ID that doesn't exist in the policy, or if the bot or bot
    ///          alias doesn't have a policy attached, Amazon Lex returns an
    ///          exception.</p>
    func deleteResourcePolicyStatement(input: DeleteResourcePolicyStatementInput, completion: @escaping (SdkResult<DeleteResourcePolicyStatementOutputResponse, DeleteResourcePolicyStatementOutputError>) -> Void)
    /// <p>Deletes the specified slot from an intent.</p>
    func deleteSlot(input: DeleteSlotInput, completion: @escaping (SdkResult<DeleteSlotOutputResponse, DeleteSlotOutputError>) -> Void)
    /// <p>Deletes a slot type from a bot locale.</p>
    ///          <p>If a slot is using the slot type, Amazon Lex throws a
    ///             <code>ResourceInUseException</code> exception. To avoid the
    ///          exception, set the <code>skipResourceInUseCheck</code> parameter to
    ///             <code>true</code>.</p>
    func deleteSlotType(input: DeleteSlotTypeInput, completion: @escaping (SdkResult<DeleteSlotTypeOutputResponse, DeleteSlotTypeOutputError>) -> Void)
    /// <p>Provides metadata information about a bot. </p>
    func describeBot(input: DescribeBotInput, completion: @escaping (SdkResult<DescribeBotOutputResponse, DescribeBotOutputError>) -> Void)
    /// <p>Get information about a specific bot alias.</p>
    func describeBotAlias(input: DescribeBotAliasInput, completion: @escaping (SdkResult<DescribeBotAliasOutputResponse, DescribeBotAliasOutputError>) -> Void)
    /// <p>Describes the settings that a bot has for a specific locale. </p>
    func describeBotLocale(input: DescribeBotLocaleInput, completion: @escaping (SdkResult<DescribeBotLocaleOutputResponse, DescribeBotLocaleOutputError>) -> Void)
    /// <p>Provides metadata about a version of a bot.</p>
    func describeBotVersion(input: DescribeBotVersionInput, completion: @escaping (SdkResult<DescribeBotVersionOutputResponse, DescribeBotVersionOutputError>) -> Void)
    /// <p>Gets information about a specific export.</p>
    func describeExport(input: DescribeExportInput, completion: @escaping (SdkResult<DescribeExportOutputResponse, DescribeExportOutputError>) -> Void)
    /// <p>Gets information about a specific import.</p>
    func describeImport(input: DescribeImportInput, completion: @escaping (SdkResult<DescribeImportOutputResponse, DescribeImportOutputError>) -> Void)
    /// <p>Returns metadata about an intent.</p>
    func describeIntent(input: DescribeIntentInput, completion: @escaping (SdkResult<DescribeIntentOutputResponse, DescribeIntentOutputError>) -> Void)
    /// <p>Gets the resource policy and policy revision for a bot or bot
    ///          alias.</p>
    func describeResourcePolicy(input: DescribeResourcePolicyInput, completion: @escaping (SdkResult<DescribeResourcePolicyOutputResponse, DescribeResourcePolicyOutputError>) -> Void)
    /// <p>Gets metadata information about a slot.</p>
    func describeSlot(input: DescribeSlotInput, completion: @escaping (SdkResult<DescribeSlotOutputResponse, DescribeSlotOutputError>) -> Void)
    /// <p>Gets metadata information about a slot type.</p>
    func describeSlotType(input: DescribeSlotTypeInput, completion: @escaping (SdkResult<DescribeSlotTypeOutputResponse, DescribeSlotTypeOutputError>) -> Void)
    /// <p>Gets a list of aliases for the specified bot.</p>
    func listBotAliases(input: ListBotAliasesInput, completion: @escaping (SdkResult<ListBotAliasesOutputResponse, ListBotAliasesOutputError>) -> Void)
    /// <p>Gets a list of locales for the specified bot.</p>
    func listBotLocales(input: ListBotLocalesInput, completion: @escaping (SdkResult<ListBotLocalesOutputResponse, ListBotLocalesOutputError>) -> Void)
    /// <p>Gets a list of available bots.</p>
    func listBots(input: ListBotsInput, completion: @escaping (SdkResult<ListBotsOutputResponse, ListBotsOutputError>) -> Void)
    /// <p>Gets information about all of the versions of a bot.</p>
    ///          <p>The <code>ListBotVersions</code> operation returns a summary of each
    ///          version of a bot. For example, if a bot has three numbered versions,
    ///          the <code>ListBotVersions</code> operation returns for summaries, one
    ///          for each numbered version and one for the <code>DRAFT</code>
    ///          version.</p>
    ///          <p>The <code>ListBotVersions</code> operation always returns at least
    ///          one version, the <code>DRAFT</code> version.</p>
    func listBotVersions(input: ListBotVersionsInput, completion: @escaping (SdkResult<ListBotVersionsOutputResponse, ListBotVersionsOutputError>) -> Void)
    /// <p>Gets a list of built-in intents provided by Amazon Lex that you can use
    ///          in your bot. </p>
    ///          <p>To use a built-in intent as a the base for your own intent, include
    ///          the built-in intent signature in the <code>parentIntentSignature</code>
    ///          parameter when you call the <code>CreateIntent</code> operation. For
    ///          more information, see <a>CreateIntent</a>.</p>
    func listBuiltInIntents(input: ListBuiltInIntentsInput, completion: @escaping (SdkResult<ListBuiltInIntentsOutputResponse, ListBuiltInIntentsOutputError>) -> Void)
    /// <p>Gets a list of built-in slot types that meet the specified
    ///          criteria.</p>
    func listBuiltInSlotTypes(input: ListBuiltInSlotTypesInput, completion: @escaping (SdkResult<ListBuiltInSlotTypesOutputResponse, ListBuiltInSlotTypesOutputError>) -> Void)
    /// <p>Lists the exports for a bot or bot locale. Exports are kept in the list for 7
    ///          days.</p>
    func listExports(input: ListExportsInput, completion: @escaping (SdkResult<ListExportsOutputResponse, ListExportsOutputError>) -> Void)
    /// <p>Lists the imports for a bot or bot locale. Imports are kept in the list for 7
    ///          days.</p>
    func listImports(input: ListImportsInput, completion: @escaping (SdkResult<ListImportsOutputResponse, ListImportsOutputError>) -> Void)
    /// <p>Get a list of intents that meet the specified criteria.</p>
    func listIntents(input: ListIntentsInput, completion: @escaping (SdkResult<ListIntentsOutputResponse, ListIntentsOutputError>) -> Void)
    /// <p>Gets a list of slots that match the specified criteria.</p>
    func listSlots(input: ListSlotsInput, completion: @escaping (SdkResult<ListSlotsOutputResponse, ListSlotsOutputError>) -> Void)
    /// <p>Gets a list of slot types that match the specified criteria.</p>
    func listSlotTypes(input: ListSlotTypesInput, completion: @escaping (SdkResult<ListSlotTypesOutputResponse, ListSlotTypesOutputError>) -> Void)
    /// <p>Gets a list of tags associated with a resource. Only bots, bot
    ///          aliases, and bot channels can have tags associated with them.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p>Starts importing a bot or bot locale from a zip archive that you
    ///          uploaded to an S3 bucket.</p>
    func startImport(input: StartImportInput, completion: @escaping (SdkResult<StartImportOutputResponse, StartImportOutputError>) -> Void)
    /// <p>Adds the specified tags to the specified resource. If a tag key
    ///          already exists, the existing value is replaced with the new
    ///          value.</p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p>Removes tags from a bot, bot alias, or bot channel.</p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// <p>Updates the configuration of an existing bot. </p>
    func updateBot(input: UpdateBotInput, completion: @escaping (SdkResult<UpdateBotOutputResponse, UpdateBotOutputError>) -> Void)
    /// <p>Updates the configuration of an existing bot alias.</p>
    func updateBotAlias(input: UpdateBotAliasInput, completion: @escaping (SdkResult<UpdateBotAliasOutputResponse, UpdateBotAliasOutputError>) -> Void)
    /// <p>Updates the settings that a bot has for a specific locale.</p>
    func updateBotLocale(input: UpdateBotLocaleInput, completion: @escaping (SdkResult<UpdateBotLocaleOutputResponse, UpdateBotLocaleOutputError>) -> Void)
    /// <p>Updates the password used to encrypt an export zip archive.</p>
    func updateExport(input: UpdateExportInput, completion: @escaping (SdkResult<UpdateExportOutputResponse, UpdateExportOutputError>) -> Void)
    /// <p>Updates the settings for an intent.</p>
    func updateIntent(input: UpdateIntentInput, completion: @escaping (SdkResult<UpdateIntentOutputResponse, UpdateIntentOutputError>) -> Void)
    /// <p>Replaces the existing resource policy for a bot or bot alias with a
    ///          new one. If the policy doesn't exist, Amazon Lex returns an
    ///          exception.</p>
    func updateResourcePolicy(input: UpdateResourcePolicyInput, completion: @escaping (SdkResult<UpdateResourcePolicyOutputResponse, UpdateResourcePolicyOutputError>) -> Void)
    /// <p>Updates the settings for a slot.</p>
    func updateSlot(input: UpdateSlotInput, completion: @escaping (SdkResult<UpdateSlotOutputResponse, UpdateSlotOutputError>) -> Void)
    /// <p>Updates the configuration of an existing slot type.</p>
    func updateSlotType(input: UpdateSlotTypeInput, completion: @escaping (SdkResult<UpdateSlotTypeOutputResponse, UpdateSlotTypeOutputError>) -> Void)
}
