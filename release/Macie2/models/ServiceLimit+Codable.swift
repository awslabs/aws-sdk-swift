// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ServiceLimit: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case isServiceLimited = "isServiceLimited"
        case unit = "unit"
        case value = "value"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if isServiceLimited != false {
            try encodeContainer.encode(isServiceLimited, forKey: .isServiceLimited)
        }
        if let unit = unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
        if value != 0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isServiceLimitedDecoded = try containerValues.decode(Bool.self, forKey: .isServiceLimited)
        isServiceLimited = isServiceLimitedDecoded
        let unitDecoded = try containerValues.decodeIfPresent(Unit.self, forKey: .unit)
        unit = unitDecoded
        let valueDecoded = try containerValues.decode(Int.self, forKey: .value)
        value = valueDecoded
    }
}
