// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Finding: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountId = "accountId"
        case archived = "archived"
        case category = "category"
        case classificationDetails = "classificationDetails"
        case count = "count"
        case createdAt = "createdAt"
        case description = "description"
        case id = "id"
        case partition = "partition"
        case policyDetails = "policyDetails"
        case region = "region"
        case resourcesAffected = "resourcesAffected"
        case sample = "sample"
        case schemaVersion = "schemaVersion"
        case severity = "severity"
        case title = "title"
        case type = "type"
        case updatedAt = "updatedAt"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if archived != false {
            try encodeContainer.encode(archived, forKey: .archived)
        }
        if let category = category {
            try encodeContainer.encode(category.rawValue, forKey: .category)
        }
        if let classificationDetails = classificationDetails {
            try encodeContainer.encode(classificationDetails, forKey: .classificationDetails)
        }
        if count != 0 {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let partition = partition {
            try encodeContainer.encode(partition, forKey: .partition)
        }
        if let policyDetails = policyDetails {
            try encodeContainer.encode(policyDetails, forKey: .policyDetails)
        }
        if let region = region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let resourcesAffected = resourcesAffected {
            try encodeContainer.encode(resourcesAffected, forKey: .resourcesAffected)
        }
        if sample != false {
            try encodeContainer.encode(sample, forKey: .sample)
        }
        if let schemaVersion = schemaVersion {
            try encodeContainer.encode(schemaVersion, forKey: .schemaVersion)
        }
        if let severity = severity {
            try encodeContainer.encode(severity, forKey: .severity)
        }
        if let title = title {
            try encodeContainer.encode(title, forKey: .title)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let updatedAt = updatedAt {
            try encodeContainer.encode(updatedAt.timeIntervalSince1970, forKey: .updatedAt)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let archivedDecoded = try containerValues.decode(Bool.self, forKey: .archived)
        archived = archivedDecoded
        let categoryDecoded = try containerValues.decodeIfPresent(FindingCategory.self, forKey: .category)
        category = categoryDecoded
        let classificationDetailsDecoded = try containerValues.decodeIfPresent(ClassificationDetails.self, forKey: .classificationDetails)
        classificationDetails = classificationDetailsDecoded
        let countDecoded = try containerValues.decode(Int.self, forKey: .count)
        count = countDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let partitionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .partition)
        partition = partitionDecoded
        let policyDetailsDecoded = try containerValues.decodeIfPresent(PolicyDetails.self, forKey: .policyDetails)
        policyDetails = policyDetailsDecoded
        let regionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .region)
        region = regionDecoded
        let resourcesAffectedDecoded = try containerValues.decodeIfPresent(ResourcesAffected.self, forKey: .resourcesAffected)
        resourcesAffected = resourcesAffectedDecoded
        let sampleDecoded = try containerValues.decode(Bool.self, forKey: .sample)
        sample = sampleDecoded
        let schemaVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .schemaVersion)
        schemaVersion = schemaVersionDecoded
        let severityDecoded = try containerValues.decodeIfPresent(Severity.self, forKey: .severity)
        severity = severityDecoded
        let titleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .title)
        title = titleDecoded
        let typeDecoded = try containerValues.decodeIfPresent(FindingType.self, forKey: .type)
        type = typeDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}
