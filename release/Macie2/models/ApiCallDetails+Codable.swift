// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ApiCallDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case api = "api"
        case apiServiceName = "apiServiceName"
        case firstSeen = "firstSeen"
        case lastSeen = "lastSeen"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let api = api {
            try encodeContainer.encode(api, forKey: .api)
        }
        if let apiServiceName = apiServiceName {
            try encodeContainer.encode(apiServiceName, forKey: .apiServiceName)
        }
        if let firstSeen = firstSeen {
            try encodeContainer.encode(firstSeen.timeIntervalSince1970, forKey: .firstSeen)
        }
        if let lastSeen = lastSeen {
            try encodeContainer.encode(lastSeen.timeIntervalSince1970, forKey: .lastSeen)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apiDecoded = try containerValues.decodeIfPresent(String.self, forKey: .api)
        api = apiDecoded
        let apiServiceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .apiServiceName)
        apiServiceName = apiServiceNameDecoded
        let firstSeenDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .firstSeen)
        firstSeen = firstSeenDecoded
        let lastSeenDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastSeen)
        lastSeen = lastSeenDecoded
    }
}
