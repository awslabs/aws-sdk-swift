// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeClassificationJobOutputBody: Equatable {
    public let clientToken: String?
    public let createdAt: Date?
    public let customDataIdentifierIds: [String]?
    public let description: String?
    public let initialRun: Bool
    public let jobArn: String?
    public let jobId: String?
    public let jobStatus: JobStatus?
    public let jobType: JobType?
    public let lastRunErrorStatus: LastRunErrorStatus?
    public let lastRunTime: Date?
    public let name: String?
    public let s3JobDefinition: S3JobDefinition?
    public let samplingPercentage: Int
    public let scheduleFrequency: JobScheduleFrequency?
    public let statistics: Statistics?
    public let tags: [String:String]?
    public let userPausedDetails: UserPausedDetails?
}

extension DescribeClassificationJobOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientToken = "clientToken"
        case createdAt = "createdAt"
        case customDataIdentifierIds = "customDataIdentifierIds"
        case description = "description"
        case initialRun = "initialRun"
        case jobArn = "jobArn"
        case jobId = "jobId"
        case jobStatus = "jobStatus"
        case jobType = "jobType"
        case lastRunErrorStatus = "lastRunErrorStatus"
        case lastRunTime = "lastRunTime"
        case name = "name"
        case s3JobDefinition = "s3JobDefinition"
        case samplingPercentage = "samplingPercentage"
        case scheduleFrequency = "scheduleFrequency"
        case statistics = "statistics"
        case tags = "tags"
        case userPausedDetails = "userPausedDetails"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let customDataIdentifierIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .customDataIdentifierIds)
        var customDataIdentifierIdsDecoded0:[String]? = nil
        if let customDataIdentifierIdsContainer = customDataIdentifierIdsContainer {
            customDataIdentifierIdsDecoded0 = [String]()
            for string0 in customDataIdentifierIdsContainer {
                customDataIdentifierIdsDecoded0?.append(string0)
            }
        }
        customDataIdentifierIds = customDataIdentifierIdsDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let initialRunDecoded = try containerValues.decode(Bool.self, forKey: .initialRun)
        initialRun = initialRunDecoded
        let jobArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let jobIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let jobTypeDecoded = try containerValues.decodeIfPresent(JobType.self, forKey: .jobType)
        jobType = jobTypeDecoded
        let lastRunErrorStatusDecoded = try containerValues.decodeIfPresent(LastRunErrorStatus.self, forKey: .lastRunErrorStatus)
        lastRunErrorStatus = lastRunErrorStatusDecoded
        let lastRunTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastRunTime)
        lastRunTime = lastRunTimeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let s3JobDefinitionDecoded = try containerValues.decodeIfPresent(S3JobDefinition.self, forKey: .s3JobDefinition)
        s3JobDefinition = s3JobDefinitionDecoded
        let samplingPercentageDecoded = try containerValues.decode(Int.self, forKey: .samplingPercentage)
        samplingPercentage = samplingPercentageDecoded
        let scheduleFrequencyDecoded = try containerValues.decodeIfPresent(JobScheduleFrequency.self, forKey: .scheduleFrequency)
        scheduleFrequency = scheduleFrequencyDecoded
        let statisticsDecoded = try containerValues.decodeIfPresent(Statistics.self, forKey: .statistics)
        statistics = statisticsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, __string0) in tagsContainer {
                tagsDecoded0?[key0] = __string0
            }
        }
        tags = tagsDecoded0
        let userPausedDetailsDecoded = try containerValues.decodeIfPresent(UserPausedDetails.self, forKey: .userPausedDetails)
        userPausedDetails = userPausedDetailsDecoded
    }
}
