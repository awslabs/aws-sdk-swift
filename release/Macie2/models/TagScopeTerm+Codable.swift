// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TagScopeTerm: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case comparator = "comparator"
        case key = "key"
        case tagValues = "tagValues"
        case target = "target"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparator = comparator {
            try encodeContainer.encode(comparator.rawValue, forKey: .comparator)
        }
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let tagValues = tagValues {
            var tagValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagValues)
            for __listoftagvaluepair0 in tagValues {
                try tagValuesContainer.encode(__listoftagvaluepair0)
            }
        }
        if let target = target {
            try encodeContainer.encode(target.rawValue, forKey: .target)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let comparatorDecoded = try containerValues.decodeIfPresent(JobComparator.self, forKey: .comparator)
        comparator = comparatorDecoded
        let keyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .key)
        key = keyDecoded
        let tagValuesContainer = try containerValues.decodeIfPresent([TagValuePair].self, forKey: .tagValues)
        var tagValuesDecoded0:[TagValuePair]? = nil
        if let tagValuesContainer = tagValuesContainer {
            tagValuesDecoded0 = [TagValuePair]()
            for structure0 in tagValuesContainer {
                tagValuesDecoded0?.append(structure0)
            }
        }
        tagValues = tagValuesDecoded0
        let targetDecoded = try containerValues.decodeIfPresent(TagTarget.self, forKey: .target)
        target = targetDecoded
    }
}
