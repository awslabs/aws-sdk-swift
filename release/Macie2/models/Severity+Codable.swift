// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Severity: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "description"
        case score = "score"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description.rawValue, forKey: .description)
        }
        if score != 0 {
            try encodeContainer.encode(score, forKey: .score)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(SeverityDescription.self, forKey: .description)
        description = descriptionDecoded
        let scoreDecoded = try containerValues.decode(Int.self, forKey: .score)
        score = scoreDecoded
    }
}
