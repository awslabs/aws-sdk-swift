// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Provides information about an S3 object that a finding applies to.</p>
public struct S3Object: Equatable {
    /// <p>The file name extension of the object. If the object doesn't have a file name extension, this value is "".</p>
    public let `extension`: String?
    /// <p>The Amazon Resource Name (ARN) of the bucket that contains the object.</p>
    public let bucketArn: String?
    /// <p>The entity tag (ETag) that identifies the affected version of the object. If the object was overwritten or changed after Amazon Macie produced the finding, this value might be different from the current ETag for the object.</p>
    public let eTag: String?
    /// <p>The full key (name) that's assigned to the object.</p>
    public let key: String?
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the object was last modified.</p>
    public let lastModified: Date?
    /// <p>The path to the object, including the full key (name).</p>
    public let path: String?
    /// <p>Specifies whether the object is publicly accessible due to the combination of permissions settings that apply to the object.</p>
    public let publicAccess: Bool
    /// <p>The type of server-side encryption that's used to encrypt the object.</p>
    public let serverSideEncryption: ServerSideEncryption?
    /// <p>The total storage size, in bytes, of the object.</p>
    public let size: Int
    /// <p>The storage class of the object.</p>
    public let storageClass: StorageClass?
    /// <p>The tags that are associated with the object.</p>
    public let tags: [KeyValuePair]?
    /// <p>The identifier for the affected version of the object.</p>
    public let versionId: String?

    public init (
        `extension`: String? = nil,
        bucketArn: String? = nil,
        eTag: String? = nil,
        key: String? = nil,
        lastModified: Date? = nil,
        path: String? = nil,
        publicAccess: Bool = false,
        serverSideEncryption: ServerSideEncryption? = nil,
        size: Int = 0,
        storageClass: StorageClass? = nil,
        tags: [KeyValuePair]? = nil,
        versionId: String? = nil
    )
    {
        self.`extension` = `extension`
        self.bucketArn = bucketArn
        self.eTag = eTag
        self.key = key
        self.lastModified = lastModified
        self.path = path
        self.publicAccess = publicAccess
        self.serverSideEncryption = serverSideEncryption
        self.size = size
        self.storageClass = storageClass
        self.tags = tags
        self.versionId = versionId
    }
}
