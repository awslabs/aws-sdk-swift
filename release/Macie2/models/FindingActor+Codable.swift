// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FindingActor: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case domainDetails = "domainDetails"
        case ipAddressDetails = "ipAddressDetails"
        case userIdentity = "userIdentity"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainDetails = domainDetails {
            try encodeContainer.encode(domainDetails, forKey: .domainDetails)
        }
        if let ipAddressDetails = ipAddressDetails {
            try encodeContainer.encode(ipAddressDetails, forKey: .ipAddressDetails)
        }
        if let userIdentity = userIdentity {
            try encodeContainer.encode(userIdentity, forKey: .userIdentity)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDetailsDecoded = try containerValues.decodeIfPresent(DomainDetails.self, forKey: .domainDetails)
        domainDetails = domainDetailsDecoded
        let ipAddressDetailsDecoded = try containerValues.decodeIfPresent(IpAddressDetails.self, forKey: .ipAddressDetails)
        ipAddressDetails = ipAddressDetailsDecoded
        let userIdentityDecoded = try containerValues.decodeIfPresent(UserIdentity.self, forKey: .userIdentity)
        userIdentity = userIdentityDecoded
    }
}
