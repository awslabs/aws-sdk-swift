// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GroupCount: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case count = "count"
        case groupKey = "groupKey"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if count != 0 {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let groupKey = groupKey {
            try encodeContainer.encode(groupKey, forKey: .groupKey)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countDecoded = try containerValues.decode(Int.self, forKey: .count)
        count = countDecoded
        let groupKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .groupKey)
        groupKey = groupKeyDecoded
    }
}
