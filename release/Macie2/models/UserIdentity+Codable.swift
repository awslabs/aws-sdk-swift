// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UserIdentity: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case assumedRole = "assumedRole"
        case awsAccount = "awsAccount"
        case awsService = "awsService"
        case federatedUser = "federatedUser"
        case iamUser = "iamUser"
        case root = "root"
        case type = "type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assumedRole = assumedRole {
            try encodeContainer.encode(assumedRole, forKey: .assumedRole)
        }
        if let awsAccount = awsAccount {
            try encodeContainer.encode(awsAccount, forKey: .awsAccount)
        }
        if let awsService = awsService {
            try encodeContainer.encode(awsService, forKey: .awsService)
        }
        if let federatedUser = federatedUser {
            try encodeContainer.encode(federatedUser, forKey: .federatedUser)
        }
        if let iamUser = iamUser {
            try encodeContainer.encode(iamUser, forKey: .iamUser)
        }
        if let root = root {
            try encodeContainer.encode(root, forKey: .root)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assumedRoleDecoded = try containerValues.decodeIfPresent(AssumedRole.self, forKey: .assumedRole)
        assumedRole = assumedRoleDecoded
        let awsAccountDecoded = try containerValues.decodeIfPresent(AwsAccount.self, forKey: .awsAccount)
        awsAccount = awsAccountDecoded
        let awsServiceDecoded = try containerValues.decodeIfPresent(AwsService.self, forKey: .awsService)
        awsService = awsServiceDecoded
        let federatedUserDecoded = try containerValues.decodeIfPresent(FederatedUser.self, forKey: .federatedUser)
        federatedUser = federatedUserDecoded
        let iamUserDecoded = try containerValues.decodeIfPresent(IamUser.self, forKey: .iamUser)
        iamUser = iamUserDecoded
        let rootDecoded = try containerValues.decodeIfPresent(UserIdentityRoot.self, forKey: .root)
        root = rootDecoded
        let typeDecoded = try containerValues.decodeIfPresent(UserIdentityType.self, forKey: .type)
        type = typeDecoded
    }
}
