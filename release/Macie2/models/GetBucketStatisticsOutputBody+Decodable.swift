// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetBucketStatisticsOutputBody: Equatable {
    public let bucketCount: Int
    public let bucketCountByEffectivePermission: BucketCountByEffectivePermission?
    public let bucketCountByEncryptionType: BucketCountByEncryptionType?
    public let bucketCountByObjectEncryptionRequirement: BucketCountPolicyAllowsUnencryptedObjectUploads?
    public let bucketCountBySharedAccessType: BucketCountBySharedAccessType?
    public let classifiableObjectCount: Int
    public let classifiableSizeInBytes: Int
    public let lastUpdated: Date?
    public let objectCount: Int
    public let sizeInBytes: Int
    public let sizeInBytesCompressed: Int
    public let unclassifiableObjectCount: ObjectLevelStatistics?
    public let unclassifiableObjectSizeInBytes: ObjectLevelStatistics?
}

extension GetBucketStatisticsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case bucketCount = "bucketCount"
        case bucketCountByEffectivePermission = "bucketCountByEffectivePermission"
        case bucketCountByEncryptionType = "bucketCountByEncryptionType"
        case bucketCountByObjectEncryptionRequirement = "bucketCountByObjectEncryptionRequirement"
        case bucketCountBySharedAccessType = "bucketCountBySharedAccessType"
        case classifiableObjectCount = "classifiableObjectCount"
        case classifiableSizeInBytes = "classifiableSizeInBytes"
        case lastUpdated = "lastUpdated"
        case objectCount = "objectCount"
        case sizeInBytes = "sizeInBytes"
        case sizeInBytesCompressed = "sizeInBytesCompressed"
        case unclassifiableObjectCount = "unclassifiableObjectCount"
        case unclassifiableObjectSizeInBytes = "unclassifiableObjectSizeInBytes"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketCountDecoded = try containerValues.decode(Int.self, forKey: .bucketCount)
        bucketCount = bucketCountDecoded
        let bucketCountByEffectivePermissionDecoded = try containerValues.decodeIfPresent(BucketCountByEffectivePermission.self, forKey: .bucketCountByEffectivePermission)
        bucketCountByEffectivePermission = bucketCountByEffectivePermissionDecoded
        let bucketCountByEncryptionTypeDecoded = try containerValues.decodeIfPresent(BucketCountByEncryptionType.self, forKey: .bucketCountByEncryptionType)
        bucketCountByEncryptionType = bucketCountByEncryptionTypeDecoded
        let bucketCountByObjectEncryptionRequirementDecoded = try containerValues.decodeIfPresent(BucketCountPolicyAllowsUnencryptedObjectUploads.self, forKey: .bucketCountByObjectEncryptionRequirement)
        bucketCountByObjectEncryptionRequirement = bucketCountByObjectEncryptionRequirementDecoded
        let bucketCountBySharedAccessTypeDecoded = try containerValues.decodeIfPresent(BucketCountBySharedAccessType.self, forKey: .bucketCountBySharedAccessType)
        bucketCountBySharedAccessType = bucketCountBySharedAccessTypeDecoded
        let classifiableObjectCountDecoded = try containerValues.decode(Int.self, forKey: .classifiableObjectCount)
        classifiableObjectCount = classifiableObjectCountDecoded
        let classifiableSizeInBytesDecoded = try containerValues.decode(Int.self, forKey: .classifiableSizeInBytes)
        classifiableSizeInBytes = classifiableSizeInBytesDecoded
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
        let objectCountDecoded = try containerValues.decode(Int.self, forKey: .objectCount)
        objectCount = objectCountDecoded
        let sizeInBytesDecoded = try containerValues.decode(Int.self, forKey: .sizeInBytes)
        sizeInBytes = sizeInBytesDecoded
        let sizeInBytesCompressedDecoded = try containerValues.decode(Int.self, forKey: .sizeInBytesCompressed)
        sizeInBytesCompressed = sizeInBytesCompressedDecoded
        let unclassifiableObjectCountDecoded = try containerValues.decodeIfPresent(ObjectLevelStatistics.self, forKey: .unclassifiableObjectCount)
        unclassifiableObjectCount = unclassifiableObjectCountDecoded
        let unclassifiableObjectSizeInBytesDecoded = try containerValues.decodeIfPresent(ObjectLevelStatistics.self, forKey: .unclassifiableObjectSizeInBytes)
        unclassifiableObjectSizeInBytes = unclassifiableObjectSizeInBytesDecoded
    }
}
