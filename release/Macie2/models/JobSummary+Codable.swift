// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension JobSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bucketCriteria = "bucketCriteria"
        case bucketDefinitions = "bucketDefinitions"
        case createdAt = "createdAt"
        case jobId = "jobId"
        case jobStatus = "jobStatus"
        case jobType = "jobType"
        case lastRunErrorStatus = "lastRunErrorStatus"
        case name = "name"
        case userPausedDetails = "userPausedDetails"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketCriteria = bucketCriteria {
            try encodeContainer.encode(bucketCriteria, forKey: .bucketCriteria)
        }
        if let bucketDefinitions = bucketDefinitions {
            var bucketDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bucketDefinitions)
            for __listofs3bucketdefinitionforjob0 in bucketDefinitions {
                try bucketDefinitionsContainer.encode(__listofs3bucketdefinitionforjob0)
            }
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let jobId = jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobStatus = jobStatus {
            try encodeContainer.encode(jobStatus.rawValue, forKey: .jobStatus)
        }
        if let jobType = jobType {
            try encodeContainer.encode(jobType.rawValue, forKey: .jobType)
        }
        if let lastRunErrorStatus = lastRunErrorStatus {
            try encodeContainer.encode(lastRunErrorStatus, forKey: .lastRunErrorStatus)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let userPausedDetails = userPausedDetails {
            try encodeContainer.encode(userPausedDetails, forKey: .userPausedDetails)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDefinitionsContainer = try containerValues.decodeIfPresent([S3BucketDefinitionForJob].self, forKey: .bucketDefinitions)
        var bucketDefinitionsDecoded0:[S3BucketDefinitionForJob]? = nil
        if let bucketDefinitionsContainer = bucketDefinitionsContainer {
            bucketDefinitionsDecoded0 = [S3BucketDefinitionForJob]()
            for structure0 in bucketDefinitionsContainer {
                bucketDefinitionsDecoded0?.append(structure0)
            }
        }
        bucketDefinitions = bucketDefinitionsDecoded0
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let jobIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let jobTypeDecoded = try containerValues.decodeIfPresent(JobType.self, forKey: .jobType)
        jobType = jobTypeDecoded
        let lastRunErrorStatusDecoded = try containerValues.decodeIfPresent(LastRunErrorStatus.self, forKey: .lastRunErrorStatus)
        lastRunErrorStatus = lastRunErrorStatusDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let userPausedDetailsDecoded = try containerValues.decodeIfPresent(UserPausedDetails.self, forKey: .userPausedDetails)
        userPausedDetails = userPausedDetailsDecoded
        let bucketCriteriaDecoded = try containerValues.decodeIfPresent(S3BucketCriteriaForJob.self, forKey: .bucketCriteria)
        bucketCriteria = bucketCriteriaDecoded
    }
}
