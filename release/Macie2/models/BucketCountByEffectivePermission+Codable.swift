// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BucketCountByEffectivePermission: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case publiclyAccessible = "publiclyAccessible"
        case publiclyReadable = "publiclyReadable"
        case publiclyWritable = "publiclyWritable"
        case unknown = "unknown"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if publiclyAccessible != 0 {
            try encodeContainer.encode(publiclyAccessible, forKey: .publiclyAccessible)
        }
        if publiclyReadable != 0 {
            try encodeContainer.encode(publiclyReadable, forKey: .publiclyReadable)
        }
        if publiclyWritable != 0 {
            try encodeContainer.encode(publiclyWritable, forKey: .publiclyWritable)
        }
        if unknown != 0 {
            try encodeContainer.encode(unknown, forKey: .unknown)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let publiclyAccessibleDecoded = try containerValues.decode(Int.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let publiclyReadableDecoded = try containerValues.decode(Int.self, forKey: .publiclyReadable)
        publiclyReadable = publiclyReadableDecoded
        let publiclyWritableDecoded = try containerValues.decode(Int.self, forKey: .publiclyWritable)
        publiclyWritable = publiclyWritableDecoded
        let unknownDecoded = try containerValues.decode(Int.self, forKey: .unknown)
        unknown = unknownDecoded
    }
}
