// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Provides the details of a finding.</p>
public struct Finding: Equatable {
    /// <p>The unique identifier for the AWS account that the finding applies to. This is typically the account that owns the affected resource.</p>
    public let accountId: String?
    /// <p>Specifies whether the finding is archived.</p>
    public let archived: Bool
    /// <p>The category of the finding. Possible values are: CLASSIFICATION, for a sensitive data finding; and, POLICY, for a policy finding.</p>
    public let category: FindingCategory?
    /// <p>The details of a sensitive data finding. This value is null for a policy finding.</p>
    public let classificationDetails: ClassificationDetails?
    /// <p>The total number of occurrences of the finding. For sensitive data findings, this value is always 1. All sensitive data findings are considered new (unique) because they derive from individual classification jobs.</p>
    public let count: Int
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the finding was created.</p>
    public let createdAt: Date?
    /// <p>The description of the finding.</p>
    public let description: String?
    /// <p>The unique identifier for the finding. This is a random string that Amazon Macie generates and assigns to a finding when it creates the finding.</p>
    public let id: String?
    /// <p>The AWS partition that Amazon Macie created the finding in.</p>
    public let partition: String?
    /// <p>The details of a policy finding. This value is null for a sensitive data finding.</p>
    public let policyDetails: PolicyDetails?
    /// <p>The AWS Region that Amazon Macie created the finding in.</p>
    public let region: String?
    /// <p>The resources that the finding applies to.</p>
    public let resourcesAffected: ResourcesAffected?
    /// <p>Specifies whether the finding is a sample finding. A <i>sample finding</i> is a finding that uses example data to demonstrate what a finding might contain.</p>
    public let sample: Bool
    /// <p>The version of the schema that was used to define the data structures in the finding.</p>
    public let schemaVersion: String?
    /// <p>The severity level and score for the finding.</p>
    public let severity: Severity?
    /// <p>The brief description of the finding.</p>
    public let title: String?
    /// <p>The type of the finding.</p>
    public let type: FindingType?
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the finding was last updated. For sensitive data findings, this value is the same as the value for the createdAt property. All sensitive data findings are considered new (unique) because they derive from individual classification jobs.</p>
    public let updatedAt: Date?

    public init (
        accountId: String? = nil,
        archived: Bool = false,
        category: FindingCategory? = nil,
        classificationDetails: ClassificationDetails? = nil,
        count: Int = 0,
        createdAt: Date? = nil,
        description: String? = nil,
        id: String? = nil,
        partition: String? = nil,
        policyDetails: PolicyDetails? = nil,
        region: String? = nil,
        resourcesAffected: ResourcesAffected? = nil,
        sample: Bool = false,
        schemaVersion: String? = nil,
        severity: Severity? = nil,
        title: String? = nil,
        type: FindingType? = nil,
        updatedAt: Date? = nil
    )
    {
        self.accountId = accountId
        self.archived = archived
        self.category = category
        self.classificationDetails = classificationDetails
        self.count = count
        self.createdAt = createdAt
        self.description = description
        self.id = id
        self.partition = partition
        self.policyDetails = policyDetails
        self.region = region
        self.resourcesAffected = resourcesAffected
        self.sample = sample
        self.schemaVersion = schemaVersion
        self.severity = severity
        self.title = title
        self.type = type
        self.updatedAt = updatedAt
    }
}
