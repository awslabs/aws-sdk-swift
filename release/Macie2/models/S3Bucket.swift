// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Provides information about an S3 bucket that a finding applies to.</p>
public struct S3Bucket: Equatable {
    /// <p>Specifies whether the bucket policy for the bucket requires server-side encryption of objects when objects are uploaded to the bucket. Possible values are:</p> <ul><li><p>FALSE - The bucket policy requires server-side encryption of new objects. PutObject requests must include the x-amz-server-side-encryption header and the value for that header must be AES256 or aws:kms.</p></li> <li><p>TRUE - The bucket doesn't have a bucket policy or it has a bucket policy that doesn't require server-side encryption of new objects. If a bucket policy exists, it doesn't require PutObject requests to include the x-amz-server-side-encryption header and it doesn't require the value for that header to be AES256 or aws:kms.</p></li> <li><p>UNKNOWN - Amazon Macie can't determine whether the bucket policy requires server-side encryption of objects.</p></li></ul>
    public let allowsUnencryptedObjectUploads: AllowsUnencryptedObjectUploads?
    /// <p>The Amazon Resource Name (ARN) of the bucket.</p>
    public let arn: String?
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the bucket was created.</p>
    public let createdAt: Date?
    /// <p>The type of server-side encryption that's used by default to encrypt objects in the bucket.</p>
    public let defaultServerSideEncryption: ServerSideEncryption?
    /// <p>The name of the bucket.</p>
    public let name: String?
    /// <p>The display name and AWS account ID for the user who owns the bucket.</p>
    public let owner: S3BucketOwner?
    /// <p>The permissions settings that determine whether the bucket is publicly accessible.</p>
    public let publicAccess: BucketPublicAccess?
    /// <p>The tags that are associated with the bucket.</p>
    public let tags: [KeyValuePair]?

    public init (
        allowsUnencryptedObjectUploads: AllowsUnencryptedObjectUploads? = nil,
        arn: String? = nil,
        createdAt: Date? = nil,
        defaultServerSideEncryption: ServerSideEncryption? = nil,
        name: String? = nil,
        owner: S3BucketOwner? = nil,
        publicAccess: BucketPublicAccess? = nil,
        tags: [KeyValuePair]? = nil
    )
    {
        self.allowsUnencryptedObjectUploads = allowsUnencryptedObjectUploads
        self.arn = arn
        self.createdAt = createdAt
        self.defaultServerSideEncryption = defaultServerSideEncryption
        self.name = name
        self.owner = owner
        self.publicAccess = publicAccess
        self.tags = tags
    }
}
