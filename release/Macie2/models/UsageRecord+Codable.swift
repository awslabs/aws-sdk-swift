// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UsageRecord: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountId = "accountId"
        case freeTrialStartDate = "freeTrialStartDate"
        case usage = "usage"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let freeTrialStartDate = freeTrialStartDate {
            try encodeContainer.encode(freeTrialStartDate.timeIntervalSince1970, forKey: .freeTrialStartDate)
        }
        if let usage = usage {
            var usageContainer = encodeContainer.nestedUnkeyedContainer(forKey: .usage)
            for __listofusagebyaccount0 in usage {
                try usageContainer.encode(__listofusagebyaccount0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let freeTrialStartDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .freeTrialStartDate)
        freeTrialStartDate = freeTrialStartDateDecoded
        let usageContainer = try containerValues.decodeIfPresent([UsageByAccount].self, forKey: .usage)
        var usageDecoded0:[UsageByAccount]? = nil
        if let usageContainer = usageContainer {
            usageDecoded0 = [UsageByAccount]()
            for structure0 in usageContainer {
                usageDecoded0?.append(structure0)
            }
        }
        usage = usageDecoded0
    }
}
