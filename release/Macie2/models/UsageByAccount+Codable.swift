// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UsageByAccount: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case currency = "currency"
        case estimatedCost = "estimatedCost"
        case serviceLimit = "serviceLimit"
        case type = "type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currency = currency {
            try encodeContainer.encode(currency.rawValue, forKey: .currency)
        }
        if let estimatedCost = estimatedCost {
            try encodeContainer.encode(estimatedCost, forKey: .estimatedCost)
        }
        if let serviceLimit = serviceLimit {
            try encodeContainer.encode(serviceLimit, forKey: .serviceLimit)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let currencyDecoded = try containerValues.decodeIfPresent(Currency.self, forKey: .currency)
        currency = currencyDecoded
        let estimatedCostDecoded = try containerValues.decodeIfPresent(String.self, forKey: .estimatedCost)
        estimatedCost = estimatedCostDecoded
        let serviceLimitDecoded = try containerValues.decodeIfPresent(ServiceLimit.self, forKey: .serviceLimit)
        serviceLimit = serviceLimitDecoded
        let typeDecoded = try containerValues.decodeIfPresent(UsageType.self, forKey: .type)
        type = typeDecoded
    }
}
