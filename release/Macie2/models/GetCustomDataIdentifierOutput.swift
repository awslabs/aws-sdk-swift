// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetCustomDataIdentifierOutput: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the custom data identifier.</p>
    public let arn: String?
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the custom data identifier was created.</p>
    public let createdAt: Date?
    /// <p>Specifies whether the custom data identifier was deleted. If you delete a custom data identifier, Amazon Macie doesn't delete it permanently. Instead, it soft deletes the identifier.</p>
    public let deleted: Bool
    /// <p>The custom description of the custom data identifier.</p>
    public let description: String?
    /// <p>The unique identifier for the custom data identifier.</p>
    public let id: String?
    /// <p>An array that lists specific character sequences (ignore words) to exclude from the results. If the text matched by the regular expression is the same as any string in this array, Amazon Macie ignores it. Ignore words are case sensitive.</p>
    public let ignoreWords: [String]?
    /// <p>An array that lists specific character sequences (keywords), one of which must be within proximity (maximumMatchDistance) of the regular expression to match. Keywords aren't case sensitive.</p>
    public let keywords: [String]?
    /// <p>The maximum number of characters that can exist between text that matches the regex pattern and the character sequences specified by the keywords array. Macie includes or excludes a result based on the proximity of a keyword to text that matches the regex pattern.</p>
    public let maximumMatchDistance: Int
    /// <p>The custom name of the custom data identifier.</p>
    public let name: String?
    /// <p>The regular expression (<i>regex</i>) that defines the pattern to match.</p>
    public let regex: String?
    /// <p>A map of key-value pairs that identifies the tags (keys and values) that are associated with the custom data identifier.</p>
    public let tags: [String:String]?

    public init (
        arn: String? = nil,
        createdAt: Date? = nil,
        deleted: Bool = false,
        description: String? = nil,
        id: String? = nil,
        ignoreWords: [String]? = nil,
        keywords: [String]? = nil,
        maximumMatchDistance: Int = 0,
        name: String? = nil,
        regex: String? = nil,
        tags: [String:String]? = nil
    )
    {
        self.arn = arn
        self.createdAt = createdAt
        self.deleted = deleted
        self.description = description
        self.id = id
        self.ignoreWords = ignoreWords
        self.keywords = keywords
        self.maximumMatchDistance = maximumMatchDistance
        self.name = name
        self.regex = regex
        self.tags = tags
    }
}
