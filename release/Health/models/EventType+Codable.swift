// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EventType: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case category
        case code
        case service
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let category = category {
            try encodeContainer.encode(category.rawValue, forKey: .category)
        }
        if let code = code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let service = service {
            try encodeContainer.encode(service, forKey: .service)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .service)
        service = serviceDecoded
        let codeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .code)
        code = codeDecoded
        let categoryDecoded = try containerValues.decodeIfPresent(EventTypeCategory.self, forKey: .category)
        category = categoryDecoded
    }
}
