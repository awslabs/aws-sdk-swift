// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AffectedEntity: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case awsAccountId
        case entityArn
        case entityUrl
        case entityValue
        case eventArn
        case lastUpdatedTime
        case statusCode
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsAccountId = awsAccountId {
            try encodeContainer.encode(awsAccountId, forKey: .awsAccountId)
        }
        if let entityArn = entityArn {
            try encodeContainer.encode(entityArn, forKey: .entityArn)
        }
        if let entityUrl = entityUrl {
            try encodeContainer.encode(entityUrl, forKey: .entityUrl)
        }
        if let entityValue = entityValue {
            try encodeContainer.encode(entityValue, forKey: .entityValue)
        }
        if let eventArn = eventArn {
            try encodeContainer.encode(eventArn, forKey: .eventArn)
        }
        if let lastUpdatedTime = lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime.timeIntervalSince1970, forKey: .lastUpdatedTime)
        }
        if let statusCode = statusCode {
            try encodeContainer.encode(statusCode.rawValue, forKey: .statusCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagset0) in tags {
                try tagsContainer.encode(tagset0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entityArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .entityArn)
        entityArn = entityArnDecoded
        let eventArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventArn)
        eventArn = eventArnDecoded
        let entityValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .entityValue)
        entityValue = entityValueDecoded
        let entityUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .entityUrl)
        entityUrl = entityUrlDecoded
        let awsAccountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .awsAccountId)
        awsAccountId = awsAccountIdDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let statusCodeDecoded = try containerValues.decodeIfPresent(EntityStatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
