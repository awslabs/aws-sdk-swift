// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OrganizationEventFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case awsAccountIds
        case endTime
        case entityArns
        case entityValues
        case eventStatusCodes
        case eventTypeCategories
        case eventTypeCodes
        case lastUpdatedTime
        case regions
        case services
        case startTime
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsAccountIds = awsAccountIds {
            var awsAccountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .awsAccountIds)
            for awsaccountidslist0 in awsAccountIds {
                try awsAccountIdsContainer.encode(awsaccountidslist0)
            }
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime, forKey: .endTime)
        }
        if let entityArns = entityArns {
            var entityArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entityArns)
            for entityarnlist0 in entityArns {
                try entityArnsContainer.encode(entityarnlist0)
            }
        }
        if let entityValues = entityValues {
            var entityValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entityValues)
            for entityvaluelist0 in entityValues {
                try entityValuesContainer.encode(entityvaluelist0)
            }
        }
        if let eventStatusCodes = eventStatusCodes {
            var eventStatusCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eventStatusCodes)
            for eventstatuscodelist0 in eventStatusCodes {
                try eventStatusCodesContainer.encode(eventstatuscodelist0.rawValue)
            }
        }
        if let eventTypeCategories = eventTypeCategories {
            var eventTypeCategoriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eventTypeCategories)
            for eventtypecategorylist20 in eventTypeCategories {
                try eventTypeCategoriesContainer.encode(eventtypecategorylist20.rawValue)
            }
        }
        if let eventTypeCodes = eventTypeCodes {
            var eventTypeCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eventTypeCodes)
            for eventtypelist20 in eventTypeCodes {
                try eventTypeCodesContainer.encode(eventtypelist20)
            }
        }
        if let lastUpdatedTime = lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime, forKey: .lastUpdatedTime)
        }
        if let regions = regions {
            var regionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regions)
            for regionlist0 in regions {
                try regionsContainer.encode(regionlist0)
            }
        }
        if let services = services {
            var servicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .services)
            for servicelist0 in services {
                try servicesContainer.encode(servicelist0)
            }
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventTypeCodesContainer = try containerValues.decodeIfPresent([String].self, forKey: .eventTypeCodes)
        var eventTypeCodesDecoded0:[String]? = nil
        if let eventTypeCodesContainer = eventTypeCodesContainer {
            eventTypeCodesDecoded0 = [String]()
            for string0 in eventTypeCodesContainer {
                eventTypeCodesDecoded0?.append(string0)
            }
        }
        eventTypeCodes = eventTypeCodesDecoded0
        let awsAccountIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .awsAccountIds)
        var awsAccountIdsDecoded0:[String]? = nil
        if let awsAccountIdsContainer = awsAccountIdsContainer {
            awsAccountIdsDecoded0 = [String]()
            for string0 in awsAccountIdsContainer {
                awsAccountIdsDecoded0?.append(string0)
            }
        }
        awsAccountIds = awsAccountIdsDecoded0
        let servicesContainer = try containerValues.decodeIfPresent([String].self, forKey: .services)
        var servicesDecoded0:[String]? = nil
        if let servicesContainer = servicesContainer {
            servicesDecoded0 = [String]()
            for string0 in servicesContainer {
                servicesDecoded0?.append(string0)
            }
        }
        services = servicesDecoded0
        let regionsContainer = try containerValues.decodeIfPresent([String].self, forKey: .regions)
        var regionsDecoded0:[String]? = nil
        if let regionsContainer = regionsContainer {
            regionsDecoded0 = [String]()
            for string0 in regionsContainer {
                regionsDecoded0?.append(string0)
            }
        }
        regions = regionsDecoded0
        let startTimeDecoded = try containerValues.decodeIfPresent(DateTimeRange.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(DateTimeRange.self, forKey: .endTime)
        endTime = endTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(DateTimeRange.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let entityArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .entityArns)
        var entityArnsDecoded0:[String]? = nil
        if let entityArnsContainer = entityArnsContainer {
            entityArnsDecoded0 = [String]()
            for string0 in entityArnsContainer {
                entityArnsDecoded0?.append(string0)
            }
        }
        entityArns = entityArnsDecoded0
        let entityValuesContainer = try containerValues.decodeIfPresent([String].self, forKey: .entityValues)
        var entityValuesDecoded0:[String]? = nil
        if let entityValuesContainer = entityValuesContainer {
            entityValuesDecoded0 = [String]()
            for string0 in entityValuesContainer {
                entityValuesDecoded0?.append(string0)
            }
        }
        entityValues = entityValuesDecoded0
        let eventTypeCategoriesContainer = try containerValues.decodeIfPresent([EventTypeCategory].self, forKey: .eventTypeCategories)
        var eventTypeCategoriesDecoded0:[EventTypeCategory]? = nil
        if let eventTypeCategoriesContainer = eventTypeCategoriesContainer {
            eventTypeCategoriesDecoded0 = [EventTypeCategory]()
            for string0 in eventTypeCategoriesContainer {
                eventTypeCategoriesDecoded0?.append(string0)
            }
        }
        eventTypeCategories = eventTypeCategoriesDecoded0
        let eventStatusCodesContainer = try containerValues.decodeIfPresent([EventStatusCode].self, forKey: .eventStatusCodes)
        var eventStatusCodesDecoded0:[EventStatusCode]? = nil
        if let eventStatusCodesContainer = eventStatusCodesContainer {
            eventStatusCodesDecoded0 = [EventStatusCode]()
            for string0 in eventStatusCodesContainer {
                eventStatusCodesDecoded0?.append(string0)
            }
        }
        eventStatusCodes = eventStatusCodesDecoded0
    }
}
