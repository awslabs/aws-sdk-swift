// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation

public class HealthClient {
    let client: SdkHttpClient
    let config: HealthClientConfiguration
    let serviceName = "Health"
    let encoder: RequestEncoder
    let decoder: ResponseDecoder

    public init(config: HealthClientConfiguration) {
        client = SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.encoder = config.encoder ?? encoder
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public class HealthClientConfiguration: ClientRuntime.Configuration, AWSClientConfiguration {

        public var region: String
        public var credentialsProvider: AWSCredentialsProvider
        public var signingRegion: String
        public var endpointResolver: EndpointResolver

        public init (
            credentialsProvider: AWSCredentialsProvider,
            endpointResolver: EndpointResolver,
            region: String,
            signingRegion: String
        ) throws
        {
            self.credentialsProvider = credentialsProvider
            self.endpointResolver = endpointResolver
            self.region = region
            self.signingRegion = signingRegion
        }

        public convenience init(credentialsProvider: AWSCredentialsProvider) throws {
            let region = "us-east-1"
            let signingRegion = "us-east-1"
            let endpointResolver = DefaultEndpointResolver()
            try self.init(
                credentialsProvider: credentialsProvider,
                endpointResolver: endpointResolver,
                region: region,
                signingRegion: signingRegion
            )
        }

        public static func `default`() throws -> HealthClientConfiguration {
            let awsCredsProvider = try AWSCredentialsProvider.fromEnv()
            return try HealthClientConfiguration(credentialsProvider: awsCredsProvider)
        }
    }
}

extension HealthClient: HealthClientProtocol {
    /// <p>Returns a list of accounts in the organization from AWS Organizations that are affected by the
    ///          provided event. For more information about the different types of AWS Health events, see
    ///             <a href="https://docs.aws.amazon.com/health/latest/APIReference/API_Event.html">Event</a>. </p>
    ///          <p>Before you can call this operation, you must first enable AWS Health to work with
    ///          AWS Organizations. To do this, call the <a href="https://docs.aws.amazon.com/health/latest/APIReference/API_EnableHealthServiceAccessForOrganization.html">EnableHealthServiceAccessForOrganization</a> operation from your organization's
    ///          management account.</p>
    ///          <note>
    ///             <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the next request to return more results.</p>
    ///          </note>
    public func describeAffectedAccountsForOrganization(input: DescribeAffectedAccountsForOrganizationInput, completion: @escaping (SdkResult<DescribeAffectedAccountsForOrganizationOutputResponse, DescribeAffectedAccountsForOrganizationOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeAffectedAccountsForOrganization")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "health.\(config.region).amazonaws.com")
                      .withSigningName(value: "health")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeAffectedAccountsForOrganizationInput, DescribeAffectedAccountsForOrganizationOutputResponse, DescribeAffectedAccountsForOrganizationOutputError>(id: "describeAffectedAccountsForOrganization")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeAffectedAccountsForOrganizationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeAffectedAccountsForOrganizationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeAffectedAccountsForOrganizationInput, DescribeAffectedAccountsForOrganizationOutputResponse, DescribeAffectedAccountsForOrganizationOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeAffectedAccountsForOrganizationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeAffectedAccountsForOrganizationInput, DescribeAffectedAccountsForOrganizationOutputResponse, DescribeAffectedAccountsForOrganizationOutputError>(xAmzTarget: "AWSHealth_20160804.DescribeAffectedAccountsForOrganization"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of entities that have been affected by the specified events, based on the
    ///          specified filter criteria. Entities can refer to individual customer resources, groups of
    ///          customer resources, or any other construct, depending on the AWS service. Events that
    ///          have impact beyond that of the affected entities, or where the extent of impact is unknown,
    ///          include at least one entity indicating this.</p>
    ///          <p>At least one event ARN is required. Results are sorted by the
    ///             <code>lastUpdatedTime</code> of the entity, starting with the most recent.</p>
    ///
    ///          <note>
    ///             <ul>
    ///                <li>
    ///                   <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the next request to return more results.</p>
    ///                </li>
    ///                <li>
    ///                   <p>This operation supports resource-level permissions. You can use this operation to allow or deny access to specific AWS Health events. For more
    ///                   information, see <a href="https://docs.aws.amazon.com/health/latest/ug/security_iam_id-based-policy-examples.html#resource-action-based-conditions">Resource- and action-based conditions</a> in the <i>AWS Health User Guide</i>.</p>
    ///                </li>
    ///             </ul>
    ///          </note>
    public func describeAffectedEntities(input: DescribeAffectedEntitiesInput, completion: @escaping (SdkResult<DescribeAffectedEntitiesOutputResponse, DescribeAffectedEntitiesOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeAffectedEntities")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "health.\(config.region).amazonaws.com")
                      .withSigningName(value: "health")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeAffectedEntitiesInput, DescribeAffectedEntitiesOutputResponse, DescribeAffectedEntitiesOutputError>(id: "describeAffectedEntities")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeAffectedEntitiesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeAffectedEntitiesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeAffectedEntitiesInput, DescribeAffectedEntitiesOutputResponse, DescribeAffectedEntitiesOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeAffectedEntitiesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeAffectedEntitiesInput, DescribeAffectedEntitiesOutputResponse, DescribeAffectedEntitiesOutputError>(xAmzTarget: "AWSHealth_20160804.DescribeAffectedEntities"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of entities that have been affected by one or more events for one or more
    ///          accounts in your organization in AWS Organizations, based on the filter criteria. Entities can refer
    ///          to individual customer resources, groups of customer resources, or any other construct,
    ///          depending on the AWS service.</p>
    ///          <p>At least one event Amazon Resource Name (ARN) and account ID are required. Results are
    ///          sorted by the <code>lastUpdatedTime</code> of the entity, starting with the most
    ///          recent.</p>
    ///          <p>Before you can call this operation, you must first enable AWS Health to work with
    ///          AWS Organizations. To do this, call the <a href="https://docs.aws.amazon.com/health/latest/APIReference/API_EnableHealthServiceAccessForOrganization.html">EnableHealthServiceAccessForOrganization</a>
    ///          operation from your organization's management account.</p>
    ///          <note>
    ///             <ul>
    ///                <li>
    ///                   <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the next request to return more results.</p>
    ///                </li>
    ///                <li>
    ///                   <p>This operation doesn't support resource-level permissions. You can't use this operation to allow or deny access to specific AWS Health events. For more
    ///                   information, see <a href="https://docs.aws.amazon.com/health/latest/ug/security_iam_id-based-policy-examples.html#resource-action-based-conditions">Resource- and action-based conditions</a> in the <i>AWS Health User Guide</i>.</p>
    ///                </li>
    ///             </ul>
    ///
    ///          </note>
    public func describeAffectedEntitiesForOrganization(input: DescribeAffectedEntitiesForOrganizationInput, completion: @escaping (SdkResult<DescribeAffectedEntitiesForOrganizationOutputResponse, DescribeAffectedEntitiesForOrganizationOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeAffectedEntitiesForOrganization")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "health.\(config.region).amazonaws.com")
                      .withSigningName(value: "health")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeAffectedEntitiesForOrganizationInput, DescribeAffectedEntitiesForOrganizationOutputResponse, DescribeAffectedEntitiesForOrganizationOutputError>(id: "describeAffectedEntitiesForOrganization")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeAffectedEntitiesForOrganizationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeAffectedEntitiesForOrganizationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeAffectedEntitiesForOrganizationInput, DescribeAffectedEntitiesForOrganizationOutputResponse, DescribeAffectedEntitiesForOrganizationOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeAffectedEntitiesForOrganizationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeAffectedEntitiesForOrganizationInput, DescribeAffectedEntitiesForOrganizationOutputResponse, DescribeAffectedEntitiesForOrganizationOutputError>(xAmzTarget: "AWSHealth_20160804.DescribeAffectedEntitiesForOrganization"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the number of entities that are affected by each of the specified events. If no
    ///          events are specified, the counts of all affected entities are returned.</p>
    public func describeEntityAggregates(input: DescribeEntityAggregatesInput, completion: @escaping (SdkResult<DescribeEntityAggregatesOutputResponse, DescribeEntityAggregatesOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeEntityAggregates")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "health.\(config.region).amazonaws.com")
                      .withSigningName(value: "health")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeEntityAggregatesInput, DescribeEntityAggregatesOutputResponse, DescribeEntityAggregatesOutputError>(id: "describeEntityAggregates")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeEntityAggregatesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeEntityAggregatesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeEntityAggregatesInput, DescribeEntityAggregatesOutputResponse, DescribeEntityAggregatesOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeEntityAggregatesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeEntityAggregatesInput, DescribeEntityAggregatesOutputResponse, DescribeEntityAggregatesOutputError>(xAmzTarget: "AWSHealth_20160804.DescribeEntityAggregates"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the number of events of each event type (issue, scheduled change, and account
    ///          notification). If no filter is specified, the counts of all events in each category are
    ///          returned.</p>
    ///          <note>
    ///             <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the next request to return more results.</p>
    ///          </note>
    public func describeEventAggregates(input: DescribeEventAggregatesInput, completion: @escaping (SdkResult<DescribeEventAggregatesOutputResponse, DescribeEventAggregatesOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeEventAggregates")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "health.\(config.region).amazonaws.com")
                      .withSigningName(value: "health")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeEventAggregatesInput, DescribeEventAggregatesOutputResponse, DescribeEventAggregatesOutputError>(id: "describeEventAggregates")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeEventAggregatesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeEventAggregatesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeEventAggregatesInput, DescribeEventAggregatesOutputResponse, DescribeEventAggregatesOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeEventAggregatesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeEventAggregatesInput, DescribeEventAggregatesOutputResponse, DescribeEventAggregatesOutputError>(xAmzTarget: "AWSHealth_20160804.DescribeEventAggregates"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns detailed information about one or more specified events. Information includes
    ///          standard event data (AWS Region, service, and so on, as returned by <a href="https://docs.aws.amazon.com/health/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a>), a detailed event description, and possible additional metadata
    ///          that depends upon the nature of the event. Affected entities are not included. To retrieve
    ///          the entities, use the <a href="https://docs.aws.amazon.com/health/latest/APIReference/API_DescribeAffectedEntities.html">DescribeAffectedEntities</a> operation.</p>
    ///          <p>If a specified event can't be retrieved, an error message is returned for that
    ///          event.</p>
    ///          <note>
    ///             <p>This operation supports resource-level permissions. You can use this operation to allow or deny access to specific AWS Health events. For more
    ///                   information, see <a href="https://docs.aws.amazon.com/health/latest/ug/security_iam_id-based-policy-examples.html#resource-action-based-conditions">Resource- and action-based conditions</a> in the <i>AWS Health User Guide</i>.</p>
    ///          </note>
    public func describeEventDetails(input: DescribeEventDetailsInput, completion: @escaping (SdkResult<DescribeEventDetailsOutputResponse, DescribeEventDetailsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeEventDetails")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "health.\(config.region).amazonaws.com")
                      .withSigningName(value: "health")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeEventDetailsInput, DescribeEventDetailsOutputResponse, DescribeEventDetailsOutputError>(id: "describeEventDetails")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeEventDetailsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeEventDetailsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeEventDetailsInput, DescribeEventDetailsOutputResponse, DescribeEventDetailsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeEventDetailsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeEventDetailsInput, DescribeEventDetailsOutputResponse, DescribeEventDetailsOutputError>(xAmzTarget: "AWSHealth_20160804.DescribeEventDetails"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns detailed information about one or more specified events for one or more AWS
    ///          accounts in your organization. This information includes standard event data (such as the
    ///          AWS Region and service), an event description, and (depending on the event) possible
    ///          metadata. This operation doesn't return affected entities, such as the resources related to
    ///          the event. To return affected entities, use the <a href="https://docs.aws.amazon.com/health/latest/APIReference/API_DescribeAffectedEntitiesForOrganization.html">DescribeAffectedEntitiesForOrganization</a> operation.</p>
    ///          <note>
    ///             <p>Before you can call this operation, you must first enable AWS Health to work with
    ///             AWS Organizations. To do this, call the <a href="https://docs.aws.amazon.com/health/latest/APIReference/API_EnableHealthServiceAccessForOrganization.html">EnableHealthServiceAccessForOrganization</a> operation from your organization's
    ///             management account.</p>
    ///          </note>
    ///          <p>When you call the <code>DescribeEventDetailsForOrganization</code> operation, specify
    ///          the <code>organizationEventDetailFilters</code> object in the request. Depending on the
    ///          AWS Health event type, note the following differences:</p>
    ///          <ul>
    ///             <li>
    ///                <p>To return event details for a public event, you must specify a null value for the
    ///                   <code>awsAccountId</code> parameter. If you specify an account ID for a public
    ///                event, AWS Health returns an error message because public events aren't specific to
    ///                an account.</p>
    ///             </li>
    ///             <li>
    ///                <p>To return event details for an event that is specific to an account in your
    ///                organization,  you must specify the <code>awsAccountId</code> parameter in the
    ///                request. If you don't specify an account ID, AWS Health returns an error message
    ///                because the event is specific to an account in your organization. </p>
    ///             </li>
    ///          </ul>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/health/latest/APIReference/API_Event.html">Event</a>.</p>
    ///
    ///          <note>
    ///             <p>This operation doesn't support resource-level permissions. You can't use this operation to allow or deny access to specific AWS Health events. For more
    ///                   information, see <a href="https://docs.aws.amazon.com/health/latest/ug/security_iam_id-based-policy-examples.html#resource-action-based-conditions">Resource- and action-based conditions</a> in the <i>AWS Health User Guide</i>.</p>
    ///          </note>
    public func describeEventDetailsForOrganization(input: DescribeEventDetailsForOrganizationInput, completion: @escaping (SdkResult<DescribeEventDetailsForOrganizationOutputResponse, DescribeEventDetailsForOrganizationOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeEventDetailsForOrganization")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "health.\(config.region).amazonaws.com")
                      .withSigningName(value: "health")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeEventDetailsForOrganizationInput, DescribeEventDetailsForOrganizationOutputResponse, DescribeEventDetailsForOrganizationOutputError>(id: "describeEventDetailsForOrganization")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeEventDetailsForOrganizationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeEventDetailsForOrganizationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeEventDetailsForOrganizationInput, DescribeEventDetailsForOrganizationOutputResponse, DescribeEventDetailsForOrganizationOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeEventDetailsForOrganizationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeEventDetailsForOrganizationInput, DescribeEventDetailsForOrganizationOutputResponse, DescribeEventDetailsForOrganizationOutputError>(xAmzTarget: "AWSHealth_20160804.DescribeEventDetailsForOrganization"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns the event types that meet the specified filter criteria. You can use this API
    ///          operation to find information about the AWS Health event, such as the category, AWS
    ///          service, and event code. The metadata for each event appears in the <a href="https://docs.aws.amazon.com/health/latest/APIReference/API_EventType.html">EventType</a> object. </p>
    ///          <p>If you don't specify a filter criteria, the API operation returns all event types, in no
    ///          particular order.  </p>
    ///          <note>
    ///             <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the next request to return more results.</p>
    ///          </note>
    public func describeEventTypes(input: DescribeEventTypesInput, completion: @escaping (SdkResult<DescribeEventTypesOutputResponse, DescribeEventTypesOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeEventTypes")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "health.\(config.region).amazonaws.com")
                      .withSigningName(value: "health")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeEventTypesInput, DescribeEventTypesOutputResponse, DescribeEventTypesOutputError>(id: "describeEventTypes")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeEventTypesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeEventTypesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeEventTypesInput, DescribeEventTypesOutputResponse, DescribeEventTypesOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeEventTypesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeEventTypesInput, DescribeEventTypesOutputResponse, DescribeEventTypesOutputError>(xAmzTarget: "AWSHealth_20160804.DescribeEventTypes"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p> Returns information about events that meet the specified filter criteria. Events are
    ///          returned in a summary form and do not include the detailed description, any additional
    ///          metadata that depends on the event type, or any affected resources. To retrieve that
    ///          information, use the <a href="https://docs.aws.amazon.com/health/latest/APIReference/API_DescribeEventDetails.html">DescribeEventDetails</a> and <a href="https://docs.aws.amazon.com/health/latest/APIReference/API_DescribeAffectedEntities.html">DescribeAffectedEntities</a> operations.</p>
    ///          <p>If no filter criteria are specified, all events are returned. Results are sorted by
    ///             <code>lastModifiedTime</code>, starting with the most recent event.</p>
    ///          <note>
    ///             <ul>
    ///                <li>
    ///                   <p>When you call the <code>DescribeEvents</code> operation and specify an entity
    ///                   for the <code>entityValues</code> parameter, AWS Health might return public
    ///                   events that aren't specific to that resource. For example, if you call
    ///                      <code>DescribeEvents</code> and specify an ID for an Amazon Elastic Compute Cloud (Amazon EC2)
    ///                   instance, AWS Health might return events that aren't specific to that resource or
    ///                   service. To get events that are specific to a service, use the
    ///                      <code>services</code> parameter in the <code>filter</code> object. For more
    ///                   information, see <a href="https://docs.aws.amazon.com/health/latest/APIReference/API_Event.html">Event</a>.</p>
    ///                </li>
    ///                <li>
    ///                   <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the next request to return more results.</p>
    ///                </li>
    ///             </ul>
    ///          </note>
    public func describeEvents(input: DescribeEventsInput, completion: @escaping (SdkResult<DescribeEventsOutputResponse, DescribeEventsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeEvents")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "health.\(config.region).amazonaws.com")
                      .withSigningName(value: "health")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeEventsInput, DescribeEventsOutputResponse, DescribeEventsOutputError>(id: "describeEvents")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeEventsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeEventsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeEventsInput, DescribeEventsOutputResponse, DescribeEventsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeEventsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeEventsInput, DescribeEventsOutputResponse, DescribeEventsOutputError>(xAmzTarget: "AWSHealth_20160804.DescribeEvents"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns information about events across your organization in AWS Organizations. You can use
    ///             the<code>filters</code> parameter to specify the events that you want to return. Events
    ///          are returned in a summary form and don't include the affected accounts, detailed
    ///          description, any additional metadata that depends on the event type, or any affected
    ///          resources. To retrieve that information, use the following operations:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/health/latest/APIReference/API_DescribeAffectedAccountsForOrganization.html">DescribeAffectedAccountsForOrganization</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/health/latest/APIReference/API_DescribeEventDetailsForOrganization.html">DescribeEventDetailsForOrganization</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://docs.aws.amazon.com/health/latest/APIReference/API_DescribeAffectedEntitiesForOrganization.html">DescribeAffectedEntitiesForOrganization</a>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>If you don't specify a <code>filter</code>, the
    ///             <code>DescribeEventsForOrganizations</code> returns all events across your organization.
    ///          Results are sorted by <code>lastModifiedTime</code>, starting with the most recent event. </p>
    ///          <p>For more information about the different types of AWS Health events, see <a href="https://docs.aws.amazon.com/health/latest/APIReference/API_Event.html">Event</a>.</p>
    ///          <p>Before you can call this operation, you must first enable AWS Health to work with
    ///          AWS Organizations. To do this, call the <a href="https://docs.aws.amazon.com/health/latest/APIReference/API_EnableHealthServiceAccessForOrganization.html">EnableHealthServiceAccessForOrganization</a> operation from your organization's
    ///          management account.</p>
    ///          <note>
    ///             <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the next request to return more results.</p>
    ///          </note>
    public func describeEventsForOrganization(input: DescribeEventsForOrganizationInput, completion: @escaping (SdkResult<DescribeEventsForOrganizationOutputResponse, DescribeEventsForOrganizationOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeEventsForOrganization")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "health.\(config.region).amazonaws.com")
                      .withSigningName(value: "health")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeEventsForOrganizationInput, DescribeEventsForOrganizationOutputResponse, DescribeEventsForOrganizationOutputError>(id: "describeEventsForOrganization")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeEventsForOrganizationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeEventsForOrganizationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeEventsForOrganizationInput, DescribeEventsForOrganizationOutputResponse, DescribeEventsForOrganizationOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeEventsForOrganizationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeEventsForOrganizationInput, DescribeEventsForOrganizationOutputResponse, DescribeEventsForOrganizationOutputError>(xAmzTarget: "AWSHealth_20160804.DescribeEventsForOrganization"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>This operation provides status information on enabling or disabling AWS Health to work
    ///          with your organization. To call this operation, you must sign in as an IAM user, assume
    ///          an IAM role, or sign in as the root user (not recommended) in the organization's
    ///          management account.</p>
    public func describeHealthServiceStatusForOrganization(input: DescribeHealthServiceStatusForOrganizationInput, completion: @escaping (SdkResult<DescribeHealthServiceStatusForOrganizationOutputResponse, DescribeHealthServiceStatusForOrganizationOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeHealthServiceStatusForOrganization")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "health.\(config.region).amazonaws.com")
                      .withSigningName(value: "health")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeHealthServiceStatusForOrganizationInput, DescribeHealthServiceStatusForOrganizationOutputResponse, DescribeHealthServiceStatusForOrganizationOutputError>(id: "describeHealthServiceStatusForOrganization")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeHealthServiceStatusForOrganizationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeHealthServiceStatusForOrganizationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeHealthServiceStatusForOrganizationInput, DescribeHealthServiceStatusForOrganizationOutputResponse, DescribeHealthServiceStatusForOrganizationOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeHealthServiceStatusForOrganizationInput, DescribeHealthServiceStatusForOrganizationOutputResponse, DescribeHealthServiceStatusForOrganizationOutputError>(xAmzTarget: "AWSHealth_20160804.DescribeHealthServiceStatusForOrganization"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Disables AWS Health from working with AWS Organizations. To call this operation, you must sign
    ///          in as an AWS Identity and Access Management (IAM) user, assume an IAM role, or sign in as the root user (not
    ///          recommended) in the organization's management account. For more information, see <a href="https://docs.aws.amazon.com/health/latest/ug/aggregate-events.html">Aggregating
    ///             AWS Health events</a> in the
    ///             <i>AWS Health User Guide</i>.</p>
    ///          <p>This operation doesn't remove the service-linked role from the management account in your organization. You must use the IAM console, API, or AWS Command Line Interface (AWS CLI) to
    ///          remove the service-linked role. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html#delete-service-linked-role">Deleting a Service-Linked Role</a> in the
    ///          <i>IAM User Guide</i>.</p>
    ///          <note>
    ///             <p>You can also disable the organizational feature by using the Organizations <a href="https://docs.aws.amazon.com/organizations/latest/APIReference/API_DisableAWSServiceAccess.html">DisableAWSServiceAccess</a> API operation. After you call this operation,
    ///             AWS Health stops aggregating events for all other AWS accounts in your organization.
    ///             If you call the AWS Health API operations for organizational view, AWS Health returns
    ///             an error. AWS Health continues to aggregate health events for your AWS
    ///             account.</p>
    ///          </note>
    public func disableHealthServiceAccessForOrganization(input: DisableHealthServiceAccessForOrganizationInput, completion: @escaping (SdkResult<DisableHealthServiceAccessForOrganizationOutputResponse, DisableHealthServiceAccessForOrganizationOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disableHealthServiceAccessForOrganization")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "health.\(config.region).amazonaws.com")
                      .withSigningName(value: "health")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisableHealthServiceAccessForOrganizationInput, DisableHealthServiceAccessForOrganizationOutputResponse, DisableHealthServiceAccessForOrganizationOutputError>(id: "disableHealthServiceAccessForOrganization")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisableHealthServiceAccessForOrganizationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisableHealthServiceAccessForOrganizationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisableHealthServiceAccessForOrganizationInput, DisableHealthServiceAccessForOrganizationOutputResponse, DisableHealthServiceAccessForOrganizationOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DisableHealthServiceAccessForOrganizationInput, DisableHealthServiceAccessForOrganizationOutputResponse, DisableHealthServiceAccessForOrganizationOutputError>(xAmzTarget: "AWSHealth_20160804.DisableHealthServiceAccessForOrganization"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Enables AWS Health to work with AWS Organizations. You can use the organizational view feature
    ///          to aggregate events from all AWS accounts in your organization in a centralized location. </p>
    ///          <p>This operation also creates a service-linked role for the management account in the
    ///          organization. </p>
    ///          <note>
    ///             <p>To call this operation, you must meet the following requirements:</p>
    ///             <ul>
    ///                <li>
    ///                   <p>You must have a Business or Enterprise Support plan from <a href="http://aws.amazon.com/premiumsupport/">AWS Support</a> to use the AWS Health
    ///                   API. If you call the AWS Health API from an AWS account that doesn't have a
    ///                   Business or Enterprise Support plan, you receive a
    ///                      <code>SubscriptionRequiredException</code> error.</p>
    ///                </li>
    ///                <li>
    ///                   <p>You must have permission to call this operation from the organization's
    ///                   management account. For example IAM policies, see <a href="https://docs.aws.amazon.com/health/latest/ug/security_iam_id-based-policy-examples.html">AWS Health
    ///                      identity-based policy examples</a>.</p>
    ///                </li>
    ///             </ul>
    ///          </note>
    ///          <p>If you don't have the required support plan, you can instead use the AWS Health console
    ///          to enable the organizational view feature. For more information, see <a href="https://docs.aws.amazon.com/health/latest/ug/aggregate-events.html">Aggregating
    ///             AWS Health events</a> in the <i>AWS Health User Guide</i>.</p>
    public func enableHealthServiceAccessForOrganization(input: EnableHealthServiceAccessForOrganizationInput, completion: @escaping (SdkResult<EnableHealthServiceAccessForOrganizationOutputResponse, EnableHealthServiceAccessForOrganizationOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "enableHealthServiceAccessForOrganization")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "health.\(config.region).amazonaws.com")
                      .withSigningName(value: "health")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<EnableHealthServiceAccessForOrganizationInput, EnableHealthServiceAccessForOrganizationOutputResponse, EnableHealthServiceAccessForOrganizationOutputError>(id: "enableHealthServiceAccessForOrganization")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: EnableHealthServiceAccessForOrganizationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: EnableHealthServiceAccessForOrganizationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<EnableHealthServiceAccessForOrganizationInput, EnableHealthServiceAccessForOrganizationOutputResponse, EnableHealthServiceAccessForOrganizationOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<EnableHealthServiceAccessForOrganizationInput, EnableHealthServiceAccessForOrganizationOutputResponse, EnableHealthServiceAccessForOrganizationOutputError>(xAmzTarget: "AWSHealth_20160804.EnableHealthServiceAccessForOrganization"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
