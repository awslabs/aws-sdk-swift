// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct OpenTunnelInputBody: Equatable {
    public let description: String?
    public let tags: [Tag]?
    public let destinationConfig: DestinationConfig?
    public let timeoutConfig: TimeoutConfig?
}

extension OpenTunnelInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description
        case destinationConfig
        case tags
        case timeoutConfig
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let destinationConfigDecoded = try containerValues.decodeIfPresent(DestinationConfig.self, forKey: .destinationConfig)
        destinationConfig = destinationConfigDecoded
        let timeoutConfigDecoded = try containerValues.decodeIfPresent(TimeoutConfig.self, forKey: .timeoutConfig)
        timeoutConfig = timeoutConfigDecoded
    }
}
