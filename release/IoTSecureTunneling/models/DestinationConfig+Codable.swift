// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DestinationConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case services
        case thingName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let services = services {
            var servicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .services)
            for servicelist0 in services {
                try servicesContainer.encode(servicelist0)
            }
        }
        if let thingName = thingName {
            try encodeContainer.encode(thingName, forKey: .thingName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .thingName)
        thingName = thingNameDecoded
        let servicesContainer = try containerValues.decodeIfPresent([String].self, forKey: .services)
        var servicesDecoded0:[String]? = nil
        if let servicesContainer = servicesContainer {
            servicesDecoded0 = [String]()
            for string0 in servicesContainer {
                servicesDecoded0?.append(string0)
            }
        }
        services = servicesDecoded0
    }
}
