// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SimpleRuleEvaluation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case inputPropertyValue
        case `operator` = "operator"
        case thresholdValue
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputPropertyValue = inputPropertyValue {
            try encodeContainer.encode(inputPropertyValue, forKey: .inputPropertyValue)
        }
        if let `operator` = `operator` {
            try encodeContainer.encode(`operator`.rawValue, forKey: .`operator`)
        }
        if let thresholdValue = thresholdValue {
            try encodeContainer.encode(thresholdValue, forKey: .thresholdValue)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputPropertyValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inputPropertyValue)
        inputPropertyValue = inputPropertyValueDecoded
        let operatorDecoded = try containerValues.decodeIfPresent(ComparisonOperator.self, forKey: .operator)
        `operator` = operatorDecoded
        let thresholdValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .thresholdValue)
        thresholdValue = thresholdValueDecoded
    }
}
