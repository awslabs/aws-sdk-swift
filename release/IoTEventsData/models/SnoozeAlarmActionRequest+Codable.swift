// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SnoozeAlarmActionRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alarmModelName
        case keyValue
        case note
        case requestId
        case snoozeDuration
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmModelName = alarmModelName {
            try encodeContainer.encode(alarmModelName, forKey: .alarmModelName)
        }
        if let keyValue = keyValue {
            try encodeContainer.encode(keyValue, forKey: .keyValue)
        }
        if let note = note {
            try encodeContainer.encode(note, forKey: .note)
        }
        if let requestId = requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
        if let snoozeDuration = snoozeDuration {
            try encodeContainer.encode(snoozeDuration, forKey: .snoozeDuration)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let alarmModelNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .alarmModelName)
        alarmModelName = alarmModelNameDecoded
        let keyValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyValue)
        keyValue = keyValueDecoded
        let noteDecoded = try containerValues.decodeIfPresent(String.self, forKey: .note)
        note = noteDecoded
        let snoozeDurationDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .snoozeDuration)
        snoozeDuration = snoozeDurationDecoded
    }
}
