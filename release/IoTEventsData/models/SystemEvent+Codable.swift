// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SystemEvent: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case eventType
        case stateChangeConfiguration
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventType = eventType {
            try encodeContainer.encode(eventType.rawValue, forKey: .eventType)
        }
        if let stateChangeConfiguration = stateChangeConfiguration {
            try encodeContainer.encode(stateChangeConfiguration, forKey: .stateChangeConfiguration)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventTypeDecoded = try containerValues.decodeIfPresent(EventType.self, forKey: .eventType)
        eventType = eventTypeDecoded
        let stateChangeConfigurationDecoded = try containerValues.decodeIfPresent(StateChangeConfiguration.self, forKey: .stateChangeConfiguration)
        stateChangeConfiguration = stateChangeConfigurationDecoded
    }
}
