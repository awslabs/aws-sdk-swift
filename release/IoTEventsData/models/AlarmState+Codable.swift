// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AlarmState: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case customerAction
        case ruleEvaluation
        case stateName
        case systemEvent
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customerAction = customerAction {
            try encodeContainer.encode(customerAction, forKey: .customerAction)
        }
        if let ruleEvaluation = ruleEvaluation {
            try encodeContainer.encode(ruleEvaluation, forKey: .ruleEvaluation)
        }
        if let stateName = stateName {
            try encodeContainer.encode(stateName.rawValue, forKey: .stateName)
        }
        if let systemEvent = systemEvent {
            try encodeContainer.encode(systemEvent, forKey: .systemEvent)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateNameDecoded = try containerValues.decodeIfPresent(AlarmStateName.self, forKey: .stateName)
        stateName = stateNameDecoded
        let ruleEvaluationDecoded = try containerValues.decodeIfPresent(RuleEvaluation.self, forKey: .ruleEvaluation)
        ruleEvaluation = ruleEvaluationDecoded
        let customerActionDecoded = try containerValues.decodeIfPresent(CustomerAction.self, forKey: .customerAction)
        customerAction = customerActionDecoded
        let systemEventDecoded = try containerValues.decodeIfPresent(SystemEvent.self, forKey: .systemEvent)
        systemEvent = systemEventDecoded
    }
}
