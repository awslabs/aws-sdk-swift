// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Contains information about the current state of the alarm.</p>
public struct AlarmState: Equatable {
    /// <p>Contains information about the action that you can take to respond to the alarm.</p>
    public let customerAction: CustomerAction?
    /// <p>Information needed to evaluate data.</p>
    public let ruleEvaluation: RuleEvaluation?
    /// <p>The name of the alarm state. The state name can be one of the following values:</p>
    ///          <ul>
    ///             <li>
    /// 		             <p>
    ///                   <code>DISABLED</code> - When the alarm is in the <code>DISABLED</code> state,
    /// 		it isn't ready to evaluate data. To enable the alarm,
    /// 		you must change the alarm to the <code>NORMAL</code> state.</p>
    /// 	           </li>
    ///             <li>
    /// 		             <p>
    ///                   <code>NORMAL</code> - When the alarm is in the <code>NORMAL</code> state,
    /// 		it's ready to evaluate data.</p>
    /// 	           </li>
    ///             <li>
    /// 		             <p>
    ///                   <code>ACTIVE</code> - If the alarm is in the <code>ACTIVE</code> state,
    /// 		the alarm is invoked.</p>
    /// 	           </li>
    ///             <li>
    /// 		             <p>
    ///                   <code>ACKNOWLEDGED</code> - When the alarm is in the <code>ACKNOWLEDGED</code> state,
    /// 		the alarm was invoked and you acknowledged the alarm.</p>
    /// 	           </li>
    ///             <li>
    /// 		             <p>
    ///                   <code>SNOOZE_DISABLED</code> - When the alarm is in the <code>SNOOZE_DISABLED</code> state,
    /// 		the alarm is disabled for a specified period of time. After the snooze time,
    /// 		the alarm automatically changes to the <code>NORMAL</code> state. </p>
    /// 	           </li>
    ///             <li>
    /// 		             <p>
    ///                   <code>LATCHED</code> - When the alarm is in the <code>LATCHED</code> state,
    /// 		the alarm was invoked. However, the data that the alarm is currently evaluating is within the specified range.
    /// 		To change the alarm to the <code>NORMAL</code> state, you must acknowledge the alarm.</p>
    /// 	           </li>
    ///          </ul>
    public let stateName: AlarmStateName?
    /// <p>Contains information about alarm state changes.</p>
    public let systemEvent: SystemEvent?

    public init (
        customerAction: CustomerAction? = nil,
        ruleEvaluation: RuleEvaluation? = nil,
        stateName: AlarmStateName? = nil,
        systemEvent: SystemEvent? = nil
    )
    {
        self.customerAction = customerAction
        self.ruleEvaluation = ruleEvaluation
        self.stateName = stateName
        self.systemEvent = systemEvent
    }
}
