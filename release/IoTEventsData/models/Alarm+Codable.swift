// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Alarm: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alarmModelName
        case alarmModelVersion
        case alarmState
        case creationTime
        case keyValue
        case lastUpdateTime
        case severity
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmModelName = alarmModelName {
            try encodeContainer.encode(alarmModelName, forKey: .alarmModelName)
        }
        if let alarmModelVersion = alarmModelVersion {
            try encodeContainer.encode(alarmModelVersion, forKey: .alarmModelVersion)
        }
        if let alarmState = alarmState {
            try encodeContainer.encode(alarmState, forKey: .alarmState)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let keyValue = keyValue {
            try encodeContainer.encode(keyValue, forKey: .keyValue)
        }
        if let lastUpdateTime = lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let severity = severity {
            try encodeContainer.encode(severity, forKey: .severity)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmModelNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .alarmModelName)
        alarmModelName = alarmModelNameDecoded
        let alarmModelVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .alarmModelVersion)
        alarmModelVersion = alarmModelVersionDecoded
        let keyValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyValue)
        keyValue = keyValueDecoded
        let alarmStateDecoded = try containerValues.decodeIfPresent(AlarmState.self, forKey: .alarmState)
        alarmState = alarmStateDecoded
        let severityDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .severity)
        severity = severityDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
    }
}
