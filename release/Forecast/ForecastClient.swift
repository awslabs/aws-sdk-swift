// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation

public class ForecastClient {
    let client: SdkHttpClient
    let config: ForecastClientConfiguration
    let serviceName = "forecast"
    let encoder: RequestEncoder
    let decoder: ResponseDecoder

    public init(config: ForecastClientConfiguration) {
        client = SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        self.encoder = config.encoder ?? encoder
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public class ForecastClientConfiguration: ClientRuntime.Configuration, AWSClientConfiguration {

        public var region: String
        public var credentialsProvider: AWSCredentialsProvider
        public var signingRegion: String
        public var endpointResolver: EndpointResolver

        public init (
            credentialsProvider: AWSCredentialsProvider,
            endpointResolver: EndpointResolver,
            region: String,
            signingRegion: String
        ) throws
        {
            self.credentialsProvider = credentialsProvider
            self.endpointResolver = endpointResolver
            self.region = region
            self.signingRegion = signingRegion
        }

        public convenience init(credentialsProvider: AWSCredentialsProvider) throws {
            let region = "us-east-1"
            let signingRegion = "us-east-1"
            let endpointResolver = DefaultEndpointResolver()
            try self.init(
                credentialsProvider: credentialsProvider,
                endpointResolver: endpointResolver,
                region: region,
                signingRegion: signingRegion
            )
        }

        public static func `default`() throws -> ForecastClientConfiguration {
            let awsCredsProvider = try AWSCredentialsProvider.fromEnv()
            return try ForecastClientConfiguration(credentialsProvider: awsCredsProvider)
        }
    }
}

extension ForecastClient: ForecastClientProtocol {
    /// <p>Creates an Amazon Forecast dataset. The information about the dataset that you provide helps
    ///       Forecast understand how to consume the data for model training. This includes the
    ///       following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <i>
    ///                      <code>DataFrequency</code>
    ///                   </i> - How frequently your historical
    ///           time-series data is collected.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <i>
    ///                      <code>Domain</code>
    ///                   </i> and
    ///             <i>
    ///                      <code>DatasetType</code>
    ///                   </i> - Each dataset has an associated dataset
    ///           domain and a type within the domain. Amazon Forecast provides a list of predefined domains and
    ///           types within each domain. For each unique dataset domain and type within the domain,
    ///           Amazon Forecast requires your data to include a minimum set of predefined fields.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <i>
    ///                      <code>Schema</code>
    ///                   </i> - A schema specifies the fields in the dataset,
    ///           including the field name and data type.</p>
    ///             </li>
    ///          </ul>
    ///          <p>After creating a dataset, you import your training data into it and add the dataset to a
    ///       dataset group. You use the dataset group to create a predictor. For more information, see
    ///         <a>howitworks-datasets-groups</a>.</p>
    ///          <p>To get a list of all your datasets, use the <a>ListDatasets</a>
    ///       operation.</p>
    ///          <p>For example Forecast datasets, see the <a href="https://github.com/aws-samples/amazon-forecast-samples">Amazon Forecast Sample GitHub
    ///         repository</a>.</p>
    ///          <note>
    ///             <p>The <code>Status</code> of a dataset must be <code>ACTIVE</code> before you can import
    ///         training data. Use the <a>DescribeDataset</a> operation to get the status.</p>
    ///          </note>
    public func createDataset(input: CreateDatasetInput, completion: @escaping (SdkResult<CreateDatasetOutput, CreateDatasetOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createDataset")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateDatasetInput, CreateDatasetOutput, CreateDatasetOutputError>(id: "createDataset")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateDatasetInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateDatasetInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateDatasetInput, CreateDatasetOutput, CreateDatasetOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CreateDatasetInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CreateDatasetInput, CreateDatasetOutput, CreateDatasetOutputError>(xAmzTarget: "AmazonForecast.CreateDataset"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a dataset group, which holds a collection of related datasets. You can add
    ///       datasets to the dataset group when you create the dataset group, or later by using the <a>UpdateDatasetGroup</a> operation.</p>
    ///          <p>After creating a dataset group and adding datasets, you use the dataset group when you
    ///       create a predictor. For more information, see <a>howitworks-datasets-groups</a>.</p>
    ///          <p>To get a list of all your datasets groups, use the <a>ListDatasetGroups</a>
    ///       operation.</p>
    ///          <note>
    ///             <p>The <code>Status</code> of a dataset group must be <code>ACTIVE</code> before you can
    ///         use the dataset group to create a predictor. To get the status, use the <a>DescribeDatasetGroup</a> operation.</p>
    ///          </note>
    public func createDatasetGroup(input: CreateDatasetGroupInput, completion: @escaping (SdkResult<CreateDatasetGroupOutput, CreateDatasetGroupOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createDatasetGroup")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateDatasetGroupInput, CreateDatasetGroupOutput, CreateDatasetGroupOutputError>(id: "createDatasetGroup")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateDatasetGroupInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateDatasetGroupInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateDatasetGroupInput, CreateDatasetGroupOutput, CreateDatasetGroupOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CreateDatasetGroupInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CreateDatasetGroupInput, CreateDatasetGroupOutput, CreateDatasetGroupOutputError>(xAmzTarget: "AmazonForecast.CreateDatasetGroup"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Imports your training data to an Amazon Forecast dataset. You provide the location of your
    ///       training data in an Amazon Simple Storage Service (Amazon S3) bucket and the Amazon Resource Name (ARN) of the dataset
    ///       that you want to import the data to.</p>
    ///          <p>You must specify a <a>DataSource</a> object that includes an AWS Identity and Access Management (IAM)
    ///       role that Amazon Forecast can assume to access the data, as Amazon Forecast makes a copy of your data and
    ///       processes it in an internal AWS system. For more information, see <a>aws-forecast-iam-roles</a>.</p>
    ///          <p>The training data must be in CSV format. The delimiter must be a comma (,).</p>
    ///          <p>You can specify the path to a specific CSV file, the S3 bucket, or to a folder in the S3
    ///       bucket. For the latter two cases, Amazon Forecast imports all files up to the limit of 10,000
    ///       files.</p>
    ///
    ///
    ///          <p>Because dataset imports are not aggregated, your most recent dataset import is the one
    ///       that is used when training a predictor or generating a forecast. Make sure that your most
    ///       recent dataset import contains all of the data you want to model off of, and not just the new
    ///       data collected since the previous import.</p>
    ///
    ///
    ///          <p>To get a list of all your dataset import jobs, filtered by specified criteria, use the
    ///         <a>ListDatasetImportJobs</a> operation.</p>
    public func createDatasetImportJob(input: CreateDatasetImportJobInput, completion: @escaping (SdkResult<CreateDatasetImportJobOutput, CreateDatasetImportJobOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createDatasetImportJob")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateDatasetImportJobInput, CreateDatasetImportJobOutput, CreateDatasetImportJobOutputError>(id: "createDatasetImportJob")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateDatasetImportJobInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateDatasetImportJobInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateDatasetImportJobInput, CreateDatasetImportJobOutput, CreateDatasetImportJobOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CreateDatasetImportJobInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CreateDatasetImportJobInput, CreateDatasetImportJobOutput, CreateDatasetImportJobOutputError>(xAmzTarget: "AmazonForecast.CreateDatasetImportJob"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a forecast for each item in the <code>TARGET_TIME_SERIES</code> dataset that was
    ///       used to train the predictor. This is known as inference. To retrieve the forecast for a single
    ///       item at low latency, use the  operation. To
    ///       export the complete forecast into your Amazon Simple Storage Service (Amazon S3) bucket, use the <a>CreateForecastExportJob</a> operation.</p>
    ///          <p>The range of the forecast is determined by the <code>ForecastHorizon</code> value, which
    ///       you specify in the <a>CreatePredictor</a> request. When you query a forecast, you
    ///       can request a specific date range within the forecast.</p>
    ///          <p>To get a list of all your forecasts, use the <a>ListForecasts</a>
    ///       operation.</p>
    ///          <note>
    ///             <p>The forecasts generated by Amazon Forecast are in the same time zone as the dataset that was
    ///         used to create the predictor.</p>
    ///          </note>
    ///          <p>For more information, see <a>howitworks-forecast</a>.</p>
    ///          <note>
    ///             <p>The <code>Status</code> of the forecast must be <code>ACTIVE</code> before you can query
    ///         or export the forecast. Use the <a>DescribeForecast</a> operation to get the
    ///         status.</p>
    ///          </note>
    public func createForecast(input: CreateForecastInput, completion: @escaping (SdkResult<CreateForecastOutput, CreateForecastOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createForecast")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateForecastInput, CreateForecastOutput, CreateForecastOutputError>(id: "createForecast")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateForecastInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateForecastInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateForecastInput, CreateForecastOutput, CreateForecastOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CreateForecastInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CreateForecastInput, CreateForecastOutput, CreateForecastOutputError>(xAmzTarget: "AmazonForecast.CreateForecast"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Exports a forecast created by the <a>CreateForecast</a> operation to your
    ///       Amazon Simple Storage Service (Amazon S3) bucket. The forecast file name will match the following conventions:</p>
    ///          <p><ForecastExportJobName>_<ExportTimestamp>_<PartNumber></p>
    ///          <p>where the <ExportTimestamp> component is in Java SimpleDateFormat
    ///       (yyyy-MM-ddTHH-mm-ssZ).</p>
    ///          <p>You must specify a <a>DataDestination</a> object that includes an AWS Identity and Access Management
    ///       (IAM) role that Amazon Forecast can assume to access the Amazon S3 bucket. For more information, see
    ///         <a>aws-forecast-iam-roles</a>.</p>
    ///          <p>For more information, see <a>howitworks-forecast</a>.</p>
    ///          <p>To get a list of all your forecast export jobs, use the <a>ListForecastExportJobs</a> operation.</p>
    ///          <note>
    ///             <p>The <code>Status</code> of the forecast export job must be <code>ACTIVE</code> before
    ///         you can access the forecast in your Amazon S3 bucket. To get the status, use the <a>DescribeForecastExportJob</a> operation.</p>
    ///          </note>
    public func createForecastExportJob(input: CreateForecastExportJobInput, completion: @escaping (SdkResult<CreateForecastExportJobOutput, CreateForecastExportJobOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createForecastExportJob")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateForecastExportJobInput, CreateForecastExportJobOutput, CreateForecastExportJobOutputError>(id: "createForecastExportJob")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateForecastExportJobInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateForecastExportJobInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateForecastExportJobInput, CreateForecastExportJobOutput, CreateForecastExportJobOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CreateForecastExportJobInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CreateForecastExportJobInput, CreateForecastExportJobOutput, CreateForecastExportJobOutputError>(xAmzTarget: "AmazonForecast.CreateForecastExportJob"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates an Amazon Forecast predictor.</p>
    ///          <p>In the request, provide a dataset group and either specify an algorithm or let
    ///       Amazon Forecast choose an algorithm for you using AutoML. If you specify an algorithm, you also can
    ///       override algorithm-specific hyperparameters.</p>
    ///          <p>Amazon Forecast uses the algorithm to train a predictor using the latest version of the
    ///       datasets in the specified dataset group. You can then generate a
    ///       forecast using the <a>CreateForecast</a> operation.</p>
    ///          <p>
    ///       To see the evaluation metrics, use the <a>GetAccuracyMetrics</a> operation.
    ///     </p>
    ///          <p>You can specify a featurization configuration to fill and aggregate the data
    ///       fields in the <code>TARGET_TIME_SERIES</code> dataset to improve model training. For more
    ///       information, see <a>FeaturizationConfig</a>.</p>
    ///          <p>For RELATED_TIME_SERIES datasets, <code>CreatePredictor</code> verifies that the
    ///         <code>DataFrequency</code> specified when the dataset was created matches the
    ///         <code>ForecastFrequency</code>. TARGET_TIME_SERIES datasets don't have this restriction.
    ///       Amazon Forecast also verifies the delimiter and timestamp format. For more information, see <a>howitworks-datasets-groups</a>.</p>
    ///          <p>By default, predictors are trained and evaluated at the 0.1 (P10), 0.5 (P50), and 0.9
    ///       (P90) quantiles. You can choose custom forecast types to train and evaluate your predictor
    ///       by setting the <code>ForecastTypes</code>.
    ///     </p>
    ///          <p>
    ///             <b>AutoML</b>
    ///          </p>
    ///          <p>If you want Amazon Forecast to evaluate each algorithm and choose the one that minimizes the
    ///         <code>objective function</code>, set <code>PerformAutoML</code> to <code>true</code>. The
    ///         <code>objective function</code> is defined as the mean of the weighted losses over the
    ///       forecast types. By default, these are the p10, p50, and p90
    ///       quantile losses. For more information, see <a>EvaluationResult</a>.</p>
    ///          <p>When AutoML is enabled, the following properties are disallowed:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>AlgorithmArn</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>HPOConfig</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>PerformHPO</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TrainingParameters</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///
    ///
    ///
    ///          <p>To get a list of all of your predictors, use the <a>ListPredictors</a>
    ///       operation.</p>
    ///          <note>
    ///             <p>Before you can use the predictor to create a forecast, the <code>Status</code> of the
    ///         predictor must be <code>ACTIVE</code>, signifying that training has completed. To get the
    ///         status, use the <a>DescribePredictor</a> operation.</p>
    ///          </note>
    public func createPredictor(input: CreatePredictorInput, completion: @escaping (SdkResult<CreatePredictorOutput, CreatePredictorOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createPredictor")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreatePredictorInput, CreatePredictorOutput, CreatePredictorOutputError>(id: "createPredictor")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreatePredictorInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreatePredictorInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreatePredictorInput, CreatePredictorOutput, CreatePredictorOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CreatePredictorInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CreatePredictorInput, CreatePredictorOutput, CreatePredictorOutputError>(xAmzTarget: "AmazonForecast.CreatePredictor"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Exports backtest forecasts and accuracy metrics generated by the <a>CreatePredictor</a> operation. Two folders containing CSV files are exported
    ///             to your specified S3 bucket.</p>
    ///         <p> The export file names will match the following conventions:</p>
    ///         <p>
    ///             <code><ExportJobName>_<ExportTimestamp>_<PartNumber>.csv</code>
    ///          </p>
    ///         <p>The <ExportTimestamp> component is in Java SimpleDate format
    ///             (yyyy-MM-ddTHH-mm-ssZ).</p>
    ///         <p>You must specify a <a>DataDestination</a> object that includes an Amazon S3
    ///             bucket and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the Amazon S3
    ///             bucket. For more information, see <a>aws-forecast-iam-roles</a>.</p>
    ///         <note>
    ///             <p>The <code>Status</code> of the export job must be <code>ACTIVE</code> before
    ///                 you can access the export in your Amazon S3 bucket. To get the status, use the <a>DescribePredictorBacktestExportJob</a> operation.</p>
    ///         </note>
    public func createPredictorBacktestExportJob(input: CreatePredictorBacktestExportJobInput, completion: @escaping (SdkResult<CreatePredictorBacktestExportJobOutput, CreatePredictorBacktestExportJobOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createPredictorBacktestExportJob")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreatePredictorBacktestExportJobInput, CreatePredictorBacktestExportJobOutput, CreatePredictorBacktestExportJobOutputError>(id: "createPredictorBacktestExportJob")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreatePredictorBacktestExportJobInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreatePredictorBacktestExportJobInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreatePredictorBacktestExportJobInput, CreatePredictorBacktestExportJobOutput, CreatePredictorBacktestExportJobOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CreatePredictorBacktestExportJobInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CreatePredictorBacktestExportJobInput, CreatePredictorBacktestExportJobOutput, CreatePredictorBacktestExportJobOutputError>(xAmzTarget: "AmazonForecast.CreatePredictorBacktestExportJob"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes an Amazon Forecast dataset that was created using the <a>CreateDataset</a>
    ///       operation. You can only delete datasets that have a status of <code>ACTIVE</code> or
    ///         <code>CREATE_FAILED</code>. To get the status use the <a>DescribeDataset</a>
    ///       operation.</p>
    ///          <note>
    ///             <p>Forecast does not automatically update any dataset groups that contain the deleted dataset.
    ///         In order to update the dataset group, use the
    ///         operation, omitting the deleted dataset's ARN.</p>
    ///          </note>
    public func deleteDataset(input: DeleteDatasetInput, completion: @escaping (SdkResult<DeleteDatasetOutput, DeleteDatasetOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteDataset")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteDatasetInput, DeleteDatasetOutput, DeleteDatasetOutputError>(id: "deleteDataset")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteDatasetInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteDatasetInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteDatasetInput, DeleteDatasetOutput, DeleteDatasetOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeleteDatasetInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeleteDatasetInput, DeleteDatasetOutput, DeleteDatasetOutputError>(xAmzTarget: "AmazonForecast.DeleteDataset"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a dataset group created using the <a>CreateDatasetGroup</a> operation.
    ///       You can only delete dataset groups that have a status of <code>ACTIVE</code>,
    ///         <code>CREATE_FAILED</code>, or <code>UPDATE_FAILED</code>. To get the status, use the <a>DescribeDatasetGroup</a> operation.</p>
    ///          <p>This operation deletes only the dataset group, not the datasets in the group.</p>
    public func deleteDatasetGroup(input: DeleteDatasetGroupInput, completion: @escaping (SdkResult<DeleteDatasetGroupOutput, DeleteDatasetGroupOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteDatasetGroup")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteDatasetGroupInput, DeleteDatasetGroupOutput, DeleteDatasetGroupOutputError>(id: "deleteDatasetGroup")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteDatasetGroupInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteDatasetGroupInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteDatasetGroupInput, DeleteDatasetGroupOutput, DeleteDatasetGroupOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeleteDatasetGroupInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeleteDatasetGroupInput, DeleteDatasetGroupOutput, DeleteDatasetGroupOutputError>(xAmzTarget: "AmazonForecast.DeleteDatasetGroup"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a dataset import job created using the <a>CreateDatasetImportJob</a>
    ///       operation. You can delete only dataset import jobs that have a status of <code>ACTIVE</code>
    ///       or <code>CREATE_FAILED</code>. To get the status, use the <a>DescribeDatasetImportJob</a> operation.</p>
    public func deleteDatasetImportJob(input: DeleteDatasetImportJobInput, completion: @escaping (SdkResult<DeleteDatasetImportJobOutput, DeleteDatasetImportJobOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteDatasetImportJob")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteDatasetImportJobInput, DeleteDatasetImportJobOutput, DeleteDatasetImportJobOutputError>(id: "deleteDatasetImportJob")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteDatasetImportJobInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteDatasetImportJobInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteDatasetImportJobInput, DeleteDatasetImportJobOutput, DeleteDatasetImportJobOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeleteDatasetImportJobInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeleteDatasetImportJobInput, DeleteDatasetImportJobOutput, DeleteDatasetImportJobOutputError>(xAmzTarget: "AmazonForecast.DeleteDatasetImportJob"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a forecast created using the <a>CreateForecast</a> operation. You can
    ///       delete only forecasts that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>.
    ///       To get the status, use the <a>DescribeForecast</a> operation.</p>
    ///          <p>You can't delete a forecast while it is being exported. After a forecast is deleted, you
    ///       can no longer query the forecast.</p>
    public func deleteForecast(input: DeleteForecastInput, completion: @escaping (SdkResult<DeleteForecastOutput, DeleteForecastOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteForecast")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteForecastInput, DeleteForecastOutput, DeleteForecastOutputError>(id: "deleteForecast")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteForecastInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteForecastInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteForecastInput, DeleteForecastOutput, DeleteForecastOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeleteForecastInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeleteForecastInput, DeleteForecastOutput, DeleteForecastOutputError>(xAmzTarget: "AmazonForecast.DeleteForecast"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a forecast export job created using the <a>CreateForecastExportJob</a>
    ///       operation. You can delete only export jobs that have a status of <code>ACTIVE</code> or
    ///         <code>CREATE_FAILED</code>. To get the status, use the <a>DescribeForecastExportJob</a> operation.</p>
    public func deleteForecastExportJob(input: DeleteForecastExportJobInput, completion: @escaping (SdkResult<DeleteForecastExportJobOutput, DeleteForecastExportJobOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteForecastExportJob")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteForecastExportJobInput, DeleteForecastExportJobOutput, DeleteForecastExportJobOutputError>(id: "deleteForecastExportJob")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteForecastExportJobInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteForecastExportJobInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteForecastExportJobInput, DeleteForecastExportJobOutput, DeleteForecastExportJobOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeleteForecastExportJobInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeleteForecastExportJobInput, DeleteForecastExportJobOutput, DeleteForecastExportJobOutputError>(xAmzTarget: "AmazonForecast.DeleteForecastExportJob"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a predictor created using the <a>CreatePredictor</a> operation. You can
    ///       delete only predictor that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>.
    ///       To get the status, use the <a>DescribePredictor</a> operation.</p>
    public func deletePredictor(input: DeletePredictorInput, completion: @escaping (SdkResult<DeletePredictorOutput, DeletePredictorOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deletePredictor")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeletePredictorInput, DeletePredictorOutput, DeletePredictorOutputError>(id: "deletePredictor")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeletePredictorInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeletePredictorInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeletePredictorInput, DeletePredictorOutput, DeletePredictorOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeletePredictorInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeletePredictorInput, DeletePredictorOutput, DeletePredictorOutputError>(xAmzTarget: "AmazonForecast.DeletePredictor"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a predictor backtest export job.</p>
    public func deletePredictorBacktestExportJob(input: DeletePredictorBacktestExportJobInput, completion: @escaping (SdkResult<DeletePredictorBacktestExportJobOutput, DeletePredictorBacktestExportJobOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deletePredictorBacktestExportJob")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeletePredictorBacktestExportJobInput, DeletePredictorBacktestExportJobOutput, DeletePredictorBacktestExportJobOutputError>(id: "deletePredictorBacktestExportJob")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeletePredictorBacktestExportJobInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeletePredictorBacktestExportJobInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeletePredictorBacktestExportJobInput, DeletePredictorBacktestExportJobOutput, DeletePredictorBacktestExportJobOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeletePredictorBacktestExportJobInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeletePredictorBacktestExportJobInput, DeletePredictorBacktestExportJobOutput, DeletePredictorBacktestExportJobOutputError>(xAmzTarget: "AmazonForecast.DeletePredictorBacktestExportJob"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes an entire resource tree. This operation will delete the parent resource and
    ///             its child resources.</p>
    ///         <p>Child resources are resources that were created from another resource. For example,
    ///             when a forecast is generated from a predictor, the forecast is the child resource and
    ///             the predictor is the parent resource.</p>
    ///         <p>Amazon Forecast resources possess the following parent-child resource hierarchies:</p>
    ///
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <b>Dataset</b>: dataset import jobs</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>Dataset Group</b>: predictors, predictor backtest
    ///                     export jobs, forecasts, forecast export jobs</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>Predictor</b>: predictor backtest export jobs,
    ///                     forecasts, forecast export jobs</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>Forecast</b>: forecast export jobs</p>
    ///             </li>
    ///          </ul>
    ///         <note>
    ///             <p>
    ///                <code>DeleteResourceTree</code> will only delete Amazon Forecast resources, and will not
    ///                 delete datasets or exported files stored in Amazon S3. </p>
    ///         </note>
    public func deleteResourceTree(input: DeleteResourceTreeInput, completion: @escaping (SdkResult<DeleteResourceTreeOutput, DeleteResourceTreeOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteResourceTree")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteResourceTreeInput, DeleteResourceTreeOutput, DeleteResourceTreeOutputError>(id: "deleteResourceTree")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteResourceTreeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteResourceTreeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteResourceTreeInput, DeleteResourceTreeOutput, DeleteResourceTreeOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeleteResourceTreeInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeleteResourceTreeInput, DeleteResourceTreeOutput, DeleteResourceTreeOutputError>(xAmzTarget: "AmazonForecast.DeleteResourceTree"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes an Amazon Forecast dataset created using the <a>CreateDataset</a>
    ///       operation.</p>
    ///          <p>In addition to listing the parameters specified in the <code>CreateDataset</code> request,
    ///       this operation includes the following dataset properties:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CreationTime</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LastModificationTime</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Status</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public func describeDataset(input: DescribeDatasetInput, completion: @escaping (SdkResult<DescribeDatasetOutput, DescribeDatasetOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeDataset")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeDatasetInput, DescribeDatasetOutput, DescribeDatasetOutputError>(id: "describeDataset")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeDatasetInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeDatasetInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeDatasetInput, DescribeDatasetOutput, DescribeDatasetOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeDatasetInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeDatasetInput, DescribeDatasetOutput, DescribeDatasetOutputError>(xAmzTarget: "AmazonForecast.DescribeDataset"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes a dataset group created using the <a>CreateDatasetGroup</a>
    ///       operation.</p>
    ///          <p>In addition to listing the parameters provided in the <code>CreateDatasetGroup</code>
    ///       request, this operation includes the following properties:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>DatasetArns</code> - The datasets belonging to the group.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CreationTime</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LastModificationTime</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Status</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public func describeDatasetGroup(input: DescribeDatasetGroupInput, completion: @escaping (SdkResult<DescribeDatasetGroupOutput, DescribeDatasetGroupOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeDatasetGroup")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeDatasetGroupInput, DescribeDatasetGroupOutput, DescribeDatasetGroupOutputError>(id: "describeDatasetGroup")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeDatasetGroupInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeDatasetGroupInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeDatasetGroupInput, DescribeDatasetGroupOutput, DescribeDatasetGroupOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeDatasetGroupInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeDatasetGroupInput, DescribeDatasetGroupOutput, DescribeDatasetGroupOutputError>(xAmzTarget: "AmazonForecast.DescribeDatasetGroup"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes a dataset import job created using the <a>CreateDatasetImportJob</a>
    ///       operation.</p>
    ///          <p>In addition to listing the parameters provided in the <code>CreateDatasetImportJob</code>
    ///       request, this operation includes the following properties:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CreationTime</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LastModificationTime</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DataSize</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FieldStatistics</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Status</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Message</code> - If an error occurred, information about the error.</p>
    ///             </li>
    ///          </ul>
    public func describeDatasetImportJob(input: DescribeDatasetImportJobInput, completion: @escaping (SdkResult<DescribeDatasetImportJobOutput, DescribeDatasetImportJobOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeDatasetImportJob")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeDatasetImportJobInput, DescribeDatasetImportJobOutput, DescribeDatasetImportJobOutputError>(id: "describeDatasetImportJob")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeDatasetImportJobInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeDatasetImportJobInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeDatasetImportJobInput, DescribeDatasetImportJobOutput, DescribeDatasetImportJobOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeDatasetImportJobInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeDatasetImportJobInput, DescribeDatasetImportJobOutput, DescribeDatasetImportJobOutputError>(xAmzTarget: "AmazonForecast.DescribeDatasetImportJob"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes a forecast created using the <a>CreateForecast</a> operation.</p>
    ///          <p>In addition to listing the properties provided in the <code>CreateForecast</code> request,
    ///       this operation lists the following properties:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>DatasetGroupArn</code> - The dataset group that provided the training
    ///           data.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CreationTime</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LastModificationTime</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Status</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Message</code> - If an error occurred, information about the error.</p>
    ///             </li>
    ///          </ul>
    public func describeForecast(input: DescribeForecastInput, completion: @escaping (SdkResult<DescribeForecastOutput, DescribeForecastOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeForecast")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeForecastInput, DescribeForecastOutput, DescribeForecastOutputError>(id: "describeForecast")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeForecastInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeForecastInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeForecastInput, DescribeForecastOutput, DescribeForecastOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeForecastInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeForecastInput, DescribeForecastOutput, DescribeForecastOutputError>(xAmzTarget: "AmazonForecast.DescribeForecast"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes a forecast export job created using the <a>CreateForecastExportJob</a> operation.</p>
    ///          <p>In addition to listing the properties provided by the user in the
    ///         <code>CreateForecastExportJob</code> request, this operation lists the following
    ///       properties:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CreationTime</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LastModificationTime</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Status</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Message</code> - If an error occurred, information about the error.</p>
    ///             </li>
    ///          </ul>
    public func describeForecastExportJob(input: DescribeForecastExportJobInput, completion: @escaping (SdkResult<DescribeForecastExportJobOutput, DescribeForecastExportJobOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeForecastExportJob")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeForecastExportJobInput, DescribeForecastExportJobOutput, DescribeForecastExportJobOutputError>(id: "describeForecastExportJob")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeForecastExportJobInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeForecastExportJobInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeForecastExportJobInput, DescribeForecastExportJobOutput, DescribeForecastExportJobOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeForecastExportJobInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeForecastExportJobInput, DescribeForecastExportJobOutput, DescribeForecastExportJobOutputError>(xAmzTarget: "AmazonForecast.DescribeForecastExportJob"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes a predictor created using the <a>CreatePredictor</a>
    ///       operation.</p>
    ///          <p>In addition to listing the properties provided in the <code>CreatePredictor</code>
    ///       request, this operation lists the following properties:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>DatasetImportJobArns</code> - The dataset import jobs used to import training
    ///           data.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>AutoMLAlgorithmArns</code> - If AutoML is performed, the algorithms that were
    ///           evaluated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CreationTime</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LastModificationTime</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Status</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Message</code> - If an error occurred, information about the error.</p>
    ///             </li>
    ///          </ul>
    public func describePredictor(input: DescribePredictorInput, completion: @escaping (SdkResult<DescribePredictorOutput, DescribePredictorOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describePredictor")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribePredictorInput, DescribePredictorOutput, DescribePredictorOutputError>(id: "describePredictor")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribePredictorInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribePredictorInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribePredictorInput, DescribePredictorOutput, DescribePredictorOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribePredictorInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribePredictorInput, DescribePredictorOutput, DescribePredictorOutputError>(xAmzTarget: "AmazonForecast.DescribePredictor"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes a predictor backtest export job created using the <a>CreatePredictorBacktestExportJob</a> operation.</p>
    ///         <p>In addition to listing the properties provided by the user in the
    ///             <code>CreatePredictorBacktestExportJob</code> request, this operation lists the
    ///             following properties:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>CreationTime</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>LastModificationTime</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>Status</code>
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Message</code> (if an error occurred)</p>
    ///             </li>
    ///          </ul>
    public func describePredictorBacktestExportJob(input: DescribePredictorBacktestExportJobInput, completion: @escaping (SdkResult<DescribePredictorBacktestExportJobOutput, DescribePredictorBacktestExportJobOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describePredictorBacktestExportJob")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribePredictorBacktestExportJobInput, DescribePredictorBacktestExportJobOutput, DescribePredictorBacktestExportJobOutputError>(id: "describePredictorBacktestExportJob")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribePredictorBacktestExportJobInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribePredictorBacktestExportJobInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribePredictorBacktestExportJobInput, DescribePredictorBacktestExportJobOutput, DescribePredictorBacktestExportJobOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribePredictorBacktestExportJobInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribePredictorBacktestExportJobInput, DescribePredictorBacktestExportJobOutput, DescribePredictorBacktestExportJobOutputError>(xAmzTarget: "AmazonForecast.DescribePredictorBacktestExportJob"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Provides metrics on the accuracy of the models that were trained by the <a>CreatePredictor</a> operation. Use metrics to see how well the model performed and
    ///       to decide whether to use the predictor to generate a forecast. For more information, see
    ///         <a href="https://docs.aws.amazon.com/forecast/latest/dg/metrics.html">Predictor
    ///         Metrics</a>.</p>
    ///          <p>This operation generates metrics for each backtest window that was evaluated. The number of backtest windows
    ///       (<code>NumberOfBacktestWindows</code>) is specified using the
    ///       <a>EvaluationParameters</a> object, which is optionally
    ///       included in the <code>CreatePredictor</code> request. If
    ///       <code>NumberOfBacktestWindows</code> isn't specified, the number defaults to one.</p>
    ///          <p>The parameters of the <code>filling</code> method determine which items contribute to
    ///       the metrics. If you want all items to contribute, specify <code>zero</code>.
    ///       If you want only those items that have complete data in the range being evaluated to
    ///       contribute, specify <code>nan</code>.
    ///       For more information, see <a>FeaturizationMethod</a>.</p>
    ///
    ///          <note>
    ///             <p>Before you can get accuracy metrics, the <code>Status</code> of the predictor must be
    ///         <code>ACTIVE</code>, signifying that training has completed.
    ///         To get the status, use the <a>DescribePredictor</a> operation.</p>
    ///          </note>
    public func getAccuracyMetrics(input: GetAccuracyMetricsInput, completion: @escaping (SdkResult<GetAccuracyMetricsOutput, GetAccuracyMetricsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getAccuracyMetrics")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetAccuracyMetricsInput, GetAccuracyMetricsOutput, GetAccuracyMetricsOutputError>(id: "getAccuracyMetrics")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetAccuracyMetricsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetAccuracyMetricsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetAccuracyMetricsInput, GetAccuracyMetricsOutput, GetAccuracyMetricsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: GetAccuracyMetricsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<GetAccuracyMetricsInput, GetAccuracyMetricsOutput, GetAccuracyMetricsOutputError>(xAmzTarget: "AmazonForecast.GetAccuracyMetrics"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of dataset groups created using the <a>CreateDatasetGroup</a>
    ///       operation. For each dataset group, this operation returns a summary of its properties,
    ///       including its Amazon Resource Name (ARN). You can retrieve the complete set of properties by
    ///       using the dataset group ARN with the <a>DescribeDatasetGroup</a> operation.</p>
    public func listDatasetGroups(input: ListDatasetGroupsInput, completion: @escaping (SdkResult<ListDatasetGroupsOutput, ListDatasetGroupsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listDatasetGroups")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListDatasetGroupsInput, ListDatasetGroupsOutput, ListDatasetGroupsOutputError>(id: "listDatasetGroups")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListDatasetGroupsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListDatasetGroupsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListDatasetGroupsInput, ListDatasetGroupsOutput, ListDatasetGroupsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListDatasetGroupsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListDatasetGroupsInput, ListDatasetGroupsOutput, ListDatasetGroupsOutputError>(xAmzTarget: "AmazonForecast.ListDatasetGroups"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of dataset import jobs created using the <a>CreateDatasetImportJob</a> operation. For each import job, this operation returns a
    ///       summary of its properties, including its Amazon Resource Name (ARN). You can retrieve the
    ///       complete set of properties by using the ARN with the <a>DescribeDatasetImportJob</a> operation. You can filter the list by providing an array of <a>Filter</a>
    ///       objects.</p>
    public func listDatasetImportJobs(input: ListDatasetImportJobsInput, completion: @escaping (SdkResult<ListDatasetImportJobsOutput, ListDatasetImportJobsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listDatasetImportJobs")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListDatasetImportJobsInput, ListDatasetImportJobsOutput, ListDatasetImportJobsOutputError>(id: "listDatasetImportJobs")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListDatasetImportJobsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListDatasetImportJobsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListDatasetImportJobsInput, ListDatasetImportJobsOutput, ListDatasetImportJobsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListDatasetImportJobsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListDatasetImportJobsInput, ListDatasetImportJobsOutput, ListDatasetImportJobsOutputError>(xAmzTarget: "AmazonForecast.ListDatasetImportJobs"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of datasets created using the <a>CreateDataset</a> operation.
    ///       For each dataset, a summary of its properties, including its Amazon Resource Name (ARN), is
    ///       returned. To retrieve the complete set of properties, use the ARN with the <a>DescribeDataset</a> operation.</p>
    public func listDatasets(input: ListDatasetsInput, completion: @escaping (SdkResult<ListDatasetsOutput, ListDatasetsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listDatasets")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListDatasetsInput, ListDatasetsOutput, ListDatasetsOutputError>(id: "listDatasets")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListDatasetsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListDatasetsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListDatasetsInput, ListDatasetsOutput, ListDatasetsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListDatasetsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListDatasetsInput, ListDatasetsOutput, ListDatasetsOutputError>(xAmzTarget: "AmazonForecast.ListDatasets"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of forecast export jobs created using the <a>CreateForecastExportJob</a> operation. For each forecast export job, this operation
    ///       returns a summary of its properties, including its Amazon Resource Name (ARN). To retrieve the
    ///       complete set of properties, use the ARN with the <a>DescribeForecastExportJob</a>
    ///       operation. You can filter the list using an array of <a>Filter</a> objects.</p>
    public func listForecastExportJobs(input: ListForecastExportJobsInput, completion: @escaping (SdkResult<ListForecastExportJobsOutput, ListForecastExportJobsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listForecastExportJobs")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListForecastExportJobsInput, ListForecastExportJobsOutput, ListForecastExportJobsOutputError>(id: "listForecastExportJobs")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListForecastExportJobsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListForecastExportJobsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListForecastExportJobsInput, ListForecastExportJobsOutput, ListForecastExportJobsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListForecastExportJobsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListForecastExportJobsInput, ListForecastExportJobsOutput, ListForecastExportJobsOutputError>(xAmzTarget: "AmazonForecast.ListForecastExportJobs"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of forecasts created using the <a>CreateForecast</a> operation.
    ///       For each forecast, this operation returns a summary of its properties, including its Amazon
    ///       Resource Name (ARN). To retrieve the complete set of properties, specify the ARN with the
    ///         <a>DescribeForecast</a> operation. You can filter the list using an array of
    ///         <a>Filter</a> objects.</p>
    public func listForecasts(input: ListForecastsInput, completion: @escaping (SdkResult<ListForecastsOutput, ListForecastsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listForecasts")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListForecastsInput, ListForecastsOutput, ListForecastsOutputError>(id: "listForecasts")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListForecastsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListForecastsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListForecastsInput, ListForecastsOutput, ListForecastsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListForecastsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListForecastsInput, ListForecastsOutput, ListForecastsOutputError>(xAmzTarget: "AmazonForecast.ListForecasts"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of predictor backtest export jobs created using the <a>CreatePredictorBacktestExportJob</a> operation. This operation returns a summary
    ///             for each backtest export job. You can filter the list using an array of <a>Filter</a> objects.</p>
    ///         <p>To retrieve the complete set of properties for a particular backtest export job, use the
    ///             ARN with the <a>DescribePredictorBacktestExportJob</a> operation.</p>
    public func listPredictorBacktestExportJobs(input: ListPredictorBacktestExportJobsInput, completion: @escaping (SdkResult<ListPredictorBacktestExportJobsOutput, ListPredictorBacktestExportJobsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listPredictorBacktestExportJobs")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListPredictorBacktestExportJobsInput, ListPredictorBacktestExportJobsOutput, ListPredictorBacktestExportJobsOutputError>(id: "listPredictorBacktestExportJobs")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListPredictorBacktestExportJobsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListPredictorBacktestExportJobsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListPredictorBacktestExportJobsInput, ListPredictorBacktestExportJobsOutput, ListPredictorBacktestExportJobsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListPredictorBacktestExportJobsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListPredictorBacktestExportJobsInput, ListPredictorBacktestExportJobsOutput, ListPredictorBacktestExportJobsOutputError>(xAmzTarget: "AmazonForecast.ListPredictorBacktestExportJobs"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of predictors created using the <a>CreatePredictor</a>
    ///       operation. For each predictor, this operation returns a summary of its properties, including
    ///       its Amazon Resource Name (ARN). You can retrieve the complete set of properties by using the
    ///       ARN with the <a>DescribePredictor</a> operation. You can filter the list using an
    ///       array of <a>Filter</a> objects.</p>
    public func listPredictors(input: ListPredictorsInput, completion: @escaping (SdkResult<ListPredictorsOutput, ListPredictorsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listPredictors")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListPredictorsInput, ListPredictorsOutput, ListPredictorsOutputError>(id: "listPredictors")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListPredictorsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListPredictorsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListPredictorsInput, ListPredictorsOutput, ListPredictorsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListPredictorsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListPredictorsInput, ListPredictorsOutput, ListPredictorsOutputError>(xAmzTarget: "AmazonForecast.ListPredictors"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the tags for an Amazon Forecast resource.</p>
    public func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutput, ListTagsForResourceOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listTagsForResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListTagsForResourceInput, ListTagsForResourceOutput, ListTagsForResourceOutputError>(id: "listTagsForResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListTagsForResourceInput, ListTagsForResourceOutput, ListTagsForResourceOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListTagsForResourceInput, ListTagsForResourceOutput, ListTagsForResourceOutputError>(xAmzTarget: "AmazonForecast.ListTagsForResource"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Stops a resource.</p>
    ///          <p>The resource undergoes the following states:
    ///          <code>CREATE_STOPPING</code> and <code>CREATE_STOPPED</code>. You cannot resume
    ///          a resource once it has been stopped.</p>
    ///          <p>This operation can be applied to the following resources (and their corresponding child
    ///          resources):</p>
    ///          <ul>
    ///             <li>
    ///                <p>Dataset Import Job</p>
    ///             </li>
    ///             <li>
    ///                <p>Predictor Job</p>
    ///             </li>
    ///             <li>
    ///                <p>Forecast Job</p>
    ///             </li>
    ///             <li>
    ///                <p>Forecast Export Job</p>
    ///             </li>
    ///             <li>
    ///                <p>Predictor Backtest Export Job</p>
    ///             </li>
    ///          </ul>
    public func stopResource(input: StopResourceInput, completion: @escaping (SdkResult<StopResourceOutput, StopResourceOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "stopResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<StopResourceInput, StopResourceOutput, StopResourceOutputError>(id: "stopResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: StopResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: StopResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<StopResourceInput, StopResourceOutput, StopResourceOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: StopResourceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<StopResourceInput, StopResourceOutput, StopResourceOutputError>(xAmzTarget: "AmazonForecast.StopResource"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Associates the specified tags to a resource with the specified <code>resourceArn</code>. If existing tags on a resource are not specified in the request parameters, they are not changed. When a resource is deleted, the tags associated with that resource are also deleted.</p>
    public func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutput, TagResourceOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "tagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<TagResourceInput, TagResourceOutput, TagResourceOutputError>(id: "tagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<TagResourceInput, TagResourceOutput, TagResourceOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<TagResourceInput, TagResourceOutput, TagResourceOutputError>(xAmzTarget: "AmazonForecast.TagResource"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the specified tags from a resource.</p>
    public func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutput, UntagResourceOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "untagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UntagResourceInput, UntagResourceOutput, UntagResourceOutputError>(id: "untagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UntagResourceInput, UntagResourceOutput, UntagResourceOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UntagResourceInput, UntagResourceOutput, UntagResourceOutputError>(xAmzTarget: "AmazonForecast.UntagResource"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Replaces the datasets in a dataset group with the specified datasets.</p>
    ///          <note>
    ///             <p>The <code>Status</code> of the dataset group must be <code>ACTIVE</code> before you can
    ///         use the dataset group to create a predictor. Use the <a>DescribeDatasetGroup</a>
    ///         operation to get the status.</p>
    ///          </note>
    public func updateDatasetGroup(input: UpdateDatasetGroupInput, completion: @escaping (SdkResult<UpdateDatasetGroupOutput, UpdateDatasetGroupOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateDatasetGroup")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "forecast.\(config.region).amazonaws.com")
                      .withSigningName(value: "forecast")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateDatasetGroupInput, UpdateDatasetGroupOutput, UpdateDatasetGroupOutputError>(id: "updateDatasetGroup")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateDatasetGroupInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateDatasetGroupInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateDatasetGroupInput, UpdateDatasetGroupOutput, UpdateDatasetGroupOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateDatasetGroupInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UpdateDatasetGroupInput, UpdateDatasetGroupOutput, UpdateDatasetGroupOutputError>(xAmzTarget: "AmazonForecast.UpdateDatasetGroup"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
