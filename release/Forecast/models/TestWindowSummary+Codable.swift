// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TestWindowSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
        case status = "Status"
        case testWindowEnd = "TestWindowEnd"
        case testWindowStart = "TestWindowStart"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let testWindowEnd = testWindowEnd {
            try encodeContainer.encode(testWindowEnd.timeIntervalSince1970, forKey: .testWindowEnd)
        }
        if let testWindowStart = testWindowStart {
            try encodeContainer.encode(testWindowStart.timeIntervalSince1970, forKey: .testWindowStart)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let testWindowStartDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .testWindowStart)
        testWindowStart = testWindowStartDecoded
        let testWindowEndDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .testWindowEnd)
        testWindowEnd = testWindowEndDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}
