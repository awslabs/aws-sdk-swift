// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateForecastInputBody: Equatable {
    public let forecastName: String?
    public let predictorArn: String?
    public let forecastTypes: [String]?
    public let tags: [Tag]?
}

extension CreateForecastInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case forecastName = "ForecastName"
        case forecastTypes = "ForecastTypes"
        case predictorArn = "PredictorArn"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let forecastNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .forecastName)
        forecastName = forecastNameDecoded
        let predictorArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .predictorArn)
        predictorArn = predictorArnDecoded
        let forecastTypesContainer = try containerValues.decodeIfPresent([String].self, forKey: .forecastTypes)
        var forecastTypesDecoded0:[String]? = nil
        if let forecastTypesContainer = forecastTypesContainer {
            forecastTypesDecoded0 = [String]()
            for string0 in forecastTypesContainer {
                forecastTypesDecoded0?.append(string0)
            }
        }
        forecastTypes = forecastTypesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
