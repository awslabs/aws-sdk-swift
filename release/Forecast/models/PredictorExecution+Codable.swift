// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PredictorExecution: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case algorithmArn = "AlgorithmArn"
        case testWindows = "TestWindows"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithmArn = algorithmArn {
            try encodeContainer.encode(algorithmArn, forKey: .algorithmArn)
        }
        if let testWindows = testWindows {
            var testWindowsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .testWindows)
            for testwindowdetails0 in testWindows {
                try testWindowsContainer.encode(testwindowdetails0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let algorithmArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .algorithmArn)
        algorithmArn = algorithmArnDecoded
        let testWindowsContainer = try containerValues.decodeIfPresent([TestWindowSummary].self, forKey: .testWindows)
        var testWindowsDecoded0:[TestWindowSummary]? = nil
        if let testWindowsContainer = testWindowsContainer {
            testWindowsDecoded0 = [TestWindowSummary]()
            for structure0 in testWindowsContainer {
                testWindowsDecoded0?.append(structure0)
            }
        }
        testWindows = testWindowsDecoded0
    }
}
