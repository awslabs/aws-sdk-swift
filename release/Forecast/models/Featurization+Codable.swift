// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Featurization: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributeName = "AttributeName"
        case featurizationPipeline = "FeaturizationPipeline"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeName = attributeName {
            try encodeContainer.encode(attributeName, forKey: .attributeName)
        }
        if let featurizationPipeline = featurizationPipeline {
            var featurizationPipelineContainer = encodeContainer.nestedUnkeyedContainer(forKey: .featurizationPipeline)
            for featurizationpipeline0 in featurizationPipeline {
                try featurizationPipelineContainer.encode(featurizationpipeline0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
        let featurizationPipelineContainer = try containerValues.decodeIfPresent([FeaturizationMethod].self, forKey: .featurizationPipeline)
        var featurizationPipelineDecoded0:[FeaturizationMethod]? = nil
        if let featurizationPipelineContainer = featurizationPipelineContainer {
            featurizationPipelineDecoded0 = [FeaturizationMethod]()
            for structure0 in featurizationPipelineContainer {
                featurizationPipelineDecoded0?.append(structure0)
            }
        }
        featurizationPipeline = featurizationPipelineDecoded0
    }
}
