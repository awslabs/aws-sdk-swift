// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Metrics: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case errorMetrics = "ErrorMetrics"
        case rMSE = "RMSE"
        case weightedQuantileLosses = "WeightedQuantileLosses"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorMetrics = errorMetrics {
            var errorMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .errorMetrics)
            for errormetrics0 in errorMetrics {
                try errorMetricsContainer.encode(errormetrics0)
            }
        }
        if let rMSE = rMSE {
            try encodeContainer.encode(rMSE, forKey: .rMSE)
        }
        if let weightedQuantileLosses = weightedQuantileLosses {
            var weightedQuantileLossesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .weightedQuantileLosses)
            for weightedquantilelosses0 in weightedQuantileLosses {
                try weightedQuantileLossesContainer.encode(weightedquantilelosses0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rMSEDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .rMSE)
        rMSE = rMSEDecoded
        let weightedQuantileLossesContainer = try containerValues.decodeIfPresent([WeightedQuantileLoss].self, forKey: .weightedQuantileLosses)
        var weightedQuantileLossesDecoded0:[WeightedQuantileLoss]? = nil
        if let weightedQuantileLossesContainer = weightedQuantileLossesContainer {
            weightedQuantileLossesDecoded0 = [WeightedQuantileLoss]()
            for structure0 in weightedQuantileLossesContainer {
                weightedQuantileLossesDecoded0?.append(structure0)
            }
        }
        weightedQuantileLosses = weightedQuantileLossesDecoded0
        let errorMetricsContainer = try containerValues.decodeIfPresent([ErrorMetric].self, forKey: .errorMetrics)
        var errorMetricsDecoded0:[ErrorMetric]? = nil
        if let errorMetricsContainer = errorMetricsContainer {
            errorMetricsDecoded0 = [ErrorMetric]()
            for structure0 in errorMetricsContainer {
                errorMetricsDecoded0?.append(structure0)
            }
        }
        errorMetrics = errorMetricsDecoded0
    }
}
