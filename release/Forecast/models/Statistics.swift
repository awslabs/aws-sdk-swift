// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Provides statistics for each data field imported into to an Amazon Forecast dataset with
///       the <a>CreateDatasetImportJob</a> operation.</p>
public struct Statistics: Equatable {
    /// <p>For a numeric field, the average value in the field.</p>
    public let avg: Double?
    /// <p>The number of values in the field. If the response value is -1, refer to
    ///         <code>CountLong</code>.</p>
    public let count: Int?
    /// <p>The number of distinct values in the field. If the response value is -1, refer to
    ///       <code>CountDistinctLong</code>.</p>
    public let countDistinct: Int?
    /// <p>The number of distinct values in the field. <code>CountDistinctLong</code> is used instead
    ///       of <code>CountDistinct</code> if the value is greater than 2,147,483,647.</p>
    public let countDistinctLong: Int?
    /// <p>The number of values in the field. <code>CountLong</code> is used instead of
    ///         <code>Count</code> if the value is greater than 2,147,483,647.</p>
    public let countLong: Int?
    /// <p>The number of NAN (not a number) values in the field. If the response value is -1, refer to
    ///       <code>CountNanLong</code>.</p>
    public let countNan: Int?
    /// <p>The number of NAN (not a number) values in the field. <code>CountNanLong</code> is used
    ///       instead of <code>CountNan</code> if the value is greater than 2,147,483,647.</p>
    public let countNanLong: Int?
    /// <p>The number of null values in the field. If the response value is -1, refer to
    ///       <code>CountNullLong</code>.</p>
    public let countNull: Int?
    /// <p>The number of null values in the field. <code>CountNullLong</code> is used instead of
    ///         <code>CountNull</code> if the value is greater than 2,147,483,647.</p>
    public let countNullLong: Int?
    /// <p>For a numeric field, the maximum value in the field.</p>
    public let max: String?
    /// <p>For a numeric field, the minimum value in the field.</p>
    public let min: String?
    /// <p>For a numeric field, the standard deviation.</p>
    public let stddev: Double?

    public init (
        avg: Double? = nil,
        count: Int? = nil,
        countDistinct: Int? = nil,
        countDistinctLong: Int? = nil,
        countLong: Int? = nil,
        countNan: Int? = nil,
        countNanLong: Int? = nil,
        countNull: Int? = nil,
        countNullLong: Int? = nil,
        max: String? = nil,
        min: String? = nil,
        stddev: Double? = nil
    )
    {
        self.avg = avg
        self.count = count
        self.countDistinct = countDistinct
        self.countDistinctLong = countDistinctLong
        self.countLong = countLong
        self.countNan = countNan
        self.countNanLong = countNanLong
        self.countNull = countNull
        self.countNullLong = countNullLong
        self.max = max
        self.min = min
        self.stddev = stddev
    }
}
