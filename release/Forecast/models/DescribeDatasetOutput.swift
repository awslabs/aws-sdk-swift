// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeDatasetOutput: Equatable {
    /// <p>When the dataset was created.</p>
    public let creationTime: Date?
    /// <p>The frequency of data collection.</p>
    ///          <p>Valid intervals are Y (Year), M (Month), W (Week), D (Day), H (Hour), 30min (30 minutes),
    ///       15min (15 minutes), 10min (10 minutes), 5min (5 minutes), and 1min (1 minute). For example,
    ///       "M" indicates every month and "30min" indicates every 30 minutes.</p>
    public let dataFrequency: String?
    /// <p>The Amazon Resource Name (ARN) of the dataset.</p>
    public let datasetArn: String?
    /// <p>The name of the dataset.</p>
    public let datasetName: String?
    /// <p>The dataset type.</p>
    public let datasetType: DatasetType?
    /// <p>The domain associated with the dataset.</p>
    public let domain: Domain?
    /// <p>The AWS Key Management Service (KMS) key and the AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access
    ///       the key.</p>
    public let encryptionConfig: EncryptionConfig?
    /// <p>When you create a dataset, <code>LastModificationTime</code> is the same as
    ///         <code>CreationTime</code>. While data is being imported to the dataset,
    ///         <code>LastModificationTime</code> is the current time of the <code>DescribeDataset</code>
    ///       call. After a <a>CreateDatasetImportJob</a> operation has finished,
    ///         <code>LastModificationTime</code> is when the import job completed or failed.</p>
    public let lastModificationTime: Date?
    /// <p>An array of <code>SchemaAttribute</code> objects that specify the dataset fields. Each
    ///         <code>SchemaAttribute</code> specifies the name and data type of a field.</p>
    public let schema: Schema?
    /// <p>The status of the dataset. States include:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ACTIVE</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>,
    ///             <code>CREATE_FAILED</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>,
    ///             <code>DELETE_FAILED</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UPDATE_PENDING</code>, <code>UPDATE_IN_PROGRESS</code>,
    ///             <code>UPDATE_FAILED</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>The <code>UPDATE</code> states apply while data is imported to the dataset from a call to
    ///       the <a>CreateDatasetImportJob</a> operation and reflect the status of the dataset
    ///       import job. For example, when the import job status is <code>CREATE_IN_PROGRESS</code>, the
    ///       status of the dataset is <code>UPDATE_IN_PROGRESS</code>.</p>
    ///          <note>
    ///             <p>The <code>Status</code> of the dataset must be <code>ACTIVE</code> before you can import
    ///         training data.</p>
    ///          </note>
    public let status: String?

    public init (
        creationTime: Date? = nil,
        dataFrequency: String? = nil,
        datasetArn: String? = nil,
        datasetName: String? = nil,
        datasetType: DatasetType? = nil,
        domain: Domain? = nil,
        encryptionConfig: EncryptionConfig? = nil,
        lastModificationTime: Date? = nil,
        schema: Schema? = nil,
        status: String? = nil
    )
    {
        self.creationTime = creationTime
        self.dataFrequency = dataFrequency
        self.datasetArn = datasetArn
        self.datasetName = datasetName
        self.datasetType = datasetType
        self.domain = domain
        self.encryptionConfig = encryptionConfig
        self.lastModificationTime = lastModificationTime
        self.schema = schema
        self.status = status
    }
}
