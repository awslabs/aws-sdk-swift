// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Schema: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributes = "Attributes"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributes)
            for schemaattributes0 in attributes {
                try attributesContainer.encode(schemaattributes0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributesContainer = try containerValues.decodeIfPresent([SchemaAttribute].self, forKey: .attributes)
        var attributesDecoded0:[SchemaAttribute]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [SchemaAttribute]()
            for structure0 in attributesContainer {
                attributesDecoded0?.append(structure0)
            }
        }
        attributes = attributesDecoded0
    }
}
