// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InputDataConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case datasetGroupArn = "DatasetGroupArn"
        case supplementaryFeatures = "SupplementaryFeatures"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetGroupArn = datasetGroupArn {
            try encodeContainer.encode(datasetGroupArn, forKey: .datasetGroupArn)
        }
        if let supplementaryFeatures = supplementaryFeatures {
            var supplementaryFeaturesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supplementaryFeatures)
            for supplementaryfeatures0 in supplementaryFeatures {
                try supplementaryFeaturesContainer.encode(supplementaryfeatures0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetGroupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .datasetGroupArn)
        datasetGroupArn = datasetGroupArnDecoded
        let supplementaryFeaturesContainer = try containerValues.decodeIfPresent([SupplementaryFeature].self, forKey: .supplementaryFeatures)
        var supplementaryFeaturesDecoded0:[SupplementaryFeature]? = nil
        if let supplementaryFeaturesContainer = supplementaryFeaturesContainer {
            supplementaryFeaturesDecoded0 = [SupplementaryFeature]()
            for structure0 in supplementaryFeaturesContainer {
                supplementaryFeaturesDecoded0?.append(structure0)
            }
        }
        supplementaryFeatures = supplementaryFeaturesDecoded0
    }
}
