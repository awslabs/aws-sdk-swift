// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PredictorExecutionDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case predictorExecutions = "PredictorExecutions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let predictorExecutions = predictorExecutions {
            var predictorExecutionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .predictorExecutions)
            for predictorexecutions0 in predictorExecutions {
                try predictorExecutionsContainer.encode(predictorexecutions0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predictorExecutionsContainer = try containerValues.decodeIfPresent([PredictorExecution].self, forKey: .predictorExecutions)
        var predictorExecutionsDecoded0:[PredictorExecution]? = nil
        if let predictorExecutionsContainer = predictorExecutionsContainer {
            predictorExecutionsDecoded0 = [PredictorExecution]()
            for structure0 in predictorExecutionsContainer {
                predictorExecutionsDecoded0?.append(structure0)
            }
        }
        predictorExecutions = predictorExecutionsDecoded0
    }
}
