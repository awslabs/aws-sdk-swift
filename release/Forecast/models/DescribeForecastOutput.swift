// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeForecastOutput: Equatable {
    /// <p>When the forecast creation task was created.</p>
    public let creationTime: Date?
    /// <p>The ARN of the dataset group that provided the data used to train the predictor.</p>
    public let datasetGroupArn: String?
    /// <p>The estimated time remaining in minutes for the forecast job to complete.</p>
    public let estimatedTimeRemainingInMinutes: Int?
    /// <p>The forecast ARN as specified in the request.</p>
    public let forecastArn: String?
    /// <p>The name of the forecast.</p>
    public let forecastName: String?
    /// <p>The quantiles at which probabilistic forecasts were generated.</p>
    public let forecastTypes: [String]?
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CREATE_STOPPING</code> - The current timestamp.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CREATE_STOPPED</code> - When the job stopped.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or
    ///           failed.</p>
    ///             </li>
    ///          </ul>
    public let lastModificationTime: Date?
    /// <p>If an error occurred, an informational message about the error.</p>
    public let message: String?
    /// <p>The ARN of the predictor used to generate the forecast.</p>
    public let predictorArn: String?
    /// <p>The status of the forecast. States include:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ACTIVE</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>,
    ///           <code>CREATE_FAILED</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>,
    ///           <code>DELETE_FAILED</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>The <code>Status</code> of the forecast must be <code>ACTIVE</code> before you can query
    ///         or export the forecast.</p>
    ///          </note>
    public let status: String?

    public init (
        creationTime: Date? = nil,
        datasetGroupArn: String? = nil,
        estimatedTimeRemainingInMinutes: Int? = nil,
        forecastArn: String? = nil,
        forecastName: String? = nil,
        forecastTypes: [String]? = nil,
        lastModificationTime: Date? = nil,
        message: String? = nil,
        predictorArn: String? = nil,
        status: String? = nil
    )
    {
        self.creationTime = creationTime
        self.datasetGroupArn = datasetGroupArn
        self.estimatedTimeRemainingInMinutes = estimatedTimeRemainingInMinutes
        self.forecastArn = forecastArn
        self.forecastName = forecastName
        self.forecastTypes = forecastTypes
        self.lastModificationTime = lastModificationTime
        self.message = message
        self.predictorArn = predictorArn
        self.status = status
    }
}
