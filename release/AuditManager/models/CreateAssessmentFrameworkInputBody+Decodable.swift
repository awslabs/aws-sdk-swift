// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateAssessmentFrameworkInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let complianceType: String?
    public let controlSets: [CreateAssessmentFrameworkControlSet]?
    public let tags: [String:String]?
}

extension CreateAssessmentFrameworkInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case complianceType
        case controlSets
        case description
        case name
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let complianceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let controlSetsContainer = try containerValues.decodeIfPresent([CreateAssessmentFrameworkControlSet].self, forKey: .controlSets)
        var controlSetsDecoded0:[CreateAssessmentFrameworkControlSet]? = nil
        if let controlSetsContainer = controlSetsContainer {
            controlSetsDecoded0 = [CreateAssessmentFrameworkControlSet]()
            for structure0 in controlSetsContainer {
                controlSetsDecoded0?.append(structure0)
            }
        }
        controlSets = controlSetsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
