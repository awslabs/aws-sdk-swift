// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateAssessmentInputBody: Equatable {
    public let assessmentName: String?
    public let assessmentDescription: String?
    public let scope: Scope?
    public let assessmentReportsDestination: AssessmentReportsDestination?
    public let roles: [Role]?
}

extension UpdateAssessmentInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case assessmentDescription
        case assessmentName
        case assessmentReportsDestination
        case roles
        case scope
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assessmentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .assessmentName)
        assessmentName = assessmentNameDecoded
        let assessmentDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .assessmentDescription)
        assessmentDescription = assessmentDescriptionDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Scope.self, forKey: .scope)
        scope = scopeDecoded
        let assessmentReportsDestinationDecoded = try containerValues.decodeIfPresent(AssessmentReportsDestination.self, forKey: .assessmentReportsDestination)
        assessmentReportsDestination = assessmentReportsDestinationDecoded
        let rolesContainer = try containerValues.decodeIfPresent([Role].self, forKey: .roles)
        var rolesDecoded0:[Role]? = nil
        if let rolesContainer = rolesContainer {
            rolesDecoded0 = [Role]()
            for structure0 in rolesContainer {
                rolesDecoded0?.append(structure0)
            }
        }
        roles = rolesDecoded0
    }
}
