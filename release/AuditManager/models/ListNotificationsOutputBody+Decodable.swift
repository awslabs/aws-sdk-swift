// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListNotificationsOutputBody: Equatable {
    public let notifications: [Notification]?
    public let nextToken: String?
}

extension ListNotificationsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case notifications
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notificationsContainer = try containerValues.decodeIfPresent([Notification].self, forKey: .notifications)
        var notificationsDecoded0:[Notification]? = nil
        if let notificationsContainer = notificationsContainer {
            notificationsDecoded0 = [Notification]()
            for structure0 in notificationsContainer {
                notificationsDecoded0?.append(structure0)
            }
        }
        notifications = notificationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
