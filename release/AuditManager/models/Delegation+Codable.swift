// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Delegation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case assessmentId
        case assessmentName
        case comment
        case controlSetId
        case createdBy
        case creationTime
        case id
        case lastUpdated
        case roleArn
        case roleType
        case status
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assessmentId = assessmentId {
            try encodeContainer.encode(assessmentId, forKey: .assessmentId)
        }
        if let assessmentName = assessmentName {
            try encodeContainer.encode(assessmentName, forKey: .assessmentName)
        }
        if let comment = comment {
            try encodeContainer.encode(comment, forKey: .comment)
        }
        if let controlSetId = controlSetId {
            try encodeContainer.encode(controlSetId, forKey: .controlSetId)
        }
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lastUpdated = lastUpdated {
            try encodeContainer.encode(lastUpdated.timeIntervalSince1970, forKey: .lastUpdated)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let roleType = roleType {
            try encodeContainer.encode(roleType.rawValue, forKey: .roleType)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let assessmentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .assessmentName)
        assessmentName = assessmentNameDecoded
        let assessmentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .assessmentId)
        assessmentId = assessmentIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DelegationStatus.self, forKey: .status)
        status = statusDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let roleTypeDecoded = try containerValues.decodeIfPresent(RoleType.self, forKey: .roleType)
        roleType = roleTypeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
        let controlSetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .controlSetId)
        controlSetId = controlSetIdDecoded
        let commentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .comment)
        comment = commentDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdBy)
        createdBy = createdByDecoded
    }
}
