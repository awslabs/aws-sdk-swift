// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateAssessmentInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let assessmentReportsDestination: AssessmentReportsDestination?
    public let scope: Scope?
    public let roles: [Role]?
    public let frameworkId: String?
    public let tags: [String:String]?
}

extension CreateAssessmentInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case assessmentReportsDestination
        case description
        case frameworkId
        case name
        case roles
        case scope
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let assessmentReportsDestinationDecoded = try containerValues.decodeIfPresent(AssessmentReportsDestination.self, forKey: .assessmentReportsDestination)
        assessmentReportsDestination = assessmentReportsDestinationDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Scope.self, forKey: .scope)
        scope = scopeDecoded
        let rolesContainer = try containerValues.decodeIfPresent([Role].self, forKey: .roles)
        var rolesDecoded0:[Role]? = nil
        if let rolesContainer = rolesContainer {
            rolesDecoded0 = [Role]()
            for structure0 in rolesContainer {
                rolesDecoded0?.append(structure0)
            }
        }
        roles = rolesDecoded0
        let frameworkIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .frameworkId)
        frameworkId = frameworkIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
