// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ControlSet: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case controls
        case id
        case name
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let controls = controls {
            var controlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .controls)
            for controls0 in controls {
                try controlsContainer.encode(controls0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let controlsContainer = try containerValues.decodeIfPresent([Control].self, forKey: .controls)
        var controlsDecoded0:[Control]? = nil
        if let controlsContainer = controlsContainer {
            controlsDecoded0 = [Control]()
            for structure0 in controlsContainer {
                controlsDecoded0?.append(structure0)
            }
        }
        controls = controlsDecoded0
    }
}
