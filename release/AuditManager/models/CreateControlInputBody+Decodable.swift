// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateControlInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let testingInformation: String?
    public let actionPlanTitle: String?
    public let actionPlanInstructions: String?
    public let controlMappingSources: [CreateControlMappingSource]?
    public let tags: [String:String]?
}

extension CreateControlInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case actionPlanInstructions
        case actionPlanTitle
        case controlMappingSources
        case description
        case name
        case tags
        case testingInformation
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let testingInformationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .testingInformation)
        testingInformation = testingInformationDecoded
        let actionPlanTitleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .actionPlanTitle)
        actionPlanTitle = actionPlanTitleDecoded
        let actionPlanInstructionsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .actionPlanInstructions)
        actionPlanInstructions = actionPlanInstructionsDecoded
        let controlMappingSourcesContainer = try containerValues.decodeIfPresent([CreateControlMappingSource].self, forKey: .controlMappingSources)
        var controlMappingSourcesDecoded0:[CreateControlMappingSource]? = nil
        if let controlMappingSourcesContainer = controlMappingSourcesContainer {
            controlMappingSourcesDecoded0 = [CreateControlMappingSource]()
            for structure0 in controlMappingSourcesContainer {
                controlMappingSourcesDecoded0?.append(structure0)
            }
        }
        controlMappingSources = controlMappingSourcesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
