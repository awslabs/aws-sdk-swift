// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ChangeLog: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case action
        case createdAt
        case createdBy
        case objectName
        case objectType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let objectName = objectName {
            try encodeContainer.encode(objectName, forKey: .objectName)
        }
        if let objectType = objectType {
            try encodeContainer.encode(objectType.rawValue, forKey: .objectType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let objectTypeDecoded = try containerValues.decodeIfPresent(ObjectTypeEnum.self, forKey: .objectType)
        objectType = objectTypeDecoded
        let objectNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .objectName)
        objectName = objectNameDecoded
        let actionDecoded = try containerValues.decodeIfPresent(ActionEnum.self, forKey: .action)
        action = actionDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdBy)
        createdBy = createdByDecoded
    }
}
