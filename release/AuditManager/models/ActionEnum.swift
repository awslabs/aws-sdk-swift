// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum ActionEnum {
    case active
    case create
    case delete
    case importEvidence
    case inactive
    case reviewed
    case underReview
    case updateMetadata
    case sdkUnknown(String)
}

extension ActionEnum : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ActionEnum] {
        return [
            .active,
            .create,
            .delete,
            .importEvidence,
            .inactive,
            .reviewed,
            .underReview,
            .updateMetadata,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .active: return "ACTIVE"
        case .create: return "CREATE"
        case .delete: return "DELETE"
        case .importEvidence: return "IMPORT_EVIDENCE"
        case .inactive: return "INACTIVE"
        case .reviewed: return "REVIEWED"
        case .underReview: return "UNDER_REVIEW"
        case .updateMetadata: return "UPDATE_METADATA"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ActionEnum(rawValue: rawValue) ?? ActionEnum.sdkUnknown(rawValue)
    }
}
