// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SourceKeyword: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case keywordInputType
        case keywordValue
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keywordInputType = keywordInputType {
            try encodeContainer.encode(keywordInputType.rawValue, forKey: .keywordInputType)
        }
        if let keywordValue = keywordValue {
            try encodeContainer.encode(keywordValue, forKey: .keywordValue)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keywordInputTypeDecoded = try containerValues.decodeIfPresent(KeywordInputType.self, forKey: .keywordInputType)
        keywordInputType = keywordInputTypeDecoded
        let keywordValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keywordValue)
        keywordValue = keywordValueDecoded
    }
}
