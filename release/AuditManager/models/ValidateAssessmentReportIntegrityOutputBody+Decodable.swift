// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ValidateAssessmentReportIntegrityOutputBody: Equatable {
    public let signatureValid: Bool?
    public let signatureAlgorithm: String?
    public let signatureDateTime: String?
    public let signatureKeyId: String?
    public let validationErrors: [String]?
}

extension ValidateAssessmentReportIntegrityOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case signatureAlgorithm
        case signatureDateTime
        case signatureKeyId
        case signatureValid
        case validationErrors
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signatureValidDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .signatureValid)
        signatureValid = signatureValidDecoded
        let signatureAlgorithmDecoded = try containerValues.decodeIfPresent(String.self, forKey: .signatureAlgorithm)
        signatureAlgorithm = signatureAlgorithmDecoded
        let signatureDateTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .signatureDateTime)
        signatureDateTime = signatureDateTimeDecoded
        let signatureKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .signatureKeyId)
        signatureKeyId = signatureKeyIdDecoded
        let validationErrorsContainer = try containerValues.decodeIfPresent([String].self, forKey: .validationErrors)
        var validationErrorsDecoded0:[String]? = nil
        if let validationErrorsContainer = validationErrorsContainer {
            validationErrorsDecoded0 = [String]()
            for string0 in validationErrorsContainer {
                validationErrorsDecoded0?.append(string0)
            }
        }
        validationErrors = validationErrorsDecoded0
    }
}
