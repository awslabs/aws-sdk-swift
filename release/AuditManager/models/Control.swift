// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>
/// A control in AWS Audit Manager.
/// </p>
public struct Control: Equatable {
    /// <p>
    ///
    ///          The recommended actions to carry out if the control is not fulfilled.
    ///       </p>
    public let actionPlanInstructions: String?
    /// <p>
    ///          The title of the action plan for remediating the control.
    ///       </p>
    public let actionPlanTitle: String?
    /// <p>
    ///    The Amazon Resource Name (ARN) of the specified control.
    /// </p>
    public let arn: String?
    /// <p>
    ///    The data mapping sources for the specified control.
    /// </p>
    public let controlMappingSources: [ControlMappingSource]?
    /// <p>
    ///    The data source that determines from where AWS Audit Manager collects evidence for the control.
    /// </p>
    public let controlSources: String?
    /// <p>
    /// Specifies when the control was created.
    /// </p>
    public let createdAt: Date?
    /// <p>
    ///          The IAM user or role that created the control.
    ///       </p>
    public let createdBy: String?
    /// <p>
    ///    The description of the specified control.
    /// </p>
    public let description: String?
    /// <p>
    /// The unique identifier for the control.
    /// </p>
    public let id: String?
    /// <p>
    /// Specifies when the control was most recently updated.
    /// </p>
    public let lastUpdatedAt: Date?
    /// <p>
    ///          The IAM user or role that most recently updated the control.
    ///       </p>
    public let lastUpdatedBy: String?
    /// <p>
    /// The name of the specified control.
    /// </p>
    public let name: String?
    /// <p>
    ///    The tags associated with the control.
    /// </p>
    public let tags: [String:String]?
    /// <p>
    ///          The steps to follow to determine if the control has been satisfied.
    ///       </p>
    public let testingInformation: String?
    /// <p>
    /// The type of control, such as custom or standard.
    /// </p>
    public let type: ControlType?

    public init (
        actionPlanInstructions: String? = nil,
        actionPlanTitle: String? = nil,
        arn: String? = nil,
        controlMappingSources: [ControlMappingSource]? = nil,
        controlSources: String? = nil,
        createdAt: Date? = nil,
        createdBy: String? = nil,
        description: String? = nil,
        id: String? = nil,
        lastUpdatedAt: Date? = nil,
        lastUpdatedBy: String? = nil,
        name: String? = nil,
        tags: [String:String]? = nil,
        testingInformation: String? = nil,
        type: ControlType? = nil
    )
    {
        self.actionPlanInstructions = actionPlanInstructions
        self.actionPlanTitle = actionPlanTitle
        self.arn = arn
        self.controlMappingSources = controlMappingSources
        self.controlSources = controlSources
        self.createdAt = createdAt
        self.createdBy = createdBy
        self.description = description
        self.id = id
        self.lastUpdatedAt = lastUpdatedAt
        self.lastUpdatedBy = lastUpdatedBy
        self.name = name
        self.tags = tags
        self.testingInformation = testingInformation
        self.type = type
    }
}
