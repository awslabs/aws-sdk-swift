// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Assessment: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case awsAccount
        case framework
        case metadata
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let awsAccount = awsAccount {
            try encodeContainer.encode(awsAccount, forKey: .awsAccount)
        }
        if let framework = framework {
            try encodeContainer.encode(framework, forKey: .framework)
        }
        if let metadata = metadata {
            try encodeContainer.encode(metadata, forKey: .metadata)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let awsAccountDecoded = try containerValues.decodeIfPresent(AWSAccount.self, forKey: .awsAccount)
        awsAccount = awsAccountDecoded
        let metadataDecoded = try containerValues.decodeIfPresent(AssessmentMetadata.self, forKey: .metadata)
        metadata = metadataDecoded
        let frameworkDecoded = try containerValues.decodeIfPresent(AssessmentFramework.self, forKey: .framework)
        framework = frameworkDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
