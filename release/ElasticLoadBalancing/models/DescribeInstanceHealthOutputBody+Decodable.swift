// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeInstanceHealthOutputBody: Equatable {
    public let instanceStates: [InstanceState]?
}

extension DescribeInstanceHealthOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceStates = "InstanceStates"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeInstanceHealthResult"))
        if containerValues.contains(.instanceStates) {
            struct KeyVal0{struct member{}}
            let instanceStatesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceStates)
            if let instanceStatesWrappedContainer = instanceStatesWrappedContainer {
                let instanceStatesContainer = try instanceStatesWrappedContainer.decodeIfPresent([InstanceState].self, forKey: .member)
                var instanceStatesBuffer:[InstanceState]? = nil
                if let instanceStatesContainer = instanceStatesContainer {
                    instanceStatesBuffer = [InstanceState]()
                    for structureContainer0 in instanceStatesContainer {
                        instanceStatesBuffer?.append(structureContainer0)
                    }
                }
                instanceStates = instanceStatesBuffer
            } else {
                instanceStates = []
            }
        } else {
            instanceStates = nil
        }
    }
}
