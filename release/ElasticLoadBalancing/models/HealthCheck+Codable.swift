// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HealthCheck: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case healthyThreshold = "HealthyThreshold"
        case interval = "Interval"
        case target = "Target"
        case timeout = "Timeout"
        case unhealthyThreshold = "UnhealthyThreshold"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if healthyThreshold != 0 {
            try container.encode(healthyThreshold, forKey: Key("HealthyThreshold"))
        }
        if interval != 0 {
            try container.encode(interval, forKey: Key("Interval"))
        }
        if let target = target {
            try container.encode(target, forKey: Key("Target"))
        }
        if timeout != 0 {
            try container.encode(timeout, forKey: Key("Timeout"))
        }
        if unhealthyThreshold != 0 {
            try container.encode(unhealthyThreshold, forKey: Key("UnhealthyThreshold"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .target)
        target = targetDecoded
        let intervalDecoded = try containerValues.decode(Int.self, forKey: .interval)
        interval = intervalDecoded
        let timeoutDecoded = try containerValues.decode(Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let unhealthyThresholdDecoded = try containerValues.decode(Int.self, forKey: .unhealthyThreshold)
        unhealthyThreshold = unhealthyThresholdDecoded
        let healthyThresholdDecoded = try containerValues.decode(Int.self, forKey: .healthyThreshold)
        healthyThreshold = healthyThresholdDecoded
    }
}
