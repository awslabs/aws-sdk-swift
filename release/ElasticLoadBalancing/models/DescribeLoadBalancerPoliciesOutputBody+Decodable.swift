// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeLoadBalancerPoliciesOutputBody: Equatable {
    public let policyDescriptions: [PolicyDescription]?
}

extension DescribeLoadBalancerPoliciesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case policyDescriptions = "PolicyDescriptions"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeLoadBalancerPoliciesResult"))
        if containerValues.contains(.policyDescriptions) {
            struct KeyVal0{struct member{}}
            let policyDescriptionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policyDescriptions)
            if let policyDescriptionsWrappedContainer = policyDescriptionsWrappedContainer {
                let policyDescriptionsContainer = try policyDescriptionsWrappedContainer.decodeIfPresent([PolicyDescription].self, forKey: .member)
                var policyDescriptionsBuffer:[PolicyDescription]? = nil
                if let policyDescriptionsContainer = policyDescriptionsContainer {
                    policyDescriptionsBuffer = [PolicyDescription]()
                    for structureContainer0 in policyDescriptionsContainer {
                        policyDescriptionsBuffer?.append(structureContainer0)
                    }
                }
                policyDescriptions = policyDescriptionsBuffer
            } else {
                policyDescriptions = []
            }
        } else {
            policyDescriptions = nil
        }
    }
}
