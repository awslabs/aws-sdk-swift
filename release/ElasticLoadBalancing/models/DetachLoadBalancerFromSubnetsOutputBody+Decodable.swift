// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DetachLoadBalancerFromSubnetsOutputBody: Equatable {
    public let subnets: [String]?
}

extension DetachLoadBalancerFromSubnetsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case subnets = "Subnets"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DetachLoadBalancerFromSubnetsResult"))
        if containerValues.contains(.subnets) {
            struct KeyVal0{struct member{}}
            let subnetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .subnets)
            if let subnetsWrappedContainer = subnetsWrappedContainer {
                let subnetsContainer = try subnetsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var subnetsBuffer:[String]? = nil
                if let subnetsContainer = subnetsContainer {
                    subnetsBuffer = [String]()
                    for stringContainer0 in subnetsContainer {
                        subnetsBuffer?.append(stringContainer0)
                    }
                }
                subnets = subnetsBuffer
            } else {
                subnets = []
            }
        } else {
            subnets = nil
        }
    }
}
