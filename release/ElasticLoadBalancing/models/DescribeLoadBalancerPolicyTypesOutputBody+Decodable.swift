// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeLoadBalancerPolicyTypesOutputBody: Equatable {
    public let policyTypeDescriptions: [PolicyTypeDescription]?
}

extension DescribeLoadBalancerPolicyTypesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case policyTypeDescriptions = "PolicyTypeDescriptions"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeLoadBalancerPolicyTypesResult"))
        if containerValues.contains(.policyTypeDescriptions) {
            struct KeyVal0{struct member{}}
            let policyTypeDescriptionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policyTypeDescriptions)
            if let policyTypeDescriptionsWrappedContainer = policyTypeDescriptionsWrappedContainer {
                let policyTypeDescriptionsContainer = try policyTypeDescriptionsWrappedContainer.decodeIfPresent([PolicyTypeDescription].self, forKey: .member)
                var policyTypeDescriptionsBuffer:[PolicyTypeDescription]? = nil
                if let policyTypeDescriptionsContainer = policyTypeDescriptionsContainer {
                    policyTypeDescriptionsBuffer = [PolicyTypeDescription]()
                    for structureContainer0 in policyTypeDescriptionsContainer {
                        policyTypeDescriptionsBuffer?.append(structureContainer0)
                    }
                }
                policyTypeDescriptions = policyTypeDescriptionsBuffer
            } else {
                policyTypeDescriptions = []
            }
        } else {
            policyTypeDescriptions = nil
        }
    }
}
