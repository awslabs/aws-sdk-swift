// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PolicyTypeDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case policyAttributeTypeDescriptions = "PolicyAttributeTypeDescriptions"
        case policyTypeName = "PolicyTypeName"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let policyAttributeTypeDescriptions = policyAttributeTypeDescriptions {
            var policyAttributeTypeDescriptionsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("PolicyAttributeTypeDescriptions"))
            for (index0, policyattributetypedescription0) in policyAttributeTypeDescriptions.enumerated() {
                try policyAttributeTypeDescriptionsContainer.encode(policyattributetypedescription0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let policyTypeName = policyTypeName {
            try container.encode(policyTypeName, forKey: Key("PolicyTypeName"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyTypeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policyTypeName)
        policyTypeName = policyTypeNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.policyAttributeTypeDescriptions) {
            struct KeyVal0{struct member{}}
            let policyAttributeTypeDescriptionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policyAttributeTypeDescriptions)
            if let policyAttributeTypeDescriptionsWrappedContainer = policyAttributeTypeDescriptionsWrappedContainer {
                let policyAttributeTypeDescriptionsContainer = try policyAttributeTypeDescriptionsWrappedContainer.decodeIfPresent([PolicyAttributeTypeDescription].self, forKey: .member)
                var policyAttributeTypeDescriptionsBuffer:[PolicyAttributeTypeDescription]? = nil
                if let policyAttributeTypeDescriptionsContainer = policyAttributeTypeDescriptionsContainer {
                    policyAttributeTypeDescriptionsBuffer = [PolicyAttributeTypeDescription]()
                    for structureContainer0 in policyAttributeTypeDescriptionsContainer {
                        policyAttributeTypeDescriptionsBuffer?.append(structureContainer0)
                    }
                }
                policyAttributeTypeDescriptions = policyAttributeTypeDescriptionsBuffer
            } else {
                policyAttributeTypeDescriptions = []
            }
        } else {
            policyAttributeTypeDescriptions = nil
        }
    }
}
