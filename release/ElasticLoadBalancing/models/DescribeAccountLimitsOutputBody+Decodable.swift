// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAccountLimitsOutputBody: Equatable {
    public let limits: [Limit]?
    public let nextMarker: String?
}

extension DescribeAccountLimitsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case limits = "Limits"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeAccountLimitsResult"))
        if containerValues.contains(.limits) {
            struct KeyVal0{struct member{}}
            let limitsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .limits)
            if let limitsWrappedContainer = limitsWrappedContainer {
                let limitsContainer = try limitsWrappedContainer.decodeIfPresent([Limit].self, forKey: .member)
                var limitsBuffer:[Limit]? = nil
                if let limitsContainer = limitsContainer {
                    limitsBuffer = [Limit]()
                    for structureContainer0 in limitsContainer {
                        limitsBuffer?.append(structureContainer0)
                    }
                }
                limits = limitsBuffer
            } else {
                limits = []
            }
        } else {
            limits = nil
        }
        let nextMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}
