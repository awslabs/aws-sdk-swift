// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Policies: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case appCookieStickinessPolicies = "AppCookieStickinessPolicies"
        case lBCookieStickinessPolicies = "LBCookieStickinessPolicies"
        case otherPolicies = "OtherPolicies"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let appCookieStickinessPolicies = appCookieStickinessPolicies {
            var appCookieStickinessPoliciesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("AppCookieStickinessPolicies"))
            for (index0, appcookiestickinesspolicy0) in appCookieStickinessPolicies.enumerated() {
                try appCookieStickinessPoliciesContainer.encode(appcookiestickinesspolicy0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let lBCookieStickinessPolicies = lBCookieStickinessPolicies {
            var lBCookieStickinessPoliciesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("LBCookieStickinessPolicies"))
            for (index0, lbcookiestickinesspolicy0) in lBCookieStickinessPolicies.enumerated() {
                try lBCookieStickinessPoliciesContainer.encode(lbcookiestickinesspolicy0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let otherPolicies = otherPolicies {
            var otherPoliciesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("OtherPolicies"))
            for (index0, policyname0) in otherPolicies.enumerated() {
                try otherPoliciesContainer.encode(policyname0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.appCookieStickinessPolicies) {
            struct KeyVal0{struct member{}}
            let appCookieStickinessPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .appCookieStickinessPolicies)
            if let appCookieStickinessPoliciesWrappedContainer = appCookieStickinessPoliciesWrappedContainer {
                let appCookieStickinessPoliciesContainer = try appCookieStickinessPoliciesWrappedContainer.decodeIfPresent([AppCookieStickinessPolicy].self, forKey: .member)
                var appCookieStickinessPoliciesBuffer:[AppCookieStickinessPolicy]? = nil
                if let appCookieStickinessPoliciesContainer = appCookieStickinessPoliciesContainer {
                    appCookieStickinessPoliciesBuffer = [AppCookieStickinessPolicy]()
                    for structureContainer0 in appCookieStickinessPoliciesContainer {
                        appCookieStickinessPoliciesBuffer?.append(structureContainer0)
                    }
                }
                appCookieStickinessPolicies = appCookieStickinessPoliciesBuffer
            } else {
                appCookieStickinessPolicies = []
            }
        } else {
            appCookieStickinessPolicies = nil
        }
        if containerValues.contains(.lBCookieStickinessPolicies) {
            struct KeyVal0{struct member{}}
            let lBCookieStickinessPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .lBCookieStickinessPolicies)
            if let lBCookieStickinessPoliciesWrappedContainer = lBCookieStickinessPoliciesWrappedContainer {
                let lBCookieStickinessPoliciesContainer = try lBCookieStickinessPoliciesWrappedContainer.decodeIfPresent([LBCookieStickinessPolicy].self, forKey: .member)
                var lBCookieStickinessPoliciesBuffer:[LBCookieStickinessPolicy]? = nil
                if let lBCookieStickinessPoliciesContainer = lBCookieStickinessPoliciesContainer {
                    lBCookieStickinessPoliciesBuffer = [LBCookieStickinessPolicy]()
                    for structureContainer0 in lBCookieStickinessPoliciesContainer {
                        lBCookieStickinessPoliciesBuffer?.append(structureContainer0)
                    }
                }
                lBCookieStickinessPolicies = lBCookieStickinessPoliciesBuffer
            } else {
                lBCookieStickinessPolicies = []
            }
        } else {
            lBCookieStickinessPolicies = nil
        }
        if containerValues.contains(.otherPolicies) {
            struct KeyVal0{struct member{}}
            let otherPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .otherPolicies)
            if let otherPoliciesWrappedContainer = otherPoliciesWrappedContainer {
                let otherPoliciesContainer = try otherPoliciesWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var otherPoliciesBuffer:[String]? = nil
                if let otherPoliciesContainer = otherPoliciesContainer {
                    otherPoliciesBuffer = [String]()
                    for stringContainer0 in otherPoliciesContainer {
                        otherPoliciesBuffer?.append(stringContainer0)
                    }
                }
                otherPolicies = otherPoliciesBuffer
            } else {
                otherPolicies = []
            }
        } else {
            otherPolicies = nil
        }
    }
}
