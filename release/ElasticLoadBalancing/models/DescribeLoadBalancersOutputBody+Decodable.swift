// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeLoadBalancersOutputBody: Equatable {
    public let loadBalancerDescriptions: [LoadBalancerDescription]?
    public let nextMarker: String?
}

extension DescribeLoadBalancersOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case loadBalancerDescriptions = "LoadBalancerDescriptions"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeLoadBalancersResult"))
        if containerValues.contains(.loadBalancerDescriptions) {
            struct KeyVal0{struct member{}}
            let loadBalancerDescriptionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadBalancerDescriptions)
            if let loadBalancerDescriptionsWrappedContainer = loadBalancerDescriptionsWrappedContainer {
                let loadBalancerDescriptionsContainer = try loadBalancerDescriptionsWrappedContainer.decodeIfPresent([LoadBalancerDescription].self, forKey: .member)
                var loadBalancerDescriptionsBuffer:[LoadBalancerDescription]? = nil
                if let loadBalancerDescriptionsContainer = loadBalancerDescriptionsContainer {
                    loadBalancerDescriptionsBuffer = [LoadBalancerDescription]()
                    for structureContainer0 in loadBalancerDescriptionsContainer {
                        loadBalancerDescriptionsBuffer?.append(structureContainer0)
                    }
                }
                loadBalancerDescriptions = loadBalancerDescriptionsBuffer
            } else {
                loadBalancerDescriptions = []
            }
        } else {
            loadBalancerDescriptions = nil
        }
        let nextMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}
