// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DescribeBackupsInput: Equatable {
    /// <p>One or more filters to limit the items returned in the response.</p>
    ///          <p>Use the <code>backupIds</code> filter to return only the specified backups. Specify
    ///       backups by their backup identifier (ID).</p>
    ///          <p>Use the <code>sourceBackupIds</code> filter to return only the backups created from a
    ///       source backup. The <code>sourceBackupID</code> of a source backup is returned by the <a>CopyBackupToRegion</a> operation.</p>
    ///          <p>Use the <code>clusterIds</code> filter to return only the backups for the specified
    ///       clusters. Specify clusters by their cluster identifier (ID).</p>
    ///          <p>Use the <code>states</code> filter to return only backups that match the specified
    ///       state.</p>
    ///          <p>Use the <code>neverExpires</code> filter to return backups filtered by the value in the
    ///         <code>neverExpires</code> parameter. <code>True</code> returns all backups exempt from the
    ///       backup retention policy. <code>False</code> returns all backups with a backup retention policy
    ///       defined at the cluster.</p>
    public let filters: [String:[String]?]?
    /// <p>The maximum number of backups to return in the response. When there are more backups
    ///       than the number you specify, the response contains a <code>NextToken</code> value.</p>
    public let maxResults: Int?
    /// <p>The <code>NextToken</code> value that you received in the previous response. Use this
    ///       value to get more backups.</p>
    public let nextToken: String?
    /// <p>Designates whether or not to sort the return backups by ascending chronological order
    ///       of generation.</p>
    public let sortAscending: Bool?

    public init (
        filters: [String:[String]?]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        sortAscending: Bool? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortAscending = sortAscending
    }
}
