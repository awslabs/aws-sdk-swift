// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListCertificatesInputBody: Equatable {
    public let certificateStatuses: [CertificateStatus]?
    public let includes: Filters?
    public let nextToken: String?
    public let maxItems: Int?
}

extension ListCertificatesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case certificateStatuses = "CertificateStatuses"
        case includes = "Includes"
        case maxItems = "MaxItems"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateStatusesContainer = try containerValues.decodeIfPresent([CertificateStatus].self, forKey: .certificateStatuses)
        var certificateStatusesDecoded0:[CertificateStatus]? = nil
        if let certificateStatusesContainer = certificateStatusesContainer {
            certificateStatusesDecoded0 = [CertificateStatus]()
            for string0 in certificateStatusesContainer {
                certificateStatusesDecoded0?.append(string0)
            }
        }
        certificateStatuses = certificateStatusesDecoded0
        let includesDecoded = try containerValues.decodeIfPresent(Filters.self, forKey: .includes)
        includes = includesDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}
