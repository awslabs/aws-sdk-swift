// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Contains metadata about an ACM certificate. This structure is returned in the response
///       to a <a>DescribeCertificate</a> request. </p>
public struct CertificateDetail: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the certificate. For more information about ARNs, see
    ///         <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in
    ///       the <i>AWS General Reference</i>.</p>
    public let certificateArn: String?
    /// <p>The Amazon Resource Name (ARN) of the ACM PCA private certificate authority (CA) that issued
    ///       the certificate. This has the following format: </p>
    ///          <p>
    ///             <code>arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012</code>
    ///          </p>
    public let certificateAuthorityArn: String?
    /// <p>The time at which the certificate was requested.</p>
    public let createdAt: Date?
    /// <p>The fully qualified domain name for the certificate, such as www.example.com or
    ///       example.com.</p>
    public let domainName: String?
    /// <p>Contains information about the initial validation of each domain name that occurs as a
    ///       result of the <a>RequestCertificate</a> request. This field exists only when the
    ///       certificate type is <code>AMAZON_ISSUED</code>. </p>
    public let domainValidationOptions: [DomainValidation]?
    /// <p>Contains a list of Extended Key Usage X.509 v3 extension objects. Each object specifies a
    ///       purpose for which the certificate public key can be used and consists of a name and an object
    ///       identifier (OID). </p>
    public let extendedKeyUsages: [ExtendedKeyUsage]?
    /// <p>The reason the certificate request failed. This value exists only when the certificate
    ///       status is <code>FAILED</code>. For more information, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/troubleshooting.html#troubleshooting-failed">Certificate Request
    ///         Failed</a> in the <i>AWS Certificate Manager User Guide</i>. </p>
    public let failureReason: FailureReason?
    /// <p>The date and time at which the certificate was imported. This value exists only when the
    ///       certificate type is <code>IMPORTED</code>. </p>
    public let importedAt: Date?
    /// <p>A list of ARNs for the AWS resources that are using the certificate. A certificate can
    ///       be used by multiple AWS resources. </p>
    public let inUseBy: [String]?
    /// <p>The time at which the certificate was issued. This value exists only when the certificate
    ///       type is <code>AMAZON_ISSUED</code>. </p>
    public let issuedAt: Date?
    /// <p>The name of the certificate authority that issued and signed the certificate.</p>
    public let issuer: String?
    /// <p>The algorithm that was used to generate the public-private key pair.</p>
    public let keyAlgorithm: KeyAlgorithm?
    /// <p>A list of Key Usage X.509 v3 extension objects. Each object is a string value that
    ///       identifies the purpose of the public key contained in the certificate. Possible extension
    ///       values include DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION, and more.</p>
    public let keyUsages: [KeyUsage]?
    /// <p>The time after which the certificate is not valid.</p>
    public let notAfter: Date?
    /// <p>The time before which the certificate is not valid.</p>
    public let notBefore: Date?
    /// <p>Value that specifies whether to add the certificate to a transparency log. Certificate
    ///       transparency makes it possible to detect SSL certificates that have been mistakenly or
    ///       maliciously issued. A browser might respond to certificate that has not been logged by showing
    ///       an error message. The logs are cryptographically secure. </p>
    public let options: CertificateOptions?
    /// <p>Specifies whether the certificate is eligible for renewal. At this time, only exported
    ///       private certificates can be renewed with the <a>RenewCertificate</a>
    ///       command.</p>
    public let renewalEligibility: RenewalEligibility?
    /// <p>Contains information about the status of ACM's <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html">managed renewal</a> for the certificate. This field
    ///       exists only when the certificate type is <code>AMAZON_ISSUED</code>.</p>
    public let renewalSummary: RenewalSummary?
    /// <p>The reason the certificate was revoked. This value exists only when the certificate status
    ///       is <code>REVOKED</code>. </p>
    public let revocationReason: RevocationReason?
    /// <p>The time at which the certificate was revoked. This value exists only when the certificate
    ///       status is <code>REVOKED</code>. </p>
    public let revokedAt: Date?
    /// <p>The serial number of the certificate.</p>
    public let serial: String?
    /// <p>The algorithm that was used to sign the certificate.</p>
    public let signatureAlgorithm: String?
    /// <p>The status of the certificate.</p>
    public let status: CertificateStatus?
    /// <p>The name of the entity that is associated with the public key contained in the
    ///       certificate.</p>
    public let subject: String?
    /// <p>One or more domain names (subject alternative names) included in the certificate. This
    ///       list contains the domain names that are bound to the public key that is contained in the
    ///       certificate. The subject alternative names include the canonical domain name (CN) of the
    ///       certificate and additional domain names that can be used to connect to the website. </p>
    public let subjectAlternativeNames: [String]?
    /// <p>The source of the certificate. For certificates provided by ACM, this value is
    ///         <code>AMAZON_ISSUED</code>. For certificates that you imported with <a>ImportCertificate</a>, this value is <code>IMPORTED</code>. ACM does not provide
    ///         <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html">managed renewal</a> for
    ///       imported certificates. For more information about the differences between certificates that
    ///       you import and those that ACM provides, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html">Importing Certificates</a> in the
    ///         <i>AWS Certificate Manager User Guide</i>. </p>
    public let type: CertificateType?

    public init (
        certificateArn: String? = nil,
        certificateAuthorityArn: String? = nil,
        createdAt: Date? = nil,
        domainName: String? = nil,
        domainValidationOptions: [DomainValidation]? = nil,
        extendedKeyUsages: [ExtendedKeyUsage]? = nil,
        failureReason: FailureReason? = nil,
        importedAt: Date? = nil,
        inUseBy: [String]? = nil,
        issuedAt: Date? = nil,
        issuer: String? = nil,
        keyAlgorithm: KeyAlgorithm? = nil,
        keyUsages: [KeyUsage]? = nil,
        notAfter: Date? = nil,
        notBefore: Date? = nil,
        options: CertificateOptions? = nil,
        renewalEligibility: RenewalEligibility? = nil,
        renewalSummary: RenewalSummary? = nil,
        revocationReason: RevocationReason? = nil,
        revokedAt: Date? = nil,
        serial: String? = nil,
        signatureAlgorithm: String? = nil,
        status: CertificateStatus? = nil,
        subject: String? = nil,
        subjectAlternativeNames: [String]? = nil,
        type: CertificateType? = nil
    )
    {
        self.certificateArn = certificateArn
        self.certificateAuthorityArn = certificateAuthorityArn
        self.createdAt = createdAt
        self.domainName = domainName
        self.domainValidationOptions = domainValidationOptions
        self.extendedKeyUsages = extendedKeyUsages
        self.failureReason = failureReason
        self.importedAt = importedAt
        self.inUseBy = inUseBy
        self.issuedAt = issuedAt
        self.issuer = issuer
        self.keyAlgorithm = keyAlgorithm
        self.keyUsages = keyUsages
        self.notAfter = notAfter
        self.notBefore = notBefore
        self.options = options
        self.renewalEligibility = renewalEligibility
        self.renewalSummary = renewalSummary
        self.revocationReason = revocationReason
        self.revokedAt = revokedAt
        self.serial = serial
        self.signatureAlgorithm = signatureAlgorithm
        self.status = status
        self.subject = subject
        self.subjectAlternativeNames = subjectAlternativeNames
        self.type = type
    }
}
