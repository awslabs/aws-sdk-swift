// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ListCertificatesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case certificateStatuses = "CertificateStatuses"
        case includes = "Includes"
        case maxItems = "MaxItems"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateStatuses = certificateStatuses {
            var certificateStatusesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .certificateStatuses)
            for certificatestatuses0 in certificateStatuses {
                try certificateStatusesContainer.encode(certificatestatuses0.rawValue)
            }
        }
        if let includes = includes {
            try encodeContainer.encode(includes, forKey: .includes)
        }
        if let maxItems = maxItems {
            try encodeContainer.encode(maxItems, forKey: .maxItems)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}
