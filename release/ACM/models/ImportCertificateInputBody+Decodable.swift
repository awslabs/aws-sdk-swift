// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ImportCertificateInputBody: Equatable {
    public let certificateArn: String?
    public let certificate: Data?
    public let privateKey: Data?
    public let certificateChain: Data?
    public let tags: [Tag]?
}

extension ImportCertificateInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case certificate = "Certificate"
        case certificateArn = "CertificateArn"
        case certificateChain = "CertificateChain"
        case privateKey = "PrivateKey"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let certificateDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .certificate)
        certificate = certificateDecoded
        let privateKeyDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .privateKey)
        privateKey = privateKeyDecoded
        let certificateChainDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .certificateChain)
        certificateChain = certificateChainDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
