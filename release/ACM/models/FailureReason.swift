// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum FailureReason {
    case additionalVerificationRequired
    case caaError
    case domainNotAllowed
    case domainValidationDenied
    case invalidPublicDomain
    case noAvailableContacts
    case other
    case pcaAccessDenied
    case pcaInvalidArgs
    case pcaInvalidArn
    case pcaInvalidDuration
    case pcaInvalidState
    case pcaLimitExceeded
    case pcaNameConstraintsValidation
    case pcaRequestFailed
    case pcaResourceNotFound
    case slrNotFound
    case sdkUnknown(String)
}

extension FailureReason : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [FailureReason] {
        return [
            .additionalVerificationRequired,
            .caaError,
            .domainNotAllowed,
            .domainValidationDenied,
            .invalidPublicDomain,
            .noAvailableContacts,
            .other,
            .pcaAccessDenied,
            .pcaInvalidArgs,
            .pcaInvalidArn,
            .pcaInvalidDuration,
            .pcaInvalidState,
            .pcaLimitExceeded,
            .pcaNameConstraintsValidation,
            .pcaRequestFailed,
            .pcaResourceNotFound,
            .slrNotFound,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .additionalVerificationRequired: return "ADDITIONAL_VERIFICATION_REQUIRED"
        case .caaError: return "CAA_ERROR"
        case .domainNotAllowed: return "DOMAIN_NOT_ALLOWED"
        case .domainValidationDenied: return "DOMAIN_VALIDATION_DENIED"
        case .invalidPublicDomain: return "INVALID_PUBLIC_DOMAIN"
        case .noAvailableContacts: return "NO_AVAILABLE_CONTACTS"
        case .other: return "OTHER"
        case .pcaAccessDenied: return "PCA_ACCESS_DENIED"
        case .pcaInvalidArgs: return "PCA_INVALID_ARGS"
        case .pcaInvalidArn: return "PCA_INVALID_ARN"
        case .pcaInvalidDuration: return "PCA_INVALID_DURATION"
        case .pcaInvalidState: return "PCA_INVALID_STATE"
        case .pcaLimitExceeded: return "PCA_LIMIT_EXCEEDED"
        case .pcaNameConstraintsValidation: return "PCA_NAME_CONSTRAINTS_VALIDATION"
        case .pcaRequestFailed: return "PCA_REQUEST_FAILED"
        case .pcaResourceNotFound: return "PCA_RESOURCE_NOT_FOUND"
        case .slrNotFound: return "SLR_NOT_FOUND"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = FailureReason(rawValue: rawValue) ?? FailureReason.sdkUnknown(rawValue)
    }
}
