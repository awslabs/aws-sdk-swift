// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Filters: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case extendedKeyUsage
        case keyTypes
        case keyUsage
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let extendedKeyUsage = extendedKeyUsage {
            var extendedKeyUsageContainer = encodeContainer.nestedUnkeyedContainer(forKey: .extendedKeyUsage)
            for extendedkeyusagefilterlist0 in extendedKeyUsage {
                try extendedKeyUsageContainer.encode(extendedkeyusagefilterlist0.rawValue)
            }
        }
        if let keyTypes = keyTypes {
            var keyTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keyTypes)
            for keyalgorithmlist0 in keyTypes {
                try keyTypesContainer.encode(keyalgorithmlist0.rawValue)
            }
        }
        if let keyUsage = keyUsage {
            var keyUsageContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keyUsage)
            for keyusagefilterlist0 in keyUsage {
                try keyUsageContainer.encode(keyusagefilterlist0.rawValue)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let extendedKeyUsageContainer = try containerValues.decodeIfPresent([ExtendedKeyUsageName].self, forKey: .extendedKeyUsage)
        var extendedKeyUsageDecoded0:[ExtendedKeyUsageName]? = nil
        if let extendedKeyUsageContainer = extendedKeyUsageContainer {
            extendedKeyUsageDecoded0 = [ExtendedKeyUsageName]()
            for string0 in extendedKeyUsageContainer {
                extendedKeyUsageDecoded0?.append(string0)
            }
        }
        extendedKeyUsage = extendedKeyUsageDecoded0
        let keyUsageContainer = try containerValues.decodeIfPresent([KeyUsageName].self, forKey: .keyUsage)
        var keyUsageDecoded0:[KeyUsageName]? = nil
        if let keyUsageContainer = keyUsageContainer {
            keyUsageDecoded0 = [KeyUsageName]()
            for string0 in keyUsageContainer {
                keyUsageDecoded0?.append(string0)
            }
        }
        keyUsage = keyUsageDecoded0
        let keyTypesContainer = try containerValues.decodeIfPresent([KeyAlgorithm].self, forKey: .keyTypes)
        var keyTypesDecoded0:[KeyAlgorithm]? = nil
        if let keyTypesContainer = keyTypesContainer {
            keyTypesDecoded0 = [KeyAlgorithm]()
            for string0 in keyTypesContainer {
                keyTypesDecoded0?.append(string0)
            }
        }
        keyTypes = keyTypesDecoded0
    }
}
