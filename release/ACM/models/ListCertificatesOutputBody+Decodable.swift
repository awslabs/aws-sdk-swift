// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListCertificatesOutputBody: Equatable {
    public let nextToken: String?
    public let certificateSummaryList: [CertificateSummary]?
}

extension ListCertificatesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case certificateSummaryList = "CertificateSummaryList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let certificateSummaryListContainer = try containerValues.decodeIfPresent([CertificateSummary].self, forKey: .certificateSummaryList)
        var certificateSummaryListDecoded0:[CertificateSummary]? = nil
        if let certificateSummaryListContainer = certificateSummaryListContainer {
            certificateSummaryListDecoded0 = [CertificateSummary]()
            for structure0 in certificateSummaryListContainer {
                certificateSummaryListDecoded0?.append(structure0)
            }
        }
        certificateSummaryList = certificateSummaryListDecoded0
    }
}
