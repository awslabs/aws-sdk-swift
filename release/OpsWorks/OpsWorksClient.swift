// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation

public class OpsWorksClient {
    let client: SdkHttpClient
    let config: OpsWorksClientConfiguration
    let serviceName = "OpsWorks"
    let encoder: RequestEncoder
    let decoder: ResponseDecoder

    public init(config: OpsWorksClientConfiguration) {
        client = SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        self.encoder = config.encoder ?? encoder
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public class OpsWorksClientConfiguration: ClientRuntime.Configuration, AWSClientConfiguration {

        public var region: String
        public var credentialsProvider: AWSCredentialsProvider
        public var signingRegion: String
        public var endpointResolver: EndpointResolver

        public init (
            credentialsProvider: AWSCredentialsProvider,
            endpointResolver: EndpointResolver,
            region: String,
            signingRegion: String
        ) throws
        {
            self.credentialsProvider = credentialsProvider
            self.endpointResolver = endpointResolver
            self.region = region
            self.signingRegion = signingRegion
        }

        public convenience init(credentialsProvider: AWSCredentialsProvider) throws {
            let region = "us-east-1"
            let signingRegion = "us-east-1"
            let endpointResolver = DefaultEndpointResolver()
            try self.init(
                credentialsProvider: credentialsProvider,
                endpointResolver: endpointResolver,
                region: region,
                signingRegion: signingRegion
            )
        }

        public static func `default`() throws -> OpsWorksClientConfiguration {
            let awsCredsProvider = try AWSCredentialsProvider.fromEnv()
            return try OpsWorksClientConfiguration(credentialsProvider: awsCredsProvider)
        }
    }
}

extension OpsWorksClient: OpsWorksClientProtocol {
    /// <p>Assign a registered instance to a layer.</p>
    ///          <ul>
    ///             <li>
    ///                <p>You can assign registered on-premises instances to any layer type.</p>
    ///             </li>
    ///             <li>
    ///                <p>You can assign registered Amazon EC2 instances only to custom layers.</p>
    ///             </li>
    ///             <li>
    ///                <p>You cannot use this action with instances that were created with AWS OpsWorks Stacks.</p>
    ///             </li>
    ///          </ul>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an AWS Identity and Access Management
    ///       (IAM) user must have a Manage permissions
    ///       level for the stack or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func assignInstance(input: AssignInstanceInput, completion: @escaping (SdkResult<AssignInstanceOutput, AssignInstanceOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "assignInstance")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AssignInstanceInput, AssignInstanceOutput, AssignInstanceOutputError>(id: "assignInstance")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AssignInstanceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AssignInstanceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AssignInstanceInput, AssignInstanceOutput, AssignInstanceOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: AssignInstanceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<AssignInstanceInput, AssignInstanceOutput, AssignInstanceOutputError>(xAmzTarget: "OpsWorks_20130218.AssignInstance"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Assigns one of the stack's registered Amazon EBS volumes to a specified instance. The volume must
    ///       first be registered with the stack by calling <a>RegisterVolume</a>. After you register the
    ///       volume, you must call <a>UpdateVolume</a> to specify a mount point before calling
    ///         <code>AssignVolume</code>. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource Management</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func assignVolume(input: AssignVolumeInput, completion: @escaping (SdkResult<AssignVolumeOutput, AssignVolumeOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "assignVolume")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AssignVolumeInput, AssignVolumeOutput, AssignVolumeOutputError>(id: "assignVolume")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AssignVolumeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AssignVolumeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AssignVolumeInput, AssignVolumeOutput, AssignVolumeOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: AssignVolumeInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<AssignVolumeInput, AssignVolumeOutput, AssignVolumeOutputError>(xAmzTarget: "OpsWorks_20130218.AssignVolume"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Associates one of the stack's registered Elastic IP addresses with a specified instance. The
    ///       address must first be registered with the stack by calling <a>RegisterElasticIp</a>. For more
    ///       information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource
    ///         Management</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func associateElasticIp(input: AssociateElasticIpInput, completion: @escaping (SdkResult<AssociateElasticIpOutput, AssociateElasticIpOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "associateElasticIp")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AssociateElasticIpInput, AssociateElasticIpOutput, AssociateElasticIpOutputError>(id: "associateElasticIp")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AssociateElasticIpInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AssociateElasticIpInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AssociateElasticIpInput, AssociateElasticIpOutput, AssociateElasticIpOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: AssociateElasticIpInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<AssociateElasticIpInput, AssociateElasticIpOutput, AssociateElasticIpOutputError>(xAmzTarget: "OpsWorks_20130218.AssociateElasticIp"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Attaches an Elastic Load Balancing load balancer to a specified layer. AWS OpsWorks Stacks does not support
    ///           Application Load Balancer. You can only use Classic Load Balancer with AWS OpsWorks Stacks.
    ///           For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/layers-elb.html">Elastic Load
    ///         Balancing</a>.</p>
    ///          <note>
    ///             <p>You must create the Elastic Load Balancing instance separately, by using the Elastic Load Balancing console, API, or CLI. For
    ///         more information, see <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/Welcome.html"> Elastic
    ///           Load Balancing Developer Guide</a>.</p>
    ///          </note>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func attachElasticLoadBalancer(input: AttachElasticLoadBalancerInput, completion: @escaping (SdkResult<AttachElasticLoadBalancerOutput, AttachElasticLoadBalancerOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "attachElasticLoadBalancer")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AttachElasticLoadBalancerInput, AttachElasticLoadBalancerOutput, AttachElasticLoadBalancerOutputError>(id: "attachElasticLoadBalancer")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AttachElasticLoadBalancerInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AttachElasticLoadBalancerInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AttachElasticLoadBalancerInput, AttachElasticLoadBalancerOutput, AttachElasticLoadBalancerOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: AttachElasticLoadBalancerInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<AttachElasticLoadBalancerInput, AttachElasticLoadBalancerOutput, AttachElasticLoadBalancerOutputError>(xAmzTarget: "OpsWorks_20130218.AttachElasticLoadBalancer"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a clone of a specified stack. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-cloning.html">Clone a
    ///         Stack</a>. By default, all parameters are set to the values used by the parent stack.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have an attached policy
    ///       that explicitly grants permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func cloneStack(input: CloneStackInput, completion: @escaping (SdkResult<CloneStackOutput, CloneStackOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "cloneStack")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CloneStackInput, CloneStackOutput, CloneStackOutputError>(id: "cloneStack")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CloneStackInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CloneStackInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CloneStackInput, CloneStackOutput, CloneStackOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CloneStackInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CloneStackInput, CloneStackOutput, CloneStackOutputError>(xAmzTarget: "OpsWorks_20130218.CloneStack"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates an app for a specified stack. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingapps-creating.html">Creating
    ///       Apps</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func createApp(input: CreateAppInput, completion: @escaping (SdkResult<CreateAppOutput, CreateAppOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createApp")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateAppInput, CreateAppOutput, CreateAppOutputError>(id: "createApp")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateAppInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateAppInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateAppInput, CreateAppOutput, CreateAppOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CreateAppInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CreateAppInput, CreateAppOutput, CreateAppOutputError>(xAmzTarget: "OpsWorks_20130218.CreateApp"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Runs deployment or stack commands. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingapps-deploying.html">Deploying
    ///         Apps</a> and <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-commands.html">Run Stack Commands</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Deploy or Manage
    ///       permissions level for the stack, or an attached policy that explicitly grants permissions. For
    ///       more information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func createDeployment(input: CreateDeploymentInput, completion: @escaping (SdkResult<CreateDeploymentOutput, CreateDeploymentOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createDeployment")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateDeploymentInput, CreateDeploymentOutput, CreateDeploymentOutputError>(id: "createDeployment")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateDeploymentInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateDeploymentInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateDeploymentInput, CreateDeploymentOutput, CreateDeploymentOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CreateDeploymentInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CreateDeploymentInput, CreateDeploymentOutput, CreateDeploymentOutputError>(xAmzTarget: "OpsWorks_20130218.CreateDeployment"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates an instance in a specified stack. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-add.html">Adding an
    ///         Instance to a Layer</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func createInstance(input: CreateInstanceInput, completion: @escaping (SdkResult<CreateInstanceOutput, CreateInstanceOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createInstance")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateInstanceInput, CreateInstanceOutput, CreateInstanceOutputError>(id: "createInstance")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateInstanceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateInstanceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateInstanceInput, CreateInstanceOutput, CreateInstanceOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CreateInstanceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CreateInstanceInput, CreateInstanceOutput, CreateInstanceOutputError>(xAmzTarget: "OpsWorks_20130218.CreateInstance"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a layer. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-create.html">How to
    ///         Create a Layer</a>.</p>
    ///          <note>
    ///             <p>You should use <b>CreateLayer</b> for noncustom layer types such as PHP App Server only if the stack
    ///         does not have an existing layer of that type. A stack can have at most one instance of each
    ///         noncustom layer; if you attempt to create a second instance, <b>CreateLayer</b> fails. A
    ///         stack can have an arbitrary number of custom layers, so you can call <b>CreateLayer</b> as
    ///         many times as you like for that layer type.</p>
    ///          </note>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func createLayer(input: CreateLayerInput, completion: @escaping (SdkResult<CreateLayerOutput, CreateLayerOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createLayer")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateLayerInput, CreateLayerOutput, CreateLayerOutputError>(id: "createLayer")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateLayerInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateLayerInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateLayerInput, CreateLayerOutput, CreateLayerOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CreateLayerInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CreateLayerInput, CreateLayerOutput, CreateLayerOutputError>(xAmzTarget: "OpsWorks_20130218.CreateLayer"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a new stack. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-edit.html">Create a New
    ///         Stack</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have an attached policy
    ///       that explicitly grants permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func createStack(input: CreateStackInput, completion: @escaping (SdkResult<CreateStackOutput, CreateStackOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createStack")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateStackInput, CreateStackOutput, CreateStackOutputError>(id: "createStack")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateStackInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateStackInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateStackInput, CreateStackOutput, CreateStackOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CreateStackInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CreateStackInput, CreateStackOutput, CreateStackOutputError>(xAmzTarget: "OpsWorks_20130218.CreateStack"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a new user profile.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have an attached policy
    ///       that explicitly grants permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func createUserProfile(input: CreateUserProfileInput, completion: @escaping (SdkResult<CreateUserProfileOutput, CreateUserProfileOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createUserProfile")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateUserProfileInput, CreateUserProfileOutput, CreateUserProfileOutputError>(id: "createUserProfile")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateUserProfileInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateUserProfileInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateUserProfileInput, CreateUserProfileOutput, CreateUserProfileOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CreateUserProfileInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CreateUserProfileInput, CreateUserProfileOutput, CreateUserProfileOutputError>(xAmzTarget: "OpsWorks_20130218.CreateUserProfile"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a specified app.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func deleteApp(input: DeleteAppInput, completion: @escaping (SdkResult<DeleteAppOutput, DeleteAppOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteApp")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteAppInput, DeleteAppOutput, DeleteAppOutputError>(id: "deleteApp")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteAppInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteAppInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteAppInput, DeleteAppOutput, DeleteAppOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeleteAppInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeleteAppInput, DeleteAppOutput, DeleteAppOutputError>(xAmzTarget: "OpsWorks_20130218.DeleteApp"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a specified instance, which terminates the associated Amazon EC2 instance. You must stop an instance before you can delete it.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-delete.html">Deleting
    ///         Instances</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func deleteInstance(input: DeleteInstanceInput, completion: @escaping (SdkResult<DeleteInstanceOutput, DeleteInstanceOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteInstance")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteInstanceInput, DeleteInstanceOutput, DeleteInstanceOutputError>(id: "deleteInstance")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteInstanceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteInstanceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteInstanceInput, DeleteInstanceOutput, DeleteInstanceOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeleteInstanceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeleteInstanceInput, DeleteInstanceOutput, DeleteInstanceOutputError>(xAmzTarget: "OpsWorks_20130218.DeleteInstance"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a specified layer. You must first stop and then delete all associated instances or
    ///       unassign registered instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-delete.html">How to
    ///         Delete a Layer</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func deleteLayer(input: DeleteLayerInput, completion: @escaping (SdkResult<DeleteLayerOutput, DeleteLayerOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteLayer")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteLayerInput, DeleteLayerOutput, DeleteLayerOutputError>(id: "deleteLayer")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteLayerInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteLayerInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteLayerInput, DeleteLayerOutput, DeleteLayerOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeleteLayerInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeleteLayerInput, DeleteLayerOutput, DeleteLayerOutputError>(xAmzTarget: "OpsWorks_20130218.DeleteLayer"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a specified stack. You must first delete all instances, layers, and apps or
    ///       deregister registered instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-shutting.html">Shut Down a
    ///         Stack</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func deleteStack(input: DeleteStackInput, completion: @escaping (SdkResult<DeleteStackOutput, DeleteStackOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteStack")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteStackInput, DeleteStackOutput, DeleteStackOutputError>(id: "deleteStack")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteStackInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteStackInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteStackInput, DeleteStackOutput, DeleteStackOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeleteStackInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeleteStackInput, DeleteStackOutput, DeleteStackOutputError>(xAmzTarget: "OpsWorks_20130218.DeleteStack"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a user profile.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have an attached policy
    ///       that explicitly grants permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func deleteUserProfile(input: DeleteUserProfileInput, completion: @escaping (SdkResult<DeleteUserProfileOutput, DeleteUserProfileOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteUserProfile")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteUserProfileInput, DeleteUserProfileOutput, DeleteUserProfileOutputError>(id: "deleteUserProfile")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteUserProfileInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteUserProfileInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteUserProfileInput, DeleteUserProfileOutput, DeleteUserProfileOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeleteUserProfileInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeleteUserProfileInput, DeleteUserProfileOutput, DeleteUserProfileOutputError>(xAmzTarget: "OpsWorks_20130218.DeleteUserProfile"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deregisters a specified Amazon ECS cluster from a stack.
    ///       For more information, see
    ///       <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-ecscluster.html#workinglayers-ecscluster-delete">
    ///         Resource Management</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see
    ///       <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html</a>.</p>
    public func deregisterEcsCluster(input: DeregisterEcsClusterInput, completion: @escaping (SdkResult<DeregisterEcsClusterOutput, DeregisterEcsClusterOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deregisterEcsCluster")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeregisterEcsClusterInput, DeregisterEcsClusterOutput, DeregisterEcsClusterOutputError>(id: "deregisterEcsCluster")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeregisterEcsClusterInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeregisterEcsClusterInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeregisterEcsClusterInput, DeregisterEcsClusterOutput, DeregisterEcsClusterOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeregisterEcsClusterInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeregisterEcsClusterInput, DeregisterEcsClusterOutput, DeregisterEcsClusterOutputError>(xAmzTarget: "OpsWorks_20130218.DeregisterEcsCluster"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deregisters a specified Elastic IP address. The address can then be registered by another
    ///       stack. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource Management</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func deregisterElasticIp(input: DeregisterElasticIpInput, completion: @escaping (SdkResult<DeregisterElasticIpOutput, DeregisterElasticIpOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deregisterElasticIp")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeregisterElasticIpInput, DeregisterElasticIpOutput, DeregisterElasticIpOutputError>(id: "deregisterElasticIp")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeregisterElasticIpInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeregisterElasticIpInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeregisterElasticIpInput, DeregisterElasticIpOutput, DeregisterElasticIpOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeregisterElasticIpInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeregisterElasticIpInput, DeregisterElasticIpOutput, DeregisterElasticIpOutputError>(xAmzTarget: "OpsWorks_20130218.DeregisterElasticIp"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deregister a registered Amazon EC2 or on-premises instance. This action removes the
    ///           instance from the stack and returns it to your control. This action cannot be used with
    ///           instances that were created with AWS OpsWorks Stacks.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func deregisterInstance(input: DeregisterInstanceInput, completion: @escaping (SdkResult<DeregisterInstanceOutput, DeregisterInstanceOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deregisterInstance")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeregisterInstanceInput, DeregisterInstanceOutput, DeregisterInstanceOutputError>(id: "deregisterInstance")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeregisterInstanceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeregisterInstanceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeregisterInstanceInput, DeregisterInstanceOutput, DeregisterInstanceOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeregisterInstanceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeregisterInstanceInput, DeregisterInstanceOutput, DeregisterInstanceOutputError>(xAmzTarget: "OpsWorks_20130218.DeregisterInstance"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deregisters an Amazon RDS instance.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func deregisterRdsDbInstance(input: DeregisterRdsDbInstanceInput, completion: @escaping (SdkResult<DeregisterRdsDbInstanceOutput, DeregisterRdsDbInstanceOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deregisterRdsDbInstance")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeregisterRdsDbInstanceInput, DeregisterRdsDbInstanceOutput, DeregisterRdsDbInstanceOutputError>(id: "deregisterRdsDbInstance")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeregisterRdsDbInstanceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeregisterRdsDbInstanceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeregisterRdsDbInstanceInput, DeregisterRdsDbInstanceOutput, DeregisterRdsDbInstanceOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeregisterRdsDbInstanceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeregisterRdsDbInstanceInput, DeregisterRdsDbInstanceOutput, DeregisterRdsDbInstanceOutputError>(xAmzTarget: "OpsWorks_20130218.DeregisterRdsDbInstance"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deregisters an Amazon EBS volume. The volume can then be registered by another stack. For more
    ///       information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource
    ///         Management</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func deregisterVolume(input: DeregisterVolumeInput, completion: @escaping (SdkResult<DeregisterVolumeOutput, DeregisterVolumeOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deregisterVolume")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeregisterVolumeInput, DeregisterVolumeOutput, DeregisterVolumeOutputError>(id: "deregisterVolume")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeregisterVolumeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeregisterVolumeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeregisterVolumeInput, DeregisterVolumeOutput, DeregisterVolumeOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeregisterVolumeInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeregisterVolumeInput, DeregisterVolumeOutput, DeregisterVolumeOutputError>(xAmzTarget: "OpsWorks_20130218.DeregisterVolume"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes the available AWS OpsWorks Stacks agent versions. You must specify a stack ID or a
    ///     configuration manager. <code>DescribeAgentVersions</code> returns a list of available
    ///     agent versions for the specified stack or configuration manager.</p>
    public func describeAgentVersions(input: DescribeAgentVersionsInput, completion: @escaping (SdkResult<DescribeAgentVersionsOutput, DescribeAgentVersionsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeAgentVersions")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeAgentVersionsInput, DescribeAgentVersionsOutput, DescribeAgentVersionsOutputError>(id: "describeAgentVersions")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeAgentVersionsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeAgentVersionsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeAgentVersionsInput, DescribeAgentVersionsOutput, DescribeAgentVersionsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeAgentVersionsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeAgentVersionsInput, DescribeAgentVersionsOutput, DescribeAgentVersionsOutputError>(xAmzTarget: "OpsWorks_20130218.DescribeAgentVersions"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Requests a description of a specified set of apps.</p>
    ///          <note>
    ///             <p>This call accepts only one resource-identifying parameter.</p>
    ///          </note>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func describeApps(input: DescribeAppsInput, completion: @escaping (SdkResult<DescribeAppsOutput, DescribeAppsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeApps")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeAppsInput, DescribeAppsOutput, DescribeAppsOutputError>(id: "describeApps")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeAppsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeAppsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeAppsInput, DescribeAppsOutput, DescribeAppsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeAppsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeAppsInput, DescribeAppsOutput, DescribeAppsOutputError>(xAmzTarget: "OpsWorks_20130218.DescribeApps"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes the results of specified commands.</p>
    ///          <note>
    ///             <p>This call accepts only one resource-identifying parameter.</p>
    ///          </note>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func describeCommands(input: DescribeCommandsInput, completion: @escaping (SdkResult<DescribeCommandsOutput, DescribeCommandsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeCommands")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeCommandsInput, DescribeCommandsOutput, DescribeCommandsOutputError>(id: "describeCommands")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeCommandsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeCommandsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeCommandsInput, DescribeCommandsOutput, DescribeCommandsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeCommandsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeCommandsInput, DescribeCommandsOutput, DescribeCommandsOutputError>(xAmzTarget: "OpsWorks_20130218.DescribeCommands"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Requests a description of a specified set of deployments.</p>
    ///          <note>
    ///             <p>This call accepts only one resource-identifying parameter.</p>
    ///          </note>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func describeDeployments(input: DescribeDeploymentsInput, completion: @escaping (SdkResult<DescribeDeploymentsOutput, DescribeDeploymentsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeDeployments")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeDeploymentsInput, DescribeDeploymentsOutput, DescribeDeploymentsOutputError>(id: "describeDeployments")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeDeploymentsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeDeploymentsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeDeploymentsInput, DescribeDeploymentsOutput, DescribeDeploymentsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeDeploymentsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeDeploymentsInput, DescribeDeploymentsOutput, DescribeDeploymentsOutputError>(xAmzTarget: "OpsWorks_20130218.DescribeDeployments"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes Amazon ECS clusters that are registered with a stack. If you specify only a stack ID,
    ///     you can use the <code>MaxResults</code> and <code>NextToken</code> parameters to paginate the
    ///     response. However, AWS OpsWorks Stacks currently supports only one cluster per layer, so the result
    ///     set has a maximum of one element.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack or an attached policy that explicitly grants
    ///       permission. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    ///          <p>This call accepts only one resource-identifying parameter.</p>
    public func describeEcsClusters(input: DescribeEcsClustersInput, completion: @escaping (SdkResult<DescribeEcsClustersOutput, DescribeEcsClustersOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeEcsClusters")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeEcsClustersInput, DescribeEcsClustersOutput, DescribeEcsClustersOutputError>(id: "describeEcsClusters")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeEcsClustersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeEcsClustersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeEcsClustersInput, DescribeEcsClustersOutput, DescribeEcsClustersOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeEcsClustersInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeEcsClustersInput, DescribeEcsClustersOutput, DescribeEcsClustersOutputError>(xAmzTarget: "OpsWorks_20130218.DescribeEcsClusters"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP addresses</a>.</p>
    ///          <note>
    ///             <p>This call accepts only one resource-identifying parameter.</p>
    ///          </note>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func describeElasticIps(input: DescribeElasticIpsInput, completion: @escaping (SdkResult<DescribeElasticIpsOutput, DescribeElasticIpsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeElasticIps")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeElasticIpsInput, DescribeElasticIpsOutput, DescribeElasticIpsOutputError>(id: "describeElasticIps")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeElasticIpsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeElasticIpsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeElasticIpsInput, DescribeElasticIpsOutput, DescribeElasticIpsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeElasticIpsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeElasticIpsInput, DescribeElasticIpsOutput, DescribeElasticIpsOutputError>(xAmzTarget: "OpsWorks_20130218.DescribeElasticIps"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes a stack's Elastic Load Balancing instances.</p>
    ///          <note>
    ///             <p>This call accepts only one resource-identifying parameter.</p>
    ///          </note>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func describeElasticLoadBalancers(input: DescribeElasticLoadBalancersInput, completion: @escaping (SdkResult<DescribeElasticLoadBalancersOutput, DescribeElasticLoadBalancersOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeElasticLoadBalancers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeElasticLoadBalancersInput, DescribeElasticLoadBalancersOutput, DescribeElasticLoadBalancersOutputError>(id: "describeElasticLoadBalancers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeElasticLoadBalancersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeElasticLoadBalancersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeElasticLoadBalancersInput, DescribeElasticLoadBalancersOutput, DescribeElasticLoadBalancersOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeElasticLoadBalancersInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeElasticLoadBalancersInput, DescribeElasticLoadBalancersOutput, DescribeElasticLoadBalancersOutputError>(xAmzTarget: "OpsWorks_20130218.DescribeElasticLoadBalancers"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Requests a description of a set of instances.</p>
    ///          <note>
    ///             <p>This call accepts only one resource-identifying parameter.</p>
    ///          </note>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func describeInstances(input: DescribeInstancesInput, completion: @escaping (SdkResult<DescribeInstancesOutput, DescribeInstancesOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeInstances")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeInstancesInput, DescribeInstancesOutput, DescribeInstancesOutputError>(id: "describeInstances")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeInstancesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeInstancesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeInstancesInput, DescribeInstancesOutput, DescribeInstancesOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeInstancesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeInstancesInput, DescribeInstancesOutput, DescribeInstancesOutputError>(xAmzTarget: "OpsWorks_20130218.DescribeInstances"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Requests a description of one or more layers in a specified stack.</p>
    ///          <note>
    ///             <p>This call accepts only one resource-identifying parameter.</p>
    ///          </note>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func describeLayers(input: DescribeLayersInput, completion: @escaping (SdkResult<DescribeLayersOutput, DescribeLayersOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeLayers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeLayersInput, DescribeLayersOutput, DescribeLayersOutputError>(id: "describeLayers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeLayersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeLayersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeLayersInput, DescribeLayersOutput, DescribeLayersOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeLayersInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeLayersInput, DescribeLayersOutput, DescribeLayersOutputError>(xAmzTarget: "OpsWorks_20130218.DescribeLayers"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes load-based auto scaling configurations for specified layers.</p>
    ///          <note>
    ///             <p>You must specify at least one of the parameters.</p>
    ///          </note>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func describeLoadBasedAutoScaling(input: DescribeLoadBasedAutoScalingInput, completion: @escaping (SdkResult<DescribeLoadBasedAutoScalingOutput, DescribeLoadBasedAutoScalingOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeLoadBasedAutoScaling")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeLoadBasedAutoScalingInput, DescribeLoadBasedAutoScalingOutput, DescribeLoadBasedAutoScalingOutputError>(id: "describeLoadBasedAutoScaling")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeLoadBasedAutoScalingInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeLoadBasedAutoScalingInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeLoadBasedAutoScalingInput, DescribeLoadBasedAutoScalingOutput, DescribeLoadBasedAutoScalingOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeLoadBasedAutoScalingInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeLoadBasedAutoScalingInput, DescribeLoadBasedAutoScalingOutput, DescribeLoadBasedAutoScalingOutputError>(xAmzTarget: "OpsWorks_20130218.DescribeLoadBasedAutoScaling"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes a user's SSH information.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have self-management
    ///       enabled or an attached policy that explicitly grants permissions. For more information about user
    ///       permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func describeMyUserProfile(input: DescribeMyUserProfileInput, completion: @escaping (SdkResult<DescribeMyUserProfileOutput, DescribeMyUserProfileOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeMyUserProfile")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeMyUserProfileInput, DescribeMyUserProfileOutput, DescribeMyUserProfileOutputError>(id: "describeMyUserProfile")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeMyUserProfileInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeMyUserProfileInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeMyUserProfileInput, DescribeMyUserProfileOutput, DescribeMyUserProfileOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeMyUserProfileInput, DescribeMyUserProfileOutput, DescribeMyUserProfileOutputError>(xAmzTarget: "OpsWorks_20130218.DescribeMyUserProfile"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes the operating systems that are supported by AWS OpsWorks Stacks.</p>
    public func describeOperatingSystems(input: DescribeOperatingSystemsInput, completion: @escaping (SdkResult<DescribeOperatingSystemsOutput, DescribeOperatingSystemsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeOperatingSystems")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeOperatingSystemsInput, DescribeOperatingSystemsOutput, DescribeOperatingSystemsOutputError>(id: "describeOperatingSystems")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeOperatingSystemsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeOperatingSystemsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeOperatingSystemsInput, DescribeOperatingSystemsOutput, DescribeOperatingSystemsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeOperatingSystemsInput, DescribeOperatingSystemsOutput, DescribeOperatingSystemsOutputError>(xAmzTarget: "OpsWorks_20130218.DescribeOperatingSystems"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes the permissions for a specified stack.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func describePermissions(input: DescribePermissionsInput, completion: @escaping (SdkResult<DescribePermissionsOutput, DescribePermissionsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describePermissions")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribePermissionsInput, DescribePermissionsOutput, DescribePermissionsOutputError>(id: "describePermissions")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribePermissionsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribePermissionsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribePermissionsInput, DescribePermissionsOutput, DescribePermissionsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribePermissionsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribePermissionsInput, DescribePermissionsOutput, DescribePermissionsOutputError>(xAmzTarget: "OpsWorks_20130218.DescribePermissions"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describe an instance's RAID arrays.</p>
    ///          <note>
    ///             <p>This call accepts only one resource-identifying parameter.</p>
    ///          </note>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func describeRaidArrays(input: DescribeRaidArraysInput, completion: @escaping (SdkResult<DescribeRaidArraysOutput, DescribeRaidArraysOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeRaidArrays")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeRaidArraysInput, DescribeRaidArraysOutput, DescribeRaidArraysOutputError>(id: "describeRaidArrays")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeRaidArraysInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeRaidArraysInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeRaidArraysInput, DescribeRaidArraysOutput, DescribeRaidArraysOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeRaidArraysInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeRaidArraysInput, DescribeRaidArraysOutput, DescribeRaidArraysOutputError>(xAmzTarget: "OpsWorks_20130218.DescribeRaidArrays"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes Amazon RDS instances.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    ///          <p>This call accepts only one resource-identifying parameter.</p>
    public func describeRdsDbInstances(input: DescribeRdsDbInstancesInput, completion: @escaping (SdkResult<DescribeRdsDbInstancesOutput, DescribeRdsDbInstancesOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeRdsDbInstances")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeRdsDbInstancesInput, DescribeRdsDbInstancesOutput, DescribeRdsDbInstancesOutputError>(id: "describeRdsDbInstances")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeRdsDbInstancesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeRdsDbInstancesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeRdsDbInstancesInput, DescribeRdsDbInstancesOutput, DescribeRdsDbInstancesOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeRdsDbInstancesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeRdsDbInstancesInput, DescribeRdsDbInstancesOutput, DescribeRdsDbInstancesOutputError>(xAmzTarget: "OpsWorks_20130218.DescribeRdsDbInstances"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes AWS OpsWorks Stacks service errors.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    ///          <p>This call accepts only one resource-identifying parameter.</p>
    public func describeServiceErrors(input: DescribeServiceErrorsInput, completion: @escaping (SdkResult<DescribeServiceErrorsOutput, DescribeServiceErrorsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeServiceErrors")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeServiceErrorsInput, DescribeServiceErrorsOutput, DescribeServiceErrorsOutputError>(id: "describeServiceErrors")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeServiceErrorsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeServiceErrorsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeServiceErrorsInput, DescribeServiceErrorsOutput, DescribeServiceErrorsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeServiceErrorsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeServiceErrorsInput, DescribeServiceErrorsOutput, DescribeServiceErrorsOutputError>(xAmzTarget: "OpsWorks_20130218.DescribeServiceErrors"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Requests a description of a stack's provisioning parameters.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func describeStackProvisioningParameters(input: DescribeStackProvisioningParametersInput, completion: @escaping (SdkResult<DescribeStackProvisioningParametersOutput, DescribeStackProvisioningParametersOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeStackProvisioningParameters")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeStackProvisioningParametersInput, DescribeStackProvisioningParametersOutput, DescribeStackProvisioningParametersOutputError>(id: "describeStackProvisioningParameters")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeStackProvisioningParametersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeStackProvisioningParametersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeStackProvisioningParametersInput, DescribeStackProvisioningParametersOutput, DescribeStackProvisioningParametersOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeStackProvisioningParametersInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeStackProvisioningParametersInput, DescribeStackProvisioningParametersOutput, DescribeStackProvisioningParametersOutputError>(xAmzTarget: "OpsWorks_20130218.DescribeStackProvisioningParameters"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes the number of layers and apps in a specified stack, and the number of instances in
    ///       each state, such as <code>running_setup</code> or <code>online</code>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func describeStackSummary(input: DescribeStackSummaryInput, completion: @escaping (SdkResult<DescribeStackSummaryOutput, DescribeStackSummaryOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeStackSummary")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeStackSummaryInput, DescribeStackSummaryOutput, DescribeStackSummaryOutputError>(id: "describeStackSummary")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeStackSummaryInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeStackSummaryInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeStackSummaryInput, DescribeStackSummaryOutput, DescribeStackSummaryOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeStackSummaryInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeStackSummaryInput, DescribeStackSummaryOutput, DescribeStackSummaryOutputError>(xAmzTarget: "OpsWorks_20130218.DescribeStackSummary"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Requests a description of one or more stacks.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func describeStacks(input: DescribeStacksInput, completion: @escaping (SdkResult<DescribeStacksOutput, DescribeStacksOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeStacks")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeStacksInput, DescribeStacksOutput, DescribeStacksOutputError>(id: "describeStacks")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeStacksInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeStacksInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeStacksInput, DescribeStacksOutput, DescribeStacksOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeStacksInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeStacksInput, DescribeStacksOutput, DescribeStacksOutputError>(xAmzTarget: "OpsWorks_20130218.DescribeStacks"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes time-based auto scaling configurations for specified instances.</p>
    ///          <note>
    ///             <p>You must specify at least one of the parameters.</p>
    ///          </note>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func describeTimeBasedAutoScaling(input: DescribeTimeBasedAutoScalingInput, completion: @escaping (SdkResult<DescribeTimeBasedAutoScalingOutput, DescribeTimeBasedAutoScalingOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeTimeBasedAutoScaling")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeTimeBasedAutoScalingInput, DescribeTimeBasedAutoScalingOutput, DescribeTimeBasedAutoScalingOutputError>(id: "describeTimeBasedAutoScaling")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeTimeBasedAutoScalingInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeTimeBasedAutoScalingInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeTimeBasedAutoScalingInput, DescribeTimeBasedAutoScalingOutput, DescribeTimeBasedAutoScalingOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeTimeBasedAutoScalingInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeTimeBasedAutoScalingInput, DescribeTimeBasedAutoScalingOutput, DescribeTimeBasedAutoScalingOutputError>(xAmzTarget: "OpsWorks_20130218.DescribeTimeBasedAutoScaling"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describe specified users.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have an attached policy
    ///       that explicitly grants permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func describeUserProfiles(input: DescribeUserProfilesInput, completion: @escaping (SdkResult<DescribeUserProfilesOutput, DescribeUserProfilesOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeUserProfiles")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeUserProfilesInput, DescribeUserProfilesOutput, DescribeUserProfilesOutputError>(id: "describeUserProfiles")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeUserProfilesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeUserProfilesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeUserProfilesInput, DescribeUserProfilesOutput, DescribeUserProfilesOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeUserProfilesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeUserProfilesInput, DescribeUserProfilesOutput, DescribeUserProfilesOutputError>(xAmzTarget: "OpsWorks_20130218.DescribeUserProfiles"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes an instance's Amazon EBS volumes.</p>
    ///          <note>
    ///             <p>This call accepts only one resource-identifying parameter.</p>
    ///          </note>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
    ///       Manage permissions level for the stack, or an attached policy that explicitly grants
    ///       permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func describeVolumes(input: DescribeVolumesInput, completion: @escaping (SdkResult<DescribeVolumesOutput, DescribeVolumesOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeVolumes")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeVolumesInput, DescribeVolumesOutput, DescribeVolumesOutputError>(id: "describeVolumes")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeVolumesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeVolumesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeVolumesInput, DescribeVolumesOutput, DescribeVolumesOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeVolumesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeVolumesInput, DescribeVolumesOutput, DescribeVolumesOutputError>(xAmzTarget: "OpsWorks_20130218.DescribeVolumes"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Detaches a specified Elastic Load Balancing instance from its layer.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func detachElasticLoadBalancer(input: DetachElasticLoadBalancerInput, completion: @escaping (SdkResult<DetachElasticLoadBalancerOutput, DetachElasticLoadBalancerOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "detachElasticLoadBalancer")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DetachElasticLoadBalancerInput, DetachElasticLoadBalancerOutput, DetachElasticLoadBalancerOutputError>(id: "detachElasticLoadBalancer")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DetachElasticLoadBalancerInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DetachElasticLoadBalancerInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DetachElasticLoadBalancerInput, DetachElasticLoadBalancerOutput, DetachElasticLoadBalancerOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DetachElasticLoadBalancerInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DetachElasticLoadBalancerInput, DetachElasticLoadBalancerOutput, DetachElasticLoadBalancerOutputError>(xAmzTarget: "OpsWorks_20130218.DetachElasticLoadBalancer"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Disassociates an Elastic IP address from its instance. The address remains registered with
    ///       the stack. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource Management</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func disassociateElasticIp(input: DisassociateElasticIpInput, completion: @escaping (SdkResult<DisassociateElasticIpOutput, DisassociateElasticIpOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disassociateElasticIp")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisassociateElasticIpInput, DisassociateElasticIpOutput, DisassociateElasticIpOutputError>(id: "disassociateElasticIp")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisassociateElasticIpInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisassociateElasticIpInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisassociateElasticIpInput, DisassociateElasticIpOutput, DisassociateElasticIpOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DisassociateElasticIpInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DisassociateElasticIpInput, DisassociateElasticIpOutput, DisassociateElasticIpOutputError>(xAmzTarget: "OpsWorks_20130218.DisassociateElasticIp"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets a generated host name for the specified layer, based on the current host name theme.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func getHostnameSuggestion(input: GetHostnameSuggestionInput, completion: @escaping (SdkResult<GetHostnameSuggestionOutput, GetHostnameSuggestionOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getHostnameSuggestion")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetHostnameSuggestionInput, GetHostnameSuggestionOutput, GetHostnameSuggestionOutputError>(id: "getHostnameSuggestion")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetHostnameSuggestionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetHostnameSuggestionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetHostnameSuggestionInput, GetHostnameSuggestionOutput, GetHostnameSuggestionOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: GetHostnameSuggestionInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<GetHostnameSuggestionInput, GetHostnameSuggestionOutput, GetHostnameSuggestionOutputError>(xAmzTarget: "OpsWorks_20130218.GetHostnameSuggestion"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <note>
    ///             <p>This action can be used only with Windows stacks.</p>
    ///          </note>
    ///          <p>Grants RDP access to a Windows instance for a specified time period.</p>
    public func grantAccess(input: GrantAccessInput, completion: @escaping (SdkResult<GrantAccessOutput, GrantAccessOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "grantAccess")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GrantAccessInput, GrantAccessOutput, GrantAccessOutputError>(id: "grantAccess")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GrantAccessInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GrantAccessInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GrantAccessInput, GrantAccessOutput, GrantAccessOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: GrantAccessInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<GrantAccessInput, GrantAccessOutput, GrantAccessOutputError>(xAmzTarget: "OpsWorks_20130218.GrantAccess"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns a list of tags that are applied to the specified stack or layer.</p>
    public func listTags(input: ListTagsInput, completion: @escaping (SdkResult<ListTagsOutput, ListTagsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listTags")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListTagsInput, ListTagsOutput, ListTagsOutputError>(id: "listTags")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListTagsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListTagsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListTagsInput, ListTagsOutput, ListTagsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListTagsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListTagsInput, ListTagsOutput, ListTagsOutputError>(xAmzTarget: "OpsWorks_20130218.ListTags"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Reboots a specified instance. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-starting.html">Starting,
    ///         Stopping, and Rebooting Instances</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func rebootInstance(input: RebootInstanceInput, completion: @escaping (SdkResult<RebootInstanceOutput, RebootInstanceOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "rebootInstance")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RebootInstanceInput, RebootInstanceOutput, RebootInstanceOutputError>(id: "rebootInstance")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RebootInstanceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RebootInstanceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RebootInstanceInput, RebootInstanceOutput, RebootInstanceOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: RebootInstanceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<RebootInstanceInput, RebootInstanceOutput, RebootInstanceOutputError>(xAmzTarget: "OpsWorks_20130218.RebootInstance"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Registers a specified Amazon ECS cluster with a stack. You can register only one
    ///       cluster with a stack. A cluster can be registered with only one stack.
    ///       For more information, see
    ///       <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-ecscluster.html">
    ///       Resource Management</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see
    ///       <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">
    ///       Managing User Permissions</a>.</p>
    public func registerEcsCluster(input: RegisterEcsClusterInput, completion: @escaping (SdkResult<RegisterEcsClusterOutput, RegisterEcsClusterOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "registerEcsCluster")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RegisterEcsClusterInput, RegisterEcsClusterOutput, RegisterEcsClusterOutputError>(id: "registerEcsCluster")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RegisterEcsClusterInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RegisterEcsClusterInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RegisterEcsClusterInput, RegisterEcsClusterOutput, RegisterEcsClusterOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: RegisterEcsClusterInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<RegisterEcsClusterInput, RegisterEcsClusterOutput, RegisterEcsClusterOutputError>(xAmzTarget: "OpsWorks_20130218.RegisterEcsCluster"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Registers an Elastic IP address with a specified stack. An address can be registered with
    ///       only one stack at a time. If the address is already registered, you must first deregister it
    ///       by calling <a>DeregisterElasticIp</a>. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource Management</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func registerElasticIp(input: RegisterElasticIpInput, completion: @escaping (SdkResult<RegisterElasticIpOutput, RegisterElasticIpOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "registerElasticIp")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RegisterElasticIpInput, RegisterElasticIpOutput, RegisterElasticIpOutputError>(id: "registerElasticIp")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RegisterElasticIpInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RegisterElasticIpInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RegisterElasticIpInput, RegisterElasticIpOutput, RegisterElasticIpOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: RegisterElasticIpInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<RegisterElasticIpInput, RegisterElasticIpOutput, RegisterElasticIpOutputError>(xAmzTarget: "OpsWorks_20130218.RegisterElasticIp"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Registers instances that were created outside of AWS OpsWorks Stacks with a specified stack.</p>
    ///          <note>
    ///             <p>We do not recommend using this action to register instances. The complete registration
    ///       operation includes two tasks: installing the AWS OpsWorks Stacks agent on the instance, and registering
    ///       the instance with the stack. <code>RegisterInstance</code> handles only the second step. You
    ///       should instead use the AWS CLI <code>register</code> command, which performs the entire
    ///       registration operation. For more information,
    ///       see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/registered-instances-register.html">
    ///       Registering an Instance with an AWS OpsWorks Stacks Stack</a>.</p>
    ///          </note>
    ///          <p>Registered instances have the same requirements as instances that are created by using the <a>CreateInstance</a> API.
    ///       For example, registered instances must be running a supported Linux-based operating system, and they must have a supported instance
    ///       type. For more information about requirements for instances that you want to register, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/registered-instances-register-registering-preparer.html">
    ///           Preparing the Instance</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func registerInstance(input: RegisterInstanceInput, completion: @escaping (SdkResult<RegisterInstanceOutput, RegisterInstanceOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "registerInstance")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RegisterInstanceInput, RegisterInstanceOutput, RegisterInstanceOutputError>(id: "registerInstance")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RegisterInstanceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RegisterInstanceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RegisterInstanceInput, RegisterInstanceOutput, RegisterInstanceOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: RegisterInstanceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<RegisterInstanceInput, RegisterInstanceOutput, RegisterInstanceOutputError>(xAmzTarget: "OpsWorks_20130218.RegisterInstance"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Registers an Amazon RDS instance with a stack.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func registerRdsDbInstance(input: RegisterRdsDbInstanceInput, completion: @escaping (SdkResult<RegisterRdsDbInstanceOutput, RegisterRdsDbInstanceOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "registerRdsDbInstance")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RegisterRdsDbInstanceInput, RegisterRdsDbInstanceOutput, RegisterRdsDbInstanceOutputError>(id: "registerRdsDbInstance")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RegisterRdsDbInstanceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RegisterRdsDbInstanceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RegisterRdsDbInstanceInput, RegisterRdsDbInstanceOutput, RegisterRdsDbInstanceOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: RegisterRdsDbInstanceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<RegisterRdsDbInstanceInput, RegisterRdsDbInstanceOutput, RegisterRdsDbInstanceOutputError>(xAmzTarget: "OpsWorks_20130218.RegisterRdsDbInstance"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Registers an Amazon EBS volume with a specified stack. A volume can be registered with only one
    ///       stack at a time. If the volume is already registered, you must first deregister it by calling
    ///         <a>DeregisterVolume</a>. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource Management</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func registerVolume(input: RegisterVolumeInput, completion: @escaping (SdkResult<RegisterVolumeOutput, RegisterVolumeOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "registerVolume")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RegisterVolumeInput, RegisterVolumeOutput, RegisterVolumeOutputError>(id: "registerVolume")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RegisterVolumeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RegisterVolumeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RegisterVolumeInput, RegisterVolumeOutput, RegisterVolumeOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: RegisterVolumeInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<RegisterVolumeInput, RegisterVolumeOutput, RegisterVolumeOutputError>(xAmzTarget: "OpsWorks_20130218.RegisterVolume"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Specify the load-based auto scaling configuration for a specified layer. For more
    ///       information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-autoscaling.html">Managing
    ///         Load with Time-based and Load-based Instances</a>.</p>
    ///          <note>
    ///             <p>To use load-based auto scaling, you must create a set of load-based auto scaling instances. Load-based auto scaling operates only on the instances from that set, so you must ensure that you have created enough instances to handle the maximum anticipated load.</p>
    ///          </note>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func setLoadBasedAutoScaling(input: SetLoadBasedAutoScalingInput, completion: @escaping (SdkResult<SetLoadBasedAutoScalingOutput, SetLoadBasedAutoScalingOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "setLoadBasedAutoScaling")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<SetLoadBasedAutoScalingInput, SetLoadBasedAutoScalingOutput, SetLoadBasedAutoScalingOutputError>(id: "setLoadBasedAutoScaling")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: SetLoadBasedAutoScalingInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: SetLoadBasedAutoScalingInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<SetLoadBasedAutoScalingInput, SetLoadBasedAutoScalingOutput, SetLoadBasedAutoScalingOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: SetLoadBasedAutoScalingInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<SetLoadBasedAutoScalingInput, SetLoadBasedAutoScalingOutput, SetLoadBasedAutoScalingOutputError>(xAmzTarget: "OpsWorks_20130218.SetLoadBasedAutoScaling"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Specifies a user's permissions. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingsecurity.html">Security and
    ///         Permissions</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func setPermission(input: SetPermissionInput, completion: @escaping (SdkResult<SetPermissionOutput, SetPermissionOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "setPermission")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<SetPermissionInput, SetPermissionOutput, SetPermissionOutputError>(id: "setPermission")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: SetPermissionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: SetPermissionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<SetPermissionInput, SetPermissionOutput, SetPermissionOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: SetPermissionInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<SetPermissionInput, SetPermissionOutput, SetPermissionOutputError>(xAmzTarget: "OpsWorks_20130218.SetPermission"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Specify the time-based auto scaling configuration for a specified instance. For more
    ///       information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-autoscaling.html">Managing
    ///         Load with Time-based and Load-based Instances</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func setTimeBasedAutoScaling(input: SetTimeBasedAutoScalingInput, completion: @escaping (SdkResult<SetTimeBasedAutoScalingOutput, SetTimeBasedAutoScalingOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "setTimeBasedAutoScaling")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<SetTimeBasedAutoScalingInput, SetTimeBasedAutoScalingOutput, SetTimeBasedAutoScalingOutputError>(id: "setTimeBasedAutoScaling")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: SetTimeBasedAutoScalingInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: SetTimeBasedAutoScalingInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<SetTimeBasedAutoScalingInput, SetTimeBasedAutoScalingOutput, SetTimeBasedAutoScalingOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: SetTimeBasedAutoScalingInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<SetTimeBasedAutoScalingInput, SetTimeBasedAutoScalingOutput, SetTimeBasedAutoScalingOutputError>(xAmzTarget: "OpsWorks_20130218.SetTimeBasedAutoScaling"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Starts a specified instance. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-starting.html">Starting,
    ///         Stopping, and Rebooting Instances</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func startInstance(input: StartInstanceInput, completion: @escaping (SdkResult<StartInstanceOutput, StartInstanceOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "startInstance")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<StartInstanceInput, StartInstanceOutput, StartInstanceOutputError>(id: "startInstance")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: StartInstanceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: StartInstanceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<StartInstanceInput, StartInstanceOutput, StartInstanceOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: StartInstanceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<StartInstanceInput, StartInstanceOutput, StartInstanceOutputError>(xAmzTarget: "OpsWorks_20130218.StartInstance"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Starts a stack's instances.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func startStack(input: StartStackInput, completion: @escaping (SdkResult<StartStackOutput, StartStackOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "startStack")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<StartStackInput, StartStackOutput, StartStackOutputError>(id: "startStack")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: StartStackInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: StartStackInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<StartStackInput, StartStackOutput, StartStackOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: StartStackInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<StartStackInput, StartStackOutput, StartStackOutputError>(xAmzTarget: "OpsWorks_20130218.StartStack"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Stops a specified instance. When you stop a standard instance, the data disappears and must
    ///       be reinstalled when you restart the instance. You can stop an Amazon EBS-backed instance without
    ///       losing data. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-starting.html">Starting,
    ///         Stopping, and Rebooting Instances</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func stopInstance(input: StopInstanceInput, completion: @escaping (SdkResult<StopInstanceOutput, StopInstanceOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "stopInstance")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<StopInstanceInput, StopInstanceOutput, StopInstanceOutputError>(id: "stopInstance")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: StopInstanceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: StopInstanceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<StopInstanceInput, StopInstanceOutput, StopInstanceOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: StopInstanceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<StopInstanceInput, StopInstanceOutput, StopInstanceOutputError>(xAmzTarget: "OpsWorks_20130218.StopInstance"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Stops a specified stack.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func stopStack(input: StopStackInput, completion: @escaping (SdkResult<StopStackOutput, StopStackOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "stopStack")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<StopStackInput, StopStackOutput, StopStackOutputError>(id: "stopStack")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: StopStackInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: StopStackInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<StopStackInput, StopStackOutput, StopStackOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: StopStackInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<StopStackInput, StopStackOutput, StopStackOutputError>(xAmzTarget: "OpsWorks_20130218.StopStack"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Apply cost-allocation tags to a specified stack or layer in AWS OpsWorks Stacks. For more information about how tagging works, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/tagging.html">Tags</a> in the AWS OpsWorks User Guide.</p>
    public func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutput, TagResourceOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "tagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<TagResourceInput, TagResourceOutput, TagResourceOutputError>(id: "tagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<TagResourceInput, TagResourceOutput, TagResourceOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<TagResourceInput, TagResourceOutput, TagResourceOutputError>(xAmzTarget: "OpsWorks_20130218.TagResource"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Unassigns a registered instance from all layers that are using the instance.
    ///           The instance remains in the stack as an unassigned instance, and can be assigned to
    ///           another layer as needed. You cannot use this action with instances that were created
    ///           with AWS OpsWorks Stacks.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must
    ///           have a Manage permissions level for the stack or an attached policy that explicitly
    ///           grants permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func unassignInstance(input: UnassignInstanceInput, completion: @escaping (SdkResult<UnassignInstanceOutput, UnassignInstanceOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "unassignInstance")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UnassignInstanceInput, UnassignInstanceOutput, UnassignInstanceOutputError>(id: "unassignInstance")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UnassignInstanceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UnassignInstanceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UnassignInstanceInput, UnassignInstanceOutput, UnassignInstanceOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UnassignInstanceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UnassignInstanceInput, UnassignInstanceOutput, UnassignInstanceOutputError>(xAmzTarget: "OpsWorks_20130218.UnassignInstance"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Unassigns an assigned Amazon EBS volume. The volume remains registered with the stack. For more
    ///       information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource
    ///         Management</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func unassignVolume(input: UnassignVolumeInput, completion: @escaping (SdkResult<UnassignVolumeOutput, UnassignVolumeOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "unassignVolume")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UnassignVolumeInput, UnassignVolumeOutput, UnassignVolumeOutputError>(id: "unassignVolume")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UnassignVolumeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UnassignVolumeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UnassignVolumeInput, UnassignVolumeOutput, UnassignVolumeOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UnassignVolumeInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UnassignVolumeInput, UnassignVolumeOutput, UnassignVolumeOutputError>(xAmzTarget: "OpsWorks_20130218.UnassignVolume"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Removes tags from a specified stack or layer.</p>
    public func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutput, UntagResourceOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "untagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UntagResourceInput, UntagResourceOutput, UntagResourceOutputError>(id: "untagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UntagResourceInput, UntagResourceOutput, UntagResourceOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UntagResourceInput, UntagResourceOutput, UntagResourceOutputError>(xAmzTarget: "OpsWorks_20130218.UntagResource"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates a specified app.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Deploy or Manage
    ///       permissions level for the stack, or an attached policy that explicitly grants permissions. For
    ///       more information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func updateApp(input: UpdateAppInput, completion: @escaping (SdkResult<UpdateAppOutput, UpdateAppOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateApp")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateAppInput, UpdateAppOutput, UpdateAppOutputError>(id: "updateApp")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateAppInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateAppInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateAppInput, UpdateAppOutput, UpdateAppOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateAppInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UpdateAppInput, UpdateAppOutput, UpdateAppOutputError>(xAmzTarget: "OpsWorks_20130218.UpdateApp"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates a registered Elastic IP address's name. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource Management</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func updateElasticIp(input: UpdateElasticIpInput, completion: @escaping (SdkResult<UpdateElasticIpOutput, UpdateElasticIpOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateElasticIp")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateElasticIpInput, UpdateElasticIpOutput, UpdateElasticIpOutputError>(id: "updateElasticIp")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateElasticIpInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateElasticIpInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateElasticIpInput, UpdateElasticIpOutput, UpdateElasticIpOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateElasticIpInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UpdateElasticIpInput, UpdateElasticIpOutput, UpdateElasticIpOutputError>(xAmzTarget: "OpsWorks_20130218.UpdateElasticIp"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates a specified instance.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func updateInstance(input: UpdateInstanceInput, completion: @escaping (SdkResult<UpdateInstanceOutput, UpdateInstanceOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateInstance")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateInstanceInput, UpdateInstanceOutput, UpdateInstanceOutputError>(id: "updateInstance")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateInstanceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateInstanceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateInstanceInput, UpdateInstanceOutput, UpdateInstanceOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateInstanceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UpdateInstanceInput, UpdateInstanceOutput, UpdateInstanceOutputError>(xAmzTarget: "OpsWorks_20130218.UpdateInstance"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates a specified layer.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func updateLayer(input: UpdateLayerInput, completion: @escaping (SdkResult<UpdateLayerOutput, UpdateLayerOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateLayer")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateLayerInput, UpdateLayerOutput, UpdateLayerOutputError>(id: "updateLayer")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateLayerInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateLayerInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateLayerInput, UpdateLayerOutput, UpdateLayerOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateLayerInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UpdateLayerInput, UpdateLayerOutput, UpdateLayerOutputError>(xAmzTarget: "OpsWorks_20130218.UpdateLayer"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates a user's SSH public key.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have self-management
    ///       enabled or an attached policy that explicitly grants permissions. For more information about user
    ///       permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func updateMyUserProfile(input: UpdateMyUserProfileInput, completion: @escaping (SdkResult<UpdateMyUserProfileOutput, UpdateMyUserProfileOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateMyUserProfile")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateMyUserProfileInput, UpdateMyUserProfileOutput, UpdateMyUserProfileOutputError>(id: "updateMyUserProfile")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateMyUserProfileInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateMyUserProfileInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateMyUserProfileInput, UpdateMyUserProfileOutput, UpdateMyUserProfileOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateMyUserProfileInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UpdateMyUserProfileInput, UpdateMyUserProfileOutput, UpdateMyUserProfileOutputError>(xAmzTarget: "OpsWorks_20130218.UpdateMyUserProfile"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates an Amazon RDS instance.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func updateRdsDbInstance(input: UpdateRdsDbInstanceInput, completion: @escaping (SdkResult<UpdateRdsDbInstanceOutput, UpdateRdsDbInstanceOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateRdsDbInstance")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateRdsDbInstanceInput, UpdateRdsDbInstanceOutput, UpdateRdsDbInstanceOutputError>(id: "updateRdsDbInstance")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateRdsDbInstanceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateRdsDbInstanceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateRdsDbInstanceInput, UpdateRdsDbInstanceOutput, UpdateRdsDbInstanceOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateRdsDbInstanceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UpdateRdsDbInstanceInput, UpdateRdsDbInstanceOutput, UpdateRdsDbInstanceOutputError>(xAmzTarget: "OpsWorks_20130218.UpdateRdsDbInstance"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates a specified stack.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func updateStack(input: UpdateStackInput, completion: @escaping (SdkResult<UpdateStackOutput, UpdateStackOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateStack")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateStackInput, UpdateStackOutput, UpdateStackOutputError>(id: "updateStack")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateStackInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateStackInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateStackInput, UpdateStackOutput, UpdateStackOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateStackInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UpdateStackInput, UpdateStackOutput, UpdateStackOutputError>(xAmzTarget: "OpsWorks_20130218.UpdateStack"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates a specified user profile.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have an attached policy
    ///       that explicitly grants permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func updateUserProfile(input: UpdateUserProfileInput, completion: @escaping (SdkResult<UpdateUserProfileOutput, UpdateUserProfileOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateUserProfile")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateUserProfileInput, UpdateUserProfileOutput, UpdateUserProfileOutputError>(id: "updateUserProfile")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateUserProfileInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateUserProfileInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateUserProfileInput, UpdateUserProfileOutput, UpdateUserProfileOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateUserProfileInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UpdateUserProfileInput, UpdateUserProfileOutput, UpdateUserProfileOutputError>(xAmzTarget: "OpsWorks_20130218.UpdateUserProfile"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates an Amazon EBS volume's name or mount point. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource Management</a>.</p>
    ///          <p>
    ///             <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
    ///       level for the stack, or an attached policy that explicitly grants permissions. For more
    ///       information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
    ///         Permissions</a>.</p>
    public func updateVolume(input: UpdateVolumeInput, completion: @escaping (SdkResult<UpdateVolumeOutput, UpdateVolumeOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateVolume")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "opsworks.\(config.region).amazonaws.com")
                      .withSigningName(value: "opsworks")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateVolumeInput, UpdateVolumeOutput, UpdateVolumeOutputError>(id: "updateVolume")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateVolumeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateVolumeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateVolumeInput, UpdateVolumeOutput, UpdateVolumeOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateVolumeInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UpdateVolumeInput, UpdateVolumeOutput, UpdateVolumeOutputError>(xAmzTarget: "OpsWorks_20130218.UpdateVolume"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
