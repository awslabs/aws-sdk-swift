// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CloneStackInputBody: Equatable {
    public let sourceStackId: String?
    public let name: String?
    public let region: String?
    public let vpcId: String?
    public let attributes: [String:String]?
    public let serviceRoleArn: String?
    public let defaultInstanceProfileArn: String?
    public let defaultOs: String?
    public let hostnameTheme: String?
    public let defaultAvailabilityZone: String?
    public let defaultSubnetId: String?
    public let customJson: String?
    public let configurationManager: StackConfigurationManager?
    public let chefConfiguration: ChefConfiguration?
    public let useCustomCookbooks: Bool?
    public let useOpsworksSecurityGroups: Bool?
    public let customCookbooksSource: Source?
    public let defaultSshKeyName: String?
    public let clonePermissions: Bool?
    public let cloneAppIds: [String]?
    public let defaultRootDeviceType: RootDeviceType?
    public let agentVersion: String?
}

extension CloneStackInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case agentVersion = "AgentVersion"
        case attributes = "Attributes"
        case chefConfiguration = "ChefConfiguration"
        case cloneAppIds = "CloneAppIds"
        case clonePermissions = "ClonePermissions"
        case configurationManager = "ConfigurationManager"
        case customCookbooksSource = "CustomCookbooksSource"
        case customJson = "CustomJson"
        case defaultAvailabilityZone = "DefaultAvailabilityZone"
        case defaultInstanceProfileArn = "DefaultInstanceProfileArn"
        case defaultOs = "DefaultOs"
        case defaultRootDeviceType = "DefaultRootDeviceType"
        case defaultSshKeyName = "DefaultSshKeyName"
        case defaultSubnetId = "DefaultSubnetId"
        case hostnameTheme = "HostnameTheme"
        case name = "Name"
        case region = "Region"
        case serviceRoleArn = "ServiceRoleArn"
        case sourceStackId = "SourceStackId"
        case useCustomCookbooks = "UseCustomCookbooks"
        case useOpsworksSecurityGroups = "UseOpsworksSecurityGroups"
        case vpcId = "VpcId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceStackIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceStackId)
        sourceStackId = sourceStackIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let regionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .region)
        region = regionDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let attributesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .attributes)
        var attributesDecoded0: [String:String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [String:String]()
            for (key0, string0) in attributesContainer {
                attributesDecoded0?[key0] = string0
            }
        }
        attributes = attributesDecoded0
        let serviceRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRoleArn)
        serviceRoleArn = serviceRoleArnDecoded
        let defaultInstanceProfileArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultInstanceProfileArn)
        defaultInstanceProfileArn = defaultInstanceProfileArnDecoded
        let defaultOsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultOs)
        defaultOs = defaultOsDecoded
        let hostnameThemeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hostnameTheme)
        hostnameTheme = hostnameThemeDecoded
        let defaultAvailabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultAvailabilityZone)
        defaultAvailabilityZone = defaultAvailabilityZoneDecoded
        let defaultSubnetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultSubnetId)
        defaultSubnetId = defaultSubnetIdDecoded
        let customJsonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customJson)
        customJson = customJsonDecoded
        let configurationManagerDecoded = try containerValues.decodeIfPresent(StackConfigurationManager.self, forKey: .configurationManager)
        configurationManager = configurationManagerDecoded
        let chefConfigurationDecoded = try containerValues.decodeIfPresent(ChefConfiguration.self, forKey: .chefConfiguration)
        chefConfiguration = chefConfigurationDecoded
        let useCustomCookbooksDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .useCustomCookbooks)
        useCustomCookbooks = useCustomCookbooksDecoded
        let useOpsworksSecurityGroupsDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .useOpsworksSecurityGroups)
        useOpsworksSecurityGroups = useOpsworksSecurityGroupsDecoded
        let customCookbooksSourceDecoded = try containerValues.decodeIfPresent(Source.self, forKey: .customCookbooksSource)
        customCookbooksSource = customCookbooksSourceDecoded
        let defaultSshKeyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultSshKeyName)
        defaultSshKeyName = defaultSshKeyNameDecoded
        let clonePermissionsDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .clonePermissions)
        clonePermissions = clonePermissionsDecoded
        let cloneAppIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .cloneAppIds)
        var cloneAppIdsDecoded0:[String]? = nil
        if let cloneAppIdsContainer = cloneAppIdsContainer {
            cloneAppIdsDecoded0 = [String]()
            for string0 in cloneAppIdsContainer {
                cloneAppIdsDecoded0?.append(string0)
            }
        }
        cloneAppIds = cloneAppIdsDecoded0
        let defaultRootDeviceTypeDecoded = try containerValues.decodeIfPresent(RootDeviceType.self, forKey: .defaultRootDeviceType)
        defaultRootDeviceType = defaultRootDeviceTypeDecoded
        let agentVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .agentVersion)
        agentVersion = agentVersionDecoded
    }
}
