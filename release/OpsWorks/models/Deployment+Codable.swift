// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Deployment: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case appId = "AppId"
        case command = "Command"
        case comment = "Comment"
        case completedAt = "CompletedAt"
        case createdAt = "CreatedAt"
        case customJson = "CustomJson"
        case deploymentId = "DeploymentId"
        case duration = "Duration"
        case iamUserArn = "IamUserArn"
        case instanceIds = "InstanceIds"
        case stackId = "StackId"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appId = appId {
            try encodeContainer.encode(appId, forKey: .appId)
        }
        if let command = command {
            try encodeContainer.encode(command, forKey: .command)
        }
        if let comment = comment {
            try encodeContainer.encode(comment, forKey: .comment)
        }
        if let completedAt = completedAt {
            try encodeContainer.encode(completedAt, forKey: .completedAt)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt, forKey: .createdAt)
        }
        if let customJson = customJson {
            try encodeContainer.encode(customJson, forKey: .customJson)
        }
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let duration = duration {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let iamUserArn = iamUserArn {
            try encodeContainer.encode(iamUserArn, forKey: .iamUserArn)
        }
        if let instanceIds = instanceIds {
            var instanceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceIds)
            for strings0 in instanceIds {
                try instanceIdsContainer.encode(strings0)
            }
        }
        if let stackId = stackId {
            try encodeContainer.encode(stackId, forKey: .stackId)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let appIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .appId)
        appId = appIdDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let completedAtDecoded = try containerValues.decodeIfPresent(String.self, forKey: .completedAt)
        completedAt = completedAtDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .duration)
        duration = durationDecoded
        let iamUserArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iamUserArn)
        iamUserArn = iamUserArnDecoded
        let commentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .comment)
        comment = commentDecoded
        let commandDecoded = try containerValues.decodeIfPresent(DeploymentCommand.self, forKey: .command)
        command = commandDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let customJsonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customJson)
        customJson = customJsonDecoded
        let instanceIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .instanceIds)
        var instanceIdsDecoded0:[String]? = nil
        if let instanceIdsContainer = instanceIdsContainer {
            instanceIdsDecoded0 = [String]()
            for string0 in instanceIdsContainer {
                instanceIdsDecoded0?.append(string0)
            }
        }
        instanceIds = instanceIdsDecoded0
    }
}
