// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BlockDeviceMapping: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deviceName = "DeviceName"
        case ebs = "Ebs"
        case noDevice = "NoDevice"
        case virtualName = "VirtualName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deviceName = deviceName {
            try encodeContainer.encode(deviceName, forKey: .deviceName)
        }
        if let ebs = ebs {
            try encodeContainer.encode(ebs, forKey: .ebs)
        }
        if let noDevice = noDevice {
            try encodeContainer.encode(noDevice, forKey: .noDevice)
        }
        if let virtualName = virtualName {
            try encodeContainer.encode(virtualName, forKey: .virtualName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deviceName)
        deviceName = deviceNameDecoded
        let noDeviceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .noDevice)
        noDevice = noDeviceDecoded
        let virtualNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .virtualName)
        virtualName = virtualNameDecoded
        let ebsDecoded = try containerValues.decodeIfPresent(EbsBlockDevice.self, forKey: .ebs)
        ebs = ebsDecoded
    }
}
