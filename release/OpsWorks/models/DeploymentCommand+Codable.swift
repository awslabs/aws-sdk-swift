// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DeploymentCommand: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case args = "Args"
        case name = "Name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let args = args {
            var argsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .args)
            for (dictKey0, deploymentcommandargs0) in args {
                try argsContainer.encode(deploymentcommandargs0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(DeploymentCommandName.self, forKey: .name)
        name = nameDecoded
        let argsContainer = try containerValues.decodeIfPresent([String:[String]?].self, forKey: .args)
        var argsDecoded0: [String:[String]?]? = nil
        if let argsContainer = argsContainer {
            argsDecoded0 = [String:[String]?]()
            for (key0, strings0) in argsContainer {
                var strings0Decoded0 = [String]()
                if let strings0 = strings0 {
                    for string1 in strings0 {
                        strings0Decoded0.append(string1)
                    }
                }
                argsDecoded0?[key0] = strings0Decoded0
            }
        }
        args = argsDecoded0
    }
}
