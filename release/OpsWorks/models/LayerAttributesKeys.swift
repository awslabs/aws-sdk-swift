// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum LayerAttributesKeys {
    case bundlerversion
    case ecsclusterarn
    case enablehaproxystats
    case gangliapassword
    case gangliaurl
    case gangliauser
    case haproxyhealthcheckmethod
    case haproxyhealthcheckurl
    case haproxystatspassword
    case haproxystatsurl
    case haproxystatsuser
    case javaappserver
    case javaappserverversion
    case jvm
    case jvmoptions
    case jvmversion
    case managebundler
    case memcachedmemory
    case mysqlrootpassword
    case mysqlrootpasswordubiquitous
    case nodejsversion
    case passengerversion
    case railsstack
    case rubyversion
    case rubygemsversion
    case sdkUnknown(String)
}

extension LayerAttributesKeys : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [LayerAttributesKeys] {
        return [
            .bundlerversion,
            .ecsclusterarn,
            .enablehaproxystats,
            .gangliapassword,
            .gangliaurl,
            .gangliauser,
            .haproxyhealthcheckmethod,
            .haproxyhealthcheckurl,
            .haproxystatspassword,
            .haproxystatsurl,
            .haproxystatsuser,
            .javaappserver,
            .javaappserverversion,
            .jvm,
            .jvmoptions,
            .jvmversion,
            .managebundler,
            .memcachedmemory,
            .mysqlrootpassword,
            .mysqlrootpasswordubiquitous,
            .nodejsversion,
            .passengerversion,
            .railsstack,
            .rubyversion,
            .rubygemsversion,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .bundlerversion: return "BundlerVersion"
        case .ecsclusterarn: return "EcsClusterArn"
        case .enablehaproxystats: return "EnableHaproxyStats"
        case .gangliapassword: return "GangliaPassword"
        case .gangliaurl: return "GangliaUrl"
        case .gangliauser: return "GangliaUser"
        case .haproxyhealthcheckmethod: return "HaproxyHealthCheckMethod"
        case .haproxyhealthcheckurl: return "HaproxyHealthCheckUrl"
        case .haproxystatspassword: return "HaproxyStatsPassword"
        case .haproxystatsurl: return "HaproxyStatsUrl"
        case .haproxystatsuser: return "HaproxyStatsUser"
        case .javaappserver: return "JavaAppServer"
        case .javaappserverversion: return "JavaAppServerVersion"
        case .jvm: return "Jvm"
        case .jvmoptions: return "JvmOptions"
        case .jvmversion: return "JvmVersion"
        case .managebundler: return "ManageBundler"
        case .memcachedmemory: return "MemcachedMemory"
        case .mysqlrootpassword: return "MysqlRootPassword"
        case .mysqlrootpasswordubiquitous: return "MysqlRootPasswordUbiquitous"
        case .nodejsversion: return "NodejsVersion"
        case .passengerversion: return "PassengerVersion"
        case .railsstack: return "RailsStack"
        case .rubyversion: return "RubyVersion"
        case .rubygemsversion: return "RubygemsVersion"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = LayerAttributesKeys(rawValue: rawValue) ?? LayerAttributesKeys.sdkUnknown(rawValue)
    }
}
