// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateAppInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case appSource = "AppSource"
        case attributes = "Attributes"
        case dataSources = "DataSources"
        case description = "Description"
        case domains = "Domains"
        case enableSsl = "EnableSsl"
        case environment = "Environment"
        case name = "Name"
        case shortname = "Shortname"
        case sslConfiguration = "SslConfiguration"
        case stackId = "StackId"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appSource = appSource {
            try encodeContainer.encode(appSource, forKey: .appSource)
        }
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .attributes)
            for (dictKey0, appattributes0) in attributes {
                try attributesContainer.encode(appattributes0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let dataSources = dataSources {
            var dataSourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataSources)
            for datasources0 in dataSources {
                try dataSourcesContainer.encode(datasources0)
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let domains = domains {
            var domainsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domains)
            for strings0 in domains {
                try domainsContainer.encode(strings0)
            }
        }
        if let enableSsl = enableSsl {
            try encodeContainer.encode(enableSsl, forKey: .enableSsl)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environment)
            for environmentvariables0 in environment {
                try environmentContainer.encode(environmentvariables0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let shortname = shortname {
            try encodeContainer.encode(shortname, forKey: .shortname)
        }
        if let sslConfiguration = sslConfiguration {
            try encodeContainer.encode(sslConfiguration, forKey: .sslConfiguration)
        }
        if let stackId = stackId {
            try encodeContainer.encode(stackId, forKey: .stackId)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}
