// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateLayerInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributes = "Attributes"
        case autoAssignElasticIps = "AutoAssignElasticIps"
        case autoAssignPublicIps = "AutoAssignPublicIps"
        case cloudWatchLogsConfiguration = "CloudWatchLogsConfiguration"
        case customInstanceProfileArn = "CustomInstanceProfileArn"
        case customJson = "CustomJson"
        case customRecipes = "CustomRecipes"
        case customSecurityGroupIds = "CustomSecurityGroupIds"
        case enableAutoHealing = "EnableAutoHealing"
        case installUpdatesOnBoot = "InstallUpdatesOnBoot"
        case lifecycleEventConfiguration = "LifecycleEventConfiguration"
        case name = "Name"
        case packages = "Packages"
        case shortname = "Shortname"
        case stackId = "StackId"
        case type = "Type"
        case useEbsOptimizedInstances = "UseEbsOptimizedInstances"
        case volumeConfigurations = "VolumeConfigurations"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .attributes)
            for (dictKey0, layerattributes0) in attributes {
                try attributesContainer.encode(layerattributes0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let autoAssignElasticIps = autoAssignElasticIps {
            try encodeContainer.encode(autoAssignElasticIps, forKey: .autoAssignElasticIps)
        }
        if let autoAssignPublicIps = autoAssignPublicIps {
            try encodeContainer.encode(autoAssignPublicIps, forKey: .autoAssignPublicIps)
        }
        if let cloudWatchLogsConfiguration = cloudWatchLogsConfiguration {
            try encodeContainer.encode(cloudWatchLogsConfiguration, forKey: .cloudWatchLogsConfiguration)
        }
        if let customInstanceProfileArn = customInstanceProfileArn {
            try encodeContainer.encode(customInstanceProfileArn, forKey: .customInstanceProfileArn)
        }
        if let customJson = customJson {
            try encodeContainer.encode(customJson, forKey: .customJson)
        }
        if let customRecipes = customRecipes {
            try encodeContainer.encode(customRecipes, forKey: .customRecipes)
        }
        if let customSecurityGroupIds = customSecurityGroupIds {
            var customSecurityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .customSecurityGroupIds)
            for strings0 in customSecurityGroupIds {
                try customSecurityGroupIdsContainer.encode(strings0)
            }
        }
        if let enableAutoHealing = enableAutoHealing {
            try encodeContainer.encode(enableAutoHealing, forKey: .enableAutoHealing)
        }
        if let installUpdatesOnBoot = installUpdatesOnBoot {
            try encodeContainer.encode(installUpdatesOnBoot, forKey: .installUpdatesOnBoot)
        }
        if let lifecycleEventConfiguration = lifecycleEventConfiguration {
            try encodeContainer.encode(lifecycleEventConfiguration, forKey: .lifecycleEventConfiguration)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let packages = packages {
            var packagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .packages)
            for strings0 in packages {
                try packagesContainer.encode(strings0)
            }
        }
        if let shortname = shortname {
            try encodeContainer.encode(shortname, forKey: .shortname)
        }
        if let stackId = stackId {
            try encodeContainer.encode(stackId, forKey: .stackId)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let useEbsOptimizedInstances = useEbsOptimizedInstances {
            try encodeContainer.encode(useEbsOptimizedInstances, forKey: .useEbsOptimizedInstances)
        }
        if let volumeConfigurations = volumeConfigurations {
            var volumeConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumeConfigurations)
            for volumeconfigurations0 in volumeConfigurations {
                try volumeConfigurationsContainer.encode(volumeconfigurations0)
            }
        }
    }
}
