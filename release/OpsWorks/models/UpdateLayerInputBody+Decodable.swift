// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateLayerInputBody: Equatable {
    public let layerId: String?
    public let name: String?
    public let shortname: String?
    public let attributes: [String:String]?
    public let cloudWatchLogsConfiguration: CloudWatchLogsConfiguration?
    public let customInstanceProfileArn: String?
    public let customJson: String?
    public let customSecurityGroupIds: [String]?
    public let packages: [String]?
    public let volumeConfigurations: [VolumeConfiguration]?
    public let enableAutoHealing: Bool?
    public let autoAssignElasticIps: Bool?
    public let autoAssignPublicIps: Bool?
    public let customRecipes: Recipes?
    public let installUpdatesOnBoot: Bool?
    public let useEbsOptimizedInstances: Bool?
    public let lifecycleEventConfiguration: LifecycleEventConfiguration?
}

extension UpdateLayerInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attributes = "Attributes"
        case autoAssignElasticIps = "AutoAssignElasticIps"
        case autoAssignPublicIps = "AutoAssignPublicIps"
        case cloudWatchLogsConfiguration = "CloudWatchLogsConfiguration"
        case customInstanceProfileArn = "CustomInstanceProfileArn"
        case customJson = "CustomJson"
        case customRecipes = "CustomRecipes"
        case customSecurityGroupIds = "CustomSecurityGroupIds"
        case enableAutoHealing = "EnableAutoHealing"
        case installUpdatesOnBoot = "InstallUpdatesOnBoot"
        case layerId = "LayerId"
        case lifecycleEventConfiguration = "LifecycleEventConfiguration"
        case name = "Name"
        case packages = "Packages"
        case shortname = "Shortname"
        case useEbsOptimizedInstances = "UseEbsOptimizedInstances"
        case volumeConfigurations = "VolumeConfigurations"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let layerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .layerId)
        layerId = layerIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let shortnameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .shortname)
        shortname = shortnameDecoded
        let attributesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .attributes)
        var attributesDecoded0: [String:String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [String:String]()
            for (key0, string0) in attributesContainer {
                attributesDecoded0?[key0] = string0
            }
        }
        attributes = attributesDecoded0
        let cloudWatchLogsConfigurationDecoded = try containerValues.decodeIfPresent(CloudWatchLogsConfiguration.self, forKey: .cloudWatchLogsConfiguration)
        cloudWatchLogsConfiguration = cloudWatchLogsConfigurationDecoded
        let customInstanceProfileArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customInstanceProfileArn)
        customInstanceProfileArn = customInstanceProfileArnDecoded
        let customJsonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customJson)
        customJson = customJsonDecoded
        let customSecurityGroupIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .customSecurityGroupIds)
        var customSecurityGroupIdsDecoded0:[String]? = nil
        if let customSecurityGroupIdsContainer = customSecurityGroupIdsContainer {
            customSecurityGroupIdsDecoded0 = [String]()
            for string0 in customSecurityGroupIdsContainer {
                customSecurityGroupIdsDecoded0?.append(string0)
            }
        }
        customSecurityGroupIds = customSecurityGroupIdsDecoded0
        let packagesContainer = try containerValues.decodeIfPresent([String].self, forKey: .packages)
        var packagesDecoded0:[String]? = nil
        if let packagesContainer = packagesContainer {
            packagesDecoded0 = [String]()
            for string0 in packagesContainer {
                packagesDecoded0?.append(string0)
            }
        }
        packages = packagesDecoded0
        let volumeConfigurationsContainer = try containerValues.decodeIfPresent([VolumeConfiguration].self, forKey: .volumeConfigurations)
        var volumeConfigurationsDecoded0:[VolumeConfiguration]? = nil
        if let volumeConfigurationsContainer = volumeConfigurationsContainer {
            volumeConfigurationsDecoded0 = [VolumeConfiguration]()
            for structure0 in volumeConfigurationsContainer {
                volumeConfigurationsDecoded0?.append(structure0)
            }
        }
        volumeConfigurations = volumeConfigurationsDecoded0
        let enableAutoHealingDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enableAutoHealing)
        enableAutoHealing = enableAutoHealingDecoded
        let autoAssignElasticIpsDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .autoAssignElasticIps)
        autoAssignElasticIps = autoAssignElasticIpsDecoded
        let autoAssignPublicIpsDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .autoAssignPublicIps)
        autoAssignPublicIps = autoAssignPublicIpsDecoded
        let customRecipesDecoded = try containerValues.decodeIfPresent(Recipes.self, forKey: .customRecipes)
        customRecipes = customRecipesDecoded
        let installUpdatesOnBootDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .installUpdatesOnBoot)
        installUpdatesOnBoot = installUpdatesOnBootDecoded
        let useEbsOptimizedInstancesDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .useEbsOptimizedInstances)
        useEbsOptimizedInstances = useEbsOptimizedInstancesDecoded
        let lifecycleEventConfigurationDecoded = try containerValues.decodeIfPresent(LifecycleEventConfiguration.self, forKey: .lifecycleEventConfiguration)
        lifecycleEventConfiguration = lifecycleEventConfigurationDecoded
    }
}
