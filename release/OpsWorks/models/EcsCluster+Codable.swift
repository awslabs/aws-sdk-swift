// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EcsCluster: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ecsClusterArn = "EcsClusterArn"
        case ecsClusterName = "EcsClusterName"
        case registeredAt = "RegisteredAt"
        case stackId = "StackId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ecsClusterArn = ecsClusterArn {
            try encodeContainer.encode(ecsClusterArn, forKey: .ecsClusterArn)
        }
        if let ecsClusterName = ecsClusterName {
            try encodeContainer.encode(ecsClusterName, forKey: .ecsClusterName)
        }
        if let registeredAt = registeredAt {
            try encodeContainer.encode(registeredAt, forKey: .registeredAt)
        }
        if let stackId = stackId {
            try encodeContainer.encode(stackId, forKey: .stackId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ecsClusterArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ecsClusterArn)
        ecsClusterArn = ecsClusterArnDecoded
        let ecsClusterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ecsClusterName)
        ecsClusterName = ecsClusterNameDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let registeredAtDecoded = try containerValues.decodeIfPresent(String.self, forKey: .registeredAt)
        registeredAt = registeredAtDecoded
    }
}
