// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes how many instances a stack has for each status.</p>
public struct InstancesCount: Equatable {
    /// <p>The number of instances in the Assigning state.</p>
    public let assigning: Int?
    /// <p>The number of instances with <code>booting</code> status.</p>
    public let booting: Int?
    /// <p>The number of instances with <code>connection_lost</code> status.</p>
    public let connectionLost: Int?
    /// <p>The number of instances in the Deregistering state.</p>
    public let deregistering: Int?
    /// <p>The number of instances with <code>online</code> status.</p>
    public let online: Int?
    /// <p>The number of instances with <code>pending</code> status.</p>
    public let pending: Int?
    /// <p>The number of instances with <code>rebooting</code> status.</p>
    public let rebooting: Int?
    /// <p>The number of instances in the Registered state.</p>
    public let registered: Int?
    /// <p>The number of instances in the Registering state.</p>
    public let registering: Int?
    /// <p>The number of instances with <code>requested</code> status.</p>
    public let requested: Int?
    /// <p>The number of instances with <code>running_setup</code> status.</p>
    public let runningSetup: Int?
    /// <p>The number of instances with <code>setup_failed</code> status.</p>
    public let setupFailed: Int?
    /// <p>The number of instances with <code>shutting_down</code> status.</p>
    public let shuttingDown: Int?
    /// <p>The number of instances with <code>start_failed</code> status.</p>
    public let startFailed: Int?
    /// <p>The number of instances with <code>stop_failed</code> status.</p>
    public let stopFailed: Int?
    /// <p>The number of instances with <code>stopped</code> status.</p>
    public let stopped: Int?
    /// <p>The number of instances with <code>stopping</code> status.</p>
    public let stopping: Int?
    /// <p>The number of instances with <code>terminated</code> status.</p>
    public let terminated: Int?
    /// <p>The number of instances with <code>terminating</code> status.</p>
    public let terminating: Int?
    /// <p>The number of instances in the Unassigning state.</p>
    public let unassigning: Int?

    public init (
        assigning: Int? = nil,
        booting: Int? = nil,
        connectionLost: Int? = nil,
        deregistering: Int? = nil,
        online: Int? = nil,
        pending: Int? = nil,
        rebooting: Int? = nil,
        registered: Int? = nil,
        registering: Int? = nil,
        requested: Int? = nil,
        runningSetup: Int? = nil,
        setupFailed: Int? = nil,
        shuttingDown: Int? = nil,
        startFailed: Int? = nil,
        stopFailed: Int? = nil,
        stopped: Int? = nil,
        stopping: Int? = nil,
        terminated: Int? = nil,
        terminating: Int? = nil,
        unassigning: Int? = nil
    )
    {
        self.assigning = assigning
        self.booting = booting
        self.connectionLost = connectionLost
        self.deregistering = deregistering
        self.online = online
        self.pending = pending
        self.rebooting = rebooting
        self.registered = registered
        self.registering = registering
        self.requested = requested
        self.runningSetup = runningSetup
        self.setupFailed = setupFailed
        self.shuttingDown = shuttingDown
        self.startFailed = startFailed
        self.stopFailed = stopFailed
        self.stopped = stopped
        self.stopping = stopping
        self.terminated = terminated
        self.terminating = terminating
        self.unassigning = unassigning
    }
}
