// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SelfUserProfile: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case iamUserArn = "IamUserArn"
        case name = "Name"
        case sshPublicKey = "SshPublicKey"
        case sshUsername = "SshUsername"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let iamUserArn = iamUserArn {
            try encodeContainer.encode(iamUserArn, forKey: .iamUserArn)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let sshPublicKey = sshPublicKey {
            try encodeContainer.encode(sshPublicKey, forKey: .sshPublicKey)
        }
        if let sshUsername = sshUsername {
            try encodeContainer.encode(sshUsername, forKey: .sshUsername)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let iamUserArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iamUserArn)
        iamUserArn = iamUserArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let sshUsernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sshUsername)
        sshUsername = sshUsernameDecoded
        let sshPublicKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sshPublicKey)
        sshPublicKey = sshPublicKeyDecoded
    }
}
