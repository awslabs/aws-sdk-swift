// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TemporaryCredential: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instanceId = "InstanceId"
        case password = "Password"
        case username = "Username"
        case validForInMinutes = "ValidForInMinutes"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let password = password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
        if let validForInMinutes = validForInMinutes {
            try encodeContainer.encode(validForInMinutes, forKey: .validForInMinutes)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .username)
        username = usernameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .password)
        password = passwordDecoded
        let validForInMinutesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .validForInMinutes)
        validForInMinutes = validForInMinutesDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
    }
}
