// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudWatchLogsConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case enabled = "Enabled"
        case logStreams = "LogStreams"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let logStreams = logStreams {
            var logStreamsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logStreams)
            for cloudwatchlogslogstreams0 in logStreams {
                try logStreamsContainer.encode(cloudwatchlogslogstreams0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let logStreamsContainer = try containerValues.decodeIfPresent([CloudWatchLogsLogStream].self, forKey: .logStreams)
        var logStreamsDecoded0:[CloudWatchLogsLogStream]? = nil
        if let logStreamsContainer = logStreamsContainer {
            logStreamsDecoded0 = [CloudWatchLogsLogStream]()
            for structure0 in logStreamsContainer {
                logStreamsDecoded0?.append(structure0)
            }
        }
        logStreams = logStreamsDecoded0
    }
}
