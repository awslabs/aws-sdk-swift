// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StackSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case appsCount = "AppsCount"
        case arn = "Arn"
        case instancesCount = "InstancesCount"
        case layersCount = "LayersCount"
        case name = "Name"
        case stackId = "StackId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appsCount = appsCount {
            try encodeContainer.encode(appsCount, forKey: .appsCount)
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let instancesCount = instancesCount {
            try encodeContainer.encode(instancesCount, forKey: .instancesCount)
        }
        if let layersCount = layersCount {
            try encodeContainer.encode(layersCount, forKey: .layersCount)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let stackId = stackId {
            try encodeContainer.encode(stackId, forKey: .stackId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let layersCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .layersCount)
        layersCount = layersCountDecoded
        let appsCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .appsCount)
        appsCount = appsCountDecoded
        let instancesCountDecoded = try containerValues.decodeIfPresent(InstancesCount.self, forKey: .instancesCount)
        instancesCount = instancesCountDecoded
    }
}
