// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Layer: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case attributes = "Attributes"
        case autoAssignElasticIps = "AutoAssignElasticIps"
        case autoAssignPublicIps = "AutoAssignPublicIps"
        case cloudWatchLogsConfiguration = "CloudWatchLogsConfiguration"
        case createdAt = "CreatedAt"
        case customInstanceProfileArn = "CustomInstanceProfileArn"
        case customJson = "CustomJson"
        case customRecipes = "CustomRecipes"
        case customSecurityGroupIds = "CustomSecurityGroupIds"
        case defaultRecipes = "DefaultRecipes"
        case defaultSecurityGroupNames = "DefaultSecurityGroupNames"
        case enableAutoHealing = "EnableAutoHealing"
        case installUpdatesOnBoot = "InstallUpdatesOnBoot"
        case layerId = "LayerId"
        case lifecycleEventConfiguration = "LifecycleEventConfiguration"
        case name = "Name"
        case packages = "Packages"
        case shortname = "Shortname"
        case stackId = "StackId"
        case type = "Type"
        case useEbsOptimizedInstances = "UseEbsOptimizedInstances"
        case volumeConfigurations = "VolumeConfigurations"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .attributes)
            for (dictKey0, layerattributes0) in attributes {
                try attributesContainer.encode(layerattributes0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let autoAssignElasticIps = autoAssignElasticIps {
            try encodeContainer.encode(autoAssignElasticIps, forKey: .autoAssignElasticIps)
        }
        if let autoAssignPublicIps = autoAssignPublicIps {
            try encodeContainer.encode(autoAssignPublicIps, forKey: .autoAssignPublicIps)
        }
        if let cloudWatchLogsConfiguration = cloudWatchLogsConfiguration {
            try encodeContainer.encode(cloudWatchLogsConfiguration, forKey: .cloudWatchLogsConfiguration)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt, forKey: .createdAt)
        }
        if let customInstanceProfileArn = customInstanceProfileArn {
            try encodeContainer.encode(customInstanceProfileArn, forKey: .customInstanceProfileArn)
        }
        if let customJson = customJson {
            try encodeContainer.encode(customJson, forKey: .customJson)
        }
        if let customRecipes = customRecipes {
            try encodeContainer.encode(customRecipes, forKey: .customRecipes)
        }
        if let customSecurityGroupIds = customSecurityGroupIds {
            var customSecurityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .customSecurityGroupIds)
            for strings0 in customSecurityGroupIds {
                try customSecurityGroupIdsContainer.encode(strings0)
            }
        }
        if let defaultRecipes = defaultRecipes {
            try encodeContainer.encode(defaultRecipes, forKey: .defaultRecipes)
        }
        if let defaultSecurityGroupNames = defaultSecurityGroupNames {
            var defaultSecurityGroupNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .defaultSecurityGroupNames)
            for strings0 in defaultSecurityGroupNames {
                try defaultSecurityGroupNamesContainer.encode(strings0)
            }
        }
        if let enableAutoHealing = enableAutoHealing {
            try encodeContainer.encode(enableAutoHealing, forKey: .enableAutoHealing)
        }
        if let installUpdatesOnBoot = installUpdatesOnBoot {
            try encodeContainer.encode(installUpdatesOnBoot, forKey: .installUpdatesOnBoot)
        }
        if let layerId = layerId {
            try encodeContainer.encode(layerId, forKey: .layerId)
        }
        if let lifecycleEventConfiguration = lifecycleEventConfiguration {
            try encodeContainer.encode(lifecycleEventConfiguration, forKey: .lifecycleEventConfiguration)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let packages = packages {
            var packagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .packages)
            for strings0 in packages {
                try packagesContainer.encode(strings0)
            }
        }
        if let shortname = shortname {
            try encodeContainer.encode(shortname, forKey: .shortname)
        }
        if let stackId = stackId {
            try encodeContainer.encode(stackId, forKey: .stackId)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let useEbsOptimizedInstances = useEbsOptimizedInstances {
            try encodeContainer.encode(useEbsOptimizedInstances, forKey: .useEbsOptimizedInstances)
        }
        if let volumeConfigurations = volumeConfigurations {
            var volumeConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumeConfigurations)
            for volumeconfigurations0 in volumeConfigurations {
                try volumeConfigurationsContainer.encode(volumeconfigurations0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let layerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .layerId)
        layerId = layerIdDecoded
        let typeDecoded = try containerValues.decodeIfPresent(LayerType.self, forKey: .type)
        type = typeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let shortnameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .shortname)
        shortname = shortnameDecoded
        let attributesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .attributes)
        var attributesDecoded0: [String:String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [String:String]()
            for (key0, string0) in attributesContainer {
                attributesDecoded0?[key0] = string0
            }
        }
        attributes = attributesDecoded0
        let cloudWatchLogsConfigurationDecoded = try containerValues.decodeIfPresent(CloudWatchLogsConfiguration.self, forKey: .cloudWatchLogsConfiguration)
        cloudWatchLogsConfiguration = cloudWatchLogsConfigurationDecoded
        let customInstanceProfileArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customInstanceProfileArn)
        customInstanceProfileArn = customInstanceProfileArnDecoded
        let customJsonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customJson)
        customJson = customJsonDecoded
        let customSecurityGroupIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .customSecurityGroupIds)
        var customSecurityGroupIdsDecoded0:[String]? = nil
        if let customSecurityGroupIdsContainer = customSecurityGroupIdsContainer {
            customSecurityGroupIdsDecoded0 = [String]()
            for string0 in customSecurityGroupIdsContainer {
                customSecurityGroupIdsDecoded0?.append(string0)
            }
        }
        customSecurityGroupIds = customSecurityGroupIdsDecoded0
        let defaultSecurityGroupNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .defaultSecurityGroupNames)
        var defaultSecurityGroupNamesDecoded0:[String]? = nil
        if let defaultSecurityGroupNamesContainer = defaultSecurityGroupNamesContainer {
            defaultSecurityGroupNamesDecoded0 = [String]()
            for string0 in defaultSecurityGroupNamesContainer {
                defaultSecurityGroupNamesDecoded0?.append(string0)
            }
        }
        defaultSecurityGroupNames = defaultSecurityGroupNamesDecoded0
        let packagesContainer = try containerValues.decodeIfPresent([String].self, forKey: .packages)
        var packagesDecoded0:[String]? = nil
        if let packagesContainer = packagesContainer {
            packagesDecoded0 = [String]()
            for string0 in packagesContainer {
                packagesDecoded0?.append(string0)
            }
        }
        packages = packagesDecoded0
        let volumeConfigurationsContainer = try containerValues.decodeIfPresent([VolumeConfiguration].self, forKey: .volumeConfigurations)
        var volumeConfigurationsDecoded0:[VolumeConfiguration]? = nil
        if let volumeConfigurationsContainer = volumeConfigurationsContainer {
            volumeConfigurationsDecoded0 = [VolumeConfiguration]()
            for structure0 in volumeConfigurationsContainer {
                volumeConfigurationsDecoded0?.append(structure0)
            }
        }
        volumeConfigurations = volumeConfigurationsDecoded0
        let enableAutoHealingDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enableAutoHealing)
        enableAutoHealing = enableAutoHealingDecoded
        let autoAssignElasticIpsDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .autoAssignElasticIps)
        autoAssignElasticIps = autoAssignElasticIpsDecoded
        let autoAssignPublicIpsDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .autoAssignPublicIps)
        autoAssignPublicIps = autoAssignPublicIpsDecoded
        let defaultRecipesDecoded = try containerValues.decodeIfPresent(Recipes.self, forKey: .defaultRecipes)
        defaultRecipes = defaultRecipesDecoded
        let customRecipesDecoded = try containerValues.decodeIfPresent(Recipes.self, forKey: .customRecipes)
        customRecipes = customRecipesDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let installUpdatesOnBootDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .installUpdatesOnBoot)
        installUpdatesOnBoot = installUpdatesOnBootDecoded
        let useEbsOptimizedInstancesDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .useEbsOptimizedInstances)
        useEbsOptimizedInstances = useEbsOptimizedInstancesDecoded
        let lifecycleEventConfigurationDecoded = try containerValues.decodeIfPresent(LifecycleEventConfiguration.self, forKey: .lifecycleEventConfiguration)
        lifecycleEventConfiguration = lifecycleEventConfigurationDecoded
    }
}
