// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Instance: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case agentVersion = "AgentVersion"
        case amiId = "AmiId"
        case architecture = "Architecture"
        case arn = "Arn"
        case autoScalingType = "AutoScalingType"
        case availabilityZone = "AvailabilityZone"
        case blockDeviceMappings = "BlockDeviceMappings"
        case createdAt = "CreatedAt"
        case ebsOptimized = "EbsOptimized"
        case ec2InstanceId = "Ec2InstanceId"
        case ecsClusterArn = "EcsClusterArn"
        case ecsContainerInstanceArn = "EcsContainerInstanceArn"
        case elasticIp = "ElasticIp"
        case hostname = "Hostname"
        case infrastructureClass = "InfrastructureClass"
        case installUpdatesOnBoot = "InstallUpdatesOnBoot"
        case instanceId = "InstanceId"
        case instanceProfileArn = "InstanceProfileArn"
        case instanceType = "InstanceType"
        case lastServiceErrorId = "LastServiceErrorId"
        case layerIds = "LayerIds"
        case os = "Os"
        case platform = "Platform"
        case privateDns = "PrivateDns"
        case privateIp = "PrivateIp"
        case publicDns = "PublicDns"
        case publicIp = "PublicIp"
        case registeredBy = "RegisteredBy"
        case reportedAgentVersion = "ReportedAgentVersion"
        case reportedOs = "ReportedOs"
        case rootDeviceType = "RootDeviceType"
        case rootDeviceVolumeId = "RootDeviceVolumeId"
        case securityGroupIds = "SecurityGroupIds"
        case sshHostDsaKeyFingerprint = "SshHostDsaKeyFingerprint"
        case sshHostRsaKeyFingerprint = "SshHostRsaKeyFingerprint"
        case sshKeyName = "SshKeyName"
        case stackId = "StackId"
        case status = "Status"
        case subnetId = "SubnetId"
        case tenancy = "Tenancy"
        case virtualizationType = "VirtualizationType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentVersion = agentVersion {
            try encodeContainer.encode(agentVersion, forKey: .agentVersion)
        }
        if let amiId = amiId {
            try encodeContainer.encode(amiId, forKey: .amiId)
        }
        if let architecture = architecture {
            try encodeContainer.encode(architecture.rawValue, forKey: .architecture)
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let autoScalingType = autoScalingType {
            try encodeContainer.encode(autoScalingType.rawValue, forKey: .autoScalingType)
        }
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let blockDeviceMappings = blockDeviceMappings {
            var blockDeviceMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .blockDeviceMappings)
            for blockdevicemappings0 in blockDeviceMappings {
                try blockDeviceMappingsContainer.encode(blockdevicemappings0)
            }
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt, forKey: .createdAt)
        }
        if let ebsOptimized = ebsOptimized {
            try encodeContainer.encode(ebsOptimized, forKey: .ebsOptimized)
        }
        if let ec2InstanceId = ec2InstanceId {
            try encodeContainer.encode(ec2InstanceId, forKey: .ec2InstanceId)
        }
        if let ecsClusterArn = ecsClusterArn {
            try encodeContainer.encode(ecsClusterArn, forKey: .ecsClusterArn)
        }
        if let ecsContainerInstanceArn = ecsContainerInstanceArn {
            try encodeContainer.encode(ecsContainerInstanceArn, forKey: .ecsContainerInstanceArn)
        }
        if let elasticIp = elasticIp {
            try encodeContainer.encode(elasticIp, forKey: .elasticIp)
        }
        if let hostname = hostname {
            try encodeContainer.encode(hostname, forKey: .hostname)
        }
        if let infrastructureClass = infrastructureClass {
            try encodeContainer.encode(infrastructureClass, forKey: .infrastructureClass)
        }
        if let installUpdatesOnBoot = installUpdatesOnBoot {
            try encodeContainer.encode(installUpdatesOnBoot, forKey: .installUpdatesOnBoot)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let instanceProfileArn = instanceProfileArn {
            try encodeContainer.encode(instanceProfileArn, forKey: .instanceProfileArn)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let lastServiceErrorId = lastServiceErrorId {
            try encodeContainer.encode(lastServiceErrorId, forKey: .lastServiceErrorId)
        }
        if let layerIds = layerIds {
            var layerIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .layerIds)
            for strings0 in layerIds {
                try layerIdsContainer.encode(strings0)
            }
        }
        if let os = os {
            try encodeContainer.encode(os, forKey: .os)
        }
        if let platform = platform {
            try encodeContainer.encode(platform, forKey: .platform)
        }
        if let privateDns = privateDns {
            try encodeContainer.encode(privateDns, forKey: .privateDns)
        }
        if let privateIp = privateIp {
            try encodeContainer.encode(privateIp, forKey: .privateIp)
        }
        if let publicDns = publicDns {
            try encodeContainer.encode(publicDns, forKey: .publicDns)
        }
        if let publicIp = publicIp {
            try encodeContainer.encode(publicIp, forKey: .publicIp)
        }
        if let registeredBy = registeredBy {
            try encodeContainer.encode(registeredBy, forKey: .registeredBy)
        }
        if let reportedAgentVersion = reportedAgentVersion {
            try encodeContainer.encode(reportedAgentVersion, forKey: .reportedAgentVersion)
        }
        if let reportedOs = reportedOs {
            try encodeContainer.encode(reportedOs, forKey: .reportedOs)
        }
        if let rootDeviceType = rootDeviceType {
            try encodeContainer.encode(rootDeviceType.rawValue, forKey: .rootDeviceType)
        }
        if let rootDeviceVolumeId = rootDeviceVolumeId {
            try encodeContainer.encode(rootDeviceVolumeId, forKey: .rootDeviceVolumeId)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for strings0 in securityGroupIds {
                try securityGroupIdsContainer.encode(strings0)
            }
        }
        if let sshHostDsaKeyFingerprint = sshHostDsaKeyFingerprint {
            try encodeContainer.encode(sshHostDsaKeyFingerprint, forKey: .sshHostDsaKeyFingerprint)
        }
        if let sshHostRsaKeyFingerprint = sshHostRsaKeyFingerprint {
            try encodeContainer.encode(sshHostRsaKeyFingerprint, forKey: .sshHostRsaKeyFingerprint)
        }
        if let sshKeyName = sshKeyName {
            try encodeContainer.encode(sshKeyName, forKey: .sshKeyName)
        }
        if let stackId = stackId {
            try encodeContainer.encode(stackId, forKey: .stackId)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let subnetId = subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
        if let tenancy = tenancy {
            try encodeContainer.encode(tenancy, forKey: .tenancy)
        }
        if let virtualizationType = virtualizationType {
            try encodeContainer.encode(virtualizationType.rawValue, forKey: .virtualizationType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let agentVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .agentVersion)
        agentVersion = agentVersionDecoded
        let amiIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .amiId)
        amiId = amiIdDecoded
        let architectureDecoded = try containerValues.decodeIfPresent(Architecture.self, forKey: .architecture)
        architecture = architectureDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let autoScalingTypeDecoded = try containerValues.decodeIfPresent(AutoScalingType.self, forKey: .autoScalingType)
        autoScalingType = autoScalingTypeDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let blockDeviceMappingsContainer = try containerValues.decodeIfPresent([BlockDeviceMapping].self, forKey: .blockDeviceMappings)
        var blockDeviceMappingsDecoded0:[BlockDeviceMapping]? = nil
        if let blockDeviceMappingsContainer = blockDeviceMappingsContainer {
            blockDeviceMappingsDecoded0 = [BlockDeviceMapping]()
            for structure0 in blockDeviceMappingsContainer {
                blockDeviceMappingsDecoded0?.append(structure0)
            }
        }
        blockDeviceMappings = blockDeviceMappingsDecoded0
        let createdAtDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let ebsOptimizedDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .ebsOptimized)
        ebsOptimized = ebsOptimizedDecoded
        let ec2InstanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ec2InstanceId)
        ec2InstanceId = ec2InstanceIdDecoded
        let ecsClusterArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ecsClusterArn)
        ecsClusterArn = ecsClusterArnDecoded
        let ecsContainerInstanceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ecsContainerInstanceArn)
        ecsContainerInstanceArn = ecsContainerInstanceArnDecoded
        let elasticIpDecoded = try containerValues.decodeIfPresent(String.self, forKey: .elasticIp)
        elasticIp = elasticIpDecoded
        let hostnameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hostname)
        hostname = hostnameDecoded
        let infrastructureClassDecoded = try containerValues.decodeIfPresent(String.self, forKey: .infrastructureClass)
        infrastructureClass = infrastructureClassDecoded
        let installUpdatesOnBootDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .installUpdatesOnBoot)
        installUpdatesOnBoot = installUpdatesOnBootDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let instanceProfileArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceProfileArn)
        instanceProfileArn = instanceProfileArnDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let lastServiceErrorIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastServiceErrorId)
        lastServiceErrorId = lastServiceErrorIdDecoded
        let layerIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .layerIds)
        var layerIdsDecoded0:[String]? = nil
        if let layerIdsContainer = layerIdsContainer {
            layerIdsDecoded0 = [String]()
            for string0 in layerIdsContainer {
                layerIdsDecoded0?.append(string0)
            }
        }
        layerIds = layerIdsDecoded0
        let osDecoded = try containerValues.decodeIfPresent(String.self, forKey: .os)
        os = osDecoded
        let platformDecoded = try containerValues.decodeIfPresent(String.self, forKey: .platform)
        platform = platformDecoded
        let privateDnsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .privateDns)
        privateDns = privateDnsDecoded
        let privateIpDecoded = try containerValues.decodeIfPresent(String.self, forKey: .privateIp)
        privateIp = privateIpDecoded
        let publicDnsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .publicDns)
        publicDns = publicDnsDecoded
        let publicIpDecoded = try containerValues.decodeIfPresent(String.self, forKey: .publicIp)
        publicIp = publicIpDecoded
        let registeredByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .registeredBy)
        registeredBy = registeredByDecoded
        let reportedAgentVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reportedAgentVersion)
        reportedAgentVersion = reportedAgentVersionDecoded
        let reportedOsDecoded = try containerValues.decodeIfPresent(ReportedOs.self, forKey: .reportedOs)
        reportedOs = reportedOsDecoded
        let rootDeviceTypeDecoded = try containerValues.decodeIfPresent(RootDeviceType.self, forKey: .rootDeviceType)
        rootDeviceType = rootDeviceTypeDecoded
        let rootDeviceVolumeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .rootDeviceVolumeId)
        rootDeviceVolumeId = rootDeviceVolumeIdDecoded
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [String]()
            for string0 in securityGroupIdsContainer {
                securityGroupIdsDecoded0?.append(string0)
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let sshHostDsaKeyFingerprintDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sshHostDsaKeyFingerprint)
        sshHostDsaKeyFingerprint = sshHostDsaKeyFingerprintDecoded
        let sshHostRsaKeyFingerprintDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sshHostRsaKeyFingerprint)
        sshHostRsaKeyFingerprint = sshHostRsaKeyFingerprintDecoded
        let sshKeyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sshKeyName)
        sshKeyName = sshKeyNameDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let subnetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let tenancyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tenancy)
        tenancy = tenancyDecoded
        let virtualizationTypeDecoded = try containerValues.decodeIfPresent(VirtualizationType.self, forKey: .virtualizationType)
        virtualizationType = virtualizationTypeDecoded
    }
}
