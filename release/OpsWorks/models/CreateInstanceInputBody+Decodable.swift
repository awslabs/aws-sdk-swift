// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateInstanceInputBody: Equatable {
    public let stackId: String?
    public let layerIds: [String]?
    public let instanceType: String?
    public let autoScalingType: AutoScalingType?
    public let hostname: String?
    public let os: String?
    public let amiId: String?
    public let sshKeyName: String?
    public let availabilityZone: String?
    public let virtualizationType: String?
    public let subnetId: String?
    public let architecture: Architecture?
    public let rootDeviceType: RootDeviceType?
    public let blockDeviceMappings: [BlockDeviceMapping]?
    public let installUpdatesOnBoot: Bool?
    public let ebsOptimized: Bool?
    public let agentVersion: String?
    public let tenancy: String?
}

extension CreateInstanceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case agentVersion = "AgentVersion"
        case amiId = "AmiId"
        case architecture = "Architecture"
        case autoScalingType = "AutoScalingType"
        case availabilityZone = "AvailabilityZone"
        case blockDeviceMappings = "BlockDeviceMappings"
        case ebsOptimized = "EbsOptimized"
        case hostname = "Hostname"
        case installUpdatesOnBoot = "InstallUpdatesOnBoot"
        case instanceType = "InstanceType"
        case layerIds = "LayerIds"
        case os = "Os"
        case rootDeviceType = "RootDeviceType"
        case sshKeyName = "SshKeyName"
        case stackId = "StackId"
        case subnetId = "SubnetId"
        case tenancy = "Tenancy"
        case virtualizationType = "VirtualizationType"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let layerIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .layerIds)
        var layerIdsDecoded0:[String]? = nil
        if let layerIdsContainer = layerIdsContainer {
            layerIdsDecoded0 = [String]()
            for string0 in layerIdsContainer {
                layerIdsDecoded0?.append(string0)
            }
        }
        layerIds = layerIdsDecoded0
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let autoScalingTypeDecoded = try containerValues.decodeIfPresent(AutoScalingType.self, forKey: .autoScalingType)
        autoScalingType = autoScalingTypeDecoded
        let hostnameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hostname)
        hostname = hostnameDecoded
        let osDecoded = try containerValues.decodeIfPresent(String.self, forKey: .os)
        os = osDecoded
        let amiIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .amiId)
        amiId = amiIdDecoded
        let sshKeyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sshKeyName)
        sshKeyName = sshKeyNameDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let virtualizationTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .virtualizationType)
        virtualizationType = virtualizationTypeDecoded
        let subnetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let architectureDecoded = try containerValues.decodeIfPresent(Architecture.self, forKey: .architecture)
        architecture = architectureDecoded
        let rootDeviceTypeDecoded = try containerValues.decodeIfPresent(RootDeviceType.self, forKey: .rootDeviceType)
        rootDeviceType = rootDeviceTypeDecoded
        let blockDeviceMappingsContainer = try containerValues.decodeIfPresent([BlockDeviceMapping].self, forKey: .blockDeviceMappings)
        var blockDeviceMappingsDecoded0:[BlockDeviceMapping]? = nil
        if let blockDeviceMappingsContainer = blockDeviceMappingsContainer {
            blockDeviceMappingsDecoded0 = [BlockDeviceMapping]()
            for structure0 in blockDeviceMappingsContainer {
                blockDeviceMappingsDecoded0?.append(structure0)
            }
        }
        blockDeviceMappings = blockDeviceMappingsDecoded0
        let installUpdatesOnBootDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .installUpdatesOnBoot)
        installUpdatesOnBoot = installUpdatesOnBootDecoded
        let ebsOptimizedDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .ebsOptimized)
        ebsOptimized = ebsOptimizedDecoded
        let agentVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .agentVersion)
        agentVersion = agentVersionDecoded
        let tenancyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tenancy)
        tenancy = tenancyDecoded
    }
}
