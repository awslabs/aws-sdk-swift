// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WeeklyAutoScalingSchedule: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case friday = "Friday"
        case monday = "Monday"
        case saturday = "Saturday"
        case sunday = "Sunday"
        case thursday = "Thursday"
        case tuesday = "Tuesday"
        case wednesday = "Wednesday"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let friday = friday {
            var fridayContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .friday)
            for (dictKey0, dailyautoscalingschedule0) in friday {
                try fridayContainer.encode(dailyautoscalingschedule0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let monday = monday {
            var mondayContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .monday)
            for (dictKey0, dailyautoscalingschedule0) in monday {
                try mondayContainer.encode(dailyautoscalingschedule0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let saturday = saturday {
            var saturdayContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .saturday)
            for (dictKey0, dailyautoscalingschedule0) in saturday {
                try saturdayContainer.encode(dailyautoscalingschedule0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let sunday = sunday {
            var sundayContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .sunday)
            for (dictKey0, dailyautoscalingschedule0) in sunday {
                try sundayContainer.encode(dailyautoscalingschedule0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let thursday = thursday {
            var thursdayContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .thursday)
            for (dictKey0, dailyautoscalingschedule0) in thursday {
                try thursdayContainer.encode(dailyautoscalingschedule0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let tuesday = tuesday {
            var tuesdayContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tuesday)
            for (dictKey0, dailyautoscalingschedule0) in tuesday {
                try tuesdayContainer.encode(dailyautoscalingschedule0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let wednesday = wednesday {
            var wednesdayContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .wednesday)
            for (dictKey0, dailyautoscalingschedule0) in wednesday {
                try wednesdayContainer.encode(dailyautoscalingschedule0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mondayContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .monday)
        var mondayDecoded0: [String:String]? = nil
        if let mondayContainer = mondayContainer {
            mondayDecoded0 = [String:String]()
            for (key0, switch0) in mondayContainer {
                mondayDecoded0?[key0] = switch0
            }
        }
        monday = mondayDecoded0
        let tuesdayContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tuesday)
        var tuesdayDecoded0: [String:String]? = nil
        if let tuesdayContainer = tuesdayContainer {
            tuesdayDecoded0 = [String:String]()
            for (key0, switch0) in tuesdayContainer {
                tuesdayDecoded0?[key0] = switch0
            }
        }
        tuesday = tuesdayDecoded0
        let wednesdayContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .wednesday)
        var wednesdayDecoded0: [String:String]? = nil
        if let wednesdayContainer = wednesdayContainer {
            wednesdayDecoded0 = [String:String]()
            for (key0, switch0) in wednesdayContainer {
                wednesdayDecoded0?[key0] = switch0
            }
        }
        wednesday = wednesdayDecoded0
        let thursdayContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .thursday)
        var thursdayDecoded0: [String:String]? = nil
        if let thursdayContainer = thursdayContainer {
            thursdayDecoded0 = [String:String]()
            for (key0, switch0) in thursdayContainer {
                thursdayDecoded0?[key0] = switch0
            }
        }
        thursday = thursdayDecoded0
        let fridayContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .friday)
        var fridayDecoded0: [String:String]? = nil
        if let fridayContainer = fridayContainer {
            fridayDecoded0 = [String:String]()
            for (key0, switch0) in fridayContainer {
                fridayDecoded0?[key0] = switch0
            }
        }
        friday = fridayDecoded0
        let saturdayContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .saturday)
        var saturdayDecoded0: [String:String]? = nil
        if let saturdayContainer = saturdayContainer {
            saturdayDecoded0 = [String:String]()
            for (key0, switch0) in saturdayContainer {
                saturdayDecoded0?[key0] = switch0
            }
        }
        saturday = saturdayDecoded0
        let sundayContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .sunday)
        var sundayDecoded0: [String:String]? = nil
        if let sundayContainer = sundayContainer {
            sundayDecoded0 = [String:String]()
            for (key0, switch0) in sundayContainer {
                sundayDecoded0?[key0] = switch0
            }
        }
        sunday = sundayDecoded0
    }
}
