// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OperatingSystem: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case configurationManagers = "ConfigurationManagers"
        case id = "Id"
        case name = "Name"
        case reportedName = "ReportedName"
        case reportedVersion = "ReportedVersion"
        case supported = "Supported"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationManagers = configurationManagers {
            var configurationManagersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurationManagers)
            for operatingsystemconfigurationmanagers0 in configurationManagers {
                try configurationManagersContainer.encode(operatingsystemconfigurationmanagers0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let reportedName = reportedName {
            try encodeContainer.encode(reportedName, forKey: .reportedName)
        }
        if let reportedVersion = reportedVersion {
            try encodeContainer.encode(reportedVersion, forKey: .reportedVersion)
        }
        if let supported = supported {
            try encodeContainer.encode(supported, forKey: .supported)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let typeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .type)
        type = typeDecoded
        let configurationManagersContainer = try containerValues.decodeIfPresent([OperatingSystemConfigurationManager].self, forKey: .configurationManagers)
        var configurationManagersDecoded0:[OperatingSystemConfigurationManager]? = nil
        if let configurationManagersContainer = configurationManagersContainer {
            configurationManagersDecoded0 = [OperatingSystemConfigurationManager]()
            for structure0 in configurationManagersContainer {
                configurationManagersDecoded0?.append(structure0)
            }
        }
        configurationManagers = configurationManagersDecoded0
        let reportedNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reportedName)
        reportedName = reportedNameDecoded
        let reportedVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reportedVersion)
        reportedVersion = reportedVersionDecoded
        let supportedDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .supported)
        supported = supportedDecoded
    }
}
