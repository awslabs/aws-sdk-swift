// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVolumesInputBody: Equatable {
    public let instanceId: String?
    public let stackId: String?
    public let raidArrayId: String?
    public let volumeIds: [String]?
}

extension DescribeVolumesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceId = "InstanceId"
        case raidArrayId = "RaidArrayId"
        case stackId = "StackId"
        case volumeIds = "VolumeIds"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let raidArrayIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .raidArrayId)
        raidArrayId = raidArrayIdDecoded
        let volumeIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .volumeIds)
        var volumeIdsDecoded0:[String]? = nil
        if let volumeIdsContainer = volumeIdsContainer {
            volumeIdsDecoded0 = [String]()
            for string0 in volumeIdsContainer {
                volumeIdsDecoded0?.append(string0)
            }
        }
        volumeIds = volumeIdsDecoded0
    }
}
