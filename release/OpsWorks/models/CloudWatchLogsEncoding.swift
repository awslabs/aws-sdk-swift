// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Specifies the encoding of the log file so that the file can be read correctly. The default is <code>utf_8</code>. Encodings supported by Python <code>codecs.decode()</code> can be used here.</p>
public enum CloudWatchLogsEncoding {
    case ascii
    case big5
    case big5hkscs
    case cp037
    case cp1006
    case cp1026
    case cp1140
    case cp1250
    case cp1251
    case cp1252
    case cp1253
    case cp1254
    case cp1255
    case cp1256
    case cp1257
    case cp1258
    case cp424
    case cp437
    case cp500
    case cp720
    case cp737
    case cp775
    case cp850
    case cp852
    case cp855
    case cp856
    case cp857
    case cp858
    case cp860
    case cp861
    case cp862
    case cp863
    case cp864
    case cp865
    case cp866
    case cp869
    case cp874
    case cp875
    case cp932
    case cp949
    case cp950
    case eucJis2004
    case eucJisx0213
    case eucJp
    case eucKr
    case gb18030
    case gb2312
    case gbk
    case hz
    case iso2022Jp
    case iso2022Jp1
    case iso2022Jp2
    case iso2022Jp2004
    case iso2022Jp3
    case iso2022JpExt
    case iso2022Kr
    case iso885910
    case iso885913
    case iso885914
    case iso885915
    case iso885916
    case iso88592
    case iso88593
    case iso88594
    case iso88595
    case iso88596
    case iso88597
    case iso88598
    case iso88599
    case johab
    case koi8R
    case koi8U
    case latin1
    case macCyrillic
    case macGreek
    case macIceland
    case macLatin2
    case macRoman
    case macTurkish
    case ptcp154
    case shiftJis
    case shiftJis2004
    case shiftJisx0213
    case utf16
    case utf16Be
    case utf16Le
    case utf32
    case utf32Be
    case utf32Le
    case utf7
    case utf8
    case utf8Sig
    case sdkUnknown(String)
}

extension CloudWatchLogsEncoding : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CloudWatchLogsEncoding] {
        return [
            .ascii,
            .big5,
            .big5hkscs,
            .cp037,
            .cp1006,
            .cp1026,
            .cp1140,
            .cp1250,
            .cp1251,
            .cp1252,
            .cp1253,
            .cp1254,
            .cp1255,
            .cp1256,
            .cp1257,
            .cp1258,
            .cp424,
            .cp437,
            .cp500,
            .cp720,
            .cp737,
            .cp775,
            .cp850,
            .cp852,
            .cp855,
            .cp856,
            .cp857,
            .cp858,
            .cp860,
            .cp861,
            .cp862,
            .cp863,
            .cp864,
            .cp865,
            .cp866,
            .cp869,
            .cp874,
            .cp875,
            .cp932,
            .cp949,
            .cp950,
            .eucJis2004,
            .eucJisx0213,
            .eucJp,
            .eucKr,
            .gb18030,
            .gb2312,
            .gbk,
            .hz,
            .iso2022Jp,
            .iso2022Jp1,
            .iso2022Jp2,
            .iso2022Jp2004,
            .iso2022Jp3,
            .iso2022JpExt,
            .iso2022Kr,
            .iso885910,
            .iso885913,
            .iso885914,
            .iso885915,
            .iso885916,
            .iso88592,
            .iso88593,
            .iso88594,
            .iso88595,
            .iso88596,
            .iso88597,
            .iso88598,
            .iso88599,
            .johab,
            .koi8R,
            .koi8U,
            .latin1,
            .macCyrillic,
            .macGreek,
            .macIceland,
            .macLatin2,
            .macRoman,
            .macTurkish,
            .ptcp154,
            .shiftJis,
            .shiftJis2004,
            .shiftJisx0213,
            .utf16,
            .utf16Be,
            .utf16Le,
            .utf32,
            .utf32Be,
            .utf32Le,
            .utf7,
            .utf8,
            .utf8Sig,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .ascii: return "ascii"
        case .big5: return "big5"
        case .big5hkscs: return "big5hkscs"
        case .cp037: return "cp037"
        case .cp1006: return "cp1006"
        case .cp1026: return "cp1026"
        case .cp1140: return "cp1140"
        case .cp1250: return "cp1250"
        case .cp1251: return "cp1251"
        case .cp1252: return "cp1252"
        case .cp1253: return "cp1253"
        case .cp1254: return "cp1254"
        case .cp1255: return "cp1255"
        case .cp1256: return "cp1256"
        case .cp1257: return "cp1257"
        case .cp1258: return "cp1258"
        case .cp424: return "cp424"
        case .cp437: return "cp437"
        case .cp500: return "cp500"
        case .cp720: return "cp720"
        case .cp737: return "cp737"
        case .cp775: return "cp775"
        case .cp850: return "cp850"
        case .cp852: return "cp852"
        case .cp855: return "cp855"
        case .cp856: return "cp856"
        case .cp857: return "cp857"
        case .cp858: return "cp858"
        case .cp860: return "cp860"
        case .cp861: return "cp861"
        case .cp862: return "cp862"
        case .cp863: return "cp863"
        case .cp864: return "cp864"
        case .cp865: return "cp865"
        case .cp866: return "cp866"
        case .cp869: return "cp869"
        case .cp874: return "cp874"
        case .cp875: return "cp875"
        case .cp932: return "cp932"
        case .cp949: return "cp949"
        case .cp950: return "cp950"
        case .eucJis2004: return "euc_jis_2004"
        case .eucJisx0213: return "euc_jisx0213"
        case .eucJp: return "euc_jp"
        case .eucKr: return "euc_kr"
        case .gb18030: return "gb18030"
        case .gb2312: return "gb2312"
        case .gbk: return "gbk"
        case .hz: return "hz"
        case .iso2022Jp: return "iso2022_jp"
        case .iso2022Jp1: return "iso2022_jp_1"
        case .iso2022Jp2: return "iso2022_jp_2"
        case .iso2022Jp2004: return "iso2022_jp_2004"
        case .iso2022Jp3: return "iso2022_jp_3"
        case .iso2022JpExt: return "iso2022_jp_ext"
        case .iso2022Kr: return "iso2022_kr"
        case .iso885910: return "iso8859_10"
        case .iso885913: return "iso8859_13"
        case .iso885914: return "iso8859_14"
        case .iso885915: return "iso8859_15"
        case .iso885916: return "iso8859_16"
        case .iso88592: return "iso8859_2"
        case .iso88593: return "iso8859_3"
        case .iso88594: return "iso8859_4"
        case .iso88595: return "iso8859_5"
        case .iso88596: return "iso8859_6"
        case .iso88597: return "iso8859_7"
        case .iso88598: return "iso8859_8"
        case .iso88599: return "iso8859_9"
        case .johab: return "johab"
        case .koi8R: return "koi8_r"
        case .koi8U: return "koi8_u"
        case .latin1: return "latin_1"
        case .macCyrillic: return "mac_cyrillic"
        case .macGreek: return "mac_greek"
        case .macIceland: return "mac_iceland"
        case .macLatin2: return "mac_latin2"
        case .macRoman: return "mac_roman"
        case .macTurkish: return "mac_turkish"
        case .ptcp154: return "ptcp154"
        case .shiftJis: return "shift_jis"
        case .shiftJis2004: return "shift_jis_2004"
        case .shiftJisx0213: return "shift_jisx0213"
        case .utf16: return "utf_16"
        case .utf16Be: return "utf_16_be"
        case .utf16Le: return "utf_16_le"
        case .utf32: return "utf_32"
        case .utf32Be: return "utf_32_be"
        case .utf32Le: return "utf_32_le"
        case .utf7: return "utf_7"
        case .utf8: return "utf_8"
        case .utf8Sig: return "utf_8_sig"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CloudWatchLogsEncoding(rawValue: rawValue) ?? CloudWatchLogsEncoding.sdkUnknown(rawValue)
    }
}
