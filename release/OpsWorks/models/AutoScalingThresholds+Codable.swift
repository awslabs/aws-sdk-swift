// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AutoScalingThresholds: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alarms = "Alarms"
        case cpuThreshold = "CpuThreshold"
        case ignoreMetricsTime = "IgnoreMetricsTime"
        case instanceCount = "InstanceCount"
        case loadThreshold = "LoadThreshold"
        case memoryThreshold = "MemoryThreshold"
        case thresholdsWaitTime = "ThresholdsWaitTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarms = alarms {
            var alarmsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .alarms)
            for strings0 in alarms {
                try alarmsContainer.encode(strings0)
            }
        }
        if let cpuThreshold = cpuThreshold {
            try encodeContainer.encode(cpuThreshold, forKey: .cpuThreshold)
        }
        if let ignoreMetricsTime = ignoreMetricsTime {
            try encodeContainer.encode(ignoreMetricsTime, forKey: .ignoreMetricsTime)
        }
        if let instanceCount = instanceCount {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let loadThreshold = loadThreshold {
            try encodeContainer.encode(loadThreshold, forKey: .loadThreshold)
        }
        if let memoryThreshold = memoryThreshold {
            try encodeContainer.encode(memoryThreshold, forKey: .memoryThreshold)
        }
        if let thresholdsWaitTime = thresholdsWaitTime {
            try encodeContainer.encode(thresholdsWaitTime, forKey: .thresholdsWaitTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let thresholdsWaitTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .thresholdsWaitTime)
        thresholdsWaitTime = thresholdsWaitTimeDecoded
        let ignoreMetricsTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .ignoreMetricsTime)
        ignoreMetricsTime = ignoreMetricsTimeDecoded
        let cpuThresholdDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .cpuThreshold)
        cpuThreshold = cpuThresholdDecoded
        let memoryThresholdDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .memoryThreshold)
        memoryThreshold = memoryThresholdDecoded
        let loadThresholdDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .loadThreshold)
        loadThreshold = loadThresholdDecoded
        let alarmsContainer = try containerValues.decodeIfPresent([String].self, forKey: .alarms)
        var alarmsDecoded0:[String]? = nil
        if let alarmsContainer = alarmsContainer {
            alarmsDecoded0 = [String]()
            for string0 in alarmsContainer {
                alarmsDecoded0?.append(string0)
            }
        }
        alarms = alarmsDecoded0
    }
}
