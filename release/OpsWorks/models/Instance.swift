// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes an instance.</p>
public struct Instance: Equatable {
    /// <p>The agent version. This parameter is set to <code>INHERIT</code> if
    ///       the instance inherits the default stack setting or to a
    ///       a version number for a fixed agent version.</p>
    public let agentVersion: String?
    /// <p>A custom AMI ID to be used to create the instance. For more
    ///       information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-custom-ami.html">Instances</a>
    ///          </p>
    public let amiId: String?
    /// <p>The instance architecture: "i386" or "x86_64".</p>
    public let architecture: Architecture?
    /// <p>The instance's Amazon Resource Number (ARN).</p>
    public let arn: String?
    /// <p>For load-based or time-based instances, the type.</p>
    public let autoScalingType: AutoScalingType?
    /// <p>The instance Availability Zone. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p>
    public let availabilityZone: String?
    /// <p>An array of <code>BlockDeviceMapping</code> objects that specify the instance's block device
    ///       mappings.</p>
    public let blockDeviceMappings: [BlockDeviceMapping]?
    /// <p>The time that the instance was created.</p>
    public let createdAt: String?
    /// <p>Whether this is an Amazon EBS-optimized instance.</p>
    public let ebsOptimized: Bool?
    /// <p>The ID of the associated Amazon EC2 instance.</p>
    public let ec2InstanceId: String?
    /// <p>For container instances, the Amazon ECS cluster's ARN.</p>
    public let ecsClusterArn: String?
    /// <p>For container instances, the instance's ARN.</p>
    public let ecsContainerInstanceArn: String?
    /// <p>The instance <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP address </a>.</p>
    public let elasticIp: String?
    /// <p>The instance host name.</p>
    public let hostname: String?
    /// <p>For registered instances, the infrastructure class: <code>ec2</code> or
    ///         <code>on-premises</code>.</p>
    public let infrastructureClass: String?
    /// <p>Whether to install operating system and package updates when the instance boots. The default
    ///       value is <code>true</code>. If this value is set to <code>false</code>, you must then update
    ///       your instances manually by using <a>CreateDeployment</a> to run the
    ///         <code>update_dependencies</code> stack command or
    ///       by manually running <code>yum</code> (Amazon
    ///       Linux) or <code>apt-get</code> (Ubuntu) on the instances. </p>
    ///          <note>
    ///             <p>We strongly recommend using the default value of <code>true</code>, to ensure that your
    ///         instances have the latest security updates.</p>
    ///          </note>
    public let installUpdatesOnBoot: Bool?
    /// <p>The instance ID.</p>
    public let instanceId: String?
    /// <p>The ARN of the instance's IAM profile. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using
    ///       Identifiers</a>.</p>
    public let instanceProfileArn: String?
    /// <p>The instance type, such as <code>t2.micro</code>.</p>
    public let instanceType: String?
    /// <p>The ID of the last service error. For more information, call
    ///       <a>DescribeServiceErrors</a>.</p>
    public let lastServiceErrorId: String?
    /// <p>An array containing the instance layer IDs.</p>
    public let layerIds: [String]?
    /// <p>The instance's operating system.</p>
    public let os: String?
    /// <p>The instance's platform.</p>
    public let platform: String?
    /// <p>The instance's private DNS name.</p>
    public let privateDns: String?
    /// <p>The instance's private IP address.</p>
    public let privateIp: String?
    /// <p>The instance public DNS name.</p>
    public let publicDns: String?
    /// <p>The instance public IP address.</p>
    public let publicIp: String?
    /// <p>For registered instances, who performed the registration.</p>
    public let registeredBy: String?
    /// <p>The instance's reported AWS OpsWorks Stacks agent version.</p>
    public let reportedAgentVersion: String?
    /// <p>For registered instances, the reported operating system.</p>
    public let reportedOs: ReportedOs?
    /// <p>The instance's root device type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ComponentsAMIs.html#storage-for-the-root-device">Storage for the Root Device</a>.</p>
    public let rootDeviceType: RootDeviceType?
    /// <p>The root device volume ID.</p>
    public let rootDeviceVolumeId: String?
    /// <p>An array containing the instance security group IDs.</p>
    public let securityGroupIds: [String]?
    /// <p>The SSH key's Deep Security Agent (DSA) fingerprint.</p>
    public let sshHostDsaKeyFingerprint: String?
    /// <p>The SSH key's RSA fingerprint.</p>
    public let sshHostRsaKeyFingerprint: String?
    /// <p>The instance's Amazon EC2 key-pair name.</p>
    public let sshKeyName: String?
    /// <p>The stack ID.</p>
    public let stackId: String?
    /// <p>The instance status:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>booting</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>connection_lost</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>online</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>pending</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>rebooting</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>requested</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>running_setup</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>setup_failed</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>shutting_down</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>start_failed</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>stop_failed</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>stopped</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>stopping</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>terminated</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>terminating</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let status: String?
    /// <p>The instance's subnet ID; applicable only if the stack is running in a VPC.</p>
    public let subnetId: String?
    /// <p>The instance's tenancy option, such as <code>dedicated</code> or <code>host</code>.</p>
    public let tenancy: String?
    /// <p>The instance's virtualization type: <code>paravirtual</code> or <code>hvm</code>.</p>
    public let virtualizationType: VirtualizationType?

    public init (
        agentVersion: String? = nil,
        amiId: String? = nil,
        architecture: Architecture? = nil,
        arn: String? = nil,
        autoScalingType: AutoScalingType? = nil,
        availabilityZone: String? = nil,
        blockDeviceMappings: [BlockDeviceMapping]? = nil,
        createdAt: String? = nil,
        ebsOptimized: Bool? = nil,
        ec2InstanceId: String? = nil,
        ecsClusterArn: String? = nil,
        ecsContainerInstanceArn: String? = nil,
        elasticIp: String? = nil,
        hostname: String? = nil,
        infrastructureClass: String? = nil,
        installUpdatesOnBoot: Bool? = nil,
        instanceId: String? = nil,
        instanceProfileArn: String? = nil,
        instanceType: String? = nil,
        lastServiceErrorId: String? = nil,
        layerIds: [String]? = nil,
        os: String? = nil,
        platform: String? = nil,
        privateDns: String? = nil,
        privateIp: String? = nil,
        publicDns: String? = nil,
        publicIp: String? = nil,
        registeredBy: String? = nil,
        reportedAgentVersion: String? = nil,
        reportedOs: ReportedOs? = nil,
        rootDeviceType: RootDeviceType? = nil,
        rootDeviceVolumeId: String? = nil,
        securityGroupIds: [String]? = nil,
        sshHostDsaKeyFingerprint: String? = nil,
        sshHostRsaKeyFingerprint: String? = nil,
        sshKeyName: String? = nil,
        stackId: String? = nil,
        status: String? = nil,
        subnetId: String? = nil,
        tenancy: String? = nil,
        virtualizationType: VirtualizationType? = nil
    )
    {
        self.agentVersion = agentVersion
        self.amiId = amiId
        self.architecture = architecture
        self.arn = arn
        self.autoScalingType = autoScalingType
        self.availabilityZone = availabilityZone
        self.blockDeviceMappings = blockDeviceMappings
        self.createdAt = createdAt
        self.ebsOptimized = ebsOptimized
        self.ec2InstanceId = ec2InstanceId
        self.ecsClusterArn = ecsClusterArn
        self.ecsContainerInstanceArn = ecsContainerInstanceArn
        self.elasticIp = elasticIp
        self.hostname = hostname
        self.infrastructureClass = infrastructureClass
        self.installUpdatesOnBoot = installUpdatesOnBoot
        self.instanceId = instanceId
        self.instanceProfileArn = instanceProfileArn
        self.instanceType = instanceType
        self.lastServiceErrorId = lastServiceErrorId
        self.layerIds = layerIds
        self.os = os
        self.platform = platform
        self.privateDns = privateDns
        self.privateIp = privateIp
        self.publicDns = publicDns
        self.publicIp = publicIp
        self.registeredBy = registeredBy
        self.reportedAgentVersion = reportedAgentVersion
        self.reportedOs = reportedOs
        self.rootDeviceType = rootDeviceType
        self.rootDeviceVolumeId = rootDeviceVolumeId
        self.securityGroupIds = securityGroupIds
        self.sshHostDsaKeyFingerprint = sshHostDsaKeyFingerprint
        self.sshHostRsaKeyFingerprint = sshHostRsaKeyFingerprint
        self.sshKeyName = sshKeyName
        self.stackId = stackId
        self.status = status
        self.subnetId = subnetId
        self.tenancy = tenancy
        self.virtualizationType = virtualizationType
    }
}
