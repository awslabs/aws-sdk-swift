// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InsightImpactGraphService: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountId = "AccountId"
        case edges = "Edges"
        case name = "Name"
        case names = "Names"
        case referenceId = "ReferenceId"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let edges = edges {
            var edgesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .edges)
            for insightimpactgraphedgelist0 in edges {
                try edgesContainer.encode(insightimpactgraphedgelist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let names = names {
            var namesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .names)
            for servicenames0 in names {
                try namesContainer.encode(servicenames0)
            }
        }
        if let referenceId = referenceId {
            try encodeContainer.encode(referenceId, forKey: .referenceId)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let referenceIdDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .referenceId)
        referenceId = referenceIdDecoded
        let typeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .type)
        type = typeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let namesContainer = try containerValues.decodeIfPresent([String].self, forKey: .names)
        var namesDecoded0:[String]? = nil
        if let namesContainer = namesContainer {
            namesDecoded0 = [String]()
            for string0 in namesContainer {
                namesDecoded0?.append(string0)
            }
        }
        names = namesDecoded0
        let accountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let edgesContainer = try containerValues.decodeIfPresent([InsightImpactGraphEdge].self, forKey: .edges)
        var edgesDecoded0:[InsightImpactGraphEdge]? = nil
        if let edgesContainer = edgesContainer {
            edgesDecoded0 = [InsightImpactGraphEdge]()
            for structure0 in edgesContainer {
                edgesDecoded0?.append(structure0)
            }
        }
        edges = edgesDecoded0
    }
}
