// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Insight: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case categories = "Categories"
        case clientRequestImpactStatistics = "ClientRequestImpactStatistics"
        case endTime = "EndTime"
        case groupARN = "GroupARN"
        case groupName = "GroupName"
        case insightId = "InsightId"
        case rootCauseServiceId = "RootCauseServiceId"
        case rootCauseServiceRequestImpactStatistics = "RootCauseServiceRequestImpactStatistics"
        case startTime = "StartTime"
        case state = "State"
        case summary = "Summary"
        case topAnomalousServices = "TopAnomalousServices"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let categories = categories {
            var categoriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .categories)
            for insightcategorylist0 in categories {
                try categoriesContainer.encode(insightcategorylist0.rawValue)
            }
        }
        if let clientRequestImpactStatistics = clientRequestImpactStatistics {
            try encodeContainer.encode(clientRequestImpactStatistics, forKey: .clientRequestImpactStatistics)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let groupARN = groupARN {
            try encodeContainer.encode(groupARN, forKey: .groupARN)
        }
        if let groupName = groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if let insightId = insightId {
            try encodeContainer.encode(insightId, forKey: .insightId)
        }
        if let rootCauseServiceId = rootCauseServiceId {
            try encodeContainer.encode(rootCauseServiceId, forKey: .rootCauseServiceId)
        }
        if let rootCauseServiceRequestImpactStatistics = rootCauseServiceRequestImpactStatistics {
            try encodeContainer.encode(rootCauseServiceRequestImpactStatistics, forKey: .rootCauseServiceRequestImpactStatistics)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let summary = summary {
            try encodeContainer.encode(summary, forKey: .summary)
        }
        if let topAnomalousServices = topAnomalousServices {
            var topAnomalousServicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .topAnomalousServices)
            for anomalousservicelist0 in topAnomalousServices {
                try topAnomalousServicesContainer.encode(anomalousservicelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let insightIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .insightId)
        insightId = insightIdDecoded
        let groupARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .groupARN)
        groupARN = groupARNDecoded
        let groupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let rootCauseServiceIdDecoded = try containerValues.decodeIfPresent(ServiceId.self, forKey: .rootCauseServiceId)
        rootCauseServiceId = rootCauseServiceIdDecoded
        let categoriesContainer = try containerValues.decodeIfPresent([InsightCategory].self, forKey: .categories)
        var categoriesDecoded0:[InsightCategory]? = nil
        if let categoriesContainer = categoriesContainer {
            categoriesDecoded0 = [InsightCategory]()
            for string0 in categoriesContainer {
                categoriesDecoded0?.append(string0)
            }
        }
        categories = categoriesDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(InsightState.self, forKey: .state)
        state = stateDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let summaryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .summary)
        summary = summaryDecoded
        let clientRequestImpactStatisticsDecoded = try containerValues.decodeIfPresent(RequestImpactStatistics.self, forKey: .clientRequestImpactStatistics)
        clientRequestImpactStatistics = clientRequestImpactStatisticsDecoded
        let rootCauseServiceRequestImpactStatisticsDecoded = try containerValues.decodeIfPresent(RequestImpactStatistics.self, forKey: .rootCauseServiceRequestImpactStatistics)
        rootCauseServiceRequestImpactStatistics = rootCauseServiceRequestImpactStatisticsDecoded
        let topAnomalousServicesContainer = try containerValues.decodeIfPresent([AnomalousService].self, forKey: .topAnomalousServices)
        var topAnomalousServicesDecoded0:[AnomalousService]? = nil
        if let topAnomalousServicesContainer = topAnomalousServicesContainer {
            topAnomalousServicesDecoded0 = [AnomalousService]()
            for structure0 in topAnomalousServicesContainer {
                topAnomalousServicesDecoded0?.append(structure0)
            }
        }
        topAnomalousServices = topAnomalousServicesDecoded0
    }
}
