// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetInsightSummariesInputBody: Equatable {
    public let states: [InsightState]?
    public let groupARN: String?
    public let groupName: String?
    public let startTime: Date?
    public let endTime: Date?
    public let maxResults: Int?
    public let nextToken: String?
}

extension GetInsightSummariesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case endTime = "EndTime"
        case groupARN = "GroupARN"
        case groupName = "GroupName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case startTime = "StartTime"
        case states = "States"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statesContainer = try containerValues.decodeIfPresent([InsightState].self, forKey: .states)
        var statesDecoded0:[InsightState]? = nil
        if let statesContainer = statesContainer {
            statesDecoded0 = [InsightState]()
            for string0 in statesContainer {
                statesDecoded0?.append(string0)
            }
        }
        states = statesDecoded0
        let groupARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .groupARN)
        groupARN = groupARNDecoded
        let groupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
