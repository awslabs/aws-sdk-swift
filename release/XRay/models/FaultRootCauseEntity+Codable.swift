// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FaultRootCauseEntity: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case exceptions = "Exceptions"
        case name = "Name"
        case remote = "Remote"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exceptions = exceptions {
            var exceptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exceptions)
            for rootcauseexceptions0 in exceptions {
                try exceptionsContainer.encode(rootcauseexceptions0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let remote = remote {
            try encodeContainer.encode(remote, forKey: .remote)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let exceptionsContainer = try containerValues.decodeIfPresent([RootCauseException].self, forKey: .exceptions)
        var exceptionsDecoded0:[RootCauseException]? = nil
        if let exceptionsContainer = exceptionsContainer {
            exceptionsDecoded0 = [RootCauseException]()
            for structure0 in exceptionsContainer {
                exceptionsDecoded0?.append(structure0)
            }
        }
        exceptions = exceptionsDecoded0
        let remoteDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .remote)
        remote = remoteDecoded
    }
}
