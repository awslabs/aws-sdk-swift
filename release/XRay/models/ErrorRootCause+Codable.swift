// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ErrorRootCause: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientImpacting = "ClientImpacting"
        case services = "Services"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientImpacting = clientImpacting {
            try encodeContainer.encode(clientImpacting, forKey: .clientImpacting)
        }
        if let services = services {
            var servicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .services)
            for errorrootcauseservices0 in services {
                try servicesContainer.encode(errorrootcauseservices0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let servicesContainer = try containerValues.decodeIfPresent([ErrorRootCauseService].self, forKey: .services)
        var servicesDecoded0:[ErrorRootCauseService]? = nil
        if let servicesContainer = servicesContainer {
            servicesDecoded0 = [ErrorRootCauseService]()
            for structure0 in servicesContainer {
                servicesDecoded0?.append(structure0)
            }
        }
        services = servicesDecoded0
        let clientImpactingDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .clientImpacting)
        clientImpacting = clientImpactingDecoded
    }
}
