// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ValueWithServiceIds: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case annotationValue = "AnnotationValue"
        case serviceIds = "ServiceIds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let annotationValue = annotationValue {
            try encodeContainer.encode(annotationValue, forKey: .annotationValue)
        }
        if let serviceIds = serviceIds {
            var serviceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .serviceIds)
            for serviceids0 in serviceIds {
                try serviceIdsContainer.encode(serviceids0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let annotationValueDecoded = try containerValues.decodeIfPresent(AnnotationValue.self, forKey: .annotationValue)
        annotationValue = annotationValueDecoded
        let serviceIdsContainer = try containerValues.decodeIfPresent([ServiceId].self, forKey: .serviceIds)
        var serviceIdsDecoded0:[ServiceId]? = nil
        if let serviceIdsContainer = serviceIdsContainer {
            serviceIdsDecoded0 = [ServiceId]()
            for structure0 in serviceIdsContainer {
                serviceIdsDecoded0?.append(structure0)
            }
        }
        serviceIds = serviceIdsDecoded0
    }
}
