// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GetTimeSeriesServiceStatisticsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case endTime = "EndTime"
        case entitySelectorExpression = "EntitySelectorExpression"
        case forecastStatistics = "ForecastStatistics"
        case groupARN = "GroupARN"
        case groupName = "GroupName"
        case nextToken = "NextToken"
        case period = "Period"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let entitySelectorExpression = entitySelectorExpression {
            try encodeContainer.encode(entitySelectorExpression, forKey: .entitySelectorExpression)
        }
        if let forecastStatistics = forecastStatistics {
            try encodeContainer.encode(forecastStatistics, forKey: .forecastStatistics)
        }
        if let groupARN = groupARN {
            try encodeContainer.encode(groupARN, forKey: .groupARN)
        }
        if let groupName = groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let period = period {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }
}
