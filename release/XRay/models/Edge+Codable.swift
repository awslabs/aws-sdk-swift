// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Edge: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aliases = "Aliases"
        case endTime = "EndTime"
        case referenceId = "ReferenceId"
        case responseTimeHistogram = "ResponseTimeHistogram"
        case startTime = "StartTime"
        case summaryStatistics = "SummaryStatistics"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliases = aliases {
            var aliasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .aliases)
            for aliaslist0 in aliases {
                try aliasesContainer.encode(aliaslist0)
            }
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let referenceId = referenceId {
            try encodeContainer.encode(referenceId, forKey: .referenceId)
        }
        if let responseTimeHistogram = responseTimeHistogram {
            var responseTimeHistogramContainer = encodeContainer.nestedUnkeyedContainer(forKey: .responseTimeHistogram)
            for histogram0 in responseTimeHistogram {
                try responseTimeHistogramContainer.encode(histogram0)
            }
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let summaryStatistics = summaryStatistics {
            try encodeContainer.encode(summaryStatistics, forKey: .summaryStatistics)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let referenceIdDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .referenceId)
        referenceId = referenceIdDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let summaryStatisticsDecoded = try containerValues.decodeIfPresent(EdgeStatistics.self, forKey: .summaryStatistics)
        summaryStatistics = summaryStatisticsDecoded
        let responseTimeHistogramContainer = try containerValues.decodeIfPresent([HistogramEntry].self, forKey: .responseTimeHistogram)
        var responseTimeHistogramDecoded0:[HistogramEntry]? = nil
        if let responseTimeHistogramContainer = responseTimeHistogramContainer {
            responseTimeHistogramDecoded0 = [HistogramEntry]()
            for structure0 in responseTimeHistogramContainer {
                responseTimeHistogramDecoded0?.append(structure0)
            }
        }
        responseTimeHistogram = responseTimeHistogramDecoded0
        let aliasesContainer = try containerValues.decodeIfPresent([Alias].self, forKey: .aliases)
        var aliasesDecoded0:[Alias]? = nil
        if let aliasesContainer = aliasesContainer {
            aliasesDecoded0 = [Alias]()
            for structure0 in aliasesContainer {
                aliasesDecoded0?.append(structure0)
            }
        }
        aliases = aliasesDecoded0
    }
}
