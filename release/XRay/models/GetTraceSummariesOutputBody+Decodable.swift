// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetTraceSummariesOutputBody: Equatable {
    public let traceSummaries: [TraceSummary]?
    public let approximateTime: Date?
    public let tracesProcessedCount: Int?
    public let nextToken: String?
}

extension GetTraceSummariesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case approximateTime = "ApproximateTime"
        case nextToken = "NextToken"
        case traceSummaries = "TraceSummaries"
        case tracesProcessedCount = "TracesProcessedCount"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let traceSummariesContainer = try containerValues.decodeIfPresent([TraceSummary].self, forKey: .traceSummaries)
        var traceSummariesDecoded0:[TraceSummary]? = nil
        if let traceSummariesContainer = traceSummariesContainer {
            traceSummariesDecoded0 = [TraceSummary]()
            for structure0 in traceSummariesContainer {
                traceSummariesDecoded0?.append(structure0)
            }
        }
        traceSummaries = traceSummariesDecoded0
        let approximateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .approximateTime)
        approximateTime = approximateTimeDecoded
        let tracesProcessedCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .tracesProcessedCount)
        tracesProcessedCount = tracesProcessedCountDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
