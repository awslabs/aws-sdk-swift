// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>A sampling rule that services use to decide whether to instrument a request. Rule
///       fields can match properties of the service, or properties of a request. The service can ignore
///       rules that don't match its properties.</p>
public struct SamplingRule: Equatable {
    /// <p>Matches attributes derived from the request.</p>
    public let attributes: [String:String]?
    /// <p>The percentage of matching requests to instrument, after the reservoir is
    ///       exhausted.</p>
    public let fixedRate: Double
    /// <p>Matches the HTTP method of a request.</p>
    public let hTTPMethod: String?
    /// <p>Matches the hostname from a request URL.</p>
    public let host: String?
    /// <p>The priority of the sampling rule.</p>
    public let priority: Int
    /// <p>A fixed number of matching requests to instrument per second, prior to applying the
    ///       fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.</p>
    public let reservoirSize: Int
    /// <p>Matches the ARN of the AWS resource on which the service runs.</p>
    public let resourceARN: String?
    /// <p>The ARN of the sampling rule. Specify a rule by either name or ARN, but not both.</p>
    public let ruleARN: String?
    /// <p>The name of the sampling rule. Specify a rule by either name or ARN, but not both.</p>
    public let ruleName: String?
    /// <p>Matches the <code>name</code> that the service uses to identify itself in segments.</p>
    public let serviceName: String?
    /// <p>Matches the <code>origin</code> that the service uses to identify its type in segments.</p>
    public let serviceType: String?
    /// <p>Matches the path from a request URL.</p>
    public let uRLPath: String?
    /// <p>The version of the sampling rule format (<code>1</code>).</p>
    public let version: Int

    public init (
        attributes: [String:String]? = nil,
        fixedRate: Double = 0.0,
        hTTPMethod: String? = nil,
        host: String? = nil,
        priority: Int = 0,
        reservoirSize: Int = 0,
        resourceARN: String? = nil,
        ruleARN: String? = nil,
        ruleName: String? = nil,
        serviceName: String? = nil,
        serviceType: String? = nil,
        uRLPath: String? = nil,
        version: Int = 0
    )
    {
        self.attributes = attributes
        self.fixedRate = fixedRate
        self.hTTPMethod = hTTPMethod
        self.host = host
        self.priority = priority
        self.reservoirSize = reservoirSize
        self.resourceARN = resourceARN
        self.ruleARN = ruleARN
        self.ruleName = ruleName
        self.serviceName = serviceName
        self.serviceType = serviceType
        self.uRLPath = uRLPath
        self.version = version
    }
}
