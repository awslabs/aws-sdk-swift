// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetTraceSummariesInputBody: Equatable {
    public let startTime: Date?
    public let endTime: Date?
    public let timeRangeType: TimeRangeType?
    public let sampling: Bool?
    public let samplingStrategy: SamplingStrategy?
    public let filterExpression: String?
    public let nextToken: String?
}

extension GetTraceSummariesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case endTime = "EndTime"
        case filterExpression = "FilterExpression"
        case nextToken = "NextToken"
        case sampling = "Sampling"
        case samplingStrategy = "SamplingStrategy"
        case startTime = "StartTime"
        case timeRangeType = "TimeRangeType"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let timeRangeTypeDecoded = try containerValues.decodeIfPresent(TimeRangeType.self, forKey: .timeRangeType)
        timeRangeType = timeRangeTypeDecoded
        let samplingDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .sampling)
        sampling = samplingDecoded
        let samplingStrategyDecoded = try containerValues.decodeIfPresent(SamplingStrategy.self, forKey: .samplingStrategy)
        samplingStrategy = samplingStrategyDecoded
        let filterExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filterExpression)
        filterExpression = filterExpressionDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
