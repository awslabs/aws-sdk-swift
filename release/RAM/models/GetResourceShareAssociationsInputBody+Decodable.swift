// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetResourceShareAssociationsInputBody: Equatable {
    public let associationType: ResourceShareAssociationType?
    public let resourceShareArns: [String]?
    public let resourceArn: String?
    public let principal: String?
    public let associationStatus: ResourceShareAssociationStatus?
    public let nextToken: String?
    public let maxResults: Int?
}

extension GetResourceShareAssociationsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case associationStatus
        case associationType
        case maxResults
        case nextToken
        case principal
        case resourceArn
        case resourceShareArns
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationTypeDecoded = try containerValues.decodeIfPresent(ResourceShareAssociationType.self, forKey: .associationType)
        associationType = associationTypeDecoded
        let resourceShareArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .resourceShareArns)
        var resourceShareArnsDecoded0:[String]? = nil
        if let resourceShareArnsContainer = resourceShareArnsContainer {
            resourceShareArnsDecoded0 = [String]()
            for string0 in resourceShareArnsContainer {
                resourceShareArnsDecoded0?.append(string0)
            }
        }
        resourceShareArns = resourceShareArnsDecoded0
        let resourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let principalDecoded = try containerValues.decodeIfPresent(String.self, forKey: .principal)
        principal = principalDecoded
        let associationStatusDecoded = try containerValues.decodeIfPresent(ResourceShareAssociationStatus.self, forKey: .associationStatus)
        associationStatus = associationStatusDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
