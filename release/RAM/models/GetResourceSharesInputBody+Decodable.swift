// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetResourceSharesInputBody: Equatable {
    public let resourceShareArns: [String]?
    public let resourceShareStatus: ResourceShareStatus?
    public let resourceOwner: ResourceOwner?
    public let name: String?
    public let tagFilters: [TagFilter]?
    public let nextToken: String?
    public let maxResults: Int?
}

extension GetResourceSharesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maxResults
        case name
        case nextToken
        case resourceOwner
        case resourceShareArns
        case resourceShareStatus
        case tagFilters
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceShareArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .resourceShareArns)
        var resourceShareArnsDecoded0:[String]? = nil
        if let resourceShareArnsContainer = resourceShareArnsContainer {
            resourceShareArnsDecoded0 = [String]()
            for string0 in resourceShareArnsContainer {
                resourceShareArnsDecoded0?.append(string0)
            }
        }
        resourceShareArns = resourceShareArnsDecoded0
        let resourceShareStatusDecoded = try containerValues.decodeIfPresent(ResourceShareStatus.self, forKey: .resourceShareStatus)
        resourceShareStatus = resourceShareStatusDecoded
        let resourceOwnerDecoded = try containerValues.decodeIfPresent(ResourceOwner.self, forKey: .resourceOwner)
        resourceOwner = resourceOwnerDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let tagFiltersContainer = try containerValues.decodeIfPresent([TagFilter].self, forKey: .tagFilters)
        var tagFiltersDecoded0:[TagFilter]? = nil
        if let tagFiltersContainer = tagFiltersContainer {
            tagFiltersDecoded0 = [TagFilter]()
            for structure0 in tagFiltersContainer {
                tagFiltersDecoded0?.append(structure0)
            }
        }
        tagFilters = tagFiltersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
