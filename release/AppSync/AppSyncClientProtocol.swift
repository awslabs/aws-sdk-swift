// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>AWS AppSync provides API actions for creating and interacting with data sources using
///          GraphQL from your application.</p>
public protocol AppSyncClientProtocol {
    /// <p>Creates a cache for the GraphQL API.</p>
    func createApiCache(input: CreateApiCacheInput, completion: @escaping (SdkResult<CreateApiCacheOutputResponse, CreateApiCacheOutputError>) -> Void)
    /// <p>Creates a unique key that you can distribute to clients who are executing your
    ///          API.</p>
    func createApiKey(input: CreateApiKeyInput, completion: @escaping (SdkResult<CreateApiKeyOutputResponse, CreateApiKeyOutputError>) -> Void)
    /// <p>Creates a <code>DataSource</code> object.</p>
    func createDataSource(input: CreateDataSourceInput, completion: @escaping (SdkResult<CreateDataSourceOutputResponse, CreateDataSourceOutputError>) -> Void)
    /// <p>Creates a <code>Function</code> object.</p>
    ///          <p>A function is a reusable entity. Multiple functions can be used to compose the resolver
    ///          logic.</p>
    func createFunction(input: CreateFunctionInput, completion: @escaping (SdkResult<CreateFunctionOutputResponse, CreateFunctionOutputError>) -> Void)
    /// <p>Creates a <code>GraphqlApi</code> object.</p>
    func createGraphqlApi(input: CreateGraphqlApiInput, completion: @escaping (SdkResult<CreateGraphqlApiOutputResponse, CreateGraphqlApiOutputError>) -> Void)
    /// <p>Creates a <code>Resolver</code> object.</p>
    ///          <p>A resolver converts incoming requests into a format that a data source can understand
    ///          and converts the data source's responses into GraphQL.</p>
    func createResolver(input: CreateResolverInput, completion: @escaping (SdkResult<CreateResolverOutputResponse, CreateResolverOutputError>) -> Void)
    /// <p>Creates a <code>Type</code> object.</p>
    func createType(input: CreateTypeInput, completion: @escaping (SdkResult<CreateTypeOutputResponse, CreateTypeOutputError>) -> Void)
    /// <p>Deletes an <code>ApiCache</code> object.</p>
    func deleteApiCache(input: DeleteApiCacheInput, completion: @escaping (SdkResult<DeleteApiCacheOutputResponse, DeleteApiCacheOutputError>) -> Void)
    /// <p>Deletes an API key.</p>
    func deleteApiKey(input: DeleteApiKeyInput, completion: @escaping (SdkResult<DeleteApiKeyOutputResponse, DeleteApiKeyOutputError>) -> Void)
    /// <p>Deletes a <code>DataSource</code> object.</p>
    func deleteDataSource(input: DeleteDataSourceInput, completion: @escaping (SdkResult<DeleteDataSourceOutputResponse, DeleteDataSourceOutputError>) -> Void)
    /// <p>Deletes a <code>Function</code>.</p>
    func deleteFunction(input: DeleteFunctionInput, completion: @escaping (SdkResult<DeleteFunctionOutputResponse, DeleteFunctionOutputError>) -> Void)
    /// <p>Deletes a <code>GraphqlApi</code> object.</p>
    func deleteGraphqlApi(input: DeleteGraphqlApiInput, completion: @escaping (SdkResult<DeleteGraphqlApiOutputResponse, DeleteGraphqlApiOutputError>) -> Void)
    /// <p>Deletes a <code>Resolver</code> object.</p>
    func deleteResolver(input: DeleteResolverInput, completion: @escaping (SdkResult<DeleteResolverOutputResponse, DeleteResolverOutputError>) -> Void)
    /// <p>Deletes a <code>Type</code> object.</p>
    func deleteType(input: DeleteTypeInput, completion: @escaping (SdkResult<DeleteTypeOutputResponse, DeleteTypeOutputError>) -> Void)
    /// <p>Flushes an <code>ApiCache</code> object.</p>
    func flushApiCache(input: FlushApiCacheInput, completion: @escaping (SdkResult<FlushApiCacheOutputResponse, FlushApiCacheOutputError>) -> Void)
    /// <p>Retrieves an <code>ApiCache</code> object.</p>
    func getApiCache(input: GetApiCacheInput, completion: @escaping (SdkResult<GetApiCacheOutputResponse, GetApiCacheOutputError>) -> Void)
    /// <p>Retrieves a <code>DataSource</code> object.</p>
    func getDataSource(input: GetDataSourceInput, completion: @escaping (SdkResult<GetDataSourceOutputResponse, GetDataSourceOutputError>) -> Void)
    /// <p>Get a <code>Function</code>.</p>
    func getFunction(input: GetFunctionInput, completion: @escaping (SdkResult<GetFunctionOutputResponse, GetFunctionOutputError>) -> Void)
    /// <p>Retrieves a <code>GraphqlApi</code> object.</p>
    func getGraphqlApi(input: GetGraphqlApiInput, completion: @escaping (SdkResult<GetGraphqlApiOutputResponse, GetGraphqlApiOutputError>) -> Void)
    /// <p>Retrieves the introspection schema for a GraphQL API.</p>
    func getIntrospectionSchema(input: GetIntrospectionSchemaInput, completion: @escaping (SdkResult<GetIntrospectionSchemaOutputResponse, GetIntrospectionSchemaOutputError>) -> Void)
    /// <p>Retrieves a <code>Resolver</code> object.</p>
    func getResolver(input: GetResolverInput, completion: @escaping (SdkResult<GetResolverOutputResponse, GetResolverOutputError>) -> Void)
    /// <p>Retrieves the current status of a schema creation operation.</p>
    func getSchemaCreationStatus(input: GetSchemaCreationStatusInput, completion: @escaping (SdkResult<GetSchemaCreationStatusOutputResponse, GetSchemaCreationStatusOutputError>) -> Void)
    /// <p>Retrieves a <code>Type</code> object.</p>
    func getType(input: GetTypeInput, completion: @escaping (SdkResult<GetTypeOutputResponse, GetTypeOutputError>) -> Void)
    /// <p>Lists the API keys for a given API.</p>
    ///          <note>
    ///             <p>API keys are deleted automatically 60 days after they expire. However, they may
    ///             still be included in the response until they have actually been deleted. You can safely
    ///             call <code>DeleteApiKey</code> to manually delete a key before it's automatically
    ///             deleted.</p>
    ///          </note>
    func listApiKeys(input: ListApiKeysInput, completion: @escaping (SdkResult<ListApiKeysOutputResponse, ListApiKeysOutputError>) -> Void)
    /// <p>Lists the data sources for a given API.</p>
    func listDataSources(input: ListDataSourcesInput, completion: @escaping (SdkResult<ListDataSourcesOutputResponse, ListDataSourcesOutputError>) -> Void)
    /// <p>List multiple functions.</p>
    func listFunctions(input: ListFunctionsInput, completion: @escaping (SdkResult<ListFunctionsOutputResponse, ListFunctionsOutputError>) -> Void)
    /// <p>Lists your GraphQL APIs.</p>
    func listGraphqlApis(input: ListGraphqlApisInput, completion: @escaping (SdkResult<ListGraphqlApisOutputResponse, ListGraphqlApisOutputError>) -> Void)
    /// <p>Lists the resolvers for a given API and type.</p>
    func listResolvers(input: ListResolversInput, completion: @escaping (SdkResult<ListResolversOutputResponse, ListResolversOutputError>) -> Void)
    /// <p>List the resolvers that are associated with a specific function.</p>
    func listResolversByFunction(input: ListResolversByFunctionInput, completion: @escaping (SdkResult<ListResolversByFunctionOutputResponse, ListResolversByFunctionOutputError>) -> Void)
    /// <p>Lists the tags for a resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p>Lists the types for a given API.</p>
    func listTypes(input: ListTypesInput, completion: @escaping (SdkResult<ListTypesOutputResponse, ListTypesOutputError>) -> Void)
    /// <p>Adds a new schema to your GraphQL API.</p>
    ///          <p>This operation is asynchronous. Use  to
    ///          determine when it has completed.</p>
    func startSchemaCreation(input: StartSchemaCreationInput, completion: @escaping (SdkResult<StartSchemaCreationOutputResponse, StartSchemaCreationOutputError>) -> Void)
    /// <p>Tags a resource with user-supplied tags.</p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p>Untags a resource.</p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// <p>Updates the cache for the GraphQL API.</p>
    func updateApiCache(input: UpdateApiCacheInput, completion: @escaping (SdkResult<UpdateApiCacheOutputResponse, UpdateApiCacheOutputError>) -> Void)
    /// <p>Updates an API key. The key can be updated while it is not deleted.</p>
    func updateApiKey(input: UpdateApiKeyInput, completion: @escaping (SdkResult<UpdateApiKeyOutputResponse, UpdateApiKeyOutputError>) -> Void)
    /// <p>Updates a <code>DataSource</code> object.</p>
    func updateDataSource(input: UpdateDataSourceInput, completion: @escaping (SdkResult<UpdateDataSourceOutputResponse, UpdateDataSourceOutputError>) -> Void)
    /// <p>Updates a <code>Function</code> object.</p>
    func updateFunction(input: UpdateFunctionInput, completion: @escaping (SdkResult<UpdateFunctionOutputResponse, UpdateFunctionOutputError>) -> Void)
    /// <p>Updates a <code>GraphqlApi</code> object.</p>
    func updateGraphqlApi(input: UpdateGraphqlApiInput, completion: @escaping (SdkResult<UpdateGraphqlApiOutputResponse, UpdateGraphqlApiOutputError>) -> Void)
    /// <p>Updates a <code>Resolver</code> object.</p>
    func updateResolver(input: UpdateResolverInput, completion: @escaping (SdkResult<UpdateResolverOutputResponse, UpdateResolverOutputError>) -> Void)
    /// <p>Updates a <code>Type</code> object.</p>
    func updateType(input: UpdateTypeInput, completion: @escaping (SdkResult<UpdateTypeOutputResponse, UpdateTypeOutputError>) -> Void)
}
