// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum ApiCacheType {
    case large
    case large12x
    case large2x
    case large4x
    case large8x
    case medium
    case r42xlarge
    case r44xlarge
    case r48xlarge
    case r4Large
    case r4Xlarge
    case small
    case t2Medium
    case t2Small
    case xlarge
    case sdkUnknown(String)
}

extension ApiCacheType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ApiCacheType] {
        return [
            .large,
            .large12x,
            .large2x,
            .large4x,
            .large8x,
            .medium,
            .r42xlarge,
            .r44xlarge,
            .r48xlarge,
            .r4Large,
            .r4Xlarge,
            .small,
            .t2Medium,
            .t2Small,
            .xlarge,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .large: return "LARGE"
        case .large12x: return "LARGE_12X"
        case .large2x: return "LARGE_2X"
        case .large4x: return "LARGE_4X"
        case .large8x: return "LARGE_8X"
        case .medium: return "MEDIUM"
        case .r42xlarge: return "R4_2XLARGE"
        case .r44xlarge: return "R4_4XLARGE"
        case .r48xlarge: return "R4_8XLARGE"
        case .r4Large: return "R4_LARGE"
        case .r4Xlarge: return "R4_XLARGE"
        case .small: return "SMALL"
        case .t2Medium: return "T2_MEDIUM"
        case .t2Small: return "T2_SMALL"
        case .xlarge: return "XLARGE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ApiCacheType(rawValue: rawValue) ?? ApiCacheType.sdkUnknown(rawValue)
    }
}
