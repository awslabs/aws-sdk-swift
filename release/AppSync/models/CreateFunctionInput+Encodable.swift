// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateFunctionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dataSourceName
        case description
        case functionVersion
        case name
        case requestMappingTemplate
        case responseMappingTemplate
        case syncConfig
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceName = dataSourceName {
            try encodeContainer.encode(dataSourceName, forKey: .dataSourceName)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let functionVersion = functionVersion {
            try encodeContainer.encode(functionVersion, forKey: .functionVersion)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let requestMappingTemplate = requestMappingTemplate {
            try encodeContainer.encode(requestMappingTemplate, forKey: .requestMappingTemplate)
        }
        if let responseMappingTemplate = responseMappingTemplate {
            try encodeContainer.encode(responseMappingTemplate, forKey: .responseMappingTemplate)
        }
        if let syncConfig = syncConfig {
            try encodeContainer.encode(syncConfig, forKey: .syncConfig)
        }
    }
}
