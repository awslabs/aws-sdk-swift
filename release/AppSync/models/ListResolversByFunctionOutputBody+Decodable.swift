// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListResolversByFunctionOutputBody: Equatable {
    public let resolvers: [Resolver]?
    public let nextToken: String?
}

extension ListResolversByFunctionOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case resolvers
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resolversContainer = try containerValues.decodeIfPresent([Resolver].self, forKey: .resolvers)
        var resolversDecoded0:[Resolver]? = nil
        if let resolversContainer = resolversContainer {
            resolversDecoded0 = [Resolver]()
            for structure0 in resolversContainer {
                resolversDecoded0?.append(structure0)
            }
        }
        resolvers = resolversDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
