// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CachingConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cachingKeys
        case ttl
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cachingKeys = cachingKeys {
            var cachingKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cachingKeys)
            for cachingkeys0 in cachingKeys {
                try cachingKeysContainer.encode(cachingkeys0)
            }
        }
        if ttl != 0 {
            try encodeContainer.encode(ttl, forKey: .ttl)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ttlDecoded = try containerValues.decode(Int.self, forKey: .ttl)
        ttl = ttlDecoded
        let cachingKeysContainer = try containerValues.decodeIfPresent([String].self, forKey: .cachingKeys)
        var cachingKeysDecoded0:[String]? = nil
        if let cachingKeysContainer = cachingKeysContainer {
            cachingKeysDecoded0 = [String]()
            for string0 in cachingKeysContainer {
                cachingKeysDecoded0?.append(string0)
            }
        }
        cachingKeys = cachingKeysDecoded0
    }
}
