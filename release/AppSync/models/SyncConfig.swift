// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes a Sync configuration for a resolver.</p>
///          <p>Contains information on which Conflict Detection as well as Resolution strategy should
///          be performed when the resolver is invoked.</p>
public struct SyncConfig: Equatable {
    /// <p>The Conflict Detection strategy to use.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>VERSION</b>: Detect conflicts based on object
    ///                versions for this resolver.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>NONE</b>: Do not detect conflicts when executing
    ///                this resolver.</p>
    ///             </li>
    ///          </ul>
    public let conflictDetection: ConflictDetectionType?
    /// <p>The Conflict Resolution strategy to perform in the event of a conflict.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>OPTIMISTIC_CONCURRENCY</b>: Resolve conflicts by
    ///                rejecting mutations when versions do not match the latest version at the
    ///                server.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>AUTOMERGE</b>: Resolve conflicts with the
    ///                Automerge conflict resolution strategy.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>LAMBDA</b>: Resolve conflicts with a Lambda
    ///                function supplied in the LambdaConflictHandlerConfig.</p>
    ///             </li>
    ///          </ul>
    public let conflictHandler: ConflictHandlerType?
    /// <p>The <code>LambdaConflictHandlerConfig</code> when configuring LAMBDA as the Conflict
    ///          Handler.</p>
    public let lambdaConflictHandlerConfig: LambdaConflictHandlerConfig?

    public init (
        conflictDetection: ConflictDetectionType? = nil,
        conflictHandler: ConflictHandlerType? = nil,
        lambdaConflictHandlerConfig: LambdaConflictHandlerConfig? = nil
    )
    {
        self.conflictDetection = conflictDetection
        self.conflictHandler = conflictHandler
        self.lambdaConflictHandlerConfig = lambdaConflictHandlerConfig
    }
}
