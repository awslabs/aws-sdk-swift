// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateGraphqlApiInputBody: Equatable {
    public let name: String?
    public let logConfig: LogConfig?
    public let authenticationType: AuthenticationType?
    public let userPoolConfig: UserPoolConfig?
    public let openIDConnectConfig: OpenIDConnectConfig?
    public let tags: [String:String]?
    public let additionalAuthenticationProviders: [AdditionalAuthenticationProvider]?
    public let xrayEnabled: Bool
}

extension CreateGraphqlApiInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case additionalAuthenticationProviders
        case authenticationType
        case logConfig
        case name
        case openIDConnectConfig
        case tags
        case userPoolConfig
        case xrayEnabled
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let logConfigDecoded = try containerValues.decodeIfPresent(LogConfig.self, forKey: .logConfig)
        logConfig = logConfigDecoded
        let authenticationTypeDecoded = try containerValues.decodeIfPresent(AuthenticationType.self, forKey: .authenticationType)
        authenticationType = authenticationTypeDecoded
        let userPoolConfigDecoded = try containerValues.decodeIfPresent(UserPoolConfig.self, forKey: .userPoolConfig)
        userPoolConfig = userPoolConfigDecoded
        let openIDConnectConfigDecoded = try containerValues.decodeIfPresent(OpenIDConnectConfig.self, forKey: .openIDConnectConfig)
        openIDConnectConfig = openIDConnectConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let additionalAuthenticationProvidersContainer = try containerValues.decodeIfPresent([AdditionalAuthenticationProvider].self, forKey: .additionalAuthenticationProviders)
        var additionalAuthenticationProvidersDecoded0:[AdditionalAuthenticationProvider]? = nil
        if let additionalAuthenticationProvidersContainer = additionalAuthenticationProvidersContainer {
            additionalAuthenticationProvidersDecoded0 = [AdditionalAuthenticationProvider]()
            for structure0 in additionalAuthenticationProvidersContainer {
                additionalAuthenticationProvidersDecoded0?.append(structure0)
            }
        }
        additionalAuthenticationProviders = additionalAuthenticationProvidersDecoded0
        let xrayEnabledDecoded = try containerValues.decode(Bool.self, forKey: .xrayEnabled)
        xrayEnabled = xrayEnabledDecoded
    }
}
