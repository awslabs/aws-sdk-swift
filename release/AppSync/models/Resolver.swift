// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes a resolver.</p>
public struct Resolver: Equatable {
    /// <p>The caching configuration for the resolver.</p>
    public let cachingConfig: CachingConfig?
    /// <p>The resolver data source name.</p>
    public let dataSourceName: String?
    /// <p>The resolver field name.</p>
    public let fieldName: String?
    /// <p>The resolver type.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>UNIT</b>: A UNIT resolver type. A UNIT resolver is
    ///                the default resolver type. A UNIT resolver enables you to execute a GraphQL query
    ///                against a single data source.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>PIPELINE</b>: A PIPELINE resolver type. A PIPELINE
    ///                resolver enables you to execute a series of <code>Function</code> in a serial manner.
    ///                You can use a pipeline resolver to execute a GraphQL query against multiple data
    ///                sources.</p>
    ///             </li>
    ///          </ul>
    public let kind: ResolverKind?
    /// <p>The <code>PipelineConfig</code>.</p>
    public let pipelineConfig: PipelineConfig?
    /// <p>The request mapping template.</p>
    public let requestMappingTemplate: String?
    /// <p>The resolver ARN.</p>
    public let resolverArn: String?
    /// <p>The response mapping template.</p>
    public let responseMappingTemplate: String?
    /// <p>The <code>SyncConfig</code> for a resolver attached to a versioned datasource.</p>
    public let syncConfig: SyncConfig?
    /// <p>The resolver type name.</p>
    public let typeName: String?

    public init (
        cachingConfig: CachingConfig? = nil,
        dataSourceName: String? = nil,
        fieldName: String? = nil,
        kind: ResolverKind? = nil,
        pipelineConfig: PipelineConfig? = nil,
        requestMappingTemplate: String? = nil,
        resolverArn: String? = nil,
        responseMappingTemplate: String? = nil,
        syncConfig: SyncConfig? = nil,
        typeName: String? = nil
    )
    {
        self.cachingConfig = cachingConfig
        self.dataSourceName = dataSourceName
        self.fieldName = fieldName
        self.kind = kind
        self.pipelineConfig = pipelineConfig
        self.requestMappingTemplate = requestMappingTemplate
        self.resolverArn = resolverArn
        self.responseMappingTemplate = responseMappingTemplate
        self.syncConfig = syncConfig
        self.typeName = typeName
    }
}
