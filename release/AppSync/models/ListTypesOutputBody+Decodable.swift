// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTypesOutputBody: Equatable {
    public let types: [`Type`]?
    public let nextToken: String?
}

extension ListTypesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case types
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typesContainer = try containerValues.decodeIfPresent([`Type`].self, forKey: .types)
        var typesDecoded0:[`Type`]? = nil
        if let typesContainer = typesContainer {
            typesDecoded0 = [`Type`]()
            for structure0 in typesContainer {
                typesDecoded0?.append(structure0)
            }
        }
        types = typesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
