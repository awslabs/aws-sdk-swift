// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents the input of a <code>CreateApiCache</code> operation.</p>
public struct CreateApiCacheInput: Equatable {
    /// <p>Caching behavior.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>FULL_REQUEST_CACHING</b>: All requests are fully
    ///                cached.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>PER_RESOLVER_CACHING</b>: Individual resolvers
    ///                that you specify are cached.</p>
    ///             </li>
    ///          </ul>
    public let apiCachingBehavior: ApiCachingBehavior?
    /// <p>The GraphQL API Id.</p>
    public let apiId: String?
    /// <p>At rest encryption flag for cache. This setting cannot be updated after creation.</p>
    public let atRestEncryptionEnabled: Bool
    /// <p>Transit encryption flag when connecting to cache. This setting cannot be updated after
    ///          creation.</p>
    public let transitEncryptionEnabled: Bool
    /// <p>TTL in seconds for cache entries.</p>
    ///          <p>Valid values are between 1 and 3600 seconds.</p>
    public let ttl: Int
    /// <p>The cache instance type. Valid values are </p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>SMALL</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>MEDIUM</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LARGE</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>XLARGE</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LARGE_2X</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LARGE_4X</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LARGE_8X</code> (not available in all regions)</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LARGE_12X</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.</p>
    ///          <p>The following legacy instance types are available, but their use is discouraged:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>T2_SMALL</b>: A t2.small instance type.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>T2_MEDIUM</b>: A t2.medium instance type.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>R4_LARGE</b>: A r4.large instance type.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>R4_XLARGE</b>: A r4.xlarge instance type.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p>
    ///             </li>
    ///          </ul>
    public let type: ApiCacheType?

    public init (
        apiCachingBehavior: ApiCachingBehavior? = nil,
        apiId: String? = nil,
        atRestEncryptionEnabled: Bool = false,
        transitEncryptionEnabled: Bool = false,
        ttl: Int = 0,
        type: ApiCacheType? = nil
    )
    {
        self.apiCachingBehavior = apiCachingBehavior
        self.apiId = apiId
        self.atRestEncryptionEnabled = atRestEncryptionEnabled
        self.transitEncryptionEnabled = transitEncryptionEnabled
        self.ttl = ttl
        self.type = type
    }
}
