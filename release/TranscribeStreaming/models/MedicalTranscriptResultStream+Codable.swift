// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MedicalTranscriptResultStream: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case badRequestException = "BadRequestException"
        case conflictException = "ConflictException"
        case internalFailureException = "InternalFailureException"
        case limitExceededException = "LimitExceededException"
        case serviceUnavailableException = "ServiceUnavailableException"
        case transcriptEvent = "TranscriptEvent"
        case sdkUnknown
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .badRequestException(badRequestException):
                if let badRequestException = badRequestException {
                    try container.encode(badRequestException, forKey: .badRequestException)
                }
            case let .conflictException(conflictException):
                if let conflictException = conflictException {
                    try container.encode(conflictException, forKey: .conflictException)
                }
            case let .internalFailureException(internalFailureException):
                if let internalFailureException = internalFailureException {
                    try container.encode(internalFailureException, forKey: .internalFailureException)
                }
            case let .limitExceededException(limitExceededException):
                if let limitExceededException = limitExceededException {
                    try container.encode(limitExceededException, forKey: .limitExceededException)
                }
            case let .serviceUnavailableException(serviceUnavailableException):
                if let serviceUnavailableException = serviceUnavailableException {
                    try container.encode(serviceUnavailableException, forKey: .serviceUnavailableException)
                }
            case let .transcriptEvent(transcriptEvent):
                if let transcriptEvent = transcriptEvent {
                    try container.encode(transcriptEvent, forKey: .transcriptEvent)
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let transcriptEventDecoded = try values.decodeIfPresent(MedicalTranscriptEvent.self, forKey: .transcriptEvent)
        if let transcriptEvent = transcriptEventDecoded {
            self = .transcriptEvent(transcriptEvent)
            return
        }
        let badRequestExceptionDecoded = try values.decodeIfPresent(BadRequestException.self, forKey: .badRequestException)
        if let badRequestException = badRequestExceptionDecoded {
            self = .badRequestException(badRequestException)
            return
        }
        let limitExceededExceptionDecoded = try values.decodeIfPresent(LimitExceededException.self, forKey: .limitExceededException)
        if let limitExceededException = limitExceededExceptionDecoded {
            self = .limitExceededException(limitExceededException)
            return
        }
        let internalFailureExceptionDecoded = try values.decodeIfPresent(InternalFailureException.self, forKey: .internalFailureException)
        if let internalFailureException = internalFailureExceptionDecoded {
            self = .internalFailureException(internalFailureException)
            return
        }
        let conflictExceptionDecoded = try values.decodeIfPresent(ConflictException.self, forKey: .conflictException)
        if let conflictException = conflictExceptionDecoded {
            self = .conflictException(conflictException)
            return
        }
        let serviceUnavailableExceptionDecoded = try values.decodeIfPresent(ServiceUnavailableException.self, forKey: .serviceUnavailableException)
        if let serviceUnavailableException = serviceUnavailableExceptionDecoded {
            self = .serviceUnavailableException(serviceUnavailableException)
            return
        }
        self = .sdkUnknown("")
    }
}
