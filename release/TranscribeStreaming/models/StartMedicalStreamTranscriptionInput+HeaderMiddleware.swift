// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct StartMedicalStreamTranscriptionInputHeadersMiddleware: Middleware {
    public let id: String = "StartMedicalStreamTranscriptionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartMedicalStreamTranscriptionInput>,
                  next: H) -> Swift.Result<OperationOutput<StartMedicalStreamTranscriptionOutput>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let contentIdentificationType = input.operationInput.contentIdentificationType {
            input.builder.withHeader(name: "x-amzn-transcribe-content-identification-type", value: String(contentIdentificationType.rawValue))
        }
        input.builder.withHeader(name: "x-amzn-transcribe-enable-channel-identification", value: String(input.operationInput.enableChannelIdentification))
        if let languageCode = input.operationInput.languageCode {
            input.builder.withHeader(name: "x-amzn-transcribe-language-code", value: String(languageCode.rawValue))
        }
        if let mediaEncoding = input.operationInput.mediaEncoding {
            input.builder.withHeader(name: "x-amzn-transcribe-media-encoding", value: String(mediaEncoding.rawValue))
        }
        if let mediaSampleRateHertz = input.operationInput.mediaSampleRateHertz {
            input.builder.withHeader(name: "x-amzn-transcribe-sample-rate", value: String(mediaSampleRateHertz))
        }
        if let numberOfChannels = input.operationInput.numberOfChannels {
            input.builder.withHeader(name: "x-amzn-transcribe-number-of-channels", value: String(numberOfChannels))
        }
        if let sessionId = input.operationInput.sessionId {
            input.builder.withHeader(name: "x-amzn-transcribe-session-id", value: String(sessionId))
        }
        input.builder.withHeader(name: "x-amzn-transcribe-show-speaker-label", value: String(input.operationInput.showSpeakerLabel))
        if let specialty = input.operationInput.specialty {
            input.builder.withHeader(name: "x-amzn-transcribe-specialty", value: String(specialty.rawValue))
        }
        if let type = input.operationInput.type {
            input.builder.withHeader(name: "x-amzn-transcribe-type", value: String(type.rawValue))
        }
        if let vocabularyName = input.operationInput.vocabularyName {
            input.builder.withHeader(name: "x-amzn-transcribe-vocabulary-name", value: String(vocabularyName))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartMedicalStreamTranscriptionInput>
    public typealias MOutput = OperationOutput<StartMedicalStreamTranscriptionOutput>
    public typealias Context = HttpContext
    public typealias MError = SdkError<StartMedicalStreamTranscriptionOutputError>
}
