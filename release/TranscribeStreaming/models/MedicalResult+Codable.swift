// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MedicalResult: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alternatives = "Alternatives"
        case channelId = "ChannelId"
        case endTime = "EndTime"
        case isPartial = "IsPartial"
        case resultId = "ResultId"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alternatives = alternatives {
            var alternativesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .alternatives)
            for medicalalternativelist0 in alternatives {
                try alternativesContainer.encode(medicalalternativelist0)
            }
        }
        if let channelId = channelId {
            try encodeContainer.encode(channelId, forKey: .channelId)
        }
        if endTime != 0.0 {
            try encodeContainer.encode(endTime, forKey: .endTime)
        }
        if isPartial != false {
            try encodeContainer.encode(isPartial, forKey: .isPartial)
        }
        if let resultId = resultId {
            try encodeContainer.encode(resultId, forKey: .resultId)
        }
        if startTime != 0.0 {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resultId)
        resultId = resultIdDecoded
        let startTimeDecoded = try containerValues.decode(Double.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decode(Double.self, forKey: .endTime)
        endTime = endTimeDecoded
        let isPartialDecoded = try containerValues.decode(Bool.self, forKey: .isPartial)
        isPartial = isPartialDecoded
        let alternativesContainer = try containerValues.decodeIfPresent([MedicalAlternative].self, forKey: .alternatives)
        var alternativesDecoded0:[MedicalAlternative]? = nil
        if let alternativesContainer = alternativesContainer {
            alternativesDecoded0 = [MedicalAlternative]()
            for structure0 in alternativesContainer {
                alternativesDecoded0?.append(structure0)
            }
        }
        alternatives = alternativesDecoded0
        let channelIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .channelId)
        channelId = channelIdDecoded
    }
}
