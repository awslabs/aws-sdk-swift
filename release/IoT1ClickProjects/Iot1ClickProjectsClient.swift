// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation

public class Iot1ClickProjectsClient {
    let client: SdkHttpClient
    let config: Iot1ClickProjectsClientConfiguration
    let serviceName = "IoT 1Click Projects"
    let encoder: RequestEncoder
    let decoder: ResponseDecoder

    public init(config: Iot1ClickProjectsClientConfiguration) {
        client = SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        self.encoder = config.encoder ?? encoder
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public class Iot1ClickProjectsClientConfiguration: ClientRuntime.Configuration, AWSClientConfiguration {

        public var region: String
        public var credentialsProvider: AWSCredentialsProvider
        public var signingRegion: String
        public var endpointResolver: EndpointResolver

        public init (
            credentialsProvider: AWSCredentialsProvider,
            endpointResolver: EndpointResolver,
            region: String,
            signingRegion: String
        ) throws
        {
            self.credentialsProvider = credentialsProvider
            self.endpointResolver = endpointResolver
            self.region = region
            self.signingRegion = signingRegion
        }

        public convenience init(credentialsProvider: AWSCredentialsProvider) throws {
            let region = "us-east-1"
            let signingRegion = "us-east-1"
            let endpointResolver = DefaultEndpointResolver()
            try self.init(
                credentialsProvider: credentialsProvider,
                endpointResolver: endpointResolver,
                region: region,
                signingRegion: signingRegion
            )
        }

        public static func `default`() throws -> Iot1ClickProjectsClientConfiguration {
            let awsCredsProvider = try AWSCredentialsProvider.fromEnv()
            return try Iot1ClickProjectsClientConfiguration(credentialsProvider: awsCredsProvider)
        }
    }
}

extension Iot1ClickProjectsClient: Iot1ClickProjectsClientProtocol {
    /// <p>Associates a physical device with a placement.</p>
    public func associateDeviceWithPlacement(input: AssociateDeviceWithPlacementInput, completion: @escaping (SdkResult<AssociateDeviceWithPlacementOutput, AssociateDeviceWithPlacementOutputError>) -> Void)
    {
        guard let projectName = input.projectName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component projectName unexpectedly nil"))))
            return
        }
        guard let placementName = input.placementName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component placementName unexpectedly nil"))))
            return
        }
        guard let deviceTemplateName = input.deviceTemplateName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component deviceTemplateName unexpectedly nil"))))
            return
        }
        let urlPath = "/projects/\(projectName)/placements/\(placementName)/devices/\(deviceTemplateName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "associateDeviceWithPlacement")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "projects.iot1click.\(config.region).amazonaws.com")
                      .withSigningName(value: "iot1click")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AssociateDeviceWithPlacementInput, AssociateDeviceWithPlacementOutput, AssociateDeviceWithPlacementOutputError>(id: "associateDeviceWithPlacement")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AssociateDeviceWithPlacementInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AssociateDeviceWithPlacementInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AssociateDeviceWithPlacementInput, AssociateDeviceWithPlacementOutput, AssociateDeviceWithPlacementOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: AssociateDeviceWithPlacementInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates an empty placement.</p>
    public func createPlacement(input: CreatePlacementInput, completion: @escaping (SdkResult<CreatePlacementOutput, CreatePlacementOutputError>) -> Void)
    {
        guard let projectName = input.projectName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component projectName unexpectedly nil"))))
            return
        }
        let urlPath = "/projects/\(projectName)/placements"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createPlacement")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "projects.iot1click.\(config.region).amazonaws.com")
                      .withSigningName(value: "iot1click")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreatePlacementInput, CreatePlacementOutput, CreatePlacementOutputError>(id: "createPlacement")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreatePlacementInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreatePlacementInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreatePlacementInput, CreatePlacementOutput, CreatePlacementOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreatePlacementInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates an empty project with a placement template. A project contains zero or more
    ///       placements that adhere to the placement template defined in the project.</p>
    public func createProject(input: CreateProjectInput, completion: @escaping (SdkResult<CreateProjectOutput, CreateProjectOutputError>) -> Void)
    {
        let urlPath = "/projects"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createProject")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "projects.iot1click.\(config.region).amazonaws.com")
                      .withSigningName(value: "iot1click")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateProjectInput, CreateProjectOutput, CreateProjectOutputError>(id: "createProject")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateProjectInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateProjectInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateProjectInput, CreateProjectOutput, CreateProjectOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateProjectInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a placement. To delete a placement, it must not have any devices associated with
    ///       it.</p>
    ///          <note>
    ///             <p>When you delete a placement, all associated data becomes irretrievable.</p>
    ///          </note>
    public func deletePlacement(input: DeletePlacementInput, completion: @escaping (SdkResult<DeletePlacementOutput, DeletePlacementOutputError>) -> Void)
    {
        guard let projectName = input.projectName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component projectName unexpectedly nil"))))
            return
        }
        guard let placementName = input.placementName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component placementName unexpectedly nil"))))
            return
        }
        let urlPath = "/projects/\(projectName)/placements/\(placementName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deletePlacement")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "projects.iot1click.\(config.region).amazonaws.com")
                      .withSigningName(value: "iot1click")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeletePlacementInput, DeletePlacementOutput, DeletePlacementOutputError>(id: "deletePlacement")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeletePlacementInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeletePlacementInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeletePlacementInput, DeletePlacementOutput, DeletePlacementOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a project. To delete a project, it must not have any placements associated with
    ///       it.</p>
    ///          <note>
    ///             <p>When you delete a project, all associated data becomes irretrievable.</p>
    ///          </note>
    public func deleteProject(input: DeleteProjectInput, completion: @escaping (SdkResult<DeleteProjectOutput, DeleteProjectOutputError>) -> Void)
    {
        guard let projectName = input.projectName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component projectName unexpectedly nil"))))
            return
        }
        let urlPath = "/projects/\(projectName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteProject")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "projects.iot1click.\(config.region).amazonaws.com")
                      .withSigningName(value: "iot1click")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteProjectInput, DeleteProjectOutput, DeleteProjectOutputError>(id: "deleteProject")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteProjectInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteProjectInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteProjectInput, DeleteProjectOutput, DeleteProjectOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes a placement in a project.</p>
    public func describePlacement(input: DescribePlacementInput, completion: @escaping (SdkResult<DescribePlacementOutput, DescribePlacementOutputError>) -> Void)
    {
        guard let projectName = input.projectName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component projectName unexpectedly nil"))))
            return
        }
        guard let placementName = input.placementName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component placementName unexpectedly nil"))))
            return
        }
        let urlPath = "/projects/\(projectName)/placements/\(placementName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describePlacement")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "projects.iot1click.\(config.region).amazonaws.com")
                      .withSigningName(value: "iot1click")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribePlacementInput, DescribePlacementOutput, DescribePlacementOutputError>(id: "describePlacement")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribePlacementInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribePlacementInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribePlacementInput, DescribePlacementOutput, DescribePlacementOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns an object describing a project.</p>
    public func describeProject(input: DescribeProjectInput, completion: @escaping (SdkResult<DescribeProjectOutput, DescribeProjectOutputError>) -> Void)
    {
        guard let projectName = input.projectName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component projectName unexpectedly nil"))))
            return
        }
        let urlPath = "/projects/\(projectName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeProject")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "projects.iot1click.\(config.region).amazonaws.com")
                      .withSigningName(value: "iot1click")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeProjectInput, DescribeProjectOutput, DescribeProjectOutputError>(id: "describeProject")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeProjectInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeProjectInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeProjectInput, DescribeProjectOutput, DescribeProjectOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Removes a physical device from a placement.</p>
    public func disassociateDeviceFromPlacement(input: DisassociateDeviceFromPlacementInput, completion: @escaping (SdkResult<DisassociateDeviceFromPlacementOutput, DisassociateDeviceFromPlacementOutputError>) -> Void)
    {
        guard let projectName = input.projectName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component projectName unexpectedly nil"))))
            return
        }
        guard let placementName = input.placementName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component placementName unexpectedly nil"))))
            return
        }
        guard let deviceTemplateName = input.deviceTemplateName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component deviceTemplateName unexpectedly nil"))))
            return
        }
        let urlPath = "/projects/\(projectName)/placements/\(placementName)/devices/\(deviceTemplateName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disassociateDeviceFromPlacement")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "projects.iot1click.\(config.region).amazonaws.com")
                      .withSigningName(value: "iot1click")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisassociateDeviceFromPlacementInput, DisassociateDeviceFromPlacementOutput, DisassociateDeviceFromPlacementOutputError>(id: "disassociateDeviceFromPlacement")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisassociateDeviceFromPlacementInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisassociateDeviceFromPlacementInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisassociateDeviceFromPlacementInput, DisassociateDeviceFromPlacementOutput, DisassociateDeviceFromPlacementOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns an object enumerating the devices in a placement.</p>
    public func getDevicesInPlacement(input: GetDevicesInPlacementInput, completion: @escaping (SdkResult<GetDevicesInPlacementOutput, GetDevicesInPlacementOutputError>) -> Void)
    {
        guard let projectName = input.projectName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component projectName unexpectedly nil"))))
            return
        }
        guard let placementName = input.placementName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component placementName unexpectedly nil"))))
            return
        }
        let urlPath = "/projects/\(projectName)/placements/\(placementName)/devices"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getDevicesInPlacement")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "projects.iot1click.\(config.region).amazonaws.com")
                      .withSigningName(value: "iot1click")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetDevicesInPlacementInput, GetDevicesInPlacementOutput, GetDevicesInPlacementOutputError>(id: "getDevicesInPlacement")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetDevicesInPlacementInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetDevicesInPlacementInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetDevicesInPlacementInput, GetDevicesInPlacementOutput, GetDevicesInPlacementOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the placement(s) of a project.</p>
    public func listPlacements(input: ListPlacementsInput, completion: @escaping (SdkResult<ListPlacementsOutput, ListPlacementsOutputError>) -> Void)
    {
        guard let projectName = input.projectName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component projectName unexpectedly nil"))))
            return
        }
        let urlPath = "/projects/\(projectName)/placements"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listPlacements")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "projects.iot1click.\(config.region).amazonaws.com")
                      .withSigningName(value: "iot1click")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListPlacementsInput, ListPlacementsOutput, ListPlacementsOutputError>(id: "listPlacements")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListPlacementsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListPlacementsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListPlacementsInput, ListPlacementsOutput, ListPlacementsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the AWS IoT 1-Click project(s) associated with your AWS account and region.</p>
    public func listProjects(input: ListProjectsInput, completion: @escaping (SdkResult<ListProjectsOutput, ListProjectsOutputError>) -> Void)
    {
        let urlPath = "/projects"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listProjects")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "projects.iot1click.\(config.region).amazonaws.com")
                      .withSigningName(value: "iot1click")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListProjectsInput, ListProjectsOutput, ListProjectsOutputError>(id: "listProjects")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListProjectsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListProjectsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListProjectsInput, ListProjectsOutput, ListProjectsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the tags (metadata key/value pairs) which you have assigned to the resource.</p>
    public func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutput, ListTagsForResourceOutputError>) -> Void)
    {
        guard let resourceArn = input.resourceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component resourceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/tags/\(resourceArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listTagsForResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "projects.iot1click.\(config.region).amazonaws.com")
                      .withSigningName(value: "iot1click")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListTagsForResourceInput, ListTagsForResourceOutput, ListTagsForResourceOutputError>(id: "listTagsForResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListTagsForResourceInput, ListTagsForResourceOutput, ListTagsForResourceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates or modifies tags for a resource. Tags are key/value pairs (metadata) that can be
    ///       used to manage a resource. For more information, see <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">AWS Tagging
    ///         Strategies</a>.</p>
    public func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutput, TagResourceOutputError>) -> Void)
    {
        guard let resourceArn = input.resourceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component resourceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/tags/\(resourceArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "tagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "projects.iot1click.\(config.region).amazonaws.com")
                      .withSigningName(value: "iot1click")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<TagResourceInput, TagResourceOutput, TagResourceOutputError>(id: "tagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<TagResourceInput, TagResourceOutput, TagResourceOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Removes one or more tags (metadata key/value pairs) from a resource.</p>
    public func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutput, UntagResourceOutputError>) -> Void)
    {
        guard let resourceArn = input.resourceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component resourceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/tags/\(resourceArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "untagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "projects.iot1click.\(config.region).amazonaws.com")
                      .withSigningName(value: "iot1click")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UntagResourceInput, UntagResourceOutput, UntagResourceOutputError>(id: "untagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UntagResourceInput, UntagResourceOutput, UntagResourceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates a placement with the given attributes. To clear an attribute, pass an empty value
    ///       (i.e., "").</p>
    public func updatePlacement(input: UpdatePlacementInput, completion: @escaping (SdkResult<UpdatePlacementOutput, UpdatePlacementOutputError>) -> Void)
    {
        guard let projectName = input.projectName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component projectName unexpectedly nil"))))
            return
        }
        guard let placementName = input.placementName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component placementName unexpectedly nil"))))
            return
        }
        let urlPath = "/projects/\(projectName)/placements/\(placementName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updatePlacement")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "projects.iot1click.\(config.region).amazonaws.com")
                      .withSigningName(value: "iot1click")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdatePlacementInput, UpdatePlacementOutput, UpdatePlacementOutputError>(id: "updatePlacement")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdatePlacementInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdatePlacementInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdatePlacementInput, UpdatePlacementOutput, UpdatePlacementOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdatePlacementInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates a project associated with your AWS account and region. With the exception of
    ///       device template names, you can pass just the values that need to be updated because the update
    ///       request will change only the values that are provided. To clear a value, pass the empty string
    ///       (i.e., <code>""</code>).</p>
    public func updateProject(input: UpdateProjectInput, completion: @escaping (SdkResult<UpdateProjectOutput, UpdateProjectOutputError>) -> Void)
    {
        guard let projectName = input.projectName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component projectName unexpectedly nil"))))
            return
        }
        let urlPath = "/projects/\(projectName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateProject")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "projects.iot1click.\(config.region).amazonaws.com")
                      .withSigningName(value: "iot1click")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateProjectInput, UpdateProjectOutput, UpdateProjectOutputError>(id: "updateProject")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateProjectInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateProjectInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateProjectInput, UpdateProjectOutput, UpdateProjectOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateProjectInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
