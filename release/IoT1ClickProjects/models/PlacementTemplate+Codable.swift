// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PlacementTemplate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case defaultAttributes
        case deviceTemplates
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultAttributes = defaultAttributes {
            var defaultAttributesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .defaultAttributes)
            for (dictKey0, defaultplacementattributemap0) in defaultAttributes {
                try defaultAttributesContainer.encode(defaultplacementattributemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let deviceTemplates = deviceTemplates {
            var deviceTemplatesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .deviceTemplates)
            for (dictKey0, devicetemplatemap0) in deviceTemplates {
                try deviceTemplatesContainer.encode(devicetemplatemap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultAttributesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .defaultAttributes)
        var defaultAttributesDecoded0: [String:String]? = nil
        if let defaultAttributesContainer = defaultAttributesContainer {
            defaultAttributesDecoded0 = [String:String]()
            for (key0, attributedefaultvalue0) in defaultAttributesContainer {
                defaultAttributesDecoded0?[key0] = attributedefaultvalue0
            }
        }
        defaultAttributes = defaultAttributesDecoded0
        let deviceTemplatesContainer = try containerValues.decodeIfPresent([String:DeviceTemplate].self, forKey: .deviceTemplates)
        var deviceTemplatesDecoded0: [String:DeviceTemplate]? = nil
        if let deviceTemplatesContainer = deviceTemplatesContainer {
            deviceTemplatesDecoded0 = [String:DeviceTemplate]()
            for (key0, devicetemplate0) in deviceTemplatesContainer {
                deviceTemplatesDecoded0?[key0] = devicetemplate0
            }
        }
        deviceTemplates = deviceTemplatesDecoded0
    }
}
