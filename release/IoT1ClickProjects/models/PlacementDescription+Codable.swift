// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PlacementDescription: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributes
        case createdDate
        case placementName
        case projectName
        case updatedDate
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .attributes)
            for (dictKey0, placementattributemap0) in attributes {
                try attributesContainer.encode(placementattributemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let createdDate = createdDate {
            try encodeContainer.encode(createdDate.timeIntervalSince1970, forKey: .createdDate)
        }
        if let placementName = placementName {
            try encodeContainer.encode(placementName, forKey: .placementName)
        }
        if let projectName = projectName {
            try encodeContainer.encode(projectName, forKey: .projectName)
        }
        if let updatedDate = updatedDate {
            try encodeContainer.encode(updatedDate.timeIntervalSince1970, forKey: .updatedDate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .projectName)
        projectName = projectNameDecoded
        let placementNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .placementName)
        placementName = placementNameDecoded
        let attributesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .attributes)
        var attributesDecoded0: [String:String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [String:String]()
            for (key0, attributevalue0) in attributesContainer {
                attributesDecoded0?[key0] = attributevalue0
            }
        }
        attributes = attributesDecoded0
        let createdDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let updatedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .updatedDate)
        updatedDate = updatedDateDecoded
    }
}
