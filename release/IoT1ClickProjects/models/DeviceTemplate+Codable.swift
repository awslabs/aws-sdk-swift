// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DeviceTemplate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case callbackOverrides
        case deviceType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let callbackOverrides = callbackOverrides {
            var callbackOverridesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .callbackOverrides)
            for (dictKey0, devicecallbackoverridemap0) in callbackOverrides {
                try callbackOverridesContainer.encode(devicecallbackoverridemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let deviceType = deviceType {
            try encodeContainer.encode(deviceType, forKey: .deviceType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deviceType)
        deviceType = deviceTypeDecoded
        let callbackOverridesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .callbackOverrides)
        var callbackOverridesDecoded0: [String:String]? = nil
        if let callbackOverridesContainer = callbackOverridesContainer {
            callbackOverridesDecoded0 = [String:String]()
            for (key0, devicecallbackvalue0) in callbackOverridesContainer {
                callbackOverridesDecoded0?[key0] = devicecallbackvalue0
            }
        }
        callbackOverrides = callbackOverridesDecoded0
    }
}
