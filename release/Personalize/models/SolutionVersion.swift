// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>An object that provides information about a specific version of a <a>Solution</a>.</p>
public struct SolutionVersion: Equatable {
    /// <p>The date and
    ///       time
    ///       (in Unix time) that this version of the solution was created.</p>
    public let creationDateTime: Date?
    /// <p>The Amazon Resource Name (ARN) of the dataset group providing the training data.</p>
    public let datasetGroupArn: String?
    /// <p>The event type (for example, 'click' or 'like') that is used for training the
    ///       model.</p>
    public let eventType: String?
    /// <p>If training a solution version fails, the reason for the failure.</p>
    public let failureReason: String?
    /// <p>The date and time (in
    ///       Unix
    ///       time) that the solution was last updated.</p>
    public let lastUpdatedDateTime: Date?
    /// <p>When true, Amazon Personalize searches for the most optimal recipe according to the solution
    ///       configuration. When false (the default), Amazon Personalize uses <code>recipeArn</code>.</p>
    public let performAutoML: Bool
    /// <p>Whether to perform hyperparameter optimization (HPO) on the chosen recipe. The default is
    ///         <code>false</code>.</p>
    public let performHPO: Bool
    /// <p>The ARN of the recipe used in the solution.</p>
    public let recipeArn: String?
    /// <p>The ARN of the solution.</p>
    public let solutionArn: String?
    /// <p>Describes the configuration properties for the solution.</p>
    public let solutionConfig: SolutionConfig?
    /// <p>The ARN of the solution version.</p>
    public let solutionVersionArn: String?
    /// <p>The status of the solution version.</p>
    ///          <p>A solution version can be in one of the following states:</p>
    ///          <ul>
    ///             <li>
    ///                <p>CREATE PENDING</p>
    ///             </li>
    ///             <li>
    ///                <p>CREATE IN_PROGRESS</p>
    ///             </li>
    ///             <li>
    ///                <p>ACTIVE</p>
    ///             </li>
    ///             <li>
    ///                <p>CREATE FAILED</p>
    ///             </li>
    ///             <li>
    ///                <p>CREATE STOPPING</p>
    ///             </li>
    ///             <li>
    ///                <p>CREATE STOPPED</p>
    ///             </li>
    ///          </ul>
    public let status: String?
    /// <p>The time used to train the model. You are billed for the time it takes to train a model.
    ///       This field is visible only after Amazon Personalize successfully trains a model.</p>
    public let trainingHours: Double?
    /// <p>The scope of training to be performed when creating the solution version. The
    ///       <code>FULL</code> option trains the solution version based on the entirety of the input
    ///       solution's training data, while the <code>UPDATE</code> option processes only the data that
    ///       has changed in comparison to the input solution. Choose <code>UPDATE</code> when you want to
    ///       incrementally update your solution version instead of creating an entirely new one.</p>
    ///          <important>
    ///             <p>The <code>UPDATE</code> option can only be used when you already have an active solution
    ///         version created from the input solution using the <code>FULL</code> option and the input
    ///         solution was trained with the
    ///         <a href="https://docs.aws.amazon.com/personalize/latest/dg/native-recipe-new-item-USER_PERSONALIZATION.html">User-Personalization</a>
    ///         recipe or the
    ///         <a href="https://docs.aws.amazon.com/personalize/latest/dg/native-recipe-hrnn-coldstart.html">HRNN-Coldstart</a> recipe.</p>
    ///          </important>
    public let trainingMode: TrainingMode?
    /// <p>If hyperparameter optimization was performed, contains the hyperparameter values of the
    ///       best performing model.</p>
    public let tunedHPOParams: TunedHPOParams?

    public init (
        creationDateTime: Date? = nil,
        datasetGroupArn: String? = nil,
        eventType: String? = nil,
        failureReason: String? = nil,
        lastUpdatedDateTime: Date? = nil,
        performAutoML: Bool = false,
        performHPO: Bool = false,
        recipeArn: String? = nil,
        solutionArn: String? = nil,
        solutionConfig: SolutionConfig? = nil,
        solutionVersionArn: String? = nil,
        status: String? = nil,
        trainingHours: Double? = nil,
        trainingMode: TrainingMode? = nil,
        tunedHPOParams: TunedHPOParams? = nil
    )
    {
        self.creationDateTime = creationDateTime
        self.datasetGroupArn = datasetGroupArn
        self.eventType = eventType
        self.failureReason = failureReason
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.performAutoML = performAutoML
        self.performHPO = performHPO
        self.recipeArn = recipeArn
        self.solutionArn = solutionArn
        self.solutionConfig = solutionConfig
        self.solutionVersionArn = solutionVersionArn
        self.status = status
        self.trainingHours = trainingHours
        self.trainingMode = trainingMode
        self.tunedHPOParams = tunedHPOParams
    }
}
