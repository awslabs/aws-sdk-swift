// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListEventTrackersOutputBody: Equatable {
    public let eventTrackers: [EventTrackerSummary]?
    public let nextToken: String?
}

extension ListEventTrackersOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case eventTrackers
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventTrackersContainer = try containerValues.decodeIfPresent([EventTrackerSummary].self, forKey: .eventTrackers)
        var eventTrackersDecoded0:[EventTrackerSummary]? = nil
        if let eventTrackersContainer = eventTrackersContainer {
            eventTrackersDecoded0 = [EventTrackerSummary]()
            for structure0 in eventTrackersContainer {
                eventTrackersDecoded0?.append(structure0)
            }
        }
        eventTrackers = eventTrackersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
