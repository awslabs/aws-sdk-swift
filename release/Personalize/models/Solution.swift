// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>An object that provides information about a solution. A solution is a trained model
///       that can be deployed as a campaign.</p>
public struct Solution: Equatable {
    /// <p>When <code>performAutoML</code> is true, specifies the best recipe found.</p>
    public let autoMLResult: AutoMLResult?
    /// <p>The creation date and time (in Unix time) of the solution.</p>
    public let creationDateTime: Date?
    /// <p>The Amazon Resource Name (ARN) of the dataset group that provides the training data.</p>
    public let datasetGroupArn: String?
    /// <p>The event type (for example, 'click' or 'like') that is used for training the model.
    ///       If no <code>eventType</code> is provided, Amazon Personalize uses all interactions for training with
    ///       equal weight regardless of type.</p>
    public let eventType: String?
    /// <p>The date and time (in Unix time) that the solution was last updated.</p>
    public let lastUpdatedDateTime: Date?
    /// <p>Describes the latest version of the solution, including the status and the ARN.</p>
    public let latestSolutionVersion: SolutionVersionSummary?
    /// <p>The name of the solution.</p>
    public let name: String?
    /// <p>When true, Amazon Personalize performs a search for the best USER_PERSONALIZATION recipe from
    ///       the list specified in the solution configuration (<code>recipeArn</code> must not be specified).
    ///       When false (the default), Amazon Personalize uses <code>recipeArn</code> for training.</p>
    public let performAutoML: Bool
    /// <p>Whether to perform hyperparameter optimization (HPO) on the chosen recipe. The
    ///       default is <code>false</code>.</p>
    public let performHPO: Bool
    /// <p>The ARN of the recipe used to create the solution.</p>
    public let recipeArn: String?
    /// <p>The ARN of the solution.</p>
    public let solutionArn: String?
    /// <p>Describes the configuration properties for the solution.</p>
    public let solutionConfig: SolutionConfig?
    /// <p>The status of the solution.</p>
    ///          <p>A solution can be in one of the following states:</p>
    ///          <ul>
    ///             <li>
    ///                <p>CREATE PENDING > CREATE IN_PROGRESS > ACTIVE -or- CREATE FAILED</p>
    ///             </li>
    ///             <li>
    ///                <p>DELETE PENDING > DELETE IN_PROGRESS</p>
    ///             </li>
    ///          </ul>
    public let status: String?

    public init (
        autoMLResult: AutoMLResult? = nil,
        creationDateTime: Date? = nil,
        datasetGroupArn: String? = nil,
        eventType: String? = nil,
        lastUpdatedDateTime: Date? = nil,
        latestSolutionVersion: SolutionVersionSummary? = nil,
        name: String? = nil,
        performAutoML: Bool = false,
        performHPO: Bool = false,
        recipeArn: String? = nil,
        solutionArn: String? = nil,
        solutionConfig: SolutionConfig? = nil,
        status: String? = nil
    )
    {
        self.autoMLResult = autoMLResult
        self.creationDateTime = creationDateTime
        self.datasetGroupArn = datasetGroupArn
        self.eventType = eventType
        self.lastUpdatedDateTime = lastUpdatedDateTime
        self.latestSolutionVersion = latestSolutionVersion
        self.name = name
        self.performAutoML = performAutoML
        self.performHPO = performHPO
        self.recipeArn = recipeArn
        self.solutionArn = solutionArn
        self.solutionConfig = solutionConfig
        self.status = status
    }
}
