// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Algorithm: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case algorithmArn
        case algorithmImage
        case creationDateTime
        case defaultHyperParameterRanges
        case defaultHyperParameters
        case defaultResourceConfig
        case lastUpdatedDateTime
        case name
        case roleArn
        case trainingInputMode
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithmArn = algorithmArn {
            try encodeContainer.encode(algorithmArn, forKey: .algorithmArn)
        }
        if let algorithmImage = algorithmImage {
            try encodeContainer.encode(algorithmImage, forKey: .algorithmImage)
        }
        if let creationDateTime = creationDateTime {
            try encodeContainer.encode(creationDateTime.timeIntervalSince1970, forKey: .creationDateTime)
        }
        if let defaultHyperParameterRanges = defaultHyperParameterRanges {
            try encodeContainer.encode(defaultHyperParameterRanges, forKey: .defaultHyperParameterRanges)
        }
        if let defaultHyperParameters = defaultHyperParameters {
            var defaultHyperParametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .defaultHyperParameters)
            for (dictKey0, hyperparameters0) in defaultHyperParameters {
                try defaultHyperParametersContainer.encode(hyperparameters0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let defaultResourceConfig = defaultResourceConfig {
            var defaultResourceConfigContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .defaultResourceConfig)
            for (dictKey0, resourceconfig0) in defaultResourceConfig {
                try defaultResourceConfigContainer.encode(resourceconfig0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let lastUpdatedDateTime = lastUpdatedDateTime {
            try encodeContainer.encode(lastUpdatedDateTime.timeIntervalSince1970, forKey: .lastUpdatedDateTime)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let trainingInputMode = trainingInputMode {
            try encodeContainer.encode(trainingInputMode, forKey: .trainingInputMode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let algorithmArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .algorithmArn)
        algorithmArn = algorithmArnDecoded
        let algorithmImageDecoded = try containerValues.decodeIfPresent(AlgorithmImage.self, forKey: .algorithmImage)
        algorithmImage = algorithmImageDecoded
        let defaultHyperParametersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .defaultHyperParameters)
        var defaultHyperParametersDecoded0: [String:String]? = nil
        if let defaultHyperParametersContainer = defaultHyperParametersContainer {
            defaultHyperParametersDecoded0 = [String:String]()
            for (key0, parametervalue0) in defaultHyperParametersContainer {
                defaultHyperParametersDecoded0?[key0] = parametervalue0
            }
        }
        defaultHyperParameters = defaultHyperParametersDecoded0
        let defaultHyperParameterRangesDecoded = try containerValues.decodeIfPresent(DefaultHyperParameterRanges.self, forKey: .defaultHyperParameterRanges)
        defaultHyperParameterRanges = defaultHyperParameterRangesDecoded
        let defaultResourceConfigContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .defaultResourceConfig)
        var defaultResourceConfigDecoded0: [String:String]? = nil
        if let defaultResourceConfigContainer = defaultResourceConfigContainer {
            defaultResourceConfigDecoded0 = [String:String]()
            for (key0, parametervalue0) in defaultResourceConfigContainer {
                defaultResourceConfigDecoded0?[key0] = parametervalue0
            }
        }
        defaultResourceConfig = defaultResourceConfigDecoded0
        let trainingInputModeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trainingInputMode)
        trainingInputMode = trainingInputModeDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let lastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedDateTime)
        lastUpdatedDateTime = lastUpdatedDateTimeDecoded
    }
}
