// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HyperParameterRanges: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case categoricalHyperParameterRanges
        case continuousHyperParameterRanges
        case integerHyperParameterRanges
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let categoricalHyperParameterRanges = categoricalHyperParameterRanges {
            var categoricalHyperParameterRangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .categoricalHyperParameterRanges)
            for categoricalhyperparameterranges0 in categoricalHyperParameterRanges {
                try categoricalHyperParameterRangesContainer.encode(categoricalhyperparameterranges0)
            }
        }
        if let continuousHyperParameterRanges = continuousHyperParameterRanges {
            var continuousHyperParameterRangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .continuousHyperParameterRanges)
            for continuoushyperparameterranges0 in continuousHyperParameterRanges {
                try continuousHyperParameterRangesContainer.encode(continuoushyperparameterranges0)
            }
        }
        if let integerHyperParameterRanges = integerHyperParameterRanges {
            var integerHyperParameterRangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .integerHyperParameterRanges)
            for integerhyperparameterranges0 in integerHyperParameterRanges {
                try integerHyperParameterRangesContainer.encode(integerhyperparameterranges0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let integerHyperParameterRangesContainer = try containerValues.decodeIfPresent([IntegerHyperParameterRange].self, forKey: .integerHyperParameterRanges)
        var integerHyperParameterRangesDecoded0:[IntegerHyperParameterRange]? = nil
        if let integerHyperParameterRangesContainer = integerHyperParameterRangesContainer {
            integerHyperParameterRangesDecoded0 = [IntegerHyperParameterRange]()
            for structure0 in integerHyperParameterRangesContainer {
                integerHyperParameterRangesDecoded0?.append(structure0)
            }
        }
        integerHyperParameterRanges = integerHyperParameterRangesDecoded0
        let continuousHyperParameterRangesContainer = try containerValues.decodeIfPresent([ContinuousHyperParameterRange].self, forKey: .continuousHyperParameterRanges)
        var continuousHyperParameterRangesDecoded0:[ContinuousHyperParameterRange]? = nil
        if let continuousHyperParameterRangesContainer = continuousHyperParameterRangesContainer {
            continuousHyperParameterRangesDecoded0 = [ContinuousHyperParameterRange]()
            for structure0 in continuousHyperParameterRangesContainer {
                continuousHyperParameterRangesDecoded0?.append(structure0)
            }
        }
        continuousHyperParameterRanges = continuousHyperParameterRangesDecoded0
        let categoricalHyperParameterRangesContainer = try containerValues.decodeIfPresent([CategoricalHyperParameterRange].self, forKey: .categoricalHyperParameterRanges)
        var categoricalHyperParameterRangesDecoded0:[CategoricalHyperParameterRange]? = nil
        if let categoricalHyperParameterRangesContainer = categoricalHyperParameterRangesContainer {
            categoricalHyperParameterRangesDecoded0 = [CategoricalHyperParameterRange]()
            for structure0 in categoricalHyperParameterRangesContainer {
                categoricalHyperParameterRangesDecoded0?.append(structure0)
            }
        }
        categoricalHyperParameterRanges = categoricalHyperParameterRangesDecoded0
    }
}
