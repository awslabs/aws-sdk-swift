// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListSolutionVersionsOutputBody: Equatable {
    public let solutionVersions: [SolutionVersionSummary]?
    public let nextToken: String?
}

extension ListSolutionVersionsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case solutionVersions
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let solutionVersionsContainer = try containerValues.decodeIfPresent([SolutionVersionSummary].self, forKey: .solutionVersions)
        var solutionVersionsDecoded0:[SolutionVersionSummary]? = nil
        if let solutionVersionsContainer = solutionVersionsContainer {
            solutionVersionsDecoded0 = [SolutionVersionSummary]()
            for structure0 in solutionVersionsContainer {
                solutionVersionsDecoded0?.append(structure0)
            }
        }
        solutionVersions = solutionVersionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
