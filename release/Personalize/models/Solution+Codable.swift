// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Solution: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoMLResult
        case creationDateTime
        case datasetGroupArn
        case eventType
        case lastUpdatedDateTime
        case latestSolutionVersion
        case name
        case performAutoML
        case performHPO
        case recipeArn
        case solutionArn
        case solutionConfig
        case status
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoMLResult = autoMLResult {
            try encodeContainer.encode(autoMLResult, forKey: .autoMLResult)
        }
        if let creationDateTime = creationDateTime {
            try encodeContainer.encode(creationDateTime.timeIntervalSince1970, forKey: .creationDateTime)
        }
        if let datasetGroupArn = datasetGroupArn {
            try encodeContainer.encode(datasetGroupArn, forKey: .datasetGroupArn)
        }
        if let eventType = eventType {
            try encodeContainer.encode(eventType, forKey: .eventType)
        }
        if let lastUpdatedDateTime = lastUpdatedDateTime {
            try encodeContainer.encode(lastUpdatedDateTime.timeIntervalSince1970, forKey: .lastUpdatedDateTime)
        }
        if let latestSolutionVersion = latestSolutionVersion {
            try encodeContainer.encode(latestSolutionVersion, forKey: .latestSolutionVersion)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if performAutoML != false {
            try encodeContainer.encode(performAutoML, forKey: .performAutoML)
        }
        if performHPO != false {
            try encodeContainer.encode(performHPO, forKey: .performHPO)
        }
        if let recipeArn = recipeArn {
            try encodeContainer.encode(recipeArn, forKey: .recipeArn)
        }
        if let solutionArn = solutionArn {
            try encodeContainer.encode(solutionArn, forKey: .solutionArn)
        }
        if let solutionConfig = solutionConfig {
            try encodeContainer.encode(solutionConfig, forKey: .solutionConfig)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let solutionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .solutionArn)
        solutionArn = solutionArnDecoded
        let performHPODecoded = try containerValues.decode(Bool.self, forKey: .performHPO)
        performHPO = performHPODecoded
        let performAutoMLDecoded = try containerValues.decode(Bool.self, forKey: .performAutoML)
        performAutoML = performAutoMLDecoded
        let recipeArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recipeArn)
        recipeArn = recipeArnDecoded
        let datasetGroupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .datasetGroupArn)
        datasetGroupArn = datasetGroupArnDecoded
        let eventTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventType)
        eventType = eventTypeDecoded
        let solutionConfigDecoded = try containerValues.decodeIfPresent(SolutionConfig.self, forKey: .solutionConfig)
        solutionConfig = solutionConfigDecoded
        let autoMLResultDecoded = try containerValues.decodeIfPresent(AutoMLResult.self, forKey: .autoMLResult)
        autoMLResult = autoMLResultDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let lastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedDateTime)
        lastUpdatedDateTime = lastUpdatedDateTimeDecoded
        let latestSolutionVersionDecoded = try containerValues.decodeIfPresent(SolutionVersionSummary.self, forKey: .latestSolutionVersion)
        latestSolutionVersion = latestSolutionVersionDecoded
    }
}
