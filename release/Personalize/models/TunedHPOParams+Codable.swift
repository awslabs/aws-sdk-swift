// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TunedHPOParams: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case algorithmHyperParameters
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithmHyperParameters = algorithmHyperParameters {
            var algorithmHyperParametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .algorithmHyperParameters)
            for (dictKey0, hyperparameters0) in algorithmHyperParameters {
                try algorithmHyperParametersContainer.encode(hyperparameters0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let algorithmHyperParametersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .algorithmHyperParameters)
        var algorithmHyperParametersDecoded0: [String:String]? = nil
        if let algorithmHyperParametersContainer = algorithmHyperParametersContainer {
            algorithmHyperParametersDecoded0 = [String:String]()
            for (key0, parametervalue0) in algorithmHyperParametersContainer {
                algorithmHyperParametersDecoded0?[key0] = parametervalue0
            }
        }
        algorithmHyperParameters = algorithmHyperParametersDecoded0
    }
}
