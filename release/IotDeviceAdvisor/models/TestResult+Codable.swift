// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TestResult: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case groups
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groups = groups {
            var groupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .groups)
            for groupresultlist0 in groups {
                try groupsContainer.encode(groupresultlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupsContainer = try containerValues.decodeIfPresent([GroupResult].self, forKey: .groups)
        var groupsDecoded0:[GroupResult]? = nil
        if let groupsContainer = groupsContainer {
            groupsDecoded0 = [GroupResult]()
            for structure0 in groupsContainer {
                groupsDecoded0?.append(structure0)
            }
        }
        groups = groupsDecoded0
    }
}
