// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SuiteDefinitionInformation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createdAt
        case defaultDevices
        case intendedForQualification
        case suiteDefinitionId
        case suiteDefinitionName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let defaultDevices = defaultDevices {
            var defaultDevicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .defaultDevices)
            for deviceundertestlist0 in defaultDevices {
                try defaultDevicesContainer.encode(deviceundertestlist0)
            }
        }
        if intendedForQualification != false {
            try encodeContainer.encode(intendedForQualification, forKey: .intendedForQualification)
        }
        if let suiteDefinitionId = suiteDefinitionId {
            try encodeContainer.encode(suiteDefinitionId, forKey: .suiteDefinitionId)
        }
        if let suiteDefinitionName = suiteDefinitionName {
            try encodeContainer.encode(suiteDefinitionName, forKey: .suiteDefinitionName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let suiteDefinitionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .suiteDefinitionId)
        suiteDefinitionId = suiteDefinitionIdDecoded
        let suiteDefinitionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .suiteDefinitionName)
        suiteDefinitionName = suiteDefinitionNameDecoded
        let defaultDevicesContainer = try containerValues.decodeIfPresent([DeviceUnderTest].self, forKey: .defaultDevices)
        var defaultDevicesDecoded0:[DeviceUnderTest]? = nil
        if let defaultDevicesContainer = defaultDevicesContainer {
            defaultDevicesDecoded0 = [DeviceUnderTest]()
            for structure0 in defaultDevicesContainer {
                defaultDevicesDecoded0?.append(structure0)
            }
        }
        defaultDevices = defaultDevicesDecoded0
        let intendedForQualificationDecoded = try containerValues.decode(Bool.self, forKey: .intendedForQualification)
        intendedForQualification = intendedForQualificationDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}
