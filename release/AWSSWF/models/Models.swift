// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension SWFClientTypes.ActivityTaskCancelRequestedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityId
        case decisionTaskCompletedEventId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityId = self.activityId {
            try encodeContainer.encode(activityId, forKey: .activityId)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
        let activityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activityId)
        activityId = activityIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the ActivityTaskCancelRequested event.
    public struct ActivityTaskCancelRequestedEventAttributes: Swift.Equatable {
        /// The unique ID of the task.
        /// This member is required.
        public var activityId: Swift.String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the RequestCancelActivityTask decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int

        public init (
            activityId: Swift.String? = nil,
            decisionTaskCompletedEventId: Swift.Int = 0
        )
        {
            self.activityId = activityId
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        }
    }

}

extension SWFClientTypes.ActivityTaskCanceledEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details
        case latestCancelRequestedEventId
        case scheduledEventId
        case startedEventId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = self.details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if latestCancelRequestedEventId != 0 {
            try encodeContainer.encode(latestCancelRequestedEventId, forKey: .latestCancelRequestedEventId)
        }
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .details)
        details = detailsDecoded
        let scheduledEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scheduledEventId) ?? 0
        scheduledEventId = scheduledEventIdDecoded
        let startedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedEventId) ?? 0
        startedEventId = startedEventIdDecoded
        let latestCancelRequestedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .latestCancelRequestedEventId) ?? 0
        latestCancelRequestedEventId = latestCancelRequestedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the ActivityTaskCanceled event.
    public struct ActivityTaskCanceledEventAttributes: Swift.Equatable {
        /// Details of the cancellation.
        public var details: Swift.String?
        /// If set, contains the ID of the last ActivityTaskCancelRequested event recorded for this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public var latestCancelRequestedEventId: Swift.Int
        /// The ID of the ActivityTaskScheduled event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var scheduledEventId: Swift.Int
        /// The ID of the ActivityTaskStarted event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var startedEventId: Swift.Int

        public init (
            details: Swift.String? = nil,
            latestCancelRequestedEventId: Swift.Int = 0,
            scheduledEventId: Swift.Int = 0,
            startedEventId: Swift.Int = 0
        )
        {
            self.details = details
            self.latestCancelRequestedEventId = latestCancelRequestedEventId
            self.scheduledEventId = scheduledEventId
            self.startedEventId = startedEventId
        }
    }

}

extension SWFClientTypes.ActivityTaskCompletedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case result
        case scheduledEventId
        case startedEventId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let result = self.result {
            try encodeContainer.encode(result, forKey: .result)
        }
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .result)
        result = resultDecoded
        let scheduledEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scheduledEventId) ?? 0
        scheduledEventId = scheduledEventIdDecoded
        let startedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedEventId) ?? 0
        startedEventId = startedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the ActivityTaskCompleted event.
    public struct ActivityTaskCompletedEventAttributes: Swift.Equatable {
        /// The results of the activity task.
        public var result: Swift.String?
        /// The ID of the ActivityTaskScheduled event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var scheduledEventId: Swift.Int
        /// The ID of the ActivityTaskStarted event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var startedEventId: Swift.Int

        public init (
            result: Swift.String? = nil,
            scheduledEventId: Swift.Int = 0,
            startedEventId: Swift.Int = 0
        )
        {
            self.result = result
            self.scheduledEventId = scheduledEventId
            self.startedEventId = startedEventId
        }
    }

}

extension SWFClientTypes.ActivityTaskFailedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details
        case reason
        case scheduledEventId
        case startedEventId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = self.details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .details)
        details = detailsDecoded
        let scheduledEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scheduledEventId) ?? 0
        scheduledEventId = scheduledEventIdDecoded
        let startedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedEventId) ?? 0
        startedEventId = startedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the ActivityTaskFailed event.
    public struct ActivityTaskFailedEventAttributes: Swift.Equatable {
        /// The details of the failure.
        public var details: Swift.String?
        /// The reason provided for the failure.
        public var reason: Swift.String?
        /// The ID of the ActivityTaskScheduled event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var scheduledEventId: Swift.Int
        /// The ID of the ActivityTaskStarted event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var startedEventId: Swift.Int

        public init (
            details: Swift.String? = nil,
            reason: Swift.String? = nil,
            scheduledEventId: Swift.Int = 0,
            startedEventId: Swift.Int = 0
        )
        {
            self.details = details
            self.reason = reason
            self.scheduledEventId = scheduledEventId
            self.startedEventId = startedEventId
        }
    }

}

extension SWFClientTypes.ActivityTaskScheduledEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityId
        case activityType
        case control
        case decisionTaskCompletedEventId
        case heartbeatTimeout
        case input
        case scheduleToCloseTimeout
        case scheduleToStartTimeout
        case startToCloseTimeout
        case taskList
        case taskPriority
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityId = self.activityId {
            try encodeContainer.encode(activityId, forKey: .activityId)
        }
        if let activityType = self.activityType {
            try encodeContainer.encode(activityType, forKey: .activityType)
        }
        if let control = self.control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let heartbeatTimeout = self.heartbeatTimeout {
            try encodeContainer.encode(heartbeatTimeout, forKey: .heartbeatTimeout)
        }
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let scheduleToCloseTimeout = self.scheduleToCloseTimeout {
            try encodeContainer.encode(scheduleToCloseTimeout, forKey: .scheduleToCloseTimeout)
        }
        if let scheduleToStartTimeout = self.scheduleToStartTimeout {
            try encodeContainer.encode(scheduleToStartTimeout, forKey: .scheduleToStartTimeout)
        }
        if let startToCloseTimeout = self.startToCloseTimeout {
            try encodeContainer.encode(startToCloseTimeout, forKey: .startToCloseTimeout)
        }
        if let taskList = self.taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = self.taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ActivityType.self, forKey: .activityType)
        activityType = activityTypeDecoded
        let activityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activityId)
        activityId = activityIdDecoded
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
        let controlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .control)
        control = controlDecoded
        let scheduleToStartTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleToStartTimeout)
        scheduleToStartTimeout = scheduleToStartTimeoutDecoded
        let scheduleToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleToCloseTimeout)
        scheduleToCloseTimeout = scheduleToCloseTimeoutDecoded
        let startToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startToCloseTimeout)
        startToCloseTimeout = startToCloseTimeoutDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
        let heartbeatTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .heartbeatTimeout)
        heartbeatTimeout = heartbeatTimeoutDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the ActivityTaskScheduled event.
    public struct ActivityTaskScheduledEventAttributes: Swift.Equatable {
        /// The unique ID of the activity task.
        /// This member is required.
        public var activityId: Swift.String?
        /// The type of the activity task.
        /// This member is required.
        public var activityType: SWFClientTypes.ActivityType?
        /// Data attached to the event that can be used by the decider in subsequent workflow tasks. This data isn't sent to the activity.
        public var control: Swift.String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision that resulted in the scheduling of this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int
        /// The maximum time before which the worker processing this task must report progress by calling [RecordActivityTaskHeartbeat]. If the timeout is exceeded, the activity task is automatically timed out. If the worker subsequently attempts to record a heartbeat or return a result, it is ignored.
        public var heartbeatTimeout: Swift.String?
        /// The input provided to the activity task.
        public var input: Swift.String?
        /// The maximum amount of time for this activity task.
        public var scheduleToCloseTimeout: Swift.String?
        /// The maximum amount of time the activity task can wait to be assigned to a worker.
        public var scheduleToStartTimeout: Swift.String?
        /// The maximum amount of time a worker may take to process the activity task.
        public var startToCloseTimeout: Swift.String?
        /// The task list in which the activity task has been scheduled.
        /// This member is required.
        public var taskList: SWFClientTypes.TaskList?
        /// The priority to assign to the scheduled activity task. If set, this overrides any default priority value that was assigned when the activity type was registered. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see [Setting Task Priority](https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html) in the Amazon SWF Developer Guide.
        public var taskPriority: Swift.String?

        public init (
            activityId: Swift.String? = nil,
            activityType: SWFClientTypes.ActivityType? = nil,
            control: Swift.String? = nil,
            decisionTaskCompletedEventId: Swift.Int = 0,
            heartbeatTimeout: Swift.String? = nil,
            input: Swift.String? = nil,
            scheduleToCloseTimeout: Swift.String? = nil,
            scheduleToStartTimeout: Swift.String? = nil,
            startToCloseTimeout: Swift.String? = nil,
            taskList: SWFClientTypes.TaskList? = nil,
            taskPriority: Swift.String? = nil
        )
        {
            self.activityId = activityId
            self.activityType = activityType
            self.control = control
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.heartbeatTimeout = heartbeatTimeout
            self.input = input
            self.scheduleToCloseTimeout = scheduleToCloseTimeout
            self.scheduleToStartTimeout = scheduleToStartTimeout
            self.startToCloseTimeout = startToCloseTimeout
            self.taskList = taskList
            self.taskPriority = taskPriority
        }
    }

}

extension SWFClientTypes.ActivityTaskStartedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identity
        case scheduledEventId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identity = self.identity {
            try encodeContainer.encode(identity, forKey: .identity)
        }
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identity)
        identity = identityDecoded
        let scheduledEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scheduledEventId) ?? 0
        scheduledEventId = scheduledEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the ActivityTaskStarted event.
    public struct ActivityTaskStartedEventAttributes: Swift.Equatable {
        /// Identity of the worker that was assigned this task. This aids diagnostics when problems arise. The form of this identity is user defined.
        public var identity: Swift.String?
        /// The ID of the ActivityTaskScheduled event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var scheduledEventId: Swift.Int

        public init (
            identity: Swift.String? = nil,
            scheduledEventId: Swift.Int = 0
        )
        {
            self.identity = identity
            self.scheduledEventId = scheduledEventId
        }
    }

}

extension SWFClientTypes.ActivityTaskTimedOutEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details
        case scheduledEventId
        case startedEventId
        case timeoutType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = self.details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
        if let timeoutType = self.timeoutType {
            try encodeContainer.encode(timeoutType.rawValue, forKey: .timeoutType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeoutTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ActivityTaskTimeoutType.self, forKey: .timeoutType)
        timeoutType = timeoutTypeDecoded
        let scheduledEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scheduledEventId) ?? 0
        scheduledEventId = scheduledEventIdDecoded
        let startedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedEventId) ?? 0
        startedEventId = startedEventIdDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .details)
        details = detailsDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the ActivityTaskTimedOut event.
    public struct ActivityTaskTimedOutEventAttributes: Swift.Equatable {
        /// Contains the content of the details parameter for the last call made by the activity to RecordActivityTaskHeartbeat.
        public var details: Swift.String?
        /// The ID of the ActivityTaskScheduled event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var scheduledEventId: Swift.Int
        /// The ID of the ActivityTaskStarted event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var startedEventId: Swift.Int
        /// The type of the timeout that caused this event.
        /// This member is required.
        public var timeoutType: SWFClientTypes.ActivityTaskTimeoutType?

        public init (
            details: Swift.String? = nil,
            scheduledEventId: Swift.Int = 0,
            startedEventId: Swift.Int = 0,
            timeoutType: SWFClientTypes.ActivityTaskTimeoutType? = nil
        )
        {
            self.details = details
            self.scheduledEventId = scheduledEventId
            self.startedEventId = startedEventId
            self.timeoutType = timeoutType
        }
    }

}

extension SWFClientTypes {
    public enum ActivityTaskTimeoutType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case heartbeat
        case scheduleToClose
        case scheduleToStart
        case startToClose
        case sdkUnknown(Swift.String)

        public static var allCases: [ActivityTaskTimeoutType] {
            return [
                .heartbeat,
                .scheduleToClose,
                .scheduleToStart,
                .startToClose,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .heartbeat: return "HEARTBEAT"
            case .scheduleToClose: return "SCHEDULE_TO_CLOSE"
            case .scheduleToStart: return "SCHEDULE_TO_START"
            case .startToClose: return "START_TO_CLOSE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ActivityTaskTimeoutType(rawValue: rawValue) ?? ActivityTaskTimeoutType.sdkUnknown(rawValue)
        }
    }
}

extension SWFClientTypes.ActivityType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension SWFClientTypes {
    /// Represents an activity type.
    public struct ActivityType: Swift.Equatable {
        /// The name of this activity. The combination of activity type name and version must be unique within a domain.
        /// This member is required.
        public var name: Swift.String?
        /// The version of this activity. The combination of activity type name and version must be unique with in a domain.
        /// This member is required.
        public var version: Swift.String?

        public init (
            name: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.name = name
            self.version = version
        }
    }

}

extension SWFClientTypes.ActivityTypeConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultTaskHeartbeatTimeout
        case defaultTaskList
        case defaultTaskPriority
        case defaultTaskScheduleToCloseTimeout
        case defaultTaskScheduleToStartTimeout
        case defaultTaskStartToCloseTimeout
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultTaskHeartbeatTimeout = self.defaultTaskHeartbeatTimeout {
            try encodeContainer.encode(defaultTaskHeartbeatTimeout, forKey: .defaultTaskHeartbeatTimeout)
        }
        if let defaultTaskList = self.defaultTaskList {
            try encodeContainer.encode(defaultTaskList, forKey: .defaultTaskList)
        }
        if let defaultTaskPriority = self.defaultTaskPriority {
            try encodeContainer.encode(defaultTaskPriority, forKey: .defaultTaskPriority)
        }
        if let defaultTaskScheduleToCloseTimeout = self.defaultTaskScheduleToCloseTimeout {
            try encodeContainer.encode(defaultTaskScheduleToCloseTimeout, forKey: .defaultTaskScheduleToCloseTimeout)
        }
        if let defaultTaskScheduleToStartTimeout = self.defaultTaskScheduleToStartTimeout {
            try encodeContainer.encode(defaultTaskScheduleToStartTimeout, forKey: .defaultTaskScheduleToStartTimeout)
        }
        if let defaultTaskStartToCloseTimeout = self.defaultTaskStartToCloseTimeout {
            try encodeContainer.encode(defaultTaskStartToCloseTimeout, forKey: .defaultTaskStartToCloseTimeout)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultTaskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultTaskStartToCloseTimeout)
        defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeoutDecoded
        let defaultTaskHeartbeatTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultTaskHeartbeatTimeout)
        defaultTaskHeartbeatTimeout = defaultTaskHeartbeatTimeoutDecoded
        let defaultTaskListDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TaskList.self, forKey: .defaultTaskList)
        defaultTaskList = defaultTaskListDecoded
        let defaultTaskPriorityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultTaskPriority)
        defaultTaskPriority = defaultTaskPriorityDecoded
        let defaultTaskScheduleToStartTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultTaskScheduleToStartTimeout)
        defaultTaskScheduleToStartTimeout = defaultTaskScheduleToStartTimeoutDecoded
        let defaultTaskScheduleToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultTaskScheduleToCloseTimeout)
        defaultTaskScheduleToCloseTimeout = defaultTaskScheduleToCloseTimeoutDecoded
    }
}

extension SWFClientTypes {
    /// Configuration settings registered with the activity type.
    public struct ActivityTypeConfiguration: Swift.Equatable {
        /// The default maximum time, in seconds, before which a worker processing a task must report progress by calling [RecordActivityTaskHeartbeat]. You can specify this value only when registering an activity type. The registered default value can be overridden when you schedule a task through the ScheduleActivityTask[Decision]. If the activity worker subsequently attempts to record a heartbeat or returns a result, the activity worker receives an UnknownResource fault. In this case, Amazon SWF no longer considers the activity task to be valid; the activity worker should clean up the activity task. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public var defaultTaskHeartbeatTimeout: Swift.String?
        /// The default task list specified for this activity type at registration. This default is used if a task list isn't provided when a task is scheduled through the ScheduleActivityTask[Decision]. You can override the default registered task list when scheduling a task through the ScheduleActivityTask[Decision].
        public var defaultTaskList: SWFClientTypes.TaskList?
        /// The default task priority for tasks of this activity type, specified at registration. If not set, then 0 is used as the default priority. This default can be overridden when scheduling an activity task. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see [Setting Task Priority](https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html) in the Amazon SWF Developer Guide.
        public var defaultTaskPriority: Swift.String?
        /// The default maximum duration, specified when registering the activity type, for tasks of this activity type. You can override this default when scheduling a task through the ScheduleActivityTask[Decision]. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public var defaultTaskScheduleToCloseTimeout: Swift.String?
        /// The default maximum duration, specified when registering the activity type, that a task of an activity type can wait before being assigned to a worker. You can override this default when scheduling a task through the ScheduleActivityTask[Decision]. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public var defaultTaskScheduleToStartTimeout: Swift.String?
        /// The default maximum duration for tasks of an activity type specified when registering the activity type. You can override this default when scheduling a task through the ScheduleActivityTask[Decision]. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public var defaultTaskStartToCloseTimeout: Swift.String?

        public init (
            defaultTaskHeartbeatTimeout: Swift.String? = nil,
            defaultTaskList: SWFClientTypes.TaskList? = nil,
            defaultTaskPriority: Swift.String? = nil,
            defaultTaskScheduleToCloseTimeout: Swift.String? = nil,
            defaultTaskScheduleToStartTimeout: Swift.String? = nil,
            defaultTaskStartToCloseTimeout: Swift.String? = nil
        )
        {
            self.defaultTaskHeartbeatTimeout = defaultTaskHeartbeatTimeout
            self.defaultTaskList = defaultTaskList
            self.defaultTaskPriority = defaultTaskPriority
            self.defaultTaskScheduleToCloseTimeout = defaultTaskScheduleToCloseTimeout
            self.defaultTaskScheduleToStartTimeout = defaultTaskScheduleToStartTimeout
            self.defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout
        }
    }

}

extension SWFClientTypes.ActivityTypeInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityType
        case creationDate
        case deprecationDate
        case description
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityType = self.activityType {
            try encodeContainer.encode(activityType, forKey: .activityType)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encodeTimestamp(creationDate, format: .epochSeconds, forKey: .creationDate)
        }
        if let deprecationDate = self.deprecationDate {
            try encodeContainer.encodeTimestamp(deprecationDate, format: .epochSeconds, forKey: .deprecationDate)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ActivityType.self, forKey: .activityType)
        activityType = activityTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SWFClientTypes.RegistrationStatus.self, forKey: .status)
        status = statusDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
        let deprecationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .deprecationDate)
        deprecationDate = deprecationDateDecoded
    }
}

extension SWFClientTypes {
    /// Detailed information about an activity type.
    public struct ActivityTypeInfo: Swift.Equatable {
        /// The [ActivityType] type structure representing the activity type.
        /// This member is required.
        public var activityType: SWFClientTypes.ActivityType?
        /// The date and time this activity type was created through [RegisterActivityType].
        /// This member is required.
        public var creationDate: ClientRuntime.Date?
        /// If DEPRECATED, the date and time [DeprecateActivityType] was called.
        public var deprecationDate: ClientRuntime.Date?
        /// The description of the activity type provided in [RegisterActivityType].
        public var description: Swift.String?
        /// The current status of the activity type.
        /// This member is required.
        public var status: SWFClientTypes.RegistrationStatus?

        public init (
            activityType: SWFClientTypes.ActivityType? = nil,
            creationDate: ClientRuntime.Date? = nil,
            deprecationDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            status: SWFClientTypes.RegistrationStatus? = nil
        )
        {
            self.activityType = activityType
            self.creationDate = creationDate
            self.deprecationDate = deprecationDate
            self.description = description
            self.status = status
        }
    }

}

extension SWFClientTypes.CancelTimerDecisionAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case timerId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let timerId = self.timerId {
            try encodeContainer.encode(timerId, forKey: .timerId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timerId)
        timerId = timerIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the CancelTimer decision. Access Control You can use IAM policies to control this decision's access to Amazon SWF resources as follows:
    ///
    /// * Use a Resource element with the domain name to limit the action to only specified domains.
    ///
    /// * Use an Action element to allow or deny permission to call this action.
    ///
    /// * You cannot use an IAM policy to constrain this action's parameters.
    ///
    ///
    /// If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's cause parameter is set to OPERATION_NOT_PERMITTED. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
    public struct CancelTimerDecisionAttributes: Swift.Equatable {
        /// The unique ID of the timer to cancel.
        /// This member is required.
        public var timerId: Swift.String?

        public init (
            timerId: Swift.String? = nil
        )
        {
            self.timerId = timerId
        }
    }

}

extension SWFClientTypes {
    public enum CancelTimerFailedCause: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case operationNotPermitted
        case timerIdUnknown
        case sdkUnknown(Swift.String)

        public static var allCases: [CancelTimerFailedCause] {
            return [
                .operationNotPermitted,
                .timerIdUnknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
            case .timerIdUnknown: return "TIMER_ID_UNKNOWN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CancelTimerFailedCause(rawValue: rawValue) ?? CancelTimerFailedCause.sdkUnknown(rawValue)
        }
    }
}

extension SWFClientTypes.CancelTimerFailedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case decisionTaskCompletedEventId
        case timerId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let timerId = self.timerId {
            try encodeContainer.encode(timerId, forKey: .timerId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timerId)
        timerId = timerIdDecoded
        let causeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.CancelTimerFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the CancelTimerFailed event.
    public struct CancelTimerFailedEventAttributes: Swift.Equatable {
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
        /// This member is required.
        public var cause: SWFClientTypes.CancelTimerFailedCause?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the CancelTimer decision to cancel this timer. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int
        /// The timerId provided in the CancelTimer decision that failed.
        /// This member is required.
        public var timerId: Swift.String?

        public init (
            cause: SWFClientTypes.CancelTimerFailedCause? = nil,
            decisionTaskCompletedEventId: Swift.Int = 0,
            timerId: Swift.String? = nil
        )
        {
            self.cause = cause
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.timerId = timerId
        }
    }

}

extension SWFClientTypes.CancelWorkflowExecutionDecisionAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = self.details {
            try encodeContainer.encode(details, forKey: .details)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .details)
        details = detailsDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the CancelWorkflowExecution decision. Access Control You can use IAM policies to control this decision's access to Amazon SWF resources as follows:
    ///
    /// * Use a Resource element with the domain name to limit the action to only specified domains.
    ///
    /// * Use an Action element to allow or deny permission to call this action.
    ///
    /// * You cannot use an IAM policy to constrain this action's parameters.
    ///
    ///
    /// If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's cause parameter is set to OPERATION_NOT_PERMITTED. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
    public struct CancelWorkflowExecutionDecisionAttributes: Swift.Equatable {
        /// Details of the cancellation.
        public var details: Swift.String?

        public init (
            details: Swift.String? = nil
        )
        {
            self.details = details
        }
    }

}

extension SWFClientTypes {
    public enum CancelWorkflowExecutionFailedCause: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case operationNotPermitted
        case unhandledDecision
        case sdkUnknown(Swift.String)

        public static var allCases: [CancelWorkflowExecutionFailedCause] {
            return [
                .operationNotPermitted,
                .unhandledDecision,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
            case .unhandledDecision: return "UNHANDLED_DECISION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CancelWorkflowExecutionFailedCause(rawValue: rawValue) ?? CancelWorkflowExecutionFailedCause.sdkUnknown(rawValue)
        }
    }
}

extension SWFClientTypes.CancelWorkflowExecutionFailedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case decisionTaskCompletedEventId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let causeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.CancelWorkflowExecutionFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the CancelWorkflowExecutionFailed event.
    public struct CancelWorkflowExecutionFailedEventAttributes: Swift.Equatable {
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
        /// This member is required.
        public var cause: SWFClientTypes.CancelWorkflowExecutionFailedCause?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the CancelWorkflowExecution decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int

        public init (
            cause: SWFClientTypes.CancelWorkflowExecutionFailedCause? = nil,
            decisionTaskCompletedEventId: Swift.Int = 0
        )
        {
            self.cause = cause
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        }
    }

}

extension SWFClientTypes {
    public enum ChildPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case abandon
        case requestCancel
        case terminate
        case sdkUnknown(Swift.String)

        public static var allCases: [ChildPolicy] {
            return [
                .abandon,
                .requestCancel,
                .terminate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .abandon: return "ABANDON"
            case .requestCancel: return "REQUEST_CANCEL"
            case .terminate: return "TERMINATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChildPolicy(rawValue: rawValue) ?? ChildPolicy.sdkUnknown(rawValue)
        }
    }
}

extension SWFClientTypes.ChildWorkflowExecutionCanceledEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details
        case initiatedEventId
        case startedEventId
        case workflowExecution
        case workflowType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = self.details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if initiatedEventId != 0 {
            try encodeContainer.encode(initiatedEventId, forKey: .initiatedEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
        if let workflowExecution = self.workflowExecution {
            try encodeContainer.encode(workflowExecution, forKey: .workflowExecution)
        }
        if let workflowType = self.workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowExecutionDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecution.self, forKey: .workflowExecution)
        workflowExecution = workflowExecutionDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .details)
        details = detailsDecoded
        let initiatedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .initiatedEventId) ?? 0
        initiatedEventId = initiatedEventIdDecoded
        let startedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedEventId) ?? 0
        startedEventId = startedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provide details of the ChildWorkflowExecutionCanceled event.
    public struct ChildWorkflowExecutionCanceledEventAttributes: Swift.Equatable {
        /// Details of the cancellation (if provided).
        public var details: Swift.String?
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution[Decision] to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var initiatedEventId: Swift.Int
        /// The ID of the ChildWorkflowExecutionStarted event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var startedEventId: Swift.Int
        /// The child workflow execution that was canceled.
        /// This member is required.
        public var workflowExecution: SWFClientTypes.WorkflowExecution?
        /// The type of the child workflow execution.
        /// This member is required.
        public var workflowType: SWFClientTypes.WorkflowType?

        public init (
            details: Swift.String? = nil,
            initiatedEventId: Swift.Int = 0,
            startedEventId: Swift.Int = 0,
            workflowExecution: SWFClientTypes.WorkflowExecution? = nil,
            workflowType: SWFClientTypes.WorkflowType? = nil
        )
        {
            self.details = details
            self.initiatedEventId = initiatedEventId
            self.startedEventId = startedEventId
            self.workflowExecution = workflowExecution
            self.workflowType = workflowType
        }
    }

}

extension SWFClientTypes.ChildWorkflowExecutionCompletedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case initiatedEventId
        case result
        case startedEventId
        case workflowExecution
        case workflowType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if initiatedEventId != 0 {
            try encodeContainer.encode(initiatedEventId, forKey: .initiatedEventId)
        }
        if let result = self.result {
            try encodeContainer.encode(result, forKey: .result)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
        if let workflowExecution = self.workflowExecution {
            try encodeContainer.encode(workflowExecution, forKey: .workflowExecution)
        }
        if let workflowType = self.workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowExecutionDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecution.self, forKey: .workflowExecution)
        workflowExecution = workflowExecutionDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let resultDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .result)
        result = resultDecoded
        let initiatedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .initiatedEventId) ?? 0
        initiatedEventId = initiatedEventIdDecoded
        let startedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedEventId) ?? 0
        startedEventId = startedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the ChildWorkflowExecutionCompleted event.
    public struct ChildWorkflowExecutionCompletedEventAttributes: Swift.Equatable {
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution[Decision] to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var initiatedEventId: Swift.Int
        /// The result of the child workflow execution.
        public var result: Swift.String?
        /// The ID of the ChildWorkflowExecutionStarted event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var startedEventId: Swift.Int
        /// The child workflow execution that was completed.
        /// This member is required.
        public var workflowExecution: SWFClientTypes.WorkflowExecution?
        /// The type of the child workflow execution.
        /// This member is required.
        public var workflowType: SWFClientTypes.WorkflowType?

        public init (
            initiatedEventId: Swift.Int = 0,
            result: Swift.String? = nil,
            startedEventId: Swift.Int = 0,
            workflowExecution: SWFClientTypes.WorkflowExecution? = nil,
            workflowType: SWFClientTypes.WorkflowType? = nil
        )
        {
            self.initiatedEventId = initiatedEventId
            self.result = result
            self.startedEventId = startedEventId
            self.workflowExecution = workflowExecution
            self.workflowType = workflowType
        }
    }

}

extension SWFClientTypes.ChildWorkflowExecutionFailedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details
        case initiatedEventId
        case reason
        case startedEventId
        case workflowExecution
        case workflowType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = self.details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if initiatedEventId != 0 {
            try encodeContainer.encode(initiatedEventId, forKey: .initiatedEventId)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
        if let workflowExecution = self.workflowExecution {
            try encodeContainer.encode(workflowExecution, forKey: .workflowExecution)
        }
        if let workflowType = self.workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowExecutionDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecution.self, forKey: .workflowExecution)
        workflowExecution = workflowExecutionDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .details)
        details = detailsDecoded
        let initiatedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .initiatedEventId) ?? 0
        initiatedEventId = initiatedEventIdDecoded
        let startedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedEventId) ?? 0
        startedEventId = startedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the ChildWorkflowExecutionFailed event.
    public struct ChildWorkflowExecutionFailedEventAttributes: Swift.Equatable {
        /// The details of the failure (if provided).
        public var details: Swift.String?
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution[Decision] to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var initiatedEventId: Swift.Int
        /// The reason for the failure (if provided).
        public var reason: Swift.String?
        /// The ID of the ChildWorkflowExecutionStarted event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var startedEventId: Swift.Int
        /// The child workflow execution that failed.
        /// This member is required.
        public var workflowExecution: SWFClientTypes.WorkflowExecution?
        /// The type of the child workflow execution.
        /// This member is required.
        public var workflowType: SWFClientTypes.WorkflowType?

        public init (
            details: Swift.String? = nil,
            initiatedEventId: Swift.Int = 0,
            reason: Swift.String? = nil,
            startedEventId: Swift.Int = 0,
            workflowExecution: SWFClientTypes.WorkflowExecution? = nil,
            workflowType: SWFClientTypes.WorkflowType? = nil
        )
        {
            self.details = details
            self.initiatedEventId = initiatedEventId
            self.reason = reason
            self.startedEventId = startedEventId
            self.workflowExecution = workflowExecution
            self.workflowType = workflowType
        }
    }

}

extension SWFClientTypes.ChildWorkflowExecutionStartedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case initiatedEventId
        case workflowExecution
        case workflowType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if initiatedEventId != 0 {
            try encodeContainer.encode(initiatedEventId, forKey: .initiatedEventId)
        }
        if let workflowExecution = self.workflowExecution {
            try encodeContainer.encode(workflowExecution, forKey: .workflowExecution)
        }
        if let workflowType = self.workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowExecutionDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecution.self, forKey: .workflowExecution)
        workflowExecution = workflowExecutionDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let initiatedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .initiatedEventId) ?? 0
        initiatedEventId = initiatedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the ChildWorkflowExecutionStarted event.
    public struct ChildWorkflowExecutionStartedEventAttributes: Swift.Equatable {
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution[Decision] to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var initiatedEventId: Swift.Int
        /// The child workflow execution that was started.
        /// This member is required.
        public var workflowExecution: SWFClientTypes.WorkflowExecution?
        /// The type of the child workflow execution.
        /// This member is required.
        public var workflowType: SWFClientTypes.WorkflowType?

        public init (
            initiatedEventId: Swift.Int = 0,
            workflowExecution: SWFClientTypes.WorkflowExecution? = nil,
            workflowType: SWFClientTypes.WorkflowType? = nil
        )
        {
            self.initiatedEventId = initiatedEventId
            self.workflowExecution = workflowExecution
            self.workflowType = workflowType
        }
    }

}

extension SWFClientTypes.ChildWorkflowExecutionTerminatedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case initiatedEventId
        case startedEventId
        case workflowExecution
        case workflowType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if initiatedEventId != 0 {
            try encodeContainer.encode(initiatedEventId, forKey: .initiatedEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
        if let workflowExecution = self.workflowExecution {
            try encodeContainer.encode(workflowExecution, forKey: .workflowExecution)
        }
        if let workflowType = self.workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowExecutionDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecution.self, forKey: .workflowExecution)
        workflowExecution = workflowExecutionDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let initiatedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .initiatedEventId) ?? 0
        initiatedEventId = initiatedEventIdDecoded
        let startedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedEventId) ?? 0
        startedEventId = startedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the ChildWorkflowExecutionTerminated event.
    public struct ChildWorkflowExecutionTerminatedEventAttributes: Swift.Equatable {
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution[Decision] to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var initiatedEventId: Swift.Int
        /// The ID of the ChildWorkflowExecutionStarted event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var startedEventId: Swift.Int
        /// The child workflow execution that was terminated.
        /// This member is required.
        public var workflowExecution: SWFClientTypes.WorkflowExecution?
        /// The type of the child workflow execution.
        /// This member is required.
        public var workflowType: SWFClientTypes.WorkflowType?

        public init (
            initiatedEventId: Swift.Int = 0,
            startedEventId: Swift.Int = 0,
            workflowExecution: SWFClientTypes.WorkflowExecution? = nil,
            workflowType: SWFClientTypes.WorkflowType? = nil
        )
        {
            self.initiatedEventId = initiatedEventId
            self.startedEventId = startedEventId
            self.workflowExecution = workflowExecution
            self.workflowType = workflowType
        }
    }

}

extension SWFClientTypes.ChildWorkflowExecutionTimedOutEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case initiatedEventId
        case startedEventId
        case timeoutType
        case workflowExecution
        case workflowType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if initiatedEventId != 0 {
            try encodeContainer.encode(initiatedEventId, forKey: .initiatedEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
        if let timeoutType = self.timeoutType {
            try encodeContainer.encode(timeoutType.rawValue, forKey: .timeoutType)
        }
        if let workflowExecution = self.workflowExecution {
            try encodeContainer.encode(workflowExecution, forKey: .workflowExecution)
        }
        if let workflowType = self.workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowExecutionDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecution.self, forKey: .workflowExecution)
        workflowExecution = workflowExecutionDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let timeoutTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecutionTimeoutType.self, forKey: .timeoutType)
        timeoutType = timeoutTypeDecoded
        let initiatedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .initiatedEventId) ?? 0
        initiatedEventId = initiatedEventIdDecoded
        let startedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedEventId) ?? 0
        startedEventId = startedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the ChildWorkflowExecutionTimedOut event.
    public struct ChildWorkflowExecutionTimedOutEventAttributes: Swift.Equatable {
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution[Decision] to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var initiatedEventId: Swift.Int
        /// The ID of the ChildWorkflowExecutionStarted event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var startedEventId: Swift.Int
        /// The type of the timeout that caused the child workflow execution to time out.
        /// This member is required.
        public var timeoutType: SWFClientTypes.WorkflowExecutionTimeoutType?
        /// The child workflow execution that timed out.
        /// This member is required.
        public var workflowExecution: SWFClientTypes.WorkflowExecution?
        /// The type of the child workflow execution.
        /// This member is required.
        public var workflowType: SWFClientTypes.WorkflowType?

        public init (
            initiatedEventId: Swift.Int = 0,
            startedEventId: Swift.Int = 0,
            timeoutType: SWFClientTypes.WorkflowExecutionTimeoutType? = nil,
            workflowExecution: SWFClientTypes.WorkflowExecution? = nil,
            workflowType: SWFClientTypes.WorkflowType? = nil
        )
        {
            self.initiatedEventId = initiatedEventId
            self.startedEventId = startedEventId
            self.timeoutType = timeoutType
            self.workflowExecution = workflowExecution
            self.workflowType = workflowType
        }
    }

}

extension SWFClientTypes {
    public enum CloseStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case canceled
        case completed
        case continuedAsNew
        case failed
        case terminated
        case timedOut
        case sdkUnknown(Swift.String)

        public static var allCases: [CloseStatus] {
            return [
                .canceled,
                .completed,
                .continuedAsNew,
                .failed,
                .terminated,
                .timedOut,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .canceled: return "CANCELED"
            case .completed: return "COMPLETED"
            case .continuedAsNew: return "CONTINUED_AS_NEW"
            case .failed: return "FAILED"
            case .terminated: return "TERMINATED"
            case .timedOut: return "TIMED_OUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CloseStatus(rawValue: rawValue) ?? CloseStatus.sdkUnknown(rawValue)
        }
    }
}

extension SWFClientTypes.CloseStatusFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(SWFClientTypes.CloseStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension SWFClientTypes {
    /// Used to filter the closed workflow executions in visibility APIs by their close status.
    public struct CloseStatusFilter: Swift.Equatable {
        /// The close status that must match the close status of an execution for it to meet the criteria of this filter.
        /// This member is required.
        public var status: SWFClientTypes.CloseStatus?

        public init (
            status: SWFClientTypes.CloseStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension SWFClientTypes.CompleteWorkflowExecutionDecisionAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case result
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let result = self.result {
            try encodeContainer.encode(result, forKey: .result)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .result)
        result = resultDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the CompleteWorkflowExecution decision. Access Control You can use IAM policies to control this decision's access to Amazon SWF resources as follows:
    ///
    /// * Use a Resource element with the domain name to limit the action to only specified domains.
    ///
    /// * Use an Action element to allow or deny permission to call this action.
    ///
    /// * You cannot use an IAM policy to constrain this action's parameters.
    ///
    ///
    /// If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's cause parameter is set to OPERATION_NOT_PERMITTED. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
    public struct CompleteWorkflowExecutionDecisionAttributes: Swift.Equatable {
        /// The result of the workflow execution. The form of the result is implementation defined.
        public var result: Swift.String?

        public init (
            result: Swift.String? = nil
        )
        {
            self.result = result
        }
    }

}

extension SWFClientTypes {
    public enum CompleteWorkflowExecutionFailedCause: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case operationNotPermitted
        case unhandledDecision
        case sdkUnknown(Swift.String)

        public static var allCases: [CompleteWorkflowExecutionFailedCause] {
            return [
                .operationNotPermitted,
                .unhandledDecision,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
            case .unhandledDecision: return "UNHANDLED_DECISION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CompleteWorkflowExecutionFailedCause(rawValue: rawValue) ?? CompleteWorkflowExecutionFailedCause.sdkUnknown(rawValue)
        }
    }
}

extension SWFClientTypes.CompleteWorkflowExecutionFailedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case decisionTaskCompletedEventId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let causeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.CompleteWorkflowExecutionFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the CompleteWorkflowExecutionFailed event.
    public struct CompleteWorkflowExecutionFailedEventAttributes: Swift.Equatable {
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
        /// This member is required.
        public var cause: SWFClientTypes.CompleteWorkflowExecutionFailedCause?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the CompleteWorkflowExecution decision to complete this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int

        public init (
            cause: SWFClientTypes.CompleteWorkflowExecutionFailedCause? = nil,
            decisionTaskCompletedEventId: Swift.Int = 0
        )
        {
            self.cause = cause
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        }
    }

}

extension SWFClientTypes.ContinueAsNewWorkflowExecutionDecisionAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case childPolicy
        case executionStartToCloseTimeout
        case input
        case lambdaRole
        case tagList
        case taskList
        case taskPriority
        case taskStartToCloseTimeout
        case workflowTypeVersion
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childPolicy = self.childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if let executionStartToCloseTimeout = self.executionStartToCloseTimeout {
            try encodeContainer.encode(executionStartToCloseTimeout, forKey: .executionStartToCloseTimeout)
        }
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let lambdaRole = self.lambdaRole {
            try encodeContainer.encode(lambdaRole, forKey: .lambdaRole)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for tag0 in tagList {
                try tagListContainer.encode(tag0)
            }
        }
        if let taskList = self.taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = self.taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
        if let taskStartToCloseTimeout = self.taskStartToCloseTimeout {
            try encodeContainer.encode(taskStartToCloseTimeout, forKey: .taskStartToCloseTimeout)
        }
        if let workflowTypeVersion = self.workflowTypeVersion {
            try encodeContainer.encode(workflowTypeVersion, forKey: .workflowTypeVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
        let executionStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionStartToCloseTimeout)
        executionStartToCloseTimeout = executionStartToCloseTimeoutDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let taskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskStartToCloseTimeout)
        taskStartToCloseTimeout = taskStartToCloseTimeoutDecoded
        let childPolicyDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ChildPolicy.self, forKey: .childPolicy)
        childPolicy = childPolicyDecoded
        let tagListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagList)
        var tagListDecoded0:[Swift.String]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [Swift.String]()
            for string0 in tagListContainer {
                if let string0 = string0 {
                    tagListDecoded0?.append(string0)
                }
            }
        }
        tagList = tagListDecoded0
        let workflowTypeVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowTypeVersion)
        workflowTypeVersion = workflowTypeVersionDecoded
        let lambdaRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lambdaRole)
        lambdaRole = lambdaRoleDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the ContinueAsNewWorkflowExecution decision. Access Control You can use IAM policies to control this decision's access to Amazon SWF resources as follows:
    ///
    /// * Use a Resource element with the domain name to limit the action to only specified domains.
    ///
    /// * Use an Action element to allow or deny permission to call this action.
    ///
    /// * Constrain the following parameters by using a Condition element with the appropriate keys.
    ///
    /// * tag – A tag used to identify the workflow execution
    ///
    /// * taskList – String constraint. The key is swf:taskList.name.
    ///
    /// * workflowType.version – String constraint. The key is swf:workflowType.version.
    ///
    ///
    ///
    ///
    ///
    /// If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's cause parameter is set to OPERATION_NOT_PERMITTED. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
    public struct ContinueAsNewWorkflowExecutionDecisionAttributes: Swift.Equatable {
        /// If set, specifies the policy to use for the child workflow executions of the new execution if it is terminated by calling the [TerminateWorkflowExecution] action explicitly or due to an expired timeout. This policy overrides the default child policy specified when registering the workflow type using [RegisterWorkflowType]. The supported child policies are:
        ///
        /// * TERMINATE – The child executions are terminated.
        ///
        /// * REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.
        ///
        /// * ABANDON – No action is taken. The child executions continue to run.
        ///
        ///
        /// A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault is returned.
        public var childPolicy: SWFClientTypes.ChildPolicy?
        /// If set, specifies the total duration for this workflow execution. This overrides the defaultExecutionStartToCloseTimeout specified when registering the workflow type. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration. An execution start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this field. If neither this field is set nor a default execution start-to-close timeout was specified at registration time then a fault is returned.
        public var executionStartToCloseTimeout: Swift.String?
        /// The input provided to the new workflow execution.
        public var input: Swift.String?
        /// The IAM role to attach to the new (continued) execution.
        public var lambdaRole: Swift.String?
        /// The list of tags to associate with the new workflow execution. A maximum of 5 tags can be specified. You can list workflow executions with a specific tag by calling [ListOpenWorkflowExecutions] or [ListClosedWorkflowExecutions] and specifying a [TagFilter].
        public var tagList: [Swift.String]?
        /// The task list to use for the decisions of the new (continued) workflow execution.
        public var taskList: SWFClientTypes.TaskList?
        /// The task priority that, if set, specifies the priority for the decision tasks for this workflow execution. This overrides the defaultTaskPriority specified when registering the workflow type. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see [Setting Task Priority](https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html) in the Amazon SWF Developer Guide.
        public var taskPriority: Swift.String?
        /// Specifies the maximum duration of decision tasks for the new workflow execution. This parameter overrides the defaultTaskStartToCloseTimout specified when registering the workflow type using [RegisterWorkflowType]. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration. A task start-to-close timeout for the new workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task start-to-close timeout was specified at registration time then a fault is returned.
        public var taskStartToCloseTimeout: Swift.String?
        /// The version of the workflow to start.
        public var workflowTypeVersion: Swift.String?

        public init (
            childPolicy: SWFClientTypes.ChildPolicy? = nil,
            executionStartToCloseTimeout: Swift.String? = nil,
            input: Swift.String? = nil,
            lambdaRole: Swift.String? = nil,
            tagList: [Swift.String]? = nil,
            taskList: SWFClientTypes.TaskList? = nil,
            taskPriority: Swift.String? = nil,
            taskStartToCloseTimeout: Swift.String? = nil,
            workflowTypeVersion: Swift.String? = nil
        )
        {
            self.childPolicy = childPolicy
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
            self.input = input
            self.lambdaRole = lambdaRole
            self.tagList = tagList
            self.taskList = taskList
            self.taskPriority = taskPriority
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.workflowTypeVersion = workflowTypeVersion
        }
    }

}

extension SWFClientTypes {
    public enum ContinueAsNewWorkflowExecutionFailedCause: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case continueAsNewWorkflowExecutionRateExceeded
        case defaultChildPolicyUndefined
        case defaultExecutionStartToCloseTimeoutUndefined
        case defaultTaskListUndefined
        case defaultTaskStartToCloseTimeoutUndefined
        case operationNotPermitted
        case unhandledDecision
        case workflowTypeDeprecated
        case workflowTypeDoesNotExist
        case sdkUnknown(Swift.String)

        public static var allCases: [ContinueAsNewWorkflowExecutionFailedCause] {
            return [
                .continueAsNewWorkflowExecutionRateExceeded,
                .defaultChildPolicyUndefined,
                .defaultExecutionStartToCloseTimeoutUndefined,
                .defaultTaskListUndefined,
                .defaultTaskStartToCloseTimeoutUndefined,
                .operationNotPermitted,
                .unhandledDecision,
                .workflowTypeDeprecated,
                .workflowTypeDoesNotExist,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .continueAsNewWorkflowExecutionRateExceeded: return "CONTINUE_AS_NEW_WORKFLOW_EXECUTION_RATE_EXCEEDED"
            case .defaultChildPolicyUndefined: return "DEFAULT_CHILD_POLICY_UNDEFINED"
            case .defaultExecutionStartToCloseTimeoutUndefined: return "DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED"
            case .defaultTaskListUndefined: return "DEFAULT_TASK_LIST_UNDEFINED"
            case .defaultTaskStartToCloseTimeoutUndefined: return "DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED"
            case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
            case .unhandledDecision: return "UNHANDLED_DECISION"
            case .workflowTypeDeprecated: return "WORKFLOW_TYPE_DEPRECATED"
            case .workflowTypeDoesNotExist: return "WORKFLOW_TYPE_DOES_NOT_EXIST"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContinueAsNewWorkflowExecutionFailedCause(rawValue: rawValue) ?? ContinueAsNewWorkflowExecutionFailedCause.sdkUnknown(rawValue)
        }
    }
}

extension SWFClientTypes.ContinueAsNewWorkflowExecutionFailedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case decisionTaskCompletedEventId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let causeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ContinueAsNewWorkflowExecutionFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the ContinueAsNewWorkflowExecutionFailed event.
    public struct ContinueAsNewWorkflowExecutionFailedEventAttributes: Swift.Equatable {
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
        /// This member is required.
        public var cause: SWFClientTypes.ContinueAsNewWorkflowExecutionFailedCause?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the ContinueAsNewWorkflowExecution decision that started this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int

        public init (
            cause: SWFClientTypes.ContinueAsNewWorkflowExecutionFailedCause? = nil,
            decisionTaskCompletedEventId: Swift.Int = 0
        )
        {
            self.cause = cause
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        }
    }

}

extension CountClosedWorkflowExecutionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case closeStatusFilter
        case closeTimeFilter
        case domain
        case executionFilter
        case startTimeFilter
        case tagFilter
        case typeFilter
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let closeStatusFilter = self.closeStatusFilter {
            try encodeContainer.encode(closeStatusFilter, forKey: .closeStatusFilter)
        }
        if let closeTimeFilter = self.closeTimeFilter {
            try encodeContainer.encode(closeTimeFilter, forKey: .closeTimeFilter)
        }
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let executionFilter = self.executionFilter {
            try encodeContainer.encode(executionFilter, forKey: .executionFilter)
        }
        if let startTimeFilter = self.startTimeFilter {
            try encodeContainer.encode(startTimeFilter, forKey: .startTimeFilter)
        }
        if let tagFilter = self.tagFilter {
            try encodeContainer.encode(tagFilter, forKey: .tagFilter)
        }
        if let typeFilter = self.typeFilter {
            try encodeContainer.encode(typeFilter, forKey: .typeFilter)
        }
    }
}

extension CountClosedWorkflowExecutionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CountClosedWorkflowExecutionsInput: Swift.Equatable {
    /// If specified, only workflow executions that match this close status are counted. This filter has an affect only if executionStatus is specified as CLOSED. closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
    public var closeStatusFilter: SWFClientTypes.CloseStatusFilter?
    /// If specified, only workflow executions that meet the close time criteria of the filter are counted. startTimeFilter and closeTimeFilter are mutually exclusive. You must specify one of these in a request but not both.
    public var closeTimeFilter: SWFClientTypes.ExecutionTimeFilter?
    /// The name of the domain containing the workflow executions to count.
    /// This member is required.
    public var domain: Swift.String?
    /// If specified, only workflow executions matching the WorkflowId in the filter are counted. closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
    public var executionFilter: SWFClientTypes.WorkflowExecutionFilter?
    /// If specified, only workflow executions that meet the start time criteria of the filter are counted. startTimeFilter and closeTimeFilter are mutually exclusive. You must specify one of these in a request but not both.
    public var startTimeFilter: SWFClientTypes.ExecutionTimeFilter?
    /// If specified, only executions that have a tag that matches the filter are counted. closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
    public var tagFilter: SWFClientTypes.TagFilter?
    /// If specified, indicates the type of the workflow executions to be counted. closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
    public var typeFilter: SWFClientTypes.WorkflowTypeFilter?

    public init (
        closeStatusFilter: SWFClientTypes.CloseStatusFilter? = nil,
        closeTimeFilter: SWFClientTypes.ExecutionTimeFilter? = nil,
        domain: Swift.String? = nil,
        executionFilter: SWFClientTypes.WorkflowExecutionFilter? = nil,
        startTimeFilter: SWFClientTypes.ExecutionTimeFilter? = nil,
        tagFilter: SWFClientTypes.TagFilter? = nil,
        typeFilter: SWFClientTypes.WorkflowTypeFilter? = nil
    )
    {
        self.closeStatusFilter = closeStatusFilter
        self.closeTimeFilter = closeTimeFilter
        self.domain = domain
        self.executionFilter = executionFilter
        self.startTimeFilter = startTimeFilter
        self.tagFilter = tagFilter
        self.typeFilter = typeFilter
    }
}

struct CountClosedWorkflowExecutionsInputBody: Swift.Equatable {
    let domain: Swift.String?
    let startTimeFilter: SWFClientTypes.ExecutionTimeFilter?
    let closeTimeFilter: SWFClientTypes.ExecutionTimeFilter?
    let executionFilter: SWFClientTypes.WorkflowExecutionFilter?
    let typeFilter: SWFClientTypes.WorkflowTypeFilter?
    let tagFilter: SWFClientTypes.TagFilter?
    let closeStatusFilter: SWFClientTypes.CloseStatusFilter?
}

extension CountClosedWorkflowExecutionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case closeStatusFilter
        case closeTimeFilter
        case domain
        case executionFilter
        case startTimeFilter
        case tagFilter
        case typeFilter
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let startTimeFilterDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ExecutionTimeFilter.self, forKey: .startTimeFilter)
        startTimeFilter = startTimeFilterDecoded
        let closeTimeFilterDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ExecutionTimeFilter.self, forKey: .closeTimeFilter)
        closeTimeFilter = closeTimeFilterDecoded
        let executionFilterDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecutionFilter.self, forKey: .executionFilter)
        executionFilter = executionFilterDecoded
        let typeFilterDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowTypeFilter.self, forKey: .typeFilter)
        typeFilter = typeFilterDecoded
        let tagFilterDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TagFilter.self, forKey: .tagFilter)
        tagFilter = tagFilterDecoded
        let closeStatusFilterDecoded = try containerValues.decodeIfPresent(SWFClientTypes.CloseStatusFilter.self, forKey: .closeStatusFilter)
        closeStatusFilter = closeStatusFilterDecoded
    }
}

extension CountClosedWorkflowExecutionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CountClosedWorkflowExecutionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CountClosedWorkflowExecutionsOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CountClosedWorkflowExecutionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CountClosedWorkflowExecutionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.count = output.count
            self.truncated = output.truncated
        } else {
            self.count = 0
            self.truncated = false
        }
    }
}

/// Contains the count of workflow executions returned from [CountOpenWorkflowExecutions] or [CountClosedWorkflowExecutions]
public struct CountClosedWorkflowExecutionsOutputResponse: Swift.Equatable {
    /// The number of workflow executions.
    /// This member is required.
    public var count: Swift.Int
    /// If set to true, indicates that the actual count was more than the maximum supported by this API and the count returned is the truncated value.
    public var truncated: Swift.Bool

    public init (
        count: Swift.Int = 0,
        truncated: Swift.Bool = false
    )
    {
        self.count = count
        self.truncated = truncated
    }
}

struct CountClosedWorkflowExecutionsOutputResponseBody: Swift.Equatable {
    let count: Swift.Int
    let truncated: Swift.Bool
}

extension CountClosedWorkflowExecutionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count
        case truncated
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count) ?? 0
        count = countDecoded
        let truncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .truncated) ?? false
        truncated = truncatedDecoded
    }
}

extension CountOpenWorkflowExecutionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case executionFilter
        case startTimeFilter
        case tagFilter
        case typeFilter
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let executionFilter = self.executionFilter {
            try encodeContainer.encode(executionFilter, forKey: .executionFilter)
        }
        if let startTimeFilter = self.startTimeFilter {
            try encodeContainer.encode(startTimeFilter, forKey: .startTimeFilter)
        }
        if let tagFilter = self.tagFilter {
            try encodeContainer.encode(tagFilter, forKey: .tagFilter)
        }
        if let typeFilter = self.typeFilter {
            try encodeContainer.encode(typeFilter, forKey: .typeFilter)
        }
    }
}

extension CountOpenWorkflowExecutionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CountOpenWorkflowExecutionsInput: Swift.Equatable {
    /// The name of the domain containing the workflow executions to count.
    /// This member is required.
    public var domain: Swift.String?
    /// If specified, only workflow executions matching the WorkflowId in the filter are counted. executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
    public var executionFilter: SWFClientTypes.WorkflowExecutionFilter?
    /// Specifies the start time criteria that workflow executions must meet in order to be counted.
    /// This member is required.
    public var startTimeFilter: SWFClientTypes.ExecutionTimeFilter?
    /// If specified, only executions that have a tag that matches the filter are counted. executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
    public var tagFilter: SWFClientTypes.TagFilter?
    /// Specifies the type of the workflow executions to be counted. executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
    public var typeFilter: SWFClientTypes.WorkflowTypeFilter?

    public init (
        domain: Swift.String? = nil,
        executionFilter: SWFClientTypes.WorkflowExecutionFilter? = nil,
        startTimeFilter: SWFClientTypes.ExecutionTimeFilter? = nil,
        tagFilter: SWFClientTypes.TagFilter? = nil,
        typeFilter: SWFClientTypes.WorkflowTypeFilter? = nil
    )
    {
        self.domain = domain
        self.executionFilter = executionFilter
        self.startTimeFilter = startTimeFilter
        self.tagFilter = tagFilter
        self.typeFilter = typeFilter
    }
}

struct CountOpenWorkflowExecutionsInputBody: Swift.Equatable {
    let domain: Swift.String?
    let startTimeFilter: SWFClientTypes.ExecutionTimeFilter?
    let typeFilter: SWFClientTypes.WorkflowTypeFilter?
    let tagFilter: SWFClientTypes.TagFilter?
    let executionFilter: SWFClientTypes.WorkflowExecutionFilter?
}

extension CountOpenWorkflowExecutionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case executionFilter
        case startTimeFilter
        case tagFilter
        case typeFilter
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let startTimeFilterDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ExecutionTimeFilter.self, forKey: .startTimeFilter)
        startTimeFilter = startTimeFilterDecoded
        let typeFilterDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowTypeFilter.self, forKey: .typeFilter)
        typeFilter = typeFilterDecoded
        let tagFilterDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TagFilter.self, forKey: .tagFilter)
        tagFilter = tagFilterDecoded
        let executionFilterDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecutionFilter.self, forKey: .executionFilter)
        executionFilter = executionFilterDecoded
    }
}

extension CountOpenWorkflowExecutionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CountOpenWorkflowExecutionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CountOpenWorkflowExecutionsOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CountOpenWorkflowExecutionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CountOpenWorkflowExecutionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.count = output.count
            self.truncated = output.truncated
        } else {
            self.count = 0
            self.truncated = false
        }
    }
}

/// Contains the count of workflow executions returned from [CountOpenWorkflowExecutions] or [CountClosedWorkflowExecutions]
public struct CountOpenWorkflowExecutionsOutputResponse: Swift.Equatable {
    /// The number of workflow executions.
    /// This member is required.
    public var count: Swift.Int
    /// If set to true, indicates that the actual count was more than the maximum supported by this API and the count returned is the truncated value.
    public var truncated: Swift.Bool

    public init (
        count: Swift.Int = 0,
        truncated: Swift.Bool = false
    )
    {
        self.count = count
        self.truncated = truncated
    }
}

struct CountOpenWorkflowExecutionsOutputResponseBody: Swift.Equatable {
    let count: Swift.Int
    let truncated: Swift.Bool
}

extension CountOpenWorkflowExecutionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count
        case truncated
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count) ?? 0
        count = countDecoded
        let truncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .truncated) ?? false
        truncated = truncatedDecoded
    }
}

extension CountPendingActivityTasksInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case taskList
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let taskList = self.taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
    }
}

extension CountPendingActivityTasksInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CountPendingActivityTasksInput: Swift.Equatable {
    /// The name of the domain that contains the task list.
    /// This member is required.
    public var domain: Swift.String?
    /// The name of the task list.
    /// This member is required.
    public var taskList: SWFClientTypes.TaskList?

    public init (
        domain: Swift.String? = nil,
        taskList: SWFClientTypes.TaskList? = nil
    )
    {
        self.domain = domain
        self.taskList = taskList
    }
}

struct CountPendingActivityTasksInputBody: Swift.Equatable {
    let domain: Swift.String?
    let taskList: SWFClientTypes.TaskList?
}

extension CountPendingActivityTasksInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case taskList
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
    }
}

extension CountPendingActivityTasksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CountPendingActivityTasksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CountPendingActivityTasksOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CountPendingActivityTasksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CountPendingActivityTasksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.count = output.count
            self.truncated = output.truncated
        } else {
            self.count = 0
            self.truncated = false
        }
    }
}

/// Contains the count of tasks in a task list.
public struct CountPendingActivityTasksOutputResponse: Swift.Equatable {
    /// The number of tasks in the task list.
    /// This member is required.
    public var count: Swift.Int
    /// If set to true, indicates that the actual count was more than the maximum supported by this API and the count returned is the truncated value.
    public var truncated: Swift.Bool

    public init (
        count: Swift.Int = 0,
        truncated: Swift.Bool = false
    )
    {
        self.count = count
        self.truncated = truncated
    }
}

struct CountPendingActivityTasksOutputResponseBody: Swift.Equatable {
    let count: Swift.Int
    let truncated: Swift.Bool
}

extension CountPendingActivityTasksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count
        case truncated
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count) ?? 0
        count = countDecoded
        let truncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .truncated) ?? false
        truncated = truncatedDecoded
    }
}

extension CountPendingDecisionTasksInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case taskList
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let taskList = self.taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
    }
}

extension CountPendingDecisionTasksInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CountPendingDecisionTasksInput: Swift.Equatable {
    /// The name of the domain that contains the task list.
    /// This member is required.
    public var domain: Swift.String?
    /// The name of the task list.
    /// This member is required.
    public var taskList: SWFClientTypes.TaskList?

    public init (
        domain: Swift.String? = nil,
        taskList: SWFClientTypes.TaskList? = nil
    )
    {
        self.domain = domain
        self.taskList = taskList
    }
}

struct CountPendingDecisionTasksInputBody: Swift.Equatable {
    let domain: Swift.String?
    let taskList: SWFClientTypes.TaskList?
}

extension CountPendingDecisionTasksInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case taskList
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
    }
}

extension CountPendingDecisionTasksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CountPendingDecisionTasksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CountPendingDecisionTasksOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CountPendingDecisionTasksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CountPendingDecisionTasksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.count = output.count
            self.truncated = output.truncated
        } else {
            self.count = 0
            self.truncated = false
        }
    }
}

/// Contains the count of tasks in a task list.
public struct CountPendingDecisionTasksOutputResponse: Swift.Equatable {
    /// The number of tasks in the task list.
    /// This member is required.
    public var count: Swift.Int
    /// If set to true, indicates that the actual count was more than the maximum supported by this API and the count returned is the truncated value.
    public var truncated: Swift.Bool

    public init (
        count: Swift.Int = 0,
        truncated: Swift.Bool = false
    )
    {
        self.count = count
        self.truncated = truncated
    }
}

struct CountPendingDecisionTasksOutputResponseBody: Swift.Equatable {
    let count: Swift.Int
    let truncated: Swift.Bool
}

extension CountPendingDecisionTasksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count
        case truncated
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count) ?? 0
        count = countDecoded
        let truncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .truncated) ?? false
        truncated = truncatedDecoded
    }
}

extension SWFClientTypes.Decision: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cancelTimerDecisionAttributes
        case cancelWorkflowExecutionDecisionAttributes
        case completeWorkflowExecutionDecisionAttributes
        case continueAsNewWorkflowExecutionDecisionAttributes
        case decisionType
        case failWorkflowExecutionDecisionAttributes
        case recordMarkerDecisionAttributes
        case requestCancelActivityTaskDecisionAttributes
        case requestCancelExternalWorkflowExecutionDecisionAttributes
        case scheduleActivityTaskDecisionAttributes
        case scheduleLambdaFunctionDecisionAttributes
        case signalExternalWorkflowExecutionDecisionAttributes
        case startChildWorkflowExecutionDecisionAttributes
        case startTimerDecisionAttributes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cancelTimerDecisionAttributes = self.cancelTimerDecisionAttributes {
            try encodeContainer.encode(cancelTimerDecisionAttributes, forKey: .cancelTimerDecisionAttributes)
        }
        if let cancelWorkflowExecutionDecisionAttributes = self.cancelWorkflowExecutionDecisionAttributes {
            try encodeContainer.encode(cancelWorkflowExecutionDecisionAttributes, forKey: .cancelWorkflowExecutionDecisionAttributes)
        }
        if let completeWorkflowExecutionDecisionAttributes = self.completeWorkflowExecutionDecisionAttributes {
            try encodeContainer.encode(completeWorkflowExecutionDecisionAttributes, forKey: .completeWorkflowExecutionDecisionAttributes)
        }
        if let continueAsNewWorkflowExecutionDecisionAttributes = self.continueAsNewWorkflowExecutionDecisionAttributes {
            try encodeContainer.encode(continueAsNewWorkflowExecutionDecisionAttributes, forKey: .continueAsNewWorkflowExecutionDecisionAttributes)
        }
        if let decisionType = self.decisionType {
            try encodeContainer.encode(decisionType.rawValue, forKey: .decisionType)
        }
        if let failWorkflowExecutionDecisionAttributes = self.failWorkflowExecutionDecisionAttributes {
            try encodeContainer.encode(failWorkflowExecutionDecisionAttributes, forKey: .failWorkflowExecutionDecisionAttributes)
        }
        if let recordMarkerDecisionAttributes = self.recordMarkerDecisionAttributes {
            try encodeContainer.encode(recordMarkerDecisionAttributes, forKey: .recordMarkerDecisionAttributes)
        }
        if let requestCancelActivityTaskDecisionAttributes = self.requestCancelActivityTaskDecisionAttributes {
            try encodeContainer.encode(requestCancelActivityTaskDecisionAttributes, forKey: .requestCancelActivityTaskDecisionAttributes)
        }
        if let requestCancelExternalWorkflowExecutionDecisionAttributes = self.requestCancelExternalWorkflowExecutionDecisionAttributes {
            try encodeContainer.encode(requestCancelExternalWorkflowExecutionDecisionAttributes, forKey: .requestCancelExternalWorkflowExecutionDecisionAttributes)
        }
        if let scheduleActivityTaskDecisionAttributes = self.scheduleActivityTaskDecisionAttributes {
            try encodeContainer.encode(scheduleActivityTaskDecisionAttributes, forKey: .scheduleActivityTaskDecisionAttributes)
        }
        if let scheduleLambdaFunctionDecisionAttributes = self.scheduleLambdaFunctionDecisionAttributes {
            try encodeContainer.encode(scheduleLambdaFunctionDecisionAttributes, forKey: .scheduleLambdaFunctionDecisionAttributes)
        }
        if let signalExternalWorkflowExecutionDecisionAttributes = self.signalExternalWorkflowExecutionDecisionAttributes {
            try encodeContainer.encode(signalExternalWorkflowExecutionDecisionAttributes, forKey: .signalExternalWorkflowExecutionDecisionAttributes)
        }
        if let startChildWorkflowExecutionDecisionAttributes = self.startChildWorkflowExecutionDecisionAttributes {
            try encodeContainer.encode(startChildWorkflowExecutionDecisionAttributes, forKey: .startChildWorkflowExecutionDecisionAttributes)
        }
        if let startTimerDecisionAttributes = self.startTimerDecisionAttributes {
            try encodeContainer.encode(startTimerDecisionAttributes, forKey: .startTimerDecisionAttributes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let decisionTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.DecisionType.self, forKey: .decisionType)
        decisionType = decisionTypeDecoded
        let scheduleActivityTaskDecisionAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ScheduleActivityTaskDecisionAttributes.self, forKey: .scheduleActivityTaskDecisionAttributes)
        scheduleActivityTaskDecisionAttributes = scheduleActivityTaskDecisionAttributesDecoded
        let requestCancelActivityTaskDecisionAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.RequestCancelActivityTaskDecisionAttributes.self, forKey: .requestCancelActivityTaskDecisionAttributes)
        requestCancelActivityTaskDecisionAttributes = requestCancelActivityTaskDecisionAttributesDecoded
        let completeWorkflowExecutionDecisionAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.CompleteWorkflowExecutionDecisionAttributes.self, forKey: .completeWorkflowExecutionDecisionAttributes)
        completeWorkflowExecutionDecisionAttributes = completeWorkflowExecutionDecisionAttributesDecoded
        let failWorkflowExecutionDecisionAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.FailWorkflowExecutionDecisionAttributes.self, forKey: .failWorkflowExecutionDecisionAttributes)
        failWorkflowExecutionDecisionAttributes = failWorkflowExecutionDecisionAttributesDecoded
        let cancelWorkflowExecutionDecisionAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.CancelWorkflowExecutionDecisionAttributes.self, forKey: .cancelWorkflowExecutionDecisionAttributes)
        cancelWorkflowExecutionDecisionAttributes = cancelWorkflowExecutionDecisionAttributesDecoded
        let continueAsNewWorkflowExecutionDecisionAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ContinueAsNewWorkflowExecutionDecisionAttributes.self, forKey: .continueAsNewWorkflowExecutionDecisionAttributes)
        continueAsNewWorkflowExecutionDecisionAttributes = continueAsNewWorkflowExecutionDecisionAttributesDecoded
        let recordMarkerDecisionAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.RecordMarkerDecisionAttributes.self, forKey: .recordMarkerDecisionAttributes)
        recordMarkerDecisionAttributes = recordMarkerDecisionAttributesDecoded
        let startTimerDecisionAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.StartTimerDecisionAttributes.self, forKey: .startTimerDecisionAttributes)
        startTimerDecisionAttributes = startTimerDecisionAttributesDecoded
        let cancelTimerDecisionAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.CancelTimerDecisionAttributes.self, forKey: .cancelTimerDecisionAttributes)
        cancelTimerDecisionAttributes = cancelTimerDecisionAttributesDecoded
        let signalExternalWorkflowExecutionDecisionAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.SignalExternalWorkflowExecutionDecisionAttributes.self, forKey: .signalExternalWorkflowExecutionDecisionAttributes)
        signalExternalWorkflowExecutionDecisionAttributes = signalExternalWorkflowExecutionDecisionAttributesDecoded
        let requestCancelExternalWorkflowExecutionDecisionAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.RequestCancelExternalWorkflowExecutionDecisionAttributes.self, forKey: .requestCancelExternalWorkflowExecutionDecisionAttributes)
        requestCancelExternalWorkflowExecutionDecisionAttributes = requestCancelExternalWorkflowExecutionDecisionAttributesDecoded
        let startChildWorkflowExecutionDecisionAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.StartChildWorkflowExecutionDecisionAttributes.self, forKey: .startChildWorkflowExecutionDecisionAttributes)
        startChildWorkflowExecutionDecisionAttributes = startChildWorkflowExecutionDecisionAttributesDecoded
        let scheduleLambdaFunctionDecisionAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ScheduleLambdaFunctionDecisionAttributes.self, forKey: .scheduleLambdaFunctionDecisionAttributes)
        scheduleLambdaFunctionDecisionAttributes = scheduleLambdaFunctionDecisionAttributesDecoded
    }
}

extension SWFClientTypes {
    /// Specifies a decision made by the decider. A decision can be one of these types:
    ///
    /// * CancelTimer – Cancels a previously started timer and records a TimerCanceled event in the history.
    ///
    /// * CancelWorkflowExecution – Closes the workflow execution and records a WorkflowExecutionCanceled event in the history.
    ///
    /// * CompleteWorkflowExecution – Closes the workflow execution and records a WorkflowExecutionCompleted event in the history .
    ///
    /// * ContinueAsNewWorkflowExecution – Closes the workflow execution and starts a new workflow execution of the same type using the same workflow ID and a unique run Id. A WorkflowExecutionContinuedAsNew event is recorded in the history.
    ///
    /// * FailWorkflowExecution – Closes the workflow execution and records a WorkflowExecutionFailed event in the history.
    ///
    /// * RecordMarker – Records a MarkerRecorded event in the history. Markers can be used for adding custom information in the history for instance to let deciders know that they don't need to look at the history beyond the marker event.
    ///
    /// * RequestCancelActivityTask – Attempts to cancel a previously scheduled activity task. If the activity task was scheduled but has not been assigned to a worker, then it is canceled. If the activity task was already assigned to a worker, then the worker is informed that cancellation has been requested in the response to [RecordActivityTaskHeartbeat].
    ///
    /// * RequestCancelExternalWorkflowExecution – Requests that a request be made to cancel the specified external workflow execution and records a RequestCancelExternalWorkflowExecutionInitiated event in the history.
    ///
    /// * ScheduleActivityTask – Schedules an activity task.
    ///
    /// * SignalExternalWorkflowExecution – Requests a signal to be delivered to the specified external workflow execution and records a SignalExternalWorkflowExecutionInitiated event in the history.
    ///
    /// * StartChildWorkflowExecution – Requests that a child workflow execution be started and records a StartChildWorkflowExecutionInitiated event in the history. The child workflow execution is a separate workflow execution with its own history.
    ///
    /// * StartTimer – Starts a timer for this workflow execution and records a TimerStarted event in the history. This timer fires after the specified delay and record a TimerFired event.
    ///
    ///
    /// Access Control If you grant permission to use RespondDecisionTaskCompleted, you can use IAM policies to express permissions for the list of decisions returned by this action as if they were members of the API. Treating decisions as a pseudo API maintains a uniform conceptual model and helps keep policies readable. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide. Decision Failure Decisions can fail for several reasons
    ///
    /// * The ordering of decisions should follow a logical flow. Some decisions might not make sense in the current context of the workflow execution and therefore fails.
    ///
    /// * A limit on your account was reached.
    ///
    /// * The decision lacks sufficient permissions.
    ///
    ///
    /// One of the following events might be added to the history to indicate an error. The event attribute's cause parameter indicates the cause. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
    ///
    /// * ScheduleActivityTaskFailed – A ScheduleActivityTask decision failed. This could happen if the activity type specified in the decision isn't registered, is in a deprecated state, or the decision isn't properly configured.
    ///
    /// * RequestCancelActivityTaskFailed – A RequestCancelActivityTask decision failed. This could happen if there is no open activity task with the specified activityId.
    ///
    /// * StartTimerFailed – A StartTimer decision failed. This could happen if there is another open timer with the same timerId.
    ///
    /// * CancelTimerFailed – A CancelTimer decision failed. This could happen if there is no open timer with the specified timerId.
    ///
    /// * StartChildWorkflowExecutionFailed – A StartChildWorkflowExecution decision failed. This could happen if the workflow type specified isn't registered, is deprecated, or the decision isn't properly configured.
    ///
    /// * SignalExternalWorkflowExecutionFailed – A SignalExternalWorkflowExecution decision failed. This could happen if the workflowID specified in the decision was incorrect.
    ///
    /// * RequestCancelExternalWorkflowExecutionFailed – A RequestCancelExternalWorkflowExecution decision failed. This could happen if the workflowID specified in the decision was incorrect.
    ///
    /// * CancelWorkflowExecutionFailed – A CancelWorkflowExecution decision failed. This could happen if there is an unhandled decision task pending in the workflow execution.
    ///
    /// * CompleteWorkflowExecutionFailed – A CompleteWorkflowExecution decision failed. This could happen if there is an unhandled decision task pending in the workflow execution.
    ///
    /// * ContinueAsNewWorkflowExecutionFailed – A ContinueAsNewWorkflowExecution decision failed. This could happen if there is an unhandled decision task pending in the workflow execution or the ContinueAsNewWorkflowExecution decision was not configured correctly.
    ///
    /// * FailWorkflowExecutionFailed – A FailWorkflowExecution decision failed. This could happen if there is an unhandled decision task pending in the workflow execution.
    ///
    ///
    /// The preceding error events might occur due to an error in the decider logic, which might put the workflow execution in an unstable state The cause field in the event structure for the error event indicates the cause of the error. A workflow execution may be closed by the decider by returning one of the following decisions when completing a decision task: CompleteWorkflowExecution, FailWorkflowExecution, CancelWorkflowExecution and ContinueAsNewWorkflowExecution. An UnhandledDecision fault is returned if a workflow closing decision is specified and a signal or activity event had been added to the history while the decision task was being performed by the decider. Unlike the above situations which are logic issues, this fault is always possible because of race conditions in a distributed system. The right action here is to call [RespondDecisionTaskCompleted] without any decisions. This would result in another decision task with these new events included in the history. The decider should handle the new events and may decide to close the workflow execution. How to Code a Decision You code a decision by first setting the decision type field to one of the above decision values, and then set the corresponding attributes field shown below:
    ///
    /// * [ScheduleActivityTaskDecisionAttributes]
    ///
    /// * [RequestCancelActivityTaskDecisionAttributes]
    ///
    /// * [CompleteWorkflowExecutionDecisionAttributes]
    ///
    /// * [FailWorkflowExecutionDecisionAttributes]
    ///
    /// * [CancelWorkflowExecutionDecisionAttributes]
    ///
    /// * [ContinueAsNewWorkflowExecutionDecisionAttributes]
    ///
    /// * [RecordMarkerDecisionAttributes]
    ///
    /// * [StartTimerDecisionAttributes]
    ///
    /// * [CancelTimerDecisionAttributes]
    ///
    /// * [SignalExternalWorkflowExecutionDecisionAttributes]
    ///
    /// * [RequestCancelExternalWorkflowExecutionDecisionAttributes]
    ///
    /// * [StartChildWorkflowExecutionDecisionAttributes]
    public struct Decision: Swift.Equatable {
        /// Provides the details of the CancelTimer decision. It isn't set for other decision types.
        public var cancelTimerDecisionAttributes: SWFClientTypes.CancelTimerDecisionAttributes?
        /// Provides the details of the CancelWorkflowExecution decision. It isn't set for other decision types.
        public var cancelWorkflowExecutionDecisionAttributes: SWFClientTypes.CancelWorkflowExecutionDecisionAttributes?
        /// Provides the details of the CompleteWorkflowExecution decision. It isn't set for other decision types.
        public var completeWorkflowExecutionDecisionAttributes: SWFClientTypes.CompleteWorkflowExecutionDecisionAttributes?
        /// Provides the details of the ContinueAsNewWorkflowExecution decision. It isn't set for other decision types.
        public var continueAsNewWorkflowExecutionDecisionAttributes: SWFClientTypes.ContinueAsNewWorkflowExecutionDecisionAttributes?
        /// Specifies the type of the decision.
        /// This member is required.
        public var decisionType: SWFClientTypes.DecisionType?
        /// Provides the details of the FailWorkflowExecution decision. It isn't set for other decision types.
        public var failWorkflowExecutionDecisionAttributes: SWFClientTypes.FailWorkflowExecutionDecisionAttributes?
        /// Provides the details of the RecordMarker decision. It isn't set for other decision types.
        public var recordMarkerDecisionAttributes: SWFClientTypes.RecordMarkerDecisionAttributes?
        /// Provides the details of the RequestCancelActivityTask decision. It isn't set for other decision types.
        public var requestCancelActivityTaskDecisionAttributes: SWFClientTypes.RequestCancelActivityTaskDecisionAttributes?
        /// Provides the details of the RequestCancelExternalWorkflowExecution decision. It isn't set for other decision types.
        public var requestCancelExternalWorkflowExecutionDecisionAttributes: SWFClientTypes.RequestCancelExternalWorkflowExecutionDecisionAttributes?
        /// Provides the details of the ScheduleActivityTask decision. It isn't set for other decision types.
        public var scheduleActivityTaskDecisionAttributes: SWFClientTypes.ScheduleActivityTaskDecisionAttributes?
        /// Provides the details of the ScheduleLambdaFunction decision. It isn't set for other decision types.
        public var scheduleLambdaFunctionDecisionAttributes: SWFClientTypes.ScheduleLambdaFunctionDecisionAttributes?
        /// Provides the details of the SignalExternalWorkflowExecution decision. It isn't set for other decision types.
        public var signalExternalWorkflowExecutionDecisionAttributes: SWFClientTypes.SignalExternalWorkflowExecutionDecisionAttributes?
        /// Provides the details of the StartChildWorkflowExecution decision. It isn't set for other decision types.
        public var startChildWorkflowExecutionDecisionAttributes: SWFClientTypes.StartChildWorkflowExecutionDecisionAttributes?
        /// Provides the details of the StartTimer decision. It isn't set for other decision types.
        public var startTimerDecisionAttributes: SWFClientTypes.StartTimerDecisionAttributes?

        public init (
            cancelTimerDecisionAttributes: SWFClientTypes.CancelTimerDecisionAttributes? = nil,
            cancelWorkflowExecutionDecisionAttributes: SWFClientTypes.CancelWorkflowExecutionDecisionAttributes? = nil,
            completeWorkflowExecutionDecisionAttributes: SWFClientTypes.CompleteWorkflowExecutionDecisionAttributes? = nil,
            continueAsNewWorkflowExecutionDecisionAttributes: SWFClientTypes.ContinueAsNewWorkflowExecutionDecisionAttributes? = nil,
            decisionType: SWFClientTypes.DecisionType? = nil,
            failWorkflowExecutionDecisionAttributes: SWFClientTypes.FailWorkflowExecutionDecisionAttributes? = nil,
            recordMarkerDecisionAttributes: SWFClientTypes.RecordMarkerDecisionAttributes? = nil,
            requestCancelActivityTaskDecisionAttributes: SWFClientTypes.RequestCancelActivityTaskDecisionAttributes? = nil,
            requestCancelExternalWorkflowExecutionDecisionAttributes: SWFClientTypes.RequestCancelExternalWorkflowExecutionDecisionAttributes? = nil,
            scheduleActivityTaskDecisionAttributes: SWFClientTypes.ScheduleActivityTaskDecisionAttributes? = nil,
            scheduleLambdaFunctionDecisionAttributes: SWFClientTypes.ScheduleLambdaFunctionDecisionAttributes? = nil,
            signalExternalWorkflowExecutionDecisionAttributes: SWFClientTypes.SignalExternalWorkflowExecutionDecisionAttributes? = nil,
            startChildWorkflowExecutionDecisionAttributes: SWFClientTypes.StartChildWorkflowExecutionDecisionAttributes? = nil,
            startTimerDecisionAttributes: SWFClientTypes.StartTimerDecisionAttributes? = nil
        )
        {
            self.cancelTimerDecisionAttributes = cancelTimerDecisionAttributes
            self.cancelWorkflowExecutionDecisionAttributes = cancelWorkflowExecutionDecisionAttributes
            self.completeWorkflowExecutionDecisionAttributes = completeWorkflowExecutionDecisionAttributes
            self.continueAsNewWorkflowExecutionDecisionAttributes = continueAsNewWorkflowExecutionDecisionAttributes
            self.decisionType = decisionType
            self.failWorkflowExecutionDecisionAttributes = failWorkflowExecutionDecisionAttributes
            self.recordMarkerDecisionAttributes = recordMarkerDecisionAttributes
            self.requestCancelActivityTaskDecisionAttributes = requestCancelActivityTaskDecisionAttributes
            self.requestCancelExternalWorkflowExecutionDecisionAttributes = requestCancelExternalWorkflowExecutionDecisionAttributes
            self.scheduleActivityTaskDecisionAttributes = scheduleActivityTaskDecisionAttributes
            self.scheduleLambdaFunctionDecisionAttributes = scheduleLambdaFunctionDecisionAttributes
            self.signalExternalWorkflowExecutionDecisionAttributes = signalExternalWorkflowExecutionDecisionAttributes
            self.startChildWorkflowExecutionDecisionAttributes = startChildWorkflowExecutionDecisionAttributes
            self.startTimerDecisionAttributes = startTimerDecisionAttributes
        }
    }

}

extension SWFClientTypes.DecisionTaskCompletedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionContext
        case scheduledEventId
        case startedEventId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionContext = self.executionContext {
            try encodeContainer.encode(executionContext, forKey: .executionContext)
        }
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionContextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionContext)
        executionContext = executionContextDecoded
        let scheduledEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scheduledEventId) ?? 0
        scheduledEventId = scheduledEventIdDecoded
        let startedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedEventId) ?? 0
        startedEventId = startedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the DecisionTaskCompleted event.
    public struct DecisionTaskCompletedEventAttributes: Swift.Equatable {
        /// User defined context for the workflow execution.
        public var executionContext: Swift.String?
        /// The ID of the DecisionTaskScheduled event that was recorded when this decision task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var scheduledEventId: Swift.Int
        /// The ID of the DecisionTaskStarted event recorded when this decision task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var startedEventId: Swift.Int

        public init (
            executionContext: Swift.String? = nil,
            scheduledEventId: Swift.Int = 0,
            startedEventId: Swift.Int = 0
        )
        {
            self.executionContext = executionContext
            self.scheduledEventId = scheduledEventId
            self.startedEventId = startedEventId
        }
    }

}

extension SWFClientTypes.DecisionTaskScheduledEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case startToCloseTimeout
        case taskList
        case taskPriority
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let startToCloseTimeout = self.startToCloseTimeout {
            try encodeContainer.encode(startToCloseTimeout, forKey: .startToCloseTimeout)
        }
        if let taskList = self.taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = self.taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskListDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let startToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startToCloseTimeout)
        startToCloseTimeout = startToCloseTimeoutDecoded
    }
}

extension SWFClientTypes {
    /// Provides details about the DecisionTaskScheduled event.
    public struct DecisionTaskScheduledEventAttributes: Swift.Equatable {
        /// The maximum duration for this decision task. The task is considered timed out if it doesn't completed within this duration. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public var startToCloseTimeout: Swift.String?
        /// The name of the task list in which the decision task was scheduled.
        /// This member is required.
        public var taskList: SWFClientTypes.TaskList?
        /// A task priority that, if set, specifies the priority for this decision task. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see [Setting Task Priority](https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html) in the Amazon SWF Developer Guide.
        public var taskPriority: Swift.String?

        public init (
            startToCloseTimeout: Swift.String? = nil,
            taskList: SWFClientTypes.TaskList? = nil,
            taskPriority: Swift.String? = nil
        )
        {
            self.startToCloseTimeout = startToCloseTimeout
            self.taskList = taskList
            self.taskPriority = taskPriority
        }
    }

}

extension SWFClientTypes.DecisionTaskStartedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identity
        case scheduledEventId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identity = self.identity {
            try encodeContainer.encode(identity, forKey: .identity)
        }
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identity)
        identity = identityDecoded
        let scheduledEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scheduledEventId) ?? 0
        scheduledEventId = scheduledEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the DecisionTaskStarted event.
    public struct DecisionTaskStartedEventAttributes: Swift.Equatable {
        /// Identity of the decider making the request. This enables diagnostic tracing when problems arise. The form of this identity is user defined.
        public var identity: Swift.String?
        /// The ID of the DecisionTaskScheduled event that was recorded when this decision task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var scheduledEventId: Swift.Int

        public init (
            identity: Swift.String? = nil,
            scheduledEventId: Swift.Int = 0
        )
        {
            self.identity = identity
            self.scheduledEventId = scheduledEventId
        }
    }

}

extension SWFClientTypes.DecisionTaskTimedOutEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scheduledEventId
        case startedEventId
        case timeoutType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
        if let timeoutType = self.timeoutType {
            try encodeContainer.encode(timeoutType.rawValue, forKey: .timeoutType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeoutTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.DecisionTaskTimeoutType.self, forKey: .timeoutType)
        timeoutType = timeoutTypeDecoded
        let scheduledEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scheduledEventId) ?? 0
        scheduledEventId = scheduledEventIdDecoded
        let startedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedEventId) ?? 0
        startedEventId = startedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the DecisionTaskTimedOut event.
    public struct DecisionTaskTimedOutEventAttributes: Swift.Equatable {
        /// The ID of the DecisionTaskScheduled event that was recorded when this decision task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var scheduledEventId: Swift.Int
        /// The ID of the DecisionTaskStarted event recorded when this decision task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var startedEventId: Swift.Int
        /// The type of timeout that expired before the decision task could be completed.
        /// This member is required.
        public var timeoutType: SWFClientTypes.DecisionTaskTimeoutType?

        public init (
            scheduledEventId: Swift.Int = 0,
            startedEventId: Swift.Int = 0,
            timeoutType: SWFClientTypes.DecisionTaskTimeoutType? = nil
        )
        {
            self.scheduledEventId = scheduledEventId
            self.startedEventId = startedEventId
            self.timeoutType = timeoutType
        }
    }

}

extension SWFClientTypes {
    public enum DecisionTaskTimeoutType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case startToClose
        case sdkUnknown(Swift.String)

        public static var allCases: [DecisionTaskTimeoutType] {
            return [
                .startToClose,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .startToClose: return "START_TO_CLOSE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DecisionTaskTimeoutType(rawValue: rawValue) ?? DecisionTaskTimeoutType.sdkUnknown(rawValue)
        }
    }
}

extension SWFClientTypes {
    public enum DecisionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case canceltimer
        case cancelworkflowexecution
        case completeworkflowexecution
        case continueasnewworkflowexecution
        case failworkflowexecution
        case recordmarker
        case requestcancelactivitytask
        case requestcancelexternalworkflowexecution
        case scheduleactivitytask
        case schedulelambdafunction
        case signalexternalworkflowexecution
        case startchildworkflowexecution
        case starttimer
        case sdkUnknown(Swift.String)

        public static var allCases: [DecisionType] {
            return [
                .canceltimer,
                .cancelworkflowexecution,
                .completeworkflowexecution,
                .continueasnewworkflowexecution,
                .failworkflowexecution,
                .recordmarker,
                .requestcancelactivitytask,
                .requestcancelexternalworkflowexecution,
                .scheduleactivitytask,
                .schedulelambdafunction,
                .signalexternalworkflowexecution,
                .startchildworkflowexecution,
                .starttimer,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .canceltimer: return "CancelTimer"
            case .cancelworkflowexecution: return "CancelWorkflowExecution"
            case .completeworkflowexecution: return "CompleteWorkflowExecution"
            case .continueasnewworkflowexecution: return "ContinueAsNewWorkflowExecution"
            case .failworkflowexecution: return "FailWorkflowExecution"
            case .recordmarker: return "RecordMarker"
            case .requestcancelactivitytask: return "RequestCancelActivityTask"
            case .requestcancelexternalworkflowexecution: return "RequestCancelExternalWorkflowExecution"
            case .scheduleactivitytask: return "ScheduleActivityTask"
            case .schedulelambdafunction: return "ScheduleLambdaFunction"
            case .signalexternalworkflowexecution: return "SignalExternalWorkflowExecution"
            case .startchildworkflowexecution: return "StartChildWorkflowExecution"
            case .starttimer: return "StartTimer"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DecisionType(rawValue: rawValue) ?? DecisionType.sdkUnknown(rawValue)
        }
    }
}

extension DefaultUndefinedFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DefaultUndefinedFaultBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The StartWorkflowExecution API action was called without the required parameters set. Some workflow execution parameters, such as the decision taskList, must be set to start the execution. However, these parameters might have been set as defaults when the workflow type was registered. In this case, you can omit these parameters from the StartWorkflowExecution call and Amazon SWF uses the values defined in the workflow type. If these parameters aren't set and no default parameters were defined in the workflow type, this error is displayed.
public struct DefaultUndefinedFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DefaultUndefinedFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension DefaultUndefinedFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeprecateActivityTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityType
        case domain
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityType = self.activityType {
            try encodeContainer.encode(activityType, forKey: .activityType)
        }
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
    }
}

extension DeprecateActivityTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeprecateActivityTypeInput: Swift.Equatable {
    /// The activity type to deprecate.
    /// This member is required.
    public var activityType: SWFClientTypes.ActivityType?
    /// The name of the domain in which the activity type is registered.
    /// This member is required.
    public var domain: Swift.String?

    public init (
        activityType: SWFClientTypes.ActivityType? = nil,
        domain: Swift.String? = nil
    )
    {
        self.activityType = activityType
        self.domain = domain
    }
}

struct DeprecateActivityTypeInputBody: Swift.Equatable {
    let domain: Swift.String?
    let activityType: SWFClientTypes.ActivityType?
}

extension DeprecateActivityTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityType
        case domain
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let activityTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ActivityType.self, forKey: .activityType)
        activityType = activityTypeDecoded
    }
}

extension DeprecateActivityTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeprecateActivityTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeDeprecatedFault" : self = .typeDeprecatedFault(try TypeDeprecatedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeprecateActivityTypeOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case typeDeprecatedFault(TypeDeprecatedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeprecateActivityTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeprecateActivityTypeOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeprecateDomainInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension DeprecateDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeprecateDomainInput: Swift.Equatable {
    /// The name of the domain to deprecate.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeprecateDomainInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension DeprecateDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeprecateDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeprecateDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DomainDeprecatedFault" : self = .domainDeprecatedFault(try DomainDeprecatedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeprecateDomainOutputError: Swift.Error, Swift.Equatable {
    case domainDeprecatedFault(DomainDeprecatedFault)
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeprecateDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeprecateDomainOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeprecateWorkflowTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case workflowType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let workflowType = self.workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }
}

extension DeprecateWorkflowTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeprecateWorkflowTypeInput: Swift.Equatable {
    /// The name of the domain in which the workflow type is registered.
    /// This member is required.
    public var domain: Swift.String?
    /// The workflow type to deprecate.
    /// This member is required.
    public var workflowType: SWFClientTypes.WorkflowType?

    public init (
        domain: Swift.String? = nil,
        workflowType: SWFClientTypes.WorkflowType? = nil
    )
    {
        self.domain = domain
        self.workflowType = workflowType
    }
}

struct DeprecateWorkflowTypeInputBody: Swift.Equatable {
    let domain: Swift.String?
    let workflowType: SWFClientTypes.WorkflowType?
}

extension DeprecateWorkflowTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case workflowType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
    }
}

extension DeprecateWorkflowTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeprecateWorkflowTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeDeprecatedFault" : self = .typeDeprecatedFault(try TypeDeprecatedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeprecateWorkflowTypeOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case typeDeprecatedFault(TypeDeprecatedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeprecateWorkflowTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeprecateWorkflowTypeOutputResponse: Swift.Equatable {

    public init () { }
}

extension DescribeActivityTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityType
        case domain
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityType = self.activityType {
            try encodeContainer.encode(activityType, forKey: .activityType)
        }
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
    }
}

extension DescribeActivityTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeActivityTypeInput: Swift.Equatable {
    /// The activity type to get information about. Activity types are identified by the name and version that were supplied when the activity was registered.
    /// This member is required.
    public var activityType: SWFClientTypes.ActivityType?
    /// The name of the domain in which the activity type is registered.
    /// This member is required.
    public var domain: Swift.String?

    public init (
        activityType: SWFClientTypes.ActivityType? = nil,
        domain: Swift.String? = nil
    )
    {
        self.activityType = activityType
        self.domain = domain
    }
}

struct DescribeActivityTypeInputBody: Swift.Equatable {
    let domain: Swift.String?
    let activityType: SWFClientTypes.ActivityType?
}

extension DescribeActivityTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityType
        case domain
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let activityTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ActivityType.self, forKey: .activityType)
        activityType = activityTypeDecoded
    }
}

extension DescribeActivityTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeActivityTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeActivityTypeOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeActivityTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeActivityTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configuration = output.configuration
            self.typeInfo = output.typeInfo
        } else {
            self.configuration = nil
            self.typeInfo = nil
        }
    }
}

/// Detailed information about an activity type.
public struct DescribeActivityTypeOutputResponse: Swift.Equatable {
    /// The configuration settings registered with the activity type.
    /// This member is required.
    public var configuration: SWFClientTypes.ActivityTypeConfiguration?
    /// General information about the activity type. The status of activity type (returned in the ActivityTypeInfo structure) can be one of the following.
    ///
    /// * REGISTERED – The type is registered and available. Workers supporting this type should be running.
    ///
    /// * DEPRECATED – The type was deprecated using [DeprecateActivityType], but is still in use. You should keep workers supporting this type running. You cannot create new tasks of this type.
    /// This member is required.
    public var typeInfo: SWFClientTypes.ActivityTypeInfo?

    public init (
        configuration: SWFClientTypes.ActivityTypeConfiguration? = nil,
        typeInfo: SWFClientTypes.ActivityTypeInfo? = nil
    )
    {
        self.configuration = configuration
        self.typeInfo = typeInfo
    }
}

struct DescribeActivityTypeOutputResponseBody: Swift.Equatable {
    let typeInfo: SWFClientTypes.ActivityTypeInfo?
    let configuration: SWFClientTypes.ActivityTypeConfiguration?
}

extension DescribeActivityTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration
        case typeInfo
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeInfoDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ActivityTypeInfo.self, forKey: .typeInfo)
        typeInfo = typeInfoDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ActivityTypeConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
    }
}

extension DescribeDomainInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension DescribeDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDomainInput: Swift.Equatable {
    /// The name of the domain to describe.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DescribeDomainInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension DescribeDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DescribeDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeDomainOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeDomainOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configuration = output.configuration
            self.domainInfo = output.domainInfo
        } else {
            self.configuration = nil
            self.domainInfo = nil
        }
    }
}

/// Contains details of a domain.
public struct DescribeDomainOutputResponse: Swift.Equatable {
    /// The domain configuration. Currently, this includes only the domain's retention period.
    /// This member is required.
    public var configuration: SWFClientTypes.DomainConfiguration?
    /// The basic information about a domain, such as its name, status, and description.
    /// This member is required.
    public var domainInfo: SWFClientTypes.DomainInfo?

    public init (
        configuration: SWFClientTypes.DomainConfiguration? = nil,
        domainInfo: SWFClientTypes.DomainInfo? = nil
    )
    {
        self.configuration = configuration
        self.domainInfo = domainInfo
    }
}

struct DescribeDomainOutputResponseBody: Swift.Equatable {
    let domainInfo: SWFClientTypes.DomainInfo?
    let configuration: SWFClientTypes.DomainConfiguration?
}

extension DescribeDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration
        case domainInfo
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainInfoDecoded = try containerValues.decodeIfPresent(SWFClientTypes.DomainInfo.self, forKey: .domainInfo)
        domainInfo = domainInfoDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(SWFClientTypes.DomainConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
    }
}

extension DescribeWorkflowExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case execution
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let execution = self.execution {
            try encodeContainer.encode(execution, forKey: .execution)
        }
    }
}

extension DescribeWorkflowExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeWorkflowExecutionInput: Swift.Equatable {
    /// The name of the domain containing the workflow execution.
    /// This member is required.
    public var domain: Swift.String?
    /// The workflow execution to describe.
    /// This member is required.
    public var execution: SWFClientTypes.WorkflowExecution?

    public init (
        domain: Swift.String? = nil,
        execution: SWFClientTypes.WorkflowExecution? = nil
    )
    {
        self.domain = domain
        self.execution = execution
    }
}

struct DescribeWorkflowExecutionInputBody: Swift.Equatable {
    let domain: Swift.String?
    let execution: SWFClientTypes.WorkflowExecution?
}

extension DescribeWorkflowExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case execution
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let executionDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecution.self, forKey: .execution)
        execution = executionDecoded
    }
}

extension DescribeWorkflowExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeWorkflowExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeWorkflowExecutionOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeWorkflowExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeWorkflowExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.executionConfiguration = output.executionConfiguration
            self.executionInfo = output.executionInfo
            self.latestActivityTaskTimestamp = output.latestActivityTaskTimestamp
            self.latestExecutionContext = output.latestExecutionContext
            self.openCounts = output.openCounts
        } else {
            self.executionConfiguration = nil
            self.executionInfo = nil
            self.latestActivityTaskTimestamp = nil
            self.latestExecutionContext = nil
            self.openCounts = nil
        }
    }
}

/// Contains details about a workflow execution.
public struct DescribeWorkflowExecutionOutputResponse: Swift.Equatable {
    /// The configuration settings for this workflow execution including timeout values, tasklist etc.
    /// This member is required.
    public var executionConfiguration: SWFClientTypes.WorkflowExecutionConfiguration?
    /// Information about the workflow execution.
    /// This member is required.
    public var executionInfo: SWFClientTypes.WorkflowExecutionInfo?
    /// The time when the last activity task was scheduled for this workflow execution. You can use this information to determine if the workflow has not made progress for an unusually long period of time and might require a corrective action.
    public var latestActivityTaskTimestamp: ClientRuntime.Date?
    /// The latest executionContext provided by the decider for this workflow execution. A decider can provide an executionContext (a free-form string) when closing a decision task using [RespondDecisionTaskCompleted].
    public var latestExecutionContext: Swift.String?
    /// The number of tasks for this workflow execution. This includes open and closed tasks of all types.
    /// This member is required.
    public var openCounts: SWFClientTypes.WorkflowExecutionOpenCounts?

    public init (
        executionConfiguration: SWFClientTypes.WorkflowExecutionConfiguration? = nil,
        executionInfo: SWFClientTypes.WorkflowExecutionInfo? = nil,
        latestActivityTaskTimestamp: ClientRuntime.Date? = nil,
        latestExecutionContext: Swift.String? = nil,
        openCounts: SWFClientTypes.WorkflowExecutionOpenCounts? = nil
    )
    {
        self.executionConfiguration = executionConfiguration
        self.executionInfo = executionInfo
        self.latestActivityTaskTimestamp = latestActivityTaskTimestamp
        self.latestExecutionContext = latestExecutionContext
        self.openCounts = openCounts
    }
}

struct DescribeWorkflowExecutionOutputResponseBody: Swift.Equatable {
    let executionInfo: SWFClientTypes.WorkflowExecutionInfo?
    let executionConfiguration: SWFClientTypes.WorkflowExecutionConfiguration?
    let openCounts: SWFClientTypes.WorkflowExecutionOpenCounts?
    let latestActivityTaskTimestamp: ClientRuntime.Date?
    let latestExecutionContext: Swift.String?
}

extension DescribeWorkflowExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionConfiguration
        case executionInfo
        case latestActivityTaskTimestamp
        case latestExecutionContext
        case openCounts
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionInfoDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecutionInfo.self, forKey: .executionInfo)
        executionInfo = executionInfoDecoded
        let executionConfigurationDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecutionConfiguration.self, forKey: .executionConfiguration)
        executionConfiguration = executionConfigurationDecoded
        let openCountsDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecutionOpenCounts.self, forKey: .openCounts)
        openCounts = openCountsDecoded
        let latestActivityTaskTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .latestActivityTaskTimestamp)
        latestActivityTaskTimestamp = latestActivityTaskTimestampDecoded
        let latestExecutionContextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .latestExecutionContext)
        latestExecutionContext = latestExecutionContextDecoded
    }
}

extension DescribeWorkflowTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case workflowType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let workflowType = self.workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }
}

extension DescribeWorkflowTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeWorkflowTypeInput: Swift.Equatable {
    /// The name of the domain in which this workflow type is registered.
    /// This member is required.
    public var domain: Swift.String?
    /// The workflow type to describe.
    /// This member is required.
    public var workflowType: SWFClientTypes.WorkflowType?

    public init (
        domain: Swift.String? = nil,
        workflowType: SWFClientTypes.WorkflowType? = nil
    )
    {
        self.domain = domain
        self.workflowType = workflowType
    }
}

struct DescribeWorkflowTypeInputBody: Swift.Equatable {
    let domain: Swift.String?
    let workflowType: SWFClientTypes.WorkflowType?
}

extension DescribeWorkflowTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case workflowType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
    }
}

extension DescribeWorkflowTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeWorkflowTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeWorkflowTypeOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeWorkflowTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeWorkflowTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configuration = output.configuration
            self.typeInfo = output.typeInfo
        } else {
            self.configuration = nil
            self.typeInfo = nil
        }
    }
}

/// Contains details about a workflow type.
public struct DescribeWorkflowTypeOutputResponse: Swift.Equatable {
    /// Configuration settings of the workflow type registered through [RegisterWorkflowType]
    /// This member is required.
    public var configuration: SWFClientTypes.WorkflowTypeConfiguration?
    /// General information about the workflow type. The status of the workflow type (returned in the WorkflowTypeInfo structure) can be one of the following.
    ///
    /// * REGISTERED – The type is registered and available. Workers supporting this type should be running.
    ///
    /// * DEPRECATED – The type was deprecated using [DeprecateWorkflowType], but is still in use. You should keep workers supporting this type running. You cannot create new workflow executions of this type.
    /// This member is required.
    public var typeInfo: SWFClientTypes.WorkflowTypeInfo?

    public init (
        configuration: SWFClientTypes.WorkflowTypeConfiguration? = nil,
        typeInfo: SWFClientTypes.WorkflowTypeInfo? = nil
    )
    {
        self.configuration = configuration
        self.typeInfo = typeInfo
    }
}

struct DescribeWorkflowTypeOutputResponseBody: Swift.Equatable {
    let typeInfo: SWFClientTypes.WorkflowTypeInfo?
    let configuration: SWFClientTypes.WorkflowTypeConfiguration?
}

extension DescribeWorkflowTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration
        case typeInfo
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeInfoDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowTypeInfo.self, forKey: .typeInfo)
        typeInfo = typeInfoDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowTypeConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
    }
}

extension DomainAlreadyExistsFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DomainAlreadyExistsFaultBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Returned if the domain already exists. You may get this fault if you are registering a domain that is either already registered or deprecated, or if you undeprecate a domain that is currently registered.
public struct DomainAlreadyExistsFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description that may help with diagnosing the cause of the fault.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DomainAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension DomainAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SWFClientTypes.DomainConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case workflowExecutionRetentionPeriodInDays
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let workflowExecutionRetentionPeriodInDays = self.workflowExecutionRetentionPeriodInDays {
            try encodeContainer.encode(workflowExecutionRetentionPeriodInDays, forKey: .workflowExecutionRetentionPeriodInDays)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowExecutionRetentionPeriodInDaysDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowExecutionRetentionPeriodInDays)
        workflowExecutionRetentionPeriodInDays = workflowExecutionRetentionPeriodInDaysDecoded
    }
}

extension SWFClientTypes {
    /// Contains the configuration settings of a domain.
    public struct DomainConfiguration: Swift.Equatable {
        /// The retention period for workflow executions in this domain.
        /// This member is required.
        public var workflowExecutionRetentionPeriodInDays: Swift.String?

        public init (
            workflowExecutionRetentionPeriodInDays: Swift.String? = nil
        )
        {
            self.workflowExecutionRetentionPeriodInDays = workflowExecutionRetentionPeriodInDays
        }
    }

}

extension DomainDeprecatedFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DomainDeprecatedFaultBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Returned when the specified domain has been deprecated.
public struct DomainDeprecatedFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description that may help with diagnosing the cause of the fault.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DomainDeprecatedFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension DomainDeprecatedFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SWFClientTypes.DomainInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case description
        case name
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SWFClientTypes.RegistrationStatus.self, forKey: .status)
        status = statusDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension SWFClientTypes {
    /// Contains general information about a domain.
    public struct DomainInfo: Swift.Equatable {
        /// The ARN of the domain.
        public var arn: Swift.String?
        /// The description of the domain provided through [RegisterDomain].
        public var description: Swift.String?
        /// The name of the domain. This name is unique within the account.
        /// This member is required.
        public var name: Swift.String?
        /// The status of the domain:
        ///
        /// * REGISTERED – The domain is properly registered and available. You can use this domain for registering types and creating new workflow executions.
        ///
        /// * DEPRECATED – The domain was deprecated using [DeprecateDomain], but is still in use. You should not create new workflow executions in this domain.
        /// This member is required.
        public var status: SWFClientTypes.RegistrationStatus?

        public init (
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            status: SWFClientTypes.RegistrationStatus? = nil
        )
        {
            self.arn = arn
            self.description = description
            self.name = name
            self.status = status
        }
    }

}

extension SWFClientTypes {
    public enum EventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case activitytaskcancelrequested
        case activitytaskcanceled
        case activitytaskcompleted
        case activitytaskfailed
        case activitytaskscheduled
        case activitytaskstarted
        case activitytasktimedout
        case canceltimerfailed
        case cancelworkflowexecutionfailed
        case childworkflowexecutioncanceled
        case childworkflowexecutioncompleted
        case childworkflowexecutionfailed
        case childworkflowexecutionstarted
        case childworkflowexecutionterminated
        case childworkflowexecutiontimedout
        case completeworkflowexecutionfailed
        case continueasnewworkflowexecutionfailed
        case decisiontaskcompleted
        case decisiontaskscheduled
        case decisiontaskstarted
        case decisiontasktimedout
        case externalworkflowexecutioncancelrequested
        case externalworkflowexecutionsignaled
        case failworkflowexecutionfailed
        case lambdafunctioncompleted
        case lambdafunctionfailed
        case lambdafunctionscheduled
        case lambdafunctionstarted
        case lambdafunctiontimedout
        case markerrecorded
        case recordmarkerfailed
        case requestcancelactivitytaskfailed
        case requestcancelexternalworkflowexecutionfailed
        case requestcancelexternalworkflowexecutioninitiated
        case scheduleactivitytaskfailed
        case schedulelambdafunctionfailed
        case signalexternalworkflowexecutionfailed
        case signalexternalworkflowexecutioninitiated
        case startchildworkflowexecutionfailed
        case startchildworkflowexecutioninitiated
        case startlambdafunctionfailed
        case starttimerfailed
        case timercanceled
        case timerfired
        case timerstarted
        case workflowexecutioncancelrequested
        case workflowexecutioncanceled
        case workflowexecutioncompleted
        case workflowexecutioncontinuedasnew
        case workflowexecutionfailed
        case workflowexecutionsignaled
        case workflowexecutionstarted
        case workflowexecutionterminated
        case workflowexecutiontimedout
        case sdkUnknown(Swift.String)

        public static var allCases: [EventType] {
            return [
                .activitytaskcancelrequested,
                .activitytaskcanceled,
                .activitytaskcompleted,
                .activitytaskfailed,
                .activitytaskscheduled,
                .activitytaskstarted,
                .activitytasktimedout,
                .canceltimerfailed,
                .cancelworkflowexecutionfailed,
                .childworkflowexecutioncanceled,
                .childworkflowexecutioncompleted,
                .childworkflowexecutionfailed,
                .childworkflowexecutionstarted,
                .childworkflowexecutionterminated,
                .childworkflowexecutiontimedout,
                .completeworkflowexecutionfailed,
                .continueasnewworkflowexecutionfailed,
                .decisiontaskcompleted,
                .decisiontaskscheduled,
                .decisiontaskstarted,
                .decisiontasktimedout,
                .externalworkflowexecutioncancelrequested,
                .externalworkflowexecutionsignaled,
                .failworkflowexecutionfailed,
                .lambdafunctioncompleted,
                .lambdafunctionfailed,
                .lambdafunctionscheduled,
                .lambdafunctionstarted,
                .lambdafunctiontimedout,
                .markerrecorded,
                .recordmarkerfailed,
                .requestcancelactivitytaskfailed,
                .requestcancelexternalworkflowexecutionfailed,
                .requestcancelexternalworkflowexecutioninitiated,
                .scheduleactivitytaskfailed,
                .schedulelambdafunctionfailed,
                .signalexternalworkflowexecutionfailed,
                .signalexternalworkflowexecutioninitiated,
                .startchildworkflowexecutionfailed,
                .startchildworkflowexecutioninitiated,
                .startlambdafunctionfailed,
                .starttimerfailed,
                .timercanceled,
                .timerfired,
                .timerstarted,
                .workflowexecutioncancelrequested,
                .workflowexecutioncanceled,
                .workflowexecutioncompleted,
                .workflowexecutioncontinuedasnew,
                .workflowexecutionfailed,
                .workflowexecutionsignaled,
                .workflowexecutionstarted,
                .workflowexecutionterminated,
                .workflowexecutiontimedout,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .activitytaskcancelrequested: return "ActivityTaskCancelRequested"
            case .activitytaskcanceled: return "ActivityTaskCanceled"
            case .activitytaskcompleted: return "ActivityTaskCompleted"
            case .activitytaskfailed: return "ActivityTaskFailed"
            case .activitytaskscheduled: return "ActivityTaskScheduled"
            case .activitytaskstarted: return "ActivityTaskStarted"
            case .activitytasktimedout: return "ActivityTaskTimedOut"
            case .canceltimerfailed: return "CancelTimerFailed"
            case .cancelworkflowexecutionfailed: return "CancelWorkflowExecutionFailed"
            case .childworkflowexecutioncanceled: return "ChildWorkflowExecutionCanceled"
            case .childworkflowexecutioncompleted: return "ChildWorkflowExecutionCompleted"
            case .childworkflowexecutionfailed: return "ChildWorkflowExecutionFailed"
            case .childworkflowexecutionstarted: return "ChildWorkflowExecutionStarted"
            case .childworkflowexecutionterminated: return "ChildWorkflowExecutionTerminated"
            case .childworkflowexecutiontimedout: return "ChildWorkflowExecutionTimedOut"
            case .completeworkflowexecutionfailed: return "CompleteWorkflowExecutionFailed"
            case .continueasnewworkflowexecutionfailed: return "ContinueAsNewWorkflowExecutionFailed"
            case .decisiontaskcompleted: return "DecisionTaskCompleted"
            case .decisiontaskscheduled: return "DecisionTaskScheduled"
            case .decisiontaskstarted: return "DecisionTaskStarted"
            case .decisiontasktimedout: return "DecisionTaskTimedOut"
            case .externalworkflowexecutioncancelrequested: return "ExternalWorkflowExecutionCancelRequested"
            case .externalworkflowexecutionsignaled: return "ExternalWorkflowExecutionSignaled"
            case .failworkflowexecutionfailed: return "FailWorkflowExecutionFailed"
            case .lambdafunctioncompleted: return "LambdaFunctionCompleted"
            case .lambdafunctionfailed: return "LambdaFunctionFailed"
            case .lambdafunctionscheduled: return "LambdaFunctionScheduled"
            case .lambdafunctionstarted: return "LambdaFunctionStarted"
            case .lambdafunctiontimedout: return "LambdaFunctionTimedOut"
            case .markerrecorded: return "MarkerRecorded"
            case .recordmarkerfailed: return "RecordMarkerFailed"
            case .requestcancelactivitytaskfailed: return "RequestCancelActivityTaskFailed"
            case .requestcancelexternalworkflowexecutionfailed: return "RequestCancelExternalWorkflowExecutionFailed"
            case .requestcancelexternalworkflowexecutioninitiated: return "RequestCancelExternalWorkflowExecutionInitiated"
            case .scheduleactivitytaskfailed: return "ScheduleActivityTaskFailed"
            case .schedulelambdafunctionfailed: return "ScheduleLambdaFunctionFailed"
            case .signalexternalworkflowexecutionfailed: return "SignalExternalWorkflowExecutionFailed"
            case .signalexternalworkflowexecutioninitiated: return "SignalExternalWorkflowExecutionInitiated"
            case .startchildworkflowexecutionfailed: return "StartChildWorkflowExecutionFailed"
            case .startchildworkflowexecutioninitiated: return "StartChildWorkflowExecutionInitiated"
            case .startlambdafunctionfailed: return "StartLambdaFunctionFailed"
            case .starttimerfailed: return "StartTimerFailed"
            case .timercanceled: return "TimerCanceled"
            case .timerfired: return "TimerFired"
            case .timerstarted: return "TimerStarted"
            case .workflowexecutioncancelrequested: return "WorkflowExecutionCancelRequested"
            case .workflowexecutioncanceled: return "WorkflowExecutionCanceled"
            case .workflowexecutioncompleted: return "WorkflowExecutionCompleted"
            case .workflowexecutioncontinuedasnew: return "WorkflowExecutionContinuedAsNew"
            case .workflowexecutionfailed: return "WorkflowExecutionFailed"
            case .workflowexecutionsignaled: return "WorkflowExecutionSignaled"
            case .workflowexecutionstarted: return "WorkflowExecutionStarted"
            case .workflowexecutionterminated: return "WorkflowExecutionTerminated"
            case .workflowexecutiontimedout: return "WorkflowExecutionTimedOut"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EventType(rawValue: rawValue) ?? EventType.sdkUnknown(rawValue)
        }
    }
}

extension SWFClientTypes {
    public enum ExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case closed
        case `open`
        case sdkUnknown(Swift.String)

        public static var allCases: [ExecutionStatus] {
            return [
                .closed,
                .open,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .closed: return "CLOSED"
            case .open: return "OPEN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExecutionStatus(rawValue: rawValue) ?? ExecutionStatus.sdkUnknown(rawValue)
        }
    }
}

extension SWFClientTypes.ExecutionTimeFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case latestDate
        case oldestDate
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let latestDate = self.latestDate {
            try encodeContainer.encodeTimestamp(latestDate, format: .epochSeconds, forKey: .latestDate)
        }
        if let oldestDate = self.oldestDate {
            try encodeContainer.encodeTimestamp(oldestDate, format: .epochSeconds, forKey: .oldestDate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let oldestDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .oldestDate)
        oldestDate = oldestDateDecoded
        let latestDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .latestDate)
        latestDate = latestDateDecoded
    }
}

extension SWFClientTypes {
    /// Used to filter the workflow executions in visibility APIs by various time-based rules. Each parameter, if specified, defines a rule that must be satisfied by each returned query result. The parameter values are in the [Unix Time format](https://en.wikipedia.org/wiki/Unix_time). For example: "oldestDate": 1325376070.
    public struct ExecutionTimeFilter: Swift.Equatable {
        /// Specifies the latest start or close date and time to return.
        public var latestDate: ClientRuntime.Date?
        /// Specifies the oldest start or close date and time to return.
        /// This member is required.
        public var oldestDate: ClientRuntime.Date?

        public init (
            latestDate: ClientRuntime.Date? = nil,
            oldestDate: ClientRuntime.Date? = nil
        )
        {
            self.latestDate = latestDate
            self.oldestDate = oldestDate
        }
    }

}

extension SWFClientTypes.ExternalWorkflowExecutionCancelRequestedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case initiatedEventId
        case workflowExecution
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if initiatedEventId != 0 {
            try encodeContainer.encode(initiatedEventId, forKey: .initiatedEventId)
        }
        if let workflowExecution = self.workflowExecution {
            try encodeContainer.encode(workflowExecution, forKey: .workflowExecution)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowExecutionDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecution.self, forKey: .workflowExecution)
        workflowExecution = workflowExecutionDecoded
        let initiatedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .initiatedEventId) ?? 0
        initiatedEventId = initiatedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the ExternalWorkflowExecutionCancelRequested event.
    public struct ExternalWorkflowExecutionCancelRequestedEventAttributes: Swift.Equatable {
        /// The ID of the RequestCancelExternalWorkflowExecutionInitiated event corresponding to the RequestCancelExternalWorkflowExecution decision to cancel this external workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var initiatedEventId: Swift.Int
        /// The external workflow execution to which the cancellation request was delivered.
        /// This member is required.
        public var workflowExecution: SWFClientTypes.WorkflowExecution?

        public init (
            initiatedEventId: Swift.Int = 0,
            workflowExecution: SWFClientTypes.WorkflowExecution? = nil
        )
        {
            self.initiatedEventId = initiatedEventId
            self.workflowExecution = workflowExecution
        }
    }

}

extension SWFClientTypes.ExternalWorkflowExecutionSignaledEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case initiatedEventId
        case workflowExecution
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if initiatedEventId != 0 {
            try encodeContainer.encode(initiatedEventId, forKey: .initiatedEventId)
        }
        if let workflowExecution = self.workflowExecution {
            try encodeContainer.encode(workflowExecution, forKey: .workflowExecution)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowExecutionDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecution.self, forKey: .workflowExecution)
        workflowExecution = workflowExecutionDecoded
        let initiatedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .initiatedEventId) ?? 0
        initiatedEventId = initiatedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the ExternalWorkflowExecutionSignaled event.
    public struct ExternalWorkflowExecutionSignaledEventAttributes: Swift.Equatable {
        /// The ID of the SignalExternalWorkflowExecutionInitiated event corresponding to the SignalExternalWorkflowExecution decision to request this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var initiatedEventId: Swift.Int
        /// The external workflow execution that the signal was delivered to.
        /// This member is required.
        public var workflowExecution: SWFClientTypes.WorkflowExecution?

        public init (
            initiatedEventId: Swift.Int = 0,
            workflowExecution: SWFClientTypes.WorkflowExecution? = nil
        )
        {
            self.initiatedEventId = initiatedEventId
            self.workflowExecution = workflowExecution
        }
    }

}

extension SWFClientTypes.FailWorkflowExecutionDecisionAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details
        case reason
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = self.details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .details)
        details = detailsDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the FailWorkflowExecution decision. Access Control You can use IAM policies to control this decision's access to Amazon SWF resources as follows:
    ///
    /// * Use a Resource element with the domain name to limit the action to only specified domains.
    ///
    /// * Use an Action element to allow or deny permission to call this action.
    ///
    /// * You cannot use an IAM policy to constrain this action's parameters.
    ///
    ///
    /// If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's cause parameter is set to OPERATION_NOT_PERMITTED. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
    public struct FailWorkflowExecutionDecisionAttributes: Swift.Equatable {
        /// Details of the failure.
        public var details: Swift.String?
        /// A descriptive reason for the failure that may help in diagnostics.
        public var reason: Swift.String?

        public init (
            details: Swift.String? = nil,
            reason: Swift.String? = nil
        )
        {
            self.details = details
            self.reason = reason
        }
    }

}

extension SWFClientTypes {
    public enum FailWorkflowExecutionFailedCause: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case operationNotPermitted
        case unhandledDecision
        case sdkUnknown(Swift.String)

        public static var allCases: [FailWorkflowExecutionFailedCause] {
            return [
                .operationNotPermitted,
                .unhandledDecision,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
            case .unhandledDecision: return "UNHANDLED_DECISION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FailWorkflowExecutionFailedCause(rawValue: rawValue) ?? FailWorkflowExecutionFailedCause.sdkUnknown(rawValue)
        }
    }
}

extension SWFClientTypes.FailWorkflowExecutionFailedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case decisionTaskCompletedEventId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let causeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.FailWorkflowExecutionFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the FailWorkflowExecutionFailed event.
    public struct FailWorkflowExecutionFailedEventAttributes: Swift.Equatable {
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
        /// This member is required.
        public var cause: SWFClientTypes.FailWorkflowExecutionFailedCause?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the FailWorkflowExecution decision to fail this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int

        public init (
            cause: SWFClientTypes.FailWorkflowExecutionFailedCause? = nil,
            decisionTaskCompletedEventId: Swift.Int = 0
        )
        {
            self.cause = cause
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        }
    }

}

extension GetWorkflowExecutionHistoryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case execution
        case maximumPageSize
        case nextPageToken
        case reverseOrder
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let execution = self.execution {
            try encodeContainer.encode(execution, forKey: .execution)
        }
        if maximumPageSize != 0 {
            try encodeContainer.encode(maximumPageSize, forKey: .maximumPageSize)
        }
        if let nextPageToken = self.nextPageToken {
            try encodeContainer.encode(nextPageToken, forKey: .nextPageToken)
        }
        if reverseOrder != false {
            try encodeContainer.encode(reverseOrder, forKey: .reverseOrder)
        }
    }
}

extension GetWorkflowExecutionHistoryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetWorkflowExecutionHistoryInput: Swift.Equatable {
    /// The name of the domain containing the workflow execution.
    /// This member is required.
    public var domain: Swift.String?
    /// Specifies the workflow execution for which to return the history.
    /// This member is required.
    public var execution: SWFClientTypes.WorkflowExecution?
    /// The maximum number of results that are returned per call. Use nextPageToken to obtain further pages of results.
    public var maximumPageSize: Swift.Int
    /// If NextPageToken is returned there are more results available. The value of NextPageToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 60 seconds. Using an expired pagination token will return a 400 error: "Specified token has exceeded its maximum lifetime". The configured maximumPageSize determines how many results can be returned in a single call.
    public var nextPageToken: Swift.String?
    /// When set to true, returns the events in reverse order. By default the results are returned in ascending order of the eventTimeStamp of the events.
    public var reverseOrder: Swift.Bool

    public init (
        domain: Swift.String? = nil,
        execution: SWFClientTypes.WorkflowExecution? = nil,
        maximumPageSize: Swift.Int = 0,
        nextPageToken: Swift.String? = nil,
        reverseOrder: Swift.Bool = false
    )
    {
        self.domain = domain
        self.execution = execution
        self.maximumPageSize = maximumPageSize
        self.nextPageToken = nextPageToken
        self.reverseOrder = reverseOrder
    }
}

struct GetWorkflowExecutionHistoryInputBody: Swift.Equatable {
    let domain: Swift.String?
    let execution: SWFClientTypes.WorkflowExecution?
    let nextPageToken: Swift.String?
    let maximumPageSize: Swift.Int
    let reverseOrder: Swift.Bool
}

extension GetWorkflowExecutionHistoryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case execution
        case maximumPageSize
        case nextPageToken
        case reverseOrder
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let executionDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecution.self, forKey: .execution)
        execution = executionDecoded
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let maximumPageSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumPageSize) ?? 0
        maximumPageSize = maximumPageSizeDecoded
        let reverseOrderDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .reverseOrder) ?? false
        reverseOrder = reverseOrderDecoded
    }
}

extension GetWorkflowExecutionHistoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetWorkflowExecutionHistoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetWorkflowExecutionHistoryOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetWorkflowExecutionHistoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetWorkflowExecutionHistoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.events = output.events
            self.nextPageToken = output.nextPageToken
        } else {
            self.events = nil
            self.nextPageToken = nil
        }
    }
}

/// Paginated representation of a workflow history for a workflow execution. This is the up to date, complete and authoritative record of the events related to all tasks and events in the life of the workflow execution.
public struct GetWorkflowExecutionHistoryOutputResponse: Swift.Equatable {
    /// The list of history events.
    /// This member is required.
    public var events: [SWFClientTypes.HistoryEvent]?
    /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
    public var nextPageToken: Swift.String?

    public init (
        events: [SWFClientTypes.HistoryEvent]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.events = events
        self.nextPageToken = nextPageToken
    }
}

struct GetWorkflowExecutionHistoryOutputResponseBody: Swift.Equatable {
    let events: [SWFClientTypes.HistoryEvent]?
    let nextPageToken: Swift.String?
}

extension GetWorkflowExecutionHistoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventsContainer = try containerValues.decodeIfPresent([SWFClientTypes.HistoryEvent?].self, forKey: .events)
        var eventsDecoded0:[SWFClientTypes.HistoryEvent]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [SWFClientTypes.HistoryEvent]()
            for structure0 in eventsContainer {
                if let structure0 = structure0 {
                    eventsDecoded0?.append(structure0)
                }
            }
        }
        events = eventsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension SWFClientTypes.HistoryEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityTaskCancelRequestedEventAttributes
        case activityTaskCanceledEventAttributes
        case activityTaskCompletedEventAttributes
        case activityTaskFailedEventAttributes
        case activityTaskScheduledEventAttributes
        case activityTaskStartedEventAttributes
        case activityTaskTimedOutEventAttributes
        case cancelTimerFailedEventAttributes
        case cancelWorkflowExecutionFailedEventAttributes
        case childWorkflowExecutionCanceledEventAttributes
        case childWorkflowExecutionCompletedEventAttributes
        case childWorkflowExecutionFailedEventAttributes
        case childWorkflowExecutionStartedEventAttributes
        case childWorkflowExecutionTerminatedEventAttributes
        case childWorkflowExecutionTimedOutEventAttributes
        case completeWorkflowExecutionFailedEventAttributes
        case continueAsNewWorkflowExecutionFailedEventAttributes
        case decisionTaskCompletedEventAttributes
        case decisionTaskScheduledEventAttributes
        case decisionTaskStartedEventAttributes
        case decisionTaskTimedOutEventAttributes
        case eventId
        case eventTimestamp
        case eventType
        case externalWorkflowExecutionCancelRequestedEventAttributes
        case externalWorkflowExecutionSignaledEventAttributes
        case failWorkflowExecutionFailedEventAttributes
        case lambdaFunctionCompletedEventAttributes
        case lambdaFunctionFailedEventAttributes
        case lambdaFunctionScheduledEventAttributes
        case lambdaFunctionStartedEventAttributes
        case lambdaFunctionTimedOutEventAttributes
        case markerRecordedEventAttributes
        case recordMarkerFailedEventAttributes
        case requestCancelActivityTaskFailedEventAttributes
        case requestCancelExternalWorkflowExecutionFailedEventAttributes
        case requestCancelExternalWorkflowExecutionInitiatedEventAttributes
        case scheduleActivityTaskFailedEventAttributes
        case scheduleLambdaFunctionFailedEventAttributes
        case signalExternalWorkflowExecutionFailedEventAttributes
        case signalExternalWorkflowExecutionInitiatedEventAttributes
        case startChildWorkflowExecutionFailedEventAttributes
        case startChildWorkflowExecutionInitiatedEventAttributes
        case startLambdaFunctionFailedEventAttributes
        case startTimerFailedEventAttributes
        case timerCanceledEventAttributes
        case timerFiredEventAttributes
        case timerStartedEventAttributes
        case workflowExecutionCancelRequestedEventAttributes
        case workflowExecutionCanceledEventAttributes
        case workflowExecutionCompletedEventAttributes
        case workflowExecutionContinuedAsNewEventAttributes
        case workflowExecutionFailedEventAttributes
        case workflowExecutionSignaledEventAttributes
        case workflowExecutionStartedEventAttributes
        case workflowExecutionTerminatedEventAttributes
        case workflowExecutionTimedOutEventAttributes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityTaskCancelRequestedEventAttributes = self.activityTaskCancelRequestedEventAttributes {
            try encodeContainer.encode(activityTaskCancelRequestedEventAttributes, forKey: .activityTaskCancelRequestedEventAttributes)
        }
        if let activityTaskCanceledEventAttributes = self.activityTaskCanceledEventAttributes {
            try encodeContainer.encode(activityTaskCanceledEventAttributes, forKey: .activityTaskCanceledEventAttributes)
        }
        if let activityTaskCompletedEventAttributes = self.activityTaskCompletedEventAttributes {
            try encodeContainer.encode(activityTaskCompletedEventAttributes, forKey: .activityTaskCompletedEventAttributes)
        }
        if let activityTaskFailedEventAttributes = self.activityTaskFailedEventAttributes {
            try encodeContainer.encode(activityTaskFailedEventAttributes, forKey: .activityTaskFailedEventAttributes)
        }
        if let activityTaskScheduledEventAttributes = self.activityTaskScheduledEventAttributes {
            try encodeContainer.encode(activityTaskScheduledEventAttributes, forKey: .activityTaskScheduledEventAttributes)
        }
        if let activityTaskStartedEventAttributes = self.activityTaskStartedEventAttributes {
            try encodeContainer.encode(activityTaskStartedEventAttributes, forKey: .activityTaskStartedEventAttributes)
        }
        if let activityTaskTimedOutEventAttributes = self.activityTaskTimedOutEventAttributes {
            try encodeContainer.encode(activityTaskTimedOutEventAttributes, forKey: .activityTaskTimedOutEventAttributes)
        }
        if let cancelTimerFailedEventAttributes = self.cancelTimerFailedEventAttributes {
            try encodeContainer.encode(cancelTimerFailedEventAttributes, forKey: .cancelTimerFailedEventAttributes)
        }
        if let cancelWorkflowExecutionFailedEventAttributes = self.cancelWorkflowExecutionFailedEventAttributes {
            try encodeContainer.encode(cancelWorkflowExecutionFailedEventAttributes, forKey: .cancelWorkflowExecutionFailedEventAttributes)
        }
        if let childWorkflowExecutionCanceledEventAttributes = self.childWorkflowExecutionCanceledEventAttributes {
            try encodeContainer.encode(childWorkflowExecutionCanceledEventAttributes, forKey: .childWorkflowExecutionCanceledEventAttributes)
        }
        if let childWorkflowExecutionCompletedEventAttributes = self.childWorkflowExecutionCompletedEventAttributes {
            try encodeContainer.encode(childWorkflowExecutionCompletedEventAttributes, forKey: .childWorkflowExecutionCompletedEventAttributes)
        }
        if let childWorkflowExecutionFailedEventAttributes = self.childWorkflowExecutionFailedEventAttributes {
            try encodeContainer.encode(childWorkflowExecutionFailedEventAttributes, forKey: .childWorkflowExecutionFailedEventAttributes)
        }
        if let childWorkflowExecutionStartedEventAttributes = self.childWorkflowExecutionStartedEventAttributes {
            try encodeContainer.encode(childWorkflowExecutionStartedEventAttributes, forKey: .childWorkflowExecutionStartedEventAttributes)
        }
        if let childWorkflowExecutionTerminatedEventAttributes = self.childWorkflowExecutionTerminatedEventAttributes {
            try encodeContainer.encode(childWorkflowExecutionTerminatedEventAttributes, forKey: .childWorkflowExecutionTerminatedEventAttributes)
        }
        if let childWorkflowExecutionTimedOutEventAttributes = self.childWorkflowExecutionTimedOutEventAttributes {
            try encodeContainer.encode(childWorkflowExecutionTimedOutEventAttributes, forKey: .childWorkflowExecutionTimedOutEventAttributes)
        }
        if let completeWorkflowExecutionFailedEventAttributes = self.completeWorkflowExecutionFailedEventAttributes {
            try encodeContainer.encode(completeWorkflowExecutionFailedEventAttributes, forKey: .completeWorkflowExecutionFailedEventAttributes)
        }
        if let continueAsNewWorkflowExecutionFailedEventAttributes = self.continueAsNewWorkflowExecutionFailedEventAttributes {
            try encodeContainer.encode(continueAsNewWorkflowExecutionFailedEventAttributes, forKey: .continueAsNewWorkflowExecutionFailedEventAttributes)
        }
        if let decisionTaskCompletedEventAttributes = self.decisionTaskCompletedEventAttributes {
            try encodeContainer.encode(decisionTaskCompletedEventAttributes, forKey: .decisionTaskCompletedEventAttributes)
        }
        if let decisionTaskScheduledEventAttributes = self.decisionTaskScheduledEventAttributes {
            try encodeContainer.encode(decisionTaskScheduledEventAttributes, forKey: .decisionTaskScheduledEventAttributes)
        }
        if let decisionTaskStartedEventAttributes = self.decisionTaskStartedEventAttributes {
            try encodeContainer.encode(decisionTaskStartedEventAttributes, forKey: .decisionTaskStartedEventAttributes)
        }
        if let decisionTaskTimedOutEventAttributes = self.decisionTaskTimedOutEventAttributes {
            try encodeContainer.encode(decisionTaskTimedOutEventAttributes, forKey: .decisionTaskTimedOutEventAttributes)
        }
        if eventId != 0 {
            try encodeContainer.encode(eventId, forKey: .eventId)
        }
        if let eventTimestamp = self.eventTimestamp {
            try encodeContainer.encodeTimestamp(eventTimestamp, format: .epochSeconds, forKey: .eventTimestamp)
        }
        if let eventType = self.eventType {
            try encodeContainer.encode(eventType.rawValue, forKey: .eventType)
        }
        if let externalWorkflowExecutionCancelRequestedEventAttributes = self.externalWorkflowExecutionCancelRequestedEventAttributes {
            try encodeContainer.encode(externalWorkflowExecutionCancelRequestedEventAttributes, forKey: .externalWorkflowExecutionCancelRequestedEventAttributes)
        }
        if let externalWorkflowExecutionSignaledEventAttributes = self.externalWorkflowExecutionSignaledEventAttributes {
            try encodeContainer.encode(externalWorkflowExecutionSignaledEventAttributes, forKey: .externalWorkflowExecutionSignaledEventAttributes)
        }
        if let failWorkflowExecutionFailedEventAttributes = self.failWorkflowExecutionFailedEventAttributes {
            try encodeContainer.encode(failWorkflowExecutionFailedEventAttributes, forKey: .failWorkflowExecutionFailedEventAttributes)
        }
        if let lambdaFunctionCompletedEventAttributes = self.lambdaFunctionCompletedEventAttributes {
            try encodeContainer.encode(lambdaFunctionCompletedEventAttributes, forKey: .lambdaFunctionCompletedEventAttributes)
        }
        if let lambdaFunctionFailedEventAttributes = self.lambdaFunctionFailedEventAttributes {
            try encodeContainer.encode(lambdaFunctionFailedEventAttributes, forKey: .lambdaFunctionFailedEventAttributes)
        }
        if let lambdaFunctionScheduledEventAttributes = self.lambdaFunctionScheduledEventAttributes {
            try encodeContainer.encode(lambdaFunctionScheduledEventAttributes, forKey: .lambdaFunctionScheduledEventAttributes)
        }
        if let lambdaFunctionStartedEventAttributes = self.lambdaFunctionStartedEventAttributes {
            try encodeContainer.encode(lambdaFunctionStartedEventAttributes, forKey: .lambdaFunctionStartedEventAttributes)
        }
        if let lambdaFunctionTimedOutEventAttributes = self.lambdaFunctionTimedOutEventAttributes {
            try encodeContainer.encode(lambdaFunctionTimedOutEventAttributes, forKey: .lambdaFunctionTimedOutEventAttributes)
        }
        if let markerRecordedEventAttributes = self.markerRecordedEventAttributes {
            try encodeContainer.encode(markerRecordedEventAttributes, forKey: .markerRecordedEventAttributes)
        }
        if let recordMarkerFailedEventAttributes = self.recordMarkerFailedEventAttributes {
            try encodeContainer.encode(recordMarkerFailedEventAttributes, forKey: .recordMarkerFailedEventAttributes)
        }
        if let requestCancelActivityTaskFailedEventAttributes = self.requestCancelActivityTaskFailedEventAttributes {
            try encodeContainer.encode(requestCancelActivityTaskFailedEventAttributes, forKey: .requestCancelActivityTaskFailedEventAttributes)
        }
        if let requestCancelExternalWorkflowExecutionFailedEventAttributes = self.requestCancelExternalWorkflowExecutionFailedEventAttributes {
            try encodeContainer.encode(requestCancelExternalWorkflowExecutionFailedEventAttributes, forKey: .requestCancelExternalWorkflowExecutionFailedEventAttributes)
        }
        if let requestCancelExternalWorkflowExecutionInitiatedEventAttributes = self.requestCancelExternalWorkflowExecutionInitiatedEventAttributes {
            try encodeContainer.encode(requestCancelExternalWorkflowExecutionInitiatedEventAttributes, forKey: .requestCancelExternalWorkflowExecutionInitiatedEventAttributes)
        }
        if let scheduleActivityTaskFailedEventAttributes = self.scheduleActivityTaskFailedEventAttributes {
            try encodeContainer.encode(scheduleActivityTaskFailedEventAttributes, forKey: .scheduleActivityTaskFailedEventAttributes)
        }
        if let scheduleLambdaFunctionFailedEventAttributes = self.scheduleLambdaFunctionFailedEventAttributes {
            try encodeContainer.encode(scheduleLambdaFunctionFailedEventAttributes, forKey: .scheduleLambdaFunctionFailedEventAttributes)
        }
        if let signalExternalWorkflowExecutionFailedEventAttributes = self.signalExternalWorkflowExecutionFailedEventAttributes {
            try encodeContainer.encode(signalExternalWorkflowExecutionFailedEventAttributes, forKey: .signalExternalWorkflowExecutionFailedEventAttributes)
        }
        if let signalExternalWorkflowExecutionInitiatedEventAttributes = self.signalExternalWorkflowExecutionInitiatedEventAttributes {
            try encodeContainer.encode(signalExternalWorkflowExecutionInitiatedEventAttributes, forKey: .signalExternalWorkflowExecutionInitiatedEventAttributes)
        }
        if let startChildWorkflowExecutionFailedEventAttributes = self.startChildWorkflowExecutionFailedEventAttributes {
            try encodeContainer.encode(startChildWorkflowExecutionFailedEventAttributes, forKey: .startChildWorkflowExecutionFailedEventAttributes)
        }
        if let startChildWorkflowExecutionInitiatedEventAttributes = self.startChildWorkflowExecutionInitiatedEventAttributes {
            try encodeContainer.encode(startChildWorkflowExecutionInitiatedEventAttributes, forKey: .startChildWorkflowExecutionInitiatedEventAttributes)
        }
        if let startLambdaFunctionFailedEventAttributes = self.startLambdaFunctionFailedEventAttributes {
            try encodeContainer.encode(startLambdaFunctionFailedEventAttributes, forKey: .startLambdaFunctionFailedEventAttributes)
        }
        if let startTimerFailedEventAttributes = self.startTimerFailedEventAttributes {
            try encodeContainer.encode(startTimerFailedEventAttributes, forKey: .startTimerFailedEventAttributes)
        }
        if let timerCanceledEventAttributes = self.timerCanceledEventAttributes {
            try encodeContainer.encode(timerCanceledEventAttributes, forKey: .timerCanceledEventAttributes)
        }
        if let timerFiredEventAttributes = self.timerFiredEventAttributes {
            try encodeContainer.encode(timerFiredEventAttributes, forKey: .timerFiredEventAttributes)
        }
        if let timerStartedEventAttributes = self.timerStartedEventAttributes {
            try encodeContainer.encode(timerStartedEventAttributes, forKey: .timerStartedEventAttributes)
        }
        if let workflowExecutionCancelRequestedEventAttributes = self.workflowExecutionCancelRequestedEventAttributes {
            try encodeContainer.encode(workflowExecutionCancelRequestedEventAttributes, forKey: .workflowExecutionCancelRequestedEventAttributes)
        }
        if let workflowExecutionCanceledEventAttributes = self.workflowExecutionCanceledEventAttributes {
            try encodeContainer.encode(workflowExecutionCanceledEventAttributes, forKey: .workflowExecutionCanceledEventAttributes)
        }
        if let workflowExecutionCompletedEventAttributes = self.workflowExecutionCompletedEventAttributes {
            try encodeContainer.encode(workflowExecutionCompletedEventAttributes, forKey: .workflowExecutionCompletedEventAttributes)
        }
        if let workflowExecutionContinuedAsNewEventAttributes = self.workflowExecutionContinuedAsNewEventAttributes {
            try encodeContainer.encode(workflowExecutionContinuedAsNewEventAttributes, forKey: .workflowExecutionContinuedAsNewEventAttributes)
        }
        if let workflowExecutionFailedEventAttributes = self.workflowExecutionFailedEventAttributes {
            try encodeContainer.encode(workflowExecutionFailedEventAttributes, forKey: .workflowExecutionFailedEventAttributes)
        }
        if let workflowExecutionSignaledEventAttributes = self.workflowExecutionSignaledEventAttributes {
            try encodeContainer.encode(workflowExecutionSignaledEventAttributes, forKey: .workflowExecutionSignaledEventAttributes)
        }
        if let workflowExecutionStartedEventAttributes = self.workflowExecutionStartedEventAttributes {
            try encodeContainer.encode(workflowExecutionStartedEventAttributes, forKey: .workflowExecutionStartedEventAttributes)
        }
        if let workflowExecutionTerminatedEventAttributes = self.workflowExecutionTerminatedEventAttributes {
            try encodeContainer.encode(workflowExecutionTerminatedEventAttributes, forKey: .workflowExecutionTerminatedEventAttributes)
        }
        if let workflowExecutionTimedOutEventAttributes = self.workflowExecutionTimedOutEventAttributes {
            try encodeContainer.encode(workflowExecutionTimedOutEventAttributes, forKey: .workflowExecutionTimedOutEventAttributes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .eventTimestamp)
        eventTimestamp = eventTimestampDecoded
        let eventTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.EventType.self, forKey: .eventType)
        eventType = eventTypeDecoded
        let eventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .eventId) ?? 0
        eventId = eventIdDecoded
        let workflowExecutionStartedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecutionStartedEventAttributes.self, forKey: .workflowExecutionStartedEventAttributes)
        workflowExecutionStartedEventAttributes = workflowExecutionStartedEventAttributesDecoded
        let workflowExecutionCompletedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecutionCompletedEventAttributes.self, forKey: .workflowExecutionCompletedEventAttributes)
        workflowExecutionCompletedEventAttributes = workflowExecutionCompletedEventAttributesDecoded
        let completeWorkflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.CompleteWorkflowExecutionFailedEventAttributes.self, forKey: .completeWorkflowExecutionFailedEventAttributes)
        completeWorkflowExecutionFailedEventAttributes = completeWorkflowExecutionFailedEventAttributesDecoded
        let workflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecutionFailedEventAttributes.self, forKey: .workflowExecutionFailedEventAttributes)
        workflowExecutionFailedEventAttributes = workflowExecutionFailedEventAttributesDecoded
        let failWorkflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.FailWorkflowExecutionFailedEventAttributes.self, forKey: .failWorkflowExecutionFailedEventAttributes)
        failWorkflowExecutionFailedEventAttributes = failWorkflowExecutionFailedEventAttributesDecoded
        let workflowExecutionTimedOutEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecutionTimedOutEventAttributes.self, forKey: .workflowExecutionTimedOutEventAttributes)
        workflowExecutionTimedOutEventAttributes = workflowExecutionTimedOutEventAttributesDecoded
        let workflowExecutionCanceledEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecutionCanceledEventAttributes.self, forKey: .workflowExecutionCanceledEventAttributes)
        workflowExecutionCanceledEventAttributes = workflowExecutionCanceledEventAttributesDecoded
        let cancelWorkflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.CancelWorkflowExecutionFailedEventAttributes.self, forKey: .cancelWorkflowExecutionFailedEventAttributes)
        cancelWorkflowExecutionFailedEventAttributes = cancelWorkflowExecutionFailedEventAttributesDecoded
        let workflowExecutionContinuedAsNewEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecutionContinuedAsNewEventAttributes.self, forKey: .workflowExecutionContinuedAsNewEventAttributes)
        workflowExecutionContinuedAsNewEventAttributes = workflowExecutionContinuedAsNewEventAttributesDecoded
        let continueAsNewWorkflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ContinueAsNewWorkflowExecutionFailedEventAttributes.self, forKey: .continueAsNewWorkflowExecutionFailedEventAttributes)
        continueAsNewWorkflowExecutionFailedEventAttributes = continueAsNewWorkflowExecutionFailedEventAttributesDecoded
        let workflowExecutionTerminatedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecutionTerminatedEventAttributes.self, forKey: .workflowExecutionTerminatedEventAttributes)
        workflowExecutionTerminatedEventAttributes = workflowExecutionTerminatedEventAttributesDecoded
        let workflowExecutionCancelRequestedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecutionCancelRequestedEventAttributes.self, forKey: .workflowExecutionCancelRequestedEventAttributes)
        workflowExecutionCancelRequestedEventAttributes = workflowExecutionCancelRequestedEventAttributesDecoded
        let decisionTaskScheduledEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.DecisionTaskScheduledEventAttributes.self, forKey: .decisionTaskScheduledEventAttributes)
        decisionTaskScheduledEventAttributes = decisionTaskScheduledEventAttributesDecoded
        let decisionTaskStartedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.DecisionTaskStartedEventAttributes.self, forKey: .decisionTaskStartedEventAttributes)
        decisionTaskStartedEventAttributes = decisionTaskStartedEventAttributesDecoded
        let decisionTaskCompletedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.DecisionTaskCompletedEventAttributes.self, forKey: .decisionTaskCompletedEventAttributes)
        decisionTaskCompletedEventAttributes = decisionTaskCompletedEventAttributesDecoded
        let decisionTaskTimedOutEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.DecisionTaskTimedOutEventAttributes.self, forKey: .decisionTaskTimedOutEventAttributes)
        decisionTaskTimedOutEventAttributes = decisionTaskTimedOutEventAttributesDecoded
        let activityTaskScheduledEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ActivityTaskScheduledEventAttributes.self, forKey: .activityTaskScheduledEventAttributes)
        activityTaskScheduledEventAttributes = activityTaskScheduledEventAttributesDecoded
        let activityTaskStartedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ActivityTaskStartedEventAttributes.self, forKey: .activityTaskStartedEventAttributes)
        activityTaskStartedEventAttributes = activityTaskStartedEventAttributesDecoded
        let activityTaskCompletedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ActivityTaskCompletedEventAttributes.self, forKey: .activityTaskCompletedEventAttributes)
        activityTaskCompletedEventAttributes = activityTaskCompletedEventAttributesDecoded
        let activityTaskFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ActivityTaskFailedEventAttributes.self, forKey: .activityTaskFailedEventAttributes)
        activityTaskFailedEventAttributes = activityTaskFailedEventAttributesDecoded
        let activityTaskTimedOutEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ActivityTaskTimedOutEventAttributes.self, forKey: .activityTaskTimedOutEventAttributes)
        activityTaskTimedOutEventAttributes = activityTaskTimedOutEventAttributesDecoded
        let activityTaskCanceledEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ActivityTaskCanceledEventAttributes.self, forKey: .activityTaskCanceledEventAttributes)
        activityTaskCanceledEventAttributes = activityTaskCanceledEventAttributesDecoded
        let activityTaskCancelRequestedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ActivityTaskCancelRequestedEventAttributes.self, forKey: .activityTaskCancelRequestedEventAttributes)
        activityTaskCancelRequestedEventAttributes = activityTaskCancelRequestedEventAttributesDecoded
        let workflowExecutionSignaledEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecutionSignaledEventAttributes.self, forKey: .workflowExecutionSignaledEventAttributes)
        workflowExecutionSignaledEventAttributes = workflowExecutionSignaledEventAttributesDecoded
        let markerRecordedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.MarkerRecordedEventAttributes.self, forKey: .markerRecordedEventAttributes)
        markerRecordedEventAttributes = markerRecordedEventAttributesDecoded
        let recordMarkerFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.RecordMarkerFailedEventAttributes.self, forKey: .recordMarkerFailedEventAttributes)
        recordMarkerFailedEventAttributes = recordMarkerFailedEventAttributesDecoded
        let timerStartedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TimerStartedEventAttributes.self, forKey: .timerStartedEventAttributes)
        timerStartedEventAttributes = timerStartedEventAttributesDecoded
        let timerFiredEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TimerFiredEventAttributes.self, forKey: .timerFiredEventAttributes)
        timerFiredEventAttributes = timerFiredEventAttributesDecoded
        let timerCanceledEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TimerCanceledEventAttributes.self, forKey: .timerCanceledEventAttributes)
        timerCanceledEventAttributes = timerCanceledEventAttributesDecoded
        let startChildWorkflowExecutionInitiatedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.StartChildWorkflowExecutionInitiatedEventAttributes.self, forKey: .startChildWorkflowExecutionInitiatedEventAttributes)
        startChildWorkflowExecutionInitiatedEventAttributes = startChildWorkflowExecutionInitiatedEventAttributesDecoded
        let childWorkflowExecutionStartedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ChildWorkflowExecutionStartedEventAttributes.self, forKey: .childWorkflowExecutionStartedEventAttributes)
        childWorkflowExecutionStartedEventAttributes = childWorkflowExecutionStartedEventAttributesDecoded
        let childWorkflowExecutionCompletedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ChildWorkflowExecutionCompletedEventAttributes.self, forKey: .childWorkflowExecutionCompletedEventAttributes)
        childWorkflowExecutionCompletedEventAttributes = childWorkflowExecutionCompletedEventAttributesDecoded
        let childWorkflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ChildWorkflowExecutionFailedEventAttributes.self, forKey: .childWorkflowExecutionFailedEventAttributes)
        childWorkflowExecutionFailedEventAttributes = childWorkflowExecutionFailedEventAttributesDecoded
        let childWorkflowExecutionTimedOutEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ChildWorkflowExecutionTimedOutEventAttributes.self, forKey: .childWorkflowExecutionTimedOutEventAttributes)
        childWorkflowExecutionTimedOutEventAttributes = childWorkflowExecutionTimedOutEventAttributesDecoded
        let childWorkflowExecutionCanceledEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ChildWorkflowExecutionCanceledEventAttributes.self, forKey: .childWorkflowExecutionCanceledEventAttributes)
        childWorkflowExecutionCanceledEventAttributes = childWorkflowExecutionCanceledEventAttributesDecoded
        let childWorkflowExecutionTerminatedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ChildWorkflowExecutionTerminatedEventAttributes.self, forKey: .childWorkflowExecutionTerminatedEventAttributes)
        childWorkflowExecutionTerminatedEventAttributes = childWorkflowExecutionTerminatedEventAttributesDecoded
        let signalExternalWorkflowExecutionInitiatedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.SignalExternalWorkflowExecutionInitiatedEventAttributes.self, forKey: .signalExternalWorkflowExecutionInitiatedEventAttributes)
        signalExternalWorkflowExecutionInitiatedEventAttributes = signalExternalWorkflowExecutionInitiatedEventAttributesDecoded
        let externalWorkflowExecutionSignaledEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ExternalWorkflowExecutionSignaledEventAttributes.self, forKey: .externalWorkflowExecutionSignaledEventAttributes)
        externalWorkflowExecutionSignaledEventAttributes = externalWorkflowExecutionSignaledEventAttributesDecoded
        let signalExternalWorkflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.SignalExternalWorkflowExecutionFailedEventAttributes.self, forKey: .signalExternalWorkflowExecutionFailedEventAttributes)
        signalExternalWorkflowExecutionFailedEventAttributes = signalExternalWorkflowExecutionFailedEventAttributesDecoded
        let externalWorkflowExecutionCancelRequestedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ExternalWorkflowExecutionCancelRequestedEventAttributes.self, forKey: .externalWorkflowExecutionCancelRequestedEventAttributes)
        externalWorkflowExecutionCancelRequestedEventAttributes = externalWorkflowExecutionCancelRequestedEventAttributesDecoded
        let requestCancelExternalWorkflowExecutionInitiatedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes.self, forKey: .requestCancelExternalWorkflowExecutionInitiatedEventAttributes)
        requestCancelExternalWorkflowExecutionInitiatedEventAttributes = requestCancelExternalWorkflowExecutionInitiatedEventAttributesDecoded
        let requestCancelExternalWorkflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.RequestCancelExternalWorkflowExecutionFailedEventAttributes.self, forKey: .requestCancelExternalWorkflowExecutionFailedEventAttributes)
        requestCancelExternalWorkflowExecutionFailedEventAttributes = requestCancelExternalWorkflowExecutionFailedEventAttributesDecoded
        let scheduleActivityTaskFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ScheduleActivityTaskFailedEventAttributes.self, forKey: .scheduleActivityTaskFailedEventAttributes)
        scheduleActivityTaskFailedEventAttributes = scheduleActivityTaskFailedEventAttributesDecoded
        let requestCancelActivityTaskFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.RequestCancelActivityTaskFailedEventAttributes.self, forKey: .requestCancelActivityTaskFailedEventAttributes)
        requestCancelActivityTaskFailedEventAttributes = requestCancelActivityTaskFailedEventAttributesDecoded
        let startTimerFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.StartTimerFailedEventAttributes.self, forKey: .startTimerFailedEventAttributes)
        startTimerFailedEventAttributes = startTimerFailedEventAttributesDecoded
        let cancelTimerFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.CancelTimerFailedEventAttributes.self, forKey: .cancelTimerFailedEventAttributes)
        cancelTimerFailedEventAttributes = cancelTimerFailedEventAttributesDecoded
        let startChildWorkflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.StartChildWorkflowExecutionFailedEventAttributes.self, forKey: .startChildWorkflowExecutionFailedEventAttributes)
        startChildWorkflowExecutionFailedEventAttributes = startChildWorkflowExecutionFailedEventAttributesDecoded
        let lambdaFunctionScheduledEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.LambdaFunctionScheduledEventAttributes.self, forKey: .lambdaFunctionScheduledEventAttributes)
        lambdaFunctionScheduledEventAttributes = lambdaFunctionScheduledEventAttributesDecoded
        let lambdaFunctionStartedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.LambdaFunctionStartedEventAttributes.self, forKey: .lambdaFunctionStartedEventAttributes)
        lambdaFunctionStartedEventAttributes = lambdaFunctionStartedEventAttributesDecoded
        let lambdaFunctionCompletedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.LambdaFunctionCompletedEventAttributes.self, forKey: .lambdaFunctionCompletedEventAttributes)
        lambdaFunctionCompletedEventAttributes = lambdaFunctionCompletedEventAttributesDecoded
        let lambdaFunctionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.LambdaFunctionFailedEventAttributes.self, forKey: .lambdaFunctionFailedEventAttributes)
        lambdaFunctionFailedEventAttributes = lambdaFunctionFailedEventAttributesDecoded
        let lambdaFunctionTimedOutEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.LambdaFunctionTimedOutEventAttributes.self, forKey: .lambdaFunctionTimedOutEventAttributes)
        lambdaFunctionTimedOutEventAttributes = lambdaFunctionTimedOutEventAttributesDecoded
        let scheduleLambdaFunctionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ScheduleLambdaFunctionFailedEventAttributes.self, forKey: .scheduleLambdaFunctionFailedEventAttributes)
        scheduleLambdaFunctionFailedEventAttributes = scheduleLambdaFunctionFailedEventAttributesDecoded
        let startLambdaFunctionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SWFClientTypes.StartLambdaFunctionFailedEventAttributes.self, forKey: .startLambdaFunctionFailedEventAttributes)
        startLambdaFunctionFailedEventAttributes = startLambdaFunctionFailedEventAttributesDecoded
    }
}

extension SWFClientTypes {
    /// Event within a workflow execution. A history event can be one of these types:
    ///
    /// * ActivityTaskCancelRequested – A RequestCancelActivityTask decision was received by the system.
    ///
    /// * ActivityTaskCanceled – The activity task was successfully canceled.
    ///
    /// * ActivityTaskCompleted – An activity worker successfully completed an activity task by calling [RespondActivityTaskCompleted].
    ///
    /// * ActivityTaskFailed – An activity worker failed an activity task by calling [RespondActivityTaskFailed].
    ///
    /// * ActivityTaskScheduled – An activity task was scheduled for execution.
    ///
    /// * ActivityTaskStarted – The scheduled activity task was dispatched to a worker.
    ///
    /// * ActivityTaskTimedOut – The activity task timed out.
    ///
    /// * CancelTimerFailed – Failed to process CancelTimer decision. This happens when the decision isn't configured properly, for example no timer exists with the specified timer Id.
    ///
    /// * CancelWorkflowExecutionFailed – A request to cancel a workflow execution failed.
    ///
    /// * ChildWorkflowExecutionCanceled – A child workflow execution, started by this workflow execution, was canceled and closed.
    ///
    /// * ChildWorkflowExecutionCompleted – A child workflow execution, started by this workflow execution, completed successfully and was closed.
    ///
    /// * ChildWorkflowExecutionFailed – A child workflow execution, started by this workflow execution, failed to complete successfully and was closed.
    ///
    /// * ChildWorkflowExecutionStarted – A child workflow execution was successfully started.
    ///
    /// * ChildWorkflowExecutionTerminated – A child workflow execution, started by this workflow execution, was terminated.
    ///
    /// * ChildWorkflowExecutionTimedOut – A child workflow execution, started by this workflow execution, timed out and was closed.
    ///
    /// * CompleteWorkflowExecutionFailed – The workflow execution failed to complete.
    ///
    /// * ContinueAsNewWorkflowExecutionFailed – The workflow execution failed to complete after being continued as a new workflow execution.
    ///
    /// * DecisionTaskCompleted – The decider successfully completed a decision task by calling [RespondDecisionTaskCompleted].
    ///
    /// * DecisionTaskScheduled – A decision task was scheduled for the workflow execution.
    ///
    /// * DecisionTaskStarted – The decision task was dispatched to a decider.
    ///
    /// * DecisionTaskTimedOut – The decision task timed out.
    ///
    /// * ExternalWorkflowExecutionCancelRequested – Request to cancel an external workflow execution was successfully delivered to the target execution.
    ///
    /// * ExternalWorkflowExecutionSignaled – A signal, requested by this workflow execution, was successfully delivered to the target external workflow execution.
    ///
    /// * FailWorkflowExecutionFailed – A request to mark a workflow execution as failed, itself failed.
    ///
    /// * MarkerRecorded – A marker was recorded in the workflow history as the result of a RecordMarker decision.
    ///
    /// * RecordMarkerFailed – A RecordMarker decision was returned as failed.
    ///
    /// * RequestCancelActivityTaskFailed – Failed to process RequestCancelActivityTask decision. This happens when the decision isn't configured properly.
    ///
    /// * RequestCancelExternalWorkflowExecutionFailed – Request to cancel an external workflow execution failed.
    ///
    /// * RequestCancelExternalWorkflowExecutionInitiated – A request was made to request the cancellation of an external workflow execution.
    ///
    /// * ScheduleActivityTaskFailed – Failed to process ScheduleActivityTask decision. This happens when the decision isn't configured properly, for example the activity type specified isn't registered.
    ///
    /// * SignalExternalWorkflowExecutionFailed – The request to signal an external workflow execution failed.
    ///
    /// * SignalExternalWorkflowExecutionInitiated – A request to signal an external workflow was made.
    ///
    /// * StartActivityTaskFailed – A scheduled activity task failed to start.
    ///
    /// * StartChildWorkflowExecutionFailed – Failed to process StartChildWorkflowExecution decision. This happens when the decision isn't configured properly, for example the workflow type specified isn't registered.
    ///
    /// * StartChildWorkflowExecutionInitiated – A request was made to start a child workflow execution.
    ///
    /// * StartTimerFailed – Failed to process StartTimer decision. This happens when the decision isn't configured properly, for example a timer already exists with the specified timer Id.
    ///
    /// * TimerCanceled – A timer, previously started for this workflow execution, was successfully canceled.
    ///
    /// * TimerFired – A timer, previously started for this workflow execution, fired.
    ///
    /// * TimerStarted – A timer was started for the workflow execution due to a StartTimer decision.
    ///
    /// * WorkflowExecutionCancelRequested – A request to cancel this workflow execution was made.
    ///
    /// * WorkflowExecutionCanceled – The workflow execution was successfully canceled and closed.
    ///
    /// * WorkflowExecutionCompleted – The workflow execution was closed due to successful completion.
    ///
    /// * WorkflowExecutionContinuedAsNew – The workflow execution was closed and a new execution of the same type was created with the same workflowId.
    ///
    /// * WorkflowExecutionFailed – The workflow execution closed due to a failure.
    ///
    /// * WorkflowExecutionSignaled – An external signal was received for the workflow execution.
    ///
    /// * WorkflowExecutionStarted – The workflow execution was started.
    ///
    /// * WorkflowExecutionTerminated – The workflow execution was terminated.
    ///
    /// * WorkflowExecutionTimedOut – The workflow execution was closed because a time out was exceeded.
    public struct HistoryEvent: Swift.Equatable {
        /// If the event is of type ActivityTaskcancelRequested then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var activityTaskCancelRequestedEventAttributes: SWFClientTypes.ActivityTaskCancelRequestedEventAttributes?
        /// If the event is of type ActivityTaskCanceled then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var activityTaskCanceledEventAttributes: SWFClientTypes.ActivityTaskCanceledEventAttributes?
        /// If the event is of type ActivityTaskCompleted then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var activityTaskCompletedEventAttributes: SWFClientTypes.ActivityTaskCompletedEventAttributes?
        /// If the event is of type ActivityTaskFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var activityTaskFailedEventAttributes: SWFClientTypes.ActivityTaskFailedEventAttributes?
        /// If the event is of type ActivityTaskScheduled then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var activityTaskScheduledEventAttributes: SWFClientTypes.ActivityTaskScheduledEventAttributes?
        /// If the event is of type ActivityTaskStarted then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var activityTaskStartedEventAttributes: SWFClientTypes.ActivityTaskStartedEventAttributes?
        /// If the event is of type ActivityTaskTimedOut then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var activityTaskTimedOutEventAttributes: SWFClientTypes.ActivityTaskTimedOutEventAttributes?
        /// If the event is of type CancelTimerFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var cancelTimerFailedEventAttributes: SWFClientTypes.CancelTimerFailedEventAttributes?
        /// If the event is of type CancelWorkflowExecutionFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var cancelWorkflowExecutionFailedEventAttributes: SWFClientTypes.CancelWorkflowExecutionFailedEventAttributes?
        /// If the event is of type ChildWorkflowExecutionCanceled then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var childWorkflowExecutionCanceledEventAttributes: SWFClientTypes.ChildWorkflowExecutionCanceledEventAttributes?
        /// If the event is of type ChildWorkflowExecutionCompleted then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var childWorkflowExecutionCompletedEventAttributes: SWFClientTypes.ChildWorkflowExecutionCompletedEventAttributes?
        /// If the event is of type ChildWorkflowExecutionFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var childWorkflowExecutionFailedEventAttributes: SWFClientTypes.ChildWorkflowExecutionFailedEventAttributes?
        /// If the event is of type ChildWorkflowExecutionStarted then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var childWorkflowExecutionStartedEventAttributes: SWFClientTypes.ChildWorkflowExecutionStartedEventAttributes?
        /// If the event is of type ChildWorkflowExecutionTerminated then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var childWorkflowExecutionTerminatedEventAttributes: SWFClientTypes.ChildWorkflowExecutionTerminatedEventAttributes?
        /// If the event is of type ChildWorkflowExecutionTimedOut then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var childWorkflowExecutionTimedOutEventAttributes: SWFClientTypes.ChildWorkflowExecutionTimedOutEventAttributes?
        /// If the event is of type CompleteWorkflowExecutionFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var completeWorkflowExecutionFailedEventAttributes: SWFClientTypes.CompleteWorkflowExecutionFailedEventAttributes?
        /// If the event is of type ContinueAsNewWorkflowExecutionFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var continueAsNewWorkflowExecutionFailedEventAttributes: SWFClientTypes.ContinueAsNewWorkflowExecutionFailedEventAttributes?
        /// If the event is of type DecisionTaskCompleted then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var decisionTaskCompletedEventAttributes: SWFClientTypes.DecisionTaskCompletedEventAttributes?
        /// If the event is of type DecisionTaskScheduled then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var decisionTaskScheduledEventAttributes: SWFClientTypes.DecisionTaskScheduledEventAttributes?
        /// If the event is of type DecisionTaskStarted then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var decisionTaskStartedEventAttributes: SWFClientTypes.DecisionTaskStartedEventAttributes?
        /// If the event is of type DecisionTaskTimedOut then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var decisionTaskTimedOutEventAttributes: SWFClientTypes.DecisionTaskTimedOutEventAttributes?
        /// The system generated ID of the event. This ID uniquely identifies the event with in the workflow execution history.
        /// This member is required.
        public var eventId: Swift.Int
        /// The date and time when the event occurred.
        /// This member is required.
        public var eventTimestamp: ClientRuntime.Date?
        /// The type of the history event.
        /// This member is required.
        public var eventType: SWFClientTypes.EventType?
        /// If the event is of type ExternalWorkflowExecutionCancelRequested then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var externalWorkflowExecutionCancelRequestedEventAttributes: SWFClientTypes.ExternalWorkflowExecutionCancelRequestedEventAttributes?
        /// If the event is of type ExternalWorkflowExecutionSignaled then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var externalWorkflowExecutionSignaledEventAttributes: SWFClientTypes.ExternalWorkflowExecutionSignaledEventAttributes?
        /// If the event is of type FailWorkflowExecutionFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var failWorkflowExecutionFailedEventAttributes: SWFClientTypes.FailWorkflowExecutionFailedEventAttributes?
        /// Provides the details of the LambdaFunctionCompleted event. It isn't set for other event types.
        public var lambdaFunctionCompletedEventAttributes: SWFClientTypes.LambdaFunctionCompletedEventAttributes?
        /// Provides the details of the LambdaFunctionFailed event. It isn't set for other event types.
        public var lambdaFunctionFailedEventAttributes: SWFClientTypes.LambdaFunctionFailedEventAttributes?
        /// Provides the details of the LambdaFunctionScheduled event. It isn't set for other event types.
        public var lambdaFunctionScheduledEventAttributes: SWFClientTypes.LambdaFunctionScheduledEventAttributes?
        /// Provides the details of the LambdaFunctionStarted event. It isn't set for other event types.
        public var lambdaFunctionStartedEventAttributes: SWFClientTypes.LambdaFunctionStartedEventAttributes?
        /// Provides the details of the LambdaFunctionTimedOut event. It isn't set for other event types.
        public var lambdaFunctionTimedOutEventAttributes: SWFClientTypes.LambdaFunctionTimedOutEventAttributes?
        /// If the event is of type MarkerRecorded then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var markerRecordedEventAttributes: SWFClientTypes.MarkerRecordedEventAttributes?
        /// If the event is of type DecisionTaskFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var recordMarkerFailedEventAttributes: SWFClientTypes.RecordMarkerFailedEventAttributes?
        /// If the event is of type RequestCancelActivityTaskFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var requestCancelActivityTaskFailedEventAttributes: SWFClientTypes.RequestCancelActivityTaskFailedEventAttributes?
        /// If the event is of type RequestCancelExternalWorkflowExecutionFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var requestCancelExternalWorkflowExecutionFailedEventAttributes: SWFClientTypes.RequestCancelExternalWorkflowExecutionFailedEventAttributes?
        /// If the event is of type RequestCancelExternalWorkflowExecutionInitiated then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var requestCancelExternalWorkflowExecutionInitiatedEventAttributes: SWFClientTypes.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes?
        /// If the event is of type ScheduleActivityTaskFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var scheduleActivityTaskFailedEventAttributes: SWFClientTypes.ScheduleActivityTaskFailedEventAttributes?
        /// Provides the details of the ScheduleLambdaFunctionFailed event. It isn't set for other event types.
        public var scheduleLambdaFunctionFailedEventAttributes: SWFClientTypes.ScheduleLambdaFunctionFailedEventAttributes?
        /// If the event is of type SignalExternalWorkflowExecutionFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var signalExternalWorkflowExecutionFailedEventAttributes: SWFClientTypes.SignalExternalWorkflowExecutionFailedEventAttributes?
        /// If the event is of type SignalExternalWorkflowExecutionInitiated then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var signalExternalWorkflowExecutionInitiatedEventAttributes: SWFClientTypes.SignalExternalWorkflowExecutionInitiatedEventAttributes?
        /// If the event is of type StartChildWorkflowExecutionFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var startChildWorkflowExecutionFailedEventAttributes: SWFClientTypes.StartChildWorkflowExecutionFailedEventAttributes?
        /// If the event is of type StartChildWorkflowExecutionInitiated then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var startChildWorkflowExecutionInitiatedEventAttributes: SWFClientTypes.StartChildWorkflowExecutionInitiatedEventAttributes?
        /// Provides the details of the StartLambdaFunctionFailed event. It isn't set for other event types.
        public var startLambdaFunctionFailedEventAttributes: SWFClientTypes.StartLambdaFunctionFailedEventAttributes?
        /// If the event is of type StartTimerFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var startTimerFailedEventAttributes: SWFClientTypes.StartTimerFailedEventAttributes?
        /// If the event is of type TimerCanceled then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var timerCanceledEventAttributes: SWFClientTypes.TimerCanceledEventAttributes?
        /// If the event is of type TimerFired then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var timerFiredEventAttributes: SWFClientTypes.TimerFiredEventAttributes?
        /// If the event is of type TimerStarted then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var timerStartedEventAttributes: SWFClientTypes.TimerStartedEventAttributes?
        /// If the event is of type WorkflowExecutionCancelRequested then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var workflowExecutionCancelRequestedEventAttributes: SWFClientTypes.WorkflowExecutionCancelRequestedEventAttributes?
        /// If the event is of type WorkflowExecutionCanceled then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var workflowExecutionCanceledEventAttributes: SWFClientTypes.WorkflowExecutionCanceledEventAttributes?
        /// If the event is of type WorkflowExecutionCompleted then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var workflowExecutionCompletedEventAttributes: SWFClientTypes.WorkflowExecutionCompletedEventAttributes?
        /// If the event is of type WorkflowExecutionContinuedAsNew then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var workflowExecutionContinuedAsNewEventAttributes: SWFClientTypes.WorkflowExecutionContinuedAsNewEventAttributes?
        /// If the event is of type WorkflowExecutionFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var workflowExecutionFailedEventAttributes: SWFClientTypes.WorkflowExecutionFailedEventAttributes?
        /// If the event is of type WorkflowExecutionSignaled then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var workflowExecutionSignaledEventAttributes: SWFClientTypes.WorkflowExecutionSignaledEventAttributes?
        /// If the event is of type WorkflowExecutionStarted then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var workflowExecutionStartedEventAttributes: SWFClientTypes.WorkflowExecutionStartedEventAttributes?
        /// If the event is of type WorkflowExecutionTerminated then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var workflowExecutionTerminatedEventAttributes: SWFClientTypes.WorkflowExecutionTerminatedEventAttributes?
        /// If the event is of type WorkflowExecutionTimedOut then this member is set and provides detailed information about the event. It isn't set for other event types.
        public var workflowExecutionTimedOutEventAttributes: SWFClientTypes.WorkflowExecutionTimedOutEventAttributes?

        public init (
            activityTaskCancelRequestedEventAttributes: SWFClientTypes.ActivityTaskCancelRequestedEventAttributes? = nil,
            activityTaskCanceledEventAttributes: SWFClientTypes.ActivityTaskCanceledEventAttributes? = nil,
            activityTaskCompletedEventAttributes: SWFClientTypes.ActivityTaskCompletedEventAttributes? = nil,
            activityTaskFailedEventAttributes: SWFClientTypes.ActivityTaskFailedEventAttributes? = nil,
            activityTaskScheduledEventAttributes: SWFClientTypes.ActivityTaskScheduledEventAttributes? = nil,
            activityTaskStartedEventAttributes: SWFClientTypes.ActivityTaskStartedEventAttributes? = nil,
            activityTaskTimedOutEventAttributes: SWFClientTypes.ActivityTaskTimedOutEventAttributes? = nil,
            cancelTimerFailedEventAttributes: SWFClientTypes.CancelTimerFailedEventAttributes? = nil,
            cancelWorkflowExecutionFailedEventAttributes: SWFClientTypes.CancelWorkflowExecutionFailedEventAttributes? = nil,
            childWorkflowExecutionCanceledEventAttributes: SWFClientTypes.ChildWorkflowExecutionCanceledEventAttributes? = nil,
            childWorkflowExecutionCompletedEventAttributes: SWFClientTypes.ChildWorkflowExecutionCompletedEventAttributes? = nil,
            childWorkflowExecutionFailedEventAttributes: SWFClientTypes.ChildWorkflowExecutionFailedEventAttributes? = nil,
            childWorkflowExecutionStartedEventAttributes: SWFClientTypes.ChildWorkflowExecutionStartedEventAttributes? = nil,
            childWorkflowExecutionTerminatedEventAttributes: SWFClientTypes.ChildWorkflowExecutionTerminatedEventAttributes? = nil,
            childWorkflowExecutionTimedOutEventAttributes: SWFClientTypes.ChildWorkflowExecutionTimedOutEventAttributes? = nil,
            completeWorkflowExecutionFailedEventAttributes: SWFClientTypes.CompleteWorkflowExecutionFailedEventAttributes? = nil,
            continueAsNewWorkflowExecutionFailedEventAttributes: SWFClientTypes.ContinueAsNewWorkflowExecutionFailedEventAttributes? = nil,
            decisionTaskCompletedEventAttributes: SWFClientTypes.DecisionTaskCompletedEventAttributes? = nil,
            decisionTaskScheduledEventAttributes: SWFClientTypes.DecisionTaskScheduledEventAttributes? = nil,
            decisionTaskStartedEventAttributes: SWFClientTypes.DecisionTaskStartedEventAttributes? = nil,
            decisionTaskTimedOutEventAttributes: SWFClientTypes.DecisionTaskTimedOutEventAttributes? = nil,
            eventId: Swift.Int = 0,
            eventTimestamp: ClientRuntime.Date? = nil,
            eventType: SWFClientTypes.EventType? = nil,
            externalWorkflowExecutionCancelRequestedEventAttributes: SWFClientTypes.ExternalWorkflowExecutionCancelRequestedEventAttributes? = nil,
            externalWorkflowExecutionSignaledEventAttributes: SWFClientTypes.ExternalWorkflowExecutionSignaledEventAttributes? = nil,
            failWorkflowExecutionFailedEventAttributes: SWFClientTypes.FailWorkflowExecutionFailedEventAttributes? = nil,
            lambdaFunctionCompletedEventAttributes: SWFClientTypes.LambdaFunctionCompletedEventAttributes? = nil,
            lambdaFunctionFailedEventAttributes: SWFClientTypes.LambdaFunctionFailedEventAttributes? = nil,
            lambdaFunctionScheduledEventAttributes: SWFClientTypes.LambdaFunctionScheduledEventAttributes? = nil,
            lambdaFunctionStartedEventAttributes: SWFClientTypes.LambdaFunctionStartedEventAttributes? = nil,
            lambdaFunctionTimedOutEventAttributes: SWFClientTypes.LambdaFunctionTimedOutEventAttributes? = nil,
            markerRecordedEventAttributes: SWFClientTypes.MarkerRecordedEventAttributes? = nil,
            recordMarkerFailedEventAttributes: SWFClientTypes.RecordMarkerFailedEventAttributes? = nil,
            requestCancelActivityTaskFailedEventAttributes: SWFClientTypes.RequestCancelActivityTaskFailedEventAttributes? = nil,
            requestCancelExternalWorkflowExecutionFailedEventAttributes: SWFClientTypes.RequestCancelExternalWorkflowExecutionFailedEventAttributes? = nil,
            requestCancelExternalWorkflowExecutionInitiatedEventAttributes: SWFClientTypes.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes? = nil,
            scheduleActivityTaskFailedEventAttributes: SWFClientTypes.ScheduleActivityTaskFailedEventAttributes? = nil,
            scheduleLambdaFunctionFailedEventAttributes: SWFClientTypes.ScheduleLambdaFunctionFailedEventAttributes? = nil,
            signalExternalWorkflowExecutionFailedEventAttributes: SWFClientTypes.SignalExternalWorkflowExecutionFailedEventAttributes? = nil,
            signalExternalWorkflowExecutionInitiatedEventAttributes: SWFClientTypes.SignalExternalWorkflowExecutionInitiatedEventAttributes? = nil,
            startChildWorkflowExecutionFailedEventAttributes: SWFClientTypes.StartChildWorkflowExecutionFailedEventAttributes? = nil,
            startChildWorkflowExecutionInitiatedEventAttributes: SWFClientTypes.StartChildWorkflowExecutionInitiatedEventAttributes? = nil,
            startLambdaFunctionFailedEventAttributes: SWFClientTypes.StartLambdaFunctionFailedEventAttributes? = nil,
            startTimerFailedEventAttributes: SWFClientTypes.StartTimerFailedEventAttributes? = nil,
            timerCanceledEventAttributes: SWFClientTypes.TimerCanceledEventAttributes? = nil,
            timerFiredEventAttributes: SWFClientTypes.TimerFiredEventAttributes? = nil,
            timerStartedEventAttributes: SWFClientTypes.TimerStartedEventAttributes? = nil,
            workflowExecutionCancelRequestedEventAttributes: SWFClientTypes.WorkflowExecutionCancelRequestedEventAttributes? = nil,
            workflowExecutionCanceledEventAttributes: SWFClientTypes.WorkflowExecutionCanceledEventAttributes? = nil,
            workflowExecutionCompletedEventAttributes: SWFClientTypes.WorkflowExecutionCompletedEventAttributes? = nil,
            workflowExecutionContinuedAsNewEventAttributes: SWFClientTypes.WorkflowExecutionContinuedAsNewEventAttributes? = nil,
            workflowExecutionFailedEventAttributes: SWFClientTypes.WorkflowExecutionFailedEventAttributes? = nil,
            workflowExecutionSignaledEventAttributes: SWFClientTypes.WorkflowExecutionSignaledEventAttributes? = nil,
            workflowExecutionStartedEventAttributes: SWFClientTypes.WorkflowExecutionStartedEventAttributes? = nil,
            workflowExecutionTerminatedEventAttributes: SWFClientTypes.WorkflowExecutionTerminatedEventAttributes? = nil,
            workflowExecutionTimedOutEventAttributes: SWFClientTypes.WorkflowExecutionTimedOutEventAttributes? = nil
        )
        {
            self.activityTaskCancelRequestedEventAttributes = activityTaskCancelRequestedEventAttributes
            self.activityTaskCanceledEventAttributes = activityTaskCanceledEventAttributes
            self.activityTaskCompletedEventAttributes = activityTaskCompletedEventAttributes
            self.activityTaskFailedEventAttributes = activityTaskFailedEventAttributes
            self.activityTaskScheduledEventAttributes = activityTaskScheduledEventAttributes
            self.activityTaskStartedEventAttributes = activityTaskStartedEventAttributes
            self.activityTaskTimedOutEventAttributes = activityTaskTimedOutEventAttributes
            self.cancelTimerFailedEventAttributes = cancelTimerFailedEventAttributes
            self.cancelWorkflowExecutionFailedEventAttributes = cancelWorkflowExecutionFailedEventAttributes
            self.childWorkflowExecutionCanceledEventAttributes = childWorkflowExecutionCanceledEventAttributes
            self.childWorkflowExecutionCompletedEventAttributes = childWorkflowExecutionCompletedEventAttributes
            self.childWorkflowExecutionFailedEventAttributes = childWorkflowExecutionFailedEventAttributes
            self.childWorkflowExecutionStartedEventAttributes = childWorkflowExecutionStartedEventAttributes
            self.childWorkflowExecutionTerminatedEventAttributes = childWorkflowExecutionTerminatedEventAttributes
            self.childWorkflowExecutionTimedOutEventAttributes = childWorkflowExecutionTimedOutEventAttributes
            self.completeWorkflowExecutionFailedEventAttributes = completeWorkflowExecutionFailedEventAttributes
            self.continueAsNewWorkflowExecutionFailedEventAttributes = continueAsNewWorkflowExecutionFailedEventAttributes
            self.decisionTaskCompletedEventAttributes = decisionTaskCompletedEventAttributes
            self.decisionTaskScheduledEventAttributes = decisionTaskScheduledEventAttributes
            self.decisionTaskStartedEventAttributes = decisionTaskStartedEventAttributes
            self.decisionTaskTimedOutEventAttributes = decisionTaskTimedOutEventAttributes
            self.eventId = eventId
            self.eventTimestamp = eventTimestamp
            self.eventType = eventType
            self.externalWorkflowExecutionCancelRequestedEventAttributes = externalWorkflowExecutionCancelRequestedEventAttributes
            self.externalWorkflowExecutionSignaledEventAttributes = externalWorkflowExecutionSignaledEventAttributes
            self.failWorkflowExecutionFailedEventAttributes = failWorkflowExecutionFailedEventAttributes
            self.lambdaFunctionCompletedEventAttributes = lambdaFunctionCompletedEventAttributes
            self.lambdaFunctionFailedEventAttributes = lambdaFunctionFailedEventAttributes
            self.lambdaFunctionScheduledEventAttributes = lambdaFunctionScheduledEventAttributes
            self.lambdaFunctionStartedEventAttributes = lambdaFunctionStartedEventAttributes
            self.lambdaFunctionTimedOutEventAttributes = lambdaFunctionTimedOutEventAttributes
            self.markerRecordedEventAttributes = markerRecordedEventAttributes
            self.recordMarkerFailedEventAttributes = recordMarkerFailedEventAttributes
            self.requestCancelActivityTaskFailedEventAttributes = requestCancelActivityTaskFailedEventAttributes
            self.requestCancelExternalWorkflowExecutionFailedEventAttributes = requestCancelExternalWorkflowExecutionFailedEventAttributes
            self.requestCancelExternalWorkflowExecutionInitiatedEventAttributes = requestCancelExternalWorkflowExecutionInitiatedEventAttributes
            self.scheduleActivityTaskFailedEventAttributes = scheduleActivityTaskFailedEventAttributes
            self.scheduleLambdaFunctionFailedEventAttributes = scheduleLambdaFunctionFailedEventAttributes
            self.signalExternalWorkflowExecutionFailedEventAttributes = signalExternalWorkflowExecutionFailedEventAttributes
            self.signalExternalWorkflowExecutionInitiatedEventAttributes = signalExternalWorkflowExecutionInitiatedEventAttributes
            self.startChildWorkflowExecutionFailedEventAttributes = startChildWorkflowExecutionFailedEventAttributes
            self.startChildWorkflowExecutionInitiatedEventAttributes = startChildWorkflowExecutionInitiatedEventAttributes
            self.startLambdaFunctionFailedEventAttributes = startLambdaFunctionFailedEventAttributes
            self.startTimerFailedEventAttributes = startTimerFailedEventAttributes
            self.timerCanceledEventAttributes = timerCanceledEventAttributes
            self.timerFiredEventAttributes = timerFiredEventAttributes
            self.timerStartedEventAttributes = timerStartedEventAttributes
            self.workflowExecutionCancelRequestedEventAttributes = workflowExecutionCancelRequestedEventAttributes
            self.workflowExecutionCanceledEventAttributes = workflowExecutionCanceledEventAttributes
            self.workflowExecutionCompletedEventAttributes = workflowExecutionCompletedEventAttributes
            self.workflowExecutionContinuedAsNewEventAttributes = workflowExecutionContinuedAsNewEventAttributes
            self.workflowExecutionFailedEventAttributes = workflowExecutionFailedEventAttributes
            self.workflowExecutionSignaledEventAttributes = workflowExecutionSignaledEventAttributes
            self.workflowExecutionStartedEventAttributes = workflowExecutionStartedEventAttributes
            self.workflowExecutionTerminatedEventAttributes = workflowExecutionTerminatedEventAttributes
            self.workflowExecutionTimedOutEventAttributes = workflowExecutionTimedOutEventAttributes
        }
    }

}

extension SWFClientTypes.LambdaFunctionCompletedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case result
        case scheduledEventId
        case startedEventId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let result = self.result {
            try encodeContainer.encode(result, forKey: .result)
        }
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scheduledEventId) ?? 0
        scheduledEventId = scheduledEventIdDecoded
        let startedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedEventId) ?? 0
        startedEventId = startedEventIdDecoded
        let resultDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .result)
        result = resultDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the LambdaFunctionCompleted event. It isn't set for other event types.
    public struct LambdaFunctionCompletedEventAttributes: Swift.Equatable {
        /// The results of the Lambda task.
        public var result: Swift.String?
        /// The ID of the LambdaFunctionScheduled event that was recorded when this Lambda task was scheduled. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
        /// This member is required.
        public var scheduledEventId: Swift.Int
        /// The ID of the LambdaFunctionStarted event recorded when this activity task started. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
        /// This member is required.
        public var startedEventId: Swift.Int

        public init (
            result: Swift.String? = nil,
            scheduledEventId: Swift.Int = 0,
            startedEventId: Swift.Int = 0
        )
        {
            self.result = result
            self.scheduledEventId = scheduledEventId
            self.startedEventId = startedEventId
        }
    }

}

extension SWFClientTypes.LambdaFunctionFailedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details
        case reason
        case scheduledEventId
        case startedEventId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = self.details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scheduledEventId) ?? 0
        scheduledEventId = scheduledEventIdDecoded
        let startedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedEventId) ?? 0
        startedEventId = startedEventIdDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .details)
        details = detailsDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the LambdaFunctionFailed event. It isn't set for other event types.
    public struct LambdaFunctionFailedEventAttributes: Swift.Equatable {
        /// The details of the failure.
        public var details: Swift.String?
        /// The reason provided for the failure.
        public var reason: Swift.String?
        /// The ID of the LambdaFunctionScheduled event that was recorded when this activity task was scheduled. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
        /// This member is required.
        public var scheduledEventId: Swift.Int
        /// The ID of the LambdaFunctionStarted event recorded when this activity task started. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
        /// This member is required.
        public var startedEventId: Swift.Int

        public init (
            details: Swift.String? = nil,
            reason: Swift.String? = nil,
            scheduledEventId: Swift.Int = 0,
            startedEventId: Swift.Int = 0
        )
        {
            self.details = details
            self.reason = reason
            self.scheduledEventId = scheduledEventId
            self.startedEventId = startedEventId
        }
    }

}

extension SWFClientTypes.LambdaFunctionScheduledEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case control
        case decisionTaskCompletedEventId
        case id
        case input
        case name
        case startToCloseTimeout
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let control = self.control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let startToCloseTimeout = self.startToCloseTimeout {
            try encodeContainer.encode(startToCloseTimeout, forKey: .startToCloseTimeout)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let controlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .control)
        control = controlDecoded
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
        let startToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startToCloseTimeout)
        startToCloseTimeout = startToCloseTimeoutDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the LambdaFunctionScheduled event. It isn't set for other event types.
    public struct LambdaFunctionScheduledEventAttributes: Swift.Equatable {
        /// Data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the Lambda task.
        public var control: Swift.String?
        /// The ID of the LambdaFunctionCompleted event corresponding to the decision that resulted in scheduling this activity task. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int
        /// The unique ID of the Lambda task.
        /// This member is required.
        public var id: Swift.String?
        /// The input provided to the Lambda task.
        public var input: Swift.String?
        /// The name of the Lambda function.
        /// This member is required.
        public var name: Swift.String?
        /// The maximum amount of time a worker can take to process the Lambda task.
        public var startToCloseTimeout: Swift.String?

        public init (
            control: Swift.String? = nil,
            decisionTaskCompletedEventId: Swift.Int = 0,
            id: Swift.String? = nil,
            input: Swift.String? = nil,
            name: Swift.String? = nil,
            startToCloseTimeout: Swift.String? = nil
        )
        {
            self.control = control
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.id = id
            self.input = input
            self.name = name
            self.startToCloseTimeout = startToCloseTimeout
        }
    }

}

extension SWFClientTypes.LambdaFunctionStartedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scheduledEventId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scheduledEventId) ?? 0
        scheduledEventId = scheduledEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the LambdaFunctionStarted event. It isn't set for other event types.
    public struct LambdaFunctionStartedEventAttributes: Swift.Equatable {
        /// The ID of the LambdaFunctionScheduled event that was recorded when this activity task was scheduled. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
        /// This member is required.
        public var scheduledEventId: Swift.Int

        public init (
            scheduledEventId: Swift.Int = 0
        )
        {
            self.scheduledEventId = scheduledEventId
        }
    }

}

extension SWFClientTypes.LambdaFunctionTimedOutEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scheduledEventId
        case startedEventId
        case timeoutType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
        if let timeoutType = self.timeoutType {
            try encodeContainer.encode(timeoutType.rawValue, forKey: .timeoutType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scheduledEventId) ?? 0
        scheduledEventId = scheduledEventIdDecoded
        let startedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedEventId) ?? 0
        startedEventId = startedEventIdDecoded
        let timeoutTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.LambdaFunctionTimeoutType.self, forKey: .timeoutType)
        timeoutType = timeoutTypeDecoded
    }
}

extension SWFClientTypes {
    /// Provides details of the LambdaFunctionTimedOut event.
    public struct LambdaFunctionTimedOutEventAttributes: Swift.Equatable {
        /// The ID of the LambdaFunctionScheduled event that was recorded when this activity task was scheduled. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
        /// This member is required.
        public var scheduledEventId: Swift.Int
        /// The ID of the ActivityTaskStarted event that was recorded when this activity task started. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
        /// This member is required.
        public var startedEventId: Swift.Int
        /// The type of the timeout that caused this event.
        public var timeoutType: SWFClientTypes.LambdaFunctionTimeoutType?

        public init (
            scheduledEventId: Swift.Int = 0,
            startedEventId: Swift.Int = 0,
            timeoutType: SWFClientTypes.LambdaFunctionTimeoutType? = nil
        )
        {
            self.scheduledEventId = scheduledEventId
            self.startedEventId = startedEventId
            self.timeoutType = timeoutType
        }
    }

}

extension SWFClientTypes {
    public enum LambdaFunctionTimeoutType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case startToClose
        case sdkUnknown(Swift.String)

        public static var allCases: [LambdaFunctionTimeoutType] {
            return [
                .startToClose,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .startToClose: return "START_TO_CLOSE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LambdaFunctionTimeoutType(rawValue: rawValue) ?? LambdaFunctionTimeoutType.sdkUnknown(rawValue)
        }
    }
}

extension LimitExceededFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: LimitExceededFaultBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Returned by any operation if a system imposed limitation has been reached. To address this fault you should either clean up unused resources or increase the limit by contacting AWS.
public struct LimitExceededFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description that may help with diagnosing the cause of the fault.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension LimitExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListActivityTypesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case maximumPageSize
        case name
        case nextPageToken
        case registrationStatus
        case reverseOrder
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if maximumPageSize != 0 {
            try encodeContainer.encode(maximumPageSize, forKey: .maximumPageSize)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let nextPageToken = self.nextPageToken {
            try encodeContainer.encode(nextPageToken, forKey: .nextPageToken)
        }
        if let registrationStatus = self.registrationStatus {
            try encodeContainer.encode(registrationStatus.rawValue, forKey: .registrationStatus)
        }
        if reverseOrder != false {
            try encodeContainer.encode(reverseOrder, forKey: .reverseOrder)
        }
    }
}

extension ListActivityTypesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListActivityTypesInput: Swift.Equatable {
    /// The name of the domain in which the activity types have been registered.
    /// This member is required.
    public var domain: Swift.String?
    /// The maximum number of results that are returned per call. Use nextPageToken to obtain further pages of results.
    public var maximumPageSize: Swift.Int
    /// If specified, only lists the activity types that have this name.
    public var name: Swift.String?
    /// If NextPageToken is returned there are more results available. The value of NextPageToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 60 seconds. Using an expired pagination token will return a 400 error: "Specified token has exceeded its maximum lifetime". The configured maximumPageSize determines how many results can be returned in a single call.
    public var nextPageToken: Swift.String?
    /// Specifies the registration status of the activity types to list.
    /// This member is required.
    public var registrationStatus: SWFClientTypes.RegistrationStatus?
    /// When set to true, returns the results in reverse order. By default, the results are returned in ascending alphabetical order by name of the activity types.
    public var reverseOrder: Swift.Bool

    public init (
        domain: Swift.String? = nil,
        maximumPageSize: Swift.Int = 0,
        name: Swift.String? = nil,
        nextPageToken: Swift.String? = nil,
        registrationStatus: SWFClientTypes.RegistrationStatus? = nil,
        reverseOrder: Swift.Bool = false
    )
    {
        self.domain = domain
        self.maximumPageSize = maximumPageSize
        self.name = name
        self.nextPageToken = nextPageToken
        self.registrationStatus = registrationStatus
        self.reverseOrder = reverseOrder
    }
}

struct ListActivityTypesInputBody: Swift.Equatable {
    let domain: Swift.String?
    let name: Swift.String?
    let registrationStatus: SWFClientTypes.RegistrationStatus?
    let nextPageToken: Swift.String?
    let maximumPageSize: Swift.Int
    let reverseOrder: Swift.Bool
}

extension ListActivityTypesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case maximumPageSize
        case name
        case nextPageToken
        case registrationStatus
        case reverseOrder
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let registrationStatusDecoded = try containerValues.decodeIfPresent(SWFClientTypes.RegistrationStatus.self, forKey: .registrationStatus)
        registrationStatus = registrationStatusDecoded
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let maximumPageSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumPageSize) ?? 0
        maximumPageSize = maximumPageSizeDecoded
        let reverseOrderDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .reverseOrder) ?? false
        reverseOrder = reverseOrderDecoded
    }
}

extension ListActivityTypesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListActivityTypesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListActivityTypesOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListActivityTypesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListActivityTypesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextPageToken = output.nextPageToken
            self.typeInfos = output.typeInfos
        } else {
            self.nextPageToken = nil
            self.typeInfos = nil
        }
    }
}

/// Contains a paginated list of activity type information structures.
public struct ListActivityTypesOutputResponse: Swift.Equatable {
    /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
    public var nextPageToken: Swift.String?
    /// List of activity type information.
    /// This member is required.
    public var typeInfos: [SWFClientTypes.ActivityTypeInfo]?

    public init (
        nextPageToken: Swift.String? = nil,
        typeInfos: [SWFClientTypes.ActivityTypeInfo]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.typeInfos = typeInfos
    }
}

struct ListActivityTypesOutputResponseBody: Swift.Equatable {
    let typeInfos: [SWFClientTypes.ActivityTypeInfo]?
    let nextPageToken: Swift.String?
}

extension ListActivityTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextPageToken
        case typeInfos
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeInfosContainer = try containerValues.decodeIfPresent([SWFClientTypes.ActivityTypeInfo?].self, forKey: .typeInfos)
        var typeInfosDecoded0:[SWFClientTypes.ActivityTypeInfo]? = nil
        if let typeInfosContainer = typeInfosContainer {
            typeInfosDecoded0 = [SWFClientTypes.ActivityTypeInfo]()
            for structure0 in typeInfosContainer {
                if let structure0 = structure0 {
                    typeInfosDecoded0?.append(structure0)
                }
            }
        }
        typeInfos = typeInfosDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension ListClosedWorkflowExecutionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case closeStatusFilter
        case closeTimeFilter
        case domain
        case executionFilter
        case maximumPageSize
        case nextPageToken
        case reverseOrder
        case startTimeFilter
        case tagFilter
        case typeFilter
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let closeStatusFilter = self.closeStatusFilter {
            try encodeContainer.encode(closeStatusFilter, forKey: .closeStatusFilter)
        }
        if let closeTimeFilter = self.closeTimeFilter {
            try encodeContainer.encode(closeTimeFilter, forKey: .closeTimeFilter)
        }
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let executionFilter = self.executionFilter {
            try encodeContainer.encode(executionFilter, forKey: .executionFilter)
        }
        if maximumPageSize != 0 {
            try encodeContainer.encode(maximumPageSize, forKey: .maximumPageSize)
        }
        if let nextPageToken = self.nextPageToken {
            try encodeContainer.encode(nextPageToken, forKey: .nextPageToken)
        }
        if reverseOrder != false {
            try encodeContainer.encode(reverseOrder, forKey: .reverseOrder)
        }
        if let startTimeFilter = self.startTimeFilter {
            try encodeContainer.encode(startTimeFilter, forKey: .startTimeFilter)
        }
        if let tagFilter = self.tagFilter {
            try encodeContainer.encode(tagFilter, forKey: .tagFilter)
        }
        if let typeFilter = self.typeFilter {
            try encodeContainer.encode(typeFilter, forKey: .typeFilter)
        }
    }
}

extension ListClosedWorkflowExecutionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListClosedWorkflowExecutionsInput: Swift.Equatable {
    /// If specified, only workflow executions that match this close status are listed. For example, if TERMINATED is specified, then only TERMINATED workflow executions are listed. closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
    public var closeStatusFilter: SWFClientTypes.CloseStatusFilter?
    /// If specified, the workflow executions are included in the returned results based on whether their close times are within the range specified by this filter. Also, if this parameter is specified, the returned results are ordered by their close times. startTimeFilter and closeTimeFilter are mutually exclusive. You must specify one of these in a request but not both.
    public var closeTimeFilter: SWFClientTypes.ExecutionTimeFilter?
    /// The name of the domain that contains the workflow executions to list.
    /// This member is required.
    public var domain: Swift.String?
    /// If specified, only workflow executions matching the workflow ID specified in the filter are returned. closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
    public var executionFilter: SWFClientTypes.WorkflowExecutionFilter?
    /// The maximum number of results that are returned per call. Use nextPageToken to obtain further pages of results.
    public var maximumPageSize: Swift.Int
    /// If NextPageToken is returned there are more results available. The value of NextPageToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 60 seconds. Using an expired pagination token will return a 400 error: "Specified token has exceeded its maximum lifetime". The configured maximumPageSize determines how many results can be returned in a single call.
    public var nextPageToken: Swift.String?
    /// When set to true, returns the results in reverse order. By default the results are returned in descending order of the start or the close time of the executions.
    public var reverseOrder: Swift.Bool
    /// If specified, the workflow executions are included in the returned results based on whether their start times are within the range specified by this filter. Also, if this parameter is specified, the returned results are ordered by their start times. startTimeFilter and closeTimeFilter are mutually exclusive. You must specify one of these in a request but not both.
    public var startTimeFilter: SWFClientTypes.ExecutionTimeFilter?
    /// If specified, only executions that have the matching tag are listed. closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
    public var tagFilter: SWFClientTypes.TagFilter?
    /// If specified, only executions of the type specified in the filter are returned. closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
    public var typeFilter: SWFClientTypes.WorkflowTypeFilter?

    public init (
        closeStatusFilter: SWFClientTypes.CloseStatusFilter? = nil,
        closeTimeFilter: SWFClientTypes.ExecutionTimeFilter? = nil,
        domain: Swift.String? = nil,
        executionFilter: SWFClientTypes.WorkflowExecutionFilter? = nil,
        maximumPageSize: Swift.Int = 0,
        nextPageToken: Swift.String? = nil,
        reverseOrder: Swift.Bool = false,
        startTimeFilter: SWFClientTypes.ExecutionTimeFilter? = nil,
        tagFilter: SWFClientTypes.TagFilter? = nil,
        typeFilter: SWFClientTypes.WorkflowTypeFilter? = nil
    )
    {
        self.closeStatusFilter = closeStatusFilter
        self.closeTimeFilter = closeTimeFilter
        self.domain = domain
        self.executionFilter = executionFilter
        self.maximumPageSize = maximumPageSize
        self.nextPageToken = nextPageToken
        self.reverseOrder = reverseOrder
        self.startTimeFilter = startTimeFilter
        self.tagFilter = tagFilter
        self.typeFilter = typeFilter
    }
}

struct ListClosedWorkflowExecutionsInputBody: Swift.Equatable {
    let domain: Swift.String?
    let startTimeFilter: SWFClientTypes.ExecutionTimeFilter?
    let closeTimeFilter: SWFClientTypes.ExecutionTimeFilter?
    let executionFilter: SWFClientTypes.WorkflowExecutionFilter?
    let closeStatusFilter: SWFClientTypes.CloseStatusFilter?
    let typeFilter: SWFClientTypes.WorkflowTypeFilter?
    let tagFilter: SWFClientTypes.TagFilter?
    let nextPageToken: Swift.String?
    let maximumPageSize: Swift.Int
    let reverseOrder: Swift.Bool
}

extension ListClosedWorkflowExecutionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case closeStatusFilter
        case closeTimeFilter
        case domain
        case executionFilter
        case maximumPageSize
        case nextPageToken
        case reverseOrder
        case startTimeFilter
        case tagFilter
        case typeFilter
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let startTimeFilterDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ExecutionTimeFilter.self, forKey: .startTimeFilter)
        startTimeFilter = startTimeFilterDecoded
        let closeTimeFilterDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ExecutionTimeFilter.self, forKey: .closeTimeFilter)
        closeTimeFilter = closeTimeFilterDecoded
        let executionFilterDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecutionFilter.self, forKey: .executionFilter)
        executionFilter = executionFilterDecoded
        let closeStatusFilterDecoded = try containerValues.decodeIfPresent(SWFClientTypes.CloseStatusFilter.self, forKey: .closeStatusFilter)
        closeStatusFilter = closeStatusFilterDecoded
        let typeFilterDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowTypeFilter.self, forKey: .typeFilter)
        typeFilter = typeFilterDecoded
        let tagFilterDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TagFilter.self, forKey: .tagFilter)
        tagFilter = tagFilterDecoded
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let maximumPageSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumPageSize) ?? 0
        maximumPageSize = maximumPageSizeDecoded
        let reverseOrderDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .reverseOrder) ?? false
        reverseOrder = reverseOrderDecoded
    }
}

extension ListClosedWorkflowExecutionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListClosedWorkflowExecutionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListClosedWorkflowExecutionsOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListClosedWorkflowExecutionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListClosedWorkflowExecutionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.executionInfos = output.executionInfos
            self.nextPageToken = output.nextPageToken
        } else {
            self.executionInfos = nil
            self.nextPageToken = nil
        }
    }
}

/// Contains a paginated list of information about workflow executions.
public struct ListClosedWorkflowExecutionsOutputResponse: Swift.Equatable {
    /// The list of workflow information structures.
    /// This member is required.
    public var executionInfos: [SWFClientTypes.WorkflowExecutionInfo]?
    /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
    public var nextPageToken: Swift.String?

    public init (
        executionInfos: [SWFClientTypes.WorkflowExecutionInfo]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.executionInfos = executionInfos
        self.nextPageToken = nextPageToken
    }
}

struct ListClosedWorkflowExecutionsOutputResponseBody: Swift.Equatable {
    let executionInfos: [SWFClientTypes.WorkflowExecutionInfo]?
    let nextPageToken: Swift.String?
}

extension ListClosedWorkflowExecutionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionInfos
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionInfosContainer = try containerValues.decodeIfPresent([SWFClientTypes.WorkflowExecutionInfo?].self, forKey: .executionInfos)
        var executionInfosDecoded0:[SWFClientTypes.WorkflowExecutionInfo]? = nil
        if let executionInfosContainer = executionInfosContainer {
            executionInfosDecoded0 = [SWFClientTypes.WorkflowExecutionInfo]()
            for structure0 in executionInfosContainer {
                if let structure0 = structure0 {
                    executionInfosDecoded0?.append(structure0)
                }
            }
        }
        executionInfos = executionInfosDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension ListDomainsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maximumPageSize
        case nextPageToken
        case registrationStatus
        case reverseOrder
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maximumPageSize != 0 {
            try encodeContainer.encode(maximumPageSize, forKey: .maximumPageSize)
        }
        if let nextPageToken = self.nextPageToken {
            try encodeContainer.encode(nextPageToken, forKey: .nextPageToken)
        }
        if let registrationStatus = self.registrationStatus {
            try encodeContainer.encode(registrationStatus.rawValue, forKey: .registrationStatus)
        }
        if reverseOrder != false {
            try encodeContainer.encode(reverseOrder, forKey: .reverseOrder)
        }
    }
}

extension ListDomainsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDomainsInput: Swift.Equatable {
    /// The maximum number of results that are returned per call. Use nextPageToken to obtain further pages of results.
    public var maximumPageSize: Swift.Int
    /// If NextPageToken is returned there are more results available. The value of NextPageToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 60 seconds. Using an expired pagination token will return a 400 error: "Specified token has exceeded its maximum lifetime". The configured maximumPageSize determines how many results can be returned in a single call.
    public var nextPageToken: Swift.String?
    /// Specifies the registration status of the domains to list.
    /// This member is required.
    public var registrationStatus: SWFClientTypes.RegistrationStatus?
    /// When set to true, returns the results in reverse order. By default, the results are returned in ascending alphabetical order by name of the domains.
    public var reverseOrder: Swift.Bool

    public init (
        maximumPageSize: Swift.Int = 0,
        nextPageToken: Swift.String? = nil,
        registrationStatus: SWFClientTypes.RegistrationStatus? = nil,
        reverseOrder: Swift.Bool = false
    )
    {
        self.maximumPageSize = maximumPageSize
        self.nextPageToken = nextPageToken
        self.registrationStatus = registrationStatus
        self.reverseOrder = reverseOrder
    }
}

struct ListDomainsInputBody: Swift.Equatable {
    let nextPageToken: Swift.String?
    let registrationStatus: SWFClientTypes.RegistrationStatus?
    let maximumPageSize: Swift.Int
    let reverseOrder: Swift.Bool
}

extension ListDomainsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maximumPageSize
        case nextPageToken
        case registrationStatus
        case reverseOrder
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let registrationStatusDecoded = try containerValues.decodeIfPresent(SWFClientTypes.RegistrationStatus.self, forKey: .registrationStatus)
        registrationStatus = registrationStatusDecoded
        let maximumPageSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumPageSize) ?? 0
        maximumPageSize = maximumPageSizeDecoded
        let reverseOrderDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .reverseOrder) ?? false
        reverseOrder = reverseOrderDecoded
    }
}

extension ListDomainsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDomainsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDomainsOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDomainsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDomainsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainInfos = output.domainInfos
            self.nextPageToken = output.nextPageToken
        } else {
            self.domainInfos = nil
            self.nextPageToken = nil
        }
    }
}

/// Contains a paginated collection of DomainInfo structures.
public struct ListDomainsOutputResponse: Swift.Equatable {
    /// A list of DomainInfo structures.
    /// This member is required.
    public var domainInfos: [SWFClientTypes.DomainInfo]?
    /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
    public var nextPageToken: Swift.String?

    public init (
        domainInfos: [SWFClientTypes.DomainInfo]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.domainInfos = domainInfos
        self.nextPageToken = nextPageToken
    }
}

struct ListDomainsOutputResponseBody: Swift.Equatable {
    let domainInfos: [SWFClientTypes.DomainInfo]?
    let nextPageToken: Swift.String?
}

extension ListDomainsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainInfos
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainInfosContainer = try containerValues.decodeIfPresent([SWFClientTypes.DomainInfo?].self, forKey: .domainInfos)
        var domainInfosDecoded0:[SWFClientTypes.DomainInfo]? = nil
        if let domainInfosContainer = domainInfosContainer {
            domainInfosDecoded0 = [SWFClientTypes.DomainInfo]()
            for structure0 in domainInfosContainer {
                if let structure0 = structure0 {
                    domainInfosDecoded0?.append(structure0)
                }
            }
        }
        domainInfos = domainInfosDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension ListOpenWorkflowExecutionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case executionFilter
        case maximumPageSize
        case nextPageToken
        case reverseOrder
        case startTimeFilter
        case tagFilter
        case typeFilter
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let executionFilter = self.executionFilter {
            try encodeContainer.encode(executionFilter, forKey: .executionFilter)
        }
        if maximumPageSize != 0 {
            try encodeContainer.encode(maximumPageSize, forKey: .maximumPageSize)
        }
        if let nextPageToken = self.nextPageToken {
            try encodeContainer.encode(nextPageToken, forKey: .nextPageToken)
        }
        if reverseOrder != false {
            try encodeContainer.encode(reverseOrder, forKey: .reverseOrder)
        }
        if let startTimeFilter = self.startTimeFilter {
            try encodeContainer.encode(startTimeFilter, forKey: .startTimeFilter)
        }
        if let tagFilter = self.tagFilter {
            try encodeContainer.encode(tagFilter, forKey: .tagFilter)
        }
        if let typeFilter = self.typeFilter {
            try encodeContainer.encode(typeFilter, forKey: .typeFilter)
        }
    }
}

extension ListOpenWorkflowExecutionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListOpenWorkflowExecutionsInput: Swift.Equatable {
    /// The name of the domain that contains the workflow executions to list.
    /// This member is required.
    public var domain: Swift.String?
    /// If specified, only workflow executions matching the workflow ID specified in the filter are returned. executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
    public var executionFilter: SWFClientTypes.WorkflowExecutionFilter?
    /// The maximum number of results that are returned per call. Use nextPageToken to obtain further pages of results.
    public var maximumPageSize: Swift.Int
    /// If NextPageToken is returned there are more results available. The value of NextPageToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 60 seconds. Using an expired pagination token will return a 400 error: "Specified token has exceeded its maximum lifetime". The configured maximumPageSize determines how many results can be returned in a single call.
    public var nextPageToken: Swift.String?
    /// When set to true, returns the results in reverse order. By default the results are returned in descending order of the start time of the executions.
    public var reverseOrder: Swift.Bool
    /// Workflow executions are included in the returned results based on whether their start times are within the range specified by this filter.
    /// This member is required.
    public var startTimeFilter: SWFClientTypes.ExecutionTimeFilter?
    /// If specified, only executions that have the matching tag are listed. executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
    public var tagFilter: SWFClientTypes.TagFilter?
    /// If specified, only executions of the type specified in the filter are returned. executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
    public var typeFilter: SWFClientTypes.WorkflowTypeFilter?

    public init (
        domain: Swift.String? = nil,
        executionFilter: SWFClientTypes.WorkflowExecutionFilter? = nil,
        maximumPageSize: Swift.Int = 0,
        nextPageToken: Swift.String? = nil,
        reverseOrder: Swift.Bool = false,
        startTimeFilter: SWFClientTypes.ExecutionTimeFilter? = nil,
        tagFilter: SWFClientTypes.TagFilter? = nil,
        typeFilter: SWFClientTypes.WorkflowTypeFilter? = nil
    )
    {
        self.domain = domain
        self.executionFilter = executionFilter
        self.maximumPageSize = maximumPageSize
        self.nextPageToken = nextPageToken
        self.reverseOrder = reverseOrder
        self.startTimeFilter = startTimeFilter
        self.tagFilter = tagFilter
        self.typeFilter = typeFilter
    }
}

struct ListOpenWorkflowExecutionsInputBody: Swift.Equatable {
    let domain: Swift.String?
    let startTimeFilter: SWFClientTypes.ExecutionTimeFilter?
    let typeFilter: SWFClientTypes.WorkflowTypeFilter?
    let tagFilter: SWFClientTypes.TagFilter?
    let nextPageToken: Swift.String?
    let maximumPageSize: Swift.Int
    let reverseOrder: Swift.Bool
    let executionFilter: SWFClientTypes.WorkflowExecutionFilter?
}

extension ListOpenWorkflowExecutionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case executionFilter
        case maximumPageSize
        case nextPageToken
        case reverseOrder
        case startTimeFilter
        case tagFilter
        case typeFilter
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let startTimeFilterDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ExecutionTimeFilter.self, forKey: .startTimeFilter)
        startTimeFilter = startTimeFilterDecoded
        let typeFilterDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowTypeFilter.self, forKey: .typeFilter)
        typeFilter = typeFilterDecoded
        let tagFilterDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TagFilter.self, forKey: .tagFilter)
        tagFilter = tagFilterDecoded
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let maximumPageSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumPageSize) ?? 0
        maximumPageSize = maximumPageSizeDecoded
        let reverseOrderDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .reverseOrder) ?? false
        reverseOrder = reverseOrderDecoded
        let executionFilterDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecutionFilter.self, forKey: .executionFilter)
        executionFilter = executionFilterDecoded
    }
}

extension ListOpenWorkflowExecutionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListOpenWorkflowExecutionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListOpenWorkflowExecutionsOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListOpenWorkflowExecutionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListOpenWorkflowExecutionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.executionInfos = output.executionInfos
            self.nextPageToken = output.nextPageToken
        } else {
            self.executionInfos = nil
            self.nextPageToken = nil
        }
    }
}

/// Contains a paginated list of information about workflow executions.
public struct ListOpenWorkflowExecutionsOutputResponse: Swift.Equatable {
    /// The list of workflow information structures.
    /// This member is required.
    public var executionInfos: [SWFClientTypes.WorkflowExecutionInfo]?
    /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
    public var nextPageToken: Swift.String?

    public init (
        executionInfos: [SWFClientTypes.WorkflowExecutionInfo]? = nil,
        nextPageToken: Swift.String? = nil
    )
    {
        self.executionInfos = executionInfos
        self.nextPageToken = nextPageToken
    }
}

struct ListOpenWorkflowExecutionsOutputResponseBody: Swift.Equatable {
    let executionInfos: [SWFClientTypes.WorkflowExecutionInfo]?
    let nextPageToken: Swift.String?
}

extension ListOpenWorkflowExecutionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionInfos
        case nextPageToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionInfosContainer = try containerValues.decodeIfPresent([SWFClientTypes.WorkflowExecutionInfo?].self, forKey: .executionInfos)
        var executionInfosDecoded0:[SWFClientTypes.WorkflowExecutionInfo]? = nil
        if let executionInfosContainer = executionInfosContainer {
            executionInfosDecoded0 = [SWFClientTypes.WorkflowExecutionInfo]()
            for structure0 in executionInfosContainer {
                if let structure0 = structure0 {
                    executionInfosDecoded0?.append(structure0)
                }
            }
        }
        executionInfos = executionInfosDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension ListTagsForResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) for the Amazon SWF domain.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceededFault" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case limitExceededFault(LimitExceededFault)
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// An array of tags associated with the domain.
    public var tags: [SWFClientTypes.ResourceTag]?

    public init (
        tags: [SWFClientTypes.ResourceTag]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [SWFClientTypes.ResourceTag]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([SWFClientTypes.ResourceTag?].self, forKey: .tags)
        var tagsDecoded0:[SWFClientTypes.ResourceTag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SWFClientTypes.ResourceTag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ListWorkflowTypesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case maximumPageSize
        case name
        case nextPageToken
        case registrationStatus
        case reverseOrder
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if maximumPageSize != 0 {
            try encodeContainer.encode(maximumPageSize, forKey: .maximumPageSize)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let nextPageToken = self.nextPageToken {
            try encodeContainer.encode(nextPageToken, forKey: .nextPageToken)
        }
        if let registrationStatus = self.registrationStatus {
            try encodeContainer.encode(registrationStatus.rawValue, forKey: .registrationStatus)
        }
        if reverseOrder != false {
            try encodeContainer.encode(reverseOrder, forKey: .reverseOrder)
        }
    }
}

extension ListWorkflowTypesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListWorkflowTypesInput: Swift.Equatable {
    /// The name of the domain in which the workflow types have been registered.
    /// This member is required.
    public var domain: Swift.String?
    /// The maximum number of results that are returned per call. Use nextPageToken to obtain further pages of results.
    public var maximumPageSize: Swift.Int
    /// If specified, lists the workflow type with this name.
    public var name: Swift.String?
    /// If NextPageToken is returned there are more results available. The value of NextPageToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 60 seconds. Using an expired pagination token will return a 400 error: "Specified token has exceeded its maximum lifetime". The configured maximumPageSize determines how many results can be returned in a single call.
    public var nextPageToken: Swift.String?
    /// Specifies the registration status of the workflow types to list.
    /// This member is required.
    public var registrationStatus: SWFClientTypes.RegistrationStatus?
    /// When set to true, returns the results in reverse order. By default the results are returned in ascending alphabetical order of the name of the workflow types.
    public var reverseOrder: Swift.Bool

    public init (
        domain: Swift.String? = nil,
        maximumPageSize: Swift.Int = 0,
        name: Swift.String? = nil,
        nextPageToken: Swift.String? = nil,
        registrationStatus: SWFClientTypes.RegistrationStatus? = nil,
        reverseOrder: Swift.Bool = false
    )
    {
        self.domain = domain
        self.maximumPageSize = maximumPageSize
        self.name = name
        self.nextPageToken = nextPageToken
        self.registrationStatus = registrationStatus
        self.reverseOrder = reverseOrder
    }
}

struct ListWorkflowTypesInputBody: Swift.Equatable {
    let domain: Swift.String?
    let name: Swift.String?
    let registrationStatus: SWFClientTypes.RegistrationStatus?
    let nextPageToken: Swift.String?
    let maximumPageSize: Swift.Int
    let reverseOrder: Swift.Bool
}

extension ListWorkflowTypesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case maximumPageSize
        case name
        case nextPageToken
        case registrationStatus
        case reverseOrder
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let registrationStatusDecoded = try containerValues.decodeIfPresent(SWFClientTypes.RegistrationStatus.self, forKey: .registrationStatus)
        registrationStatus = registrationStatusDecoded
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let maximumPageSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumPageSize) ?? 0
        maximumPageSize = maximumPageSizeDecoded
        let reverseOrderDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .reverseOrder) ?? false
        reverseOrder = reverseOrderDecoded
    }
}

extension ListWorkflowTypesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListWorkflowTypesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListWorkflowTypesOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListWorkflowTypesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListWorkflowTypesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextPageToken = output.nextPageToken
            self.typeInfos = output.typeInfos
        } else {
            self.nextPageToken = nil
            self.typeInfos = nil
        }
    }
}

/// Contains a paginated list of information structures about workflow types.
public struct ListWorkflowTypesOutputResponse: Swift.Equatable {
    /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
    public var nextPageToken: Swift.String?
    /// The list of workflow type information.
    /// This member is required.
    public var typeInfos: [SWFClientTypes.WorkflowTypeInfo]?

    public init (
        nextPageToken: Swift.String? = nil,
        typeInfos: [SWFClientTypes.WorkflowTypeInfo]? = nil
    )
    {
        self.nextPageToken = nextPageToken
        self.typeInfos = typeInfos
    }
}

struct ListWorkflowTypesOutputResponseBody: Swift.Equatable {
    let typeInfos: [SWFClientTypes.WorkflowTypeInfo]?
    let nextPageToken: Swift.String?
}

extension ListWorkflowTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextPageToken
        case typeInfos
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeInfosContainer = try containerValues.decodeIfPresent([SWFClientTypes.WorkflowTypeInfo?].self, forKey: .typeInfos)
        var typeInfosDecoded0:[SWFClientTypes.WorkflowTypeInfo]? = nil
        if let typeInfosContainer = typeInfosContainer {
            typeInfosDecoded0 = [SWFClientTypes.WorkflowTypeInfo]()
            for structure0 in typeInfosContainer {
                if let structure0 = structure0 {
                    typeInfosDecoded0?.append(structure0)
                }
            }
        }
        typeInfos = typeInfosDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}

extension SWFClientTypes.MarkerRecordedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case decisionTaskCompletedEventId
        case details
        case markerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let details = self.details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let markerName = self.markerName {
            try encodeContainer.encode(markerName, forKey: .markerName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let markerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .markerName)
        markerName = markerNameDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .details)
        details = detailsDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the MarkerRecorded event.
    public struct MarkerRecordedEventAttributes: Swift.Equatable {
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the RecordMarker decision that requested this marker. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int
        /// The details of the marker.
        public var details: Swift.String?
        /// The name of the marker.
        /// This member is required.
        public var markerName: Swift.String?

        public init (
            decisionTaskCompletedEventId: Swift.Int = 0,
            details: Swift.String? = nil,
            markerName: Swift.String? = nil
        )
        {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.details = details
            self.markerName = markerName
        }
    }

}

extension OperationNotPermittedFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: OperationNotPermittedFaultBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Returned when the caller doesn't have sufficient permissions to invoke the action.
public struct OperationNotPermittedFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description that may help with diagnosing the cause of the fault.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OperationNotPermittedFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension OperationNotPermittedFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PollForActivityTaskInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case identity
        case taskList
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let identity = self.identity {
            try encodeContainer.encode(identity, forKey: .identity)
        }
        if let taskList = self.taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
    }
}

extension PollForActivityTaskInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PollForActivityTaskInput: Swift.Equatable {
    /// The name of the domain that contains the task lists being polled.
    /// This member is required.
    public var domain: Swift.String?
    /// Identity of the worker making the request, recorded in the ActivityTaskStarted event in the workflow history. This enables diagnostic tracing when problems arise. The form of this identity is user defined.
    public var identity: Swift.String?
    /// Specifies the task list to poll for activity tasks. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not be the literal string arn.
    /// This member is required.
    public var taskList: SWFClientTypes.TaskList?

    public init (
        domain: Swift.String? = nil,
        identity: Swift.String? = nil,
        taskList: SWFClientTypes.TaskList? = nil
    )
    {
        self.domain = domain
        self.identity = identity
        self.taskList = taskList
    }
}

struct PollForActivityTaskInputBody: Swift.Equatable {
    let domain: Swift.String?
    let taskList: SWFClientTypes.TaskList?
    let identity: Swift.String?
}

extension PollForActivityTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case identity
        case taskList
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let identityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identity)
        identity = identityDecoded
    }
}

extension PollForActivityTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PollForActivityTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceededFault" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PollForActivityTaskOutputError: Swift.Error, Swift.Equatable {
    case limitExceededFault(LimitExceededFault)
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension PollForActivityTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PollForActivityTaskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.activityId = output.activityId
            self.activityType = output.activityType
            self.input = output.input
            self.startedEventId = output.startedEventId
            self.taskToken = output.taskToken
            self.workflowExecution = output.workflowExecution
        } else {
            self.activityId = nil
            self.activityType = nil
            self.input = nil
            self.startedEventId = 0
            self.taskToken = nil
            self.workflowExecution = nil
        }
    }
}

/// Unit of work sent to an activity worker.
public struct PollForActivityTaskOutputResponse: Swift.Equatable {
    /// The unique ID of the task.
    /// This member is required.
    public var activityId: Swift.String?
    /// The type of this activity task.
    /// This member is required.
    public var activityType: SWFClientTypes.ActivityType?
    /// The inputs provided when the activity task was scheduled. The form of the input is user defined and should be meaningful to the activity implementation.
    public var input: Swift.String?
    /// The ID of the ActivityTaskStarted event recorded in the history.
    /// This member is required.
    public var startedEventId: Swift.Int
    /// The opaque string used as a handle on the task. This token is used by workers to communicate progress and response information back to the system about the task.
    /// This member is required.
    public var taskToken: Swift.String?
    /// The workflow execution that started this activity task.
    /// This member is required.
    public var workflowExecution: SWFClientTypes.WorkflowExecution?

    public init (
        activityId: Swift.String? = nil,
        activityType: SWFClientTypes.ActivityType? = nil,
        input: Swift.String? = nil,
        startedEventId: Swift.Int = 0,
        taskToken: Swift.String? = nil,
        workflowExecution: SWFClientTypes.WorkflowExecution? = nil
    )
    {
        self.activityId = activityId
        self.activityType = activityType
        self.input = input
        self.startedEventId = startedEventId
        self.taskToken = taskToken
        self.workflowExecution = workflowExecution
    }
}

struct PollForActivityTaskOutputResponseBody: Swift.Equatable {
    let taskToken: Swift.String?
    let activityId: Swift.String?
    let startedEventId: Swift.Int
    let workflowExecution: SWFClientTypes.WorkflowExecution?
    let activityType: SWFClientTypes.ActivityType?
    let input: Swift.String?
}

extension PollForActivityTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityId
        case activityType
        case input
        case startedEventId
        case taskToken
        case workflowExecution
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskToken)
        taskToken = taskTokenDecoded
        let activityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activityId)
        activityId = activityIdDecoded
        let startedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedEventId) ?? 0
        startedEventId = startedEventIdDecoded
        let workflowExecutionDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecution.self, forKey: .workflowExecution)
        workflowExecution = workflowExecutionDecoded
        let activityTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ActivityType.self, forKey: .activityType)
        activityType = activityTypeDecoded
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
    }
}

extension PollForDecisionTaskInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case identity
        case maximumPageSize
        case nextPageToken
        case reverseOrder
        case taskList
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let identity = self.identity {
            try encodeContainer.encode(identity, forKey: .identity)
        }
        if maximumPageSize != 0 {
            try encodeContainer.encode(maximumPageSize, forKey: .maximumPageSize)
        }
        if let nextPageToken = self.nextPageToken {
            try encodeContainer.encode(nextPageToken, forKey: .nextPageToken)
        }
        if reverseOrder != false {
            try encodeContainer.encode(reverseOrder, forKey: .reverseOrder)
        }
        if let taskList = self.taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
    }
}

extension PollForDecisionTaskInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PollForDecisionTaskInput: Swift.Equatable {
    /// The name of the domain containing the task lists to poll.
    /// This member is required.
    public var domain: Swift.String?
    /// Identity of the decider making the request, which is recorded in the DecisionTaskStarted event in the workflow history. This enables diagnostic tracing when problems arise. The form of this identity is user defined.
    public var identity: Swift.String?
    /// The maximum number of results that are returned per call. Use nextPageToken to obtain further pages of results. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
    public var maximumPageSize: Swift.Int
    /// If NextPageToken is returned there are more results available. The value of NextPageToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 60 seconds. Using an expired pagination token will return a 400 error: "Specified token has exceeded its maximum lifetime". The configured maximumPageSize determines how many results can be returned in a single call. The nextPageToken returned by this action cannot be used with [GetWorkflowExecutionHistory] to get the next page. You must call [PollForDecisionTask] again (with the nextPageToken) to retrieve the next page of history records. Calling [PollForDecisionTask] with a nextPageToken doesn't return a new decision task.
    public var nextPageToken: Swift.String?
    /// When set to true, returns the events in reverse order. By default the results are returned in ascending order of the eventTimestamp of the events.
    public var reverseOrder: Swift.Bool
    /// Specifies the task list to poll for decision tasks. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not be the literal string arn.
    /// This member is required.
    public var taskList: SWFClientTypes.TaskList?

    public init (
        domain: Swift.String? = nil,
        identity: Swift.String? = nil,
        maximumPageSize: Swift.Int = 0,
        nextPageToken: Swift.String? = nil,
        reverseOrder: Swift.Bool = false,
        taskList: SWFClientTypes.TaskList? = nil
    )
    {
        self.domain = domain
        self.identity = identity
        self.maximumPageSize = maximumPageSize
        self.nextPageToken = nextPageToken
        self.reverseOrder = reverseOrder
        self.taskList = taskList
    }
}

struct PollForDecisionTaskInputBody: Swift.Equatable {
    let domain: Swift.String?
    let taskList: SWFClientTypes.TaskList?
    let identity: Swift.String?
    let nextPageToken: Swift.String?
    let maximumPageSize: Swift.Int
    let reverseOrder: Swift.Bool
}

extension PollForDecisionTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case identity
        case maximumPageSize
        case nextPageToken
        case reverseOrder
        case taskList
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let identityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identity)
        identity = identityDecoded
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let maximumPageSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumPageSize) ?? 0
        maximumPageSize = maximumPageSizeDecoded
        let reverseOrderDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .reverseOrder) ?? false
        reverseOrder = reverseOrderDecoded
    }
}

extension PollForDecisionTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PollForDecisionTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceededFault" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PollForDecisionTaskOutputError: Swift.Error, Swift.Equatable {
    case limitExceededFault(LimitExceededFault)
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension PollForDecisionTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PollForDecisionTaskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.events = output.events
            self.nextPageToken = output.nextPageToken
            self.previousStartedEventId = output.previousStartedEventId
            self.startedEventId = output.startedEventId
            self.taskToken = output.taskToken
            self.workflowExecution = output.workflowExecution
            self.workflowType = output.workflowType
        } else {
            self.events = nil
            self.nextPageToken = nil
            self.previousStartedEventId = 0
            self.startedEventId = 0
            self.taskToken = nil
            self.workflowExecution = nil
            self.workflowType = nil
        }
    }
}

/// A structure that represents a decision task. Decision tasks are sent to deciders in order for them to make decisions.
public struct PollForDecisionTaskOutputResponse: Swift.Equatable {
    /// A paginated list of history events of the workflow execution. The decider uses this during the processing of the decision task.
    /// This member is required.
    public var events: [SWFClientTypes.HistoryEvent]?
    /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
    public var nextPageToken: Swift.String?
    /// The ID of the DecisionTaskStarted event of the previous decision task of this workflow execution that was processed by the decider. This can be used to determine the events in the history new since the last decision task received by the decider.
    public var previousStartedEventId: Swift.Int
    /// The ID of the DecisionTaskStarted event recorded in the history.
    /// This member is required.
    public var startedEventId: Swift.Int
    /// The opaque string used as a handle on the task. This token is used by workers to communicate progress and response information back to the system about the task.
    /// This member is required.
    public var taskToken: Swift.String?
    /// The workflow execution for which this decision task was created.
    /// This member is required.
    public var workflowExecution: SWFClientTypes.WorkflowExecution?
    /// The type of the workflow execution for which this decision task was created.
    /// This member is required.
    public var workflowType: SWFClientTypes.WorkflowType?

    public init (
        events: [SWFClientTypes.HistoryEvent]? = nil,
        nextPageToken: Swift.String? = nil,
        previousStartedEventId: Swift.Int = 0,
        startedEventId: Swift.Int = 0,
        taskToken: Swift.String? = nil,
        workflowExecution: SWFClientTypes.WorkflowExecution? = nil,
        workflowType: SWFClientTypes.WorkflowType? = nil
    )
    {
        self.events = events
        self.nextPageToken = nextPageToken
        self.previousStartedEventId = previousStartedEventId
        self.startedEventId = startedEventId
        self.taskToken = taskToken
        self.workflowExecution = workflowExecution
        self.workflowType = workflowType
    }
}

struct PollForDecisionTaskOutputResponseBody: Swift.Equatable {
    let taskToken: Swift.String?
    let startedEventId: Swift.Int
    let workflowExecution: SWFClientTypes.WorkflowExecution?
    let workflowType: SWFClientTypes.WorkflowType?
    let events: [SWFClientTypes.HistoryEvent]?
    let nextPageToken: Swift.String?
    let previousStartedEventId: Swift.Int
}

extension PollForDecisionTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events
        case nextPageToken
        case previousStartedEventId
        case startedEventId
        case taskToken
        case workflowExecution
        case workflowType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskToken)
        taskToken = taskTokenDecoded
        let startedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedEventId) ?? 0
        startedEventId = startedEventIdDecoded
        let workflowExecutionDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecution.self, forKey: .workflowExecution)
        workflowExecution = workflowExecutionDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let eventsContainer = try containerValues.decodeIfPresent([SWFClientTypes.HistoryEvent?].self, forKey: .events)
        var eventsDecoded0:[SWFClientTypes.HistoryEvent]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [SWFClientTypes.HistoryEvent]()
            for structure0 in eventsContainer {
                if let structure0 = structure0 {
                    eventsDecoded0?.append(structure0)
                }
            }
        }
        events = eventsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let previousStartedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .previousStartedEventId) ?? 0
        previousStartedEventId = previousStartedEventIdDecoded
    }
}

extension RecordActivityTaskHeartbeatInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details
        case taskToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = self.details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let taskToken = self.taskToken {
            try encodeContainer.encode(taskToken, forKey: .taskToken)
        }
    }
}

extension RecordActivityTaskHeartbeatInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RecordActivityTaskHeartbeatInput: Swift.Equatable {
    /// If specified, contains details about the progress of the task.
    public var details: Swift.String?
    /// The taskToken of the [ActivityTask]. taskToken is generated by the service and should be treated as an opaque value. If the task is passed to another process, its taskToken must also be passed. This enables it to provide its progress and respond with results.
    /// This member is required.
    public var taskToken: Swift.String?

    public init (
        details: Swift.String? = nil,
        taskToken: Swift.String? = nil
    )
    {
        self.details = details
        self.taskToken = taskToken
    }
}

struct RecordActivityTaskHeartbeatInputBody: Swift.Equatable {
    let taskToken: Swift.String?
    let details: Swift.String?
}

extension RecordActivityTaskHeartbeatInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details
        case taskToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskToken)
        taskToken = taskTokenDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .details)
        details = detailsDecoded
    }
}

extension RecordActivityTaskHeartbeatOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RecordActivityTaskHeartbeatOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RecordActivityTaskHeartbeatOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RecordActivityTaskHeartbeatOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RecordActivityTaskHeartbeatOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cancelRequested = output.cancelRequested
        } else {
            self.cancelRequested = false
        }
    }
}

/// Status information about an activity task.
public struct RecordActivityTaskHeartbeatOutputResponse: Swift.Equatable {
    /// Set to true if cancellation of the task is requested.
    /// This member is required.
    public var cancelRequested: Swift.Bool

    public init (
        cancelRequested: Swift.Bool = false
    )
    {
        self.cancelRequested = cancelRequested
    }
}

struct RecordActivityTaskHeartbeatOutputResponseBody: Swift.Equatable {
    let cancelRequested: Swift.Bool
}

extension RecordActivityTaskHeartbeatOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cancelRequested
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cancelRequestedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .cancelRequested) ?? false
        cancelRequested = cancelRequestedDecoded
    }
}

extension SWFClientTypes.RecordMarkerDecisionAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details
        case markerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = self.details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let markerName = self.markerName {
            try encodeContainer.encode(markerName, forKey: .markerName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let markerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .markerName)
        markerName = markerNameDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .details)
        details = detailsDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the RecordMarker decision. Access Control You can use IAM policies to control this decision's access to Amazon SWF resources as follows:
    ///
    /// * Use a Resource element with the domain name to limit the action to only specified domains.
    ///
    /// * Use an Action element to allow or deny permission to call this action.
    ///
    /// * You cannot use an IAM policy to constrain this action's parameters.
    ///
    ///
    /// If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's cause parameter is set to OPERATION_NOT_PERMITTED. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
    public struct RecordMarkerDecisionAttributes: Swift.Equatable {
        /// The details of the marker.
        public var details: Swift.String?
        /// The name of the marker.
        /// This member is required.
        public var markerName: Swift.String?

        public init (
            details: Swift.String? = nil,
            markerName: Swift.String? = nil
        )
        {
            self.details = details
            self.markerName = markerName
        }
    }

}

extension SWFClientTypes {
    public enum RecordMarkerFailedCause: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case operationNotPermitted
        case sdkUnknown(Swift.String)

        public static var allCases: [RecordMarkerFailedCause] {
            return [
                .operationNotPermitted,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RecordMarkerFailedCause(rawValue: rawValue) ?? RecordMarkerFailedCause.sdkUnknown(rawValue)
        }
    }
}

extension SWFClientTypes.RecordMarkerFailedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case decisionTaskCompletedEventId
        case markerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let markerName = self.markerName {
            try encodeContainer.encode(markerName, forKey: .markerName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let markerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .markerName)
        markerName = markerNameDecoded
        let causeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.RecordMarkerFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the RecordMarkerFailed event.
    public struct RecordMarkerFailedEventAttributes: Swift.Equatable {
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
        /// This member is required.
        public var cause: SWFClientTypes.RecordMarkerFailedCause?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the RecordMarkerFailed decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int
        /// The marker's name.
        /// This member is required.
        public var markerName: Swift.String?

        public init (
            cause: SWFClientTypes.RecordMarkerFailedCause? = nil,
            decisionTaskCompletedEventId: Swift.Int = 0,
            markerName: Swift.String? = nil
        )
        {
            self.cause = cause
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.markerName = markerName
        }
    }

}

extension RegisterActivityTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultTaskHeartbeatTimeout
        case defaultTaskList
        case defaultTaskPriority
        case defaultTaskScheduleToCloseTimeout
        case defaultTaskScheduleToStartTimeout
        case defaultTaskStartToCloseTimeout
        case description
        case domain
        case name
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultTaskHeartbeatTimeout = self.defaultTaskHeartbeatTimeout {
            try encodeContainer.encode(defaultTaskHeartbeatTimeout, forKey: .defaultTaskHeartbeatTimeout)
        }
        if let defaultTaskList = self.defaultTaskList {
            try encodeContainer.encode(defaultTaskList, forKey: .defaultTaskList)
        }
        if let defaultTaskPriority = self.defaultTaskPriority {
            try encodeContainer.encode(defaultTaskPriority, forKey: .defaultTaskPriority)
        }
        if let defaultTaskScheduleToCloseTimeout = self.defaultTaskScheduleToCloseTimeout {
            try encodeContainer.encode(defaultTaskScheduleToCloseTimeout, forKey: .defaultTaskScheduleToCloseTimeout)
        }
        if let defaultTaskScheduleToStartTimeout = self.defaultTaskScheduleToStartTimeout {
            try encodeContainer.encode(defaultTaskScheduleToStartTimeout, forKey: .defaultTaskScheduleToStartTimeout)
        }
        if let defaultTaskStartToCloseTimeout = self.defaultTaskStartToCloseTimeout {
            try encodeContainer.encode(defaultTaskStartToCloseTimeout, forKey: .defaultTaskStartToCloseTimeout)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}

extension RegisterActivityTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RegisterActivityTypeInput: Swift.Equatable {
    /// If set, specifies the default maximum time before which a worker processing a task of this type must report progress by calling [RecordActivityTaskHeartbeat]. If the timeout is exceeded, the activity task is automatically timed out. This default can be overridden when scheduling an activity task using the ScheduleActivityTask[Decision]. If the activity worker subsequently attempts to record a heartbeat or returns a result, the activity worker receives an UnknownResource fault. In this case, Amazon SWF no longer considers the activity task to be valid; the activity worker should clean up the activity task. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
    public var defaultTaskHeartbeatTimeout: Swift.String?
    /// If set, specifies the default task list to use for scheduling tasks of this activity type. This default task list is used if a task list isn't provided when a task is scheduled through the ScheduleActivityTask[Decision].
    public var defaultTaskList: SWFClientTypes.TaskList?
    /// The default task priority to assign to the activity type. If not assigned, then 0 is used. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see [Setting Task Priority](https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html) in the in the Amazon SWF Developer Guide..
    public var defaultTaskPriority: Swift.String?
    /// If set, specifies the default maximum duration for a task of this activity type. This default can be overridden when scheduling an activity task using the ScheduleActivityTask[Decision]. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
    public var defaultTaskScheduleToCloseTimeout: Swift.String?
    /// If set, specifies the default maximum duration that a task of this activity type can wait before being assigned to a worker. This default can be overridden when scheduling an activity task using the ScheduleActivityTask[Decision]. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
    public var defaultTaskScheduleToStartTimeout: Swift.String?
    /// If set, specifies the default maximum duration that a worker can take to process tasks of this activity type. This default can be overridden when scheduling an activity task using the ScheduleActivityTask[Decision]. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
    public var defaultTaskStartToCloseTimeout: Swift.String?
    /// A textual description of the activity type.
    public var description: Swift.String?
    /// The name of the domain in which this activity is to be registered.
    /// This member is required.
    public var domain: Swift.String?
    /// The name of the activity type within the domain. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not be the literal string arn.
    /// This member is required.
    public var name: Swift.String?
    /// The version of the activity type. The activity type consists of the name and version, the combination of which must be unique within the domain. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not be the literal string arn.
    /// This member is required.
    public var version: Swift.String?

    public init (
        defaultTaskHeartbeatTimeout: Swift.String? = nil,
        defaultTaskList: SWFClientTypes.TaskList? = nil,
        defaultTaskPriority: Swift.String? = nil,
        defaultTaskScheduleToCloseTimeout: Swift.String? = nil,
        defaultTaskScheduleToStartTimeout: Swift.String? = nil,
        defaultTaskStartToCloseTimeout: Swift.String? = nil,
        description: Swift.String? = nil,
        domain: Swift.String? = nil,
        name: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.defaultTaskHeartbeatTimeout = defaultTaskHeartbeatTimeout
        self.defaultTaskList = defaultTaskList
        self.defaultTaskPriority = defaultTaskPriority
        self.defaultTaskScheduleToCloseTimeout = defaultTaskScheduleToCloseTimeout
        self.defaultTaskScheduleToStartTimeout = defaultTaskScheduleToStartTimeout
        self.defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout
        self.description = description
        self.domain = domain
        self.name = name
        self.version = version
    }
}

struct RegisterActivityTypeInputBody: Swift.Equatable {
    let domain: Swift.String?
    let name: Swift.String?
    let version: Swift.String?
    let description: Swift.String?
    let defaultTaskStartToCloseTimeout: Swift.String?
    let defaultTaskHeartbeatTimeout: Swift.String?
    let defaultTaskList: SWFClientTypes.TaskList?
    let defaultTaskPriority: Swift.String?
    let defaultTaskScheduleToStartTimeout: Swift.String?
    let defaultTaskScheduleToCloseTimeout: Swift.String?
}

extension RegisterActivityTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultTaskHeartbeatTimeout
        case defaultTaskList
        case defaultTaskPriority
        case defaultTaskScheduleToCloseTimeout
        case defaultTaskScheduleToStartTimeout
        case defaultTaskStartToCloseTimeout
        case description
        case domain
        case name
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let defaultTaskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultTaskStartToCloseTimeout)
        defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeoutDecoded
        let defaultTaskHeartbeatTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultTaskHeartbeatTimeout)
        defaultTaskHeartbeatTimeout = defaultTaskHeartbeatTimeoutDecoded
        let defaultTaskListDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TaskList.self, forKey: .defaultTaskList)
        defaultTaskList = defaultTaskListDecoded
        let defaultTaskPriorityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultTaskPriority)
        defaultTaskPriority = defaultTaskPriorityDecoded
        let defaultTaskScheduleToStartTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultTaskScheduleToStartTimeout)
        defaultTaskScheduleToStartTimeout = defaultTaskScheduleToStartTimeoutDecoded
        let defaultTaskScheduleToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultTaskScheduleToCloseTimeout)
        defaultTaskScheduleToCloseTimeout = defaultTaskScheduleToCloseTimeoutDecoded
    }
}

extension RegisterActivityTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterActivityTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceededFault" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeAlreadyExistsFault" : self = .typeAlreadyExistsFault(try TypeAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RegisterActivityTypeOutputError: Swift.Error, Swift.Equatable {
    case limitExceededFault(LimitExceededFault)
    case operationNotPermittedFault(OperationNotPermittedFault)
    case typeAlreadyExistsFault(TypeAlreadyExistsFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterActivityTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RegisterActivityTypeOutputResponse: Swift.Equatable {

    public init () { }
}

extension RegisterDomainInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case name
        case tags
        case workflowExecutionRetentionPeriodInDays
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for resourcetag0 in tags {
                try tagsContainer.encode(resourcetag0)
            }
        }
        if let workflowExecutionRetentionPeriodInDays = self.workflowExecutionRetentionPeriodInDays {
            try encodeContainer.encode(workflowExecutionRetentionPeriodInDays, forKey: .workflowExecutionRetentionPeriodInDays)
        }
    }
}

extension RegisterDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RegisterDomainInput: Swift.Equatable {
    /// A text description of the domain.
    public var description: Swift.String?
    /// Name of the domain to register. The name must be unique in the region that the domain is registered in. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not be the literal string arn.
    /// This member is required.
    public var name: Swift.String?
    /// Tags to be added when registering a domain. Tags may only contain unicode letters, digits, whitespace, or these symbols: _ . : / = + - @.
    public var tags: [SWFClientTypes.ResourceTag]?
    /// The duration (in days) that records and histories of workflow executions on the domain should be kept by the service. After the retention period, the workflow execution isn't available in the results of visibility calls. If you pass the value NONE or 0 (zero), then the workflow execution history isn't retained. As soon as the workflow execution completes, the execution record and its history are deleted. The maximum workflow execution retention period is 90 days. For more information about Amazon SWF service limits, see: [Amazon SWF Service Limits](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dg-limits.html) in the Amazon SWF Developer Guide.
    /// This member is required.
    public var workflowExecutionRetentionPeriodInDays: Swift.String?

    public init (
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [SWFClientTypes.ResourceTag]? = nil,
        workflowExecutionRetentionPeriodInDays: Swift.String? = nil
    )
    {
        self.description = description
        self.name = name
        self.tags = tags
        self.workflowExecutionRetentionPeriodInDays = workflowExecutionRetentionPeriodInDays
    }
}

struct RegisterDomainInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let workflowExecutionRetentionPeriodInDays: Swift.String?
    let tags: [SWFClientTypes.ResourceTag]?
}

extension RegisterDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case name
        case tags
        case workflowExecutionRetentionPeriodInDays
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let workflowExecutionRetentionPeriodInDaysDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowExecutionRetentionPeriodInDays)
        workflowExecutionRetentionPeriodInDays = workflowExecutionRetentionPeriodInDaysDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SWFClientTypes.ResourceTag?].self, forKey: .tags)
        var tagsDecoded0:[SWFClientTypes.ResourceTag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SWFClientTypes.ResourceTag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension RegisterDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DomainAlreadyExistsFault" : self = .domainAlreadyExistsFault(try DomainAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededFault" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsFault" : self = .tooManyTagsFault(try TooManyTagsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RegisterDomainOutputError: Swift.Error, Swift.Equatable {
    case domainAlreadyExistsFault(DomainAlreadyExistsFault)
    case limitExceededFault(LimitExceededFault)
    case operationNotPermittedFault(OperationNotPermittedFault)
    case tooManyTagsFault(TooManyTagsFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RegisterDomainOutputResponse: Swift.Equatable {

    public init () { }
}

extension RegisterWorkflowTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultChildPolicy
        case defaultExecutionStartToCloseTimeout
        case defaultLambdaRole
        case defaultTaskList
        case defaultTaskPriority
        case defaultTaskStartToCloseTimeout
        case description
        case domain
        case name
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultChildPolicy = self.defaultChildPolicy {
            try encodeContainer.encode(defaultChildPolicy.rawValue, forKey: .defaultChildPolicy)
        }
        if let defaultExecutionStartToCloseTimeout = self.defaultExecutionStartToCloseTimeout {
            try encodeContainer.encode(defaultExecutionStartToCloseTimeout, forKey: .defaultExecutionStartToCloseTimeout)
        }
        if let defaultLambdaRole = self.defaultLambdaRole {
            try encodeContainer.encode(defaultLambdaRole, forKey: .defaultLambdaRole)
        }
        if let defaultTaskList = self.defaultTaskList {
            try encodeContainer.encode(defaultTaskList, forKey: .defaultTaskList)
        }
        if let defaultTaskPriority = self.defaultTaskPriority {
            try encodeContainer.encode(defaultTaskPriority, forKey: .defaultTaskPriority)
        }
        if let defaultTaskStartToCloseTimeout = self.defaultTaskStartToCloseTimeout {
            try encodeContainer.encode(defaultTaskStartToCloseTimeout, forKey: .defaultTaskStartToCloseTimeout)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}

extension RegisterWorkflowTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RegisterWorkflowTypeInput: Swift.Equatable {
    /// If set, specifies the default policy to use for the child workflow executions when a workflow execution of this type is terminated, by calling the [TerminateWorkflowExecution] action explicitly or due to an expired timeout. This default can be overridden when starting a workflow execution using the [StartWorkflowExecution] action or the StartChildWorkflowExecution[Decision]. The supported child policies are:
    ///
    /// * TERMINATE – The child executions are terminated.
    ///
    /// * REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.
    ///
    /// * ABANDON – No action is taken. The child executions continue to run.
    public var defaultChildPolicy: SWFClientTypes.ChildPolicy?
    /// If set, specifies the default maximum duration for executions of this workflow type. You can override this default when starting an execution through the [StartWorkflowExecution] Action or StartChildWorkflowExecution[Decision]. The duration is specified in seconds; an integer greater than or equal to 0. Unlike some of the other timeout parameters in Amazon SWF, you cannot specify a value of "NONE" for defaultExecutionStartToCloseTimeout; there is a one-year max limit on the time that a workflow execution can run. Exceeding this limit always causes the workflow execution to time out.
    public var defaultExecutionStartToCloseTimeout: Swift.String?
    /// The default IAM role attached to this workflow type. Executions of this workflow type need IAM roles to invoke Lambda functions. If you don't specify an IAM role when you start this workflow type, the default Lambda role is attached to the execution. For more information, see [https://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html](https://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html) in the Amazon SWF Developer Guide.
    public var defaultLambdaRole: Swift.String?
    /// If set, specifies the default task list to use for scheduling decision tasks for executions of this workflow type. This default is used only if a task list isn't provided when starting the execution through the [StartWorkflowExecution] Action or StartChildWorkflowExecution[Decision].
    public var defaultTaskList: SWFClientTypes.TaskList?
    /// The default task priority to assign to the workflow type. If not assigned, then 0 is used. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see [Setting Task Priority](https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html) in the Amazon SWF Developer Guide.
    public var defaultTaskPriority: Swift.String?
    /// If set, specifies the default maximum duration of decision tasks for this workflow type. This default can be overridden when starting a workflow execution using the [StartWorkflowExecution] action or the StartChildWorkflowExecution[Decision]. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
    public var defaultTaskStartToCloseTimeout: Swift.String?
    /// Textual description of the workflow type.
    public var description: Swift.String?
    /// The name of the domain in which to register the workflow type.
    /// This member is required.
    public var domain: Swift.String?
    /// The name of the workflow type. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not be the literal string arn.
    /// This member is required.
    public var name: Swift.String?
    /// The version of the workflow type. The workflow type consists of the name and version, the combination of which must be unique within the domain. To get a list of all currently registered workflow types, use the [ListWorkflowTypes] action. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not be the literal string arn.
    /// This member is required.
    public var version: Swift.String?

    public init (
        defaultChildPolicy: SWFClientTypes.ChildPolicy? = nil,
        defaultExecutionStartToCloseTimeout: Swift.String? = nil,
        defaultLambdaRole: Swift.String? = nil,
        defaultTaskList: SWFClientTypes.TaskList? = nil,
        defaultTaskPriority: Swift.String? = nil,
        defaultTaskStartToCloseTimeout: Swift.String? = nil,
        description: Swift.String? = nil,
        domain: Swift.String? = nil,
        name: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.defaultChildPolicy = defaultChildPolicy
        self.defaultExecutionStartToCloseTimeout = defaultExecutionStartToCloseTimeout
        self.defaultLambdaRole = defaultLambdaRole
        self.defaultTaskList = defaultTaskList
        self.defaultTaskPriority = defaultTaskPriority
        self.defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout
        self.description = description
        self.domain = domain
        self.name = name
        self.version = version
    }
}

struct RegisterWorkflowTypeInputBody: Swift.Equatable {
    let domain: Swift.String?
    let name: Swift.String?
    let version: Swift.String?
    let description: Swift.String?
    let defaultTaskStartToCloseTimeout: Swift.String?
    let defaultExecutionStartToCloseTimeout: Swift.String?
    let defaultTaskList: SWFClientTypes.TaskList?
    let defaultTaskPriority: Swift.String?
    let defaultChildPolicy: SWFClientTypes.ChildPolicy?
    let defaultLambdaRole: Swift.String?
}

extension RegisterWorkflowTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultChildPolicy
        case defaultExecutionStartToCloseTimeout
        case defaultLambdaRole
        case defaultTaskList
        case defaultTaskPriority
        case defaultTaskStartToCloseTimeout
        case description
        case domain
        case name
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let defaultTaskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultTaskStartToCloseTimeout)
        defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeoutDecoded
        let defaultExecutionStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultExecutionStartToCloseTimeout)
        defaultExecutionStartToCloseTimeout = defaultExecutionStartToCloseTimeoutDecoded
        let defaultTaskListDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TaskList.self, forKey: .defaultTaskList)
        defaultTaskList = defaultTaskListDecoded
        let defaultTaskPriorityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultTaskPriority)
        defaultTaskPriority = defaultTaskPriorityDecoded
        let defaultChildPolicyDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ChildPolicy.self, forKey: .defaultChildPolicy)
        defaultChildPolicy = defaultChildPolicyDecoded
        let defaultLambdaRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultLambdaRole)
        defaultLambdaRole = defaultLambdaRoleDecoded
    }
}

extension RegisterWorkflowTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterWorkflowTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceededFault" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeAlreadyExistsFault" : self = .typeAlreadyExistsFault(try TypeAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RegisterWorkflowTypeOutputError: Swift.Error, Swift.Equatable {
    case limitExceededFault(LimitExceededFault)
    case operationNotPermittedFault(OperationNotPermittedFault)
    case typeAlreadyExistsFault(TypeAlreadyExistsFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterWorkflowTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RegisterWorkflowTypeOutputResponse: Swift.Equatable {

    public init () { }
}

extension SWFClientTypes {
    public enum RegistrationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deprecated
        case registered
        case sdkUnknown(Swift.String)

        public static var allCases: [RegistrationStatus] {
            return [
                .deprecated,
                .registered,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deprecated: return "DEPRECATED"
            case .registered: return "REGISTERED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RegistrationStatus(rawValue: rawValue) ?? RegistrationStatus.sdkUnknown(rawValue)
        }
    }
}

extension SWFClientTypes.RequestCancelActivityTaskDecisionAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityId = self.activityId {
            try encodeContainer.encode(activityId, forKey: .activityId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activityId)
        activityId = activityIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the RequestCancelActivityTask decision. Access Control You can use IAM policies to control this decision's access to Amazon SWF resources as follows:
    ///
    /// * Use a Resource element with the domain name to limit the action to only specified domains.
    ///
    /// * Use an Action element to allow or deny permission to call this action.
    ///
    /// * You cannot use an IAM policy to constrain this action's parameters.
    ///
    ///
    /// If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's cause parameter is set to OPERATION_NOT_PERMITTED. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
    public struct RequestCancelActivityTaskDecisionAttributes: Swift.Equatable {
        /// The activityId of the activity task to be canceled.
        /// This member is required.
        public var activityId: Swift.String?

        public init (
            activityId: Swift.String? = nil
        )
        {
            self.activityId = activityId
        }
    }

}

extension SWFClientTypes {
    public enum RequestCancelActivityTaskFailedCause: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case activityIdUnknown
        case operationNotPermitted
        case sdkUnknown(Swift.String)

        public static var allCases: [RequestCancelActivityTaskFailedCause] {
            return [
                .activityIdUnknown,
                .operationNotPermitted,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .activityIdUnknown: return "ACTIVITY_ID_UNKNOWN"
            case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RequestCancelActivityTaskFailedCause(rawValue: rawValue) ?? RequestCancelActivityTaskFailedCause.sdkUnknown(rawValue)
        }
    }
}

extension SWFClientTypes.RequestCancelActivityTaskFailedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityId
        case cause
        case decisionTaskCompletedEventId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityId = self.activityId {
            try encodeContainer.encode(activityId, forKey: .activityId)
        }
        if let cause = self.cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activityId)
        activityId = activityIdDecoded
        let causeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.RequestCancelActivityTaskFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the RequestCancelActivityTaskFailed event.
    public struct RequestCancelActivityTaskFailedEventAttributes: Swift.Equatable {
        /// The activityId provided in the RequestCancelActivityTask decision that failed.
        /// This member is required.
        public var activityId: Swift.String?
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
        /// This member is required.
        public var cause: SWFClientTypes.RequestCancelActivityTaskFailedCause?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the RequestCancelActivityTask decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int

        public init (
            activityId: Swift.String? = nil,
            cause: SWFClientTypes.RequestCancelActivityTaskFailedCause? = nil,
            decisionTaskCompletedEventId: Swift.Int = 0
        )
        {
            self.activityId = activityId
            self.cause = cause
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        }
    }

}

extension SWFClientTypes.RequestCancelExternalWorkflowExecutionDecisionAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case control
        case runId
        case workflowId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let control = self.control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if let runId = self.runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if let workflowId = self.workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
        let controlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .control)
        control = controlDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the RequestCancelExternalWorkflowExecution decision. Access Control You can use IAM policies to control this decision's access to Amazon SWF resources as follows:
    ///
    /// * Use a Resource element with the domain name to limit the action to only specified domains.
    ///
    /// * Use an Action element to allow or deny permission to call this action.
    ///
    /// * You cannot use an IAM policy to constrain this action's parameters.
    ///
    ///
    /// If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's cause parameter is set to OPERATION_NOT_PERMITTED. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
    public struct RequestCancelExternalWorkflowExecutionDecisionAttributes: Swift.Equatable {
        /// The data attached to the event that can be used by the decider in subsequent workflow tasks.
        public var control: Swift.String?
        /// The runId of the external workflow execution to cancel.
        public var runId: Swift.String?
        /// The workflowId of the external workflow execution to cancel.
        /// This member is required.
        public var workflowId: Swift.String?

        public init (
            control: Swift.String? = nil,
            runId: Swift.String? = nil,
            workflowId: Swift.String? = nil
        )
        {
            self.control = control
            self.runId = runId
            self.workflowId = workflowId
        }
    }

}

extension SWFClientTypes {
    public enum RequestCancelExternalWorkflowExecutionFailedCause: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case operationNotPermitted
        case requestCancelExternalWorkflowExecutionRateExceeded
        case unknownExternalWorkflowExecution
        case sdkUnknown(Swift.String)

        public static var allCases: [RequestCancelExternalWorkflowExecutionFailedCause] {
            return [
                .operationNotPermitted,
                .requestCancelExternalWorkflowExecutionRateExceeded,
                .unknownExternalWorkflowExecution,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
            case .requestCancelExternalWorkflowExecutionRateExceeded: return "REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED"
            case .unknownExternalWorkflowExecution: return "UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RequestCancelExternalWorkflowExecutionFailedCause(rawValue: rawValue) ?? RequestCancelExternalWorkflowExecutionFailedCause.sdkUnknown(rawValue)
        }
    }
}

extension SWFClientTypes.RequestCancelExternalWorkflowExecutionFailedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case control
        case decisionTaskCompletedEventId
        case initiatedEventId
        case runId
        case workflowId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if let control = self.control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if initiatedEventId != 0 {
            try encodeContainer.encode(initiatedEventId, forKey: .initiatedEventId)
        }
        if let runId = self.runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if let workflowId = self.workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
        let causeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.RequestCancelExternalWorkflowExecutionFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let initiatedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .initiatedEventId) ?? 0
        initiatedEventId = initiatedEventIdDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
        let controlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .control)
        control = controlDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the RequestCancelExternalWorkflowExecutionFailed event.
    public struct RequestCancelExternalWorkflowExecutionFailedEventAttributes: Swift.Equatable {
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
        /// This member is required.
        public var cause: SWFClientTypes.RequestCancelExternalWorkflowExecutionFailedCause?
        /// The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the workflow execution.
        public var control: Swift.String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the RequestCancelExternalWorkflowExecution decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int
        /// The ID of the RequestCancelExternalWorkflowExecutionInitiated event corresponding to the RequestCancelExternalWorkflowExecution decision to cancel this external workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var initiatedEventId: Swift.Int
        /// The runId of the external workflow execution.
        public var runId: Swift.String?
        /// The workflowId of the external workflow to which the cancel request was to be delivered.
        /// This member is required.
        public var workflowId: Swift.String?

        public init (
            cause: SWFClientTypes.RequestCancelExternalWorkflowExecutionFailedCause? = nil,
            control: Swift.String? = nil,
            decisionTaskCompletedEventId: Swift.Int = 0,
            initiatedEventId: Swift.Int = 0,
            runId: Swift.String? = nil,
            workflowId: Swift.String? = nil
        )
        {
            self.cause = cause
            self.control = control
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.initiatedEventId = initiatedEventId
            self.runId = runId
            self.workflowId = workflowId
        }
    }

}

extension SWFClientTypes.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case control
        case decisionTaskCompletedEventId
        case runId
        case workflowId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let control = self.control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let runId = self.runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if let workflowId = self.workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
        let controlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .control)
        control = controlDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the RequestCancelExternalWorkflowExecutionInitiated event.
    public struct RequestCancelExternalWorkflowExecutionInitiatedEventAttributes: Swift.Equatable {
        /// Data attached to the event that can be used by the decider in subsequent workflow tasks.
        public var control: Swift.String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the RequestCancelExternalWorkflowExecution decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int
        /// The runId of the external workflow execution to be canceled.
        public var runId: Swift.String?
        /// The workflowId of the external workflow execution to be canceled.
        /// This member is required.
        public var workflowId: Swift.String?

        public init (
            control: Swift.String? = nil,
            decisionTaskCompletedEventId: Swift.Int = 0,
            runId: Swift.String? = nil,
            workflowId: Swift.String? = nil
        )
        {
            self.control = control
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.runId = runId
            self.workflowId = workflowId
        }
    }

}

extension RequestCancelWorkflowExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case runId
        case workflowId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let runId = self.runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if let workflowId = self.workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
    }
}

extension RequestCancelWorkflowExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RequestCancelWorkflowExecutionInput: Swift.Equatable {
    /// The name of the domain containing the workflow execution to cancel.
    /// This member is required.
    public var domain: Swift.String?
    /// The runId of the workflow execution to cancel.
    public var runId: Swift.String?
    /// The workflowId of the workflow execution to cancel.
    /// This member is required.
    public var workflowId: Swift.String?

    public init (
        domain: Swift.String? = nil,
        runId: Swift.String? = nil,
        workflowId: Swift.String? = nil
    )
    {
        self.domain = domain
        self.runId = runId
        self.workflowId = workflowId
    }
}

struct RequestCancelWorkflowExecutionInputBody: Swift.Equatable {
    let domain: Swift.String?
    let workflowId: Swift.String?
    let runId: Swift.String?
}

extension RequestCancelWorkflowExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case runId
        case workflowId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let workflowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
    }
}

extension RequestCancelWorkflowExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RequestCancelWorkflowExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RequestCancelWorkflowExecutionOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RequestCancelWorkflowExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RequestCancelWorkflowExecutionOutputResponse: Swift.Equatable {

    public init () { }
}

extension SWFClientTypes.ResourceTag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension SWFClientTypes {
    /// Tags are key-value pairs that can be associated with Amazon SWF state machines and activities. Tags may only contain unicode letters, digits, whitespace, or these symbols: _ . : / = + - @.
    public struct ResourceTag: Swift.Equatable {
        /// The key of a tag.
        /// This member is required.
        public var key: Swift.String?
        /// The value of a tag.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension RespondActivityTaskCanceledInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details
        case taskToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = self.details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let taskToken = self.taskToken {
            try encodeContainer.encode(taskToken, forKey: .taskToken)
        }
    }
}

extension RespondActivityTaskCanceledInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RespondActivityTaskCanceledInput: Swift.Equatable {
    /// Information about the cancellation.
    public var details: Swift.String?
    /// The taskToken of the [ActivityTask]. taskToken is generated by the service and should be treated as an opaque value. If the task is passed to another process, its taskToken must also be passed. This enables it to provide its progress and respond with results.
    /// This member is required.
    public var taskToken: Swift.String?

    public init (
        details: Swift.String? = nil,
        taskToken: Swift.String? = nil
    )
    {
        self.details = details
        self.taskToken = taskToken
    }
}

struct RespondActivityTaskCanceledInputBody: Swift.Equatable {
    let taskToken: Swift.String?
    let details: Swift.String?
}

extension RespondActivityTaskCanceledInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details
        case taskToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskToken)
        taskToken = taskTokenDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .details)
        details = detailsDecoded
    }
}

extension RespondActivityTaskCanceledOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RespondActivityTaskCanceledOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RespondActivityTaskCanceledOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RespondActivityTaskCanceledOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RespondActivityTaskCanceledOutputResponse: Swift.Equatable {

    public init () { }
}

extension RespondActivityTaskCompletedInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case result
        case taskToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let result = self.result {
            try encodeContainer.encode(result, forKey: .result)
        }
        if let taskToken = self.taskToken {
            try encodeContainer.encode(taskToken, forKey: .taskToken)
        }
    }
}

extension RespondActivityTaskCompletedInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RespondActivityTaskCompletedInput: Swift.Equatable {
    /// The result of the activity task. It is a free form string that is implementation specific.
    public var result: Swift.String?
    /// The taskToken of the [ActivityTask]. taskToken is generated by the service and should be treated as an opaque value. If the task is passed to another process, its taskToken must also be passed. This enables it to provide its progress and respond with results.
    /// This member is required.
    public var taskToken: Swift.String?

    public init (
        result: Swift.String? = nil,
        taskToken: Swift.String? = nil
    )
    {
        self.result = result
        self.taskToken = taskToken
    }
}

struct RespondActivityTaskCompletedInputBody: Swift.Equatable {
    let taskToken: Swift.String?
    let result: Swift.String?
}

extension RespondActivityTaskCompletedInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case result
        case taskToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskToken)
        taskToken = taskTokenDecoded
        let resultDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .result)
        result = resultDecoded
    }
}

extension RespondActivityTaskCompletedOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RespondActivityTaskCompletedOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RespondActivityTaskCompletedOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RespondActivityTaskCompletedOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RespondActivityTaskCompletedOutputResponse: Swift.Equatable {

    public init () { }
}

extension RespondActivityTaskFailedInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details
        case reason
        case taskToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = self.details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let taskToken = self.taskToken {
            try encodeContainer.encode(taskToken, forKey: .taskToken)
        }
    }
}

extension RespondActivityTaskFailedInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RespondActivityTaskFailedInput: Swift.Equatable {
    /// Detailed information about the failure.
    public var details: Swift.String?
    /// Description of the error that may assist in diagnostics.
    public var reason: Swift.String?
    /// The taskToken of the [ActivityTask]. taskToken is generated by the service and should be treated as an opaque value. If the task is passed to another process, its taskToken must also be passed. This enables it to provide its progress and respond with results.
    /// This member is required.
    public var taskToken: Swift.String?

    public init (
        details: Swift.String? = nil,
        reason: Swift.String? = nil,
        taskToken: Swift.String? = nil
    )
    {
        self.details = details
        self.reason = reason
        self.taskToken = taskToken
    }
}

struct RespondActivityTaskFailedInputBody: Swift.Equatable {
    let taskToken: Swift.String?
    let reason: Swift.String?
    let details: Swift.String?
}

extension RespondActivityTaskFailedInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details
        case reason
        case taskToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskToken)
        taskToken = taskTokenDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .details)
        details = detailsDecoded
    }
}

extension RespondActivityTaskFailedOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RespondActivityTaskFailedOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RespondActivityTaskFailedOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RespondActivityTaskFailedOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RespondActivityTaskFailedOutputResponse: Swift.Equatable {

    public init () { }
}

extension RespondDecisionTaskCompletedInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case decisions
        case executionContext
        case taskToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let decisions = decisions {
            var decisionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .decisions)
            for decision0 in decisions {
                try decisionsContainer.encode(decision0)
            }
        }
        if let executionContext = self.executionContext {
            try encodeContainer.encode(executionContext, forKey: .executionContext)
        }
        if let taskToken = self.taskToken {
            try encodeContainer.encode(taskToken, forKey: .taskToken)
        }
    }
}

extension RespondDecisionTaskCompletedInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Input data for a TaskCompleted response to a decision task.
public struct RespondDecisionTaskCompletedInput: Swift.Equatable {
    /// The list of decisions (possibly empty) made by the decider while processing this decision task. See the docs for the [Decision] structure for details.
    public var decisions: [SWFClientTypes.Decision]?
    /// User defined context to add to workflow execution.
    public var executionContext: Swift.String?
    /// The taskToken from the [DecisionTask]. taskToken is generated by the service and should be treated as an opaque value. If the task is passed to another process, its taskToken must also be passed. This enables it to provide its progress and respond with results.
    /// This member is required.
    public var taskToken: Swift.String?

    public init (
        decisions: [SWFClientTypes.Decision]? = nil,
        executionContext: Swift.String? = nil,
        taskToken: Swift.String? = nil
    )
    {
        self.decisions = decisions
        self.executionContext = executionContext
        self.taskToken = taskToken
    }
}

struct RespondDecisionTaskCompletedInputBody: Swift.Equatable {
    let taskToken: Swift.String?
    let decisions: [SWFClientTypes.Decision]?
    let executionContext: Swift.String?
}

extension RespondDecisionTaskCompletedInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case decisions
        case executionContext
        case taskToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskToken)
        taskToken = taskTokenDecoded
        let decisionsContainer = try containerValues.decodeIfPresent([SWFClientTypes.Decision?].self, forKey: .decisions)
        var decisionsDecoded0:[SWFClientTypes.Decision]? = nil
        if let decisionsContainer = decisionsContainer {
            decisionsDecoded0 = [SWFClientTypes.Decision]()
            for structure0 in decisionsContainer {
                if let structure0 = structure0 {
                    decisionsDecoded0?.append(structure0)
                }
            }
        }
        decisions = decisionsDecoded0
        let executionContextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionContext)
        executionContext = executionContextDecoded
    }
}

extension RespondDecisionTaskCompletedOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RespondDecisionTaskCompletedOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RespondDecisionTaskCompletedOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RespondDecisionTaskCompletedOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RespondDecisionTaskCompletedOutputResponse: Swift.Equatable {

    public init () { }
}

extension SWFClientTypes.ScheduleActivityTaskDecisionAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityId
        case activityType
        case control
        case heartbeatTimeout
        case input
        case scheduleToCloseTimeout
        case scheduleToStartTimeout
        case startToCloseTimeout
        case taskList
        case taskPriority
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityId = self.activityId {
            try encodeContainer.encode(activityId, forKey: .activityId)
        }
        if let activityType = self.activityType {
            try encodeContainer.encode(activityType, forKey: .activityType)
        }
        if let control = self.control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if let heartbeatTimeout = self.heartbeatTimeout {
            try encodeContainer.encode(heartbeatTimeout, forKey: .heartbeatTimeout)
        }
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let scheduleToCloseTimeout = self.scheduleToCloseTimeout {
            try encodeContainer.encode(scheduleToCloseTimeout, forKey: .scheduleToCloseTimeout)
        }
        if let scheduleToStartTimeout = self.scheduleToStartTimeout {
            try encodeContainer.encode(scheduleToStartTimeout, forKey: .scheduleToStartTimeout)
        }
        if let startToCloseTimeout = self.startToCloseTimeout {
            try encodeContainer.encode(startToCloseTimeout, forKey: .startToCloseTimeout)
        }
        if let taskList = self.taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = self.taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ActivityType.self, forKey: .activityType)
        activityType = activityTypeDecoded
        let activityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activityId)
        activityId = activityIdDecoded
        let controlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .control)
        control = controlDecoded
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
        let scheduleToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleToCloseTimeout)
        scheduleToCloseTimeout = scheduleToCloseTimeoutDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let scheduleToStartTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleToStartTimeout)
        scheduleToStartTimeout = scheduleToStartTimeoutDecoded
        let startToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startToCloseTimeout)
        startToCloseTimeout = startToCloseTimeoutDecoded
        let heartbeatTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .heartbeatTimeout)
        heartbeatTimeout = heartbeatTimeoutDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the ScheduleActivityTask decision. Access Control You can use IAM policies to control this decision's access to Amazon SWF resources as follows:
    ///
    /// * Use a Resource element with the domain name to limit the action to only specified domains.
    ///
    /// * Use an Action element to allow or deny permission to call this action.
    ///
    /// * Constrain the following parameters by using a Condition element with the appropriate keys.
    ///
    /// * activityType.name – String constraint. The key is swf:activityType.name.
    ///
    /// * activityType.version – String constraint. The key is swf:activityType.version.
    ///
    /// * taskList – String constraint. The key is swf:taskList.name.
    ///
    ///
    ///
    ///
    ///
    /// If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's cause parameter is set to OPERATION_NOT_PERMITTED. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
    public struct ScheduleActivityTaskDecisionAttributes: Swift.Equatable {
        /// The activityId of the activity task. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not contain the literal string arn.
        /// This member is required.
        public var activityId: Swift.String?
        /// The type of the activity task to schedule.
        /// This member is required.
        public var activityType: SWFClientTypes.ActivityType?
        /// Data attached to the event that can be used by the decider in subsequent workflow tasks. This data isn't sent to the activity.
        public var control: Swift.String?
        /// If set, specifies the maximum time before which a worker processing a task of this type must report progress by calling [RecordActivityTaskHeartbeat]. If the timeout is exceeded, the activity task is automatically timed out. If the worker subsequently attempts to record a heartbeat or returns a result, it is ignored. This overrides the default heartbeat timeout specified when registering the activity type using [RegisterActivityType]. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public var heartbeatTimeout: Swift.String?
        /// The input provided to the activity task.
        public var input: Swift.String?
        /// The maximum duration for this activity task. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration. A schedule-to-close timeout for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default schedule-to-close timeout was specified at registration time then a fault is returned.
        public var scheduleToCloseTimeout: Swift.String?
        /// If set, specifies the maximum duration the activity task can wait to be assigned to a worker. This overrides the default schedule-to-start timeout specified when registering the activity type using [RegisterActivityType]. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration. A schedule-to-start timeout for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default schedule-to-start timeout was specified at registration time then a fault is returned.
        public var scheduleToStartTimeout: Swift.String?
        /// If set, specifies the maximum duration a worker may take to process this activity task. This overrides the default start-to-close timeout specified when registering the activity type using [RegisterActivityType]. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration. A start-to-close timeout for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default start-to-close timeout was specified at registration time then a fault is returned.
        public var startToCloseTimeout: Swift.String?
        /// If set, specifies the name of the task list in which to schedule the activity task. If not specified, the defaultTaskList registered with the activity type is used. A task list for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default task list was specified at registration time then a fault is returned. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not contain the literal string arn.
        public var taskList: SWFClientTypes.TaskList?
        /// If set, specifies the priority with which the activity task is to be assigned to a worker. This overrides the defaultTaskPriority specified when registering the activity type using [RegisterActivityType]. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see [Setting Task Priority](https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html) in the Amazon SWF Developer Guide.
        public var taskPriority: Swift.String?

        public init (
            activityId: Swift.String? = nil,
            activityType: SWFClientTypes.ActivityType? = nil,
            control: Swift.String? = nil,
            heartbeatTimeout: Swift.String? = nil,
            input: Swift.String? = nil,
            scheduleToCloseTimeout: Swift.String? = nil,
            scheduleToStartTimeout: Swift.String? = nil,
            startToCloseTimeout: Swift.String? = nil,
            taskList: SWFClientTypes.TaskList? = nil,
            taskPriority: Swift.String? = nil
        )
        {
            self.activityId = activityId
            self.activityType = activityType
            self.control = control
            self.heartbeatTimeout = heartbeatTimeout
            self.input = input
            self.scheduleToCloseTimeout = scheduleToCloseTimeout
            self.scheduleToStartTimeout = scheduleToStartTimeout
            self.startToCloseTimeout = startToCloseTimeout
            self.taskList = taskList
            self.taskPriority = taskPriority
        }
    }

}

extension SWFClientTypes {
    public enum ScheduleActivityTaskFailedCause: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case activityCreationRateExceeded
        case activityIdAlreadyInUse
        case activityTypeDeprecated
        case activityTypeDoesNotExist
        case defaultHeartbeatTimeoutUndefined
        case defaultScheduleToCloseTimeoutUndefined
        case defaultScheduleToStartTimeoutUndefined
        case defaultStartToCloseTimeoutUndefined
        case defaultTaskListUndefined
        case openActivitiesLimitExceeded
        case operationNotPermitted
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduleActivityTaskFailedCause] {
            return [
                .activityCreationRateExceeded,
                .activityIdAlreadyInUse,
                .activityTypeDeprecated,
                .activityTypeDoesNotExist,
                .defaultHeartbeatTimeoutUndefined,
                .defaultScheduleToCloseTimeoutUndefined,
                .defaultScheduleToStartTimeoutUndefined,
                .defaultStartToCloseTimeoutUndefined,
                .defaultTaskListUndefined,
                .openActivitiesLimitExceeded,
                .operationNotPermitted,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .activityCreationRateExceeded: return "ACTIVITY_CREATION_RATE_EXCEEDED"
            case .activityIdAlreadyInUse: return "ACTIVITY_ID_ALREADY_IN_USE"
            case .activityTypeDeprecated: return "ACTIVITY_TYPE_DEPRECATED"
            case .activityTypeDoesNotExist: return "ACTIVITY_TYPE_DOES_NOT_EXIST"
            case .defaultHeartbeatTimeoutUndefined: return "DEFAULT_HEARTBEAT_TIMEOUT_UNDEFINED"
            case .defaultScheduleToCloseTimeoutUndefined: return "DEFAULT_SCHEDULE_TO_CLOSE_TIMEOUT_UNDEFINED"
            case .defaultScheduleToStartTimeoutUndefined: return "DEFAULT_SCHEDULE_TO_START_TIMEOUT_UNDEFINED"
            case .defaultStartToCloseTimeoutUndefined: return "DEFAULT_START_TO_CLOSE_TIMEOUT_UNDEFINED"
            case .defaultTaskListUndefined: return "DEFAULT_TASK_LIST_UNDEFINED"
            case .openActivitiesLimitExceeded: return "OPEN_ACTIVITIES_LIMIT_EXCEEDED"
            case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScheduleActivityTaskFailedCause(rawValue: rawValue) ?? ScheduleActivityTaskFailedCause.sdkUnknown(rawValue)
        }
    }
}

extension SWFClientTypes.ScheduleActivityTaskFailedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityId
        case activityType
        case cause
        case decisionTaskCompletedEventId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityId = self.activityId {
            try encodeContainer.encode(activityId, forKey: .activityId)
        }
        if let activityType = self.activityType {
            try encodeContainer.encode(activityType, forKey: .activityType)
        }
        if let cause = self.cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ActivityType.self, forKey: .activityType)
        activityType = activityTypeDecoded
        let activityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activityId)
        activityId = activityIdDecoded
        let causeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ScheduleActivityTaskFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the ScheduleActivityTaskFailed event.
    public struct ScheduleActivityTaskFailedEventAttributes: Swift.Equatable {
        /// The activityId provided in the ScheduleActivityTask decision that failed.
        /// This member is required.
        public var activityId: Swift.String?
        /// The activity type provided in the ScheduleActivityTask decision that failed.
        /// This member is required.
        public var activityType: SWFClientTypes.ActivityType?
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
        /// This member is required.
        public var cause: SWFClientTypes.ScheduleActivityTaskFailedCause?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision that resulted in the scheduling of this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int

        public init (
            activityId: Swift.String? = nil,
            activityType: SWFClientTypes.ActivityType? = nil,
            cause: SWFClientTypes.ScheduleActivityTaskFailedCause? = nil,
            decisionTaskCompletedEventId: Swift.Int = 0
        )
        {
            self.activityId = activityId
            self.activityType = activityType
            self.cause = cause
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        }
    }

}

extension SWFClientTypes.ScheduleLambdaFunctionDecisionAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case control
        case id
        case input
        case name
        case startToCloseTimeout
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let control = self.control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let startToCloseTimeout = self.startToCloseTimeout {
            try encodeContainer.encode(startToCloseTimeout, forKey: .startToCloseTimeout)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let controlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .control)
        control = controlDecoded
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
        let startToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startToCloseTimeout)
        startToCloseTimeout = startToCloseTimeoutDecoded
    }
}

extension SWFClientTypes {
    /// Decision attributes specified in scheduleLambdaFunctionDecisionAttributes within the list of decisions decisions passed to [RespondDecisionTaskCompleted].
    public struct ScheduleLambdaFunctionDecisionAttributes: Swift.Equatable {
        /// The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the Lambda task.
        public var control: Swift.String?
        /// A string that identifies the Lambda function execution in the event history.
        /// This member is required.
        public var id: Swift.String?
        /// The optional input data to be supplied to the Lambda function.
        public var input: Swift.String?
        /// The name, or ARN, of the Lambda function to schedule.
        /// This member is required.
        public var name: Swift.String?
        /// The timeout value, in seconds, after which the Lambda function is considered to be failed once it has started. This can be any integer from 1-300 (1s-5m). If no value is supplied, than a default value of 300s is assumed.
        public var startToCloseTimeout: Swift.String?

        public init (
            control: Swift.String? = nil,
            id: Swift.String? = nil,
            input: Swift.String? = nil,
            name: Swift.String? = nil,
            startToCloseTimeout: Swift.String? = nil
        )
        {
            self.control = control
            self.id = id
            self.input = input
            self.name = name
            self.startToCloseTimeout = startToCloseTimeout
        }
    }

}

extension SWFClientTypes {
    public enum ScheduleLambdaFunctionFailedCause: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case idAlreadyInUse
        case lambdaFunctionCreationRateExceeded
        case lambdaServiceNotAvailableInRegion
        case openLambdaFunctionsLimitExceeded
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduleLambdaFunctionFailedCause] {
            return [
                .idAlreadyInUse,
                .lambdaFunctionCreationRateExceeded,
                .lambdaServiceNotAvailableInRegion,
                .openLambdaFunctionsLimitExceeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .idAlreadyInUse: return "ID_ALREADY_IN_USE"
            case .lambdaFunctionCreationRateExceeded: return "LAMBDA_FUNCTION_CREATION_RATE_EXCEEDED"
            case .lambdaServiceNotAvailableInRegion: return "LAMBDA_SERVICE_NOT_AVAILABLE_IN_REGION"
            case .openLambdaFunctionsLimitExceeded: return "OPEN_LAMBDA_FUNCTIONS_LIMIT_EXCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScheduleLambdaFunctionFailedCause(rawValue: rawValue) ?? ScheduleLambdaFunctionFailedCause.sdkUnknown(rawValue)
        }
    }
}

extension SWFClientTypes.ScheduleLambdaFunctionFailedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case decisionTaskCompletedEventId
        case id
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let causeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ScheduleLambdaFunctionFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the ScheduleLambdaFunctionFailed event. It isn't set for other event types.
    public struct ScheduleLambdaFunctionFailedEventAttributes: Swift.Equatable {
        /// The cause of the failure. To help diagnose issues, use this information to trace back the chain of events leading up to this event. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
        /// This member is required.
        public var cause: SWFClientTypes.ScheduleLambdaFunctionFailedCause?
        /// The ID of the LambdaFunctionCompleted event corresponding to the decision that resulted in scheduling this Lambda task. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int
        /// The ID provided in the ScheduleLambdaFunction decision that failed.
        /// This member is required.
        public var id: Swift.String?
        /// The name of the Lambda function.
        /// This member is required.
        public var name: Swift.String?

        public init (
            cause: SWFClientTypes.ScheduleLambdaFunctionFailedCause? = nil,
            decisionTaskCompletedEventId: Swift.Int = 0,
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.cause = cause
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.id = id
            self.name = name
        }
    }

}

extension SWFClientTypes.SignalExternalWorkflowExecutionDecisionAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case control
        case input
        case runId
        case signalName
        case workflowId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let control = self.control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let runId = self.runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if let signalName = self.signalName {
            try encodeContainer.encode(signalName, forKey: .signalName)
        }
        if let workflowId = self.workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
        let signalNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signalName)
        signalName = signalNameDecoded
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
        let controlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .control)
        control = controlDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the SignalExternalWorkflowExecution decision. Access Control You can use IAM policies to control this decision's access to Amazon SWF resources as follows:
    ///
    /// * Use a Resource element with the domain name to limit the action to only specified domains.
    ///
    /// * Use an Action element to allow or deny permission to call this action.
    ///
    /// * You cannot use an IAM policy to constrain this action's parameters.
    ///
    ///
    /// If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's cause parameter is set to OPERATION_NOT_PERMITTED. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
    public struct SignalExternalWorkflowExecutionDecisionAttributes: Swift.Equatable {
        /// The data attached to the event that can be used by the decider in subsequent decision tasks.
        public var control: Swift.String?
        /// The input data to be provided with the signal. The target workflow execution uses the signal name and input data to process the signal.
        public var input: Swift.String?
        /// The runId of the workflow execution to be signaled.
        public var runId: Swift.String?
        /// The name of the signal.The target workflow execution uses the signal name and input to process the signal.
        /// This member is required.
        public var signalName: Swift.String?
        /// The workflowId of the workflow execution to be signaled.
        /// This member is required.
        public var workflowId: Swift.String?

        public init (
            control: Swift.String? = nil,
            input: Swift.String? = nil,
            runId: Swift.String? = nil,
            signalName: Swift.String? = nil,
            workflowId: Swift.String? = nil
        )
        {
            self.control = control
            self.input = input
            self.runId = runId
            self.signalName = signalName
            self.workflowId = workflowId
        }
    }

}

extension SWFClientTypes {
    public enum SignalExternalWorkflowExecutionFailedCause: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case operationNotPermitted
        case signalExternalWorkflowExecutionRateExceeded
        case unknownExternalWorkflowExecution
        case sdkUnknown(Swift.String)

        public static var allCases: [SignalExternalWorkflowExecutionFailedCause] {
            return [
                .operationNotPermitted,
                .signalExternalWorkflowExecutionRateExceeded,
                .unknownExternalWorkflowExecution,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
            case .signalExternalWorkflowExecutionRateExceeded: return "SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED"
            case .unknownExternalWorkflowExecution: return "UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SignalExternalWorkflowExecutionFailedCause(rawValue: rawValue) ?? SignalExternalWorkflowExecutionFailedCause.sdkUnknown(rawValue)
        }
    }
}

extension SWFClientTypes.SignalExternalWorkflowExecutionFailedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case control
        case decisionTaskCompletedEventId
        case initiatedEventId
        case runId
        case workflowId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if let control = self.control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if initiatedEventId != 0 {
            try encodeContainer.encode(initiatedEventId, forKey: .initiatedEventId)
        }
        if let runId = self.runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if let workflowId = self.workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
        let causeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.SignalExternalWorkflowExecutionFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let initiatedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .initiatedEventId) ?? 0
        initiatedEventId = initiatedEventIdDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
        let controlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .control)
        control = controlDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the SignalExternalWorkflowExecutionFailed event.
    public struct SignalExternalWorkflowExecutionFailedEventAttributes: Swift.Equatable {
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
        /// This member is required.
        public var cause: SWFClientTypes.SignalExternalWorkflowExecutionFailedCause?
        /// The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the workflow execution.
        public var control: Swift.String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the SignalExternalWorkflowExecution decision for this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int
        /// The ID of the SignalExternalWorkflowExecutionInitiated event corresponding to the SignalExternalWorkflowExecution decision to request this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var initiatedEventId: Swift.Int
        /// The runId of the external workflow execution that the signal was being delivered to.
        public var runId: Swift.String?
        /// The workflowId of the external workflow execution that the signal was being delivered to.
        /// This member is required.
        public var workflowId: Swift.String?

        public init (
            cause: SWFClientTypes.SignalExternalWorkflowExecutionFailedCause? = nil,
            control: Swift.String? = nil,
            decisionTaskCompletedEventId: Swift.Int = 0,
            initiatedEventId: Swift.Int = 0,
            runId: Swift.String? = nil,
            workflowId: Swift.String? = nil
        )
        {
            self.cause = cause
            self.control = control
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.initiatedEventId = initiatedEventId
            self.runId = runId
            self.workflowId = workflowId
        }
    }

}

extension SWFClientTypes.SignalExternalWorkflowExecutionInitiatedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case control
        case decisionTaskCompletedEventId
        case input
        case runId
        case signalName
        case workflowId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let control = self.control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let runId = self.runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if let signalName = self.signalName {
            try encodeContainer.encode(signalName, forKey: .signalName)
        }
        if let workflowId = self.workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
        let signalNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signalName)
        signalName = signalNameDecoded
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
        let controlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .control)
        control = controlDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the SignalExternalWorkflowExecutionInitiated event.
    public struct SignalExternalWorkflowExecutionInitiatedEventAttributes: Swift.Equatable {
        /// Data attached to the event that can be used by the decider in subsequent decision tasks.
        public var control: Swift.String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the SignalExternalWorkflowExecution decision for this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int
        /// The input provided to the signal.
        public var input: Swift.String?
        /// The runId of the external workflow execution to send the signal to.
        public var runId: Swift.String?
        /// The name of the signal.
        /// This member is required.
        public var signalName: Swift.String?
        /// The workflowId of the external workflow execution.
        /// This member is required.
        public var workflowId: Swift.String?

        public init (
            control: Swift.String? = nil,
            decisionTaskCompletedEventId: Swift.Int = 0,
            input: Swift.String? = nil,
            runId: Swift.String? = nil,
            signalName: Swift.String? = nil,
            workflowId: Swift.String? = nil
        )
        {
            self.control = control
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.input = input
            self.runId = runId
            self.signalName = signalName
            self.workflowId = workflowId
        }
    }

}

extension SignalWorkflowExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case input
        case runId
        case signalName
        case workflowId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let runId = self.runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if let signalName = self.signalName {
            try encodeContainer.encode(signalName, forKey: .signalName)
        }
        if let workflowId = self.workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
    }
}

extension SignalWorkflowExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SignalWorkflowExecutionInput: Swift.Equatable {
    /// The name of the domain containing the workflow execution to signal.
    /// This member is required.
    public var domain: Swift.String?
    /// Data to attach to the WorkflowExecutionSignaled event in the target workflow execution's history.
    public var input: Swift.String?
    /// The runId of the workflow execution to signal.
    public var runId: Swift.String?
    /// The name of the signal. This name must be meaningful to the target workflow.
    /// This member is required.
    public var signalName: Swift.String?
    /// The workflowId of the workflow execution to signal.
    /// This member is required.
    public var workflowId: Swift.String?

    public init (
        domain: Swift.String? = nil,
        input: Swift.String? = nil,
        runId: Swift.String? = nil,
        signalName: Swift.String? = nil,
        workflowId: Swift.String? = nil
    )
    {
        self.domain = domain
        self.input = input
        self.runId = runId
        self.signalName = signalName
        self.workflowId = workflowId
    }
}

struct SignalWorkflowExecutionInputBody: Swift.Equatable {
    let domain: Swift.String?
    let workflowId: Swift.String?
    let runId: Swift.String?
    let signalName: Swift.String?
    let input: Swift.String?
}

extension SignalWorkflowExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case input
        case runId
        case signalName
        case workflowId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let workflowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
        let signalNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signalName)
        signalName = signalNameDecoded
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
    }
}

extension SignalWorkflowExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SignalWorkflowExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SignalWorkflowExecutionOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension SignalWorkflowExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SignalWorkflowExecutionOutputResponse: Swift.Equatable {

    public init () { }
}

extension SWFClientTypes.StartChildWorkflowExecutionDecisionAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case childPolicy
        case control
        case executionStartToCloseTimeout
        case input
        case lambdaRole
        case tagList
        case taskList
        case taskPriority
        case taskStartToCloseTimeout
        case workflowId
        case workflowType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childPolicy = self.childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if let control = self.control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if let executionStartToCloseTimeout = self.executionStartToCloseTimeout {
            try encodeContainer.encode(executionStartToCloseTimeout, forKey: .executionStartToCloseTimeout)
        }
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let lambdaRole = self.lambdaRole {
            try encodeContainer.encode(lambdaRole, forKey: .lambdaRole)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for tag0 in tagList {
                try tagListContainer.encode(tag0)
            }
        }
        if let taskList = self.taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = self.taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
        if let taskStartToCloseTimeout = self.taskStartToCloseTimeout {
            try encodeContainer.encode(taskStartToCloseTimeout, forKey: .taskStartToCloseTimeout)
        }
        if let workflowId = self.workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
        if let workflowType = self.workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let workflowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let controlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .control)
        control = controlDecoded
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
        let executionStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionStartToCloseTimeout)
        executionStartToCloseTimeout = executionStartToCloseTimeoutDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let taskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskStartToCloseTimeout)
        taskStartToCloseTimeout = taskStartToCloseTimeoutDecoded
        let childPolicyDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ChildPolicy.self, forKey: .childPolicy)
        childPolicy = childPolicyDecoded
        let tagListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagList)
        var tagListDecoded0:[Swift.String]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [Swift.String]()
            for string0 in tagListContainer {
                if let string0 = string0 {
                    tagListDecoded0?.append(string0)
                }
            }
        }
        tagList = tagListDecoded0
        let lambdaRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lambdaRole)
        lambdaRole = lambdaRoleDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the StartChildWorkflowExecution decision. Access Control You can use IAM policies to control this decision's access to Amazon SWF resources as follows:
    ///
    /// * Use a Resource element with the domain name to limit the action to only specified domains.
    ///
    /// * Use an Action element to allow or deny permission to call this action.
    ///
    /// * Constrain the following parameters by using a Condition element with the appropriate keys.
    ///
    /// * tagList.member.N – The key is "swf:tagList.N" where N is the tag number from 0 to 4, inclusive.
    ///
    /// * taskList – String constraint. The key is swf:taskList.name.
    ///
    /// * workflowType.name – String constraint. The key is swf:workflowType.name.
    ///
    /// * workflowType.version – String constraint. The key is swf:workflowType.version.
    ///
    ///
    ///
    ///
    ///
    /// If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's cause parameter is set to OPERATION_NOT_PERMITTED. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
    public struct StartChildWorkflowExecutionDecisionAttributes: Swift.Equatable {
        /// If set, specifies the policy to use for the child workflow executions if the workflow execution being started is terminated by calling the [TerminateWorkflowExecution] action explicitly or due to an expired timeout. This policy overrides the default child policy specified when registering the workflow type using [RegisterWorkflowType]. The supported child policies are:
        ///
        /// * TERMINATE – The child executions are terminated.
        ///
        /// * REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.
        ///
        /// * ABANDON – No action is taken. The child executions continue to run.
        ///
        ///
        /// A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault is returned.
        public var childPolicy: SWFClientTypes.ChildPolicy?
        /// The data attached to the event that can be used by the decider in subsequent workflow tasks. This data isn't sent to the child workflow execution.
        public var control: Swift.String?
        /// The total duration for this workflow execution. This overrides the defaultExecutionStartToCloseTimeout specified when registering the workflow type. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration. An execution start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default execution start-to-close timeout was specified at registration time then a fault is returned.
        public var executionStartToCloseTimeout: Swift.String?
        /// The input to be provided to the workflow execution.
        public var input: Swift.String?
        /// The IAM role attached to the child workflow execution.
        public var lambdaRole: Swift.String?
        /// The list of tags to associate with the child workflow execution. A maximum of 5 tags can be specified. You can list workflow executions with a specific tag by calling [ListOpenWorkflowExecutions] or [ListClosedWorkflowExecutions] and specifying a [TagFilter].
        public var tagList: [Swift.String]?
        /// The name of the task list to be used for decision tasks of the child workflow execution. A task list for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task list was specified at registration time then a fault is returned. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not contain the literal string arn.
        public var taskList: SWFClientTypes.TaskList?
        /// A task priority that, if set, specifies the priority for a decision task of this workflow execution. This overrides the defaultTaskPriority specified when registering the workflow type. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see [Setting Task Priority](https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html) in the Amazon SWF Developer Guide.
        public var taskPriority: Swift.String?
        /// Specifies the maximum duration of decision tasks for this workflow execution. This parameter overrides the defaultTaskStartToCloseTimout specified when registering the workflow type using [RegisterWorkflowType]. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration. A task start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task start-to-close timeout was specified at registration time then a fault is returned.
        public var taskStartToCloseTimeout: Swift.String?
        /// The workflowId of the workflow execution. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not contain the literal string arn.
        /// This member is required.
        public var workflowId: Swift.String?
        /// The type of the workflow execution to be started.
        /// This member is required.
        public var workflowType: SWFClientTypes.WorkflowType?

        public init (
            childPolicy: SWFClientTypes.ChildPolicy? = nil,
            control: Swift.String? = nil,
            executionStartToCloseTimeout: Swift.String? = nil,
            input: Swift.String? = nil,
            lambdaRole: Swift.String? = nil,
            tagList: [Swift.String]? = nil,
            taskList: SWFClientTypes.TaskList? = nil,
            taskPriority: Swift.String? = nil,
            taskStartToCloseTimeout: Swift.String? = nil,
            workflowId: Swift.String? = nil,
            workflowType: SWFClientTypes.WorkflowType? = nil
        )
        {
            self.childPolicy = childPolicy
            self.control = control
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
            self.input = input
            self.lambdaRole = lambdaRole
            self.tagList = tagList
            self.taskList = taskList
            self.taskPriority = taskPriority
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.workflowId = workflowId
            self.workflowType = workflowType
        }
    }

}

extension SWFClientTypes {
    public enum StartChildWorkflowExecutionFailedCause: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case childCreationRateExceeded
        case defaultChildPolicyUndefined
        case defaultExecutionStartToCloseTimeoutUndefined
        case defaultTaskListUndefined
        case defaultTaskStartToCloseTimeoutUndefined
        case openChildrenLimitExceeded
        case openWorkflowsLimitExceeded
        case operationNotPermitted
        case workflowAlreadyRunning
        case workflowTypeDeprecated
        case workflowTypeDoesNotExist
        case sdkUnknown(Swift.String)

        public static var allCases: [StartChildWorkflowExecutionFailedCause] {
            return [
                .childCreationRateExceeded,
                .defaultChildPolicyUndefined,
                .defaultExecutionStartToCloseTimeoutUndefined,
                .defaultTaskListUndefined,
                .defaultTaskStartToCloseTimeoutUndefined,
                .openChildrenLimitExceeded,
                .openWorkflowsLimitExceeded,
                .operationNotPermitted,
                .workflowAlreadyRunning,
                .workflowTypeDeprecated,
                .workflowTypeDoesNotExist,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .childCreationRateExceeded: return "CHILD_CREATION_RATE_EXCEEDED"
            case .defaultChildPolicyUndefined: return "DEFAULT_CHILD_POLICY_UNDEFINED"
            case .defaultExecutionStartToCloseTimeoutUndefined: return "DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED"
            case .defaultTaskListUndefined: return "DEFAULT_TASK_LIST_UNDEFINED"
            case .defaultTaskStartToCloseTimeoutUndefined: return "DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED"
            case .openChildrenLimitExceeded: return "OPEN_CHILDREN_LIMIT_EXCEEDED"
            case .openWorkflowsLimitExceeded: return "OPEN_WORKFLOWS_LIMIT_EXCEEDED"
            case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
            case .workflowAlreadyRunning: return "WORKFLOW_ALREADY_RUNNING"
            case .workflowTypeDeprecated: return "WORKFLOW_TYPE_DEPRECATED"
            case .workflowTypeDoesNotExist: return "WORKFLOW_TYPE_DOES_NOT_EXIST"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StartChildWorkflowExecutionFailedCause(rawValue: rawValue) ?? StartChildWorkflowExecutionFailedCause.sdkUnknown(rawValue)
        }
    }
}

extension SWFClientTypes.StartChildWorkflowExecutionFailedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case control
        case decisionTaskCompletedEventId
        case initiatedEventId
        case workflowId
        case workflowType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if let control = self.control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if initiatedEventId != 0 {
            try encodeContainer.encode(initiatedEventId, forKey: .initiatedEventId)
        }
        if let workflowId = self.workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
        if let workflowType = self.workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let causeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.StartChildWorkflowExecutionFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let workflowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let initiatedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .initiatedEventId) ?? 0
        initiatedEventId = initiatedEventIdDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
        let controlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .control)
        control = controlDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the StartChildWorkflowExecutionFailed event.
    public struct StartChildWorkflowExecutionFailedEventAttributes: Swift.Equatable {
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. When cause is set to OPERATION_NOT_PERMITTED, the decision fails because it lacks sufficient permissions. For details and example IAM policies, see [ Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
        /// This member is required.
        public var cause: SWFClientTypes.StartChildWorkflowExecutionFailedCause?
        /// The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the child workflow execution.
        public var control: Swift.String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the StartChildWorkflowExecution[Decision] to request this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int
        /// When the cause is WORKFLOW_ALREADY_RUNNING, initiatedEventId is the ID of the StartChildWorkflowExecutionInitiated event that corresponds to the StartChildWorkflowExecution[Decision] to start the workflow execution. You can use this information to diagnose problems by tracing back the chain of events leading up to this event. When the cause isn't WORKFLOW_ALREADY_RUNNING, initiatedEventId is set to 0 because the StartChildWorkflowExecutionInitiated event doesn't exist.
        /// This member is required.
        public var initiatedEventId: Swift.Int
        /// The workflowId of the child workflow execution.
        /// This member is required.
        public var workflowId: Swift.String?
        /// The workflow type provided in the StartChildWorkflowExecution[Decision] that failed.
        /// This member is required.
        public var workflowType: SWFClientTypes.WorkflowType?

        public init (
            cause: SWFClientTypes.StartChildWorkflowExecutionFailedCause? = nil,
            control: Swift.String? = nil,
            decisionTaskCompletedEventId: Swift.Int = 0,
            initiatedEventId: Swift.Int = 0,
            workflowId: Swift.String? = nil,
            workflowType: SWFClientTypes.WorkflowType? = nil
        )
        {
            self.cause = cause
            self.control = control
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.initiatedEventId = initiatedEventId
            self.workflowId = workflowId
            self.workflowType = workflowType
        }
    }

}

extension SWFClientTypes.StartChildWorkflowExecutionInitiatedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case childPolicy
        case control
        case decisionTaskCompletedEventId
        case executionStartToCloseTimeout
        case input
        case lambdaRole
        case tagList
        case taskList
        case taskPriority
        case taskStartToCloseTimeout
        case workflowId
        case workflowType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childPolicy = self.childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if let control = self.control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let executionStartToCloseTimeout = self.executionStartToCloseTimeout {
            try encodeContainer.encode(executionStartToCloseTimeout, forKey: .executionStartToCloseTimeout)
        }
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let lambdaRole = self.lambdaRole {
            try encodeContainer.encode(lambdaRole, forKey: .lambdaRole)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for tag0 in tagList {
                try tagListContainer.encode(tag0)
            }
        }
        if let taskList = self.taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = self.taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
        if let taskStartToCloseTimeout = self.taskStartToCloseTimeout {
            try encodeContainer.encode(taskStartToCloseTimeout, forKey: .taskStartToCloseTimeout)
        }
        if let workflowId = self.workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
        if let workflowType = self.workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let controlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .control)
        control = controlDecoded
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
        let executionStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionStartToCloseTimeout)
        executionStartToCloseTimeout = executionStartToCloseTimeoutDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
        let childPolicyDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ChildPolicy.self, forKey: .childPolicy)
        childPolicy = childPolicyDecoded
        let taskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskStartToCloseTimeout)
        taskStartToCloseTimeout = taskStartToCloseTimeoutDecoded
        let tagListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagList)
        var tagListDecoded0:[Swift.String]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [Swift.String]()
            for string0 in tagListContainer {
                if let string0 = string0 {
                    tagListDecoded0?.append(string0)
                }
            }
        }
        tagList = tagListDecoded0
        let lambdaRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lambdaRole)
        lambdaRole = lambdaRoleDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the StartChildWorkflowExecutionInitiated event.
    public struct StartChildWorkflowExecutionInitiatedEventAttributes: Swift.Equatable {
        /// The policy to use for the child workflow executions if this execution gets terminated by explicitly calling the [TerminateWorkflowExecution] action or due to an expired timeout. The supported child policies are:
        ///
        /// * TERMINATE – The child executions are terminated.
        ///
        /// * REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.
        ///
        /// * ABANDON – No action is taken. The child executions continue to run.
        /// This member is required.
        public var childPolicy: SWFClientTypes.ChildPolicy?
        /// Data attached to the event that can be used by the decider in subsequent decision tasks. This data isn't sent to the activity.
        public var control: Swift.String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the StartChildWorkflowExecution[Decision] to request this child workflow execution. This information can be useful for diagnosing problems by tracing back the cause of events.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int
        /// The maximum duration for the child workflow execution. If the workflow execution isn't closed within this duration, it is timed out and force-terminated. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public var executionStartToCloseTimeout: Swift.String?
        /// The inputs provided to the child workflow execution.
        public var input: Swift.String?
        /// The IAM role to attach to the child workflow execution.
        public var lambdaRole: Swift.String?
        /// The list of tags to associated with the child workflow execution.
        public var tagList: [Swift.String]?
        /// The name of the task list used for the decision tasks of the child workflow execution.
        /// This member is required.
        public var taskList: SWFClientTypes.TaskList?
        /// The priority assigned for the decision tasks for this workflow execution. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see [Setting Task Priority](https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html) in the Amazon SWF Developer Guide.
        public var taskPriority: Swift.String?
        /// The maximum duration allowed for the decision tasks for this workflow execution. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public var taskStartToCloseTimeout: Swift.String?
        /// The workflowId of the child workflow execution.
        /// This member is required.
        public var workflowId: Swift.String?
        /// The type of the child workflow execution.
        /// This member is required.
        public var workflowType: SWFClientTypes.WorkflowType?

        public init (
            childPolicy: SWFClientTypes.ChildPolicy? = nil,
            control: Swift.String? = nil,
            decisionTaskCompletedEventId: Swift.Int = 0,
            executionStartToCloseTimeout: Swift.String? = nil,
            input: Swift.String? = nil,
            lambdaRole: Swift.String? = nil,
            tagList: [Swift.String]? = nil,
            taskList: SWFClientTypes.TaskList? = nil,
            taskPriority: Swift.String? = nil,
            taskStartToCloseTimeout: Swift.String? = nil,
            workflowId: Swift.String? = nil,
            workflowType: SWFClientTypes.WorkflowType? = nil
        )
        {
            self.childPolicy = childPolicy
            self.control = control
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
            self.input = input
            self.lambdaRole = lambdaRole
            self.tagList = tagList
            self.taskList = taskList
            self.taskPriority = taskPriority
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.workflowId = workflowId
            self.workflowType = workflowType
        }
    }

}

extension SWFClientTypes {
    public enum StartLambdaFunctionFailedCause: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case assumeRoleFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [StartLambdaFunctionFailedCause] {
            return [
                .assumeRoleFailed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .assumeRoleFailed: return "ASSUME_ROLE_FAILED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StartLambdaFunctionFailedCause(rawValue: rawValue) ?? StartLambdaFunctionFailedCause.sdkUnknown(rawValue)
        }
    }
}

extension SWFClientTypes.StartLambdaFunctionFailedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case message
        case scheduledEventId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if scheduledEventId != 0 {
            try encodeContainer.encode(scheduledEventId, forKey: .scheduledEventId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scheduledEventId) ?? 0
        scheduledEventId = scheduledEventIdDecoded
        let causeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.StartLambdaFunctionFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the StartLambdaFunctionFailed event. It isn't set for other event types.
    public struct StartLambdaFunctionFailedEventAttributes: Swift.Equatable {
        /// The cause of the failure. To help diagnose issues, use this information to trace back the chain of events leading up to this event. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because the IAM role attached to the execution lacked sufficient permissions. For details and example IAM policies, see [Lambda Tasks](https://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html) in the Amazon SWF Developer Guide.
        public var cause: SWFClientTypes.StartLambdaFunctionFailedCause?
        /// A description that can help diagnose the cause of the fault.
        public var message: Swift.String?
        /// The ID of the ActivityTaskScheduled event that was recorded when this activity task was scheduled. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
        public var scheduledEventId: Swift.Int

        public init (
            cause: SWFClientTypes.StartLambdaFunctionFailedCause? = nil,
            message: Swift.String? = nil,
            scheduledEventId: Swift.Int = 0
        )
        {
            self.cause = cause
            self.message = message
            self.scheduledEventId = scheduledEventId
        }
    }

}

extension SWFClientTypes.StartTimerDecisionAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case control
        case startToFireTimeout
        case timerId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let control = self.control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if let startToFireTimeout = self.startToFireTimeout {
            try encodeContainer.encode(startToFireTimeout, forKey: .startToFireTimeout)
        }
        if let timerId = self.timerId {
            try encodeContainer.encode(timerId, forKey: .timerId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timerId)
        timerId = timerIdDecoded
        let controlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .control)
        control = controlDecoded
        let startToFireTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startToFireTimeout)
        startToFireTimeout = startToFireTimeoutDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the StartTimer decision. Access Control You can use IAM policies to control this decision's access to Amazon SWF resources as follows:
    ///
    /// * Use a Resource element with the domain name to limit the action to only specified domains.
    ///
    /// * Use an Action element to allow or deny permission to call this action.
    ///
    /// * You cannot use an IAM policy to constrain this action's parameters.
    ///
    ///
    /// If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's cause parameter is set to OPERATION_NOT_PERMITTED. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
    public struct StartTimerDecisionAttributes: Swift.Equatable {
        /// The data attached to the event that can be used by the decider in subsequent workflow tasks.
        public var control: Swift.String?
        /// The duration to wait before firing the timer. The duration is specified in seconds, an integer greater than or equal to 0.
        /// This member is required.
        public var startToFireTimeout: Swift.String?
        /// The unique ID of the timer. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not contain the literal string arn.
        /// This member is required.
        public var timerId: Swift.String?

        public init (
            control: Swift.String? = nil,
            startToFireTimeout: Swift.String? = nil,
            timerId: Swift.String? = nil
        )
        {
            self.control = control
            self.startToFireTimeout = startToFireTimeout
            self.timerId = timerId
        }
    }

}

extension SWFClientTypes {
    public enum StartTimerFailedCause: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case openTimersLimitExceeded
        case operationNotPermitted
        case timerCreationRateExceeded
        case timerIdAlreadyInUse
        case sdkUnknown(Swift.String)

        public static var allCases: [StartTimerFailedCause] {
            return [
                .openTimersLimitExceeded,
                .operationNotPermitted,
                .timerCreationRateExceeded,
                .timerIdAlreadyInUse,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .openTimersLimitExceeded: return "OPEN_TIMERS_LIMIT_EXCEEDED"
            case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
            case .timerCreationRateExceeded: return "TIMER_CREATION_RATE_EXCEEDED"
            case .timerIdAlreadyInUse: return "TIMER_ID_ALREADY_IN_USE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StartTimerFailedCause(rawValue: rawValue) ?? StartTimerFailedCause.sdkUnknown(rawValue)
        }
    }
}

extension SWFClientTypes.StartTimerFailedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case decisionTaskCompletedEventId
        case timerId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let timerId = self.timerId {
            try encodeContainer.encode(timerId, forKey: .timerId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timerId)
        timerId = timerIdDecoded
        let causeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.StartTimerFailedCause.self, forKey: .cause)
        cause = causeDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the StartTimerFailed event.
    public struct StartTimerFailedEventAttributes: Swift.Equatable {
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
        /// This member is required.
        public var cause: SWFClientTypes.StartTimerFailedCause?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the StartTimer decision for this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int
        /// The timerId provided in the StartTimer decision that failed.
        /// This member is required.
        public var timerId: Swift.String?

        public init (
            cause: SWFClientTypes.StartTimerFailedCause? = nil,
            decisionTaskCompletedEventId: Swift.Int = 0,
            timerId: Swift.String? = nil
        )
        {
            self.cause = cause
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.timerId = timerId
        }
    }

}

extension StartWorkflowExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case childPolicy
        case domain
        case executionStartToCloseTimeout
        case input
        case lambdaRole
        case tagList
        case taskList
        case taskPriority
        case taskStartToCloseTimeout
        case workflowId
        case workflowType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childPolicy = self.childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let executionStartToCloseTimeout = self.executionStartToCloseTimeout {
            try encodeContainer.encode(executionStartToCloseTimeout, forKey: .executionStartToCloseTimeout)
        }
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let lambdaRole = self.lambdaRole {
            try encodeContainer.encode(lambdaRole, forKey: .lambdaRole)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for tag0 in tagList {
                try tagListContainer.encode(tag0)
            }
        }
        if let taskList = self.taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = self.taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
        if let taskStartToCloseTimeout = self.taskStartToCloseTimeout {
            try encodeContainer.encode(taskStartToCloseTimeout, forKey: .taskStartToCloseTimeout)
        }
        if let workflowId = self.workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
        if let workflowType = self.workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }
}

extension StartWorkflowExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartWorkflowExecutionInput: Swift.Equatable {
    /// If set, specifies the policy to use for the child workflow executions of this workflow execution if it is terminated, by calling the [TerminateWorkflowExecution] action explicitly or due to an expired timeout. This policy overrides the default child policy specified when registering the workflow type using [RegisterWorkflowType]. The supported child policies are:
    ///
    /// * TERMINATE – The child executions are terminated.
    ///
    /// * REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.
    ///
    /// * ABANDON – No action is taken. The child executions continue to run.
    ///
    ///
    /// A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault is returned.
    public var childPolicy: SWFClientTypes.ChildPolicy?
    /// The name of the domain in which the workflow execution is created.
    /// This member is required.
    public var domain: Swift.String?
    /// The total duration for this workflow execution. This overrides the defaultExecutionStartToCloseTimeout specified when registering the workflow type. The duration is specified in seconds; an integer greater than or equal to 0. Exceeding this limit causes the workflow execution to time out. Unlike some of the other timeout parameters in Amazon SWF, you cannot specify a value of "NONE" for this timeout; there is a one-year max limit on the time that a workflow execution can run. An execution start-to-close timeout must be specified either through this parameter or as a default when the workflow type is registered. If neither this parameter nor a default execution start-to-close timeout is specified, a fault is returned.
    public var executionStartToCloseTimeout: Swift.String?
    /// The input for the workflow execution. This is a free form string which should be meaningful to the workflow you are starting. This input is made available to the new workflow execution in the WorkflowExecutionStarted history event.
    public var input: Swift.String?
    /// The IAM role to attach to this workflow execution. Executions of this workflow type need IAM roles to invoke Lambda functions. If you don't attach an IAM role, any attempt to schedule a Lambda task fails. This results in a ScheduleLambdaFunctionFailed history event. For more information, see [https://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html](https://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html) in the Amazon SWF Developer Guide.
    public var lambdaRole: Swift.String?
    /// The list of tags to associate with the workflow execution. You can specify a maximum of 5 tags. You can list workflow executions with a specific tag by calling [ListOpenWorkflowExecutions] or [ListClosedWorkflowExecutions] and specifying a [TagFilter].
    public var tagList: [Swift.String]?
    /// The task list to use for the decision tasks generated for this workflow execution. This overrides the defaultTaskList specified when registering the workflow type. A task list for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task list was specified at registration time then a fault is returned. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not be the literal string arn.
    public var taskList: SWFClientTypes.TaskList?
    /// The task priority to use for this workflow execution. This overrides any default priority that was assigned when the workflow type was registered. If not set, then the default task priority for the workflow type is used. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see [Setting Task Priority](https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html) in the Amazon SWF Developer Guide.
    public var taskPriority: Swift.String?
    /// Specifies the maximum duration of decision tasks for this workflow execution. This parameter overrides the defaultTaskStartToCloseTimout specified when registering the workflow type using [RegisterWorkflowType]. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration. A task start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task start-to-close timeout was specified at registration time then a fault is returned.
    public var taskStartToCloseTimeout: Swift.String?
    /// The user defined identifier associated with the workflow execution. You can use this to associate a custom identifier with the workflow execution. You may specify the same identifier if a workflow execution is logically a restart of a previous execution. You cannot have two open workflow executions with the same workflowId at the same time within the same domain. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not be the literal string arn.
    /// This member is required.
    public var workflowId: Swift.String?
    /// The type of the workflow to start.
    /// This member is required.
    public var workflowType: SWFClientTypes.WorkflowType?

    public init (
        childPolicy: SWFClientTypes.ChildPolicy? = nil,
        domain: Swift.String? = nil,
        executionStartToCloseTimeout: Swift.String? = nil,
        input: Swift.String? = nil,
        lambdaRole: Swift.String? = nil,
        tagList: [Swift.String]? = nil,
        taskList: SWFClientTypes.TaskList? = nil,
        taskPriority: Swift.String? = nil,
        taskStartToCloseTimeout: Swift.String? = nil,
        workflowId: Swift.String? = nil,
        workflowType: SWFClientTypes.WorkflowType? = nil
    )
    {
        self.childPolicy = childPolicy
        self.domain = domain
        self.executionStartToCloseTimeout = executionStartToCloseTimeout
        self.input = input
        self.lambdaRole = lambdaRole
        self.tagList = tagList
        self.taskList = taskList
        self.taskPriority = taskPriority
        self.taskStartToCloseTimeout = taskStartToCloseTimeout
        self.workflowId = workflowId
        self.workflowType = workflowType
    }
}

struct StartWorkflowExecutionInputBody: Swift.Equatable {
    let domain: Swift.String?
    let workflowId: Swift.String?
    let workflowType: SWFClientTypes.WorkflowType?
    let taskList: SWFClientTypes.TaskList?
    let taskPriority: Swift.String?
    let input: Swift.String?
    let executionStartToCloseTimeout: Swift.String?
    let tagList: [Swift.String]?
    let taskStartToCloseTimeout: Swift.String?
    let childPolicy: SWFClientTypes.ChildPolicy?
    let lambdaRole: Swift.String?
}

extension StartWorkflowExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case childPolicy
        case domain
        case executionStartToCloseTimeout
        case input
        case lambdaRole
        case tagList
        case taskList
        case taskPriority
        case taskStartToCloseTimeout
        case workflowId
        case workflowType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let workflowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
        let executionStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionStartToCloseTimeout)
        executionStartToCloseTimeout = executionStartToCloseTimeoutDecoded
        let tagListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagList)
        var tagListDecoded0:[Swift.String]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [Swift.String]()
            for string0 in tagListContainer {
                if let string0 = string0 {
                    tagListDecoded0?.append(string0)
                }
            }
        }
        tagList = tagListDecoded0
        let taskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskStartToCloseTimeout)
        taskStartToCloseTimeout = taskStartToCloseTimeoutDecoded
        let childPolicyDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ChildPolicy.self, forKey: .childPolicy)
        childPolicy = childPolicyDecoded
        let lambdaRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lambdaRole)
        lambdaRole = lambdaRoleDecoded
    }
}

extension StartWorkflowExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartWorkflowExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DefaultUndefinedFault" : self = .defaultUndefinedFault(try DefaultUndefinedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededFault" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeDeprecatedFault" : self = .typeDeprecatedFault(try TypeDeprecatedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WorkflowExecutionAlreadyStartedFault" : self = .workflowExecutionAlreadyStartedFault(try WorkflowExecutionAlreadyStartedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartWorkflowExecutionOutputError: Swift.Error, Swift.Equatable {
    case defaultUndefinedFault(DefaultUndefinedFault)
    case limitExceededFault(LimitExceededFault)
    case operationNotPermittedFault(OperationNotPermittedFault)
    case typeDeprecatedFault(TypeDeprecatedFault)
    case unknownResourceFault(UnknownResourceFault)
    case workflowExecutionAlreadyStartedFault(WorkflowExecutionAlreadyStartedFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartWorkflowExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartWorkflowExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.runId = output.runId
        } else {
            self.runId = nil
        }
    }
}

/// Specifies the runId of a workflow execution.
public struct StartWorkflowExecutionOutputResponse: Swift.Equatable {
    /// The runId of a workflow execution. This ID is generated by the service and can be used to uniquely identify the workflow execution within a domain.
    public var runId: Swift.String?

    public init (
        runId: Swift.String? = nil
    )
    {
        self.runId = runId
    }
}

struct StartWorkflowExecutionOutputResponseBody: Swift.Equatable {
    let runId: Swift.String?
}

extension StartWorkflowExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case runId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
    }
}

extension SWFClientTypes.TagFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tag
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tag = self.tag {
            try encodeContainer.encode(tag, forKey: .tag)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tag)
        tag = tagDecoded
    }
}

extension SWFClientTypes {
    /// Used to filter the workflow executions in visibility APIs based on a tag.
    public struct TagFilter: Swift.Equatable {
        /// Specifies the tag that must be associated with the execution for it to meet the filter criteria. Tags may only contain unicode letters, digits, whitespace, or these symbols: _ . : / = + - @.
        /// This member is required.
        public var tag: Swift.String?

        public init (
            tag: Swift.String? = nil
        )
        {
            self.tag = tag
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for resourcetag0 in tags {
                try tagsContainer.encode(resourcetag0)
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) for the Amazon SWF domain.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The list of tags to add to a domain. Tags may only contain unicode letters, digits, whitespace, or these symbols: _ . : / = + - @.
    /// This member is required.
    public var tags: [SWFClientTypes.ResourceTag]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [SWFClientTypes.ResourceTag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tags: [SWFClientTypes.ResourceTag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SWFClientTypes.ResourceTag?].self, forKey: .tags)
        var tagsDecoded0:[SWFClientTypes.ResourceTag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SWFClientTypes.ResourceTag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceededFault" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsFault" : self = .tooManyTagsFault(try TooManyTagsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case limitExceededFault(LimitExceededFault)
    case operationNotPermittedFault(OperationNotPermittedFault)
    case tooManyTagsFault(TooManyTagsFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension SWFClientTypes.TaskList: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension SWFClientTypes {
    /// Represents a task list.
    public struct TaskList: Swift.Equatable {
        /// The name of the task list.
        /// This member is required.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension TerminateWorkflowExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case childPolicy
        case details
        case domain
        case reason
        case runId
        case workflowId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childPolicy = self.childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if let details = self.details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let runId = self.runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if let workflowId = self.workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
    }
}

extension TerminateWorkflowExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TerminateWorkflowExecutionInput: Swift.Equatable {
    /// If set, specifies the policy to use for the child workflow executions of the workflow execution being terminated. This policy overrides the child policy specified for the workflow execution at registration time or when starting the execution. The supported child policies are:
    ///
    /// * TERMINATE – The child executions are terminated.
    ///
    /// * REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.
    ///
    /// * ABANDON – No action is taken. The child executions continue to run.
    ///
    ///
    /// A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault is returned.
    public var childPolicy: SWFClientTypes.ChildPolicy?
    /// Details for terminating the workflow execution.
    public var details: Swift.String?
    /// The domain of the workflow execution to terminate.
    /// This member is required.
    public var domain: Swift.String?
    /// A descriptive reason for terminating the workflow execution.
    public var reason: Swift.String?
    /// The runId of the workflow execution to terminate.
    public var runId: Swift.String?
    /// The workflowId of the workflow execution to terminate.
    /// This member is required.
    public var workflowId: Swift.String?

    public init (
        childPolicy: SWFClientTypes.ChildPolicy? = nil,
        details: Swift.String? = nil,
        domain: Swift.String? = nil,
        reason: Swift.String? = nil,
        runId: Swift.String? = nil,
        workflowId: Swift.String? = nil
    )
    {
        self.childPolicy = childPolicy
        self.details = details
        self.domain = domain
        self.reason = reason
        self.runId = runId
        self.workflowId = workflowId
    }
}

struct TerminateWorkflowExecutionInputBody: Swift.Equatable {
    let domain: Swift.String?
    let workflowId: Swift.String?
    let runId: Swift.String?
    let reason: Swift.String?
    let details: Swift.String?
    let childPolicy: SWFClientTypes.ChildPolicy?
}

extension TerminateWorkflowExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case childPolicy
        case details
        case domain
        case reason
        case runId
        case workflowId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let workflowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .details)
        details = detailsDecoded
        let childPolicyDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ChildPolicy.self, forKey: .childPolicy)
        childPolicy = childPolicyDecoded
    }
}

extension TerminateWorkflowExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TerminateWorkflowExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TerminateWorkflowExecutionOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension TerminateWorkflowExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TerminateWorkflowExecutionOutputResponse: Swift.Equatable {

    public init () { }
}

extension SWFClientTypes.TimerCanceledEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case decisionTaskCompletedEventId
        case startedEventId
        case timerId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
        if let timerId = self.timerId {
            try encodeContainer.encode(timerId, forKey: .timerId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timerId)
        timerId = timerIdDecoded
        let startedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedEventId) ?? 0
        startedEventId = startedEventIdDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the TimerCanceled event.
    public struct TimerCanceledEventAttributes: Swift.Equatable {
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the CancelTimer decision to cancel this timer. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int
        /// The ID of the TimerStarted event that was recorded when this timer was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var startedEventId: Swift.Int
        /// The unique ID of the timer that was canceled.
        /// This member is required.
        public var timerId: Swift.String?

        public init (
            decisionTaskCompletedEventId: Swift.Int = 0,
            startedEventId: Swift.Int = 0,
            timerId: Swift.String? = nil
        )
        {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.startedEventId = startedEventId
            self.timerId = timerId
        }
    }

}

extension SWFClientTypes.TimerFiredEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case startedEventId
        case timerId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if startedEventId != 0 {
            try encodeContainer.encode(startedEventId, forKey: .startedEventId)
        }
        if let timerId = self.timerId {
            try encodeContainer.encode(timerId, forKey: .timerId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timerId)
        timerId = timerIdDecoded
        let startedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedEventId) ?? 0
        startedEventId = startedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the TimerFired event.
    public struct TimerFiredEventAttributes: Swift.Equatable {
        /// The ID of the TimerStarted event that was recorded when this timer was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var startedEventId: Swift.Int
        /// The unique ID of the timer that fired.
        /// This member is required.
        public var timerId: Swift.String?

        public init (
            startedEventId: Swift.Int = 0,
            timerId: Swift.String? = nil
        )
        {
            self.startedEventId = startedEventId
            self.timerId = timerId
        }
    }

}

extension SWFClientTypes.TimerStartedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case control
        case decisionTaskCompletedEventId
        case startToFireTimeout
        case timerId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let control = self.control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let startToFireTimeout = self.startToFireTimeout {
            try encodeContainer.encode(startToFireTimeout, forKey: .startToFireTimeout)
        }
        if let timerId = self.timerId {
            try encodeContainer.encode(timerId, forKey: .timerId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timerId)
        timerId = timerIdDecoded
        let controlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .control)
        control = controlDecoded
        let startToFireTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startToFireTimeout)
        startToFireTimeout = startToFireTimeoutDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the TimerStarted event.
    public struct TimerStartedEventAttributes: Swift.Equatable {
        /// Data attached to the event that can be used by the decider in subsequent workflow tasks.
        public var control: Swift.String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the StartTimer decision for this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int
        /// The duration of time after which the timer fires. The duration is specified in seconds, an integer greater than or equal to 0.
        /// This member is required.
        public var startToFireTimeout: Swift.String?
        /// The unique ID of the timer that was started.
        /// This member is required.
        public var timerId: Swift.String?

        public init (
            control: Swift.String? = nil,
            decisionTaskCompletedEventId: Swift.Int = 0,
            startToFireTimeout: Swift.String? = nil,
            timerId: Swift.String? = nil
        )
        {
            self.control = control
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.startToFireTimeout = startToFireTimeout
            self.timerId = timerId
        }
    }

}

extension TooManyTagsFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TooManyTagsFaultBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You've exceeded the number of tags allowed for a domain.
public struct TooManyTagsFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyTagsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension TooManyTagsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TypeAlreadyExistsFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TypeAlreadyExistsFaultBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Returned if the type already exists in the specified domain. You may get this fault if you are registering a type that is either already registered or deprecated, or if you undeprecate a type that is currently registered.
public struct TypeAlreadyExistsFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description that may help with diagnosing the cause of the fault.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TypeAlreadyExistsFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension TypeAlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TypeDeprecatedFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TypeDeprecatedFaultBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Returned when the specified activity or workflow type was already deprecated.
public struct TypeDeprecatedFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description that may help with diagnosing the cause of the fault.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TypeDeprecatedFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension TypeDeprecatedFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UndeprecateActivityTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityType
        case domain
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityType = self.activityType {
            try encodeContainer.encode(activityType, forKey: .activityType)
        }
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
    }
}

extension UndeprecateActivityTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UndeprecateActivityTypeInput: Swift.Equatable {
    /// The activity type to undeprecate.
    /// This member is required.
    public var activityType: SWFClientTypes.ActivityType?
    /// The name of the domain of the deprecated activity type.
    /// This member is required.
    public var domain: Swift.String?

    public init (
        activityType: SWFClientTypes.ActivityType? = nil,
        domain: Swift.String? = nil
    )
    {
        self.activityType = activityType
        self.domain = domain
    }
}

struct UndeprecateActivityTypeInputBody: Swift.Equatable {
    let domain: Swift.String?
    let activityType: SWFClientTypes.ActivityType?
}

extension UndeprecateActivityTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityType
        case domain
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let activityTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ActivityType.self, forKey: .activityType)
        activityType = activityTypeDecoded
    }
}

extension UndeprecateActivityTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UndeprecateActivityTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeAlreadyExistsFault" : self = .typeAlreadyExistsFault(try TypeAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UndeprecateActivityTypeOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case typeAlreadyExistsFault(TypeAlreadyExistsFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension UndeprecateActivityTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UndeprecateActivityTypeOutputResponse: Swift.Equatable {

    public init () { }
}

extension UndeprecateDomainInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension UndeprecateDomainInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UndeprecateDomainInput: Swift.Equatable {
    /// The name of the domain of the deprecated workflow type.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct UndeprecateDomainInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension UndeprecateDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension UndeprecateDomainOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UndeprecateDomainOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DomainAlreadyExistsFault" : self = .domainAlreadyExistsFault(try DomainAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UndeprecateDomainOutputError: Swift.Error, Swift.Equatable {
    case domainAlreadyExistsFault(DomainAlreadyExistsFault)
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension UndeprecateDomainOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UndeprecateDomainOutputResponse: Swift.Equatable {

    public init () { }
}

extension UndeprecateWorkflowTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case workflowType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let workflowType = self.workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }
}

extension UndeprecateWorkflowTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UndeprecateWorkflowTypeInput: Swift.Equatable {
    /// The name of the domain of the deprecated workflow type.
    /// This member is required.
    public var domain: Swift.String?
    /// The name of the domain of the deprecated workflow type.
    /// This member is required.
    public var workflowType: SWFClientTypes.WorkflowType?

    public init (
        domain: Swift.String? = nil,
        workflowType: SWFClientTypes.WorkflowType? = nil
    )
    {
        self.domain = domain
        self.workflowType = workflowType
    }
}

struct UndeprecateWorkflowTypeInputBody: Swift.Equatable {
    let domain: Swift.String?
    let workflowType: SWFClientTypes.WorkflowType?
}

extension UndeprecateWorkflowTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case workflowType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
    }
}

extension UndeprecateWorkflowTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UndeprecateWorkflowTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeAlreadyExistsFault" : self = .typeAlreadyExistsFault(try TypeAlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UndeprecateWorkflowTypeOutputError: Swift.Error, Swift.Equatable {
    case operationNotPermittedFault(OperationNotPermittedFault)
    case typeAlreadyExistsFault(TypeAlreadyExistsFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension UndeprecateWorkflowTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UndeprecateWorkflowTypeOutputResponse: Swift.Equatable {

    public init () { }
}

extension UnknownResourceFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UnknownResourceFaultBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Returned when the named resource cannot be found with in the scope of this operation (region or domain). This could happen if the named resource was never created or is no longer available for this operation.
public struct UnknownResourceFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description that may help with diagnosing the cause of the fault.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UnknownResourceFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension UnknownResourceFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tagKeys
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for resourcetagkey0 in tagKeys {
                try tagKeysContainer.encode(resourcetagkey0)
            }
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) for the Amazon SWF domain.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The list of tags to remove from the Amazon SWF domain.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tagKeys
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceededFault" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotPermittedFault" : self = .operationNotPermittedFault(try OperationNotPermittedFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnknownResourceFault" : self = .unknownResourceFault(try UnknownResourceFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case limitExceededFault(LimitExceededFault)
    case operationNotPermittedFault(OperationNotPermittedFault)
    case unknownResourceFault(UnknownResourceFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension SWFClientTypes.WorkflowExecution: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case runId
        case workflowId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let runId = self.runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if let workflowId = self.workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
    }
}

extension SWFClientTypes {
    /// Represents a workflow execution.
    public struct WorkflowExecution: Swift.Equatable {
        /// A system-generated unique identifier for the workflow execution.
        /// This member is required.
        public var runId: Swift.String?
        /// The user defined identifier associated with the workflow execution.
        /// This member is required.
        public var workflowId: Swift.String?

        public init (
            runId: Swift.String? = nil,
            workflowId: Swift.String? = nil
        )
        {
            self.runId = runId
            self.workflowId = workflowId
        }
    }

}

extension WorkflowExecutionAlreadyStartedFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WorkflowExecutionAlreadyStartedFaultBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Returned by [StartWorkflowExecution] when an open execution with the same workflowId is already running in the specified domain.
public struct WorkflowExecutionAlreadyStartedFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description that may help with diagnosing the cause of the fault.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WorkflowExecutionAlreadyStartedFaultBody: Swift.Equatable {
    let message: Swift.String?
}

extension WorkflowExecutionAlreadyStartedFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SWFClientTypes {
    public enum WorkflowExecutionCancelRequestedCause: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case childPolicyApplied
        case sdkUnknown(Swift.String)

        public static var allCases: [WorkflowExecutionCancelRequestedCause] {
            return [
                .childPolicyApplied,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .childPolicyApplied: return "CHILD_POLICY_APPLIED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WorkflowExecutionCancelRequestedCause(rawValue: rawValue) ?? WorkflowExecutionCancelRequestedCause.sdkUnknown(rawValue)
        }
    }
}

extension SWFClientTypes.WorkflowExecutionCancelRequestedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case externalInitiatedEventId
        case externalWorkflowExecution
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if externalInitiatedEventId != 0 {
            try encodeContainer.encode(externalInitiatedEventId, forKey: .externalInitiatedEventId)
        }
        if let externalWorkflowExecution = self.externalWorkflowExecution {
            try encodeContainer.encode(externalWorkflowExecution, forKey: .externalWorkflowExecution)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let externalWorkflowExecutionDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecution.self, forKey: .externalWorkflowExecution)
        externalWorkflowExecution = externalWorkflowExecutionDecoded
        let externalInitiatedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .externalInitiatedEventId) ?? 0
        externalInitiatedEventId = externalInitiatedEventIdDecoded
        let causeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecutionCancelRequestedCause.self, forKey: .cause)
        cause = causeDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the WorkflowExecutionCancelRequested event.
    public struct WorkflowExecutionCancelRequestedEventAttributes: Swift.Equatable {
        /// If set, indicates that the request to cancel the workflow execution was automatically generated, and specifies the cause. This happens if the parent workflow execution times out or is terminated, and the child policy is set to cancel child executions.
        public var cause: SWFClientTypes.WorkflowExecutionCancelRequestedCause?
        /// The ID of the RequestCancelExternalWorkflowExecutionInitiated event corresponding to the RequestCancelExternalWorkflowExecution decision to cancel this workflow execution.The source event with this ID can be found in the history of the source workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public var externalInitiatedEventId: Swift.Int
        /// The external workflow execution for which the cancellation was requested.
        public var externalWorkflowExecution: SWFClientTypes.WorkflowExecution?

        public init (
            cause: SWFClientTypes.WorkflowExecutionCancelRequestedCause? = nil,
            externalInitiatedEventId: Swift.Int = 0,
            externalWorkflowExecution: SWFClientTypes.WorkflowExecution? = nil
        )
        {
            self.cause = cause
            self.externalInitiatedEventId = externalInitiatedEventId
            self.externalWorkflowExecution = externalWorkflowExecution
        }
    }

}

extension SWFClientTypes.WorkflowExecutionCanceledEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case decisionTaskCompletedEventId
        case details
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let details = self.details {
            try encodeContainer.encode(details, forKey: .details)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .details)
        details = detailsDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the WorkflowExecutionCanceled event.
    public struct WorkflowExecutionCanceledEventAttributes: Swift.Equatable {
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the CancelWorkflowExecution decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int
        /// The details of the cancellation.
        public var details: Swift.String?

        public init (
            decisionTaskCompletedEventId: Swift.Int = 0,
            details: Swift.String? = nil
        )
        {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.details = details
        }
    }

}

extension SWFClientTypes.WorkflowExecutionCompletedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case decisionTaskCompletedEventId
        case result
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let result = self.result {
            try encodeContainer.encode(result, forKey: .result)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .result)
        result = resultDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the WorkflowExecutionCompleted event.
    public struct WorkflowExecutionCompletedEventAttributes: Swift.Equatable {
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the CompleteWorkflowExecution decision to complete this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int
        /// The result produced by the workflow execution upon successful completion.
        public var result: Swift.String?

        public init (
            decisionTaskCompletedEventId: Swift.Int = 0,
            result: Swift.String? = nil
        )
        {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.result = result
        }
    }

}

extension SWFClientTypes.WorkflowExecutionConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case childPolicy
        case executionStartToCloseTimeout
        case lambdaRole
        case taskList
        case taskPriority
        case taskStartToCloseTimeout
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childPolicy = self.childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if let executionStartToCloseTimeout = self.executionStartToCloseTimeout {
            try encodeContainer.encode(executionStartToCloseTimeout, forKey: .executionStartToCloseTimeout)
        }
        if let lambdaRole = self.lambdaRole {
            try encodeContainer.encode(lambdaRole, forKey: .lambdaRole)
        }
        if let taskList = self.taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = self.taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
        if let taskStartToCloseTimeout = self.taskStartToCloseTimeout {
            try encodeContainer.encode(taskStartToCloseTimeout, forKey: .taskStartToCloseTimeout)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskStartToCloseTimeout)
        taskStartToCloseTimeout = taskStartToCloseTimeoutDecoded
        let executionStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionStartToCloseTimeout)
        executionStartToCloseTimeout = executionStartToCloseTimeoutDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let childPolicyDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ChildPolicy.self, forKey: .childPolicy)
        childPolicy = childPolicyDecoded
        let lambdaRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lambdaRole)
        lambdaRole = lambdaRoleDecoded
    }
}

extension SWFClientTypes {
    /// The configuration settings for a workflow execution including timeout values, tasklist etc. These configuration settings are determined from the defaults specified when registering the workflow type and those specified when starting the workflow execution.
    public struct WorkflowExecutionConfiguration: Swift.Equatable {
        /// The policy to use for the child workflow executions if this workflow execution is terminated, by calling the [TerminateWorkflowExecution] action explicitly or due to an expired timeout. The supported child policies are:
        ///
        /// * TERMINATE – The child executions are terminated.
        ///
        /// * REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.
        ///
        /// * ABANDON – No action is taken. The child executions continue to run.
        /// This member is required.
        public var childPolicy: SWFClientTypes.ChildPolicy?
        /// The total duration for this workflow execution. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        /// This member is required.
        public var executionStartToCloseTimeout: Swift.String?
        /// The IAM role attached to the child workflow execution.
        public var lambdaRole: Swift.String?
        /// The task list used for the decision tasks generated for this workflow execution.
        /// This member is required.
        public var taskList: SWFClientTypes.TaskList?
        /// The priority assigned to decision tasks for this workflow execution. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see [Setting Task Priority](https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html) in the Amazon SWF Developer Guide.
        public var taskPriority: Swift.String?
        /// The maximum duration allowed for decision tasks for this workflow execution. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        /// This member is required.
        public var taskStartToCloseTimeout: Swift.String?

        public init (
            childPolicy: SWFClientTypes.ChildPolicy? = nil,
            executionStartToCloseTimeout: Swift.String? = nil,
            lambdaRole: Swift.String? = nil,
            taskList: SWFClientTypes.TaskList? = nil,
            taskPriority: Swift.String? = nil,
            taskStartToCloseTimeout: Swift.String? = nil
        )
        {
            self.childPolicy = childPolicy
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
            self.lambdaRole = lambdaRole
            self.taskList = taskList
            self.taskPriority = taskPriority
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
        }
    }

}

extension SWFClientTypes.WorkflowExecutionContinuedAsNewEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case childPolicy
        case decisionTaskCompletedEventId
        case executionStartToCloseTimeout
        case input
        case lambdaRole
        case newExecutionRunId
        case tagList
        case taskList
        case taskPriority
        case taskStartToCloseTimeout
        case workflowType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childPolicy = self.childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let executionStartToCloseTimeout = self.executionStartToCloseTimeout {
            try encodeContainer.encode(executionStartToCloseTimeout, forKey: .executionStartToCloseTimeout)
        }
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let lambdaRole = self.lambdaRole {
            try encodeContainer.encode(lambdaRole, forKey: .lambdaRole)
        }
        if let newExecutionRunId = self.newExecutionRunId {
            try encodeContainer.encode(newExecutionRunId, forKey: .newExecutionRunId)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for tag0 in tagList {
                try tagListContainer.encode(tag0)
            }
        }
        if let taskList = self.taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = self.taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
        if let taskStartToCloseTimeout = self.taskStartToCloseTimeout {
            try encodeContainer.encode(taskStartToCloseTimeout, forKey: .taskStartToCloseTimeout)
        }
        if let workflowType = self.workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
        let newExecutionRunIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .newExecutionRunId)
        newExecutionRunId = newExecutionRunIdDecoded
        let executionStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionStartToCloseTimeout)
        executionStartToCloseTimeout = executionStartToCloseTimeoutDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let taskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskStartToCloseTimeout)
        taskStartToCloseTimeout = taskStartToCloseTimeoutDecoded
        let childPolicyDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ChildPolicy.self, forKey: .childPolicy)
        childPolicy = childPolicyDecoded
        let tagListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagList)
        var tagListDecoded0:[Swift.String]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [Swift.String]()
            for string0 in tagListContainer {
                if let string0 = string0 {
                    tagListDecoded0?.append(string0)
                }
            }
        }
        tagList = tagListDecoded0
        let workflowTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let lambdaRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lambdaRole)
        lambdaRole = lambdaRoleDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the WorkflowExecutionContinuedAsNew event.
    public struct WorkflowExecutionContinuedAsNewEventAttributes: Swift.Equatable {
        /// The policy to use for the child workflow executions of the new execution if it is terminated by calling the [TerminateWorkflowExecution] action explicitly or due to an expired timeout. The supported child policies are:
        ///
        /// * TERMINATE – The child executions are terminated.
        ///
        /// * REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.
        ///
        /// * ABANDON – No action is taken. The child executions continue to run.
        /// This member is required.
        public var childPolicy: SWFClientTypes.ChildPolicy?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the ContinueAsNewWorkflowExecution decision that started this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int
        /// The total duration allowed for the new workflow execution. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public var executionStartToCloseTimeout: Swift.String?
        /// The input provided to the new workflow execution.
        public var input: Swift.String?
        /// The IAM role to attach to the new (continued) workflow execution.
        public var lambdaRole: Swift.String?
        /// The runId of the new workflow execution.
        /// This member is required.
        public var newExecutionRunId: Swift.String?
        /// The list of tags associated with the new workflow execution.
        public var tagList: [Swift.String]?
        /// The task list to use for the decisions of the new (continued) workflow execution.
        /// This member is required.
        public var taskList: SWFClientTypes.TaskList?
        /// The priority of the task to use for the decisions of the new (continued) workflow execution.
        public var taskPriority: Swift.String?
        /// The maximum duration of decision tasks for the new workflow execution. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public var taskStartToCloseTimeout: Swift.String?
        /// The workflow type of this execution.
        /// This member is required.
        public var workflowType: SWFClientTypes.WorkflowType?

        public init (
            childPolicy: SWFClientTypes.ChildPolicy? = nil,
            decisionTaskCompletedEventId: Swift.Int = 0,
            executionStartToCloseTimeout: Swift.String? = nil,
            input: Swift.String? = nil,
            lambdaRole: Swift.String? = nil,
            newExecutionRunId: Swift.String? = nil,
            tagList: [Swift.String]? = nil,
            taskList: SWFClientTypes.TaskList? = nil,
            taskPriority: Swift.String? = nil,
            taskStartToCloseTimeout: Swift.String? = nil,
            workflowType: SWFClientTypes.WorkflowType? = nil
        )
        {
            self.childPolicy = childPolicy
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
            self.input = input
            self.lambdaRole = lambdaRole
            self.newExecutionRunId = newExecutionRunId
            self.tagList = tagList
            self.taskList = taskList
            self.taskPriority = taskPriority
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.workflowType = workflowType
        }
    }

}

extension SWFClientTypes.WorkflowExecutionFailedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case decisionTaskCompletedEventId
        case details
        case reason
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let details = self.details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .details)
        details = detailsDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the WorkflowExecutionFailed event.
    public struct WorkflowExecutionFailedEventAttributes: Swift.Equatable {
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the FailWorkflowExecution decision to fail this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int
        /// The details of the failure.
        public var details: Swift.String?
        /// The descriptive reason provided for the failure.
        public var reason: Swift.String?

        public init (
            decisionTaskCompletedEventId: Swift.Int = 0,
            details: Swift.String? = nil,
            reason: Swift.String? = nil
        )
        {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.details = details
            self.reason = reason
        }
    }

}

extension SWFClientTypes.WorkflowExecutionFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case workflowId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let workflowId = self.workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
    }
}

extension SWFClientTypes {
    /// Used to filter the workflow executions in visibility APIs by their workflowId.
    public struct WorkflowExecutionFilter: Swift.Equatable {
        /// The workflowId to pass of match the criteria of this filter.
        /// This member is required.
        public var workflowId: Swift.String?

        public init (
            workflowId: Swift.String? = nil
        )
        {
            self.workflowId = workflowId
        }
    }

}

extension SWFClientTypes.WorkflowExecutionInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cancelRequested
        case closeStatus
        case closeTimestamp
        case execution
        case executionStatus
        case parent
        case startTimestamp
        case tagList
        case workflowType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if cancelRequested != false {
            try encodeContainer.encode(cancelRequested, forKey: .cancelRequested)
        }
        if let closeStatus = self.closeStatus {
            try encodeContainer.encode(closeStatus.rawValue, forKey: .closeStatus)
        }
        if let closeTimestamp = self.closeTimestamp {
            try encodeContainer.encodeTimestamp(closeTimestamp, format: .epochSeconds, forKey: .closeTimestamp)
        }
        if let execution = self.execution {
            try encodeContainer.encode(execution, forKey: .execution)
        }
        if let executionStatus = self.executionStatus {
            try encodeContainer.encode(executionStatus.rawValue, forKey: .executionStatus)
        }
        if let parent = self.parent {
            try encodeContainer.encode(parent, forKey: .parent)
        }
        if let startTimestamp = self.startTimestamp {
            try encodeContainer.encodeTimestamp(startTimestamp, format: .epochSeconds, forKey: .startTimestamp)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for tag0 in tagList {
                try tagListContainer.encode(tag0)
            }
        }
        if let workflowType = self.workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecution.self, forKey: .execution)
        execution = executionDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let startTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTimestamp)
        startTimestamp = startTimestampDecoded
        let closeTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .closeTimestamp)
        closeTimestamp = closeTimestampDecoded
        let executionStatusDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ExecutionStatus.self, forKey: .executionStatus)
        executionStatus = executionStatusDecoded
        let closeStatusDecoded = try containerValues.decodeIfPresent(SWFClientTypes.CloseStatus.self, forKey: .closeStatus)
        closeStatus = closeStatusDecoded
        let parentDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecution.self, forKey: .parent)
        parent = parentDecoded
        let tagListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagList)
        var tagListDecoded0:[Swift.String]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [Swift.String]()
            for string0 in tagListContainer {
                if let string0 = string0 {
                    tagListDecoded0?.append(string0)
                }
            }
        }
        tagList = tagListDecoded0
        let cancelRequestedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .cancelRequested) ?? false
        cancelRequested = cancelRequestedDecoded
    }
}

extension SWFClientTypes {
    /// Contains information about a workflow execution.
    public struct WorkflowExecutionInfo: Swift.Equatable {
        /// Set to true if a cancellation is requested for this workflow execution.
        public var cancelRequested: Swift.Bool
        /// If the execution status is closed then this specifies how the execution was closed:
        ///
        /// * COMPLETED – the execution was successfully completed.
        ///
        /// * CANCELED – the execution was canceled.Cancellation allows the implementation to gracefully clean up before the execution is closed.
        ///
        /// * TERMINATED – the execution was force terminated.
        ///
        /// * FAILED – the execution failed to complete.
        ///
        /// * TIMED_OUT – the execution did not complete in the alloted time and was automatically timed out.
        ///
        /// * CONTINUED_AS_NEW – the execution is logically continued. This means the current execution was completed and a new execution was started to carry on the workflow.
        public var closeStatus: SWFClientTypes.CloseStatus?
        /// The time when the workflow execution was closed. Set only if the execution status is CLOSED.
        public var closeTimestamp: ClientRuntime.Date?
        /// The workflow execution this information is about.
        /// This member is required.
        public var execution: SWFClientTypes.WorkflowExecution?
        /// The current status of the execution.
        /// This member is required.
        public var executionStatus: SWFClientTypes.ExecutionStatus?
        /// If this workflow execution is a child of another execution then contains the workflow execution that started this execution.
        public var parent: SWFClientTypes.WorkflowExecution?
        /// The time when the execution was started.
        /// This member is required.
        public var startTimestamp: ClientRuntime.Date?
        /// The list of tags associated with the workflow execution. Tags can be used to identify and list workflow executions of interest through the visibility APIs. A workflow execution can have a maximum of 5 tags.
        public var tagList: [Swift.String]?
        /// The type of the workflow execution.
        /// This member is required.
        public var workflowType: SWFClientTypes.WorkflowType?

        public init (
            cancelRequested: Swift.Bool = false,
            closeStatus: SWFClientTypes.CloseStatus? = nil,
            closeTimestamp: ClientRuntime.Date? = nil,
            execution: SWFClientTypes.WorkflowExecution? = nil,
            executionStatus: SWFClientTypes.ExecutionStatus? = nil,
            parent: SWFClientTypes.WorkflowExecution? = nil,
            startTimestamp: ClientRuntime.Date? = nil,
            tagList: [Swift.String]? = nil,
            workflowType: SWFClientTypes.WorkflowType? = nil
        )
        {
            self.cancelRequested = cancelRequested
            self.closeStatus = closeStatus
            self.closeTimestamp = closeTimestamp
            self.execution = execution
            self.executionStatus = executionStatus
            self.parent = parent
            self.startTimestamp = startTimestamp
            self.tagList = tagList
            self.workflowType = workflowType
        }
    }

}

extension SWFClientTypes.WorkflowExecutionOpenCounts: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case openActivityTasks
        case openChildWorkflowExecutions
        case openDecisionTasks
        case openLambdaFunctions
        case openTimers
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if openActivityTasks != 0 {
            try encodeContainer.encode(openActivityTasks, forKey: .openActivityTasks)
        }
        if openChildWorkflowExecutions != 0 {
            try encodeContainer.encode(openChildWorkflowExecutions, forKey: .openChildWorkflowExecutions)
        }
        if openDecisionTasks != 0 {
            try encodeContainer.encode(openDecisionTasks, forKey: .openDecisionTasks)
        }
        if openLambdaFunctions != 0 {
            try encodeContainer.encode(openLambdaFunctions, forKey: .openLambdaFunctions)
        }
        if openTimers != 0 {
            try encodeContainer.encode(openTimers, forKey: .openTimers)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let openActivityTasksDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .openActivityTasks) ?? 0
        openActivityTasks = openActivityTasksDecoded
        let openDecisionTasksDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .openDecisionTasks) ?? 0
        openDecisionTasks = openDecisionTasksDecoded
        let openTimersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .openTimers) ?? 0
        openTimers = openTimersDecoded
        let openChildWorkflowExecutionsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .openChildWorkflowExecutions) ?? 0
        openChildWorkflowExecutions = openChildWorkflowExecutionsDecoded
        let openLambdaFunctionsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .openLambdaFunctions) ?? 0
        openLambdaFunctions = openLambdaFunctionsDecoded
    }
}

extension SWFClientTypes {
    /// Contains the counts of open tasks, child workflow executions and timers for a workflow execution.
    public struct WorkflowExecutionOpenCounts: Swift.Equatable {
        /// The count of activity tasks whose status is OPEN.
        /// This member is required.
        public var openActivityTasks: Swift.Int
        /// The count of child workflow executions whose status is OPEN.
        /// This member is required.
        public var openChildWorkflowExecutions: Swift.Int
        /// The count of decision tasks whose status is OPEN. A workflow execution can have at most one open decision task.
        /// This member is required.
        public var openDecisionTasks: Swift.Int
        /// The count of Lambda tasks whose status is OPEN.
        public var openLambdaFunctions: Swift.Int
        /// The count of timers started by this workflow execution that have not fired yet.
        /// This member is required.
        public var openTimers: Swift.Int

        public init (
            openActivityTasks: Swift.Int = 0,
            openChildWorkflowExecutions: Swift.Int = 0,
            openDecisionTasks: Swift.Int = 0,
            openLambdaFunctions: Swift.Int = 0,
            openTimers: Swift.Int = 0
        )
        {
            self.openActivityTasks = openActivityTasks
            self.openChildWorkflowExecutions = openChildWorkflowExecutions
            self.openDecisionTasks = openDecisionTasks
            self.openLambdaFunctions = openLambdaFunctions
            self.openTimers = openTimers
        }
    }

}

extension SWFClientTypes.WorkflowExecutionSignaledEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case externalInitiatedEventId
        case externalWorkflowExecution
        case input
        case signalName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if externalInitiatedEventId != 0 {
            try encodeContainer.encode(externalInitiatedEventId, forKey: .externalInitiatedEventId)
        }
        if let externalWorkflowExecution = self.externalWorkflowExecution {
            try encodeContainer.encode(externalWorkflowExecution, forKey: .externalWorkflowExecution)
        }
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let signalName = self.signalName {
            try encodeContainer.encode(signalName, forKey: .signalName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signalNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signalName)
        signalName = signalNameDecoded
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
        let externalWorkflowExecutionDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecution.self, forKey: .externalWorkflowExecution)
        externalWorkflowExecution = externalWorkflowExecutionDecoded
        let externalInitiatedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .externalInitiatedEventId) ?? 0
        externalInitiatedEventId = externalInitiatedEventIdDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the WorkflowExecutionSignaled event.
    public struct WorkflowExecutionSignaledEventAttributes: Swift.Equatable {
        /// The ID of the SignalExternalWorkflowExecutionInitiated event corresponding to the SignalExternalWorkflow decision to signal this workflow execution.The source event with this ID can be found in the history of the source workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event. This field is set only if the signal was initiated by another workflow execution.
        public var externalInitiatedEventId: Swift.Int
        /// The workflow execution that sent the signal. This is set only of the signal was sent by another workflow execution.
        public var externalWorkflowExecution: SWFClientTypes.WorkflowExecution?
        /// The inputs provided with the signal. The decider can use the signal name and inputs to determine how to process the signal.
        public var input: Swift.String?
        /// The name of the signal received. The decider can use the signal name and inputs to determine how to the process the signal.
        /// This member is required.
        public var signalName: Swift.String?

        public init (
            externalInitiatedEventId: Swift.Int = 0,
            externalWorkflowExecution: SWFClientTypes.WorkflowExecution? = nil,
            input: Swift.String? = nil,
            signalName: Swift.String? = nil
        )
        {
            self.externalInitiatedEventId = externalInitiatedEventId
            self.externalWorkflowExecution = externalWorkflowExecution
            self.input = input
            self.signalName = signalName
        }
    }

}

extension SWFClientTypes.WorkflowExecutionStartedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case childPolicy
        case continuedExecutionRunId
        case executionStartToCloseTimeout
        case input
        case lambdaRole
        case parentInitiatedEventId
        case parentWorkflowExecution
        case tagList
        case taskList
        case taskPriority
        case taskStartToCloseTimeout
        case workflowType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childPolicy = self.childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if let continuedExecutionRunId = self.continuedExecutionRunId {
            try encodeContainer.encode(continuedExecutionRunId, forKey: .continuedExecutionRunId)
        }
        if let executionStartToCloseTimeout = self.executionStartToCloseTimeout {
            try encodeContainer.encode(executionStartToCloseTimeout, forKey: .executionStartToCloseTimeout)
        }
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let lambdaRole = self.lambdaRole {
            try encodeContainer.encode(lambdaRole, forKey: .lambdaRole)
        }
        if parentInitiatedEventId != 0 {
            try encodeContainer.encode(parentInitiatedEventId, forKey: .parentInitiatedEventId)
        }
        if let parentWorkflowExecution = self.parentWorkflowExecution {
            try encodeContainer.encode(parentWorkflowExecution, forKey: .parentWorkflowExecution)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for tag0 in tagList {
                try tagListContainer.encode(tag0)
            }
        }
        if let taskList = self.taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = self.taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
        if let taskStartToCloseTimeout = self.taskStartToCloseTimeout {
            try encodeContainer.encode(taskStartToCloseTimeout, forKey: .taskStartToCloseTimeout)
        }
        if let workflowType = self.workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
        let executionStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionStartToCloseTimeout)
        executionStartToCloseTimeout = executionStartToCloseTimeoutDecoded
        let taskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskStartToCloseTimeout)
        taskStartToCloseTimeout = taskStartToCloseTimeoutDecoded
        let childPolicyDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ChildPolicy.self, forKey: .childPolicy)
        childPolicy = childPolicyDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let tagListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagList)
        var tagListDecoded0:[Swift.String]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [Swift.String]()
            for string0 in tagListContainer {
                if let string0 = string0 {
                    tagListDecoded0?.append(string0)
                }
            }
        }
        tagList = tagListDecoded0
        let continuedExecutionRunIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continuedExecutionRunId)
        continuedExecutionRunId = continuedExecutionRunIdDecoded
        let parentWorkflowExecutionDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecution.self, forKey: .parentWorkflowExecution)
        parentWorkflowExecution = parentWorkflowExecutionDecoded
        let parentInitiatedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .parentInitiatedEventId) ?? 0
        parentInitiatedEventId = parentInitiatedEventIdDecoded
        let lambdaRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lambdaRole)
        lambdaRole = lambdaRoleDecoded
    }
}

extension SWFClientTypes {
    /// Provides details of WorkflowExecutionStarted event.
    public struct WorkflowExecutionStartedEventAttributes: Swift.Equatable {
        /// The policy to use for the child workflow executions if this workflow execution is terminated, by calling the [TerminateWorkflowExecution] action explicitly or due to an expired timeout. The supported child policies are:
        ///
        /// * TERMINATE – The child executions are terminated.
        ///
        /// * REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.
        ///
        /// * ABANDON – No action is taken. The child executions continue to run.
        /// This member is required.
        public var childPolicy: SWFClientTypes.ChildPolicy?
        /// If this workflow execution was started due to a ContinueAsNewWorkflowExecution decision, then it contains the runId of the previous workflow execution that was closed and continued as this execution.
        public var continuedExecutionRunId: Swift.String?
        /// The maximum duration for this workflow execution. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public var executionStartToCloseTimeout: Swift.String?
        /// The input provided to the workflow execution.
        public var input: Swift.String?
        /// The IAM role attached to the workflow execution.
        public var lambdaRole: Swift.String?
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution[Decision] to start this workflow execution. The source event with this ID can be found in the history of the source workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public var parentInitiatedEventId: Swift.Int
        /// The source workflow execution that started this workflow execution. The member isn't set if the workflow execution was not started by a workflow.
        public var parentWorkflowExecution: SWFClientTypes.WorkflowExecution?
        /// The list of tags associated with this workflow execution. An execution can have up to 5 tags.
        public var tagList: [Swift.String]?
        /// The name of the task list for scheduling the decision tasks for this workflow execution.
        /// This member is required.
        public var taskList: SWFClientTypes.TaskList?
        /// The priority of the decision tasks in the workflow execution.
        public var taskPriority: Swift.String?
        /// The maximum duration of decision tasks for this workflow type. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public var taskStartToCloseTimeout: Swift.String?
        /// The workflow type of this execution.
        /// This member is required.
        public var workflowType: SWFClientTypes.WorkflowType?

        public init (
            childPolicy: SWFClientTypes.ChildPolicy? = nil,
            continuedExecutionRunId: Swift.String? = nil,
            executionStartToCloseTimeout: Swift.String? = nil,
            input: Swift.String? = nil,
            lambdaRole: Swift.String? = nil,
            parentInitiatedEventId: Swift.Int = 0,
            parentWorkflowExecution: SWFClientTypes.WorkflowExecution? = nil,
            tagList: [Swift.String]? = nil,
            taskList: SWFClientTypes.TaskList? = nil,
            taskPriority: Swift.String? = nil,
            taskStartToCloseTimeout: Swift.String? = nil,
            workflowType: SWFClientTypes.WorkflowType? = nil
        )
        {
            self.childPolicy = childPolicy
            self.continuedExecutionRunId = continuedExecutionRunId
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
            self.input = input
            self.lambdaRole = lambdaRole
            self.parentInitiatedEventId = parentInitiatedEventId
            self.parentWorkflowExecution = parentWorkflowExecution
            self.tagList = tagList
            self.taskList = taskList
            self.taskPriority = taskPriority
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.workflowType = workflowType
        }
    }

}

extension SWFClientTypes {
    public enum WorkflowExecutionTerminatedCause: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case childPolicyApplied
        case eventLimitExceeded
        case operatorInitiated
        case sdkUnknown(Swift.String)

        public static var allCases: [WorkflowExecutionTerminatedCause] {
            return [
                .childPolicyApplied,
                .eventLimitExceeded,
                .operatorInitiated,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .childPolicyApplied: return "CHILD_POLICY_APPLIED"
            case .eventLimitExceeded: return "EVENT_LIMIT_EXCEEDED"
            case .operatorInitiated: return "OPERATOR_INITIATED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WorkflowExecutionTerminatedCause(rawValue: rawValue) ?? WorkflowExecutionTerminatedCause.sdkUnknown(rawValue)
        }
    }
}

extension SWFClientTypes.WorkflowExecutionTerminatedEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case childPolicy
        case details
        case reason
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause.rawValue, forKey: .cause)
        }
        if let childPolicy = self.childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if let details = self.details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .details)
        details = detailsDecoded
        let childPolicyDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ChildPolicy.self, forKey: .childPolicy)
        childPolicy = childPolicyDecoded
        let causeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecutionTerminatedCause.self, forKey: .cause)
        cause = causeDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the WorkflowExecutionTerminated event.
    public struct WorkflowExecutionTerminatedEventAttributes: Swift.Equatable {
        /// If set, indicates that the workflow execution was automatically terminated, and specifies the cause. This happens if the parent workflow execution times out or is terminated and the child policy is set to terminate child executions.
        public var cause: SWFClientTypes.WorkflowExecutionTerminatedCause?
        /// The policy used for the child workflow executions of this workflow execution. The supported child policies are:
        ///
        /// * TERMINATE – The child executions are terminated.
        ///
        /// * REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.
        ///
        /// * ABANDON – No action is taken. The child executions continue to run.
        /// This member is required.
        public var childPolicy: SWFClientTypes.ChildPolicy?
        /// The details provided for the termination.
        public var details: Swift.String?
        /// The reason provided for the termination.
        public var reason: Swift.String?

        public init (
            cause: SWFClientTypes.WorkflowExecutionTerminatedCause? = nil,
            childPolicy: SWFClientTypes.ChildPolicy? = nil,
            details: Swift.String? = nil,
            reason: Swift.String? = nil
        )
        {
            self.cause = cause
            self.childPolicy = childPolicy
            self.details = details
            self.reason = reason
        }
    }

}

extension SWFClientTypes.WorkflowExecutionTimedOutEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case childPolicy
        case timeoutType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childPolicy = self.childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if let timeoutType = self.timeoutType {
            try encodeContainer.encode(timeoutType.rawValue, forKey: .timeoutType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeoutTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowExecutionTimeoutType.self, forKey: .timeoutType)
        timeoutType = timeoutTypeDecoded
        let childPolicyDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ChildPolicy.self, forKey: .childPolicy)
        childPolicy = childPolicyDecoded
    }
}

extension SWFClientTypes {
    /// Provides the details of the WorkflowExecutionTimedOut event.
    public struct WorkflowExecutionTimedOutEventAttributes: Swift.Equatable {
        /// The policy used for the child workflow executions of this workflow execution. The supported child policies are:
        ///
        /// * TERMINATE – The child executions are terminated.
        ///
        /// * REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.
        ///
        /// * ABANDON – No action is taken. The child executions continue to run.
        /// This member is required.
        public var childPolicy: SWFClientTypes.ChildPolicy?
        /// The type of timeout that caused this event.
        /// This member is required.
        public var timeoutType: SWFClientTypes.WorkflowExecutionTimeoutType?

        public init (
            childPolicy: SWFClientTypes.ChildPolicy? = nil,
            timeoutType: SWFClientTypes.WorkflowExecutionTimeoutType? = nil
        )
        {
            self.childPolicy = childPolicy
            self.timeoutType = timeoutType
        }
    }

}

extension SWFClientTypes {
    public enum WorkflowExecutionTimeoutType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case startToClose
        case sdkUnknown(Swift.String)

        public static var allCases: [WorkflowExecutionTimeoutType] {
            return [
                .startToClose,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .startToClose: return "START_TO_CLOSE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WorkflowExecutionTimeoutType(rawValue: rawValue) ?? WorkflowExecutionTimeoutType.sdkUnknown(rawValue)
        }
    }
}

extension SWFClientTypes.WorkflowType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension SWFClientTypes {
    /// Represents a workflow type.
    public struct WorkflowType: Swift.Equatable {
        /// The name of the workflow type. The combination of workflow type name and version must be unique with in a domain.
        /// This member is required.
        public var name: Swift.String?
        /// The version of the workflow type. The combination of workflow type name and version must be unique with in a domain.
        /// This member is required.
        public var version: Swift.String?

        public init (
            name: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.name = name
            self.version = version
        }
    }

}

extension SWFClientTypes.WorkflowTypeConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultChildPolicy
        case defaultExecutionStartToCloseTimeout
        case defaultLambdaRole
        case defaultTaskList
        case defaultTaskPriority
        case defaultTaskStartToCloseTimeout
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultChildPolicy = self.defaultChildPolicy {
            try encodeContainer.encode(defaultChildPolicy.rawValue, forKey: .defaultChildPolicy)
        }
        if let defaultExecutionStartToCloseTimeout = self.defaultExecutionStartToCloseTimeout {
            try encodeContainer.encode(defaultExecutionStartToCloseTimeout, forKey: .defaultExecutionStartToCloseTimeout)
        }
        if let defaultLambdaRole = self.defaultLambdaRole {
            try encodeContainer.encode(defaultLambdaRole, forKey: .defaultLambdaRole)
        }
        if let defaultTaskList = self.defaultTaskList {
            try encodeContainer.encode(defaultTaskList, forKey: .defaultTaskList)
        }
        if let defaultTaskPriority = self.defaultTaskPriority {
            try encodeContainer.encode(defaultTaskPriority, forKey: .defaultTaskPriority)
        }
        if let defaultTaskStartToCloseTimeout = self.defaultTaskStartToCloseTimeout {
            try encodeContainer.encode(defaultTaskStartToCloseTimeout, forKey: .defaultTaskStartToCloseTimeout)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultTaskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultTaskStartToCloseTimeout)
        defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeoutDecoded
        let defaultExecutionStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultExecutionStartToCloseTimeout)
        defaultExecutionStartToCloseTimeout = defaultExecutionStartToCloseTimeoutDecoded
        let defaultTaskListDecoded = try containerValues.decodeIfPresent(SWFClientTypes.TaskList.self, forKey: .defaultTaskList)
        defaultTaskList = defaultTaskListDecoded
        let defaultTaskPriorityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultTaskPriority)
        defaultTaskPriority = defaultTaskPriorityDecoded
        let defaultChildPolicyDecoded = try containerValues.decodeIfPresent(SWFClientTypes.ChildPolicy.self, forKey: .defaultChildPolicy)
        defaultChildPolicy = defaultChildPolicyDecoded
        let defaultLambdaRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultLambdaRole)
        defaultLambdaRole = defaultLambdaRoleDecoded
    }
}

extension SWFClientTypes {
    /// The configuration settings of a workflow type.
    public struct WorkflowTypeConfiguration: Swift.Equatable {
        /// The default policy to use for the child workflow executions when a workflow execution of this type is terminated, by calling the [TerminateWorkflowExecution] action explicitly or due to an expired timeout. This default can be overridden when starting a workflow execution using the [StartWorkflowExecution] action or the StartChildWorkflowExecution[Decision]. The supported child policies are:
        ///
        /// * TERMINATE – The child executions are terminated.
        ///
        /// * REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.
        ///
        /// * ABANDON – No action is taken. The child executions continue to run.
        public var defaultChildPolicy: SWFClientTypes.ChildPolicy?
        /// The default maximum duration, specified when registering the workflow type, for executions of this workflow type. This default can be overridden when starting a workflow execution using the [StartWorkflowExecution] action or the StartChildWorkflowExecution[Decision]. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public var defaultExecutionStartToCloseTimeout: Swift.String?
        /// The default IAM role attached to this workflow type. Executions of this workflow type need IAM roles to invoke Lambda functions. If you don't specify an IAM role when starting this workflow type, the default Lambda role is attached to the execution. For more information, see [https://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html](https://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html) in the Amazon SWF Developer Guide.
        public var defaultLambdaRole: Swift.String?
        /// The default task list, specified when registering the workflow type, for decisions tasks scheduled for workflow executions of this type. This default can be overridden when starting a workflow execution using the [StartWorkflowExecution] action or the StartChildWorkflowExecution[Decision].
        public var defaultTaskList: SWFClientTypes.TaskList?
        /// The default task priority, specified when registering the workflow type, for all decision tasks of this workflow type. This default can be overridden when starting a workflow execution using the [StartWorkflowExecution] action or the StartChildWorkflowExecution decision. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see [Setting Task Priority](https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html) in the Amazon SWF Developer Guide.
        public var defaultTaskPriority: Swift.String?
        /// The default maximum duration, specified when registering the workflow type, that a decision task for executions of this workflow type might take before returning completion or failure. If the task doesn'tdo close in the specified time then the task is automatically timed out and rescheduled. If the decider eventually reports a completion or failure, it is ignored. This default can be overridden when starting a workflow execution using the [StartWorkflowExecution] action or the StartChildWorkflowExecution[Decision]. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public var defaultTaskStartToCloseTimeout: Swift.String?

        public init (
            defaultChildPolicy: SWFClientTypes.ChildPolicy? = nil,
            defaultExecutionStartToCloseTimeout: Swift.String? = nil,
            defaultLambdaRole: Swift.String? = nil,
            defaultTaskList: SWFClientTypes.TaskList? = nil,
            defaultTaskPriority: Swift.String? = nil,
            defaultTaskStartToCloseTimeout: Swift.String? = nil
        )
        {
            self.defaultChildPolicy = defaultChildPolicy
            self.defaultExecutionStartToCloseTimeout = defaultExecutionStartToCloseTimeout
            self.defaultLambdaRole = defaultLambdaRole
            self.defaultTaskList = defaultTaskList
            self.defaultTaskPriority = defaultTaskPriority
            self.defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout
        }
    }

}

extension SWFClientTypes.WorkflowTypeFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension SWFClientTypes {
    /// Used to filter workflow execution query results by type. Each parameter, if specified, defines a rule that must be satisfied by each returned result.
    public struct WorkflowTypeFilter: Swift.Equatable {
        /// Name of the workflow type.
        /// This member is required.
        public var name: Swift.String?
        /// Version of the workflow type.
        public var version: Swift.String?

        public init (
            name: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.name = name
            self.version = version
        }
    }

}

extension SWFClientTypes.WorkflowTypeInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate
        case deprecationDate
        case description
        case status
        case workflowType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = self.creationDate {
            try encodeContainer.encodeTimestamp(creationDate, format: .epochSeconds, forKey: .creationDate)
        }
        if let deprecationDate = self.deprecationDate {
            try encodeContainer.encodeTimestamp(deprecationDate, format: .epochSeconds, forKey: .deprecationDate)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let workflowType = self.workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowTypeDecoded = try containerValues.decodeIfPresent(SWFClientTypes.WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SWFClientTypes.RegistrationStatus.self, forKey: .status)
        status = statusDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
        let deprecationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .deprecationDate)
        deprecationDate = deprecationDateDecoded
    }
}

extension SWFClientTypes {
    /// Contains information about a workflow type.
    public struct WorkflowTypeInfo: Swift.Equatable {
        /// The date when this type was registered.
        /// This member is required.
        public var creationDate: ClientRuntime.Date?
        /// If the type is in deprecated state, then it is set to the date when the type was deprecated.
        public var deprecationDate: ClientRuntime.Date?
        /// The description of the type registered through [RegisterWorkflowType].
        public var description: Swift.String?
        /// The current status of the workflow type.
        /// This member is required.
        public var status: SWFClientTypes.RegistrationStatus?
        /// The workflow type this information is about.
        /// This member is required.
        public var workflowType: SWFClientTypes.WorkflowType?

        public init (
            creationDate: ClientRuntime.Date? = nil,
            deprecationDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            status: SWFClientTypes.RegistrationStatus? = nil,
            workflowType: SWFClientTypes.WorkflowType? = nil
        )
        {
            self.creationDate = creationDate
            self.deprecationDate = deprecationDate
            self.description = description
            self.status = status
            self.workflowType = workflowType
        }
    }

}
