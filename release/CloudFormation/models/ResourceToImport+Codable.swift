// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResourceToImport: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case logicalResourceId = "LogicalResourceId"
        case resourceIdentifier = "ResourceIdentifier"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: Key("LogicalResourceId"))
        }
        if let resourceIdentifier = resourceIdentifier {
            var resourceIdentifierContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ResourceIdentifier"))
            for (index0, element0) in resourceIdentifier.sorted(by: { $0.key < $1.key }).enumerated() {
                let resourceidentifierpropertykeyKey0 = element0.key
                let resourceidentifierpropertyvalueValue0 = element0.value
                var entryContainer0 = resourceIdentifierContainer.nestedContainer(keyedBy: Key.self, forKey: Key("entry.\(index0.advanced(by: 1))"))
                var keyContainer0 = entryContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("key"))
                try keyContainer0.encode(resourceidentifierpropertykeyKey0, forKey: Key(""))
                var valueContainer0 = entryContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("value"))
                try valueContainer0.encode(resourceidentifierpropertyvalueValue0, forKey: Key(""))
            }
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: Key("ResourceType"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
        if containerValues.contains(.resourceIdentifier) {
            struct KeyVal0{struct key{}; struct value{}}
            let resourceIdentifierWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: MapEntry<String, String, KeyVal0.key, KeyVal0.value>.CodingKeys.self, forKey: .resourceIdentifier)
            if let resourceIdentifierWrappedContainer = resourceIdentifierWrappedContainer {
                let resourceIdentifierContainer = try resourceIdentifierWrappedContainer.decodeIfPresent([MapKeyValue<String, String, KeyVal0.key, KeyVal0.value>].self, forKey: .entry)
                var resourceIdentifierBuffer: [String:String]? = nil
                if let resourceIdentifierContainer = resourceIdentifierContainer {
                    resourceIdentifierBuffer = [String:String]()
                    for stringContainer0 in resourceIdentifierContainer {
                        resourceIdentifierBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                resourceIdentifier = resourceIdentifierBuffer
            } else {
                resourceIdentifier = [:]
            }
        } else {
            resourceIdentifier = nil
        }
    }
}
