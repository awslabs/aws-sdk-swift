// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StackSetDriftDetectionDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case driftDetectionStatus = "DriftDetectionStatus"
        case driftStatus = "DriftStatus"
        case driftedStackInstancesCount = "DriftedStackInstancesCount"
        case failedStackInstancesCount = "FailedStackInstancesCount"
        case inProgressStackInstancesCount = "InProgressStackInstancesCount"
        case inSyncStackInstancesCount = "InSyncStackInstancesCount"
        case lastDriftCheckTimestamp = "LastDriftCheckTimestamp"
        case totalStackInstancesCount = "TotalStackInstancesCount"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let driftDetectionStatus = driftDetectionStatus {
            try container.encode(driftDetectionStatus, forKey: Key("DriftDetectionStatus"))
        }
        if let driftStatus = driftStatus {
            try container.encode(driftStatus, forKey: Key("DriftStatus"))
        }
        if driftedStackInstancesCount != 0 {
            try container.encode(driftedStackInstancesCount, forKey: Key("DriftedStackInstancesCount"))
        }
        if failedStackInstancesCount != 0 {
            try container.encode(failedStackInstancesCount, forKey: Key("FailedStackInstancesCount"))
        }
        if inProgressStackInstancesCount != 0 {
            try container.encode(inProgressStackInstancesCount, forKey: Key("InProgressStackInstancesCount"))
        }
        if inSyncStackInstancesCount != 0 {
            try container.encode(inSyncStackInstancesCount, forKey: Key("InSyncStackInstancesCount"))
        }
        if let lastDriftCheckTimestamp = lastDriftCheckTimestamp {
            try container.encode(TimestampWrapper(lastDriftCheckTimestamp, format: .dateTime), forKey: Key("lastDriftCheckTimestamp"))
        }
        if totalStackInstancesCount != 0 {
            try container.encode(totalStackInstancesCount, forKey: Key("TotalStackInstancesCount"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let driftStatusDecoded = try containerValues.decodeIfPresent(StackSetDriftStatus.self, forKey: .driftStatus)
        driftStatus = driftStatusDecoded
        let driftDetectionStatusDecoded = try containerValues.decodeIfPresent(StackSetDriftDetectionStatus.self, forKey: .driftDetectionStatus)
        driftDetectionStatus = driftDetectionStatusDecoded
        let lastDriftCheckTimestampDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastDriftCheckTimestamp)
        var lastDriftCheckTimestampBuffer:Date? = nil
        if let lastDriftCheckTimestampDecoded = lastDriftCheckTimestampDecoded {
            lastDriftCheckTimestampBuffer = try TimestampWrapperDecoder.parseDateStringValue(lastDriftCheckTimestampDecoded, format: .dateTime)
        }
        lastDriftCheckTimestamp = lastDriftCheckTimestampBuffer
        let totalStackInstancesCountDecoded = try containerValues.decode(Int.self, forKey: .totalStackInstancesCount)
        totalStackInstancesCount = totalStackInstancesCountDecoded
        let driftedStackInstancesCountDecoded = try containerValues.decode(Int.self, forKey: .driftedStackInstancesCount)
        driftedStackInstancesCount = driftedStackInstancesCountDecoded
        let inSyncStackInstancesCountDecoded = try containerValues.decode(Int.self, forKey: .inSyncStackInstancesCount)
        inSyncStackInstancesCount = inSyncStackInstancesCountDecoded
        let inProgressStackInstancesCountDecoded = try containerValues.decode(Int.self, forKey: .inProgressStackInstancesCount)
        inProgressStackInstancesCount = inProgressStackInstancesCountDecoded
        let failedStackInstancesCountDecoded = try containerValues.decode(Int.self, forKey: .failedStackInstancesCount)
        failedStackInstancesCount = failedStackInstancesCountDecoded
    }
}
