// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RollbackConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case monitoringTimeInMinutes = "MonitoringTimeInMinutes"
        case rollbackTriggers = "RollbackTriggers"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let monitoringTimeInMinutes = monitoringTimeInMinutes {
            try container.encode(monitoringTimeInMinutes, forKey: Key("MonitoringTimeInMinutes"))
        }
        if let rollbackTriggers = rollbackTriggers {
            var rollbackTriggersContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("RollbackTriggers"))
            for (index0, rollbacktrigger0) in rollbackTriggers.enumerated() {
                try rollbackTriggersContainer.encode(rollbacktrigger0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.rollbackTriggers) {
            struct KeyVal0{struct member{}}
            let rollbackTriggersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .rollbackTriggers)
            if let rollbackTriggersWrappedContainer = rollbackTriggersWrappedContainer {
                let rollbackTriggersContainer = try rollbackTriggersWrappedContainer.decodeIfPresent([RollbackTrigger].self, forKey: .member)
                var rollbackTriggersBuffer:[RollbackTrigger]? = nil
                if let rollbackTriggersContainer = rollbackTriggersContainer {
                    rollbackTriggersBuffer = [RollbackTrigger]()
                    for structureContainer0 in rollbackTriggersContainer {
                        rollbackTriggersBuffer?.append(structureContainer0)
                    }
                }
                rollbackTriggers = rollbackTriggersBuffer
            } else {
                rollbackTriggers = []
            }
        } else {
            rollbackTriggers = nil
        }
        let monitoringTimeInMinutesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .monitoringTimeInMinutes)
        monitoringTimeInMinutes = monitoringTimeInMinutesDecoded
    }
}
