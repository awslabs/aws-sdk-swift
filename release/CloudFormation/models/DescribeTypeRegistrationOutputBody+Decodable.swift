// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTypeRegistrationOutputBody: Equatable {
    public let progressStatus: RegistrationStatus?
    public let description: String?
    public let typeArn: String?
    public let typeVersionArn: String?
}

extension DescribeTypeRegistrationOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case progressStatus = "ProgressStatus"
        case typeArn = "TypeArn"
        case typeVersionArn = "TypeVersionArn"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeTypeRegistrationResult"))
        let progressStatusDecoded = try containerValues.decodeIfPresent(RegistrationStatus.self, forKey: .progressStatus)
        progressStatus = progressStatusDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let typeArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .typeArn)
        typeArn = typeArnDecoded
        let typeVersionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .typeVersionArn)
        typeVersionArn = typeVersionArnDecoded
    }
}
