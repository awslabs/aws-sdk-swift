// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StackSetSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoDeployment = "AutoDeployment"
        case description = "Description"
        case driftStatus = "DriftStatus"
        case lastDriftCheckTimestamp = "LastDriftCheckTimestamp"
        case permissionModel = "PermissionModel"
        case stackSetId = "StackSetId"
        case stackSetName = "StackSetName"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let autoDeployment = autoDeployment {
            try container.encode(autoDeployment, forKey: Key("AutoDeployment"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let driftStatus = driftStatus {
            try container.encode(driftStatus, forKey: Key("DriftStatus"))
        }
        if let lastDriftCheckTimestamp = lastDriftCheckTimestamp {
            try container.encode(TimestampWrapper(lastDriftCheckTimestamp, format: .dateTime), forKey: Key("lastDriftCheckTimestamp"))
        }
        if let permissionModel = permissionModel {
            try container.encode(permissionModel, forKey: Key("PermissionModel"))
        }
        if let stackSetId = stackSetId {
            try container.encode(stackSetId, forKey: Key("StackSetId"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: Key("StackSetName"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        let stackSetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stackSetId)
        stackSetId = stackSetIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(StackSetStatus.self, forKey: .status)
        status = statusDecoded
        let autoDeploymentDecoded = try containerValues.decodeIfPresent(AutoDeployment.self, forKey: .autoDeployment)
        autoDeployment = autoDeploymentDecoded
        let permissionModelDecoded = try containerValues.decodeIfPresent(PermissionModels.self, forKey: .permissionModel)
        permissionModel = permissionModelDecoded
        let driftStatusDecoded = try containerValues.decodeIfPresent(StackDriftStatus.self, forKey: .driftStatus)
        driftStatus = driftStatusDecoded
        let lastDriftCheckTimestampDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastDriftCheckTimestamp)
        var lastDriftCheckTimestampBuffer:Date? = nil
        if let lastDriftCheckTimestampDecoded = lastDriftCheckTimestampDecoded {
            lastDriftCheckTimestampBuffer = try TimestampWrapperDecoder.parseDateStringValue(lastDriftCheckTimestampDecoded, format: .dateTime)
        }
        lastDriftCheckTimestamp = lastDriftCheckTimestampBuffer
    }
}
