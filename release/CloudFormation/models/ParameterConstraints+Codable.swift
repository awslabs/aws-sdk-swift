// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ParameterConstraints: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allowedValues = "AllowedValues"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let allowedValues = allowedValues {
            var allowedValuesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("AllowedValues"))
            for (index0, allowedvalue0) in allowedValues.enumerated() {
                try allowedValuesContainer.encode(allowedvalue0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.allowedValues) {
            struct KeyVal0{struct member{}}
            let allowedValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .allowedValues)
            if let allowedValuesWrappedContainer = allowedValuesWrappedContainer {
                let allowedValuesContainer = try allowedValuesWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var allowedValuesBuffer:[String]? = nil
                if let allowedValuesContainer = allowedValuesContainer {
                    allowedValuesBuffer = [String]()
                    for stringContainer0 in allowedValuesContainer {
                        allowedValuesBuffer?.append(stringContainer0)
                    }
                }
                allowedValues = allowedValuesBuffer
            } else {
                allowedValues = []
            }
        } else {
            allowedValues = nil
        }
    }
}
