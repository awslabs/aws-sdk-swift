// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeStacksOutputBody: Equatable {
    public let stacks: [Stack]?
    public let nextToken: String?
}

extension DescribeStacksOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case stacks = "Stacks"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeStacksResult"))
        if containerValues.contains(.stacks) {
            struct KeyVal0{struct member{}}
            let stacksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stacks)
            if let stacksWrappedContainer = stacksWrappedContainer {
                let stacksContainer = try stacksWrappedContainer.decodeIfPresent([Stack].self, forKey: .member)
                var stacksBuffer:[Stack]? = nil
                if let stacksContainer = stacksContainer {
                    stacksBuffer = [Stack]()
                    for structureContainer0 in stacksContainer {
                        stacksBuffer?.append(structureContainer0)
                    }
                }
                stacks = stacksBuffer
            } else {
                stacks = []
            }
        } else {
            stacks = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
