// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTypeOutputBody: Equatable {
    public let arn: String?
    public let type: RegistryType?
    public let typeName: String?
    public let defaultVersionId: String?
    public let isDefaultVersion: Bool?
    public let description: String?
    public let schema: String?
    public let provisioningType: ProvisioningType?
    public let deprecatedStatus: DeprecatedStatus?
    public let loggingConfig: LoggingConfig?
    public let executionRoleArn: String?
    public let visibility: Visibility?
    public let sourceUrl: String?
    public let documentationUrl: String?
    public let lastUpdated: Date?
    public let timeCreated: Date?
}

extension DescribeTypeOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case defaultVersionId = "DefaultVersionId"
        case deprecatedStatus = "DeprecatedStatus"
        case description = "Description"
        case documentationUrl = "DocumentationUrl"
        case executionRoleArn = "ExecutionRoleArn"
        case isDefaultVersion = "IsDefaultVersion"
        case lastUpdated = "LastUpdated"
        case loggingConfig = "LoggingConfig"
        case provisioningType = "ProvisioningType"
        case schema = "Schema"
        case sourceUrl = "SourceUrl"
        case timeCreated = "TimeCreated"
        case type = "Type"
        case typeName = "TypeName"
        case visibility = "Visibility"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeTypeResult"))
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(RegistryType.self, forKey: .type)
        type = typeDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let defaultVersionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultVersionId)
        defaultVersionId = defaultVersionIdDecoded
        let isDefaultVersionDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .isDefaultVersion)
        isDefaultVersion = isDefaultVersionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let schemaDecoded = try containerValues.decodeIfPresent(String.self, forKey: .schema)
        schema = schemaDecoded
        let provisioningTypeDecoded = try containerValues.decodeIfPresent(ProvisioningType.self, forKey: .provisioningType)
        provisioningType = provisioningTypeDecoded
        let deprecatedStatusDecoded = try containerValues.decodeIfPresent(DeprecatedStatus.self, forKey: .deprecatedStatus)
        deprecatedStatus = deprecatedStatusDecoded
        let loggingConfigDecoded = try containerValues.decodeIfPresent(LoggingConfig.self, forKey: .loggingConfig)
        loggingConfig = loggingConfigDecoded
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let visibilityDecoded = try containerValues.decodeIfPresent(Visibility.self, forKey: .visibility)
        visibility = visibilityDecoded
        let sourceUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceUrl)
        sourceUrl = sourceUrlDecoded
        let documentationUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .documentationUrl)
        documentationUrl = documentationUrlDecoded
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastUpdated)
        var lastUpdatedBuffer:Date? = nil
        if let lastUpdatedDecoded = lastUpdatedDecoded {
            lastUpdatedBuffer = try TimestampWrapperDecoder.parseDateStringValue(lastUpdatedDecoded, format: .dateTime)
        }
        lastUpdated = lastUpdatedBuffer
        let timeCreatedDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timeCreated)
        var timeCreatedBuffer:Date? = nil
        if let timeCreatedDecoded = timeCreatedDecoded {
            timeCreatedBuffer = try TimestampWrapperDecoder.parseDateStringValue(timeCreatedDecoded, format: .dateTime)
        }
        timeCreated = timeCreatedBuffer
    }
}
