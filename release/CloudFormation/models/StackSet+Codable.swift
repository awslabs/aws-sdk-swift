// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StackSet: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case administrationRoleARN = "AdministrationRoleARN"
        case autoDeployment = "AutoDeployment"
        case capabilities = "Capabilities"
        case description = "Description"
        case executionRoleName = "ExecutionRoleName"
        case organizationalUnitIds = "OrganizationalUnitIds"
        case parameters = "Parameters"
        case permissionModel = "PermissionModel"
        case stackSetARN = "StackSetARN"
        case stackSetDriftDetectionDetails = "StackSetDriftDetectionDetails"
        case stackSetId = "StackSetId"
        case stackSetName = "StackSetName"
        case status = "Status"
        case tags = "Tags"
        case templateBody = "TemplateBody"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let administrationRoleARN = administrationRoleARN {
            try container.encode(administrationRoleARN, forKey: Key("AdministrationRoleARN"))
        }
        if let autoDeployment = autoDeployment {
            try container.encode(autoDeployment, forKey: Key("AutoDeployment"))
        }
        if let capabilities = capabilities {
            var capabilitiesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Capabilities"))
            for (index0, capability0) in capabilities.enumerated() {
                try capabilitiesContainer.encode(capability0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let executionRoleName = executionRoleName {
            try container.encode(executionRoleName, forKey: Key("ExecutionRoleName"))
        }
        if let organizationalUnitIds = organizationalUnitIds {
            var organizationalUnitIdsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("OrganizationalUnitIds"))
            for (index0, organizationalunitid0) in organizationalUnitIds.enumerated() {
                try organizationalUnitIdsContainer.encode(organizationalunitid0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let parameters = parameters {
            var parametersContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Parameters"))
            for (index0, parameter0) in parameters.enumerated() {
                try parametersContainer.encode(parameter0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let permissionModel = permissionModel {
            try container.encode(permissionModel, forKey: Key("PermissionModel"))
        }
        if let stackSetARN = stackSetARN {
            try container.encode(stackSetARN, forKey: Key("StackSetARN"))
        }
        if let stackSetDriftDetectionDetails = stackSetDriftDetectionDetails {
            try container.encode(stackSetDriftDetectionDetails, forKey: Key("StackSetDriftDetectionDetails"))
        }
        if let stackSetId = stackSetId {
            try container.encode(stackSetId, forKey: Key("StackSetId"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: Key("StackSetName"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: Key("TemplateBody"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        let stackSetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stackSetId)
        stackSetId = stackSetIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(StackSetStatus.self, forKey: .status)
        status = statusDecoded
        let templateBodyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct member{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([Parameter].self, forKey: .member)
                var parametersBuffer:[Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        if containerValues.contains(.capabilities) {
            struct KeyVal0{struct member{}}
            let capabilitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .capabilities)
            if let capabilitiesWrappedContainer = capabilitiesWrappedContainer {
                let capabilitiesContainer = try capabilitiesWrappedContainer.decodeIfPresent([Capability].self, forKey: .member)
                var capabilitiesBuffer:[Capability]? = nil
                if let capabilitiesContainer = capabilitiesContainer {
                    capabilitiesBuffer = [Capability]()
                    for stringContainer0 in capabilitiesContainer {
                        capabilitiesBuffer?.append(stringContainer0)
                    }
                }
                capabilities = capabilitiesBuffer
            } else {
                capabilities = []
            }
        } else {
            capabilities = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var tagsBuffer:[Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let stackSetARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stackSetARN)
        stackSetARN = stackSetARNDecoded
        let administrationRoleARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .administrationRoleARN)
        administrationRoleARN = administrationRoleARNDecoded
        let executionRoleNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .executionRoleName)
        executionRoleName = executionRoleNameDecoded
        let stackSetDriftDetectionDetailsDecoded = try containerValues.decodeIfPresent(StackSetDriftDetectionDetails.self, forKey: .stackSetDriftDetectionDetails)
        stackSetDriftDetectionDetails = stackSetDriftDetectionDetailsDecoded
        let autoDeploymentDecoded = try containerValues.decodeIfPresent(AutoDeployment.self, forKey: .autoDeployment)
        autoDeployment = autoDeploymentDecoded
        let permissionModelDecoded = try containerValues.decodeIfPresent(PermissionModels.self, forKey: .permissionModel)
        permissionModel = permissionModelDecoded
        if containerValues.contains(.organizationalUnitIds) {
            struct KeyVal0{struct member{}}
            let organizationalUnitIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .organizationalUnitIds)
            if let organizationalUnitIdsWrappedContainer = organizationalUnitIdsWrappedContainer {
                let organizationalUnitIdsContainer = try organizationalUnitIdsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var organizationalUnitIdsBuffer:[String]? = nil
                if let organizationalUnitIdsContainer = organizationalUnitIdsContainer {
                    organizationalUnitIdsBuffer = [String]()
                    for stringContainer0 in organizationalUnitIdsContainer {
                        organizationalUnitIdsBuffer?.append(stringContainer0)
                    }
                }
                organizationalUnitIds = organizationalUnitIdsBuffer
            } else {
                organizationalUnitIds = []
            }
        } else {
            organizationalUnitIds = nil
        }
    }
}
