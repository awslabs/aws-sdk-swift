// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListStackSetOperationsOutputBody: Equatable {
    public let summaries: [StackSetOperationSummary]?
    public let nextToken: String?
}

extension ListStackSetOperationsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case summaries = "Summaries"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListStackSetOperationsResult"))
        if containerValues.contains(.summaries) {
            struct KeyVal0{struct member{}}
            let summariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .summaries)
            if let summariesWrappedContainer = summariesWrappedContainer {
                let summariesContainer = try summariesWrappedContainer.decodeIfPresent([StackSetOperationSummary].self, forKey: .member)
                var summariesBuffer:[StackSetOperationSummary]? = nil
                if let summariesContainer = summariesContainer {
                    summariesBuffer = [StackSetOperationSummary]()
                    for structureContainer0 in summariesContainer {
                        summariesBuffer?.append(structureContainer0)
                    }
                }
                summaries = summariesBuffer
            } else {
                summaries = []
            }
        } else {
            summaries = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
