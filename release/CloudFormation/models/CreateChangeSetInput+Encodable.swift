// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateChangeSetInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let capabilities = capabilities {
            var capabilitiesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Capabilities"))
            for (index0, capability0) in capabilities.enumerated() {
                try capabilitiesContainer.encode(capability0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let changeSetName = changeSetName {
            try container.encode(changeSetName, forKey: Key("ChangeSetName"))
        }
        if let changeSetType = changeSetType {
            try container.encode(changeSetType, forKey: Key("ChangeSetType"))
        }
        if let clientToken = clientToken {
            try container.encode(clientToken, forKey: Key("ClientToken"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let includeNestedStacks = includeNestedStacks {
            try container.encode(includeNestedStacks, forKey: Key("IncludeNestedStacks"))
        }
        if let notificationARNs = notificationARNs {
            var notificationARNsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("NotificationARNs"))
            for (index0, notificationarn0) in notificationARNs.enumerated() {
                try notificationARNsContainer.encode(notificationarn0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let parameters = parameters {
            var parametersContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Parameters"))
            for (index0, parameter0) in parameters.enumerated() {
                try parametersContainer.encode(parameter0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let resourceTypes = resourceTypes {
            var resourceTypesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ResourceTypes"))
            for (index0, resourcetype0) in resourceTypes.enumerated() {
                try resourceTypesContainer.encode(resourcetype0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let resourcesToImport = resourcesToImport {
            var resourcesToImportContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ResourcesToImport"))
            for (index0, resourcetoimport0) in resourcesToImport.enumerated() {
                try resourcesToImportContainer.encode(resourcetoimport0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: Key("RoleARN"))
        }
        if let rollbackConfiguration = rollbackConfiguration {
            try container.encode(rollbackConfiguration, forKey: Key("RollbackConfiguration"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: Key("StackName"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: Key("TemplateURL"))
        }
        if let usePreviousTemplate = usePreviousTemplate {
            try container.encode(usePreviousTemplate, forKey: Key("UsePreviousTemplate"))
        }
        try container.encode("CreateChangeSet", forKey:Key("Action"))
        try container.encode("2010-05-15", forKey:Key("Version"))
    }
}
