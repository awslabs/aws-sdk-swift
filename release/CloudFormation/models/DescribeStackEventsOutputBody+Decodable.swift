// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeStackEventsOutputBody: Equatable {
    public let stackEvents: [StackEvent]?
    public let nextToken: String?
}

extension DescribeStackEventsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case stackEvents = "StackEvents"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeStackEventsResult"))
        if containerValues.contains(.stackEvents) {
            struct KeyVal0{struct member{}}
            let stackEventsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stackEvents)
            if let stackEventsWrappedContainer = stackEventsWrappedContainer {
                let stackEventsContainer = try stackEventsWrappedContainer.decodeIfPresent([StackEvent].self, forKey: .member)
                var stackEventsBuffer:[StackEvent]? = nil
                if let stackEventsContainer = stackEventsContainer {
                    stackEventsBuffer = [StackEvent]()
                    for structureContainer0 in stackEventsContainer {
                        stackEventsBuffer?.append(structureContainer0)
                    }
                }
                stackEvents = stackEventsBuffer
            } else {
                stackEvents = []
            }
        } else {
            stackEvents = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
