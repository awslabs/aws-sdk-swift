// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTypesOutputBody: Equatable {
    public let typeSummaries: [TypeSummary]?
    public let nextToken: String?
}

extension ListTypesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case typeSummaries = "TypeSummaries"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListTypesResult"))
        if containerValues.contains(.typeSummaries) {
            struct KeyVal0{struct member{}}
            let typeSummariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .typeSummaries)
            if let typeSummariesWrappedContainer = typeSummariesWrappedContainer {
                let typeSummariesContainer = try typeSummariesWrappedContainer.decodeIfPresent([TypeSummary].self, forKey: .member)
                var typeSummariesBuffer:[TypeSummary]? = nil
                if let typeSummariesContainer = typeSummariesContainer {
                    typeSummariesBuffer = [TypeSummary]()
                    for structureContainer0 in typeSummariesContainer {
                        typeSummariesBuffer?.append(structureContainer0)
                    }
                }
                typeSummaries = typeSummariesBuffer
            } else {
                typeSummaries = []
            }
        } else {
            typeSummaries = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
