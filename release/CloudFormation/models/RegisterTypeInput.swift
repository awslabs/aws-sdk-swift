// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct RegisterTypeInput: Equatable {
    /// <p>A unique identifier that acts as an idempotency key for this registration request. Specifying a client request token prevents CloudFormation from generating more than one version of an extension from the same registeration request, even if the request is submitted multiple times. </p>
    public let clientRequestToken: String?
    /// <p>The Amazon Resource Name (ARN) of the IAM role for CloudFormation to assume when invoking the extension. If your extension calls AWS APIs in any of its handlers, you must create an
    ///          <i>
    ///                <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM execution
    ///             role</a>
    ///             </i> that includes the necessary permissions to call those
    ///          AWS APIs, and provision that execution role in your account. When CloudFormation needs to invoke the extension handler, CloudFormation assumes this execution role to create a temporary session token, which it then passes to the extension handler, thereby supplying your extension with the appropriate credentials.</p>
    public let executionRoleArn: String?
    /// <p>Specifies logging configuration information for an extension.</p>
    public let loggingConfig: LoggingConfig?
    /// <p>A url to the S3 bucket containing the extension project package that contains the neccessary files for the extension you want to register.</p>
    ///          <p>For information on generating a schema handler package for the extension you want to register, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-cli-submit.html">submit</a> in the <i>CloudFormation CLI User Guide</i>.</p>
    ///          <note>
    ///             <p>The
    ///          user registering the extension must be able to access the package in the S3 bucket. That is, the user needs to have <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html">GetObject</a> permissions
    ///          for the schema handler package. For
    ///          more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazons3.html">Actions, Resources, and Condition Keys for Amazon S3</a> in the
    ///          <i>AWS Identity and Access Management User Guide</i>.</p>
    ///          </note>
    public let schemaHandlerPackage: String?
    /// <p>The kind of extension.</p>
    public let type: RegistryType?
    /// <p>The name of the extension being registered.</p>
    ///
    ///          <p>We recommend that extension names adhere to the following pattern: <i>company_or_organization</i>::<i>service</i>::<i>type</i>.</p>
    ///          <note>
    ///             <p>The following organization namespaces are reserved and cannot be used in your extension names:</p>
    ///             <ul>
    ///                <li>
    ///                   <p>
    ///                      <code>Alexa</code>
    ///                   </p>
    ///                </li>
    ///                <li>
    ///                   <p>
    ///                      <code>AMZN</code>
    ///                   </p>
    ///                </li>
    ///                <li>
    ///                   <p>
    ///                      <code>Amazon</code>
    ///                   </p>
    ///                </li>
    ///                <li>
    ///                   <p>
    ///                      <code>AWS</code>
    ///                   </p>
    ///                </li>
    ///                <li>
    ///                   <p>
    ///                      <code>Custom</code>
    ///                   </p>
    ///                </li>
    ///                <li>
    ///                   <p>
    ///                      <code>Dev</code>
    ///                   </p>
    ///                </li>
    ///             </ul>
    ///          </note>
    public let typeName: String?

    public init (
        clientRequestToken: String? = nil,
        executionRoleArn: String? = nil,
        loggingConfig: LoggingConfig? = nil,
        schemaHandlerPackage: String? = nil,
        type: RegistryType? = nil,
        typeName: String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.executionRoleArn = executionRoleArn
        self.loggingConfig = loggingConfig
        self.schemaHandlerPackage = schemaHandlerPackage
        self.type = type
        self.typeName = typeName
    }
}
