// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StackSetOperation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case action = "Action"
        case administrationRoleARN = "AdministrationRoleARN"
        case creationTimestamp = "CreationTimestamp"
        case deploymentTargets = "DeploymentTargets"
        case endTimestamp = "EndTimestamp"
        case executionRoleName = "ExecutionRoleName"
        case operationId = "OperationId"
        case operationPreferences = "OperationPreferences"
        case retainStacks = "RetainStacks"
        case stackSetDriftDetectionDetails = "StackSetDriftDetectionDetails"
        case stackSetId = "StackSetId"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let action = action {
            try container.encode(action, forKey: Key("Action"))
        }
        if let administrationRoleARN = administrationRoleARN {
            try container.encode(administrationRoleARN, forKey: Key("AdministrationRoleARN"))
        }
        if let creationTimestamp = creationTimestamp {
            try container.encode(TimestampWrapper(creationTimestamp, format: .dateTime), forKey: Key("creationTimestamp"))
        }
        if let deploymentTargets = deploymentTargets {
            try container.encode(deploymentTargets, forKey: Key("DeploymentTargets"))
        }
        if let endTimestamp = endTimestamp {
            try container.encode(TimestampWrapper(endTimestamp, format: .dateTime), forKey: Key("endTimestamp"))
        }
        if let executionRoleName = executionRoleName {
            try container.encode(executionRoleName, forKey: Key("ExecutionRoleName"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: Key("OperationPreferences"))
        }
        if let retainStacks = retainStacks {
            try container.encode(retainStacks, forKey: Key("RetainStacks"))
        }
        if let stackSetDriftDetectionDetails = stackSetDriftDetectionDetails {
            try container.encode(stackSetDriftDetectionDetails, forKey: Key("StackSetDriftDetectionDetails"))
        }
        if let stackSetId = stackSetId {
            try container.encode(stackSetId, forKey: Key("StackSetId"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .operationId)
        operationId = operationIdDecoded
        let stackSetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stackSetId)
        stackSetId = stackSetIdDecoded
        let actionDecoded = try containerValues.decodeIfPresent(StackSetOperationAction.self, forKey: .action)
        action = actionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(StackSetOperationStatus.self, forKey: .status)
        status = statusDecoded
        let operationPreferencesDecoded = try containerValues.decodeIfPresent(StackSetOperationPreferences.self, forKey: .operationPreferences)
        operationPreferences = operationPreferencesDecoded
        let retainStacksDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .retainStacks)
        retainStacks = retainStacksDecoded
        let administrationRoleARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .administrationRoleARN)
        administrationRoleARN = administrationRoleARNDecoded
        let executionRoleNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .executionRoleName)
        executionRoleName = executionRoleNameDecoded
        let creationTimestampDecoded = try containerValues.decodeIfPresent(String.self, forKey: .creationTimestamp)
        var creationTimestampBuffer:Date? = nil
        if let creationTimestampDecoded = creationTimestampDecoded {
            creationTimestampBuffer = try TimestampWrapperDecoder.parseDateStringValue(creationTimestampDecoded, format: .dateTime)
        }
        creationTimestamp = creationTimestampBuffer
        let endTimestampDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endTimestamp)
        var endTimestampBuffer:Date? = nil
        if let endTimestampDecoded = endTimestampDecoded {
            endTimestampBuffer = try TimestampWrapperDecoder.parseDateStringValue(endTimestampDecoded, format: .dateTime)
        }
        endTimestamp = endTimestampBuffer
        let deploymentTargetsDecoded = try containerValues.decodeIfPresent(DeploymentTargets.self, forKey: .deploymentTargets)
        deploymentTargets = deploymentTargetsDecoded
        let stackSetDriftDetectionDetailsDecoded = try containerValues.decodeIfPresent(StackSetDriftDetectionDetails.self, forKey: .stackSetDriftDetectionDetails)
        stackSetDriftDetectionDetails = stackSetDriftDetectionDetailsDecoded
    }
}
