// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Output: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case exportName = "ExportName"
        case outputKey = "OutputKey"
        case outputValue = "OutputValue"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let exportName = exportName {
            try container.encode(exportName, forKey: Key("ExportName"))
        }
        if let outputKey = outputKey {
            try container.encode(outputKey, forKey: Key("OutputKey"))
        }
        if let outputValue = outputValue {
            try container.encode(outputValue, forKey: Key("OutputValue"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outputKey)
        outputKey = outputKeyDecoded
        let outputValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outputValue)
        outputValue = outputValueDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let exportNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .exportName)
        exportName = exportNameDecoded
    }
}
