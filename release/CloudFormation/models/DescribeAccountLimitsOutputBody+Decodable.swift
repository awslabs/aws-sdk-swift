// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAccountLimitsOutputBody: Equatable {
    public let accountLimits: [AccountLimit]?
    public let nextToken: String?
}

extension DescribeAccountLimitsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accountLimits = "AccountLimits"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeAccountLimitsResult"))
        if containerValues.contains(.accountLimits) {
            struct KeyVal0{struct member{}}
            let accountLimitsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .accountLimits)
            if let accountLimitsWrappedContainer = accountLimitsWrappedContainer {
                let accountLimitsContainer = try accountLimitsWrappedContainer.decodeIfPresent([AccountLimit].self, forKey: .member)
                var accountLimitsBuffer:[AccountLimit]? = nil
                if let accountLimitsContainer = accountLimitsContainer {
                    accountLimitsBuffer = [AccountLimit]()
                    for structureContainer0 in accountLimitsContainer {
                        accountLimitsBuffer?.append(structureContainer0)
                    }
                }
                accountLimits = accountLimitsBuffer
            } else {
                accountLimits = []
            }
        } else {
            accountLimits = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
