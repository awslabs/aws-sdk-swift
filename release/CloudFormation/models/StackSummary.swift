// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>The StackSummary Data Type</p>
public struct StackSummary: Equatable {
    /// <p>The time the stack was created.</p>
    public let creationTime: Date?
    /// <p>The time the stack was deleted.</p>
    public let deletionTime: Date?
    /// <p>Summarizes information on whether a stack's actual configuration differs, or has
    ///             <i>drifted</i>, from it's expected configuration, as defined in the stack
    ///          template and any values specified as template parameters. For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html">Detecting Unregulated Configuration
    ///             Changes to Stacks and Resources</a>.</p>
    public let driftInformation: StackDriftInformationSummary?
    /// <p>The time the stack was last updated. This field will only be returned if the stack
    ///          has been updated at least once.</p>
    public let lastUpdatedTime: Date?
    /// <p>For nested stacks--stacks created as resources for another stack--the stack ID of the
    ///          direct parent of this stack. For the first level of nested stacks, the root stack is also
    ///          the parent stack.</p>
    ///          <p>For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html">Working with Nested Stacks</a> in the
    ///          <i>AWS CloudFormation User Guide</i>.</p>
    public let parentId: String?
    /// <p>For nested stacks--stacks created as resources for another stack--the stack ID of the
    ///          top-level stack to which the nested stack ultimately belongs.</p>
    ///          <p>For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html">Working with Nested Stacks</a> in the
    ///          <i>AWS CloudFormation User Guide</i>.</p>
    public let rootId: String?
    /// <p>Unique stack identifier.</p>
    public let stackId: String?
    /// <p>The name associated with the stack.</p>
    public let stackName: String?
    /// <p>The current status of the stack.</p>
    public let stackStatus: StackStatus?
    /// <p>Success/Failure message associated with the stack status.</p>
    public let stackStatusReason: String?
    /// <p>The template description of the template used to create the stack.</p>
    public let templateDescription: String?

    public init (
        creationTime: Date? = nil,
        deletionTime: Date? = nil,
        driftInformation: StackDriftInformationSummary? = nil,
        lastUpdatedTime: Date? = nil,
        parentId: String? = nil,
        rootId: String? = nil,
        stackId: String? = nil,
        stackName: String? = nil,
        stackStatus: StackStatus? = nil,
        stackStatusReason: String? = nil,
        templateDescription: String? = nil
    )
    {
        self.creationTime = creationTime
        self.deletionTime = deletionTime
        self.driftInformation = driftInformation
        self.lastUpdatedTime = lastUpdatedTime
        self.parentId = parentId
        self.rootId = rootId
        self.stackId = stackId
        self.stackName = stackName
        self.stackStatus = stackStatus
        self.stackStatusReason = stackStatusReason
        self.templateDescription = templateDescription
    }
}
