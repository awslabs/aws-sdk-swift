// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The user-specified preferences for how AWS CloudFormation performs a stack set
///          operation. </p>
///          <p>For more information on maximum concurrent accounts and failure tolerance, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options">Stack set operation options</a>.</p>
public struct StackSetOperationPreferences: Equatable {
    /// <p>The number of accounts, per Region, for which this operation can fail before AWS
    ///          CloudFormation stops the operation in that Region. If the operation is stopped in a Region,
    ///          AWS CloudFormation doesn't attempt the operation in any subsequent Regions.</p>
    ///          <p>Conditional: You must specify either <code>FailureToleranceCount</code> or
    ///             <code>FailureTolerancePercentage</code> (but not both).</p>
    public let failureToleranceCount: Int?
    /// <p>The percentage of accounts, per Region, for which this stack operation can fail
    ///          before AWS CloudFormation stops the operation in that Region. If the operation is stopped
    ///          in a Region, AWS CloudFormation doesn't attempt the operation in any subsequent
    ///          Regions.</p>
    ///          <p>When calculating the number of accounts based on the specified percentage, AWS
    ///          CloudFormation rounds <i>down</i> to the next whole number.</p>
    ///          <p>Conditional: You must specify either <code>FailureToleranceCount</code> or
    ///             <code>FailureTolerancePercentage</code>, but not both.</p>
    public let failureTolerancePercentage: Int?
    /// <p>The maximum number of accounts in which to perform this operation at one time. This
    ///          is dependent on the value of
    ///             <code>FailureToleranceCount</code>. <code>MaxConcurrentCount</code> is at most one more
    ///          than the <code>FailureToleranceCount</code>.</p>
    ///          <p>Note that this setting lets you specify the <i>maximum</i> for
    ///          operations. For large deployments, under certain circumstances the actual number of
    ///          accounts acted upon concurrently may be lower due to service throttling.</p>
    ///          <p>Conditional: You must specify either <code>MaxConcurrentCount</code> or
    ///             <code>MaxConcurrentPercentage</code>, but not both.</p>
    public let maxConcurrentCount: Int?
    /// <p>The maximum percentage of accounts in which to perform this operation at one
    ///          time.</p>
    ///          <p>When calculating the number of accounts based on the specified percentage, AWS
    ///          CloudFormation rounds down to the next whole number. This is true except in cases where
    ///          rounding down would result is zero. In this case, CloudFormation sets the number as one
    ///          instead.</p>
    ///          <p>Note that this setting lets you specify the <i>maximum</i> for
    ///          operations. For large deployments, under certain circumstances the actual number of
    ///          accounts acted upon concurrently may be lower due to service throttling.</p>
    ///          <p>Conditional: You must specify either <code>MaxConcurrentCount</code> or
    ///             <code>MaxConcurrentPercentage</code>, but not both.</p>
    public let maxConcurrentPercentage: Int?
    /// <p>The concurrency type of deploying StackSets operations in regions, could be in parallel or one region at a time.</p>
    public let regionConcurrencyType: RegionConcurrencyType?
    /// <p>The order of the Regions in where you want to perform the stack operation.</p>
    public let regionOrder: [String]?

    public init (
        failureToleranceCount: Int? = nil,
        failureTolerancePercentage: Int? = nil,
        maxConcurrentCount: Int? = nil,
        maxConcurrentPercentage: Int? = nil,
        regionConcurrencyType: RegionConcurrencyType? = nil,
        regionOrder: [String]? = nil
    )
    {
        self.failureToleranceCount = failureToleranceCount
        self.failureTolerancePercentage = failureTolerancePercentage
        self.maxConcurrentCount = maxConcurrentCount
        self.maxConcurrentPercentage = maxConcurrentPercentage
        self.regionConcurrencyType = regionConcurrencyType
        self.regionOrder = regionOrder
    }
}
