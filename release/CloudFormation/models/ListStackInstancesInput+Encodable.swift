// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ListStackInstancesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: Key("CallAs"))
        }
        if let filters = filters {
            var filtersContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Filters"))
            for (index0, stackinstancefilter0) in filters.enumerated() {
                try filtersContainer.encode(stackinstancefilter0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: Key("NextToken"))
        }
        if let stackInstanceAccount = stackInstanceAccount {
            try container.encode(stackInstanceAccount, forKey: Key("StackInstanceAccount"))
        }
        if let stackInstanceRegion = stackInstanceRegion {
            try container.encode(stackInstanceRegion, forKey: Key("StackInstanceRegion"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: Key("StackSetName"))
        }
        try container.encode("ListStackInstances", forKey:Key("Action"))
        try container.encode("2010-05-15", forKey:Key("Version"))
    }
}
