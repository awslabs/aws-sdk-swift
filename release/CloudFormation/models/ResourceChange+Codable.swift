// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResourceChange: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case action = "Action"
        case changeSetId = "ChangeSetId"
        case details = "Details"
        case logicalResourceId = "LogicalResourceId"
        case moduleInfo = "ModuleInfo"
        case physicalResourceId = "PhysicalResourceId"
        case replacement = "Replacement"
        case resourceType = "ResourceType"
        case scope = "Scope"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let action = action {
            try container.encode(action, forKey: Key("Action"))
        }
        if let changeSetId = changeSetId {
            try container.encode(changeSetId, forKey: Key("ChangeSetId"))
        }
        if let details = details {
            var detailsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Details"))
            for (index0, resourcechangedetail0) in details.enumerated() {
                try detailsContainer.encode(resourcechangedetail0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: Key("LogicalResourceId"))
        }
        if let moduleInfo = moduleInfo {
            try container.encode(moduleInfo, forKey: Key("ModuleInfo"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: Key("PhysicalResourceId"))
        }
        if let replacement = replacement {
            try container.encode(replacement, forKey: Key("Replacement"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: Key("ResourceType"))
        }
        if let scope = scope {
            var scopeContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Scope"))
            for (index0, resourceattribute0) in scope.enumerated() {
                try scopeContainer.encode(resourceattribute0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(ChangeAction.self, forKey: .action)
        action = actionDecoded
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
        let physicalResourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .physicalResourceId)
        physicalResourceId = physicalResourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let replacementDecoded = try containerValues.decodeIfPresent(Replacement.self, forKey: .replacement)
        replacement = replacementDecoded
        if containerValues.contains(.scope) {
            struct KeyVal0{struct member{}}
            let scopeWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scope)
            if let scopeWrappedContainer = scopeWrappedContainer {
                let scopeContainer = try scopeWrappedContainer.decodeIfPresent([ResourceAttribute].self, forKey: .member)
                var scopeBuffer:[ResourceAttribute]? = nil
                if let scopeContainer = scopeContainer {
                    scopeBuffer = [ResourceAttribute]()
                    for stringContainer0 in scopeContainer {
                        scopeBuffer?.append(stringContainer0)
                    }
                }
                scope = scopeBuffer
            } else {
                scope = []
            }
        } else {
            scope = nil
        }
        if containerValues.contains(.details) {
            struct KeyVal0{struct member{}}
            let detailsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .details)
            if let detailsWrappedContainer = detailsWrappedContainer {
                let detailsContainer = try detailsWrappedContainer.decodeIfPresent([ResourceChangeDetail].self, forKey: .member)
                var detailsBuffer:[ResourceChangeDetail]? = nil
                if let detailsContainer = detailsContainer {
                    detailsBuffer = [ResourceChangeDetail]()
                    for structureContainer0 in detailsContainer {
                        detailsBuffer?.append(structureContainer0)
                    }
                }
                details = detailsBuffer
            } else {
                details = []
            }
        } else {
            details = nil
        }
        let changeSetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .changeSetId)
        changeSetId = changeSetIdDecoded
        let moduleInfoDecoded = try containerValues.decodeIfPresent(ModuleInfo.self, forKey: .moduleInfo)
        moduleInfo = moduleInfoDecoded
    }
}
