// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeStackResourceDriftsOutputBody: Equatable {
    public let stackResourceDrifts: [StackResourceDrift]?
    public let nextToken: String?
}

extension DescribeStackResourceDriftsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case stackResourceDrifts = "StackResourceDrifts"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeStackResourceDriftsResult"))
        if containerValues.contains(.stackResourceDrifts) {
            struct KeyVal0{struct member{}}
            let stackResourceDriftsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stackResourceDrifts)
            if let stackResourceDriftsWrappedContainer = stackResourceDriftsWrappedContainer {
                let stackResourceDriftsContainer = try stackResourceDriftsWrappedContainer.decodeIfPresent([StackResourceDrift].self, forKey: .member)
                var stackResourceDriftsBuffer:[StackResourceDrift]? = nil
                if let stackResourceDriftsContainer = stackResourceDriftsContainer {
                    stackResourceDriftsBuffer = [StackResourceDrift]()
                    for structureContainer0 in stackResourceDriftsContainer {
                        stackResourceDriftsBuffer?.append(structureContainer0)
                    }
                }
                stackResourceDrifts = stackResourceDriftsBuffer
            } else {
                stackResourceDrifts = []
            }
        } else {
            stackResourceDrifts = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
