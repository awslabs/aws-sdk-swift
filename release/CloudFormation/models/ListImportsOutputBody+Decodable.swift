// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListImportsOutputBody: Equatable {
    public let imports: [String]?
    public let nextToken: String?
}

extension ListImportsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case imports = "Imports"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("ListImportsResult"))
        if containerValues.contains(.imports) {
            struct KeyVal0{struct member{}}
            let importsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .imports)
            if let importsWrappedContainer = importsWrappedContainer {
                let importsContainer = try importsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var importsBuffer:[String]? = nil
                if let importsContainer = importsContainer {
                    importsBuffer = [String]()
                    for stringContainer0 in importsContainer {
                        importsBuffer?.append(stringContainer0)
                    }
                }
                imports = importsBuffer
            } else {
                imports = []
            }
        } else {
            imports = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
