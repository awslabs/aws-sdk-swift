// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeStackResourcesOutputBody: Equatable {
    public let stackResources: [StackResource]?
}

extension DescribeStackResourcesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case stackResources = "StackResources"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeStackResourcesResult"))
        if containerValues.contains(.stackResources) {
            struct KeyVal0{struct member{}}
            let stackResourcesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stackResources)
            if let stackResourcesWrappedContainer = stackResourcesWrappedContainer {
                let stackResourcesContainer = try stackResourcesWrappedContainer.decodeIfPresent([StackResource].self, forKey: .member)
                var stackResourcesBuffer:[StackResource]? = nil
                if let stackResourcesContainer = stackResourcesContainer {
                    stackResourcesBuffer = [StackResource]()
                    for structureContainer0 in stackResourcesContainer {
                        stackResourcesBuffer?.append(structureContainer0)
                    }
                }
                stackResources = stackResourcesBuffer
            } else {
                stackResources = []
            }
        } else {
            stackResources = nil
        }
    }
}
