// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The input for <a>CreateStack</a> action.</p>
public struct CreateStackInput: Equatable {
    /// <p>In some cases, you must explicitly acknowledge that your stack template contains certain
    ///          capabilities in order for AWS CloudFormation to create the stack.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CAPABILITY_IAM</code> and <code>CAPABILITY_NAMED_IAM</code>
    ///                </p>
    ///                <p>Some stack templates might include resources that can affect permissions in
    ///                your AWS account; for example, by creating new AWS Identity and Access Management
    ///                (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one
    ///                of these capabilities.</p>
    ///                <p>The following IAM resources require you to specify either the
    ///                   <code>CAPABILITY_IAM</code> or <code>CAPABILITY_NAMED_IAM</code>
    ///                capability.</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>If you have IAM resources, you can specify either capability. </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>If you have IAM resources with custom names, you <i>must</i>
    ///                      specify <code>CAPABILITY_NAMED_IAM</code>. </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>If you don't specify either of these capabilities, AWS CloudFormation returns an
    ///                         <code>InsufficientCapabilities</code> error.</p>
    ///                   </li>
    ///                </ul>
    ///                <p>If your stack template contains these resources, we recommend that you review
    ///                all permissions associated with them and edit their permissions if
    ///                necessary.</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html">
    ///                         AWS::IAM::AccessKey</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html">
    ///                         AWS::IAM::Group</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html"> AWS::IAM::InstanceProfile</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html">
    ///                         AWS::IAM::Policy</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html">
    ///                         AWS::IAM::Role</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html">
    ///                         AWS::IAM::User</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html"> AWS::IAM::UserToGroupAddition</a>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///                <p>For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities">Acknowledging IAM
    ///                   Resources in AWS CloudFormation Templates</a>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CAPABILITY_AUTO_EXPAND</code>
    ///                </p>
    ///                <p>Some template contain macros. Macros perform custom processing on templates; this
    ///                can include simple actions like find-and-replace operations, all the way to extensive
    ///                transformations of entire templates. Because of this, users typically create a change
    ///                set from the processed template, so that they can review the changes resulting from
    ///                the macros before actually creating the stack. If your stack template contains one or
    ///                more macros, and you choose to create a stack directly from the processed template,
    ///                without first reviewing the resulting changes in a change set, you must acknowledge
    ///                this capability. This includes the <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html">AWS::Include</a> and <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html">AWS::Serverless</a> transforms, which are macros hosted by AWS CloudFormation.</p>
    ///                <p>If you want to create a stack
    ///                from a stack template that contains macros <i>and</i> nested stacks,
    ///                you must create the stack directly from the template using this capability.</p>
    ///                <important>
    ///                   <p>You should only create stacks directly from a stack template that contains
    ///                   macros if you know what processing the macro performs.</p>
    ///                   <p>Each macro relies on an underlying Lambda service function for processing stack
    ///                   templates. Be aware that the Lambda function owner can update the function
    ///                   operation without AWS CloudFormation being notified.</p>
    ///                </important>
    ///                <p>For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html">Using
    ///                   AWS CloudFormation Macros to Perform Custom Processing on
    ///                Templates</a>.</p>
    ///             </li>
    ///          </ul>
    public let capabilities: [Capability]?
    /// <p>A unique identifier for this <code>CreateStack</code> request. Specify this token if
    ///          you plan to retry requests so that AWS CloudFormation knows that you're not attempting to
    ///          create a stack with the same name. You might retry <code>CreateStack</code> requests to
    ///          ensure that AWS CloudFormation successfully received them.</p>
    ///          <p>All events triggered by a given stack operation are assigned the same client request
    ///          token, which you can use to track operations. For example, if you execute a
    ///          <code>CreateStack</code> operation with the token <code>token1</code>, then all the
    ///          <code>StackEvents</code> generated by that operation will have
    ///          <code>ClientRequestToken</code> set as <code>token1</code>.</p>
    ///          <p>In the console, stack operations display the client request token on the Events tab.
    ///          Stack operations that are initiated from the console use the token format
    ///          <i>Console-StackOperation-ID</i>, which helps you easily identify the
    ///          stack operation . For example, if you create a stack using the console, each stack event
    ///          would be assigned the same token in the following format:
    ///          <code>Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002</code>. </p>
    public let clientRequestToken: String?
    /// <p>Set to <code>true</code> to disable rollback of the stack if stack creation failed.
    ///          You can specify either <code>DisableRollback</code> or <code>OnFailure</code>, but not
    ///          both.</p>
    ///          <p>Default: <code>false</code>
    ///          </p>
    public let disableRollback: Bool?
    /// <p>Whether to enable termination protection on the specified stack. If a user attempts
    ///          to delete a stack with termination protection enabled, the operation fails and the stack
    ///          remains unchanged. For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html">Protecting a Stack From Being
    ///             Deleted</a> in the <i>AWS CloudFormation User Guide</i>. Termination protection is
    ///          disabled on stacks by default. </p>
    ///          <p> For <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html">nested stacks</a>,
    ///          termination protection is set on the root stack and cannot be changed directly on the
    ///          nested stack.</p>
    public let enableTerminationProtection: Bool?
    /// <p>The Simple Notification Service (SNS) topic ARNs to publish stack related events. You
    ///          can find your SNS topic ARNs using the SNS console or your Command Line Interface
    ///          (CLI).</p>
    public let notificationARNs: [String]?
    /// <p>Determines what action will be taken if stack creation fails. This must be one of:
    ///          DO_NOTHING, ROLLBACK, or DELETE. You can specify either <code>OnFailure</code> or
    ///             <code>DisableRollback</code>, but not both.</p>
    ///          <p>Default: <code>ROLLBACK</code>
    ///          </p>
    public let onFailure: OnFailure?
    /// <p>A list of <code>Parameter</code> structures that specify input parameters for the
    ///          stack. For more information, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html">Parameter</a> data
    ///          type.</p>
    public let parameters: [Parameter]?
    /// <p>The template resource types that you have permissions to work with for this create
    ///          stack action, such as <code>AWS::EC2::Instance</code>, <code>AWS::EC2::*</code>, or
    ///             <code>Custom::MyCustomInstance</code>. Use the following syntax to describe template
    ///          resource types: <code>AWS::*</code> (for all AWS resource), <code>Custom::*</code> (for all
    ///          custom resources), <code>Custom::<i>logical_ID</i>
    ///             </code> (for a specific custom resource),
    ///             <code>AWS::<i>service_name</i>::*</code> (for all resources of a
    ///          particular AWS service), and
    ///                <code>AWS::<i>service_name</i>::<i>resource_logical_ID</i>
    ///             </code> (for a specific AWS resource).</p>
    ///          <p>If the list of resource types doesn't include a resource that you're creating, the
    ///          stack creation fails. By default, AWS CloudFormation grants permissions to all resource
    ///          types. AWS Identity and Access Management (IAM) uses this parameter for AWS
    ///          CloudFormation-specific condition keys in IAM policies. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html">Controlling Access with AWS Identity and Access Management</a>.</p>
    public let resourceTypes: [String]?
    /// <p>The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role
    ///          that AWS CloudFormation assumes to create the stack. AWS CloudFormation uses the role's
    ///          credentials to make calls on your behalf. AWS CloudFormation always uses this role for all
    ///          future operations on the stack. As long as users have permission to operate on the stack,
    ///          AWS CloudFormation uses this role even if the users don't have permission to pass it.
    ///          Ensure that the role grants least privilege.</p>
    ///          <p>If you don't specify a value, AWS CloudFormation uses the role that was previously
    ///          associated with the stack. If no role is available, AWS CloudFormation uses a temporary
    ///          session that is generated from your user credentials.</p>
    public let roleARN: String?
    /// <p>The rollback triggers for AWS CloudFormation to monitor during stack creation and
    ///          updating operations, and for the specified monitoring period afterwards.</p>
    public let rollbackConfiguration: RollbackConfiguration?
    /// <p>The name that is associated with the stack. The name must be unique in the Region in
    ///          which you are creating the stack.</p>
    ///          <note>
    ///             <p>A stack name can contain only alphanumeric characters (case sensitive) and
    ///             hyphens. It must start with an alphabetic character and cannot be longer than 128
    ///             characters.</p>
    ///          </note>
    public let stackName: String?
    /// <p>Structure containing the stack policy body. For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/protect-stack-resources.html"> Prevent Updates
    ///             to Stack Resources</a> in the <i>AWS CloudFormation User Guide</i>.
    ///          You can specify either the <code>StackPolicyBody</code> or the <code>StackPolicyURL</code>
    ///          parameter, but not both.</p>
    public let stackPolicyBody: String?
    /// <p>Location of a file containing the stack policy. The URL must point to a policy
    ///          (maximum size: 16 KB) located in an S3 bucket in the same
    ///          Region as the stack. You can specify either the <code>StackPolicyBody</code> or the
    ///             <code>StackPolicyURL</code> parameter, but not both.</p>
    public let stackPolicyURL: String?
    /// <p>Key-value pairs to associate with this stack. AWS CloudFormation also propagates
    ///          these tags to the resources created in the stack. A maximum number of 50 tags can be
    ///          specified.</p>
    public let tags: [Tag]?
    /// <p>Structure containing the template body with a minimum length of 1 byte and a maximum
    ///          length of 51,200 bytes. For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
    ///          in the AWS CloudFormation User Guide.</p>
    ///          <p>Conditional: You must specify either the <code>TemplateBody</code> or the
    ///             <code>TemplateURL</code> parameter, but not both.</p>
    public let templateBody: String?
    /// <p>Location of file containing the template body. The URL must point to a template (max
    ///          size: 460,800 bytes) that is located in an Amazon S3 bucket or a Systems Manager document.
    ///          For more information, go to the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
    ///          in the AWS CloudFormation User Guide.</p>
    ///          <p>Conditional: You must specify either the <code>TemplateBody</code> or the
    ///             <code>TemplateURL</code> parameter, but not both.</p>
    public let templateURL: String?
    /// <p>The amount of time that can pass before the stack status becomes CREATE_FAILED; if
    ///             <code>DisableRollback</code> is not set or is set to <code>false</code>, the stack will
    ///          be rolled back.</p>
    public let timeoutInMinutes: Int?

    public init (
        capabilities: [Capability]? = nil,
        clientRequestToken: String? = nil,
        disableRollback: Bool? = nil,
        enableTerminationProtection: Bool? = nil,
        notificationARNs: [String]? = nil,
        onFailure: OnFailure? = nil,
        parameters: [Parameter]? = nil,
        resourceTypes: [String]? = nil,
        roleARN: String? = nil,
        rollbackConfiguration: RollbackConfiguration? = nil,
        stackName: String? = nil,
        stackPolicyBody: String? = nil,
        stackPolicyURL: String? = nil,
        tags: [Tag]? = nil,
        templateBody: String? = nil,
        templateURL: String? = nil,
        timeoutInMinutes: Int? = nil
    )
    {
        self.capabilities = capabilities
        self.clientRequestToken = clientRequestToken
        self.disableRollback = disableRollback
        self.enableTerminationProtection = enableTerminationProtection
        self.notificationARNs = notificationARNs
        self.onFailure = onFailure
        self.parameters = parameters
        self.resourceTypes = resourceTypes
        self.roleARN = roleARN
        self.rollbackConfiguration = rollbackConfiguration
        self.stackName = stackName
        self.stackPolicyBody = stackPolicyBody
        self.stackPolicyURL = stackPolicyURL
        self.tags = tags
        self.templateBody = templateBody
        self.templateURL = templateURL
        self.timeoutInMinutes = timeoutInMinutes
    }
}
