// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StackResource: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case driftInformation = "DriftInformation"
        case logicalResourceId = "LogicalResourceId"
        case moduleInfo = "ModuleInfo"
        case physicalResourceId = "PhysicalResourceId"
        case resourceStatus = "ResourceStatus"
        case resourceStatusReason = "ResourceStatusReason"
        case resourceType = "ResourceType"
        case stackId = "StackId"
        case stackName = "StackName"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let driftInformation = driftInformation {
            try container.encode(driftInformation, forKey: Key("DriftInformation"))
        }
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: Key("LogicalResourceId"))
        }
        if let moduleInfo = moduleInfo {
            try container.encode(moduleInfo, forKey: Key("ModuleInfo"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: Key("PhysicalResourceId"))
        }
        if let resourceStatus = resourceStatus {
            try container.encode(resourceStatus, forKey: Key("ResourceStatus"))
        }
        if let resourceStatusReason = resourceStatusReason {
            try container.encode(resourceStatusReason, forKey: Key("ResourceStatusReason"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: Key("ResourceType"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: Key("StackId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: Key("StackName"))
        }
        if let timestamp = timestamp {
            try container.encode(TimestampWrapper(timestamp, format: .dateTime), forKey: Key("timestamp"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
        let physicalResourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .physicalResourceId)
        physicalResourceId = physicalResourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timestamp)
        var timestampBuffer:Date? = nil
        if let timestampDecoded = timestampDecoded {
            timestampBuffer = try TimestampWrapperDecoder.parseDateStringValue(timestampDecoded, format: .dateTime)
        }
        timestamp = timestampBuffer
        let resourceStatusDecoded = try containerValues.decodeIfPresent(ResourceStatus.self, forKey: .resourceStatus)
        resourceStatus = resourceStatusDecoded
        let resourceStatusReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceStatusReason)
        resourceStatusReason = resourceStatusReasonDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let driftInformationDecoded = try containerValues.decodeIfPresent(StackResourceDriftInformation.self, forKey: .driftInformation)
        driftInformation = driftInformationDecoded
        let moduleInfoDecoded = try containerValues.decodeIfPresent(ModuleInfo.self, forKey: .moduleInfo)
        moduleInfo = moduleInfoDecoded
    }
}
