// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The <code>ResourceChange</code> structure describes the resource and the action that
///          AWS CloudFormation will perform on it if you execute this change set.</p>
public struct ResourceChange: Equatable {
    /// <p>The action that AWS CloudFormation takes on the resource, such as <code>Add</code>
    ///          (adds a new resource), <code>Modify</code> (changes a resource), <code>Remove</code>
    ///          (deletes a resource), <code>Import</code> (imports a resource), or <code>Dynamic</code>
    ///          (exact action for the resource cannot be determined).</p>
    public let action: ChangeAction?
    /// <p>The change set ID of the nested change set.</p>
    public let changeSetId: String?
    /// <p>For the <code>Modify</code> action, a list of <code>ResourceChangeDetail</code>
    ///          structures that describes the changes that AWS CloudFormation will make to the resource.
    ///       </p>
    public let details: [ResourceChangeDetail]?
    /// <p>The resource's logical ID, which is defined in the stack's template.</p>
    public let logicalResourceId: String?
    /// <p>Contains information about the module from which the resource was created, if the resource was created from a module included in the stack template.</p>
    public let moduleInfo: ModuleInfo?
    /// <p>The resource's physical ID (resource name). Resources that you are adding don't have
    ///          physical IDs because they haven't been created.</p>
    public let physicalResourceId: String?
    /// <p>For the <code>Modify</code> action, indicates whether AWS CloudFormation will replace
    ///          the resource by creating a new one and deleting the old one. This value depends on the
    ///          value of the <code>RequiresRecreation</code> property in the
    ///             <code>ResourceTargetDefinition</code> structure. For example, if the
    ///             <code>RequiresRecreation</code> field is <code>Always</code> and the
    ///             <code>Evaluation</code> field is <code>Static</code>, <code>Replacement</code> is
    ///             <code>True</code>. If the <code>RequiresRecreation</code> field is <code>Always</code>
    ///          and the <code>Evaluation</code> field is <code>Dynamic</code>, <code>Replacement</code> is
    ///             <code>Conditionally</code>.</p>
    ///          <p>If you have multiple changes with different <code>RequiresRecreation</code> values,
    ///          the <code>Replacement</code> value depends on the change with the most impact. A
    ///             <code>RequiresRecreation</code> value of <code>Always</code> has the most impact,
    ///          followed by <code>Conditionally</code>, and then <code>Never</code>.</p>
    public let replacement: Replacement?
    /// <p>The type of AWS CloudFormation resource, such as
    ///          <code>AWS::S3::Bucket</code>.</p>
    public let resourceType: String?
    /// <p>For the <code>Modify</code> action, indicates which resource attribute is triggering
    ///          this update, such as a change in the resource attribute's <code>Metadata</code>,
    ///             <code>Properties</code>, or <code>Tags</code>.</p>
    public let scope: [ResourceAttribute]?

    public init (
        action: ChangeAction? = nil,
        changeSetId: String? = nil,
        details: [ResourceChangeDetail]? = nil,
        logicalResourceId: String? = nil,
        moduleInfo: ModuleInfo? = nil,
        physicalResourceId: String? = nil,
        replacement: Replacement? = nil,
        resourceType: String? = nil,
        scope: [ResourceAttribute]? = nil
    )
    {
        self.action = action
        self.changeSetId = changeSetId
        self.details = details
        self.logicalResourceId = logicalResourceId
        self.moduleInfo = moduleInfo
        self.physicalResourceId = physicalResourceId
        self.replacement = replacement
        self.resourceType = resourceType
        self.scope = scope
    }
}
