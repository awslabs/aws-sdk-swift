// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ListTypeRegistrationsInput: Equatable {
    /// <p>The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.</p>
    public let maxResults: Int?
    /// <p>If the previous paginated request didn't return all of the remaining results, the response object's <code>NextToken</code> parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's <code>NextToken</code> parameter. If there are no remaining results, the previous response object's <code>NextToken</code> parameter is set to <code>null</code>.</p>
    public let nextToken: String?
    /// <p>The current status of the extension registration request.</p>
    ///          <p>The default is <code>IN_PROGRESS</code>.</p>
    public let registrationStatusFilter: RegistrationStatus?
    /// <p>The kind of extension.</p>
    ///          <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
    public let type: RegistryType?
    /// <p>The Amazon Resource Name (ARN) of the extension.</p>
    ///          <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
    public let typeArn: String?
    /// <p>The name of the extension.</p>
    ///          <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
    public let typeName: String?

    public init (
        maxResults: Int? = nil,
        nextToken: String? = nil,
        registrationStatusFilter: RegistrationStatus? = nil,
        type: RegistryType? = nil,
        typeArn: String? = nil,
        typeName: String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.registrationStatusFilter = registrationStatusFilter
        self.type = type
        self.typeArn = typeArn
        self.typeName = typeName
    }
}
