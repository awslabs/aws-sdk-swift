// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResourceChangeDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case causingEntity = "CausingEntity"
        case changeSource = "ChangeSource"
        case evaluation = "Evaluation"
        case target = "Target"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let causingEntity = causingEntity {
            try container.encode(causingEntity, forKey: Key("CausingEntity"))
        }
        if let changeSource = changeSource {
            try container.encode(changeSource, forKey: Key("ChangeSource"))
        }
        if let evaluation = evaluation {
            try container.encode(evaluation, forKey: Key("Evaluation"))
        }
        if let target = target {
            try container.encode(target, forKey: Key("Target"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetDecoded = try containerValues.decodeIfPresent(ResourceTargetDefinition.self, forKey: .target)
        target = targetDecoded
        let evaluationDecoded = try containerValues.decodeIfPresent(EvaluationType.self, forKey: .evaluation)
        evaluation = evaluationDecoded
        let changeSourceDecoded = try containerValues.decodeIfPresent(ChangeSource.self, forKey: .changeSource)
        changeSource = changeSourceDecoded
        let causingEntityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .causingEntity)
        causingEntity = causingEntityDecoded
    }
}
