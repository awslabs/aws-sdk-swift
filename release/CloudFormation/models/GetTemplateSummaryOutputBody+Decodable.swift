// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetTemplateSummaryOutputBody: Equatable {
    public let parameters: [ParameterDeclaration]?
    public let description: String?
    public let capabilities: [Capability]?
    public let capabilitiesReason: String?
    public let resourceTypes: [String]?
    public let version: String?
    public let metadata: String?
    public let declaredTransforms: [String]?
    public let resourceIdentifierSummaries: [ResourceIdentifierSummary]?
}

extension GetTemplateSummaryOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case capabilities = "Capabilities"
        case capabilitiesReason = "CapabilitiesReason"
        case declaredTransforms = "DeclaredTransforms"
        case description = "Description"
        case metadata = "Metadata"
        case parameters = "Parameters"
        case resourceIdentifierSummaries = "ResourceIdentifierSummaries"
        case resourceTypes = "ResourceTypes"
        case version = "Version"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("GetTemplateSummaryResult"))
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct member{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([ParameterDeclaration].self, forKey: .member)
                var parametersBuffer:[ParameterDeclaration]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [ParameterDeclaration]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.capabilities) {
            struct KeyVal0{struct member{}}
            let capabilitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .capabilities)
            if let capabilitiesWrappedContainer = capabilitiesWrappedContainer {
                let capabilitiesContainer = try capabilitiesWrappedContainer.decodeIfPresent([Capability].self, forKey: .member)
                var capabilitiesBuffer:[Capability]? = nil
                if let capabilitiesContainer = capabilitiesContainer {
                    capabilitiesBuffer = [Capability]()
                    for stringContainer0 in capabilitiesContainer {
                        capabilitiesBuffer?.append(stringContainer0)
                    }
                }
                capabilities = capabilitiesBuffer
            } else {
                capabilities = []
            }
        } else {
            capabilities = nil
        }
        let capabilitiesReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .capabilitiesReason)
        capabilitiesReason = capabilitiesReasonDecoded
        if containerValues.contains(.resourceTypes) {
            struct KeyVal0{struct member{}}
            let resourceTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .resourceTypes)
            if let resourceTypesWrappedContainer = resourceTypesWrappedContainer {
                let resourceTypesContainer = try resourceTypesWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var resourceTypesBuffer:[String]? = nil
                if let resourceTypesContainer = resourceTypesContainer {
                    resourceTypesBuffer = [String]()
                    for stringContainer0 in resourceTypesContainer {
                        resourceTypesBuffer?.append(stringContainer0)
                    }
                }
                resourceTypes = resourceTypesBuffer
            } else {
                resourceTypes = []
            }
        } else {
            resourceTypes = nil
        }
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let metadataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .metadata)
        metadata = metadataDecoded
        if containerValues.contains(.declaredTransforms) {
            struct KeyVal0{struct member{}}
            let declaredTransformsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .declaredTransforms)
            if let declaredTransformsWrappedContainer = declaredTransformsWrappedContainer {
                let declaredTransformsContainer = try declaredTransformsWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var declaredTransformsBuffer:[String]? = nil
                if let declaredTransformsContainer = declaredTransformsContainer {
                    declaredTransformsBuffer = [String]()
                    for stringContainer0 in declaredTransformsContainer {
                        declaredTransformsBuffer?.append(stringContainer0)
                    }
                }
                declaredTransforms = declaredTransformsBuffer
            } else {
                declaredTransforms = []
            }
        } else {
            declaredTransforms = nil
        }
        if containerValues.contains(.resourceIdentifierSummaries) {
            struct KeyVal0{struct member{}}
            let resourceIdentifierSummariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .resourceIdentifierSummaries)
            if let resourceIdentifierSummariesWrappedContainer = resourceIdentifierSummariesWrappedContainer {
                let resourceIdentifierSummariesContainer = try resourceIdentifierSummariesWrappedContainer.decodeIfPresent([ResourceIdentifierSummary].self, forKey: .member)
                var resourceIdentifierSummariesBuffer:[ResourceIdentifierSummary]? = nil
                if let resourceIdentifierSummariesContainer = resourceIdentifierSummariesContainer {
                    resourceIdentifierSummariesBuffer = [ResourceIdentifierSummary]()
                    for structureContainer0 in resourceIdentifierSummariesContainer {
                        resourceIdentifierSummariesBuffer?.append(structureContainer0)
                    }
                }
                resourceIdentifierSummaries = resourceIdentifierSummariesBuffer
            } else {
                resourceIdentifierSummaries = []
            }
        } else {
            resourceIdentifierSummaries = nil
        }
    }
}
