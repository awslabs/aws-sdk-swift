// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ChangeSetSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case changeSetId = "ChangeSetId"
        case changeSetName = "ChangeSetName"
        case creationTime = "CreationTime"
        case description = "Description"
        case executionStatus = "ExecutionStatus"
        case includeNestedStacks = "IncludeNestedStacks"
        case parentChangeSetId = "ParentChangeSetId"
        case rootChangeSetId = "RootChangeSetId"
        case stackId = "StackId"
        case stackName = "StackName"
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let changeSetId = changeSetId {
            try container.encode(changeSetId, forKey: Key("ChangeSetId"))
        }
        if let changeSetName = changeSetName {
            try container.encode(changeSetName, forKey: Key("ChangeSetName"))
        }
        if let creationTime = creationTime {
            try container.encode(TimestampWrapper(creationTime, format: .dateTime), forKey: Key("creationTime"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let executionStatus = executionStatus {
            try container.encode(executionStatus, forKey: Key("ExecutionStatus"))
        }
        if let includeNestedStacks = includeNestedStacks {
            try container.encode(includeNestedStacks, forKey: Key("IncludeNestedStacks"))
        }
        if let parentChangeSetId = parentChangeSetId {
            try container.encode(parentChangeSetId, forKey: Key("ParentChangeSetId"))
        }
        if let rootChangeSetId = rootChangeSetId {
            try container.encode(rootChangeSetId, forKey: Key("RootChangeSetId"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: Key("StackId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: Key("StackName"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: Key("StatusReason"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let stackNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let changeSetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .changeSetId)
        changeSetId = changeSetIdDecoded
        let changeSetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .changeSetName)
        changeSetName = changeSetNameDecoded
        let executionStatusDecoded = try containerValues.decodeIfPresent(ExecutionStatus.self, forKey: .executionStatus)
        executionStatus = executionStatusDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ChangeSetStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .creationTime)
        var creationTimeBuffer:Date? = nil
        if let creationTimeDecoded = creationTimeDecoded {
            creationTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(creationTimeDecoded, format: .dateTime)
        }
        creationTime = creationTimeBuffer
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let includeNestedStacksDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .includeNestedStacks)
        includeNestedStacks = includeNestedStacksDecoded
        let parentChangeSetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parentChangeSetId)
        parentChangeSetId = parentChangeSetIdDecoded
        let rootChangeSetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .rootChangeSetId)
        rootChangeSetId = rootChangeSetIdDecoded
    }
}
