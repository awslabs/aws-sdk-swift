// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>The output for the <a>DescribeChangeSet</a> action.</p>
public struct DescribeChangeSetOutput: Equatable {
    /// <p>If you execute the change set, the list of capabilities that were explicitly
    ///          acknowledged when the change set was created.</p>
    public let capabilities: [Capability]?
    /// <p>The ARN of the change set.</p>
    public let changeSetId: String?
    /// <p>The name of the change set.</p>
    public let changeSetName: String?
    /// <p>A list of <code>Change</code> structures that describes the resources AWS
    ///          CloudFormation changes if you execute the change set.</p>
    public let changes: [Change]?
    /// <p>The start time when the change set was created, in UTC.</p>
    public let creationTime: Date?
    /// <p>Information about the change set.</p>
    public let description: String?
    /// <p>If the change set execution status is <code>AVAILABLE</code>, you can execute the
    ///          change set. If you canâ€™t execute the change set, the status indicates why. For example, a
    ///          change set might be in an <code>UNAVAILABLE</code> state because AWS CloudFormation is
    ///          still creating it or in an <code>OBSOLETE</code> state because the stack was already
    ///          updated.</p>
    public let executionStatus: ExecutionStatus?
    /// <p>Verifies if <code>IncludeNestedStacks</code> is set to <code>True</code>.</p>
    public let includeNestedStacks: Bool?
    /// <p>If the output exceeds 1 MB, a string that identifies the next page of changes. If
    ///          there is no additional page, this value is null.</p>
    public let nextToken: String?
    /// <p>The ARNs of the Amazon Simple Notification Service (Amazon SNS) topics that will be
    ///          associated with the stack if you execute the change set.</p>
    public let notificationARNs: [String]?
    /// <p>A list of <code>Parameter</code> structures that describes the input parameters and
    ///          their values used to create the change set. For more information, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html">Parameter</a> data type.</p>
    public let parameters: [Parameter]?
    /// <p>Specifies the change set ID of the parent change set in the current nested change set hierarchy.</p>
    public let parentChangeSetId: String?
    /// <p>The rollback triggers for AWS CloudFormation to monitor during stack creation and
    ///          updating operations, and for the specified monitoring period afterwards.</p>
    public let rollbackConfiguration: RollbackConfiguration?
    /// <p>Specifies the change set ID of the root change set in the current nested change set hierarchy.</p>
    public let rootChangeSetId: String?
    /// <p>The ARN of the stack that is associated with the change set.</p>
    public let stackId: String?
    /// <p>The name of the stack that is associated with the change set.</p>
    public let stackName: String?
    /// <p>The current status of the change set, such as <code>CREATE_IN_PROGRESS</code>,
    ///             <code>CREATE_COMPLETE</code>, or <code>FAILED</code>.</p>
    public let status: ChangeSetStatus?
    /// <p>A description of the change set's status. For example, if your attempt to create a
    ///          change set failed, AWS CloudFormation shows the error message.</p>
    public let statusReason: String?
    /// <p>If you execute the change set, the tags that will be associated with the
    ///          stack.</p>
    public let tags: [Tag]?

    public init (
        capabilities: [Capability]? = nil,
        changeSetId: String? = nil,
        changeSetName: String? = nil,
        changes: [Change]? = nil,
        creationTime: Date? = nil,
        description: String? = nil,
        executionStatus: ExecutionStatus? = nil,
        includeNestedStacks: Bool? = nil,
        nextToken: String? = nil,
        notificationARNs: [String]? = nil,
        parameters: [Parameter]? = nil,
        parentChangeSetId: String? = nil,
        rollbackConfiguration: RollbackConfiguration? = nil,
        rootChangeSetId: String? = nil,
        stackId: String? = nil,
        stackName: String? = nil,
        status: ChangeSetStatus? = nil,
        statusReason: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.capabilities = capabilities
        self.changeSetId = changeSetId
        self.changeSetName = changeSetName
        self.changes = changes
        self.creationTime = creationTime
        self.description = description
        self.executionStatus = executionStatus
        self.includeNestedStacks = includeNestedStacks
        self.nextToken = nextToken
        self.notificationARNs = notificationARNs
        self.parameters = parameters
        self.parentChangeSetId = parentChangeSetId
        self.rollbackConfiguration = rollbackConfiguration
        self.rootChangeSetId = rootChangeSetId
        self.stackId = stackId
        self.stackName = stackName
        self.status = status
        self.statusReason = statusReason
        self.tags = tags
    }
}
