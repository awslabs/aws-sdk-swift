// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TypeSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case defaultVersionId = "DefaultVersionId"
        case description = "Description"
        case lastUpdated = "LastUpdated"
        case type = "Type"
        case typeArn = "TypeArn"
        case typeName = "TypeName"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let defaultVersionId = defaultVersionId {
            try container.encode(defaultVersionId, forKey: Key("DefaultVersionId"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let lastUpdated = lastUpdated {
            try container.encode(TimestampWrapper(lastUpdated, format: .dateTime), forKey: Key("lastUpdated"))
        }
        if let type = type {
            try container.encode(type, forKey: Key("Type"))
        }
        if let typeArn = typeArn {
            try container.encode(typeArn, forKey: Key("TypeArn"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: Key("TypeName"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(RegistryType.self, forKey: .type)
        type = typeDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let defaultVersionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultVersionId)
        defaultVersionId = defaultVersionIdDecoded
        let typeArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .typeArn)
        typeArn = typeArnDecoded
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastUpdated)
        var lastUpdatedBuffer:Date? = nil
        if let lastUpdatedDecoded = lastUpdatedDecoded {
            lastUpdatedBuffer = try TimestampWrapperDecoder.parseDateStringValue(lastUpdatedDecoded, format: .dateTime)
        }
        lastUpdated = lastUpdatedBuffer
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
    }
}
