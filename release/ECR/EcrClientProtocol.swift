// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <fullname>Amazon Elastic Container Registry</fullname>
///         <p>Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the
///             familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR
///             provides a secure, scalable, and reliable registry for your Docker or Open Container
///             Initiative (OCI) images. Amazon ECR supports private repositories with resource-based
///             permissions using IAM so that specific users or Amazon EC2 instances can access
///             repositories and images.</p>
public protocol EcrClientProtocol {
    /// <p>Checks the availability of one or more image layers in a repository.</p>
    ///         <p>When an image is pushed to a repository, each image layer is checked to verify if it
    ///             has been uploaded before. If it has been uploaded, then the image layer is
    ///             skipped.</p>
    ///          <note>
    ///             <p>This operation is used by the Amazon ECR proxy and is not generally used by
    ///         customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p>
    ///          </note>
    func batchCheckLayerAvailability(input: BatchCheckLayerAvailabilityInput, completion: @escaping (SdkResult<BatchCheckLayerAvailabilityOutputResponse, BatchCheckLayerAvailabilityOutputError>) -> Void)
    /// <p>Deletes a list of specified images within a repository. Images are specified with
    ///             either an <code>imageTag</code> or <code>imageDigest</code>.</p>
    ///         <p>You can remove a tag from an image by specifying the image's tag in your request. When
    ///             you remove the last tag from an image, the image is deleted from your repository.</p>
    ///         <p>You can completely delete an image (and all of its tags) by specifying the image's
    ///             digest in your request.</p>
    func batchDeleteImage(input: BatchDeleteImageInput, completion: @escaping (SdkResult<BatchDeleteImageOutputResponse, BatchDeleteImageOutputError>) -> Void)
    /// <p>Gets detailed information for an image. Images are specified with either an
    ///                 <code>imageTag</code> or <code>imageDigest</code>.</p>
    ///         <p>When an image is pulled, the BatchGetImage API is called once to retrieve the image
    ///             manifest.</p>
    func batchGetImage(input: BatchGetImageInput, completion: @escaping (SdkResult<BatchGetImageOutputResponse, BatchGetImageOutputError>) -> Void)
    /// <p>Informs Amazon ECR that the image layer upload has completed for a specified registry,
    ///             repository name, and upload ID. You can optionally provide a <code>sha256</code> digest
    ///             of the image layer for data validation purposes.</p>
    ///         <p>When an image is pushed, the CompleteLayerUpload API is called once per each new image
    ///             layer to verify that the upload has completed.</p>
    ///          <note>
    ///             <p>This operation is used by the Amazon ECR proxy and is not generally used by
    ///         customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p>
    ///          </note>
    func completeLayerUpload(input: CompleteLayerUploadInput, completion: @escaping (SdkResult<CompleteLayerUploadOutputResponse, CompleteLayerUploadOutputError>) -> Void)
    /// <p>Creates a repository. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html">Amazon ECR Repositories</a> in the
    ///                 <i>Amazon Elastic Container Registry User Guide</i>.</p>
    func createRepository(input: CreateRepositoryInput, completion: @escaping (SdkResult<CreateRepositoryOutputResponse, CreateRepositoryOutputError>) -> Void)
    /// <p>Deletes the lifecycle policy associated with the specified repository.</p>
    func deleteLifecyclePolicy(input: DeleteLifecyclePolicyInput, completion: @escaping (SdkResult<DeleteLifecyclePolicyOutputResponse, DeleteLifecyclePolicyOutputError>) -> Void)
    /// <p>Deletes the registry permissions policy.</p>
    func deleteRegistryPolicy(input: DeleteRegistryPolicyInput, completion: @escaping (SdkResult<DeleteRegistryPolicyOutputResponse, DeleteRegistryPolicyOutputError>) -> Void)
    /// <p>Deletes a repository. If the repository contains images, you must either delete all
    ///             images in the repository or use the <code>force</code> option to delete the
    ///             repository.</p>
    func deleteRepository(input: DeleteRepositoryInput, completion: @escaping (SdkResult<DeleteRepositoryOutputResponse, DeleteRepositoryOutputError>) -> Void)
    /// <p>Deletes the repository policy associated with the specified repository.</p>
    func deleteRepositoryPolicy(input: DeleteRepositoryPolicyInput, completion: @escaping (SdkResult<DeleteRepositoryPolicyOutputResponse, DeleteRepositoryPolicyOutputError>) -> Void)
    /// <p>Returns metadata about the images in a repository.</p>
    ///         <note>
    ///             <p>Beginning with Docker version 1.9, the Docker client compresses image layers
    ///                 before pushing them to a V2 Docker registry. The output of the <code>docker
    ///                     images</code> command shows the uncompressed image size, so it may return a
    ///                 larger image size than the image sizes returned by <a>DescribeImages</a>.</p>
    ///         </note>
    func describeImages(input: DescribeImagesInput, completion: @escaping (SdkResult<DescribeImagesOutputResponse, DescribeImagesOutputError>) -> Void)
    /// <p>Returns the scan findings for the specified image.</p>
    func describeImageScanFindings(input: DescribeImageScanFindingsInput, completion: @escaping (SdkResult<DescribeImageScanFindingsOutputResponse, DescribeImageScanFindingsOutputError>) -> Void)
    /// <p>Describes the settings for a registry. The replication configuration for a repository
    ///             can be created or updated with the <a>PutReplicationConfiguration</a> API
    ///             action.</p>
    func describeRegistry(input: DescribeRegistryInput, completion: @escaping (SdkResult<DescribeRegistryOutputResponse, DescribeRegistryOutputError>) -> Void)
    /// <p>Describes image repositories in a registry.</p>
    func describeRepositories(input: DescribeRepositoriesInput, completion: @escaping (SdkResult<DescribeRepositoriesOutputResponse, DescribeRepositoriesOutputError>) -> Void)
    /// <p>Retrieves an authorization token. An authorization token represents your IAM
    ///             authentication credentials and can be used to access any Amazon ECR registry that your IAM
    ///             principal has access to. The authorization token is valid for 12 hours.</p>
    ///         <p>The <code>authorizationToken</code> returned is a base64 encoded string that can be
    ///             decoded and used in a <code>docker login</code> command to authenticate to a registry.
    ///             The AWS CLI offers an <code>get-login-password</code> command that simplifies the login
    ///             process. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html#registry_auth">Registry
    ///                 Authentication</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>
    func getAuthorizationToken(input: GetAuthorizationTokenInput, completion: @escaping (SdkResult<GetAuthorizationTokenOutputResponse, GetAuthorizationTokenOutputError>) -> Void)
    /// <p>Retrieves the pre-signed Amazon S3 download URL corresponding to an image layer. You
    ///             can only get URLs for image layers that are referenced in an image.</p>
    ///         <p>When an image is pulled, the GetDownloadUrlForLayer API is called once per image layer
    ///             that is not already cached.</p>
    ///          <note>
    ///             <p>This operation is used by the Amazon ECR proxy and is not generally used by
    ///         customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p>
    ///          </note>
    func getDownloadUrlForLayer(input: GetDownloadUrlForLayerInput, completion: @escaping (SdkResult<GetDownloadUrlForLayerOutputResponse, GetDownloadUrlForLayerOutputError>) -> Void)
    /// <p>Retrieves the lifecycle policy for the specified repository.</p>
    func getLifecyclePolicy(input: GetLifecyclePolicyInput, completion: @escaping (SdkResult<GetLifecyclePolicyOutputResponse, GetLifecyclePolicyOutputError>) -> Void)
    /// <p>Retrieves the results of the lifecycle policy preview request for the specified
    ///             repository.</p>
    func getLifecyclePolicyPreview(input: GetLifecyclePolicyPreviewInput, completion: @escaping (SdkResult<GetLifecyclePolicyPreviewOutputResponse, GetLifecyclePolicyPreviewOutputError>) -> Void)
    /// <p>Retrieves the permissions policy for a registry.</p>
    func getRegistryPolicy(input: GetRegistryPolicyInput, completion: @escaping (SdkResult<GetRegistryPolicyOutputResponse, GetRegistryPolicyOutputError>) -> Void)
    /// <p>Retrieves the repository policy for the specified repository.</p>
    func getRepositoryPolicy(input: GetRepositoryPolicyInput, completion: @escaping (SdkResult<GetRepositoryPolicyOutputResponse, GetRepositoryPolicyOutputError>) -> Void)
    /// <p>Notifies Amazon ECR that you intend to upload an image layer.</p>
    ///         <p>When an image is pushed, the InitiateLayerUpload API is called once per image layer
    ///             that has not already been uploaded. Whether or not an image layer has been uploaded is
    ///             determined by the BatchCheckLayerAvailability API action.</p>
    ///          <note>
    ///             <p>This operation is used by the Amazon ECR proxy and is not generally used by
    ///         customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p>
    ///          </note>
    func initiateLayerUpload(input: InitiateLayerUploadInput, completion: @escaping (SdkResult<InitiateLayerUploadOutputResponse, InitiateLayerUploadOutputError>) -> Void)
    /// <p>Lists all the image IDs for the specified repository.</p>
    ///         <p>You can filter images based on whether or not they are tagged by using the
    ///                 <code>tagStatus</code> filter and specifying either <code>TAGGED</code>,
    ///                 <code>UNTAGGED</code> or <code>ANY</code>. For example, you can filter your results
    ///             to return only <code>UNTAGGED</code> images and then pipe that result to a <a>BatchDeleteImage</a> operation to delete them. Or, you can filter your
    ///             results to return only <code>TAGGED</code> images to list all of the tags in your
    ///             repository.</p>
    func listImages(input: ListImagesInput, completion: @escaping (SdkResult<ListImagesOutputResponse, ListImagesOutputError>) -> Void)
    /// <p>List the tags for an Amazon ECR resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p>Creates or updates the image manifest and tags associated with an image.</p>
    ///         <p>When an image is pushed and all new image layers have been uploaded, the PutImage API
    ///             is called once to create or update the image manifest and the tags associated with the
    ///             image.</p>
    ///
    ///         <note>
    ///             <p>This operation is used by the Amazon ECR proxy and is not generally used by
    ///         customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p>
    ///          </note>
    func putImage(input: PutImageInput, completion: @escaping (SdkResult<PutImageOutputResponse, PutImageOutputError>) -> Void)
    /// <p>Updates the image scanning configuration for the specified repository.</p>
    func putImageScanningConfiguration(input: PutImageScanningConfigurationInput, completion: @escaping (SdkResult<PutImageScanningConfigurationOutputResponse, PutImageScanningConfigurationOutputError>) -> Void)
    /// <p>Updates the image tag mutability settings for the specified repository. For more
    ///             information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-tag-mutability.html">Image Tag
    ///                 Mutability</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>
    func putImageTagMutability(input: PutImageTagMutabilityInput, completion: @escaping (SdkResult<PutImageTagMutabilityOutputResponse, PutImageTagMutabilityOutputError>) -> Void)
    /// <p>Creates or updates the lifecycle policy for the specified repository. For more
    ///             information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html">Lifecycle Policy
    ///                 Template</a>.</p>
    func putLifecyclePolicy(input: PutLifecyclePolicyInput, completion: @escaping (SdkResult<PutLifecyclePolicyOutputResponse, PutLifecyclePolicyOutputError>) -> Void)
    /// <p>Creates or updates the permissions policy for your registry.</p>
    ///         <p>A registry policy is used to specify permissions for another AWS account and is used
    ///             when configuring cross-account replication. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/registry-permissions.html">Registry permissions</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>
    func putRegistryPolicy(input: PutRegistryPolicyInput, completion: @escaping (SdkResult<PutRegistryPolicyOutputResponse, PutRegistryPolicyOutputError>) -> Void)
    /// <p>Creates or updates the replication configuration for a registry. The existing
    ///             replication configuration for a repository can be retrieved with the <a>DescribeRegistry</a> API action. The first time the
    ///             PutReplicationConfiguration API is called, a service-linked IAM role is created in
    ///             your account for the replication process. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/using-service-linked-roles.html">Using
    ///                 Service-Linked Roles for Amazon ECR</a> in the
    ///             <i>Amazon Elastic Container Registry User Guide</i>.</p>
    ///         <note>
    ///             <p>When configuring cross-account replication, the destination account must grant the
    ///                 source account permission to replicate. This permission is controlled using a
    ///                 registry permissions policy. For more information, see <a>PutRegistryPolicy</a>.</p>
    ///         </note>
    func putReplicationConfiguration(input: PutReplicationConfigurationInput, completion: @escaping (SdkResult<PutReplicationConfigurationOutputResponse, PutReplicationConfigurationOutputError>) -> Void)
    /// <p>Applies a repository policy to the specified repository to control access permissions.
    ///             For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html">Amazon ECR Repository
    ///                 Policies</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>
    func setRepositoryPolicy(input: SetRepositoryPolicyInput, completion: @escaping (SdkResult<SetRepositoryPolicyOutputResponse, SetRepositoryPolicyOutputError>) -> Void)
    /// <p>Starts an image vulnerability scan. An image scan can only be started once per day on
    ///             an individual image. This limit includes if an image was scanned on initial push. For
    ///             more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html">Image Scanning</a> in the
    ///                 <i>Amazon Elastic Container Registry User Guide</i>.</p>
    func startImageScan(input: StartImageScanInput, completion: @escaping (SdkResult<StartImageScanOutputResponse, StartImageScanOutputError>) -> Void)
    /// <p>Starts a preview of a lifecycle policy for the specified repository. This allows you
    ///             to see the results before associating the lifecycle policy with the repository.</p>
    func startLifecyclePolicyPreview(input: StartLifecyclePolicyPreviewInput, completion: @escaping (SdkResult<StartLifecyclePolicyPreviewOutputResponse, StartLifecyclePolicyPreviewOutputError>) -> Void)
    /// <p>Adds specified tags to a resource with the specified ARN. Existing tags on a resource
    ///             are not changed if they are not specified in the request parameters.</p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p>Deletes specified tags from a resource.</p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// <p>Uploads an image layer part to Amazon ECR.</p>
    ///         <p>When an image is pushed, each new image layer is uploaded in parts. The maximum size
    ///             of each image layer part can be 20971520 bytes (or about 20MB). The UploadLayerPart API
    ///             is called once per each new image layer part.</p>
    ///          <note>
    ///             <p>This operation is used by the Amazon ECR proxy and is not generally used by
    ///         customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p>
    ///          </note>
    func uploadLayerPart(input: UploadLayerPartInput, completion: @escaping (SdkResult<UploadLayerPartOutputResponse, UploadLayerPartOutputError>) -> Void)
}
