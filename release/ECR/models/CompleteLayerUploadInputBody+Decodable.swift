// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CompleteLayerUploadInputBody: Equatable {
    public let registryId: String?
    public let repositoryName: String?
    public let uploadId: String?
    public let layerDigests: [String]?
}

extension CompleteLayerUploadInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case layerDigests
        case registryId
        case repositoryName
        case uploadId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registryIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .registryId)
        registryId = registryIdDecoded
        let repositoryNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .repositoryName)
        repositoryName = repositoryNameDecoded
        let uploadIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .uploadId)
        uploadId = uploadIdDecoded
        let layerDigestsContainer = try containerValues.decodeIfPresent([String].self, forKey: .layerDigests)
        var layerDigestsDecoded0:[String]? = nil
        if let layerDigestsContainer = layerDigestsContainer {
            layerDigestsDecoded0 = [String]()
            for string0 in layerDigestsContainer {
                layerDigestsDecoded0?.append(string0)
            }
        }
        layerDigests = layerDigestsDecoded0
    }
}
