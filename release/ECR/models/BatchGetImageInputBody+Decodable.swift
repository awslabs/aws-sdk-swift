// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct BatchGetImageInputBody: Equatable {
    public let registryId: String?
    public let repositoryName: String?
    public let imageIds: [ImageIdentifier]?
    public let acceptedMediaTypes: [String]?
}

extension BatchGetImageInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case acceptedMediaTypes
        case imageIds
        case registryId
        case repositoryName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registryIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .registryId)
        registryId = registryIdDecoded
        let repositoryNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .repositoryName)
        repositoryName = repositoryNameDecoded
        let imageIdsContainer = try containerValues.decodeIfPresent([ImageIdentifier].self, forKey: .imageIds)
        var imageIdsDecoded0:[ImageIdentifier]? = nil
        if let imageIdsContainer = imageIdsContainer {
            imageIdsDecoded0 = [ImageIdentifier]()
            for structure0 in imageIdsContainer {
                imageIdsDecoded0?.append(structure0)
            }
        }
        imageIds = imageIdsDecoded0
        let acceptedMediaTypesContainer = try containerValues.decodeIfPresent([String].self, forKey: .acceptedMediaTypes)
        var acceptedMediaTypesDecoded0:[String]? = nil
        if let acceptedMediaTypesContainer = acceptedMediaTypesContainer {
            acceptedMediaTypesDecoded0 = [String]()
            for string0 in acceptedMediaTypesContainer {
                acceptedMediaTypesDecoded0?.append(string0)
            }
        }
        acceptedMediaTypes = acceptedMediaTypesDecoded0
    }
}
