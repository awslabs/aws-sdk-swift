// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ImageScanFindings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case findingSeverityCounts
        case findings
        case imageScanCompletedAt
        case vulnerabilitySourceUpdatedAt
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let findingSeverityCounts = findingSeverityCounts {
            var findingSeverityCountsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .findingSeverityCounts)
            for (dictKey0, findingseveritycounts0) in findingSeverityCounts {
                try findingSeverityCountsContainer.encode(findingseveritycounts0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let findings = findings {
            var findingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findings)
            for imagescanfindinglist0 in findings {
                try findingsContainer.encode(imagescanfindinglist0)
            }
        }
        if let imageScanCompletedAt = imageScanCompletedAt {
            try encodeContainer.encode(imageScanCompletedAt.timeIntervalSince1970, forKey: .imageScanCompletedAt)
        }
        if let vulnerabilitySourceUpdatedAt = vulnerabilitySourceUpdatedAt {
            try encodeContainer.encode(vulnerabilitySourceUpdatedAt.timeIntervalSince1970, forKey: .vulnerabilitySourceUpdatedAt)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageScanCompletedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .imageScanCompletedAt)
        imageScanCompletedAt = imageScanCompletedAtDecoded
        let vulnerabilitySourceUpdatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .vulnerabilitySourceUpdatedAt)
        vulnerabilitySourceUpdatedAt = vulnerabilitySourceUpdatedAtDecoded
        let findingsContainer = try containerValues.decodeIfPresent([ImageScanFinding].self, forKey: .findings)
        var findingsDecoded0:[ImageScanFinding]? = nil
        if let findingsContainer = findingsContainer {
            findingsDecoded0 = [ImageScanFinding]()
            for structure0 in findingsContainer {
                findingsDecoded0?.append(structure0)
            }
        }
        findings = findingsDecoded0
        let findingSeverityCountsContainer = try containerValues.decodeIfPresent([String:Int].self, forKey: .findingSeverityCounts)
        var findingSeverityCountsDecoded0: [String:Int]? = nil
        if let findingSeverityCountsContainer = findingSeverityCountsContainer {
            findingSeverityCountsDecoded0 = [String:Int]()
            for (key0, severitycount0) in findingSeverityCountsContainer {
                findingSeverityCountsDecoded0?[key0] = severitycount0
            }
        }
        findingSeverityCounts = findingSeverityCountsDecoded0
    }
}
