// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListEventSourcesOutputBody: Equatable {
    public let eventSources: [EventSource]?
    public let nextToken: String?
}

extension ListEventSourcesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case eventSources = "EventSources"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventSourcesContainer = try containerValues.decodeIfPresent([EventSource].self, forKey: .eventSources)
        var eventSourcesDecoded0:[EventSource]? = nil
        if let eventSourcesContainer = eventSourcesContainer {
            eventSourcesDecoded0 = [EventSource]()
            for structure0 in eventSourcesContainer {
                eventSourcesDecoded0?.append(structure0)
            }
        }
        eventSources = eventSourcesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
