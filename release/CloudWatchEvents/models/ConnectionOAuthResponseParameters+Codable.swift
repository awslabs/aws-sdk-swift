// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConnectionOAuthResponseParameters: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case authorizationEndpoint = "AuthorizationEndpoint"
        case clientParameters = "ClientParameters"
        case httpMethod = "HttpMethod"
        case oAuthHttpParameters = "OAuthHttpParameters"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authorizationEndpoint = authorizationEndpoint {
            try encodeContainer.encode(authorizationEndpoint, forKey: .authorizationEndpoint)
        }
        if let clientParameters = clientParameters {
            try encodeContainer.encode(clientParameters, forKey: .clientParameters)
        }
        if let httpMethod = httpMethod {
            try encodeContainer.encode(httpMethod.rawValue, forKey: .httpMethod)
        }
        if let oAuthHttpParameters = oAuthHttpParameters {
            try encodeContainer.encode(oAuthHttpParameters, forKey: .oAuthHttpParameters)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientParametersDecoded = try containerValues.decodeIfPresent(ConnectionOAuthClientResponseParameters.self, forKey: .clientParameters)
        clientParameters = clientParametersDecoded
        let authorizationEndpointDecoded = try containerValues.decodeIfPresent(String.self, forKey: .authorizationEndpoint)
        authorizationEndpoint = authorizationEndpointDecoded
        let httpMethodDecoded = try containerValues.decodeIfPresent(ConnectionOAuthHttpMethod.self, forKey: .httpMethod)
        httpMethod = httpMethodDecoded
        let oAuthHttpParametersDecoded = try containerValues.decodeIfPresent(ConnectionHttpParameters.self, forKey: .oAuthHttpParameters)
        oAuthHttpParameters = oAuthHttpParametersDecoded
    }
}
