// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Contains information about a rule in Amazon EventBridge.</p>
public struct Rule: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the rule.</p>
    public let arn: String?
    /// <p>The description of the rule.</p>
    public let description: String?
    /// <p>The name or ARN of the event bus associated with the rule. If you omit this, the default
    ///       event bus is used.</p>
    public let eventBusName: String?
    /// <p>The event pattern of the rule. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html">Events and Event
    ///         Patterns</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    public let eventPattern: String?
    /// <p>If the rule was created on behalf of your account by an AWS service, this field displays
    ///       the principal name of the service that created the rule.</p>
    public let managedBy: String?
    /// <p>The name of the rule.</p>
    public let name: String?
    /// <p>The Amazon Resource Name (ARN) of the role that is used for target invocation.</p>
    public let roleArn: String?
    /// <p>The scheduling expression. For example, "cron(0 20 * * ? *)", "rate(5 minutes)".</p>
    public let scheduleExpression: String?
    /// <p>The state of the rule.</p>
    public let state: RuleState?

    public init (
        arn: String? = nil,
        description: String? = nil,
        eventBusName: String? = nil,
        eventPattern: String? = nil,
        managedBy: String? = nil,
        name: String? = nil,
        roleArn: String? = nil,
        scheduleExpression: String? = nil,
        state: RuleState? = nil
    )
    {
        self.arn = arn
        self.description = description
        self.eventBusName = eventBusName
        self.eventPattern = eventPattern
        self.managedBy = managedBy
        self.name = name
        self.roleArn = roleArn
        self.scheduleExpression = scheduleExpression
        self.state = state
    }
}
