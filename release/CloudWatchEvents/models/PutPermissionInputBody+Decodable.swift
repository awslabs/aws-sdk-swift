// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutPermissionInputBody: Equatable {
    public let eventBusName: String?
    public let action: String?
    public let principal: String?
    public let statementId: String?
    public let condition: Condition?
    public let policy: String?
}

extension PutPermissionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case action = "Action"
        case condition = "Condition"
        case eventBusName = "EventBusName"
        case policy = "Policy"
        case principal = "Principal"
        case statementId = "StatementId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventBusNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventBusName)
        eventBusName = eventBusNameDecoded
        let actionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .action)
        action = actionDecoded
        let principalDecoded = try containerValues.decodeIfPresent(String.self, forKey: .principal)
        principal = principalDecoded
        let statementIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statementId)
        statementId = statementIdDecoded
        let conditionDecoded = try containerValues.decodeIfPresent(Condition.self, forKey: .condition)
        condition = conditionDecoded
        let policyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policy)
        policy = policyDecoded
    }
}
