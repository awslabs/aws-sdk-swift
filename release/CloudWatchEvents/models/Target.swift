// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Targets are the resources to be invoked when a rule is triggered. For a complete list of
///       services and resources that can be set as a target, see <a>PutTargets</a>.</p>
///
///          <p>If you are setting the event bus of another account as the target, and that account
///       granted permission to your account through an organization instead of directly by the account
///       ID, then you must specify a <code>RoleArn</code> with proper permissions in the
///         <code>Target</code> structure. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html">Sending and
///         Receiving Events Between AWS Accounts</a> in the <i>Amazon EventBridge User
///         Guide</i>.</p>
public struct Target: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the target.</p>
    public let arn: String?
    /// <p>If the event target is an AWS Batch job, this contains the job definition, job name, and
    ///       other parameters. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/jobs.html">Jobs</a> in the <i>AWS Batch User
    ///         Guide</i>.</p>
    public let batchParameters: BatchParameters?
    /// <p>The <code>DeadLetterConfig</code> that defines the target queue to send dead-letter queue
    ///       events to.</p>
    public let deadLetterConfig: DeadLetterConfig?
    /// <p>Contains the Amazon ECS task definition and task count to be used, if the event target is
    ///       an Amazon ECS task. For more information about Amazon ECS tasks, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html">Task
    ///         Definitions </a> in the <i>Amazon EC2 Container Service Developer
    ///         Guide</i>.</p>
    public let ecsParameters: EcsParameters?
    /// <p>Contains the HTTP parameters to use when the target is a API Gateway REST endpoint
    ///       or EventBridge ApiDestination.</p>
    ///          <p>If you specify an API Gateway REST API or EventBridge ApiDestination as a target, you
    ///       can use this parameter to specify headers, path parameters, and query string keys/values
    ///       as part of your target invoking request. If you're using ApiDestinations, the corresponding
    ///       Connection can also have these values configured. In case of any conflicting keys, values
    ///       from the Connection take precedence.</p>
    public let httpParameters: HttpParameters?
    /// <p>The ID of the target.</p>
    public let id: String?
    /// <p>Valid JSON text passed to the target. In this case, nothing from the event itself is
    ///       passed to the target. For more information, see <a href="http://www.rfc-editor.org/rfc/rfc7159.txt">The JavaScript Object Notation (JSON) Data
    ///         Interchange Format</a>.</p>
    public let input: String?
    /// <p>The value of the JSONPath that is used for extracting part of the matched event when
    ///       passing it to the target. You must use JSON dot notation, not bracket notation. For more
    ///       information about JSON paths, see <a href="http://goessner.net/articles/JsonPath/">JSONPath</a>.</p>
    public let inputPath: String?
    /// <p>Settings to enable you to provide custom input to a target based on certain event data.
    ///       You can extract one or more key-value pairs from the event and then use that data to send
    ///       customized input to the target.</p>
    public let inputTransformer: InputTransformer?
    /// <p>The custom parameter you can use to control the shard assignment, when the target is a
    ///       Kinesis data stream. If you do not include this parameter, the default is to use the
    ///         <code>eventId</code> as the partition key.</p>
    public let kinesisParameters: KinesisParameters?
    /// <p>Contains the Redshift Data API parameters to use when the target is a Redshift
    ///       cluster.</p>
    ///          <p>If you specify a Redshift Cluster as a Target, you can use this to specify parameters to
    ///       invoke the Redshift Data API ExecuteStatement based on EventBridge events.</p>
    public let redshiftDataParameters: RedshiftDataParameters?
    /// <p>The <code>RetryPolicy</code> object that contains the retry policy configuration to use
    ///       for the dead-letter queue.</p>
    public let retryPolicy: RetryPolicy?
    /// <p>The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is
    ///       triggered. If one rule triggers multiple targets, you can use a different IAM role for each
    ///       target.</p>
    public let roleArn: String?
    /// <p>Parameters used when you are using the rule to invoke Amazon EC2 Run Command.</p>
    public let runCommandParameters: RunCommandParameters?
    /// <p>Contains the SageMaker Model Building Pipeline parameters to start execution of a
    ///       SageMaker Model Building Pipeline.</p>
    ///          <p>If you specify a SageMaker Model Building Pipeline as a target, you can use this to
    ///       specify parameters to start a pipeline execution based on EventBridge events.</p>
    public let sageMakerPipelineParameters: SageMakerPipelineParameters?
    /// <p>Contains the message group ID to use when the target is a FIFO queue.</p>
    ///          <p>If you specify an SQS FIFO queue as a target, the queue must have content-based
    ///       deduplication enabled.</p>
    public let sqsParameters: SqsParameters?

    public init (
        arn: String? = nil,
        batchParameters: BatchParameters? = nil,
        deadLetterConfig: DeadLetterConfig? = nil,
        ecsParameters: EcsParameters? = nil,
        httpParameters: HttpParameters? = nil,
        id: String? = nil,
        input: String? = nil,
        inputPath: String? = nil,
        inputTransformer: InputTransformer? = nil,
        kinesisParameters: KinesisParameters? = nil,
        redshiftDataParameters: RedshiftDataParameters? = nil,
        retryPolicy: RetryPolicy? = nil,
        roleArn: String? = nil,
        runCommandParameters: RunCommandParameters? = nil,
        sageMakerPipelineParameters: SageMakerPipelineParameters? = nil,
        sqsParameters: SqsParameters? = nil
    )
    {
        self.arn = arn
        self.batchParameters = batchParameters
        self.deadLetterConfig = deadLetterConfig
        self.ecsParameters = ecsParameters
        self.httpParameters = httpParameters
        self.id = id
        self.input = input
        self.inputPath = inputPath
        self.inputTransformer = inputTransformer
        self.kinesisParameters = kinesisParameters
        self.redshiftDataParameters = redshiftDataParameters
        self.retryPolicy = retryPolicy
        self.roleArn = roleArn
        self.runCommandParameters = runCommandParameters
        self.sageMakerPipelineParameters = sageMakerPipelineParameters
        self.sqsParameters = sqsParameters
    }
}
