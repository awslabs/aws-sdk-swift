// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeConnectionOutputBody: Equatable {
    public let connectionArn: String?
    public let name: String?
    public let description: String?
    public let connectionState: ConnectionState?
    public let stateReason: String?
    public let authorizationType: ConnectionAuthorizationType?
    public let secretArn: String?
    public let authParameters: ConnectionAuthResponseParameters?
    public let creationTime: Date?
    public let lastModifiedTime: Date?
    public let lastAuthorizedTime: Date?
}

extension DescribeConnectionOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case authParameters = "AuthParameters"
        case authorizationType = "AuthorizationType"
        case connectionArn = "ConnectionArn"
        case connectionState = "ConnectionState"
        case creationTime = "CreationTime"
        case description = "Description"
        case lastAuthorizedTime = "LastAuthorizedTime"
        case lastModifiedTime = "LastModifiedTime"
        case name = "Name"
        case secretArn = "SecretArn"
        case stateReason = "StateReason"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .connectionArn)
        connectionArn = connectionArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let connectionStateDecoded = try containerValues.decodeIfPresent(ConnectionState.self, forKey: .connectionState)
        connectionState = connectionStateDecoded
        let stateReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stateReason)
        stateReason = stateReasonDecoded
        let authorizationTypeDecoded = try containerValues.decodeIfPresent(ConnectionAuthorizationType.self, forKey: .authorizationType)
        authorizationType = authorizationTypeDecoded
        let secretArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
        let authParametersDecoded = try containerValues.decodeIfPresent(ConnectionAuthResponseParameters.self, forKey: .authParameters)
        authParameters = authParametersDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastAuthorizedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastAuthorizedTime)
        lastAuthorizedTime = lastAuthorizedTimeDecoded
    }
}
