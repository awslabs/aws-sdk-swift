// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeExpressionsOutputBody: Equatable {
    public let expressions: [ExpressionStatus]?
}

extension DescribeExpressionsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case expressions = "Expressions"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeExpressionsResult"))
        if containerValues.contains(.expressions) {
            struct KeyVal0{struct member{}}
            let expressionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .expressions)
            if let expressionsWrappedContainer = expressionsWrappedContainer {
                let expressionsContainer = try expressionsWrappedContainer.decodeIfPresent([ExpressionStatus].self, forKey: .member)
                var expressionsBuffer:[ExpressionStatus]? = nil
                if let expressionsContainer = expressionsContainer {
                    expressionsBuffer = [ExpressionStatus]()
                    for structureContainer0 in expressionsContainer {
                        expressionsBuffer?.append(structureContainer0)
                    }
                }
                expressions = expressionsBuffer
            } else {
                expressions = []
            }
        } else {
            expressions = nil
        }
    }
}
