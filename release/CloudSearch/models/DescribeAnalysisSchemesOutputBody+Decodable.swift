// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAnalysisSchemesOutputBody: Equatable {
    public let analysisSchemes: [AnalysisSchemeStatus]?
}

extension DescribeAnalysisSchemesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case analysisSchemes = "AnalysisSchemes"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeAnalysisSchemesResult"))
        if containerValues.contains(.analysisSchemes) {
            struct KeyVal0{struct member{}}
            let analysisSchemesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .analysisSchemes)
            if let analysisSchemesWrappedContainer = analysisSchemesWrappedContainer {
                let analysisSchemesContainer = try analysisSchemesWrappedContainer.decodeIfPresent([AnalysisSchemeStatus].self, forKey: .member)
                var analysisSchemesBuffer:[AnalysisSchemeStatus]? = nil
                if let analysisSchemesContainer = analysisSchemesContainer {
                    analysisSchemesBuffer = [AnalysisSchemeStatus]()
                    for structureContainer0 in analysisSchemesContainer {
                        analysisSchemesBuffer?.append(structureContainer0)
                    }
                }
                analysisSchemes = analysisSchemesBuffer
            } else {
                analysisSchemes = []
            }
        } else {
            analysisSchemes = nil
        }
    }
}
