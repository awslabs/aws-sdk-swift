// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Expression: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case expressionName = "ExpressionName"
        case expressionValue = "ExpressionValue"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let expressionName = expressionName {
            try container.encode(expressionName, forKey: Key("ExpressionName"))
        }
        if let expressionValue = expressionValue {
            try container.encode(expressionValue, forKey: Key("ExpressionValue"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let expressionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .expressionName)
        expressionName = expressionNameDecoded
        let expressionValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .expressionValue)
        expressionValue = expressionValueDecoded
    }
}
