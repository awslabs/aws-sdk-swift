// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The state of processing a change to an option. One of:</p>
///     <ul>
///       <li>RequiresIndexDocuments: The option's latest value will not be deployed until  <a>IndexDocuments</a> has been called and indexing is complete.</li>
///       <li>Processing: The option's latest value is in the process of being activated.</li>
///       <li>Active: The option's latest value is fully deployed. </li>
///       <li>FailedToValidate: The option value is not compatible with the domain's data and cannot be used to index the data. You must either modify the option value or update or remove the incompatible documents.</li>
///     </ul>
public enum OptionState {
    case active
    case failedtovalidate
    case processing
    case requiresindexdocuments
    case sdkUnknown(String)
}

extension OptionState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [OptionState] {
        return [
            .active,
            .failedtovalidate,
            .processing,
            .requiresindexdocuments,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .active: return "Active"
        case .failedtovalidate: return "FailedToValidate"
        case .processing: return "Processing"
        case .requiresindexdocuments: return "RequiresIndexDocuments"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = OptionState(rawValue: rawValue) ?? OptionState.sdkUnknown(rawValue)
    }
}
