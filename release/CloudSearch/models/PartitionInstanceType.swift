// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The instance type (such as <code>search.m1.small</code>) on which an index partition is hosted.</p>
public enum PartitionInstanceType {
    case search2xlarge
    case searchLarge
    case searchM1Large
    case searchM1Small
    case searchM22xlarge
    case searchM2Xlarge
    case searchM32xlarge
    case searchM3Large
    case searchM3Medium
    case searchM3Xlarge
    case searchMedium
    case searchSmall
    case searchXlarge
    case sdkUnknown(String)
}

extension PartitionInstanceType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [PartitionInstanceType] {
        return [
            .search2xlarge,
            .searchLarge,
            .searchM1Large,
            .searchM1Small,
            .searchM22xlarge,
            .searchM2Xlarge,
            .searchM32xlarge,
            .searchM3Large,
            .searchM3Medium,
            .searchM3Xlarge,
            .searchMedium,
            .searchSmall,
            .searchXlarge,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .search2xlarge: return "search.2xlarge"
        case .searchLarge: return "search.large"
        case .searchM1Large: return "search.m1.large"
        case .searchM1Small: return "search.m1.small"
        case .searchM22xlarge: return "search.m2.2xlarge"
        case .searchM2Xlarge: return "search.m2.xlarge"
        case .searchM32xlarge: return "search.m3.2xlarge"
        case .searchM3Large: return "search.m3.large"
        case .searchM3Medium: return "search.m3.medium"
        case .searchM3Xlarge: return "search.m3.xlarge"
        case .searchMedium: return "search.medium"
        case .searchSmall: return "search.small"
        case .searchXlarge: return "search.xlarge"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = PartitionInstanceType(rawValue: rawValue) ?? PartitionInstanceType.sdkUnknown(rawValue)
    }
}
