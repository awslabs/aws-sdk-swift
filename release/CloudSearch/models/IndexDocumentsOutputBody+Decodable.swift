// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct IndexDocumentsOutputBody: Equatable {
    public let fieldNames: [String]?
}

extension IndexDocumentsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fieldNames = "FieldNames"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("IndexDocumentsResult"))
        if containerValues.contains(.fieldNames) {
            struct KeyVal0{struct member{}}
            let fieldNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .fieldNames)
            if let fieldNamesWrappedContainer = fieldNamesWrappedContainer {
                let fieldNamesContainer = try fieldNamesWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var fieldNamesBuffer:[String]? = nil
                if let fieldNamesContainer = fieldNamesContainer {
                    fieldNamesBuffer = [String]()
                    for stringContainer0 in fieldNamesContainer {
                        fieldNamesBuffer?.append(stringContainer0)
                    }
                }
                fieldNames = fieldNamesBuffer
            } else {
                fieldNames = []
            }
        } else {
            fieldNames = nil
        }
    }
}
