// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DocumentSuggesterOptions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fuzzyMatching = "FuzzyMatching"
        case sortExpression = "SortExpression"
        case sourceField = "SourceField"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let fuzzyMatching = fuzzyMatching {
            try container.encode(fuzzyMatching, forKey: Key("FuzzyMatching"))
        }
        if let sortExpression = sortExpression {
            try container.encode(sortExpression, forKey: Key("SortExpression"))
        }
        if let sourceField = sourceField {
            try container.encode(sourceField, forKey: Key("SourceField"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceFieldDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceField)
        sourceField = sourceFieldDecoded
        let fuzzyMatchingDecoded = try containerValues.decodeIfPresent(SuggesterFuzzyMatching.self, forKey: .fuzzyMatching)
        fuzzyMatching = fuzzyMatchingDecoded
        let sortExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sortExpression)
        sortExpression = sortExpressionDecoded
    }
}
