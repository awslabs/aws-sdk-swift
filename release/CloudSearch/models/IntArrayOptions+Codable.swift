// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IntArrayOptions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case defaultValue = "DefaultValue"
        case facetEnabled = "FacetEnabled"
        case returnEnabled = "ReturnEnabled"
        case searchEnabled = "SearchEnabled"
        case sourceFields = "SourceFields"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let defaultValue = defaultValue {
            try container.encode(defaultValue, forKey: Key("DefaultValue"))
        }
        if let facetEnabled = facetEnabled {
            try container.encode(facetEnabled, forKey: Key("FacetEnabled"))
        }
        if let returnEnabled = returnEnabled {
            try container.encode(returnEnabled, forKey: Key("ReturnEnabled"))
        }
        if let searchEnabled = searchEnabled {
            try container.encode(searchEnabled, forKey: Key("SearchEnabled"))
        }
        if let sourceFields = sourceFields {
            try container.encode(sourceFields, forKey: Key("SourceFields"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultValueDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .defaultValue)
        defaultValue = defaultValueDecoded
        let sourceFieldsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceFields)
        sourceFields = sourceFieldsDecoded
        let facetEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .facetEnabled)
        facetEnabled = facetEnabledDecoded
        let searchEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .searchEnabled)
        searchEnabled = searchEnabledDecoded
        let returnEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .returnEnabled)
        returnEnabled = returnEnabledDecoded
    }
}
