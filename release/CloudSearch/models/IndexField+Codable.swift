// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IndexField: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dateArrayOptions = "DateArrayOptions"
        case dateOptions = "DateOptions"
        case doubleArrayOptions = "DoubleArrayOptions"
        case doubleOptions = "DoubleOptions"
        case indexFieldName = "IndexFieldName"
        case indexFieldType = "IndexFieldType"
        case intArrayOptions = "IntArrayOptions"
        case intOptions = "IntOptions"
        case latLonOptions = "LatLonOptions"
        case literalArrayOptions = "LiteralArrayOptions"
        case literalOptions = "LiteralOptions"
        case textArrayOptions = "TextArrayOptions"
        case textOptions = "TextOptions"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let dateArrayOptions = dateArrayOptions {
            try container.encode(dateArrayOptions, forKey: Key("DateArrayOptions"))
        }
        if let dateOptions = dateOptions {
            try container.encode(dateOptions, forKey: Key("DateOptions"))
        }
        if let doubleArrayOptions = doubleArrayOptions {
            try container.encode(doubleArrayOptions, forKey: Key("DoubleArrayOptions"))
        }
        if let doubleOptions = doubleOptions {
            try container.encode(doubleOptions, forKey: Key("DoubleOptions"))
        }
        if let indexFieldName = indexFieldName {
            try container.encode(indexFieldName, forKey: Key("IndexFieldName"))
        }
        if let indexFieldType = indexFieldType {
            try container.encode(indexFieldType, forKey: Key("IndexFieldType"))
        }
        if let intArrayOptions = intArrayOptions {
            try container.encode(intArrayOptions, forKey: Key("IntArrayOptions"))
        }
        if let intOptions = intOptions {
            try container.encode(intOptions, forKey: Key("IntOptions"))
        }
        if let latLonOptions = latLonOptions {
            try container.encode(latLonOptions, forKey: Key("LatLonOptions"))
        }
        if let literalArrayOptions = literalArrayOptions {
            try container.encode(literalArrayOptions, forKey: Key("LiteralArrayOptions"))
        }
        if let literalOptions = literalOptions {
            try container.encode(literalOptions, forKey: Key("LiteralOptions"))
        }
        if let textArrayOptions = textArrayOptions {
            try container.encode(textArrayOptions, forKey: Key("TextArrayOptions"))
        }
        if let textOptions = textOptions {
            try container.encode(textOptions, forKey: Key("TextOptions"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexFieldNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .indexFieldName)
        indexFieldName = indexFieldNameDecoded
        let indexFieldTypeDecoded = try containerValues.decodeIfPresent(IndexFieldType.self, forKey: .indexFieldType)
        indexFieldType = indexFieldTypeDecoded
        let intOptionsDecoded = try containerValues.decodeIfPresent(IntOptions.self, forKey: .intOptions)
        intOptions = intOptionsDecoded
        let doubleOptionsDecoded = try containerValues.decodeIfPresent(DoubleOptions.self, forKey: .doubleOptions)
        doubleOptions = doubleOptionsDecoded
        let literalOptionsDecoded = try containerValues.decodeIfPresent(LiteralOptions.self, forKey: .literalOptions)
        literalOptions = literalOptionsDecoded
        let textOptionsDecoded = try containerValues.decodeIfPresent(TextOptions.self, forKey: .textOptions)
        textOptions = textOptionsDecoded
        let dateOptionsDecoded = try containerValues.decodeIfPresent(DateOptions.self, forKey: .dateOptions)
        dateOptions = dateOptionsDecoded
        let latLonOptionsDecoded = try containerValues.decodeIfPresent(LatLonOptions.self, forKey: .latLonOptions)
        latLonOptions = latLonOptionsDecoded
        let intArrayOptionsDecoded = try containerValues.decodeIfPresent(IntArrayOptions.self, forKey: .intArrayOptions)
        intArrayOptions = intArrayOptionsDecoded
        let doubleArrayOptionsDecoded = try containerValues.decodeIfPresent(DoubleArrayOptions.self, forKey: .doubleArrayOptions)
        doubleArrayOptions = doubleArrayOptionsDecoded
        let literalArrayOptionsDecoded = try containerValues.decodeIfPresent(LiteralArrayOptions.self, forKey: .literalArrayOptions)
        literalArrayOptions = literalArrayOptionsDecoded
        let textArrayOptionsDecoded = try containerValues.decodeIfPresent(TextArrayOptions.self, forKey: .textArrayOptions)
        textArrayOptions = textArrayOptionsDecoded
        let dateArrayOptionsDecoded = try containerValues.decodeIfPresent(DateArrayOptions.self, forKey: .dateArrayOptions)
        dateArrayOptions = dateArrayOptionsDecoded
    }
}
