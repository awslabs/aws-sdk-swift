// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AnalysisScheme: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case analysisOptions = "AnalysisOptions"
        case analysisSchemeLanguage = "AnalysisSchemeLanguage"
        case analysisSchemeName = "AnalysisSchemeName"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let analysisOptions = analysisOptions {
            try container.encode(analysisOptions, forKey: Key("AnalysisOptions"))
        }
        if let analysisSchemeLanguage = analysisSchemeLanguage {
            try container.encode(analysisSchemeLanguage, forKey: Key("AnalysisSchemeLanguage"))
        }
        if let analysisSchemeName = analysisSchemeName {
            try container.encode(analysisSchemeName, forKey: Key("AnalysisSchemeName"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let analysisSchemeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .analysisSchemeName)
        analysisSchemeName = analysisSchemeNameDecoded
        let analysisSchemeLanguageDecoded = try containerValues.decodeIfPresent(AnalysisSchemeLanguage.self, forKey: .analysisSchemeLanguage)
        analysisSchemeLanguage = analysisSchemeLanguageDecoded
        let analysisOptionsDecoded = try containerValues.decodeIfPresent(AnalysisOptions.self, forKey: .analysisOptions)
        analysisOptions = analysisOptionsDecoded
    }
}
