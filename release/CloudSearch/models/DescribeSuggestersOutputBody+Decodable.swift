// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeSuggestersOutputBody: Equatable {
    public let suggesters: [SuggesterStatus]?
}

extension DescribeSuggestersOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case suggesters = "Suggesters"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeSuggestersResult"))
        if containerValues.contains(.suggesters) {
            struct KeyVal0{struct member{}}
            let suggestersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .suggesters)
            if let suggestersWrappedContainer = suggestersWrappedContainer {
                let suggestersContainer = try suggestersWrappedContainer.decodeIfPresent([SuggesterStatus].self, forKey: .member)
                var suggestersBuffer:[SuggesterStatus]? = nil
                if let suggestersContainer = suggestersContainer {
                    suggestersBuffer = [SuggesterStatus]()
                    for structureContainer0 in suggestersContainer {
                        suggestersBuffer?.append(structureContainer0)
                    }
                }
                suggesters = suggestersBuffer
            } else {
                suggesters = []
            }
        } else {
            suggesters = nil
        }
    }
}
