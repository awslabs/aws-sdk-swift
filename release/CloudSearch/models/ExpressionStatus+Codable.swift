// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ExpressionStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let options = options {
            try container.encode(options, forKey: Key("Options"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("Status"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsDecoded = try containerValues.decodeIfPresent(Expression.self, forKey: .options)
        options = optionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}
