// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>An <a href="http://tools.ietf.org/html/rfc4646" target="_blank">IETF RFC 4646</a> language code or <code>mul</code>  for multiple languages.</p>
public enum AnalysisSchemeLanguage {
    case ar
    case bg
    case ca
    case cs
    case da
    case de
    case el
    case en
    case es
    case eu
    case fa
    case fi
    case fr
    case ga
    case gl
    case he
    case hi
    case hu
    case hy
    case id
    case it
    case ja
    case ko
    case lv
    case mul
    case nl
    case no
    case pt
    case ro
    case ru
    case sv
    case th
    case tr
    case zhHans
    case zhHant
    case sdkUnknown(String)
}

extension AnalysisSchemeLanguage : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AnalysisSchemeLanguage] {
        return [
            .ar,
            .bg,
            .ca,
            .cs,
            .da,
            .de,
            .el,
            .en,
            .es,
            .eu,
            .fa,
            .fi,
            .fr,
            .ga,
            .gl,
            .he,
            .hi,
            .hu,
            .hy,
            .id,
            .it,
            .ja,
            .ko,
            .lv,
            .mul,
            .nl,
            .no,
            .pt,
            .ro,
            .ru,
            .sv,
            .th,
            .tr,
            .zhHans,
            .zhHant,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .ar: return "ar"
        case .bg: return "bg"
        case .ca: return "ca"
        case .cs: return "cs"
        case .da: return "da"
        case .de: return "de"
        case .el: return "el"
        case .en: return "en"
        case .es: return "es"
        case .eu: return "eu"
        case .fa: return "fa"
        case .fi: return "fi"
        case .fr: return "fr"
        case .ga: return "ga"
        case .gl: return "gl"
        case .he: return "he"
        case .hi: return "hi"
        case .hu: return "hu"
        case .hy: return "hy"
        case .id: return "id"
        case .it: return "it"
        case .ja: return "ja"
        case .ko: return "ko"
        case .lv: return "lv"
        case .mul: return "mul"
        case .nl: return "nl"
        case .no: return "no"
        case .pt: return "pt"
        case .ro: return "ro"
        case .ru: return "ru"
        case .sv: return "sv"
        case .th: return "th"
        case .tr: return "tr"
        case .zhHans: return "zh-Hans"
        case .zhHant: return "zh-Hant"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AnalysisSchemeLanguage(rawValue: rawValue) ?? AnalysisSchemeLanguage.sdkUnknown(rawValue)
    }
}
