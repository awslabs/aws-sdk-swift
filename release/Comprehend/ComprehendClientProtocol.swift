// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Amazon Comprehend is an AWS service for gaining insight into the content of documents.
///       Use these actions to determine the topics contained in your documents, the topics they
///       discuss, the predominant sentiment expressed in them, the predominant language used, and
///       more.</p>
public protocol ComprehendClientProtocol {
    /// <p>Determines the dominant language of the input text for a batch of documents. For a list
    ///       of languages that Amazon Comprehend can detect, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html">Amazon Comprehend Supported Languages</a>.
    ///     </p>
    func batchDetectDominantLanguage(input: BatchDetectDominantLanguageInput, completion: @escaping (SdkResult<BatchDetectDominantLanguageOutputResponse, BatchDetectDominantLanguageOutputError>) -> Void)
    /// <p>Inspects the text of a batch of documents for named entities and returns information
    ///       about them. For more information about named entities, see <a>how-entities</a>
    ///          </p>
    func batchDetectEntities(input: BatchDetectEntitiesInput, completion: @escaping (SdkResult<BatchDetectEntitiesOutputResponse, BatchDetectEntitiesOutputError>) -> Void)
    /// <p>Detects the key noun phrases found in a batch of documents.</p>
    func batchDetectKeyPhrases(input: BatchDetectKeyPhrasesInput, completion: @escaping (SdkResult<BatchDetectKeyPhrasesOutputResponse, BatchDetectKeyPhrasesOutputError>) -> Void)
    /// <p>Inspects a batch of documents and returns an inference of the prevailing sentiment,
    ///         <code>POSITIVE</code>, <code>NEUTRAL</code>, <code>MIXED</code>, or <code>NEGATIVE</code>,
    ///       in each one.</p>
    func batchDetectSentiment(input: BatchDetectSentimentInput, completion: @escaping (SdkResult<BatchDetectSentimentOutputResponse, BatchDetectSentimentOutputError>) -> Void)
    /// <p>Inspects the text of a batch of documents for the syntax and part of speech of the words
    ///       in the document and returns information about them. For more information, see <a>how-syntax</a>.</p>
    func batchDetectSyntax(input: BatchDetectSyntaxInput, completion: @escaping (SdkResult<BatchDetectSyntaxOutputResponse, BatchDetectSyntaxOutputError>) -> Void)
    /// <p>Creates a new document classification request to analyze a single document in real-time,
    ///       using a previously created and trained custom model and an endpoint.</p>
    func classifyDocument(input: ClassifyDocumentInput, completion: @escaping (SdkResult<ClassifyDocumentOutputResponse, ClassifyDocumentOutputError>) -> Void)
    /// <p>Analyzes input text for the presence of personally identifiable information (PII) and
    ///       returns the labels of identified PII entity types such as name, address, bank account number,
    ///       or phone number.</p>
    func containsPiiEntities(input: ContainsPiiEntitiesInput, completion: @escaping (SdkResult<ContainsPiiEntitiesOutputResponse, ContainsPiiEntitiesOutputError>) -> Void)
    /// <p>Creates a new document classifier that you can use to categorize documents. To create a
    ///       classifier, you provide a set of training documents that labeled with the categories that you
    ///       want to use. After the classifier is trained you can use it to categorize a set of labeled
    ///       documents into the categories. For more information, see <a>how-document-classification</a>.</p>
    func createDocumentClassifier(input: CreateDocumentClassifierInput, completion: @escaping (SdkResult<CreateDocumentClassifierOutputResponse, CreateDocumentClassifierOutputError>) -> Void)
    /// <p>Creates a model-specific endpoint for synchronous inference for a previously trained
    ///       custom model
    ///       </p>
    func createEndpoint(input: CreateEndpointInput, completion: @escaping (SdkResult<CreateEndpointOutputResponse, CreateEndpointOutputError>) -> Void)
    /// <p>Creates an entity recognizer using submitted files. After your
    ///         <code>CreateEntityRecognizer</code> request is submitted, you can check job status using the
    ///          API. </p>
    func createEntityRecognizer(input: CreateEntityRecognizerInput, completion: @escaping (SdkResult<CreateEntityRecognizerOutputResponse, CreateEntityRecognizerOutputError>) -> Void)
    /// <p>Deletes a previously created document classifier</p>
    ///          <p>Only those classifiers that are in terminated states (IN_ERROR, TRAINED) will be deleted.
    ///       If an active inference job is using the model, a <code>ResourceInUseException</code> will be
    ///       returned.</p>
    ///          <p>This is an asynchronous action that puts the classifier into a DELETING state, and it is
    ///       then removed by a background job. Once removed, the classifier disappears from your account
    ///       and is no longer available for use. </p>
    func deleteDocumentClassifier(input: DeleteDocumentClassifierInput, completion: @escaping (SdkResult<DeleteDocumentClassifierOutputResponse, DeleteDocumentClassifierOutputError>) -> Void)
    /// <p>Deletes a model-specific endpoint for a previously-trained custom model. All endpoints
    ///       must be deleted in order for the model to be deleted.</p>
    func deleteEndpoint(input: DeleteEndpointInput, completion: @escaping (SdkResult<DeleteEndpointOutputResponse, DeleteEndpointOutputError>) -> Void)
    /// <p>Deletes an entity recognizer.</p>
    ///          <p>Only those recognizers that are in terminated states (IN_ERROR, TRAINED) will be deleted.
    ///       If an active inference job is using the model, a <code>ResourceInUseException</code> will be
    ///       returned.</p>
    ///          <p>This is an asynchronous action that puts the recognizer into a DELETING state, and it is
    ///       then removed by a background job. Once removed, the recognizer disappears from your account
    ///       and is no longer available for use. </p>
    func deleteEntityRecognizer(input: DeleteEntityRecognizerInput, completion: @escaping (SdkResult<DeleteEntityRecognizerOutputResponse, DeleteEntityRecognizerOutputError>) -> Void)
    /// <p>Gets the properties associated with a document classification job. Use this operation to
    ///       get the status of a classification job.</p>
    func describeDocumentClassificationJob(input: DescribeDocumentClassificationJobInput, completion: @escaping (SdkResult<DescribeDocumentClassificationJobOutputResponse, DescribeDocumentClassificationJobOutputError>) -> Void)
    /// <p>Gets the properties associated with a document classifier.</p>
    func describeDocumentClassifier(input: DescribeDocumentClassifierInput, completion: @escaping (SdkResult<DescribeDocumentClassifierOutputResponse, DescribeDocumentClassifierOutputError>) -> Void)
    /// <p>Gets the properties associated with a dominant language detection job. Use this operation
    ///       to get the status of a detection job.</p>
    func describeDominantLanguageDetectionJob(input: DescribeDominantLanguageDetectionJobInput, completion: @escaping (SdkResult<DescribeDominantLanguageDetectionJobOutputResponse, DescribeDominantLanguageDetectionJobOutputError>) -> Void)
    /// <p>Gets the properties associated with a specific endpoint. Use this operation to get the
    ///       status of an endpoint.</p>
    func describeEndpoint(input: DescribeEndpointInput, completion: @escaping (SdkResult<DescribeEndpointOutputResponse, DescribeEndpointOutputError>) -> Void)
    /// <p>Gets the properties associated with an entities detection job. Use this operation to get
    ///       the status of a detection job.</p>
    func describeEntitiesDetectionJob(input: DescribeEntitiesDetectionJobInput, completion: @escaping (SdkResult<DescribeEntitiesDetectionJobOutputResponse, DescribeEntitiesDetectionJobOutputError>) -> Void)
    /// <p>Provides details about an entity recognizer including status, S3 buckets containing
    ///       training data, recognizer metadata, metrics, and so on.</p>
    func describeEntityRecognizer(input: DescribeEntityRecognizerInput, completion: @escaping (SdkResult<DescribeEntityRecognizerOutputResponse, DescribeEntityRecognizerOutputError>) -> Void)
    /// <p>Gets the status and details of an events detection job.</p>
    func describeEventsDetectionJob(input: DescribeEventsDetectionJobInput, completion: @escaping (SdkResult<DescribeEventsDetectionJobOutputResponse, DescribeEventsDetectionJobOutputError>) -> Void)
    /// <p>Gets the properties associated with a key phrases detection job. Use this operation to get
    ///       the status of a detection job.</p>
    func describeKeyPhrasesDetectionJob(input: DescribeKeyPhrasesDetectionJobInput, completion: @escaping (SdkResult<DescribeKeyPhrasesDetectionJobOutputResponse, DescribeKeyPhrasesDetectionJobOutputError>) -> Void)
    /// <p>Gets the properties associated with a PII entities detection job. For example, you can use
    ///       this operation to get the job status.</p>
    func describePiiEntitiesDetectionJob(input: DescribePiiEntitiesDetectionJobInput, completion: @escaping (SdkResult<DescribePiiEntitiesDetectionJobOutputResponse, DescribePiiEntitiesDetectionJobOutputError>) -> Void)
    /// <p>Gets the properties associated with a sentiment detection job. Use this operation to get
    ///       the status of a detection job.</p>
    func describeSentimentDetectionJob(input: DescribeSentimentDetectionJobInput, completion: @escaping (SdkResult<DescribeSentimentDetectionJobOutputResponse, DescribeSentimentDetectionJobOutputError>) -> Void)
    /// <p>Gets the properties associated with a topic detection job. Use this operation to get
    ///       the status of a detection job.</p>
    func describeTopicsDetectionJob(input: DescribeTopicsDetectionJobInput, completion: @escaping (SdkResult<DescribeTopicsDetectionJobOutputResponse, DescribeTopicsDetectionJobOutputError>) -> Void)
    /// <p>Determines the dominant language of the input text. For a list of languages that Amazon
    ///       Comprehend can detect, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html">Amazon Comprehend Supported Languages</a>. </p>
    func detectDominantLanguage(input: DetectDominantLanguageInput, completion: @escaping (SdkResult<DetectDominantLanguageOutputResponse, DetectDominantLanguageOutputError>) -> Void)
    /// <p>Inspects text for named entities, and returns information about them. For more
    ///       information, about named entities, see <a>how-entities</a>. </p>
    func detectEntities(input: DetectEntitiesInput, completion: @escaping (SdkResult<DetectEntitiesOutputResponse, DetectEntitiesOutputError>) -> Void)
    /// <p>Detects the key noun phrases found in the text. </p>
    func detectKeyPhrases(input: DetectKeyPhrasesInput, completion: @escaping (SdkResult<DetectKeyPhrasesOutputResponse, DetectKeyPhrasesOutputError>) -> Void)
    /// <p>Inspects the input text for entities that contain personally identifiable information
    ///       (PII) and returns information about them.</p>
    func detectPiiEntities(input: DetectPiiEntitiesInput, completion: @escaping (SdkResult<DetectPiiEntitiesOutputResponse, DetectPiiEntitiesOutputError>) -> Void)
    /// <p>Inspects text and returns an inference of the prevailing sentiment
    ///         (<code>POSITIVE</code>, <code>NEUTRAL</code>, <code>MIXED</code>, or <code>NEGATIVE</code>). </p>
    func detectSentiment(input: DetectSentimentInput, completion: @escaping (SdkResult<DetectSentimentOutputResponse, DetectSentimentOutputError>) -> Void)
    /// <p>Inspects text for syntax and the part of speech of words in the document. For more
    ///       information, <a>how-syntax</a>.</p>
    func detectSyntax(input: DetectSyntaxInput, completion: @escaping (SdkResult<DetectSyntaxOutputResponse, DetectSyntaxOutputError>) -> Void)
    /// <p>Gets a list of the documentation classification jobs that you have submitted.</p>
    func listDocumentClassificationJobs(input: ListDocumentClassificationJobsInput, completion: @escaping (SdkResult<ListDocumentClassificationJobsOutputResponse, ListDocumentClassificationJobsOutputError>) -> Void)
    /// <p>Gets a list of the document classifiers that you have created.</p>
    func listDocumentClassifiers(input: ListDocumentClassifiersInput, completion: @escaping (SdkResult<ListDocumentClassifiersOutputResponse, ListDocumentClassifiersOutputError>) -> Void)
    /// <p>Gets a list of the dominant language detection jobs that you have submitted.</p>
    func listDominantLanguageDetectionJobs(input: ListDominantLanguageDetectionJobsInput, completion: @escaping (SdkResult<ListDominantLanguageDetectionJobsOutputResponse, ListDominantLanguageDetectionJobsOutputError>) -> Void)
    /// <p>Gets a list of all existing endpoints that you've created.</p>
    func listEndpoints(input: ListEndpointsInput, completion: @escaping (SdkResult<ListEndpointsOutputResponse, ListEndpointsOutputError>) -> Void)
    /// <p>Gets a list of the entity detection jobs that you have submitted.</p>
    func listEntitiesDetectionJobs(input: ListEntitiesDetectionJobsInput, completion: @escaping (SdkResult<ListEntitiesDetectionJobsOutputResponse, ListEntitiesDetectionJobsOutputError>) -> Void)
    /// <p>Gets a list of the properties of all entity recognizers that you created, including
    ///       recognizers currently in training. Allows you to filter the list of recognizers based on
    ///       criteria such as status and submission time. This call returns up to 500 entity recognizers in
    ///       the list, with a default number of 100 recognizers in the list.</p>
    ///          <p>The results of this list are not in any particular order. Please get the list and sort
    ///       locally if needed.</p>
    func listEntityRecognizers(input: ListEntityRecognizersInput, completion: @escaping (SdkResult<ListEntityRecognizersOutputResponse, ListEntityRecognizersOutputError>) -> Void)
    /// <p>Gets a list of the events detection jobs that you have submitted.</p>
    func listEventsDetectionJobs(input: ListEventsDetectionJobsInput, completion: @escaping (SdkResult<ListEventsDetectionJobsOutputResponse, ListEventsDetectionJobsOutputError>) -> Void)
    /// <p>Get a list of key phrase detection jobs that you have submitted.</p>
    func listKeyPhrasesDetectionJobs(input: ListKeyPhrasesDetectionJobsInput, completion: @escaping (SdkResult<ListKeyPhrasesDetectionJobsOutputResponse, ListKeyPhrasesDetectionJobsOutputError>) -> Void)
    /// <p>Gets a list of the PII entity detection jobs that you have submitted.</p>
    func listPiiEntitiesDetectionJobs(input: ListPiiEntitiesDetectionJobsInput, completion: @escaping (SdkResult<ListPiiEntitiesDetectionJobsOutputResponse, ListPiiEntitiesDetectionJobsOutputError>) -> Void)
    /// <p>Gets a list of sentiment detection jobs that you have submitted.</p>
    func listSentimentDetectionJobs(input: ListSentimentDetectionJobsInput, completion: @escaping (SdkResult<ListSentimentDetectionJobsOutputResponse, ListSentimentDetectionJobsOutputError>) -> Void)
    /// <p>Lists all tags associated with a given Amazon Comprehend resource. </p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p>Gets a list of the topic detection jobs that you have submitted.</p>
    func listTopicsDetectionJobs(input: ListTopicsDetectionJobsInput, completion: @escaping (SdkResult<ListTopicsDetectionJobsOutputResponse, ListTopicsDetectionJobsOutputError>) -> Void)
    /// <p>Starts an asynchronous document classification job. Use the  operation to track the progress of the
    ///       job.</p>
    func startDocumentClassificationJob(input: StartDocumentClassificationJobInput, completion: @escaping (SdkResult<StartDocumentClassificationJobOutputResponse, StartDocumentClassificationJobOutputError>) -> Void)
    /// <p>Starts an asynchronous dominant language detection job for a collection of documents. Use
    ///       the  operation to track the status
    ///       of a job.</p>
    func startDominantLanguageDetectionJob(input: StartDominantLanguageDetectionJobInput, completion: @escaping (SdkResult<StartDominantLanguageDetectionJobOutputResponse, StartDominantLanguageDetectionJobOutputError>) -> Void)
    /// <p>Starts an asynchronous entity detection job for a collection of documents. Use the  operation to track the status of a job.</p>
    ///          <p>This API can be used for either standard entity detection or custom entity recognition. In
    ///       order to be used for custom entity recognition, the optional <code>EntityRecognizerArn</code>
    ///       must be used in order to provide access to the recognizer being used to detect the custom
    ///       entity.</p>
    func startEntitiesDetectionJob(input: StartEntitiesDetectionJobInput, completion: @escaping (SdkResult<StartEntitiesDetectionJobOutputResponse, StartEntitiesDetectionJobOutputError>) -> Void)
    /// <p>Starts an asynchronous event detection job for a collection of documents.</p>
    func startEventsDetectionJob(input: StartEventsDetectionJobInput, completion: @escaping (SdkResult<StartEventsDetectionJobOutputResponse, StartEventsDetectionJobOutputError>) -> Void)
    /// <p>Starts an asynchronous key phrase detection job for a collection of documents. Use the
    ///          operation to track the status of a
    ///       job.</p>
    func startKeyPhrasesDetectionJob(input: StartKeyPhrasesDetectionJobInput, completion: @escaping (SdkResult<StartKeyPhrasesDetectionJobOutputResponse, StartKeyPhrasesDetectionJobOutputError>) -> Void)
    /// <p>Starts an asynchronous PII entity detection job for a collection of documents.</p>
    func startPiiEntitiesDetectionJob(input: StartPiiEntitiesDetectionJobInput, completion: @escaping (SdkResult<StartPiiEntitiesDetectionJobOutputResponse, StartPiiEntitiesDetectionJobOutputError>) -> Void)
    /// <p>Starts an asynchronous sentiment detection job for a collection of documents. use the
    ///          operation to track the status of a
    ///       job.</p>
    func startSentimentDetectionJob(input: StartSentimentDetectionJobInput, completion: @escaping (SdkResult<StartSentimentDetectionJobOutputResponse, StartSentimentDetectionJobOutputError>) -> Void)
    /// <p>Starts an asynchronous topic detection job. Use the
    ///         <code>DescribeTopicDetectionJob</code> operation to track the status of a job.</p>
    func startTopicsDetectionJob(input: StartTopicsDetectionJobInput, completion: @escaping (SdkResult<StartTopicsDetectionJobOutputResponse, StartTopicsDetectionJobOutputError>) -> Void)
    /// <p>Stops a dominant language detection job in progress.</p>
    ///          <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put
    ///       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it
    ///       is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the
    ///         <code>STOPPED</code> state.</p>
    ///          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the
    ///         <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400
    ///       Internal Request Exception. </p>
    ///          <p>When a job is stopped, any documents already processed are written to the output
    ///       location.</p>
    func stopDominantLanguageDetectionJob(input: StopDominantLanguageDetectionJobInput, completion: @escaping (SdkResult<StopDominantLanguageDetectionJobOutputResponse, StopDominantLanguageDetectionJobOutputError>) -> Void)
    /// <p>Stops an entities detection job in progress.</p>
    ///          <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put
    ///       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it
    ///       is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the
    ///         <code>STOPPED</code> state.</p>
    ///          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the
    ///         <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400
    ///       Internal Request Exception. </p>
    ///          <p>When a job is stopped, any documents already processed are written to the output
    ///       location.</p>
    func stopEntitiesDetectionJob(input: StopEntitiesDetectionJobInput, completion: @escaping (SdkResult<StopEntitiesDetectionJobOutputResponse, StopEntitiesDetectionJobOutputError>) -> Void)
    /// <p>Stops an events detection job in progress.</p>
    func stopEventsDetectionJob(input: StopEventsDetectionJobInput, completion: @escaping (SdkResult<StopEventsDetectionJobOutputResponse, StopEventsDetectionJobOutputError>) -> Void)
    /// <p>Stops a key phrases detection job in progress.</p>
    ///          <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put
    ///       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it
    ///       is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the
    ///         <code>STOPPED</code> state.</p>
    ///          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the
    ///         <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400
    ///       Internal Request Exception. </p>
    ///          <p>When a job is stopped, any documents already processed are written to the output
    ///       location.</p>
    func stopKeyPhrasesDetectionJob(input: StopKeyPhrasesDetectionJobInput, completion: @escaping (SdkResult<StopKeyPhrasesDetectionJobOutputResponse, StopKeyPhrasesDetectionJobOutputError>) -> Void)
    /// <p>Stops a PII entities detection job in progress.</p>
    func stopPiiEntitiesDetectionJob(input: StopPiiEntitiesDetectionJobInput, completion: @escaping (SdkResult<StopPiiEntitiesDetectionJobOutputResponse, StopPiiEntitiesDetectionJobOutputError>) -> Void)
    /// <p>Stops a sentiment detection job in progress.</p>
    ///          <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put
    ///       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it
    ///       is put into the <code>COMPLETED</code> state; otherwise the job is be stopped and put into the
    ///         <code>STOPPED</code> state.</p>
    ///          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the
    ///         <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400
    ///       Internal Request Exception. </p>
    ///          <p>When a job is stopped, any documents already processed are written to the output
    ///       location.</p>
    func stopSentimentDetectionJob(input: StopSentimentDetectionJobInput, completion: @escaping (SdkResult<StopSentimentDetectionJobOutputResponse, StopSentimentDetectionJobOutputError>) -> Void)
    /// <p>Stops a document classifier training job while in progress.</p>
    ///          <p>If the training job state is <code>TRAINING</code>, the job is marked for termination and
    ///       put into the <code>STOP_REQUESTED</code> state. If the training job completes before it can be
    ///       stopped, it is put into the <code>TRAINED</code>; otherwise the training job is stopped and
    ///       put into the <code>STOPPED</code> state and the service sends back an HTTP 200 response with
    ///       an empty HTTP body. </p>
    func stopTrainingDocumentClassifier(input: StopTrainingDocumentClassifierInput, completion: @escaping (SdkResult<StopTrainingDocumentClassifierOutputResponse, StopTrainingDocumentClassifierOutputError>) -> Void)
    /// <p>Stops an entity recognizer training job while in progress.</p>
    ///          <p>If the training job state is <code>TRAINING</code>, the job is marked for termination and
    ///       put into the <code>STOP_REQUESTED</code> state. If the training job completes before it can be
    ///       stopped, it is put into the <code>TRAINED</code>; otherwise the training job is stopped and
    ///       putted into the <code>STOPPED</code> state and the service sends back an HTTP 200 response
    ///       with an empty HTTP body.</p>
    func stopTrainingEntityRecognizer(input: StopTrainingEntityRecognizerInput, completion: @escaping (SdkResult<StopTrainingEntityRecognizerOutputResponse, StopTrainingEntityRecognizerOutputError>) -> Void)
    /// <p>Associates a specific tag with an Amazon Comprehend resource. A tag is a key-value pair
    ///       that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with
    ///       "Sales" as the key might be added to a resource to indicate its use by the sales department.
    ///     </p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p>Removes a specific tag associated with an Amazon Comprehend resource. </p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// <p>Updates information about the specified endpoint.</p>
    func updateEndpoint(input: UpdateEndpointInput, completion: @escaping (SdkResult<UpdateEndpointOutputResponse, UpdateEndpointOutputError>) -> Void)
}
