// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListEntityRecognizersOutputBody: Equatable {
    public let entityRecognizerPropertiesList: [EntityRecognizerProperties]?
    public let nextToken: String?
}

extension ListEntityRecognizersOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case entityRecognizerPropertiesList = "EntityRecognizerPropertiesList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entityRecognizerPropertiesListContainer = try containerValues.decodeIfPresent([EntityRecognizerProperties].self, forKey: .entityRecognizerPropertiesList)
        var entityRecognizerPropertiesListDecoded0:[EntityRecognizerProperties]? = nil
        if let entityRecognizerPropertiesListContainer = entityRecognizerPropertiesListContainer {
            entityRecognizerPropertiesListDecoded0 = [EntityRecognizerProperties]()
            for structure0 in entityRecognizerPropertiesListContainer {
                entityRecognizerPropertiesListDecoded0?.append(structure0)
            }
        }
        entityRecognizerPropertiesList = entityRecognizerPropertiesListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
