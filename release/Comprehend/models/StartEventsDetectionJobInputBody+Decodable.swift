// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartEventsDetectionJobInputBody: Equatable {
    public let inputDataConfig: InputDataConfig?
    public let outputDataConfig: OutputDataConfig?
    public let dataAccessRoleArn: String?
    public let jobName: String?
    public let languageCode: LanguageCode?
    public let clientRequestToken: String?
    public let targetEventTypes: [String]?
}

extension StartEventsDetectionJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case languageCode = "LanguageCode"
        case outputDataConfig = "OutputDataConfig"
        case targetEventTypes = "TargetEventTypes"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let targetEventTypesContainer = try containerValues.decodeIfPresent([String].self, forKey: .targetEventTypes)
        var targetEventTypesDecoded0:[String]? = nil
        if let targetEventTypesContainer = targetEventTypesContainer {
            targetEventTypesDecoded0 = [String]()
            for string0 in targetEventTypesContainer {
                targetEventTypesDecoded0?.append(string0)
            }
        }
        targetEventTypes = targetEventTypesDecoded0
    }
}
