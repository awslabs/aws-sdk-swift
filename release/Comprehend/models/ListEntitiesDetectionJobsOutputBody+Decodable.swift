// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListEntitiesDetectionJobsOutputBody: Equatable {
    public let entitiesDetectionJobPropertiesList: [EntitiesDetectionJobProperties]?
    public let nextToken: String?
}

extension ListEntitiesDetectionJobsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case entitiesDetectionJobPropertiesList = "EntitiesDetectionJobPropertiesList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entitiesDetectionJobPropertiesListContainer = try containerValues.decodeIfPresent([EntitiesDetectionJobProperties].self, forKey: .entitiesDetectionJobPropertiesList)
        var entitiesDetectionJobPropertiesListDecoded0:[EntitiesDetectionJobProperties]? = nil
        if let entitiesDetectionJobPropertiesListContainer = entitiesDetectionJobPropertiesListContainer {
            entitiesDetectionJobPropertiesListDecoded0 = [EntitiesDetectionJobProperties]()
            for structure0 in entitiesDetectionJobPropertiesListContainer {
                entitiesDetectionJobPropertiesListDecoded0?.append(structure0)
            }
        }
        entitiesDetectionJobPropertiesList = entitiesDetectionJobPropertiesListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
