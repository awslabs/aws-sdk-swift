// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EndpointProperties: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTime = "CreationTime"
        case currentInferenceUnits = "CurrentInferenceUnits"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case desiredInferenceUnits = "DesiredInferenceUnits"
        case endpointArn = "EndpointArn"
        case lastModifiedTime = "LastModifiedTime"
        case message = "Message"
        case modelArn = "ModelArn"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let currentInferenceUnits = currentInferenceUnits {
            try encodeContainer.encode(currentInferenceUnits, forKey: .currentInferenceUnits)
        }
        if let dataAccessRoleArn = dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let desiredInferenceUnits = desiredInferenceUnits {
            try encodeContainer.encode(desiredInferenceUnits, forKey: .desiredInferenceUnits)
        }
        if let endpointArn = endpointArn {
            try encodeContainer.encode(endpointArn, forKey: .endpointArn)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let modelArn = modelArn {
            try encodeContainer.encode(modelArn, forKey: .modelArn)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointArn)
        endpointArn = endpointArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EndpointStatus.self, forKey: .status)
        status = statusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let desiredInferenceUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .desiredInferenceUnits)
        desiredInferenceUnits = desiredInferenceUnitsDecoded
        let currentInferenceUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .currentInferenceUnits)
        currentInferenceUnits = currentInferenceUnitsDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
    }
}
