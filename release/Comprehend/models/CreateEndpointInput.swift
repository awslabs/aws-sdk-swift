// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateEndpointInput: Equatable {
    /// <p>An idempotency token provided by the customer. If this token matches a previous endpoint
    ///       creation request, Amazon Comprehend will not return a <code>ResourceInUseException</code>.
    ///     </p>
    public var clientRequestToken: String?
    /// <p>The Amazon Resource Name (ARN) of the AWS identity and Access Management (IAM) role that
    ///       grants Amazon Comprehend read access to trained custom models encrypted with a customer
    ///       managed key (ModelKmsKeyId).</p>
    public let dataAccessRoleArn: String?
    /// <p> The desired number of inference units to be used by the model using this endpoint.
    ///
    ///       Each inference unit represents of a throughput of 100 characters per second.</p>
    public let desiredInferenceUnits: Int?
    /// <p>This is the descriptive suffix that becomes part of the <code>EndpointArn</code> used for
    ///       all subsequent requests to this resource. </p>
    public let endpointName: String?
    /// <p>The Amazon Resource Number (ARN) of the model to which the endpoint will be
    ///       attached.</p>
    public let modelArn: String?
    /// <p>Tags associated with the endpoint being created. A tag is a key-value pair that adds
    ///       metadata to the endpoint. For example, a tag with "Sales" as the key might be added to an
    ///       endpoint to indicate its use by the sales department. </p>
    public let tags: [Tag]?

    public init (
        clientRequestToken: String? = nil,
        dataAccessRoleArn: String? = nil,
        desiredInferenceUnits: Int? = nil,
        endpointName: String? = nil,
        modelArn: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.desiredInferenceUnits = desiredInferenceUnits
        self.endpointName = endpointName
        self.modelArn = modelArn
        self.tags = tags
    }
}
