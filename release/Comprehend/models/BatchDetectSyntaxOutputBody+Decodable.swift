// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct BatchDetectSyntaxOutputBody: Equatable {
    public let resultList: [BatchDetectSyntaxItemResult]?
    public let errorList: [BatchItemError]?
}

extension BatchDetectSyntaxOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case errorList = "ErrorList"
        case resultList = "ResultList"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultListContainer = try containerValues.decodeIfPresent([BatchDetectSyntaxItemResult].self, forKey: .resultList)
        var resultListDecoded0:[BatchDetectSyntaxItemResult]? = nil
        if let resultListContainer = resultListContainer {
            resultListDecoded0 = [BatchDetectSyntaxItemResult]()
            for structure0 in resultListContainer {
                resultListDecoded0?.append(structure0)
            }
        }
        resultList = resultListDecoded0
        let errorListContainer = try containerValues.decodeIfPresent([BatchItemError].self, forKey: .errorList)
        var errorListDecoded0:[BatchItemError]? = nil
        if let errorListContainer = errorListContainer {
            errorListDecoded0 = [BatchItemError]()
            for structure0 in errorListContainer {
                errorListDecoded0?.append(structure0)
            }
        }
        errorList = errorListDecoded0
    }
}
