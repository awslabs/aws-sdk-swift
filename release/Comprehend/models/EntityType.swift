// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum EntityType {
    case commercialItem
    case date
    case event
    case location
    case organization
    case other
    case person
    case quantity
    case title
    case sdkUnknown(String)
}

extension EntityType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EntityType] {
        return [
            .commercialItem,
            .date,
            .event,
            .location,
            .organization,
            .other,
            .person,
            .quantity,
            .title,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .commercialItem: return "COMMERCIAL_ITEM"
        case .date: return "DATE"
        case .event: return "EVENT"
        case .location: return "LOCATION"
        case .organization: return "ORGANIZATION"
        case .other: return "OTHER"
        case .person: return "PERSON"
        case .quantity: return "QUANTITY"
        case .title: return "TITLE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EntityType(rawValue: rawValue) ?? EntityType.sdkUnknown(rawValue)
    }
}
