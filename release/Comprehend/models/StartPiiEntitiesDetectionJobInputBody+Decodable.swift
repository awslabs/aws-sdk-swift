// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartPiiEntitiesDetectionJobInputBody: Equatable {
    public let inputDataConfig: InputDataConfig?
    public let outputDataConfig: OutputDataConfig?
    public let mode: PiiEntitiesDetectionMode?
    public let redactionConfig: RedactionConfig?
    public let dataAccessRoleArn: String?
    public let jobName: String?
    public let languageCode: LanguageCode?
    public let clientRequestToken: String?
}

extension StartPiiEntitiesDetectionJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case languageCode = "LanguageCode"
        case mode = "Mode"
        case outputDataConfig = "OutputDataConfig"
        case redactionConfig = "RedactionConfig"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let modeDecoded = try containerValues.decodeIfPresent(PiiEntitiesDetectionMode.self, forKey: .mode)
        mode = modeDecoded
        let redactionConfigDecoded = try containerValues.decodeIfPresent(RedactionConfig.self, forKey: .redactionConfig)
        redactionConfig = redactionConfigDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}
