// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SyntaxToken: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case beginOffset = "BeginOffset"
        case endOffset = "EndOffset"
        case partOfSpeech = "PartOfSpeech"
        case text = "Text"
        case tokenId = "TokenId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let beginOffset = beginOffset {
            try encodeContainer.encode(beginOffset, forKey: .beginOffset)
        }
        if let endOffset = endOffset {
            try encodeContainer.encode(endOffset, forKey: .endOffset)
        }
        if let partOfSpeech = partOfSpeech {
            try encodeContainer.encode(partOfSpeech, forKey: .partOfSpeech)
        }
        if let text = text {
            try encodeContainer.encode(text, forKey: .text)
        }
        if let tokenId = tokenId {
            try encodeContainer.encode(tokenId, forKey: .tokenId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tokenIdDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .tokenId)
        tokenId = tokenIdDecoded
        let textDecoded = try containerValues.decodeIfPresent(String.self, forKey: .text)
        text = textDecoded
        let beginOffsetDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .beginOffset)
        beginOffset = beginOffsetDecoded
        let endOffsetDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .endOffset)
        endOffset = endOffsetDecoded
        let partOfSpeechDecoded = try containerValues.decodeIfPresent(PartOfSpeechTag.self, forKey: .partOfSpeech)
        partOfSpeech = partOfSpeechDecoded
    }
}
