// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RedactionConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case maskCharacter = "MaskCharacter"
        case maskMode = "MaskMode"
        case piiEntityTypes = "PiiEntityTypes"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maskCharacter = maskCharacter {
            try encodeContainer.encode(maskCharacter, forKey: .maskCharacter)
        }
        if let maskMode = maskMode {
            try encodeContainer.encode(maskMode.rawValue, forKey: .maskMode)
        }
        if let piiEntityTypes = piiEntityTypes {
            var piiEntityTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .piiEntityTypes)
            for listofpiientitytypes0 in piiEntityTypes {
                try piiEntityTypesContainer.encode(listofpiientitytypes0.rawValue)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let piiEntityTypesContainer = try containerValues.decodeIfPresent([PiiEntityType].self, forKey: .piiEntityTypes)
        var piiEntityTypesDecoded0:[PiiEntityType]? = nil
        if let piiEntityTypesContainer = piiEntityTypesContainer {
            piiEntityTypesDecoded0 = [PiiEntityType]()
            for string0 in piiEntityTypesContainer {
                piiEntityTypesDecoded0?.append(string0)
            }
        }
        piiEntityTypes = piiEntityTypesDecoded0
        let maskModeDecoded = try containerValues.decodeIfPresent(PiiEntitiesDetectionMaskMode.self, forKey: .maskMode)
        maskMode = maskModeDecoded
        let maskCharacterDecoded = try containerValues.decodeIfPresent(String.self, forKey: .maskCharacter)
        maskCharacter = maskCharacterDecoded
    }
}
