// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DocumentClassifierProperties: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case classifierMetadata = "ClassifierMetadata"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case documentClassifierArn = "DocumentClassifierArn"
        case endTime = "EndTime"
        case inputDataConfig = "InputDataConfig"
        case languageCode = "LanguageCode"
        case message = "Message"
        case mode = "Mode"
        case modelKmsKeyId = "ModelKmsKeyId"
        case outputDataConfig = "OutputDataConfig"
        case status = "Status"
        case submitTime = "SubmitTime"
        case trainingEndTime = "TrainingEndTime"
        case trainingStartTime = "TrainingStartTime"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let classifierMetadata = classifierMetadata {
            try encodeContainer.encode(classifierMetadata, forKey: .classifierMetadata)
        }
        if let dataAccessRoleArn = dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let documentClassifierArn = documentClassifierArn {
            try encodeContainer.encode(documentClassifierArn, forKey: .documentClassifierArn)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let inputDataConfig = inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let mode = mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
        if let modelKmsKeyId = modelKmsKeyId {
            try encodeContainer.encode(modelKmsKeyId, forKey: .modelKmsKeyId)
        }
        if let outputDataConfig = outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let submitTime = submitTime {
            try encodeContainer.encode(submitTime.timeIntervalSince1970, forKey: .submitTime)
        }
        if let trainingEndTime = trainingEndTime {
            try encodeContainer.encode(trainingEndTime.timeIntervalSince1970, forKey: .trainingEndTime)
        }
        if let trainingStartTime = trainingStartTime {
            try encodeContainer.encode(trainingStartTime.timeIntervalSince1970, forKey: .trainingStartTime)
        }
        if let volumeKmsKeyId = volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if let vpcConfig = vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentClassifierArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .documentClassifierArn)
        documentClassifierArn = documentClassifierArnDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ModelStatus.self, forKey: .status)
        status = statusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let submitTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .submitTime)
        submitTime = submitTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let trainingStartTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .trainingStartTime)
        trainingStartTime = trainingStartTimeDecoded
        let trainingEndTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .trainingEndTime)
        trainingEndTime = trainingEndTimeDecoded
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(DocumentClassifierInputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(DocumentClassifierOutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let classifierMetadataDecoded = try containerValues.decodeIfPresent(ClassifierMetadata.self, forKey: .classifierMetadata)
        classifierMetadata = classifierMetadataDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let modeDecoded = try containerValues.decodeIfPresent(DocumentClassifierMode.self, forKey: .mode)
        mode = modeDecoded
        let modelKmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelKmsKeyId)
        modelKmsKeyId = modelKmsKeyIdDecoded
    }
}
