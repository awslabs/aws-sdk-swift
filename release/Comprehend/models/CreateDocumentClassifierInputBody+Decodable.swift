// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDocumentClassifierInputBody: Equatable {
    public let documentClassifierName: String?
    public let dataAccessRoleArn: String?
    public let tags: [Tag]?
    public let inputDataConfig: DocumentClassifierInputDataConfig?
    public let outputDataConfig: DocumentClassifierOutputDataConfig?
    public let clientRequestToken: String?
    public let languageCode: LanguageCode?
    public let volumeKmsKeyId: String?
    public let vpcConfig: VpcConfig?
    public let mode: DocumentClassifierMode?
    public let modelKmsKeyId: String?
}

extension CreateDocumentClassifierInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case documentClassifierName = "DocumentClassifierName"
        case inputDataConfig = "InputDataConfig"
        case languageCode = "LanguageCode"
        case mode = "Mode"
        case modelKmsKeyId = "ModelKmsKeyId"
        case outputDataConfig = "OutputDataConfig"
        case tags = "Tags"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentClassifierNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .documentClassifierName)
        documentClassifierName = documentClassifierNameDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(DocumentClassifierInputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(DocumentClassifierOutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let modeDecoded = try containerValues.decodeIfPresent(DocumentClassifierMode.self, forKey: .mode)
        mode = modeDecoded
        let modelKmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelKmsKeyId)
        modelKmsKeyId = modelKmsKeyIdDecoded
    }
}
