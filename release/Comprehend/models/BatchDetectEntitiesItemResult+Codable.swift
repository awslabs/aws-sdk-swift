// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchDetectEntitiesItemResult: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case entities = "Entities"
        case index = "Index"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entities = entities {
            var entitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entities)
            for listofentities0 in entities {
                try entitiesContainer.encode(listofentities0)
            }
        }
        if let index = index {
            try encodeContainer.encode(index, forKey: .index)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .index)
        index = indexDecoded
        let entitiesContainer = try containerValues.decodeIfPresent([Entity].self, forKey: .entities)
        var entitiesDecoded0:[Entity]? = nil
        if let entitiesContainer = entitiesContainer {
            entitiesDecoded0 = [Entity]()
            for structure0 in entitiesContainer {
                entitiesDecoded0?.append(structure0)
            }
        }
        entities = entitiesDecoded0
    }
}
