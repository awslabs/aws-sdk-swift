// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ClassifierEvaluationMetrics: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accuracy = "Accuracy"
        case f1Score = "F1Score"
        case hammingLoss = "HammingLoss"
        case microF1Score = "MicroF1Score"
        case microPrecision = "MicroPrecision"
        case microRecall = "MicroRecall"
        case precision = "Precision"
        case recall = "Recall"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accuracy = accuracy {
            try encodeContainer.encode(accuracy, forKey: .accuracy)
        }
        if let f1Score = f1Score {
            try encodeContainer.encode(f1Score, forKey: .f1Score)
        }
        if let hammingLoss = hammingLoss {
            try encodeContainer.encode(hammingLoss, forKey: .hammingLoss)
        }
        if let microF1Score = microF1Score {
            try encodeContainer.encode(microF1Score, forKey: .microF1Score)
        }
        if let microPrecision = microPrecision {
            try encodeContainer.encode(microPrecision, forKey: .microPrecision)
        }
        if let microRecall = microRecall {
            try encodeContainer.encode(microRecall, forKey: .microRecall)
        }
        if let precision = precision {
            try encodeContainer.encode(precision, forKey: .precision)
        }
        if let recall = recall {
            try encodeContainer.encode(recall, forKey: .recall)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accuracyDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .accuracy)
        accuracy = accuracyDecoded
        let precisionDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .precision)
        precision = precisionDecoded
        let recallDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .recall)
        recall = recallDecoded
        let f1ScoreDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .f1Score)
        f1Score = f1ScoreDecoded
        let microPrecisionDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .microPrecision)
        microPrecision = microPrecisionDecoded
        let microRecallDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .microRecall)
        microRecall = microRecallDecoded
        let microF1ScoreDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .microF1Score)
        microF1Score = microF1ScoreDecoded
        let hammingLossDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .hammingLoss)
        hammingLoss = hammingLossDecoded
    }
}
