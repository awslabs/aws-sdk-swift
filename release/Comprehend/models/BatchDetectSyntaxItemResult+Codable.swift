// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchDetectSyntaxItemResult: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case index = "Index"
        case syntaxTokens = "SyntaxTokens"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let index = index {
            try encodeContainer.encode(index, forKey: .index)
        }
        if let syntaxTokens = syntaxTokens {
            var syntaxTokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .syntaxTokens)
            for listofsyntaxtokens0 in syntaxTokens {
                try syntaxTokensContainer.encode(listofsyntaxtokens0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .index)
        index = indexDecoded
        let syntaxTokensContainer = try containerValues.decodeIfPresent([SyntaxToken].self, forKey: .syntaxTokens)
        var syntaxTokensDecoded0:[SyntaxToken]? = nil
        if let syntaxTokensContainer = syntaxTokensContainer {
            syntaxTokensDecoded0 = [SyntaxToken]()
            for structure0 in syntaxTokensContainer {
                syntaxTokensDecoded0?.append(structure0)
            }
        }
        syntaxTokens = syntaxTokensDecoded0
    }
}
