// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ListInsightsStatusFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case any = "Any"
        case closed = "Closed"
        case ongoing = "Ongoing"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let any = any {
            try encodeContainer.encode(any, forKey: .any)
        }
        if let closed = closed {
            try encodeContainer.encode(closed, forKey: .closed)
        }
        if let ongoing = ongoing {
            try encodeContainer.encode(ongoing, forKey: .ongoing)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ongoingDecoded = try containerValues.decodeIfPresent(ListInsightsOngoingStatusFilter.self, forKey: .ongoing)
        ongoing = ongoingDecoded
        let closedDecoded = try containerValues.decodeIfPresent(ListInsightsClosedStatusFilter.self, forKey: .closed)
        closed = closedDecoded
        let anyDecoded = try containerValues.decodeIfPresent(ListInsightsAnyStatusFilter.self, forKey: .any)
        any = anyDecoded
    }
}
