// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum InsightFeedbackOption {
    case alertTooSensitive
    case dataIncorrect
    case dataNoisyAnomaly
    case recommendationUseful
    case validCollection
    case sdkUnknown(String)
}

extension InsightFeedbackOption : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InsightFeedbackOption] {
        return [
            .alertTooSensitive,
            .dataIncorrect,
            .dataNoisyAnomaly,
            .recommendationUseful,
            .validCollection,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .alertTooSensitive: return "ALERT_TOO_SENSITIVE"
        case .dataIncorrect: return "DATA_INCORRECT"
        case .dataNoisyAnomaly: return "DATA_NOISY_ANOMALY"
        case .recommendationUseful: return "RECOMMENDATION_USEFUL"
        case .validCollection: return "VALID_COLLECTION"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InsightFeedbackOption(rawValue: rawValue) ?? InsightFeedbackOption.sdkUnknown(rawValue)
    }
}
