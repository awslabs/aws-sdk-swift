// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListRecommendationsOutputBody: Equatable {
    public let recommendations: [Recommendation]?
    public let nextToken: String?
}

extension ListRecommendationsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case recommendations = "Recommendations"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommendationsContainer = try containerValues.decodeIfPresent([Recommendation].self, forKey: .recommendations)
        var recommendationsDecoded0:[Recommendation]? = nil
        if let recommendationsContainer = recommendationsContainer {
            recommendationsDecoded0 = [Recommendation]()
            for structure0 in recommendationsContainer {
                recommendationsDecoded0?.append(structure0)
            }
        }
        recommendations = recommendationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
