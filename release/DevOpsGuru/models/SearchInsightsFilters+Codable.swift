// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SearchInsightsFilters: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case resourceCollection = "ResourceCollection"
        case serviceCollection = "ServiceCollection"
        case severities = "Severities"
        case statuses = "Statuses"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceCollection = resourceCollection {
            try encodeContainer.encode(resourceCollection, forKey: .resourceCollection)
        }
        if let serviceCollection = serviceCollection {
            try encodeContainer.encode(serviceCollection, forKey: .serviceCollection)
        }
        if let severities = severities {
            var severitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .severities)
            for insightseverities0 in severities {
                try severitiesContainer.encode(insightseverities0.rawValue)
            }
        }
        if let statuses = statuses {
            var statusesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statuses)
            for insightstatuses0 in statuses {
                try statusesContainer.encode(insightstatuses0.rawValue)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let severitiesContainer = try containerValues.decodeIfPresent([InsightSeverity].self, forKey: .severities)
        var severitiesDecoded0:[InsightSeverity]? = nil
        if let severitiesContainer = severitiesContainer {
            severitiesDecoded0 = [InsightSeverity]()
            for string0 in severitiesContainer {
                severitiesDecoded0?.append(string0)
            }
        }
        severities = severitiesDecoded0
        let statusesContainer = try containerValues.decodeIfPresent([InsightStatus].self, forKey: .statuses)
        var statusesDecoded0:[InsightStatus]? = nil
        if let statusesContainer = statusesContainer {
            statusesDecoded0 = [InsightStatus]()
            for string0 in statusesContainer {
                statusesDecoded0?.append(string0)
            }
        }
        statuses = statusesDecoded0
        let resourceCollectionDecoded = try containerValues.decodeIfPresent(ResourceCollection.self, forKey: .resourceCollection)
        resourceCollection = resourceCollectionDecoded
        let serviceCollectionDecoded = try containerValues.decodeIfPresent(ServiceCollection.self, forKey: .serviceCollection)
        serviceCollection = serviceCollectionDecoded
    }
}
