// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SearchInsightsOutputBody: Equatable {
    public let proactiveInsights: [ProactiveInsightSummary]?
    public let reactiveInsights: [ReactiveInsightSummary]?
    public let nextToken: String?
}

extension SearchInsightsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case proactiveInsights = "ProactiveInsights"
        case reactiveInsights = "ReactiveInsights"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let proactiveInsightsContainer = try containerValues.decodeIfPresent([ProactiveInsightSummary].self, forKey: .proactiveInsights)
        var proactiveInsightsDecoded0:[ProactiveInsightSummary]? = nil
        if let proactiveInsightsContainer = proactiveInsightsContainer {
            proactiveInsightsDecoded0 = [ProactiveInsightSummary]()
            for structure0 in proactiveInsightsContainer {
                proactiveInsightsDecoded0?.append(structure0)
            }
        }
        proactiveInsights = proactiveInsightsDecoded0
        let reactiveInsightsContainer = try containerValues.decodeIfPresent([ReactiveInsightSummary].self, forKey: .reactiveInsights)
        var reactiveInsightsDecoded0:[ReactiveInsightSummary]? = nil
        if let reactiveInsightsContainer = reactiveInsightsContainer {
            reactiveInsightsDecoded0 = [ReactiveInsightSummary]()
            for structure0 in reactiveInsightsContainer {
                reactiveInsightsDecoded0?.append(structure0)
            }
        }
        reactiveInsights = reactiveInsightsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
