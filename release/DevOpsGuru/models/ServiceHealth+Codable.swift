// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ServiceHealth: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case insight = "Insight"
        case serviceName = "ServiceName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let insight = insight {
            try encodeContainer.encode(insight, forKey: .insight)
        }
        if let serviceName = serviceName {
            try encodeContainer.encode(serviceName.rawValue, forKey: .serviceName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNameDecoded = try containerValues.decodeIfPresent(ServiceName.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let insightDecoded = try containerValues.decodeIfPresent(ServiceInsightHealth.self, forKey: .insight)
        insight = insightDecoded
    }
}
