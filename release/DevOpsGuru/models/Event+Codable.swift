// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Event: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dataSource = "DataSource"
        case eventClass = "EventClass"
        case eventSource = "EventSource"
        case id = "Id"
        case name = "Name"
        case resourceCollection = "ResourceCollection"
        case resources = "Resources"
        case time = "Time"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSource = dataSource {
            try encodeContainer.encode(dataSource.rawValue, forKey: .dataSource)
        }
        if let eventClass = eventClass {
            try encodeContainer.encode(eventClass.rawValue, forKey: .eventClass)
        }
        if let eventSource = eventSource {
            try encodeContainer.encode(eventSource, forKey: .eventSource)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceCollection = resourceCollection {
            try encodeContainer.encode(resourceCollection, forKey: .resourceCollection)
        }
        if let resources = resources {
            var resourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resources)
            for eventresources0 in resources {
                try resourcesContainer.encode(eventresources0)
            }
        }
        if let time = time {
            try encodeContainer.encode(time.timeIntervalSince1970, forKey: .time)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceCollectionDecoded = try containerValues.decodeIfPresent(ResourceCollection.self, forKey: .resourceCollection)
        resourceCollection = resourceCollectionDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let timeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .time)
        time = timeDecoded
        let eventSourceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventSource)
        eventSource = eventSourceDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let dataSourceDecoded = try containerValues.decodeIfPresent(EventDataSource.self, forKey: .dataSource)
        dataSource = dataSourceDecoded
        let eventClassDecoded = try containerValues.decodeIfPresent(EventClass.self, forKey: .eventClass)
        eventClass = eventClassDecoded
        let resourcesContainer = try containerValues.decodeIfPresent([EventResource].self, forKey: .resources)
        var resourcesDecoded0:[EventResource]? = nil
        if let resourcesContainer = resourcesContainer {
            resourcesDecoded0 = [EventResource]()
            for structure0 in resourcesContainer {
                resourcesDecoded0?.append(structure0)
            }
        }
        resources = resourcesDecoded0
    }
}
