// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudWatchMetricsDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dimensions = "Dimensions"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case period = "Period"
        case stat = "Stat"
        case unit = "Unit"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensions = dimensions {
            var dimensionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensions)
            for cloudwatchmetricsdimensions0 in dimensions {
                try dimensionsContainer.encode(cloudwatchmetricsdimensions0)
            }
        }
        if let metricName = metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let namespace = namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
        if period != 0 {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let stat = stat {
            try encodeContainer.encode(stat.rawValue, forKey: .stat)
        }
        if let unit = unit {
            try encodeContainer.encode(unit, forKey: .unit)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let dimensionsContainer = try containerValues.decodeIfPresent([CloudWatchMetricsDimension].self, forKey: .dimensions)
        var dimensionsDecoded0:[CloudWatchMetricsDimension]? = nil
        if let dimensionsContainer = dimensionsContainer {
            dimensionsDecoded0 = [CloudWatchMetricsDimension]()
            for structure0 in dimensionsContainer {
                dimensionsDecoded0?.append(structure0)
            }
        }
        dimensions = dimensionsDecoded0
        let statDecoded = try containerValues.decodeIfPresent(CloudWatchMetricsStat.self, forKey: .stat)
        stat = statDecoded
        let unitDecoded = try containerValues.decodeIfPresent(String.self, forKey: .unit)
        unit = unitDecoded
        let periodDecoded = try containerValues.decode(Int.self, forKey: .period)
        period = periodDecoded
    }
}
