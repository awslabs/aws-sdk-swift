// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ReactiveAnomaly: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case anomalyTimeRange = "AnomalyTimeRange"
        case associatedInsightId = "AssociatedInsightId"
        case id = "Id"
        case resourceCollection = "ResourceCollection"
        case severity = "Severity"
        case sourceDetails = "SourceDetails"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anomalyTimeRange = anomalyTimeRange {
            try encodeContainer.encode(anomalyTimeRange, forKey: .anomalyTimeRange)
        }
        if let associatedInsightId = associatedInsightId {
            try encodeContainer.encode(associatedInsightId, forKey: .associatedInsightId)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let resourceCollection = resourceCollection {
            try encodeContainer.encode(resourceCollection, forKey: .resourceCollection)
        }
        if let severity = severity {
            try encodeContainer.encode(severity.rawValue, forKey: .severity)
        }
        if let sourceDetails = sourceDetails {
            try encodeContainer.encode(sourceDetails, forKey: .sourceDetails)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let severityDecoded = try containerValues.decodeIfPresent(AnomalySeverity.self, forKey: .severity)
        severity = severityDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AnomalyStatus.self, forKey: .status)
        status = statusDecoded
        let anomalyTimeRangeDecoded = try containerValues.decodeIfPresent(AnomalyTimeRange.self, forKey: .anomalyTimeRange)
        anomalyTimeRange = anomalyTimeRangeDecoded
        let sourceDetailsDecoded = try containerValues.decodeIfPresent(AnomalySourceDetails.self, forKey: .sourceDetails)
        sourceDetails = sourceDetailsDecoded
        let associatedInsightIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .associatedInsightId)
        associatedInsightId = associatedInsightIdDecoded
        let resourceCollectionDecoded = try containerValues.decodeIfPresent(ResourceCollection.self, forKey: .resourceCollection)
        resourceCollection = resourceCollectionDecoded
    }
}
