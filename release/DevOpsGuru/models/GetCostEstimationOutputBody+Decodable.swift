// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetCostEstimationOutputBody: Equatable {
    public let resourceCollection: CostEstimationResourceCollectionFilter?
    public let status: CostEstimationStatus?
    public let costs: [ServiceResourceCost]?
    public let timeRange: CostEstimationTimeRange?
    public let totalCost: Double
    public let nextToken: String?
}

extension GetCostEstimationOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case costs = "Costs"
        case nextToken = "NextToken"
        case resourceCollection = "ResourceCollection"
        case status = "Status"
        case timeRange = "TimeRange"
        case totalCost = "TotalCost"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceCollectionDecoded = try containerValues.decodeIfPresent(CostEstimationResourceCollectionFilter.self, forKey: .resourceCollection)
        resourceCollection = resourceCollectionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CostEstimationStatus.self, forKey: .status)
        status = statusDecoded
        let costsContainer = try containerValues.decodeIfPresent([ServiceResourceCost].self, forKey: .costs)
        var costsDecoded0:[ServiceResourceCost]? = nil
        if let costsContainer = costsContainer {
            costsDecoded0 = [ServiceResourceCost]()
            for structure0 in costsContainer {
                costsDecoded0?.append(structure0)
            }
        }
        costs = costsDecoded0
        let timeRangeDecoded = try containerValues.decodeIfPresent(CostEstimationTimeRange.self, forKey: .timeRange)
        timeRange = timeRangeDecoded
        let totalCostDecoded = try containerValues.decode(Double.self, forKey: .totalCost)
        totalCost = totalCostDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
