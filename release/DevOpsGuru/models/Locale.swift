// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum Locale {
    case deDe
    case enGb
    case enUs
    case esEs
    case frFr
    case itIt
    case jaJp
    case koKr
    case ptBr
    case zhCn
    case zhTw
    case sdkUnknown(String)
}

extension Locale : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Locale] {
        return [
            .deDe,
            .enGb,
            .enUs,
            .esEs,
            .frFr,
            .itIt,
            .jaJp,
            .koKr,
            .ptBr,
            .zhCn,
            .zhTw,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .deDe: return "DE_DE"
        case .enGb: return "EN_GB"
        case .enUs: return "EN_US"
        case .esEs: return "ES_ES"
        case .frFr: return "FR_FR"
        case .itIt: return "IT_IT"
        case .jaJp: return "JA_JP"
        case .koKr: return "KO_KR"
        case .ptBr: return "PT_BR"
        case .zhCn: return "ZH_CN"
        case .zhTw: return "ZH_TW"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Locale(rawValue: rawValue) ?? Locale.sdkUnknown(rawValue)
    }
}
