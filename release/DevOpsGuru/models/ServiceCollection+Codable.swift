// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ServiceCollection: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case serviceNames = "ServiceNames"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let serviceNames = serviceNames {
            var serviceNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .serviceNames)
            for servicenames0 in serviceNames {
                try serviceNamesContainer.encode(servicenames0.rawValue)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNamesContainer = try containerValues.decodeIfPresent([ServiceName].self, forKey: .serviceNames)
        var serviceNamesDecoded0:[ServiceName]? = nil
        if let serviceNamesContainer = serviceNamesContainer {
            serviceNamesDecoded0 = [ServiceName]()
            for string0 in serviceNamesContainer {
                serviceNamesDecoded0?.append(string0)
            }
        }
        serviceNames = serviceNamesDecoded0
    }
}
