// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum EventClass {
    case configChange
    case deployment
    case infrastructure
    case schemaChange
    case securityChange
    case sdkUnknown(String)
}

extension EventClass : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EventClass] {
        return [
            .configChange,
            .deployment,
            .infrastructure,
            .schemaChange,
            .securityChange,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .configChange: return "CONFIG_CHANGE"
        case .deployment: return "DEPLOYMENT"
        case .infrastructure: return "INFRASTRUCTURE"
        case .schemaChange: return "SCHEMA_CHANGE"
        case .securityChange: return "SECURITY_CHANGE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EventClass(rawValue: rawValue) ?? EventClass.sdkUnknown(rawValue)
    }
}
