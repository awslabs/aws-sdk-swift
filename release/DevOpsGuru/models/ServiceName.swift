// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum ServiceName {
    case apiGateway
    case applicationElb
    case autoScalingGroup
    case cloudFront
    case dynamoDb
    case ec2
    case ecs
    case eks
    case elasticBeanstalk
    case elastiCache
    case elb
    case es
    case kinesis
    case lambda
    case natGateway
    case networkElb
    case rds
    case redshift
    case route53
    case s3
    case sageMaker
    case sns
    case sqs
    case stepFunctions
    case swf
    case sdkUnknown(String)
}

extension ServiceName : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ServiceName] {
        return [
            .apiGateway,
            .applicationElb,
            .autoScalingGroup,
            .cloudFront,
            .dynamoDb,
            .ec2,
            .ecs,
            .eks,
            .elasticBeanstalk,
            .elastiCache,
            .elb,
            .es,
            .kinesis,
            .lambda,
            .natGateway,
            .networkElb,
            .rds,
            .redshift,
            .route53,
            .s3,
            .sageMaker,
            .sns,
            .sqs,
            .stepFunctions,
            .swf,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .apiGateway: return "API_GATEWAY"
        case .applicationElb: return "APPLICATION_ELB"
        case .autoScalingGroup: return "AUTO_SCALING_GROUP"
        case .cloudFront: return "CLOUD_FRONT"
        case .dynamoDb: return "DYNAMO_DB"
        case .ec2: return "EC2"
        case .ecs: return "ECS"
        case .eks: return "EKS"
        case .elasticBeanstalk: return "ELASTIC_BEANSTALK"
        case .elastiCache: return "ELASTI_CACHE"
        case .elb: return "ELB"
        case .es: return "ES"
        case .kinesis: return "KINESIS"
        case .lambda: return "LAMBDA"
        case .natGateway: return "NAT_GATEWAY"
        case .networkElb: return "NETWORK_ELB"
        case .rds: return "RDS"
        case .redshift: return "REDSHIFT"
        case .route53: return "ROUTE_53"
        case .s3: return "S3"
        case .sageMaker: return "SAGE_MAKER"
        case .sns: return "SNS"
        case .sqs: return "SQS"
        case .stepFunctions: return "STEP_FUNCTIONS"
        case .swf: return "SWF"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ServiceName(rawValue: rawValue) ?? ServiceName.sdkUnknown(rawValue)
    }
}
