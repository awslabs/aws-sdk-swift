// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The region of the S3 bucket that AWS delivers the report into.</p>
public enum AWSRegion {
    case bahrain
    case beijing
    case canadaCentral
    case capeTown
    case frankfurt
    case hongKong
    case ireland
    case london
    case milano
    case mumbai
    case ningxia
    case northernCalifornia
    case ohio
    case oregon
    case osaka
    case paris
    case saoPaulo
    case seoul
    case singapore
    case stockholm
    case sydney
    case tokyo
    case usStandard
    case sdkUnknown(String)
}

extension AWSRegion : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AWSRegion] {
        return [
            .bahrain,
            .beijing,
            .canadaCentral,
            .capeTown,
            .frankfurt,
            .hongKong,
            .ireland,
            .london,
            .milano,
            .mumbai,
            .ningxia,
            .northernCalifornia,
            .ohio,
            .oregon,
            .osaka,
            .paris,
            .saoPaulo,
            .seoul,
            .singapore,
            .stockholm,
            .sydney,
            .tokyo,
            .usStandard,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .bahrain: return "me-south-1"
        case .beijing: return "cn-north-1"
        case .canadaCentral: return "ca-central-1"
        case .capeTown: return "af-south-1"
        case .frankfurt: return "eu-central-1"
        case .hongKong: return "ap-east-1"
        case .ireland: return "eu-west-1"
        case .london: return "eu-west-2"
        case .milano: return "eu-south-1"
        case .mumbai: return "ap-south-1"
        case .ningxia: return "cn-northwest-1"
        case .northernCalifornia: return "us-west-1"
        case .ohio: return "us-east-2"
        case .oregon: return "us-west-2"
        case .osaka: return "ap-northeast-3"
        case .paris: return "eu-west-3"
        case .saoPaulo: return "sa-east-1"
        case .seoul: return "ap-northeast-2"
        case .singapore: return "ap-southeast-1"
        case .stockholm: return "eu-north-1"
        case .sydney: return "ap-southeast-2"
        case .tokyo: return "ap-northeast-1"
        case .usStandard: return "us-east-1"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AWSRegion(rawValue: rawValue) ?? AWSRegion.sdkUnknown(rawValue)
    }
}
