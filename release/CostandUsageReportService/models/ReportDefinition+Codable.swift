// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ReportDefinition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case additionalArtifacts = "AdditionalArtifacts"
        case additionalSchemaElements = "AdditionalSchemaElements"
        case billingViewArn = "BillingViewArn"
        case compression = "Compression"
        case format = "Format"
        case refreshClosedReports = "RefreshClosedReports"
        case reportName = "ReportName"
        case reportVersioning = "ReportVersioning"
        case s3Bucket = "S3Bucket"
        case s3Prefix = "S3Prefix"
        case s3Region = "S3Region"
        case timeUnit = "TimeUnit"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalArtifacts = additionalArtifacts {
            var additionalArtifactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalArtifacts)
            for additionalartifactlist0 in additionalArtifacts {
                try additionalArtifactsContainer.encode(additionalartifactlist0.rawValue)
            }
        }
        if let additionalSchemaElements = additionalSchemaElements {
            var additionalSchemaElementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalSchemaElements)
            for schemaelementlist0 in additionalSchemaElements {
                try additionalSchemaElementsContainer.encode(schemaelementlist0.rawValue)
            }
        }
        if let billingViewArn = billingViewArn {
            try encodeContainer.encode(billingViewArn, forKey: .billingViewArn)
        }
        if let compression = compression {
            try encodeContainer.encode(compression.rawValue, forKey: .compression)
        }
        if let format = format {
            try encodeContainer.encode(format.rawValue, forKey: .format)
        }
        if let refreshClosedReports = refreshClosedReports {
            try encodeContainer.encode(refreshClosedReports, forKey: .refreshClosedReports)
        }
        if let reportName = reportName {
            try encodeContainer.encode(reportName, forKey: .reportName)
        }
        if let reportVersioning = reportVersioning {
            try encodeContainer.encode(reportVersioning.rawValue, forKey: .reportVersioning)
        }
        if let s3Bucket = s3Bucket {
            try encodeContainer.encode(s3Bucket, forKey: .s3Bucket)
        }
        if let s3Prefix = s3Prefix {
            try encodeContainer.encode(s3Prefix, forKey: .s3Prefix)
        }
        if let s3Region = s3Region {
            try encodeContainer.encode(s3Region.rawValue, forKey: .s3Region)
        }
        if let timeUnit = timeUnit {
            try encodeContainer.encode(timeUnit.rawValue, forKey: .timeUnit)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reportName)
        reportName = reportNameDecoded
        let timeUnitDecoded = try containerValues.decodeIfPresent(TimeUnit.self, forKey: .timeUnit)
        timeUnit = timeUnitDecoded
        let formatDecoded = try containerValues.decodeIfPresent(ReportFormat.self, forKey: .format)
        format = formatDecoded
        let compressionDecoded = try containerValues.decodeIfPresent(CompressionFormat.self, forKey: .compression)
        compression = compressionDecoded
        let additionalSchemaElementsContainer = try containerValues.decodeIfPresent([SchemaElement].self, forKey: .additionalSchemaElements)
        var additionalSchemaElementsDecoded0:[SchemaElement]? = nil
        if let additionalSchemaElementsContainer = additionalSchemaElementsContainer {
            additionalSchemaElementsDecoded0 = [SchemaElement]()
            for string0 in additionalSchemaElementsContainer {
                additionalSchemaElementsDecoded0?.append(string0)
            }
        }
        additionalSchemaElements = additionalSchemaElementsDecoded0
        let s3BucketDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
        let s3PrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3Prefix)
        s3Prefix = s3PrefixDecoded
        let s3RegionDecoded = try containerValues.decodeIfPresent(AWSRegion.self, forKey: .s3Region)
        s3Region = s3RegionDecoded
        let additionalArtifactsContainer = try containerValues.decodeIfPresent([AdditionalArtifact].self, forKey: .additionalArtifacts)
        var additionalArtifactsDecoded0:[AdditionalArtifact]? = nil
        if let additionalArtifactsContainer = additionalArtifactsContainer {
            additionalArtifactsDecoded0 = [AdditionalArtifact]()
            for string0 in additionalArtifactsContainer {
                additionalArtifactsDecoded0?.append(string0)
            }
        }
        additionalArtifacts = additionalArtifactsDecoded0
        let refreshClosedReportsDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .refreshClosedReports)
        refreshClosedReports = refreshClosedReportsDecoded
        let reportVersioningDecoded = try containerValues.decodeIfPresent(ReportVersioning.self, forKey: .reportVersioning)
        reportVersioning = reportVersioningDecoded
        let billingViewArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .billingViewArn)
        billingViewArn = billingViewArnDecoded
    }
}
