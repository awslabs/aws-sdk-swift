// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PolicyToPath: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case path = "Path"
        case policies = "Policies"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let policies = policies {
            var policiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .policies)
            for policyattachmentlist0 in policies {
                try policiesContainer.encode(policyattachmentlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .path)
        path = pathDecoded
        let policiesContainer = try containerValues.decodeIfPresent([PolicyAttachment].self, forKey: .policies)
        var policiesDecoded0:[PolicyAttachment]? = nil
        if let policiesContainer = policiesContainer {
            policiesDecoded0 = [PolicyAttachment]()
            for structure0 in policiesContainer {
                policiesDecoded0?.append(structure0)
            }
        }
        policies = policiesDecoded0
    }
}
