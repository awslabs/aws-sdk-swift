// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TypedLinkSchemaAndFacetName: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case schemaArn = "SchemaArn"
        case typedLinkName = "TypedLinkName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let schemaArn = schemaArn {
            try encodeContainer.encode(schemaArn, forKey: .schemaArn)
        }
        if let typedLinkName = typedLinkName {
            try encodeContainer.encode(typedLinkName, forKey: .typedLinkName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .schemaArn)
        schemaArn = schemaArnDecoded
        let typedLinkNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .typedLinkName)
        typedLinkName = typedLinkNameDecoded
    }
}
