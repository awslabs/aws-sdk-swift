// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchListObjectParentsResponse: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case parentLinks = "ParentLinks"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let parentLinks = parentLinks {
            var parentLinksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parentLinks)
            for objectidentifierandlinknamelist0 in parentLinks {
                try parentLinksContainer.encode(objectidentifierandlinknamelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parentLinksContainer = try containerValues.decodeIfPresent([ObjectIdentifierAndLinkNameTuple].self, forKey: .parentLinks)
        var parentLinksDecoded0:[ObjectIdentifierAndLinkNameTuple]? = nil
        if let parentLinksContainer = parentLinksContainer {
            parentLinksDecoded0 = [ObjectIdentifierAndLinkNameTuple]()
            for structure0 in parentLinksContainer {
                parentLinksDecoded0?.append(structure0)
            }
        }
        parentLinks = parentLinksDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
