// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TypedAttributeValueRange: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case endMode = "EndMode"
        case endValue = "EndValue"
        case startMode = "StartMode"
        case startValue = "StartValue"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endMode = endMode {
            try encodeContainer.encode(endMode.rawValue, forKey: .endMode)
        }
        if let endValue = endValue {
            try encodeContainer.encode(endValue, forKey: .endValue)
        }
        if let startMode = startMode {
            try encodeContainer.encode(startMode.rawValue, forKey: .startMode)
        }
        if let startValue = startValue {
            try encodeContainer.encode(startValue, forKey: .startValue)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startModeDecoded = try containerValues.decodeIfPresent(RangeMode.self, forKey: .startMode)
        startMode = startModeDecoded
        let startValueDecoded = try containerValues.decodeIfPresent(TypedAttributeValue.self, forKey: .startValue)
        startValue = startValueDecoded
        let endModeDecoded = try containerValues.decodeIfPresent(RangeMode.self, forKey: .endMode)
        endMode = endModeDecoded
        let endValueDecoded = try containerValues.decodeIfPresent(TypedAttributeValue.self, forKey: .endValue)
        endValue = endValueDecoded
    }
}
