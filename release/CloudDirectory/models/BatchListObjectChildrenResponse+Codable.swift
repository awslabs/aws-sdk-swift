// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchListObjectChildrenResponse: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case children = "Children"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let children = children {
            var childrenContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .children)
            for (dictKey0, linknametoobjectidentifiermap0) in children {
                try childrenContainer.encode(linknametoobjectidentifiermap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let childrenContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .children)
        var childrenDecoded0: [String:String]? = nil
        if let childrenContainer = childrenContainer {
            childrenDecoded0 = [String:String]()
            for (key0, objectidentifier0) in childrenContainer {
                childrenDecoded0?[key0] = objectidentifier0
            }
        }
        children = childrenDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
