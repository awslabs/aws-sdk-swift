// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum BatchWriteExceptionType {
    case accessdeniedexception
    case directorynotenabledexception
    case facetvalidationexception
    case indexedattributemissingexception
    case internalserviceexception
    case invalidarnexception
    case invalidattachmentexception
    case limitexceededexception
    case linknamealreadyinuseexception
    case notindexexception
    case notnodeexception
    case notpolicyexception
    case objectalreadydetachedexception
    case objectnotdetachedexception
    case resourcenotfoundexception
    case stillcontainslinksexception
    case unsupportedindextypeexception
    case validationexception
    case sdkUnknown(String)
}

extension BatchWriteExceptionType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BatchWriteExceptionType] {
        return [
            .accessdeniedexception,
            .directorynotenabledexception,
            .facetvalidationexception,
            .indexedattributemissingexception,
            .internalserviceexception,
            .invalidarnexception,
            .invalidattachmentexception,
            .limitexceededexception,
            .linknamealreadyinuseexception,
            .notindexexception,
            .notnodeexception,
            .notpolicyexception,
            .objectalreadydetachedexception,
            .objectnotdetachedexception,
            .resourcenotfoundexception,
            .stillcontainslinksexception,
            .unsupportedindextypeexception,
            .validationexception,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accessdeniedexception: return "AccessDeniedException"
        case .directorynotenabledexception: return "DirectoryNotEnabledException"
        case .facetvalidationexception: return "FacetValidationException"
        case .indexedattributemissingexception: return "IndexedAttributeMissingException"
        case .internalserviceexception: return "InternalServiceException"
        case .invalidarnexception: return "InvalidArnException"
        case .invalidattachmentexception: return "InvalidAttachmentException"
        case .limitexceededexception: return "LimitExceededException"
        case .linknamealreadyinuseexception: return "LinkNameAlreadyInUseException"
        case .notindexexception: return "NotIndexException"
        case .notnodeexception: return "NotNodeException"
        case .notpolicyexception: return "NotPolicyException"
        case .objectalreadydetachedexception: return "ObjectAlreadyDetachedException"
        case .objectnotdetachedexception: return "ObjectNotDetachedException"
        case .resourcenotfoundexception: return "ResourceNotFoundException"
        case .stillcontainslinksexception: return "StillContainsLinksException"
        case .unsupportedindextypeexception: return "UnsupportedIndexTypeException"
        case .validationexception: return "ValidationException"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BatchWriteExceptionType(rawValue: rawValue) ?? BatchWriteExceptionType.sdkUnknown(rawValue)
    }
}
