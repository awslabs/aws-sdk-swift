// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TypedAttributeValue: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case binaryValue = "BinaryValue"
        case booleanValue = "BooleanValue"
        case datetimeValue = "DatetimeValue"
        case numberValue = "NumberValue"
        case stringValue = "StringValue"
        case sdkUnknown
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .binaryValue(binaryValue):
                if let binaryValue = binaryValue {
                    try container.encode(binaryValue.base64EncodedString(), forKey: .binaryValue)
                }
            case let .booleanValue(booleanValue):
                if let booleanValue = booleanValue {
                    try container.encode(booleanValue, forKey: .booleanValue)
                }
            case let .datetimeValue(datetimeValue):
                if let datetimeValue = datetimeValue {
                    try container.encode(datetimeValue.timeIntervalSince1970, forKey: .datetimeValue)
                }
            case let .numberValue(numberValue):
                if let numberValue = numberValue {
                    try container.encode(numberValue, forKey: .numberValue)
                }
            case let .stringValue(stringValue):
                if let stringValue = stringValue {
                    try container.encode(stringValue, forKey: .stringValue)
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let stringValueDecoded = try values.decodeIfPresent(String.self, forKey: .stringValue)
        if let stringValue = stringValueDecoded {
            self = .stringValue(stringValue)
            return
        }
        let binaryValueDecoded = try values.decodeIfPresent(Data.self, forKey: .binaryValue)
        if let binaryValue = binaryValueDecoded {
            self = .binaryValue(binaryValue)
            return
        }
        let booleanValueDecoded = try values.decodeIfPresent(Bool.self, forKey: .booleanValue)
        if let booleanValue = booleanValueDecoded {
            self = .booleanValue(booleanValue)
            return
        }
        let numberValueDecoded = try values.decodeIfPresent(String.self, forKey: .numberValue)
        if let numberValue = numberValueDecoded {
            self = .numberValue(numberValue)
            return
        }
        let datetimeValueDecoded = try values.decodeIfPresent(Date.self, forKey: .datetimeValue)
        if let datetimeValue = datetimeValueDecoded {
            self = .datetimeValue(datetimeValue)
            return
        }
        self = .sdkUnknown("")
    }
}
