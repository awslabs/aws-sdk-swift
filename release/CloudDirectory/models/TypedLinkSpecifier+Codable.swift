// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TypedLinkSpecifier: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case identityAttributeValues = "IdentityAttributeValues"
        case sourceObjectReference = "SourceObjectReference"
        case targetObjectReference = "TargetObjectReference"
        case typedLinkFacet = "TypedLinkFacet"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identityAttributeValues = identityAttributeValues {
            var identityAttributeValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .identityAttributeValues)
            for attributenameandvaluelist0 in identityAttributeValues {
                try identityAttributeValuesContainer.encode(attributenameandvaluelist0)
            }
        }
        if let sourceObjectReference = sourceObjectReference {
            try encodeContainer.encode(sourceObjectReference, forKey: .sourceObjectReference)
        }
        if let targetObjectReference = targetObjectReference {
            try encodeContainer.encode(targetObjectReference, forKey: .targetObjectReference)
        }
        if let typedLinkFacet = typedLinkFacet {
            try encodeContainer.encode(typedLinkFacet, forKey: .typedLinkFacet)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typedLinkFacetDecoded = try containerValues.decodeIfPresent(TypedLinkSchemaAndFacetName.self, forKey: .typedLinkFacet)
        typedLinkFacet = typedLinkFacetDecoded
        let sourceObjectReferenceDecoded = try containerValues.decodeIfPresent(ObjectReference.self, forKey: .sourceObjectReference)
        sourceObjectReference = sourceObjectReferenceDecoded
        let targetObjectReferenceDecoded = try containerValues.decodeIfPresent(ObjectReference.self, forKey: .targetObjectReference)
        targetObjectReference = targetObjectReferenceDecoded
        let identityAttributeValuesContainer = try containerValues.decodeIfPresent([AttributeNameAndValue].self, forKey: .identityAttributeValues)
        var identityAttributeValuesDecoded0:[AttributeNameAndValue]? = nil
        if let identityAttributeValuesContainer = identityAttributeValuesContainer {
            identityAttributeValuesDecoded0 = [AttributeNameAndValue]()
            for structure0 in identityAttributeValuesContainer {
                identityAttributeValuesDecoded0?.append(structure0)
            }
        }
        identityAttributeValues = identityAttributeValuesDecoded0
    }
}
