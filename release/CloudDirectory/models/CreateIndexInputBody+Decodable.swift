// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateIndexInputBody: Equatable {
    public let orderedIndexedAttributeList: [AttributeKey]?
    public let isUnique: Bool
    public let parentReference: ObjectReference?
    public let linkName: String?
}

extension CreateIndexInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case isUnique = "IsUnique"
        case linkName = "LinkName"
        case orderedIndexedAttributeList = "OrderedIndexedAttributeList"
        case parentReference = "ParentReference"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let orderedIndexedAttributeListContainer = try containerValues.decodeIfPresent([AttributeKey].self, forKey: .orderedIndexedAttributeList)
        var orderedIndexedAttributeListDecoded0:[AttributeKey]? = nil
        if let orderedIndexedAttributeListContainer = orderedIndexedAttributeListContainer {
            orderedIndexedAttributeListDecoded0 = [AttributeKey]()
            for structure0 in orderedIndexedAttributeListContainer {
                orderedIndexedAttributeListDecoded0?.append(structure0)
            }
        }
        orderedIndexedAttributeList = orderedIndexedAttributeListDecoded0
        let isUniqueDecoded = try containerValues.decode(Bool.self, forKey: .isUnique)
        isUnique = isUniqueDecoded
        let parentReferenceDecoded = try containerValues.decodeIfPresent(ObjectReference.self, forKey: .parentReference)
        parentReference = parentReferenceDecoded
        let linkNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .linkName)
        linkName = linkNameDecoded
    }
}
