// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchListIndex: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case indexReference = "IndexReference"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case rangesOnIndexedValues = "RangesOnIndexedValues"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexReference = indexReference {
            try encodeContainer.encode(indexReference, forKey: .indexReference)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let rangesOnIndexedValues = rangesOnIndexedValues {
            var rangesOnIndexedValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rangesOnIndexedValues)
            for objectattributerangelist0 in rangesOnIndexedValues {
                try rangesOnIndexedValuesContainer.encode(objectattributerangelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rangesOnIndexedValuesContainer = try containerValues.decodeIfPresent([ObjectAttributeRange].self, forKey: .rangesOnIndexedValues)
        var rangesOnIndexedValuesDecoded0:[ObjectAttributeRange]? = nil
        if let rangesOnIndexedValuesContainer = rangesOnIndexedValuesContainer {
            rangesOnIndexedValuesDecoded0 = [ObjectAttributeRange]()
            for structure0 in rangesOnIndexedValuesContainer {
                rangesOnIndexedValuesDecoded0?.append(structure0)
            }
        }
        rangesOnIndexedValues = rangesOnIndexedValuesDecoded0
        let indexReferenceDecoded = try containerValues.decodeIfPresent(ObjectReference.self, forKey: .indexReference)
        indexReference = indexReferenceDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
