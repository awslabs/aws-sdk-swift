// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum RuleType {
    case binaryLength
    case numberComparison
    case stringFromSet
    case stringLength
    case sdkUnknown(String)
}

extension RuleType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [RuleType] {
        return [
            .binaryLength,
            .numberComparison,
            .stringFromSet,
            .stringLength,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .binaryLength: return "BINARY_LENGTH"
        case .numberComparison: return "NUMBER_COMPARISON"
        case .stringFromSet: return "STRING_FROM_SET"
        case .stringLength: return "STRING_LENGTH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = RuleType(rawValue: rawValue) ?? RuleType.sdkUnknown(rawValue)
    }
}
