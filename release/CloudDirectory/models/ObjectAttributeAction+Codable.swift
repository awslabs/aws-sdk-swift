// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ObjectAttributeAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case objectAttributeActionType = "ObjectAttributeActionType"
        case objectAttributeUpdateValue = "ObjectAttributeUpdateValue"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let objectAttributeActionType = objectAttributeActionType {
            try encodeContainer.encode(objectAttributeActionType.rawValue, forKey: .objectAttributeActionType)
        }
        if let objectAttributeUpdateValue = objectAttributeUpdateValue {
            try encodeContainer.encode(objectAttributeUpdateValue, forKey: .objectAttributeUpdateValue)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let objectAttributeActionTypeDecoded = try containerValues.decodeIfPresent(UpdateActionType.self, forKey: .objectAttributeActionType)
        objectAttributeActionType = objectAttributeActionTypeDecoded
        let objectAttributeUpdateValueDecoded = try containerValues.decodeIfPresent(TypedAttributeValue.self, forKey: .objectAttributeUpdateValue)
        objectAttributeUpdateValue = objectAttributeUpdateValueDecoded
    }
}
