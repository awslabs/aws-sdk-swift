// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TypedLinkFacet: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributes = "Attributes"
        case identityAttributeOrder = "IdentityAttributeOrder"
        case name = "Name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributes)
            for typedlinkattributedefinitionlist0 in attributes {
                try attributesContainer.encode(typedlinkattributedefinitionlist0)
            }
        }
        if let identityAttributeOrder = identityAttributeOrder {
            var identityAttributeOrderContainer = encodeContainer.nestedUnkeyedContainer(forKey: .identityAttributeOrder)
            for attributenamelist0 in identityAttributeOrder {
                try identityAttributeOrderContainer.encode(attributenamelist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let attributesContainer = try containerValues.decodeIfPresent([TypedLinkAttributeDefinition].self, forKey: .attributes)
        var attributesDecoded0:[TypedLinkAttributeDefinition]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [TypedLinkAttributeDefinition]()
            for structure0 in attributesContainer {
                attributesDecoded0?.append(structure0)
            }
        }
        attributes = attributesDecoded0
        let identityAttributeOrderContainer = try containerValues.decodeIfPresent([String].self, forKey: .identityAttributeOrder)
        var identityAttributeOrderDecoded0:[String]? = nil
        if let identityAttributeOrderContainer = identityAttributeOrderContainer {
            identityAttributeOrderDecoded0 = [String]()
            for string0 in identityAttributeOrderContainer {
                identityAttributeOrderDecoded0?.append(string0)
            }
        }
        identityAttributeOrder = identityAttributeOrderDecoded0
    }
}
