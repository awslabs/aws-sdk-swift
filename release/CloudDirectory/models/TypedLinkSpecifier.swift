// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Contains all the information that is used to uniquely identify a typed link. The
///       parameters discussed in this topic are used to uniquely specify the typed link being operated
///       on. The <a>AttachTypedLink</a> API returns a typed link specifier while the <a>DetachTypedLink</a> API accepts one as input. Similarly, the <a>ListIncomingTypedLinks</a> and <a>ListOutgoingTypedLinks</a> API
///       operations provide typed link specifiers as output. You can also construct a typed link
///       specifier from scratch.</p>
public struct TypedLinkSpecifier: Equatable {
    /// <p>Identifies the attribute value to update.</p>
    public let identityAttributeValues: [AttributeNameAndValue]?
    /// <p>Identifies the source object that the typed link will attach to.</p>
    public let sourceObjectReference: ObjectReference?
    /// <p>Identifies the target object that the typed link will attach to.</p>
    public let targetObjectReference: ObjectReference?
    /// <p>Identifies the typed link facet that is associated with the typed link.</p>
    public let typedLinkFacet: TypedLinkSchemaAndFacetName?

    public init (
        identityAttributeValues: [AttributeNameAndValue]? = nil,
        sourceObjectReference: ObjectReference? = nil,
        targetObjectReference: ObjectReference? = nil,
        typedLinkFacet: TypedLinkSchemaAndFacetName? = nil
    )
    {
        self.identityAttributeValues = identityAttributeValues
        self.sourceObjectReference = sourceObjectReference
        self.targetObjectReference = targetObjectReference
        self.typedLinkFacet = typedLinkFacet
    }
}
