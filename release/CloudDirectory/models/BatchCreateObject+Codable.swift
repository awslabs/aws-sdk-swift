// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchCreateObject: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case batchReferenceName = "BatchReferenceName"
        case linkName = "LinkName"
        case objectAttributeList = "ObjectAttributeList"
        case parentReference = "ParentReference"
        case schemaFacet = "SchemaFacet"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchReferenceName = batchReferenceName {
            try encodeContainer.encode(batchReferenceName, forKey: .batchReferenceName)
        }
        if let linkName = linkName {
            try encodeContainer.encode(linkName, forKey: .linkName)
        }
        if let objectAttributeList = objectAttributeList {
            var objectAttributeListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .objectAttributeList)
            for attributekeyandvaluelist0 in objectAttributeList {
                try objectAttributeListContainer.encode(attributekeyandvaluelist0)
            }
        }
        if let parentReference = parentReference {
            try encodeContainer.encode(parentReference, forKey: .parentReference)
        }
        if let schemaFacet = schemaFacet {
            var schemaFacetContainer = encodeContainer.nestedUnkeyedContainer(forKey: .schemaFacet)
            for schemafacetlist0 in schemaFacet {
                try schemaFacetContainer.encode(schemafacetlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaFacetContainer = try containerValues.decodeIfPresent([SchemaFacet].self, forKey: .schemaFacet)
        var schemaFacetDecoded0:[SchemaFacet]? = nil
        if let schemaFacetContainer = schemaFacetContainer {
            schemaFacetDecoded0 = [SchemaFacet]()
            for structure0 in schemaFacetContainer {
                schemaFacetDecoded0?.append(structure0)
            }
        }
        schemaFacet = schemaFacetDecoded0
        let objectAttributeListContainer = try containerValues.decodeIfPresent([AttributeKeyAndValue].self, forKey: .objectAttributeList)
        var objectAttributeListDecoded0:[AttributeKeyAndValue]? = nil
        if let objectAttributeListContainer = objectAttributeListContainer {
            objectAttributeListDecoded0 = [AttributeKeyAndValue]()
            for structure0 in objectAttributeListContainer {
                objectAttributeListDecoded0?.append(structure0)
            }
        }
        objectAttributeList = objectAttributeListDecoded0
        let parentReferenceDecoded = try containerValues.decodeIfPresent(ObjectReference.self, forKey: .parentReference)
        parentReference = parentReferenceDecoded
        let linkNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .linkName)
        linkName = linkNameDecoded
        let batchReferenceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .batchReferenceName)
        batchReferenceName = batchReferenceNameDecoded
    }
}
