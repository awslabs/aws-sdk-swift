// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchListObjectPoliciesResponse: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attachedPolicyIds = "AttachedPolicyIds"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachedPolicyIds = attachedPolicyIds {
            var attachedPolicyIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attachedPolicyIds)
            for objectidentifierlist0 in attachedPolicyIds {
                try attachedPolicyIdsContainer.encode(objectidentifierlist0)
            }
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachedPolicyIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .attachedPolicyIds)
        var attachedPolicyIdsDecoded0:[String]? = nil
        if let attachedPolicyIdsContainer = attachedPolicyIdsContainer {
            attachedPolicyIdsDecoded0 = [String]()
            for string0 in attachedPolicyIdsContainer {
                attachedPolicyIdsDecoded0?.append(string0)
            }
        }
        attachedPolicyIds = attachedPolicyIdsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
