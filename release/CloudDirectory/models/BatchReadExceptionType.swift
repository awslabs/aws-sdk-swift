// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum BatchReadExceptionType {
    case accessdeniedexception
    case cannotlistparentofrootexception
    case directorynotenabledexception
    case facetvalidationexception
    case internalserviceexception
    case invalidarnexception
    case invalidnexttokenexception
    case limitexceededexception
    case notindexexception
    case notnodeexception
    case notpolicyexception
    case resourcenotfoundexception
    case validationexception
    case sdkUnknown(String)
}

extension BatchReadExceptionType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BatchReadExceptionType] {
        return [
            .accessdeniedexception,
            .cannotlistparentofrootexception,
            .directorynotenabledexception,
            .facetvalidationexception,
            .internalserviceexception,
            .invalidarnexception,
            .invalidnexttokenexception,
            .limitexceededexception,
            .notindexexception,
            .notnodeexception,
            .notpolicyexception,
            .resourcenotfoundexception,
            .validationexception,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accessdeniedexception: return "AccessDeniedException"
        case .cannotlistparentofrootexception: return "CannotListParentOfRootException"
        case .directorynotenabledexception: return "DirectoryNotEnabledException"
        case .facetvalidationexception: return "FacetValidationException"
        case .internalserviceexception: return "InternalServiceException"
        case .invalidarnexception: return "InvalidArnException"
        case .invalidnexttokenexception: return "InvalidNextTokenException"
        case .limitexceededexception: return "LimitExceededException"
        case .notindexexception: return "NotIndexException"
        case .notnodeexception: return "NotNodeException"
        case .notpolicyexception: return "NotPolicyException"
        case .resourcenotfoundexception: return "ResourceNotFoundException"
        case .validationexception: return "ValidationException"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BatchReadExceptionType(rawValue: rawValue) ?? BatchReadExceptionType.sdkUnknown(rawValue)
    }
}
