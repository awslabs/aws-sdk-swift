// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListObjectParentsOutputBody: Equatable {
    public let parents: [String:String]?
    public let nextToken: String?
    public let parentLinks: [ObjectIdentifierAndLinkNameTuple]?
}

extension ListObjectParentsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case parentLinks = "ParentLinks"
        case parents = "Parents"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parentsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .parents)
        var parentsDecoded0: [String:String]? = nil
        if let parentsContainer = parentsContainer {
            parentsDecoded0 = [String:String]()
            for (key0, linkname0) in parentsContainer {
                parentsDecoded0?[key0] = linkname0
            }
        }
        parents = parentsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let parentLinksContainer = try containerValues.decodeIfPresent([ObjectIdentifierAndLinkNameTuple].self, forKey: .parentLinks)
        var parentLinksDecoded0:[ObjectIdentifierAndLinkNameTuple]? = nil
        if let parentLinksContainer = parentLinksContainer {
            parentLinksDecoded0 = [ObjectIdentifierAndLinkNameTuple]()
            for structure0 in parentLinksContainer {
                parentLinksDecoded0?.append(structure0)
            }
        }
        parentLinks = parentLinksDecoded0
    }
}
