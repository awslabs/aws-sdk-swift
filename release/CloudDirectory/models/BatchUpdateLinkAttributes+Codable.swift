// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchUpdateLinkAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributeUpdates = "AttributeUpdates"
        case typedLinkSpecifier = "TypedLinkSpecifier"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeUpdates = attributeUpdates {
            var attributeUpdatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributeUpdates)
            for linkattributeupdatelist0 in attributeUpdates {
                try attributeUpdatesContainer.encode(linkattributeupdatelist0)
            }
        }
        if let typedLinkSpecifier = typedLinkSpecifier {
            try encodeContainer.encode(typedLinkSpecifier, forKey: .typedLinkSpecifier)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typedLinkSpecifierDecoded = try containerValues.decodeIfPresent(TypedLinkSpecifier.self, forKey: .typedLinkSpecifier)
        typedLinkSpecifier = typedLinkSpecifierDecoded
        let attributeUpdatesContainer = try containerValues.decodeIfPresent([LinkAttributeUpdate].self, forKey: .attributeUpdates)
        var attributeUpdatesDecoded0:[LinkAttributeUpdate]? = nil
        if let attributeUpdatesContainer = attributeUpdatesContainer {
            attributeUpdatesDecoded0 = [LinkAttributeUpdate]()
            for structure0 in attributeUpdatesContainer {
                attributeUpdatesDecoded0?.append(structure0)
            }
        }
        attributeUpdates = attributeUpdatesDecoded0
    }
}
