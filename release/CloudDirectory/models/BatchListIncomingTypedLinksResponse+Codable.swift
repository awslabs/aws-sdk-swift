// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchListIncomingTypedLinksResponse: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case linkSpecifiers = "LinkSpecifiers"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let linkSpecifiers = linkSpecifiers {
            var linkSpecifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .linkSpecifiers)
            for typedlinkspecifierlist0 in linkSpecifiers {
                try linkSpecifiersContainer.encode(typedlinkspecifierlist0)
            }
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let linkSpecifiersContainer = try containerValues.decodeIfPresent([TypedLinkSpecifier].self, forKey: .linkSpecifiers)
        var linkSpecifiersDecoded0:[TypedLinkSpecifier]? = nil
        if let linkSpecifiersContainer = linkSpecifiersContainer {
            linkSpecifiersDecoded0 = [TypedLinkSpecifier]()
            for structure0 in linkSpecifiersContainer {
                linkSpecifiersDecoded0?.append(structure0)
            }
        }
        linkSpecifiers = linkSpecifiersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
