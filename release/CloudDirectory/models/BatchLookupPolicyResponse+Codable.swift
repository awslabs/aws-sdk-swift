// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchLookupPolicyResponse: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case policyToPathList = "PolicyToPathList"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let policyToPathList = policyToPathList {
            var policyToPathListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .policyToPathList)
            for policytopathlist0 in policyToPathList {
                try policyToPathListContainer.encode(policytopathlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyToPathListContainer = try containerValues.decodeIfPresent([PolicyToPath].self, forKey: .policyToPathList)
        var policyToPathListDecoded0:[PolicyToPath]? = nil
        if let policyToPathListContainer = policyToPathListContainer {
            policyToPathListDecoded0 = [PolicyToPath]()
            for structure0 in policyToPathListContainer {
                policyToPathListDecoded0?.append(structure0)
            }
        }
        policyToPathList = policyToPathListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
