// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListOutgoingTypedLinksInputBody: Equatable {
    public let objectReference: ObjectReference?
    public let filterAttributeRanges: [TypedLinkAttributeRange]?
    public let filterTypedLink: TypedLinkSchemaAndFacetName?
    public let nextToken: String?
    public let maxResults: Int?
    public let consistencyLevel: ConsistencyLevel?
}

extension ListOutgoingTypedLinksInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case consistencyLevel = "ConsistencyLevel"
        case filterAttributeRanges = "FilterAttributeRanges"
        case filterTypedLink = "FilterTypedLink"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case objectReference = "ObjectReference"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let objectReferenceDecoded = try containerValues.decodeIfPresent(ObjectReference.self, forKey: .objectReference)
        objectReference = objectReferenceDecoded
        let filterAttributeRangesContainer = try containerValues.decodeIfPresent([TypedLinkAttributeRange].self, forKey: .filterAttributeRanges)
        var filterAttributeRangesDecoded0:[TypedLinkAttributeRange]? = nil
        if let filterAttributeRangesContainer = filterAttributeRangesContainer {
            filterAttributeRangesDecoded0 = [TypedLinkAttributeRange]()
            for structure0 in filterAttributeRangesContainer {
                filterAttributeRangesDecoded0?.append(structure0)
            }
        }
        filterAttributeRanges = filterAttributeRangesDecoded0
        let filterTypedLinkDecoded = try containerValues.decodeIfPresent(TypedLinkSchemaAndFacetName.self, forKey: .filterTypedLink)
        filterTypedLink = filterTypedLinkDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let consistencyLevelDecoded = try containerValues.decodeIfPresent(ConsistencyLevel.self, forKey: .consistencyLevel)
        consistencyLevel = consistencyLevelDecoded
    }
}
