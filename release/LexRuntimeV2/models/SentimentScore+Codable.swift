// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SentimentScore: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case mixed
        case negative
        case neutral
        case positive
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if mixed != 0.0 {
            try encodeContainer.encode(mixed, forKey: .mixed)
        }
        if negative != 0.0 {
            try encodeContainer.encode(negative, forKey: .negative)
        }
        if neutral != 0.0 {
            try encodeContainer.encode(neutral, forKey: .neutral)
        }
        if positive != 0.0 {
            try encodeContainer.encode(positive, forKey: .positive)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let positiveDecoded = try containerValues.decode(Double.self, forKey: .positive)
        positive = positiveDecoded
        let negativeDecoded = try containerValues.decode(Double.self, forKey: .negative)
        negative = negativeDecoded
        let neutralDecoded = try containerValues.decode(Double.self, forKey: .neutral)
        neutral = neutralDecoded
        let mixedDecoded = try containerValues.decode(Double.self, forKey: .mixed)
        mixed = mixedDecoded
    }
}
