// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IntentResultEvent: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case eventId
        case inputMode
        case interpretations
        case requestAttributes
        case sessionId
        case sessionState
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventId = eventId {
            try encodeContainer.encode(eventId, forKey: .eventId)
        }
        if let inputMode = inputMode {
            try encodeContainer.encode(inputMode.rawValue, forKey: .inputMode)
        }
        if let interpretations = interpretations {
            var interpretationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .interpretations)
            for interpretations0 in interpretations {
                try interpretationsContainer.encode(interpretations0)
            }
        }
        if let requestAttributes = requestAttributes {
            var requestAttributesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .requestAttributes)
            for (dictKey0, stringmap0) in requestAttributes {
                try requestAttributesContainer.encode(stringmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let sessionId = sessionId {
            try encodeContainer.encode(sessionId, forKey: .sessionId)
        }
        if let sessionState = sessionState {
            try encodeContainer.encode(sessionState, forKey: .sessionState)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputModeDecoded = try containerValues.decodeIfPresent(InputMode.self, forKey: .inputMode)
        inputMode = inputModeDecoded
        let interpretationsContainer = try containerValues.decodeIfPresent([Interpretation].self, forKey: .interpretations)
        var interpretationsDecoded0:[Interpretation]? = nil
        if let interpretationsContainer = interpretationsContainer {
            interpretationsDecoded0 = [Interpretation]()
            for structure0 in interpretationsContainer {
                interpretationsDecoded0?.append(structure0)
            }
        }
        interpretations = interpretationsDecoded0
        let sessionStateDecoded = try containerValues.decodeIfPresent(SessionState.self, forKey: .sessionState)
        sessionState = sessionStateDecoded
        let requestAttributesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .requestAttributes)
        var requestAttributesDecoded0: [String:String]? = nil
        if let requestAttributesContainer = requestAttributesContainer {
            requestAttributesDecoded0 = [String:String]()
            for (key0, string0) in requestAttributesContainer {
                requestAttributesDecoded0?[key0] = string0
            }
        }
        requestAttributes = requestAttributesDecoded0
        let sessionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sessionId)
        sessionId = sessionIdDecoded
        let eventIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventId)
        eventId = eventIdDecoded
    }
}
