// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct RecognizeUtteranceOutput: Equatable {
    /// <p>The prompt or statement to send to the user. This is based on the
    ///          bot configuration and context. For example, if Amazon Lex did not understand
    ///          the user intent, it sends the <code>clarificationPrompt</code>
    ///          configured for the bot. If the intent requires confirmation before
    ///          taking the fulfillment action, it sends the
    ///             <code>confirmationPrompt</code>. Another example: Suppose that the
    ///          Lambda function successfully fulfilled the intent, and sent a message
    ///          to convey to the user. Then Amazon Lex sends that message in the
    ///          response.</p>
    public let audioStream: Data?
    /// <p>Content type as specified in the <code>responseContentType</code> in
    ///          the request.</p>
    public let contentType: String?
    /// <p>Indicates whether the input mode to the operation was text or
    ///          speech.
    ///       </p>
    public let inputMode: String?
    /// <p>The text used to process the request.</p>
    ///          <p>If the input was an audio stream, the <code>inputTranscript</code>
    ///          field contains the text extracted from the audio stream. This is the
    ///          text that is actually processed to recognize intents and slot values.
    ///          You can use this information to determine if Amazon Lex is correctly
    ///          processing the audio that you send.</p>
    public let inputTranscript: String?
    /// <p>A list of intents that Amazon Lex determined might satisfy the user's
    ///          utterance.</p>
    ///          <p>Each interpretation includes the intent, a score that indicates how
    ///          confident Amazon Lex is that the interpretation is the correct one, and an
    ///          optional sentiment response that indicates the sentiment expressed in
    ///          the utterance.</p>
    public let interpretations: String?
    /// <p>A list of messages that were last sent to the user. The messages are
    ///          ordered based on the order that you returned the messages from your
    ///          Lambda function or the order that the messages are defined in the
    ///          bot.</p>
    public let messages: String?
    /// <p>The attributes sent in the request.</p>
    public let requestAttributes: String?
    /// <p>The identifier of the session in use.</p>
    public let sessionId: String?
    /// <p>Represents the current state of the dialog between the user and the
    ///          bot.</p>
    ///          <p>Use this to determine the progress of the conversation and what the
    ///          next action might be.</p>
    public let sessionState: String?

    public init (
        audioStream: Data? = nil,
        contentType: String? = nil,
        inputMode: String? = nil,
        inputTranscript: String? = nil,
        interpretations: String? = nil,
        messages: String? = nil,
        requestAttributes: String? = nil,
        sessionId: String? = nil,
        sessionState: String? = nil
    )
    {
        self.audioStream = audioStream
        self.contentType = contentType
        self.inputMode = inputMode
        self.inputTranscript = inputTranscript
        self.interpretations = interpretations
        self.messages = messages
        self.requestAttributes = requestAttributes
        self.sessionId = sessionId
        self.sessionState = sessionState
    }
}
