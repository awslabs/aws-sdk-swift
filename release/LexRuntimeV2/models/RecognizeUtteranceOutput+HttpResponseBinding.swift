// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RecognizeUtteranceOutput: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if let contentTypeHeaderValue = httpResponse.headers.value(for: "Content-Type") {
            self.contentType = contentTypeHeaderValue
        } else {
            self.contentType = nil
        }
        if let inputModeHeaderValue = httpResponse.headers.value(for: "x-amz-lex-input-mode") {
            self.inputMode = inputModeHeaderValue
        } else {
            self.inputMode = nil
        }
        if let inputTranscriptHeaderValue = httpResponse.headers.value(for: "x-amz-lex-input-transcript") {
            self.inputTranscript = inputTranscriptHeaderValue
        } else {
            self.inputTranscript = nil
        }
        if let interpretationsHeaderValue = httpResponse.headers.value(for: "x-amz-lex-interpretations") {
            self.interpretations = interpretationsHeaderValue
        } else {
            self.interpretations = nil
        }
        if let messagesHeaderValue = httpResponse.headers.value(for: "x-amz-lex-messages") {
            self.messages = messagesHeaderValue
        } else {
            self.messages = nil
        }
        if let requestAttributesHeaderValue = httpResponse.headers.value(for: "x-amz-lex-request-attributes") {
            self.requestAttributes = requestAttributesHeaderValue
        } else {
            self.requestAttributes = nil
        }
        if let sessionIdHeaderValue = httpResponse.headers.value(for: "x-amz-lex-session-id") {
            self.sessionId = sessionIdHeaderValue
        } else {
            self.sessionId = nil
        }
        if let sessionStateHeaderValue = httpResponse.headers.value(for: "x-amz-lex-session-state") {
            self.sessionState = sessionStateHeaderValue
        } else {
            self.sessionState = nil
        }
        if case .data(let data) = httpResponse.body,
           let unwrappedData = data {
            self.audioStream = unwrappedData
        } else {
            self.audioStream = nil
        }
    }
}
