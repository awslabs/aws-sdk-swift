// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum DialogActionType {
    case close
    case confirmIntent
    case delegate
    case elicitIntent
    case elicitSlot
    case sdkUnknown(String)
}

extension DialogActionType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DialogActionType] {
        return [
            .close,
            .confirmIntent,
            .delegate,
            .elicitIntent,
            .elicitSlot,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .close: return "Close"
        case .confirmIntent: return "ConfirmIntent"
        case .delegate: return "Delegate"
        case .elicitIntent: return "ElicitIntent"
        case .elicitSlot: return "ElicitSlot"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DialogActionType(rawValue: rawValue) ?? DialogActionType.sdkUnknown(rawValue)
    }
}
