// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Value: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case interpretedValue
        case originalValue
        case resolvedValues
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let interpretedValue = interpretedValue {
            try encodeContainer.encode(interpretedValue, forKey: .interpretedValue)
        }
        if let originalValue = originalValue {
            try encodeContainer.encode(originalValue, forKey: .originalValue)
        }
        if let resolvedValues = resolvedValues {
            var resolvedValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resolvedValues)
            for stringlist0 in resolvedValues {
                try resolvedValuesContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let originalValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .originalValue)
        originalValue = originalValueDecoded
        let interpretedValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .interpretedValue)
        interpretedValue = interpretedValueDecoded
        let resolvedValuesContainer = try containerValues.decodeIfPresent([String].self, forKey: .resolvedValues)
        var resolvedValuesDecoded0:[String]? = nil
        if let resolvedValuesContainer = resolvedValuesContainer {
            resolvedValuesDecoded0 = [String]()
            for string0 in resolvedValuesContainer {
                resolvedValuesDecoded0?.append(string0)
            }
        }
        resolvedValues = resolvedValuesDecoded0
    }
}
