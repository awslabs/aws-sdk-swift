// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PlaybackInterruptionEvent: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case causedByEventId
        case eventId
        case eventReason
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let causedByEventId = causedByEventId {
            try encodeContainer.encode(causedByEventId, forKey: .causedByEventId)
        }
        if let eventId = eventId {
            try encodeContainer.encode(eventId, forKey: .eventId)
        }
        if let eventReason = eventReason {
            try encodeContainer.encode(eventReason.rawValue, forKey: .eventReason)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventReasonDecoded = try containerValues.decodeIfPresent(PlaybackInterruptionReason.self, forKey: .eventReason)
        eventReason = eventReasonDecoded
        let causedByEventIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .causedByEventId)
        causedByEventId = causedByEventIdDecoded
        let eventIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventId)
        eventId = eventIdDecoded
    }
}
