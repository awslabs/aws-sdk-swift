// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Intent: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case confirmationState
        case name
        case slots
        case state
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confirmationState = confirmationState {
            try encodeContainer.encode(confirmationState.rawValue, forKey: .confirmationState)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let slots = slots {
            var slotsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .slots)
            for (dictKey0, slots0) in slots {
                try slotsContainer.encode(slots0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let slotsContainer = try containerValues.decodeIfPresent([String:Slot].self, forKey: .slots)
        var slotsDecoded0: [String:Slot]? = nil
        if let slotsContainer = slotsContainer {
            slotsDecoded0 = [String:Slot]()
            for (key0, slot0) in slotsContainer {
                slotsDecoded0?[key0] = slot0
            }
        }
        slots = slotsDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(IntentState.self, forKey: .state)
        state = stateDecoded
        let confirmationStateDecoded = try containerValues.decodeIfPresent(ConfirmationState.self, forKey: .confirmationState)
        confirmationState = confirmationStateDecoded
    }
}
