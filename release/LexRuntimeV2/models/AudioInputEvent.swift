// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Represents a chunk of audio sent from the client application to
///          Amazon Lex. The audio is all or part of an utterance from the user.</p>
///          <p>Amazon Lex accumulates audio chunks until it recognizes a natural pause
///          in speech before processing the input.</p>
public struct AudioInputEvent: Equatable {
    /// <p>An encoded stream of audio.</p>
    public let audioChunk: Data?
    /// <p>A timestamp set by the client of the date and time that the event
    ///          was sent to Amazon Lex.</p>
    public let clientTimestampMillis: Int
    /// <p>The encoding used for the audio chunk. You must use 8 KHz PCM 16-bit
    ///          mono-channel little-endian format. The value of the field should
    ///          be:</p>
    ///          <p>
    ///             <code>audio/lpcm; sample-rate=8000; sample-size-bits=16;
    ///             channel-count=1; is-big-endian=false</code>
    ///          </p>
    public let contentType: String?
    /// <p>A unique identifier that your application assigns to the event. You
    ///          can use this to identify events in logs.</p>
    public let eventId: String?

    public init (
        audioChunk: Data? = nil,
        clientTimestampMillis: Int = 0,
        contentType: String? = nil,
        eventId: String? = nil
    )
    {
        self.audioChunk = audioChunk
        self.clientTimestampMillis = clientTimestampMillis
        self.contentType = contentType
        self.eventId = eventId
    }
}
