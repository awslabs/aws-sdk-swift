// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConfigurationEvent: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientTimestampMillis
        case disablePlayback
        case eventId
        case requestAttributes
        case responseContentType
        case sessionState
        case welcomeMessages
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if clientTimestampMillis != 0 {
            try encodeContainer.encode(clientTimestampMillis, forKey: .clientTimestampMillis)
        }
        if disablePlayback != false {
            try encodeContainer.encode(disablePlayback, forKey: .disablePlayback)
        }
        if let eventId = eventId {
            try encodeContainer.encode(eventId, forKey: .eventId)
        }
        if let requestAttributes = requestAttributes {
            var requestAttributesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .requestAttributes)
            for (dictKey0, stringmap0) in requestAttributes {
                try requestAttributesContainer.encode(stringmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let responseContentType = responseContentType {
            try encodeContainer.encode(responseContentType, forKey: .responseContentType)
        }
        if let sessionState = sessionState {
            try encodeContainer.encode(sessionState, forKey: .sessionState)
        }
        if let welcomeMessages = welcomeMessages {
            var welcomeMessagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .welcomeMessages)
            for messages0 in welcomeMessages {
                try welcomeMessagesContainer.encode(messages0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestAttributesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .requestAttributes)
        var requestAttributesDecoded0: [String:String]? = nil
        if let requestAttributesContainer = requestAttributesContainer {
            requestAttributesDecoded0 = [String:String]()
            for (key0, string0) in requestAttributesContainer {
                requestAttributesDecoded0?[key0] = string0
            }
        }
        requestAttributes = requestAttributesDecoded0
        let responseContentTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .responseContentType)
        responseContentType = responseContentTypeDecoded
        let sessionStateDecoded = try containerValues.decodeIfPresent(SessionState.self, forKey: .sessionState)
        sessionState = sessionStateDecoded
        let welcomeMessagesContainer = try containerValues.decodeIfPresent([Message].self, forKey: .welcomeMessages)
        var welcomeMessagesDecoded0:[Message]? = nil
        if let welcomeMessagesContainer = welcomeMessagesContainer {
            welcomeMessagesDecoded0 = [Message]()
            for structure0 in welcomeMessagesContainer {
                welcomeMessagesDecoded0?.append(structure0)
            }
        }
        welcomeMessages = welcomeMessagesDecoded0
        let disablePlaybackDecoded = try containerValues.decode(Bool.self, forKey: .disablePlayback)
        disablePlayback = disablePlaybackDecoded
        let eventIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventId)
        eventId = eventIdDecoded
        let clientTimestampMillisDecoded = try containerValues.decode(Int.self, forKey: .clientTimestampMillis)
        clientTimestampMillis = clientTimestampMillisDecoded
    }
}
