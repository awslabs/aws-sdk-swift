// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StartConversationRequestEventStream: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioInputEvent = "AudioInputEvent"
        case configurationEvent = "ConfigurationEvent"
        case dTMFInputEvent = "DTMFInputEvent"
        case disconnectionEvent = "DisconnectionEvent"
        case playbackCompletionEvent = "PlaybackCompletionEvent"
        case textInputEvent = "TextInputEvent"
        case sdkUnknown
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .audioInputEvent(audioInputEvent):
                if let audioInputEvent = audioInputEvent {
                    try container.encode(audioInputEvent, forKey: .audioInputEvent)
                }
            case let .configurationEvent(configurationEvent):
                if let configurationEvent = configurationEvent {
                    try container.encode(configurationEvent, forKey: .configurationEvent)
                }
            case let .dTMFInputEvent(dTMFInputEvent):
                if let dTMFInputEvent = dTMFInputEvent {
                    try container.encode(dTMFInputEvent, forKey: .dTMFInputEvent)
                }
            case let .disconnectionEvent(disconnectionEvent):
                if let disconnectionEvent = disconnectionEvent {
                    try container.encode(disconnectionEvent, forKey: .disconnectionEvent)
                }
            case let .playbackCompletionEvent(playbackCompletionEvent):
                if let playbackCompletionEvent = playbackCompletionEvent {
                    try container.encode(playbackCompletionEvent, forKey: .playbackCompletionEvent)
                }
            case let .textInputEvent(textInputEvent):
                if let textInputEvent = textInputEvent {
                    try container.encode(textInputEvent, forKey: .textInputEvent)
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let configurationEventDecoded = try values.decodeIfPresent(ConfigurationEvent.self, forKey: .configurationEvent)
        if let configurationEvent = configurationEventDecoded {
            self = .configurationEvent(configurationEvent)
            return
        }
        let audioInputEventDecoded = try values.decodeIfPresent(AudioInputEvent.self, forKey: .audioInputEvent)
        if let audioInputEvent = audioInputEventDecoded {
            self = .audioInputEvent(audioInputEvent)
            return
        }
        let dTMFInputEventDecoded = try values.decodeIfPresent(DTMFInputEvent.self, forKey: .dTMFInputEvent)
        if let dTMFInputEvent = dTMFInputEventDecoded {
            self = .dTMFInputEvent(dTMFInputEvent)
            return
        }
        let textInputEventDecoded = try values.decodeIfPresent(TextInputEvent.self, forKey: .textInputEvent)
        if let textInputEvent = textInputEventDecoded {
            self = .textInputEvent(textInputEvent)
            return
        }
        let playbackCompletionEventDecoded = try values.decodeIfPresent(PlaybackCompletionEvent.self, forKey: .playbackCompletionEvent)
        if let playbackCompletionEvent = playbackCompletionEventDecoded {
            self = .playbackCompletionEvent(playbackCompletionEvent)
            return
        }
        let disconnectionEventDecoded = try values.decodeIfPresent(DisconnectionEvent.self, forKey: .disconnectionEvent)
        if let disconnectionEvent = disconnectionEventDecoded {
            self = .disconnectionEvent(disconnectionEvent)
            return
        }
        self = .sdkUnknown("")
    }
}
