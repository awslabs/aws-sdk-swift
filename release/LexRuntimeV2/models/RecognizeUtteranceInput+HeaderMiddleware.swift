// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct RecognizeUtteranceInputHeadersMiddleware: Middleware {
    public let id: String = "RecognizeUtteranceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RecognizeUtteranceInput>,
                  next: H) -> Swift.Result<OperationOutput<RecognizeUtteranceOutput>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let requestAttributes = input.operationInput.requestAttributes {
            input.builder.withHeader(name: "x-amz-lex-request-attributes", value: String(requestAttributes))
        }
        if let requestContentType = input.operationInput.requestContentType {
            input.builder.withHeader(name: "Content-Type", value: String(requestContentType))
        }
        if let responseContentType = input.operationInput.responseContentType {
            input.builder.withHeader(name: "Response-Content-Type", value: String(responseContentType))
        }
        if let sessionState = input.operationInput.sessionState {
            input.builder.withHeader(name: "x-amz-lex-session-state", value: String(sessionState))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RecognizeUtteranceInput>
    public typealias MOutput = OperationOutput<RecognizeUtteranceOutput>
    public typealias Context = HttpContext
    public typealias MError = SdkError<RecognizeUtteranceOutputError>
}
