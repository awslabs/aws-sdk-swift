// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct RecognizeUtteranceInput: Equatable {
    /// <p>The alias identifier in use for the bot that should receive the
    ///          request.</p>
    public let botAliasId: String?
    /// <p>The identifier of the bot that should receive the request.</p>
    public let botId: String?
    /// <p>User input in PCM or Opus audio format or text format as described
    ///          in the <code>requestContentType</code> parameter.</p>
    public let inputStream: Data?
    /// <p>The locale where the session is in use.</p>
    public let localeId: String?
    /// <p>Request-specific information passed between the client application
    ///          and Amazon Lex </p>
    ///          <p>The namespace <code>x-amz-lex:</code> is reserved for special
    ///          attributes. Don't create any request attributes for prefix
    ///             <code>x-amz-lex:</code>.</p>
    public let requestAttributes: String?
    /// <p>Indicates the format for audio input or that the content is text.
    ///          The header must start with one of the following prefixes:</p>
    ///          <ul>
    ///             <li>
    ///                <p>PCM format, audio data must be in little-endian byte
    ///                order.</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>audio/l16; rate=16000; channels=1</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>audio/x-l16; sample-rate=16000; channel-count=1</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>audio/lpcm; sample-rate=8000; sample-size-bits=16;
    ///                      channel-count=1; is-big-endian=false</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Opus format</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>audio/x-cbr-opus-with-preamble;preamble-size=0;bit-rate=256000;frame-size-milliseconds=4</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>Text format</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>text/plain; charset=utf-8</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    public let requestContentType: String?
    /// <p>The message that Amazon Lex returns in the response can be either text or
    ///          speech based on the <code>responseContentType</code> value.</p>
    ///          <ul>
    ///             <li>
    ///                <p>If the value is <code>text/plain;charset=utf-8</code>, Amazon Lex
    ///                returns text in the response.</p>
    ///             </li>
    ///             <li>
    ///                <p>If the value begins with <code>audio/</code>, Amazon Lex returns
    ///                speech in the response. Amazon Lex uses Amazon Polly to generate the speech
    ///                using the configuration that you specified in the
    ///                   <code>requestContentType</code> parameter. For example, if you
    ///                specify <code>audio/mpeg</code> as the value, Amazon Lex returns
    ///                speech in the MPEG format.</p>
    ///             </li>
    ///             <li>
    ///                <p>If the value is <code>audio/pcm</code>, the speech returned is
    ///                   <code>audio/pcm</code> at 16 KHz in 16-bit, little-endian
    ///                format.</p>
    ///             </li>
    ///             <li>
    ///                <p>The following are the accepted values:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>audio/mpeg</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>audio/ogg</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>audio/pcm (16 KHz)</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>audio/* (defaults to mpeg)</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>text/plain; charset=utf-8</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    public let responseContentType: String?
    /// <p>The identifier of the session in use.</p>
    public let sessionId: String?
    /// <p>Sets the state of the session with the user. You can use this to set
    ///          the current intent, attributes, context, and dialog action. Use the
    ///          dialog action to determine the next step that Amazon Lex should use in the
    ///          conversation with the user.</p>
    public let sessionState: String?

    public init (
        botAliasId: String? = nil,
        botId: String? = nil,
        inputStream: Data? = nil,
        localeId: String? = nil,
        requestAttributes: String? = nil,
        requestContentType: String? = nil,
        responseContentType: String? = nil,
        sessionId: String? = nil,
        sessionState: String? = nil
    )
    {
        self.botAliasId = botAliasId
        self.botId = botId
        self.inputStream = inputStream
        self.localeId = localeId
        self.requestAttributes = requestAttributes
        self.requestContentType = requestContentType
        self.responseContentType = responseContentType
        self.sessionId = sessionId
        self.sessionState = sessionState
    }
}
