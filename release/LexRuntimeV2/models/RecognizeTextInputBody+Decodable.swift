// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RecognizeTextInputBody: Equatable {
    public let text: String?
    public let sessionState: SessionState?
    public let requestAttributes: [String:String]?
}

extension RecognizeTextInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case requestAttributes
        case sessionState
        case text
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(String.self, forKey: .text)
        text = textDecoded
        let sessionStateDecoded = try containerValues.decodeIfPresent(SessionState.self, forKey: .sessionState)
        sessionState = sessionStateDecoded
        let requestAttributesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .requestAttributes)
        var requestAttributesDecoded0: [String:String]? = nil
        if let requestAttributesContainer = requestAttributesContainer {
            requestAttributesDecoded0 = [String:String]()
            for (key0, string0) in requestAttributesContainer {
                requestAttributesDecoded0?[key0] = string0
            }
        }
        requestAttributes = requestAttributesDecoded0
    }
}
