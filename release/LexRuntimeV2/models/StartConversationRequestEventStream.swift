// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents a stream of events between your application and
///          Amazon Lex.</p>
public enum StartConversationRequestEventStream: Equatable {
    /// <p>Configuration information sent from your client application to
    ///          Amazon Lex</p>
    case configurationEvent(ConfigurationEvent?)
    /// <p>Speech audio sent from your client application to Amazon Lex. Audio
    ///          starts accumulating when Amazon Lex identifies a voice and continues until a
    ///          natural pause in the speech is found before processing.</p>
    case audioInputEvent(AudioInputEvent?)
    /// <p>DTMF information sent to Amazon Lex by your application. Amazon Lex
    ///          accumulates the DMTF information from when the user sends the first
    ///          character and ends</p>
    ///          <ul>
    ///             <li>
    ///                <p>when there's a pause longer that the value configured for the
    ///                end timeout.</p>
    ///             </li>
    ///             <li>
    ///                <p>when there's a digit that is the configured end
    ///                character.</p>
    ///             </li>
    ///             <li>
    ///                <p>when Amazon Lex accumulates characters equal to the maximum DTMF
    ///                character configuration.</p>
    ///             </li>
    ///          </ul>
    case dTMFInputEvent(DTMFInputEvent?)
    /// <p>Text sent from your client application to Amazon Lex. Each
    ///             <code>TextInputEvent</code> is processed individually.</p>
    case textInputEvent(TextInputEvent?)
    /// <p>Event sent from the client application to Amazon Lex to indicate that it
    ///          has finished playing audio and that Amazon Lex should start listening for
    ///          user input.</p>
    case playbackCompletionEvent(PlaybackCompletionEvent?)
    /// <p>Event sent from the client application to indicate to Amazon Lex that the
    ///          conversation is over.</p>
    case disconnectionEvent(DisconnectionEvent?)
    case sdkUnknown(String?)
}
