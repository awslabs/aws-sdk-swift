// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SessionState: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activeContexts
        case dialogAction
        case intent
        case originatingRequestId
        case sessionAttributes
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeContexts = activeContexts {
            var activeContextsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .activeContexts)
            for activecontextslist0 in activeContexts {
                try activeContextsContainer.encode(activecontextslist0)
            }
        }
        if let dialogAction = dialogAction {
            try encodeContainer.encode(dialogAction, forKey: .dialogAction)
        }
        if let intent = intent {
            try encodeContainer.encode(intent, forKey: .intent)
        }
        if let originatingRequestId = originatingRequestId {
            try encodeContainer.encode(originatingRequestId, forKey: .originatingRequestId)
        }
        if let sessionAttributes = sessionAttributes {
            var sessionAttributesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .sessionAttributes)
            for (dictKey0, stringmap0) in sessionAttributes {
                try sessionAttributesContainer.encode(stringmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dialogActionDecoded = try containerValues.decodeIfPresent(DialogAction.self, forKey: .dialogAction)
        dialogAction = dialogActionDecoded
        let intentDecoded = try containerValues.decodeIfPresent(Intent.self, forKey: .intent)
        intent = intentDecoded
        let activeContextsContainer = try containerValues.decodeIfPresent([ActiveContext].self, forKey: .activeContexts)
        var activeContextsDecoded0:[ActiveContext]? = nil
        if let activeContextsContainer = activeContextsContainer {
            activeContextsDecoded0 = [ActiveContext]()
            for structure0 in activeContextsContainer {
                activeContextsDecoded0?.append(structure0)
            }
        }
        activeContexts = activeContextsDecoded0
        let sessionAttributesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .sessionAttributes)
        var sessionAttributesDecoded0: [String:String]? = nil
        if let sessionAttributesContainer = sessionAttributesContainer {
            sessionAttributesDecoded0 = [String:String]()
            for (key0, string0) in sessionAttributesContainer {
                sessionAttributesDecoded0?[key0] = string0
            }
        }
        sessionAttributes = sessionAttributesDecoded0
        let originatingRequestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .originatingRequestId)
        originatingRequestId = originatingRequestIdDecoded
    }
}
