// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The initial event sent from the application to Amazon Lex to configure
///          the conversation, including session and request attributes and the
///          response content type.</p>
public struct ConfigurationEvent: Equatable {
    /// <p>A timestamp set by the client of the date and time that the event
    ///          was sent to Amazon Lex.</p>
    public let clientTimestampMillis: Int
    /// <p>Determines whether Amazon Lex should send audio responses to the
    ///       client application. When this parameter if <code>false</code>,
    ///       the client application needs to create responses for the user.
    ///
    ///       </p>
    public let disablePlayback: Bool
    /// <p>A unique identifier that your application assigns to the event. You
    ///          can use this to identify events in logs.</p>
    public let eventId: String?
    /// <p>Request-specific information passed between the client application
    ///          and Amazon Lex.</p>
    ///          <p>The namespace <code>x-amz-lex:</code> is reserved for special
    ///          attributes. Don't create any request attributes for prefix
    ///             <code>x-amz-lex:</code>.</p>
    public let requestAttributes: [String:String]?
    /// <p>The message that Amazon Lex returns in the response can be either text or
    ///          speech based on the <code>responseContentType</code> value.</p>
    ///          <ul>
    ///             <li>
    ///                <p>If the value is <code>text/plain;charset=utf-8</code>, Amazon Lex
    ///                returns text in the response.</p>
    ///             </li>
    ///             <li>
    ///                <p>If the value begins with <code>audio/</code>, Amazon Lex returns
    ///                speech in the response. Amazon Lex uses Amazon Polly to generate the speech
    ///                using the configuration that you specified in the
    ///                   <code>requestContentType</code> parameter. For example, if you
    ///                specify <code>audio/mpeg</code> as the value, Amazon Lex returns
    ///                speech in the MPEG format.</p>
    ///             </li>
    ///             <li>
    ///                <p>If the value is <code>audio/pcm</code>, the speech returned is
    ///                audio/pcm in 16-bit, little-endian format.</p>
    ///             </li>
    ///             <li>
    ///                <p>The following are the accepted values:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>audio/mpeg</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>audio/ogg</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>audio/pcm</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>audio/* (defaults to mpeg)</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>text/plain; charset=utf-8</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    public let responseContentType: String?
    /// <p>The state of the user's session with Amazon Lex.</p>
    public let sessionState: SessionState?
    /// <p>A list of messages to send to the user.</p>
    public let welcomeMessages: [Message]?

    public init (
        clientTimestampMillis: Int = 0,
        disablePlayback: Bool = false,
        eventId: String? = nil,
        requestAttributes: [String:String]? = nil,
        responseContentType: String? = nil,
        sessionState: SessionState? = nil,
        welcomeMessages: [Message]? = nil
    )
    {
        self.clientTimestampMillis = clientTimestampMillis
        self.disablePlayback = disablePlayback
        self.eventId = eventId
        self.requestAttributes = requestAttributes
        self.responseContentType = responseContentType
        self.sessionState = sessionState
        self.welcomeMessages = welcomeMessages
    }
}
