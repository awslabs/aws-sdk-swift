// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ScalingPlan: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationSource = "ApplicationSource"
        case creationTime = "CreationTime"
        case scalingInstructions = "ScalingInstructions"
        case scalingPlanName = "ScalingPlanName"
        case scalingPlanVersion = "ScalingPlanVersion"
        case statusCode = "StatusCode"
        case statusMessage = "StatusMessage"
        case statusStartTime = "StatusStartTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationSource = applicationSource {
            try encodeContainer.encode(applicationSource, forKey: .applicationSource)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let scalingInstructions = scalingInstructions {
            var scalingInstructionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scalingInstructions)
            for scalinginstructions0 in scalingInstructions {
                try scalingInstructionsContainer.encode(scalinginstructions0)
            }
        }
        if let scalingPlanName = scalingPlanName {
            try encodeContainer.encode(scalingPlanName, forKey: .scalingPlanName)
        }
        if let scalingPlanVersion = scalingPlanVersion {
            try encodeContainer.encode(scalingPlanVersion, forKey: .scalingPlanVersion)
        }
        if let statusCode = statusCode {
            try encodeContainer.encode(statusCode.rawValue, forKey: .statusCode)
        }
        if let statusMessage = statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
        if let statusStartTime = statusStartTime {
            try encodeContainer.encode(statusStartTime.timeIntervalSince1970, forKey: .statusStartTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scalingPlanNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scalingPlanName)
        scalingPlanName = scalingPlanNameDecoded
        let scalingPlanVersionDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .scalingPlanVersion)
        scalingPlanVersion = scalingPlanVersionDecoded
        let applicationSourceDecoded = try containerValues.decodeIfPresent(ApplicationSource.self, forKey: .applicationSource)
        applicationSource = applicationSourceDecoded
        let scalingInstructionsContainer = try containerValues.decodeIfPresent([ScalingInstruction].self, forKey: .scalingInstructions)
        var scalingInstructionsDecoded0:[ScalingInstruction]? = nil
        if let scalingInstructionsContainer = scalingInstructionsContainer {
            scalingInstructionsDecoded0 = [ScalingInstruction]()
            for structure0 in scalingInstructionsContainer {
                scalingInstructionsDecoded0?.append(structure0)
            }
        }
        scalingInstructions = scalingInstructionsDecoded0
        let statusCodeDecoded = try containerValues.decodeIfPresent(ScalingPlanStatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let statusStartTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .statusStartTime)
        statusStartTime = statusStartTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}
