// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents a CloudWatch metric of your choosing that can be used for predictive scaling. </p>
///          <p>For predictive scaling to work with a customized load metric specification, AWS Auto Scaling
///          needs access to the <code>Sum</code> and <code>Average</code> statistics that CloudWatch computes
///          from metric data.</p>
///          <p>When you choose a load metric, make sure that the required <code>Sum</code> and
///             <code>Average</code> statistics for your metric are available in CloudWatch and that they
///          provide relevant data for predictive scaling. The <code>Sum</code> statistic must represent
///          the total load on the resource, and the <code>Average</code> statistic must represent the
///          average load per capacity unit of the resource. For example, there is a metric that counts
///          the number of requests processed by your Auto Scaling group. If the <code>Sum</code> statistic
///          represents the total request count processed by the group, then the <code>Average</code>
///          statistic for the specified metric must represent the average request count processed by
///          each instance of the group. </p>
///          <p>If you publish your own metrics, you can aggregate the data points at a given interval
///          and then publish the aggregated data points to CloudWatch. Before AWS Auto Scaling generates the
///          forecast, it sums up all the metric data points that occurred within each hour to match the
///          granularity period that is used in the forecast (60 minutes).</p>
///          <p>For information about terminology, available metrics, or how to publish new metrics, see
///             <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html">Amazon CloudWatch
///             Concepts</a> in the <i>Amazon CloudWatch User Guide</i>. </p>
///          <p>After creating your scaling plan, you can use the AWS Auto Scaling console to visualize
///          forecasts for the specified metric. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/userguide/gs-create-scaling-plan.html#gs-view-resource">View
///             Scaling Information for a Resource</a> in the
///          <i>AWS Auto Scaling User Guide</i>.</p>
public struct CustomizedLoadMetricSpecification: Equatable {
    /// <p>The dimensions of the metric.</p>
    ///          <p>Conditional: If you published your metric with dimensions, you must specify the same
    ///          dimensions in your customized load metric specification.</p>
    public let dimensions: [MetricDimension]?
    /// <p>The name of the metric.</p>
    public let metricName: String?
    /// <p>The namespace of the metric.</p>
    public let namespace: String?
    /// <p>The statistic of the metric. The only valid value is <code>Sum</code>.</p>
    public let statistic: MetricStatistic?
    /// <p>The unit of the metric.</p>
    public let unit: String?

    public init (
        dimensions: [MetricDimension]? = nil,
        metricName: String? = nil,
        namespace: String? = nil,
        statistic: MetricStatistic? = nil,
        unit: String? = nil
    )
    {
        self.dimensions = dimensions
        self.metricName = metricName
        self.namespace = namespace
        self.statistic = statistic
        self.unit = unit
    }
}
