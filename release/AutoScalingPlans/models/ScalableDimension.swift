// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum ScalableDimension {
    case autoscalinggroupdesiredcapacity
    case dynamodbindexreadcapacityunits
    case dynamodbindexwritecapacityunits
    case dynamodbtablereadcapacityunits
    case dynamodbtablewritecapacityunits
    case ec2spotfleetrequesttargetcapacity
    case ecsservicedesiredcount
    case rdsclusterreadreplicacount
    case sdkUnknown(String)
}

extension ScalableDimension : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ScalableDimension] {
        return [
            .autoscalinggroupdesiredcapacity,
            .dynamodbindexreadcapacityunits,
            .dynamodbindexwritecapacityunits,
            .dynamodbtablereadcapacityunits,
            .dynamodbtablewritecapacityunits,
            .ec2spotfleetrequesttargetcapacity,
            .ecsservicedesiredcount,
            .rdsclusterreadreplicacount,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .autoscalinggroupdesiredcapacity: return "autoscaling:autoScalingGroup:DesiredCapacity"
        case .dynamodbindexreadcapacityunits: return "dynamodb:index:ReadCapacityUnits"
        case .dynamodbindexwritecapacityunits: return "dynamodb:index:WriteCapacityUnits"
        case .dynamodbtablereadcapacityunits: return "dynamodb:table:ReadCapacityUnits"
        case .dynamodbtablewritecapacityunits: return "dynamodb:table:WriteCapacityUnits"
        case .ec2spotfleetrequesttargetcapacity: return "ec2:spot-fleet-request:TargetCapacity"
        case .ecsservicedesiredcount: return "ecs:service:DesiredCount"
        case .rdsclusterreadreplicacount: return "rds:cluster:ReadReplicaCount"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ScalableDimension(rawValue: rawValue) ?? ScalableDimension.sdkUnknown(rawValue)
    }
}
