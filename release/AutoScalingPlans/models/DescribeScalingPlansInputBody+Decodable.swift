// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeScalingPlansInputBody: Equatable {
    public let scalingPlanNames: [String]?
    public let scalingPlanVersion: Int?
    public let applicationSources: [ApplicationSource]?
    public let maxResults: Int?
    public let nextToken: String?
}

extension DescribeScalingPlansInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationSources = "ApplicationSources"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case scalingPlanNames = "ScalingPlanNames"
        case scalingPlanVersion = "ScalingPlanVersion"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scalingPlanNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .scalingPlanNames)
        var scalingPlanNamesDecoded0:[String]? = nil
        if let scalingPlanNamesContainer = scalingPlanNamesContainer {
            scalingPlanNamesDecoded0 = [String]()
            for string0 in scalingPlanNamesContainer {
                scalingPlanNamesDecoded0?.append(string0)
            }
        }
        scalingPlanNames = scalingPlanNamesDecoded0
        let scalingPlanVersionDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .scalingPlanVersion)
        scalingPlanVersion = scalingPlanVersionDecoded
        let applicationSourcesContainer = try containerValues.decodeIfPresent([ApplicationSource].self, forKey: .applicationSources)
        var applicationSourcesDecoded0:[ApplicationSource]? = nil
        if let applicationSourcesContainer = applicationSourcesContainer {
            applicationSourcesDecoded0 = [ApplicationSource]()
            for structure0 in applicationSourcesContainer {
                applicationSourcesDecoded0?.append(structure0)
            }
        }
        applicationSources = applicationSourcesDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
