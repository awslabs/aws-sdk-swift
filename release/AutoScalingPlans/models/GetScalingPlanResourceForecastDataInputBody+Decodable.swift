// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetScalingPlanResourceForecastDataInputBody: Equatable {
    public let scalingPlanName: String?
    public let scalingPlanVersion: Int?
    public let serviceNamespace: ServiceNamespace?
    public let resourceId: String?
    public let scalableDimension: ScalableDimension?
    public let forecastDataType: ForecastDataType?
    public let startTime: Date?
    public let endTime: Date?
}

extension GetScalingPlanResourceForecastDataInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case endTime = "EndTime"
        case forecastDataType = "ForecastDataType"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case scalingPlanName = "ScalingPlanName"
        case scalingPlanVersion = "ScalingPlanVersion"
        case serviceNamespace = "ServiceNamespace"
        case startTime = "StartTime"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scalingPlanNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scalingPlanName)
        scalingPlanName = scalingPlanNameDecoded
        let scalingPlanVersionDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .scalingPlanVersion)
        scalingPlanVersion = scalingPlanVersionDecoded
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let forecastDataTypeDecoded = try containerValues.decodeIfPresent(ForecastDataType.self, forKey: .forecastDataType)
        forecastDataType = forecastDataTypeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
    }
}
