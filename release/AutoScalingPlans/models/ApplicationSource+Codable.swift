// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ApplicationSource: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cloudFormationStackARN = "CloudFormationStackARN"
        case tagFilters = "TagFilters"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudFormationStackARN = cloudFormationStackARN {
            try encodeContainer.encode(cloudFormationStackARN, forKey: .cloudFormationStackARN)
        }
        if let tagFilters = tagFilters {
            var tagFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagFilters)
            for tagfilters0 in tagFilters {
                try tagFiltersContainer.encode(tagfilters0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudFormationStackARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cloudFormationStackARN)
        cloudFormationStackARN = cloudFormationStackARNDecoded
        let tagFiltersContainer = try containerValues.decodeIfPresent([TagFilter].self, forKey: .tagFilters)
        var tagFiltersDecoded0:[TagFilter]? = nil
        if let tagFiltersContainer = tagFiltersContainer {
            tagFiltersDecoded0 = [TagFilter]()
            for structure0 in tagFiltersContainer {
                tagFiltersDecoded0?.append(structure0)
            }
        }
        tagFilters = tagFiltersDecoded0
    }
}
