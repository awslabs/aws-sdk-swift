// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct UpdateUserInput: Equatable {
    /// <p>Specifies the landing directory (folder) for a user when they log in to the server using
    ///       their file transfer protocol client.</p>
    ///
    ///          <p>An example is <code>your-Amazon-S3-bucket-name>/home/username</code>.</p>
    public let homeDirectory: String?
    /// <p>Logical directory mappings that specify what Amazon S3 or Amazon EFS paths and keys should be visible to
    ///       your user and how you want to make them visible. You will need to specify the
    ///         "<code>Entry</code>" and "<code>Target</code>" pair, where <code>Entry</code> shows how the
    ///       path is made visible and <code>Target</code> is the actual Amazon S3 or Amazon EFS path. If you only specify
    ///       a target, it will be displayed as is. You will need to also make sure that your IAM role
    ///       provides access to paths in <code>Target</code>. The following is an example.</p>
    ///
    ///          <p>
    ///             <code>'[ "/bucket2/documentation", { "Entry": "your-personal-report.pdf", "Target":
    ///         "/bucket3/customized-reports/${transfer:UserName}.pdf" } ]'</code>
    ///          </p>
    ///
    ///          <p>In most cases, you can use this value instead of the scope-down policy to lock down your
    ///       user to the designated home directory ("<code>chroot</code>"). To do this, you can set
    ///         <code>Entry</code> to '/' and set <code>Target</code> to the HomeDirectory
    ///       parameter value.</p>
    ///
    ///          <note>
    ///             <p>If the target of a logical directory entry does not exist in Amazon S3 or EFS, the entry
    ///         will be ignored. As a workaround, you can use the Amazon S3 API or EFS API to create 0-byte
    ///         objects as place holders for your directory. If using the AWS CLI, use the
    ///           <code>s3api</code> or <code>efsapi</code> call instead of <code>s3</code>
    ///                <code>efs</code> so you can use the put-object operation. For example, you use the
    ///         following: <code>aws s3api put-object --bucket bucketname --key path/to/folder/</code>. Make
    ///         sure that the end of the key name ends in a / for it to be considered a folder.</p>
    ///          </note>
    public let homeDirectoryMappings: [HomeDirectoryMapEntry]?
    /// <p>The type of landing directory (folder) you want your users' home directory to be when
    ///       they log into the server. If you set it to <code>PATH</code>, the user will see the absolute
    ///       Amazon S3 bucket or EFS paths as is in their file transfer protocol clients. If you set it
    ///         <code>LOGICAL</code>, you will need to provide mappings in the
    ///         <code>HomeDirectoryMappings</code> for how you want to make Amazon S3 or EFS paths visible to your
    ///       users.</p>
    public let homeDirectoryType: HomeDirectoryType?
    /// <p>Allows you to supply a scope-down policy for your user so you can use the same IAM role
    ///       across multiple users. The policy scopes down user access to portions of your Amazon S3
    ///       bucket. Variables you can use inside this policy include <code>${Transfer:UserName}</code>,
    ///         <code>${Transfer:HomeDirectory}</code>, and <code>${Transfer:HomeBucket}</code>.</p>
    ///          <note>
    ///             <p>For scope-down policies, AWS Transfer Family stores the policy as a JSON blob, instead
    ///         of the Amazon Resource Name (ARN) of the policy. You save the policy as a JSON blob and pass
    ///         it in the <code>Policy</code> argument.</p>
    ///
    ///
    ///
    ///
    ///             <p>For an example of a scope-down policy, see <a href="https://docs.aws.amazon.com/transfer/latest/userguide/users.html#users-policies-scope-down">Creating a scope-down
    ///           policy</a>.</p>
    ///
    ///
    ///
    ///             <p>For more information, see <a href="https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html">AssumeRole</a> in the <i>AWS
    ///           Security Token Service API Reference</i>.</p>
    ///          </note>
    public let policy: String?
    /// <p>Specifies the full POSIX identity, including user ID (<code>Uid</code>), group ID
    ///         (<code>Gid</code>), and any secondary groups IDs (<code>SecondaryGids</code>), that controls
    ///       your users' access to your Amazon Elastic File Systems (Amazon EFS). The POSIX permissions
    ///       that are set on files and directories in your file system determines the level of access your
    ///       users get when transferring files into and out of your Amazon EFS file systems.</p>
    public let posixProfile: PosixProfile?
    /// <p>The IAM role that controls your users' access to your Amazon S3 bucket. The policies
    ///       attached to this role determine the level of access you want to provide your users when
    ///       transferring files into and out of your S3 bucket or buckets. The IAM role should also contain
    ///       a trust relationship that allows the server to access your resources when servicing your
    ///       users' transfer requests.</p>
    public let role: String?
    /// <p>A system-assigned unique identifier for a server instance that the user account is
    ///       assigned to.</p>
    public let serverId: String?
    /// <p>A unique string that identifies a user and is associated with a server as specified by the
    ///         <code>ServerId</code>. This user name must be a minimum of 3 and a maximum of 100 characters
    ///       long. The following are valid characters: a-z, A-Z, 0-9, underscore '_', hyphen
    ///       '-', period '.', and at sign '@'. The user name can't start
    ///       with a hyphen, period, or at sign.</p>
    public let userName: String?

    public init (
        homeDirectory: String? = nil,
        homeDirectoryMappings: [HomeDirectoryMapEntry]? = nil,
        homeDirectoryType: HomeDirectoryType? = nil,
        policy: String? = nil,
        posixProfile: PosixProfile? = nil,
        role: String? = nil,
        serverId: String? = nil,
        userName: String? = nil
    )
    {
        self.homeDirectory = homeDirectory
        self.homeDirectoryMappings = homeDirectoryMappings
        self.homeDirectoryType = homeDirectoryType
        self.policy = policy
        self.posixProfile = posixProfile
        self.role = role
        self.serverId = serverId
        self.userName = userName
    }
}
