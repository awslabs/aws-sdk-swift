// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DescribedSecurityPolicy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fips = "Fips"
        case securityPolicyName = "SecurityPolicyName"
        case sshCiphers = "SshCiphers"
        case sshKexs = "SshKexs"
        case sshMacs = "SshMacs"
        case tlsCiphers = "TlsCiphers"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fips = fips {
            try encodeContainer.encode(fips, forKey: .fips)
        }
        if let securityPolicyName = securityPolicyName {
            try encodeContainer.encode(securityPolicyName, forKey: .securityPolicyName)
        }
        if let sshCiphers = sshCiphers {
            var sshCiphersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sshCiphers)
            for securitypolicyoptions0 in sshCiphers {
                try sshCiphersContainer.encode(securitypolicyoptions0)
            }
        }
        if let sshKexs = sshKexs {
            var sshKexsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sshKexs)
            for securitypolicyoptions0 in sshKexs {
                try sshKexsContainer.encode(securitypolicyoptions0)
            }
        }
        if let sshMacs = sshMacs {
            var sshMacsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sshMacs)
            for securitypolicyoptions0 in sshMacs {
                try sshMacsContainer.encode(securitypolicyoptions0)
            }
        }
        if let tlsCiphers = tlsCiphers {
            var tlsCiphersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tlsCiphers)
            for securitypolicyoptions0 in tlsCiphers {
                try tlsCiphersContainer.encode(securitypolicyoptions0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fipsDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .fips)
        fips = fipsDecoded
        let securityPolicyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .securityPolicyName)
        securityPolicyName = securityPolicyNameDecoded
        let sshCiphersContainer = try containerValues.decodeIfPresent([String].self, forKey: .sshCiphers)
        var sshCiphersDecoded0:[String]? = nil
        if let sshCiphersContainer = sshCiphersContainer {
            sshCiphersDecoded0 = [String]()
            for string0 in sshCiphersContainer {
                sshCiphersDecoded0?.append(string0)
            }
        }
        sshCiphers = sshCiphersDecoded0
        let sshKexsContainer = try containerValues.decodeIfPresent([String].self, forKey: .sshKexs)
        var sshKexsDecoded0:[String]? = nil
        if let sshKexsContainer = sshKexsContainer {
            sshKexsDecoded0 = [String]()
            for string0 in sshKexsContainer {
                sshKexsDecoded0?.append(string0)
            }
        }
        sshKexs = sshKexsDecoded0
        let sshMacsContainer = try containerValues.decodeIfPresent([String].self, forKey: .sshMacs)
        var sshMacsDecoded0:[String]? = nil
        if let sshMacsContainer = sshMacsContainer {
            sshMacsDecoded0 = [String]()
            for string0 in sshMacsContainer {
                sshMacsDecoded0?.append(string0)
            }
        }
        sshMacs = sshMacsDecoded0
        let tlsCiphersContainer = try containerValues.decodeIfPresent([String].self, forKey: .tlsCiphers)
        var tlsCiphersDecoded0:[String]? = nil
        if let tlsCiphersContainer = tlsCiphersContainer {
            tlsCiphersDecoded0 = [String]()
            for string0 in tlsCiphersContainer {
                tlsCiphersDecoded0?.append(string0)
            }
        }
        tlsCiphers = tlsCiphersDecoded0
    }
}
