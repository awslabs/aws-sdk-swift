// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateServerInputBody: Equatable {
    public let certificate: String?
    public let domain: Domain?
    public let endpointDetails: EndpointDetails?
    public let endpointType: EndpointType?
    public let hostKey: String?
    public let identityProviderDetails: IdentityProviderDetails?
    public let identityProviderType: IdentityProviderType?
    public let loggingRole: String?
    public let protocols: [`Protocol`]?
    public let securityPolicyName: String?
    public let tags: [Tag]?
}

extension CreateServerInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case certificate = "Certificate"
        case domain = "Domain"
        case endpointDetails = "EndpointDetails"
        case endpointType = "EndpointType"
        case hostKey = "HostKey"
        case identityProviderDetails = "IdentityProviderDetails"
        case identityProviderType = "IdentityProviderType"
        case loggingRole = "LoggingRole"
        case protocols = "Protocols"
        case securityPolicyName = "SecurityPolicyName"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificate)
        certificate = certificateDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Domain.self, forKey: .domain)
        domain = domainDecoded
        let endpointDetailsDecoded = try containerValues.decodeIfPresent(EndpointDetails.self, forKey: .endpointDetails)
        endpointDetails = endpointDetailsDecoded
        let endpointTypeDecoded = try containerValues.decodeIfPresent(EndpointType.self, forKey: .endpointType)
        endpointType = endpointTypeDecoded
        let hostKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hostKey)
        hostKey = hostKeyDecoded
        let identityProviderDetailsDecoded = try containerValues.decodeIfPresent(IdentityProviderDetails.self, forKey: .identityProviderDetails)
        identityProviderDetails = identityProviderDetailsDecoded
        let identityProviderTypeDecoded = try containerValues.decodeIfPresent(IdentityProviderType.self, forKey: .identityProviderType)
        identityProviderType = identityProviderTypeDecoded
        let loggingRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .loggingRole)
        loggingRole = loggingRoleDecoded
        let protocolsContainer = try containerValues.decodeIfPresent([`Protocol`].self, forKey: .protocols)
        var protocolsDecoded0:[`Protocol`]? = nil
        if let protocolsContainer = protocolsContainer {
            protocolsDecoded0 = [`Protocol`]()
            for string0 in protocolsContainer {
                protocolsDecoded0?.append(string0)
            }
        }
        protocols = protocolsDecoded0
        let securityPolicyNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .securityPolicyName)
        securityPolicyName = securityPolicyNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
