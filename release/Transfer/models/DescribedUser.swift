// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes the properties of a user that was specified.</p>
public struct DescribedUser: Equatable {
    /// <p>Specifies the unique Amazon Resource Name (ARN) for the user that was requested to be
    ///       described.</p>
    public let arn: String?
    /// <p>Specifies the landing directory (or folder), which is the location that files are written
    ///       to or read from in an Amazon S3 bucket, for the described user. An example is
    ///           <i>
    ///                <code>your-Amazon-S3-bucket-name>/home/username</code>
    ///             </i>.</p>
    public let homeDirectory: String?
    /// <p>Specifies the logical directory mappings that specify what Amazon S3 or EFS paths and keys should
    ///       be visible to your user and how you want to make them visible. You will need to specify the
    ///         "<code>Entry</code>" and "<code>Target</code>" pair, where <code>Entry</code> shows how the
    ///       path is made visible and <code>Target</code> is the actual Amazon S3 or EFS path. If you only specify
    ///       a target, it will be displayed as is. You will need to also make sure that your AWS Identity
    ///       and Access Management (IAM) role provides access to paths in <code>Target</code>.</p>
    ///
    ///          <p>In most cases, you can use this value instead of the scope-down policy to lock your user
    ///       down to the designated home directory ("<code>chroot</code>"). To do this, you can set
    ///         <code>Entry</code> to '/' and set <code>Target</code> to the HomeDirectory
    ///       parameter value.</p>
    public let homeDirectoryMappings: [HomeDirectoryMapEntry]?
    /// <p>Specifies the type of landing directory (folder) you mapped for your users to see when
    ///       they log into the file transfer protocol-enabled server. If you set it to <code>PATH</code>,
    ///       the user will see the absolute Amazon S3 bucket or EFS paths as is in their file transfer protocol
    ///       clients. If you set it <code>LOGICAL</code>, you will need to provide mappings in the
    ///         <code>HomeDirectoryMappings</code> for how you want to make Amazon S3 or EFS paths visible to your
    ///       users.</p>
    public let homeDirectoryType: HomeDirectoryType?
    /// <p>Specifies the name of the policy in use for the described user.</p>
    public let policy: String?
    /// <p>Specifies the full POSIX identity, including user ID (<code>Uid</code>), group ID
    ///         (<code>Gid</code>), and any secondary groups IDs (<code>SecondaryGids</code>), that controls
    ///       your users' access to your Amazon Elastic File System (Amazon EFS) file systems. The POSIX
    ///       permissions that are set on files and directories in your file system determine the level of
    ///       access your users get when transferring files into and out of your Amazon EFS file
    ///       systems.</p>
    public let posixProfile: PosixProfile?
    /// <p>The IAM role that controls your users' access to your Amazon S3 bucket. The
    ///       policies attached to this role will determine the level of access you want to provide your
    ///       users when transferring files into and out of your Amazon S3 bucket or buckets. The IAM role
    ///       should also contain a trust relationship that allows a server to access your resources when
    ///       servicing your users' transfer requests.</p>
    public let role: String?
    /// <p>Specifies the public key portion of the Secure Shell (SSH) keys stored for the described
    ///       user.</p>
    public let sshPublicKeys: [SshPublicKey]?
    /// <p>Specifies the key-value pairs for the user requested. Tag can be used to search for and
    ///       group users for a variety of purposes.</p>
    public let tags: [Tag]?
    /// <p>Specifies the name of the user that was requested to be described. User names are used for
    ///       authentication purposes. This is the string that will be used by your user when they log in to
    ///       your server.</p>
    public let userName: String?

    public init (
        arn: String? = nil,
        homeDirectory: String? = nil,
        homeDirectoryMappings: [HomeDirectoryMapEntry]? = nil,
        homeDirectoryType: HomeDirectoryType? = nil,
        policy: String? = nil,
        posixProfile: PosixProfile? = nil,
        role: String? = nil,
        sshPublicKeys: [SshPublicKey]? = nil,
        tags: [Tag]? = nil,
        userName: String? = nil
    )
    {
        self.arn = arn
        self.homeDirectory = homeDirectory
        self.homeDirectoryMappings = homeDirectoryMappings
        self.homeDirectoryType = homeDirectoryType
        self.policy = policy
        self.posixProfile = posixProfile
        self.role = role
        self.sshPublicKeys = sshPublicKeys
        self.tags = tags
        self.userName = userName
    }
}
