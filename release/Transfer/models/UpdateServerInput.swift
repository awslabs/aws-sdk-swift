// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct UpdateServerInput: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the AWS Certificate Manager (ACM) certificate. Required
    ///       when <code>Protocols</code> is set to <code>FTPS</code>.</p>
    ///
    ///          <p>To request a new public certificate, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request-public.html">Request a public certificate</a>
    ///       in the <i> AWS Certificate Manager User Guide</i>.</p>
    ///
    ///          <p>To import an existing certificate into ACM, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html">Importing certificates into ACM</a>
    ///       in the <i> AWS Certificate Manager User Guide</i>.</p>
    ///
    ///          <p>To request a private certificate to use FTPS through private IP addresses, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request-private.html">Request a
    ///         private certificate</a> in the <i> AWS Certificate Manager User
    ///       Guide</i>.</p>
    ///
    ///          <p>Certificates with the following cryptographic algorithms and key sizes are
    ///       supported:</p>
    ///
    ///          <ul>
    ///             <li>
    ///                <p>2048-bit RSA (RSA_2048)</p>
    ///             </li>
    ///             <li>
    ///                <p>4096-bit RSA (RSA_4096)</p>
    ///             </li>
    ///             <li>
    ///                <p>Elliptic Prime Curve 256 bit (EC_prime256v1)</p>
    ///             </li>
    ///             <li>
    ///                <p>Elliptic Prime Curve 384 bit (EC_secp384r1)</p>
    ///             </li>
    ///             <li>
    ///                <p>Elliptic Prime Curve 521 bit (EC_secp521r1)</p>
    ///             </li>
    ///          </ul>
    ///
    ///          <note>
    ///             <p>The certificate must be a valid SSL/TLS X.509 version 3 certificate with FQDN or IP
    ///         address specified and information about the issuer.</p>
    ///          </note>
    public let certificate: String?
    /// <p>The virtual private cloud (VPC) endpoint settings that are configured for your server.
    ///       With a VPC endpoint, you can restrict access to your server to resources only within your VPC.
    ///       To control incoming internet traffic, you will need to associate one or more Elastic IP
    ///       addresses with your server's endpoint.</p>
    public let endpointDetails: EndpointDetails?
    /// <p>The type of endpoint that you want your server to use. You can choose to make your server's endpoint publicly accessible (PUBLIC)
    ///       or host it inside your VPC. With an endpoint that is hosted in a VPC, you can restrict access to your server and
    ///       resources only within your VPC or choose to make it internet facing by attaching Elastic IP addresses directly to it.</p>
    ///          <note>
    ///             <p> After March 31, 2021, you won't be able to create a server using
    ///           <code>EndpointType=VPC_ENDPOINT</code> in your AWS account if your account hasn't already
    ///       done so before March 31, 2021. If you have already created servers with
    ///       <code>EndpointType=VPC_ENDPOINT</code> in your AWS account on or before March 31, 2021,
    ///         you will not be affected. After this date, use
    ///         <code>EndpointType</code>=<code>VPC</code>.</p>
    ///
    ///             <p>For more information, see
    ///         https://docs.aws.amazon.com/transfer/latest/userguide/create-server-in-vpc.html#deprecate-vpc-endpoint.</p>
    ///             <p>It is recommended that you use <code>VPC</code> as the <code>EndpointType</code>. With
    ///         this endpoint type, you have the option to directly associate up to three Elastic IPv4
    ///         addresses (BYO IP included) with your server's endpoint and use VPC security groups to
    ///         restrict traffic by the client's public IP address. This is not possible with
    ///           <code>EndpointType</code> set to <code>VPC_ENDPOINT</code>.</p>
    ///          </note>
    public let endpointType: EndpointType?
    /// <p>The RSA private key as generated by <code>ssh-keygen -N "" -m PEM -f
    ///         my-new-server-key</code>.</p>
    ///
    ///          <important>
    ///             <p>If you aren't planning to migrate existing users from an existing server to a new
    ///         server, don't update the host key. Accidentally changing a server's host key can
    ///         be disruptive.</p>
    ///          </important>
    ///
    ///
    ///
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/transfer/latest/userguide/edit-server-config.html#configuring-servers-change-host-key">Change the host key for your SFTP-enabled server</a> in the <i>AWS Transfer
    ///         Family User Guide</i>.</p>
    public let hostKey: String?
    /// <p>An array containing all of the information required to call a customer's
    ///       authentication API method.</p>
    public let identityProviderDetails: IdentityProviderDetails?
    /// <p>Changes the AWS Identity and Access Management (IAM) role that allows Amazon S3 or Amazon EFS events to
    ///       be logged in Amazon CloudWatch, turning logging on or off.</p>
    public let loggingRole: String?
    /// <p>Specifies the file transfer protocol or protocols over which your file transfer protocol
    ///       client can connect to your server's endpoint. The available protocols are:</p>
    ///
    ///          <ul>
    ///             <li>
    ///                <p>Secure Shell (SSH) File Transfer Protocol (SFTP): File transfer over SSH</p>
    ///             </li>
    ///             <li>
    ///                <p>File Transfer Protocol Secure (FTPS): File transfer with TLS encryption</p>
    ///             </li>
    ///             <li>
    ///                <p>File Transfer Protocol (FTP): Unencrypted file transfer</p>
    ///             </li>
    ///          </ul>
    ///
    ///          <note>
    ///             <p>If you select <code>FTPS</code>, you must choose a certificate stored in AWS Certificate
    ///         Manager (ACM) which will be used to identify your server when clients connect to it over
    ///         FTPS.</p>
    ///
    ///
    ///             <p>If <code>Protocol</code> includes either <code>FTP</code> or <code>FTPS</code>, then the
    ///         <code>EndpointType</code> must be <code>VPC</code> and the
    ///         <code>IdentityProviderType</code> must be <code>AWS_DIRECTORY_SERVICE</code> or <code>API_GATEWAY</code>.</p>
    ///
    ///             <p>If <code>Protocol</code> includes <code>FTP</code>, then
    ///           <code>AddressAllocationIds</code> cannot be associated.</p>
    ///
    ///             <p>If <code>Protocol</code> is set only to <code>SFTP</code>, the <code>EndpointType</code>
    ///         can be set to <code>PUBLIC</code> and the <code>IdentityProviderType</code> can be set to
    ///           <code>SERVICE_MANAGED</code>.</p>
    ///          </note>
    public let protocols: [`Protocol`]?
    /// <p>Specifies the name of the security policy that is attached to the server.</p>
    public let securityPolicyName: String?
    /// <p>A system-assigned unique identifier for a server instance that the user account is
    ///       assigned to.</p>
    public let serverId: String?

    public init (
        certificate: String? = nil,
        endpointDetails: EndpointDetails? = nil,
        endpointType: EndpointType? = nil,
        hostKey: String? = nil,
        identityProviderDetails: IdentityProviderDetails? = nil,
        loggingRole: String? = nil,
        protocols: [`Protocol`]? = nil,
        securityPolicyName: String? = nil,
        serverId: String? = nil
    )
    {
        self.certificate = certificate
        self.endpointDetails = endpointDetails
        self.endpointType = endpointType
        self.hostKey = hostKey
        self.identityProviderDetails = identityProviderDetails
        self.loggingRole = loggingRole
        self.protocols = protocols
        self.securityPolicyName = securityPolicyName
        self.serverId = serverId
    }
}
