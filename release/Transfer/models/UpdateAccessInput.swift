// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct UpdateAccessInput: Equatable {
    /// <p>A unique identifier that is required to identify specific groups within your directory.
    ///       The users of the group that you associate have access to your Amazon S3 or Amazon EFS
    ///       resources over the enabled protocols using AWS Transfer Family. If you know the group name,
    ///       you can view the SID values by running the following command using Windows PowerShell.</p>
    ///          <p>
    ///             <code>Get-ADGroup -Filter {samAccountName -like "<i>YourGroupName</i>*"} -Properties * | Select SamaccountName,ObjectSid</code>
    ///          </p>
    ///          <p>In that command, replace <i>YourGroupName</i> with the name of your Active
    ///       Directory group.</p>
    ///          <p>The regex used to validate this parameter is a string of characters consisting of
    ///       uppercase and lowercase alphanumeric characters with no spaces. You can also include
    ///       underscores or any of the following characters: =,.@:/-</p>
    public let externalId: String?
    /// <p>The landing directory (folder) for a user when they log in to the server using the client.</p>
    ///          <p>A <code>HomeDirectory</code> example is <code>/directory_name/home/mydirectory</code>.</p>
    public let homeDirectory: String?
    /// <p>Logical directory mappings that specify what Amazon S3 or Amazon EFS paths and keys should
    ///       be visible to your user and how you want to make them visible. You must specify the
    ///       <code>Entry</code> and <code>Target</code> pair, where <code>Entry</code> shows how the path
    ///       is made visible and <code>Target</code> is the actual Amazon S3 or Amazon EFS path. If you
    ///       only specify a target, it will be displayed as is. You also must ensure that your AWS Identity
    ///       and Access Management (IAM) role provides access to paths in <code>Target</code>. This value
    ///       can only be set when <code>HomeDirectoryType</code> is set to
    ///       <i>LOGICAL</i>.</p>
    ///          <p>The following is an <code>Entry</code> and <code>Target</code> pair example.</p>
    ///          <p>
    ///             <code>[ { "Entry": "your-personal-report.pdf", "Target": "/bucket3/customized-reports/${transfer:UserName}.pdf" } ]</code>
    ///          </p>
    ///          <p>In most cases, you can use this value instead of the scope-down policy to lock down your
    ///         user to the designated home directory ("<code>chroot</code>"). To do this, you can set
    ///         <code>Entry</code> to <code>/</code> and set <code>Target</code> to the
    ///         <code>HomeDirectory</code> parameter value.</p>
    ///          <p>The following is an <code>Entry</code> and <code>Target</code> pair example for <code>chroot</code>.</p>
    ///          <p>
    ///             <code>[ { "Entry": "/", "Target": "/bucket_name/home/mydirectory" } ]</code>
    ///          </p>
    ///          <note>
    ///             <p>If the target of a logical directory entry does not exist in Amazon S3 or Amazon EFS, the
    ///         entry will be ignored. As a workaround, you can use the Amazon S3 API or EFS API to create
    ///         0-byte objects as place holders for your directory. If using the AWS CLI, use the
    ///         <code>s3api</code> or <code>efsapi</code> call instead of <code>s3</code> or
    ///         <code>efs</code> so you can use the <code>put-object</code> operation. For example, you
    ///         can use the following.</p>
    ///             <p>
    ///                <code>aws s3api put-object --bucket bucketname --key path/to/folder/</code>
    ///             </p>
    ///             <p>The end of the key name must end in a <code>/</code> for it to be considered a
    ///           folder.</p>
    ///          </note>
    ///          <p>Required: No</p>
    public let homeDirectoryMappings: [HomeDirectoryMapEntry]?
    /// <p>The type of landing directory (folder) that you want your users' home directory to be when
    ///       they log in to the server. If you set it to <code>PATH</code>, the user will see the absolute
    ///       Amazon S3 bucket paths as is in their file transfer protocol clients. If you set it
    ///       <code>LOGICAL</code>, you must provide mappings in the <code>HomeDirectoryMappings</code>
    ///       for how you want to make Amazon S3 paths visible to your users.</p>
    public let homeDirectoryType: HomeDirectoryType?
    /// <p></p>
    ///          <p>A scope-down policy for your user so that you can use the same IAM role across multiple
    ///       users. This policy scopes down user access to portions of their Amazon S3 bucket. Variables
    ///       that you can use inside this policy include <code>${Transfer:UserName}</code>,
    ///       <code>${Transfer:HomeDirectory}</code>, and <code>${Transfer:HomeBucket}</code>.</p>
    ///          <note>
    ///             <p>This only applies when domain of <code>ServerId</code> is S3. Amazon EFS does not use scope
    ///       down policy.</p>
    ///             <p>For scope-down policies, AWS Transfer Family stores the policy as a JSON blob, instead of the Amazon Resource Name (ARN) of the policy. You save the policy as a JSON blob and pass it in the <code>Policy</code> argument.</p>
    ///             <p>For an example of a scope-down policy, see <a href="https://docs.aws.amazon.com/transfer/latest/userguide/scope-down-policy.html">Example
    ///         scope-down policy</a>.</p>
    ///             <p>For more information, see <a href="https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html">AssumeRole</a> in the <i>AWS Security Token Service API
    ///           Reference</i>.</p>
    ///          </note>
    public let policy: String?
    /// <p>The full POSIX identity, including user ID (<code>Uid</code>), group ID
    ///       (<code>Gid</code>), and any secondary groups IDs (<code>SecondaryGids</code>), that controls
    ///       your users' access to your Amazon EFS file systems. The POSIX permissions that are set on
    ///       files and directories in your file system determine the level of access your users get when
    ///       transferring files into and out of your Amazon EFS file systems.</p>
    public let posixProfile: PosixProfile?
    /// <p>Specifies the IAM role that controls your users' access to your Amazon S3 bucket or EFS
    ///       file system. The policies attached to this role determine the level of access that you want to
    ///       provide your users when transferring files into and out of your Amazon S3 bucket or EFS file
    ///       system. The IAM role should also contain a trust relationship that allows the server to access
    ///       your resources when servicing your users' transfer requests.</p>
    public let role: String?
    /// <p>A system-assigned unique identifier for a server instance. This is the specific server that you added your user to.</p>
    public let serverId: String?

    public init (
        externalId: String? = nil,
        homeDirectory: String? = nil,
        homeDirectoryMappings: [HomeDirectoryMapEntry]? = nil,
        homeDirectoryType: HomeDirectoryType? = nil,
        policy: String? = nil,
        posixProfile: PosixProfile? = nil,
        role: String? = nil,
        serverId: String? = nil
    )
    {
        self.externalId = externalId
        self.homeDirectory = homeDirectory
        self.homeDirectoryMappings = homeDirectoryMappings
        self.homeDirectoryType = homeDirectoryType
        self.policy = policy
        self.posixProfile = posixProfile
        self.role = role
        self.serverId = serverId
    }
}
