// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutSecretValueInputBody: Equatable {
    public let secretId: String?
    public let clientRequestToken: String?
    public let secretBinary: Data?
    public let secretString: String?
    public let versionStages: [String]?
}

extension PutSecretValueInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case secretBinary = "SecretBinary"
        case secretId = "SecretId"
        case secretString = "SecretString"
        case versionStages = "VersionStages"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let secretIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .secretId)
        secretId = secretIdDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let secretBinaryDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .secretBinary)
        secretBinary = secretBinaryDecoded
        let secretStringDecoded = try containerValues.decodeIfPresent(String.self, forKey: .secretString)
        secretString = secretStringDecoded
        let versionStagesContainer = try containerValues.decodeIfPresent([String].self, forKey: .versionStages)
        var versionStagesDecoded0:[String]? = nil
        if let versionStagesContainer = versionStagesContainer {
            versionStagesDecoded0 = [String]()
            for string0 in versionStagesContainer {
                versionStagesDecoded0?.append(string0)
            }
        }
        versionStages = versionStagesDecoded0
    }
}
