// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RotateSecretInputBody: Equatable {
    public let secretId: String?
    public let clientRequestToken: String?
    public let rotationLambdaARN: String?
    public let rotationRules: RotationRulesType?
}

extension RotateSecretInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case rotationLambdaARN = "RotationLambdaARN"
        case rotationRules = "RotationRules"
        case secretId = "SecretId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let secretIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .secretId)
        secretId = secretIdDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let rotationLambdaARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .rotationLambdaARN)
        rotationLambdaARN = rotationLambdaARNDecoded
        let rotationRulesDecoded = try containerValues.decodeIfPresent(RotationRulesType.self, forKey: .rotationRules)
        rotationRules = rotationRulesDecoded
    }
}
