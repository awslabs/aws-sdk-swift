// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetRandomPasswordInputBody: Equatable {
    public let passwordLength: Int
    public let excludeCharacters: String?
    public let excludeNumbers: Bool
    public let excludePunctuation: Bool
    public let excludeUppercase: Bool
    public let excludeLowercase: Bool
    public let includeSpace: Bool
    public let requireEachIncludedType: Bool
}

extension GetRandomPasswordInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case excludeCharacters = "ExcludeCharacters"
        case excludeLowercase = "ExcludeLowercase"
        case excludeNumbers = "ExcludeNumbers"
        case excludePunctuation = "ExcludePunctuation"
        case excludeUppercase = "ExcludeUppercase"
        case includeSpace = "IncludeSpace"
        case passwordLength = "PasswordLength"
        case requireEachIncludedType = "RequireEachIncludedType"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let passwordLengthDecoded = try containerValues.decode(Int.self, forKey: .passwordLength)
        passwordLength = passwordLengthDecoded
        let excludeCharactersDecoded = try containerValues.decodeIfPresent(String.self, forKey: .excludeCharacters)
        excludeCharacters = excludeCharactersDecoded
        let excludeNumbersDecoded = try containerValues.decode(Bool.self, forKey: .excludeNumbers)
        excludeNumbers = excludeNumbersDecoded
        let excludePunctuationDecoded = try containerValues.decode(Bool.self, forKey: .excludePunctuation)
        excludePunctuation = excludePunctuationDecoded
        let excludeUppercaseDecoded = try containerValues.decode(Bool.self, forKey: .excludeUppercase)
        excludeUppercase = excludeUppercaseDecoded
        let excludeLowercaseDecoded = try containerValues.decode(Bool.self, forKey: .excludeLowercase)
        excludeLowercase = excludeLowercaseDecoded
        let includeSpaceDecoded = try containerValues.decode(Bool.self, forKey: .includeSpace)
        includeSpace = includeSpaceDecoded
        let requireEachIncludedTypeDecoded = try containerValues.decode(Bool.self, forKey: .requireEachIncludedType)
        requireEachIncludedType = requireEachIncludedTypeDecoded
    }
}
