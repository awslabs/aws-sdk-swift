// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>A structure that contains the details about a secret. It does not include the encrypted
///         <code>SecretString</code> and <code>SecretBinary</code> values. To get those values, use the
///         <a>GetSecretValue</a> operation.</p>
public struct SecretListEntry: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the secret.</p>
    ///          <p>For more information about ARNs in Secrets Manager, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#iam-resources">Policy Resources</a> in the
    ///     <i>AWS Secrets Manager User Guide</i>.</p>
    public let aRN: String?
    /// <p>The date and time when a secret was created.</p>
    public let createdDate: Date?
    /// <p>The date and time the deletion of the secret occurred. Not present on active secrets. The
    ///       secret can be recovered until the number of days in the recovery window has passed, as
    ///       specified in the <code>RecoveryWindowInDays</code> parameter of the <a>DeleteSecret</a> operation.</p>
    public let deletedDate: Date?
    /// <p>The user-provided description of the secret.</p>
    public let description: String?
    /// <p>The ARN or alias of the AWS KMS customer master key (CMK) used to encrypt the
    ///         <code>SecretString</code> and <code>SecretBinary</code> fields in each version of the
    ///       secret. If you don't provide a key, then Secrets Manager defaults to encrypting the secret fields with
    ///       the default KMS CMK, the key named <code>awssecretsmanager</code>, for this account.</p>
    public let kmsKeyId: String?
    /// <p>The last date that this secret was accessed. This value is truncated to midnight of the
    ///       date and therefore shows only the date, not the time.</p>
    public let lastAccessedDate: Date?
    /// <p>The last date and time that this secret was modified in any way.</p>
    public let lastChangedDate: Date?
    /// <p>The most recent date and time that the Secrets Manager rotation process was successfully completed. This value is null if the secret hasn't ever rotated.</p>
    public let lastRotatedDate: Date?
    /// <p>The friendly name of the secret. You can use forward slashes in the name to represent a
    ///       path hierarchy. For example, <code>/prod/databases/dbserver1</code> could represent the secret
    ///       for a server named <code>dbserver1</code> in the folder <code>databases</code> in the folder
    ///         <code>prod</code>. </p>
    public let name: String?
    /// <p>Returns the name of the service that created the secret.</p>
    public let owningService: String?
    /// <p>The Region where Secrets Manager originated the secret.</p>
    public let primaryRegion: String?
    /// <p>Indicates whether automatic, scheduled rotation is enabled for this secret.</p>
    public let rotationEnabled: Bool
    /// <p>The ARN of an AWS Lambda function invoked by Secrets Manager to rotate and expire the
    ///       secret either automatically per the schedule or manually by a call to <a>RotateSecret</a>.</p>
    public let rotationLambdaARN: String?
    /// <p>A structure that defines the rotation configuration for the secret.</p>
    public let rotationRules: RotationRulesType?
    /// <p>A list of all of the currently assigned <code>SecretVersionStage</code> staging labels and
    ///       the <code>SecretVersionId</code> attached to each one. Staging labels are used to keep
    ///       track of the different versions during the rotation process.</p>
    ///          <note>
    ///             <p>A version that does not have any <code>SecretVersionStage</code> is considered
    ///         deprecated and subject to deletion. Such versions are not included in this list.</p>
    ///          </note>
    public let secretVersionsToStages: [String:[String]?]?
    /// <p>The list of user-defined tags associated with the secret. To add tags to a
    ///       secret, use <a>TagResource</a>. To remove tags, use <a>UntagResource</a>.</p>
    public let tags: [Tag]?

    public init (
        aRN: String? = nil,
        createdDate: Date? = nil,
        deletedDate: Date? = nil,
        description: String? = nil,
        kmsKeyId: String? = nil,
        lastAccessedDate: Date? = nil,
        lastChangedDate: Date? = nil,
        lastRotatedDate: Date? = nil,
        name: String? = nil,
        owningService: String? = nil,
        primaryRegion: String? = nil,
        rotationEnabled: Bool = false,
        rotationLambdaARN: String? = nil,
        rotationRules: RotationRulesType? = nil,
        secretVersionsToStages: [String:[String]?]? = nil,
        tags: [Tag]? = nil
    )
    {
        self.aRN = aRN
        self.createdDate = createdDate
        self.deletedDate = deletedDate
        self.description = description
        self.kmsKeyId = kmsKeyId
        self.lastAccessedDate = lastAccessedDate
        self.lastChangedDate = lastChangedDate
        self.lastRotatedDate = lastRotatedDate
        self.name = name
        self.owningService = owningService
        self.primaryRegion = primaryRegion
        self.rotationEnabled = rotationEnabled
        self.rotationLambdaARN = rotationLambdaARN
        self.rotationRules = rotationRules
        self.secretVersionsToStages = secretVersionsToStages
        self.tags = tags
    }
}
