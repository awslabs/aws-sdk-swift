// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetSecretValueInput: Equatable {
    /// <p>Specifies the secret containing the version that you want to retrieve. You can specify
    ///       either the Amazon Resource Name (ARN) or the friendly name of the secret.</p>
    ///          <note>
    ///             <p>If you specify an ARN, we generally recommend that you specify a complete ARN. You can
    ///         specify a partial ARN too—for example, if you don’t include the final hyphen and six random
    ///         characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN
    ///         match can work as long as it uniquely matches only one secret. However, if your secret has a
    ///         name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six
    ///         characters to the ARN) and you try to use that as a partial ARN, then those characters cause
    ///         Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected
    ///         results. To avoid this situation, we recommend that you don’t create secret names ending
    ///         with a hyphen followed by six characters.</p>
    ///             <p>If you specify an incomplete ARN without the random suffix, and instead provide the
    ///         'friendly name', you <i>must</i> not include the random suffix. If you do include the random suffix added by Secrets Manager,
    ///         you receive either a <i>ResourceNotFoundException</i> or an <i>AccessDeniedException</i> error, depending on your permissions.</p>
    ///         </note>
    public let secretId: String?
    /// <p>Specifies the unique identifier of the version of the secret that you want to retrieve. If
    ///       you specify both this parameter and <code>VersionStage</code>,  the two parameters must refer
    ///       to the same secret version. If you don't specify either a <code>VersionStage</code> or
    ///         <code>VersionId</code> then the default is to perform the operation on the version with the
    ///         <code>VersionStage</code> value of <code>AWSCURRENT</code>.</p>
    ///          <p>This value is typically a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID-type</a> value with
    ///       32 hexadecimal digits.</p>
    public let versionId: String?
    /// <p>Specifies the secret version that you want to retrieve by the staging label attached to
    ///       the version.</p>
    ///          <p>Staging labels are used to keep track of different versions during the rotation process.
    ///       If you specify both this parameter and <code>VersionId</code>,  the two parameters must refer
    ///       to the same secret version . If you don't specify either a <code>VersionStage</code> or
    ///         <code>VersionId</code>, then the default is to perform the operation on the version with the
    ///         <code>VersionStage</code> value of <code>AWSCURRENT</code>.</p>
    public let versionStage: String?

    public init (
        secretId: String? = nil,
        versionId: String? = nil,
        versionStage: String? = nil
    )
    {
        self.secretId = secretId
        self.versionId = versionId
        self.versionStage = versionStage
    }
}
