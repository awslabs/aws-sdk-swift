// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct RotateSecretInput: Equatable {
    /// <p>(Optional) Specifies a unique identifier for the new version of the secret that helps
    ///       ensure idempotency. </p>
    ///          <p>If you use the AWS CLI or one of the AWS SDK to call this operation, then you can
    ///       leave this parameter empty. The CLI or SDK generates a random UUID for you and includes that
    ///       in the request for this parameter. If you don't use the SDK and instead generate a raw HTTP
    ///       request to the Secrets Manager service endpoint, then you must generate a
    ///         <code>ClientRequestToken</code> yourself for new versions and include that value in the
    ///       request.</p>
    ///          <p>You only need to specify your own value if you implement your own retry logic and want to
    ///       ensure that a given secret is not created twice. We recommend that you generate a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID-type</a> value to
    ///       ensure uniqueness within the specified secret. </p>
    ///          <p>Secrets Manager uses this value to prevent the accidental creation of duplicate versions if
    ///       there are failures and retries during the function's processing. This value becomes the
    ///         <code>VersionId</code> of the new version.</p>
    public var clientRequestToken: String?
    /// <p>(Optional) Specifies the ARN of the Lambda function that can rotate the secret.</p>
    public let rotationLambdaARN: String?
    /// <p>A structure that defines the rotation configuration for this secret.</p>
    public let rotationRules: RotationRulesType?
    /// <p>Specifies the secret that you want to rotate. You can specify either the Amazon Resource
    ///       Name (ARN) or the friendly name of the secret.</p>
    ///          <note>
    ///             <p>If you specify an ARN, we generally recommend that you specify a complete ARN. You can
    ///         specify a partial ARN too—for example, if you don’t include the final hyphen and six random
    ///         characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN
    ///         match can work as long as it uniquely matches only one secret. However, if your secret has a
    ///         name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six
    ///         characters to the ARN) and you try to use that as a partial ARN, then those characters cause
    ///         Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected
    ///         results. To avoid this situation, we recommend that you don’t create secret names ending
    ///         with a hyphen followed by six characters.</p>
    ///             <p>If you specify an incomplete ARN without the random suffix, and instead provide the
    ///         'friendly name', you <i>must</i> not include the random suffix. If you do include the random suffix added by Secrets Manager,
    ///         you receive either a <i>ResourceNotFoundException</i> or an <i>AccessDeniedException</i> error, depending on your permissions.</p>
    ///         </note>
    public let secretId: String?

    public init (
        clientRequestToken: String? = nil,
        rotationLambdaARN: String? = nil,
        rotationRules: RotationRulesType? = nil,
        secretId: String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.rotationLambdaARN = rotationLambdaARN
        self.rotationRules = rotationRules
        self.secretId = secretId
    }
}
