// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Tls: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case certificateAuthorityArnList = "certificateAuthorityArnList"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateAuthorityArnList = certificateAuthorityArnList {
            var certificateAuthorityArnListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .certificateAuthorityArnList)
            for __listof__string0 in certificateAuthorityArnList {
                try certificateAuthorityArnListContainer.encode(__listof__string0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateAuthorityArnListContainer = try containerValues.decodeIfPresent([String].self, forKey: .certificateAuthorityArnList)
        var certificateAuthorityArnListDecoded0:[String]? = nil
        if let certificateAuthorityArnListContainer = certificateAuthorityArnListContainer {
            certificateAuthorityArnListDecoded0 = [String]()
            for string0 in certificateAuthorityArnListContainer {
                certificateAuthorityArnListDecoded0?.append(string0)
            }
        }
        certificateAuthorityArnList = certificateAuthorityArnListDecoded0
    }
}
