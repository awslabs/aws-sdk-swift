// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MutableClusterInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case brokerEBSVolumeInfo = "brokerEBSVolumeInfo"
        case configurationInfo = "configurationInfo"
        case enhancedMonitoring = "enhancedMonitoring"
        case instanceType = "instanceType"
        case kafkaVersion = "kafkaVersion"
        case loggingInfo = "loggingInfo"
        case numberOfBrokerNodes = "numberOfBrokerNodes"
        case openMonitoring = "openMonitoring"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let brokerEBSVolumeInfo = brokerEBSVolumeInfo {
            var brokerEBSVolumeInfoContainer = encodeContainer.nestedUnkeyedContainer(forKey: .brokerEBSVolumeInfo)
            for __listofbrokerebsvolumeinfo0 in brokerEBSVolumeInfo {
                try brokerEBSVolumeInfoContainer.encode(__listofbrokerebsvolumeinfo0)
            }
        }
        if let configurationInfo = configurationInfo {
            try encodeContainer.encode(configurationInfo, forKey: .configurationInfo)
        }
        if let enhancedMonitoring = enhancedMonitoring {
            try encodeContainer.encode(enhancedMonitoring.rawValue, forKey: .enhancedMonitoring)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let kafkaVersion = kafkaVersion {
            try encodeContainer.encode(kafkaVersion, forKey: .kafkaVersion)
        }
        if let loggingInfo = loggingInfo {
            try encodeContainer.encode(loggingInfo, forKey: .loggingInfo)
        }
        if numberOfBrokerNodes != 0 {
            try encodeContainer.encode(numberOfBrokerNodes, forKey: .numberOfBrokerNodes)
        }
        if let openMonitoring = openMonitoring {
            try encodeContainer.encode(openMonitoring, forKey: .openMonitoring)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let brokerEBSVolumeInfoContainer = try containerValues.decodeIfPresent([BrokerEBSVolumeInfo].self, forKey: .brokerEBSVolumeInfo)
        var brokerEBSVolumeInfoDecoded0:[BrokerEBSVolumeInfo]? = nil
        if let brokerEBSVolumeInfoContainer = brokerEBSVolumeInfoContainer {
            brokerEBSVolumeInfoDecoded0 = [BrokerEBSVolumeInfo]()
            for structure0 in brokerEBSVolumeInfoContainer {
                brokerEBSVolumeInfoDecoded0?.append(structure0)
            }
        }
        brokerEBSVolumeInfo = brokerEBSVolumeInfoDecoded0
        let configurationInfoDecoded = try containerValues.decodeIfPresent(ConfigurationInfo.self, forKey: .configurationInfo)
        configurationInfo = configurationInfoDecoded
        let numberOfBrokerNodesDecoded = try containerValues.decode(Int.self, forKey: .numberOfBrokerNodes)
        numberOfBrokerNodes = numberOfBrokerNodesDecoded
        let enhancedMonitoringDecoded = try containerValues.decodeIfPresent(EnhancedMonitoring.self, forKey: .enhancedMonitoring)
        enhancedMonitoring = enhancedMonitoringDecoded
        let openMonitoringDecoded = try containerValues.decodeIfPresent(OpenMonitoring.self, forKey: .openMonitoring)
        openMonitoring = openMonitoringDecoded
        let kafkaVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kafkaVersion)
        kafkaVersion = kafkaVersionDecoded
        let loggingInfoDecoded = try containerValues.decodeIfPresent(LoggingInfo.self, forKey: .loggingInfo)
        loggingInfo = loggingInfoDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
    }
}
