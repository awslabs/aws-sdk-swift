// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ClusterOperationInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientRequestId = "clientRequestId"
        case clusterArn = "clusterArn"
        case creationTime = "creationTime"
        case endTime = "endTime"
        case errorInfo = "errorInfo"
        case operationArn = "operationArn"
        case operationState = "operationState"
        case operationSteps = "operationSteps"
        case operationType = "operationType"
        case sourceClusterInfo = "sourceClusterInfo"
        case targetClusterInfo = "targetClusterInfo"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestId = clientRequestId {
            try encodeContainer.encode(clientRequestId, forKey: .clientRequestId)
        }
        if let clusterArn = clusterArn {
            try encodeContainer.encode(clusterArn, forKey: .clusterArn)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let errorInfo = errorInfo {
            try encodeContainer.encode(errorInfo, forKey: .errorInfo)
        }
        if let operationArn = operationArn {
            try encodeContainer.encode(operationArn, forKey: .operationArn)
        }
        if let operationState = operationState {
            try encodeContainer.encode(operationState, forKey: .operationState)
        }
        if let operationSteps = operationSteps {
            var operationStepsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .operationSteps)
            for __listofclusteroperationstep0 in operationSteps {
                try operationStepsContainer.encode(__listofclusteroperationstep0)
            }
        }
        if let operationType = operationType {
            try encodeContainer.encode(operationType, forKey: .operationType)
        }
        if let sourceClusterInfo = sourceClusterInfo {
            try encodeContainer.encode(sourceClusterInfo, forKey: .sourceClusterInfo)
        }
        if let targetClusterInfo = targetClusterInfo {
            try encodeContainer.encode(targetClusterInfo, forKey: .targetClusterInfo)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestId)
        clientRequestId = clientRequestIdDecoded
        let clusterArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let errorInfoDecoded = try containerValues.decodeIfPresent(ErrorInfo.self, forKey: .errorInfo)
        errorInfo = errorInfoDecoded
        let operationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .operationArn)
        operationArn = operationArnDecoded
        let operationStateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .operationState)
        operationState = operationStateDecoded
        let operationStepsContainer = try containerValues.decodeIfPresent([ClusterOperationStep].self, forKey: .operationSteps)
        var operationStepsDecoded0:[ClusterOperationStep]? = nil
        if let operationStepsContainer = operationStepsContainer {
            operationStepsDecoded0 = [ClusterOperationStep]()
            for structure0 in operationStepsContainer {
                operationStepsDecoded0?.append(structure0)
            }
        }
        operationSteps = operationStepsDecoded0
        let operationTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .operationType)
        operationType = operationTypeDecoded
        let sourceClusterInfoDecoded = try containerValues.decodeIfPresent(MutableClusterInfo.self, forKey: .sourceClusterInfo)
        sourceClusterInfo = sourceClusterInfoDecoded
        let targetClusterInfoDecoded = try containerValues.decodeIfPresent(MutableClusterInfo.self, forKey: .targetClusterInfo)
        targetClusterInfo = targetClusterInfoDecoded
    }
}
