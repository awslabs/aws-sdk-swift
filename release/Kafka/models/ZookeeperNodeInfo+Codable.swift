// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ZookeeperNodeInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attachedENIId = "attachedENIId"
        case clientVpcIpAddress = "clientVpcIpAddress"
        case endpoints = "endpoints"
        case zookeeperId = "zookeeperId"
        case zookeeperVersion = "zookeeperVersion"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachedENIId = attachedENIId {
            try encodeContainer.encode(attachedENIId, forKey: .attachedENIId)
        }
        if let clientVpcIpAddress = clientVpcIpAddress {
            try encodeContainer.encode(clientVpcIpAddress, forKey: .clientVpcIpAddress)
        }
        if let endpoints = endpoints {
            var endpointsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .endpoints)
            for __listof__string0 in endpoints {
                try endpointsContainer.encode(__listof__string0)
            }
        }
        if zookeeperId != 0.0 {
            try encodeContainer.encode(zookeeperId, forKey: .zookeeperId)
        }
        if let zookeeperVersion = zookeeperVersion {
            try encodeContainer.encode(zookeeperVersion, forKey: .zookeeperVersion)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachedENIIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .attachedENIId)
        attachedENIId = attachedENIIdDecoded
        let clientVpcIpAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientVpcIpAddress)
        clientVpcIpAddress = clientVpcIpAddressDecoded
        let endpointsContainer = try containerValues.decodeIfPresent([String].self, forKey: .endpoints)
        var endpointsDecoded0:[String]? = nil
        if let endpointsContainer = endpointsContainer {
            endpointsDecoded0 = [String]()
            for string0 in endpointsContainer {
                endpointsDecoded0?.append(string0)
            }
        }
        endpoints = endpointsDecoded0
        let zookeeperIdDecoded = try containerValues.decode(Double.self, forKey: .zookeeperId)
        zookeeperId = zookeeperIdDecoded
        let zookeeperVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .zookeeperVersion)
        zookeeperVersion = zookeeperVersionDecoded
    }
}
