// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ErrorInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case errorCode = "errorCode"
        case errorString = "errorString"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorString = errorString {
            try encodeContainer.encode(errorString, forKey: .errorString)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorStringDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorString)
        errorString = errorStringDecoded
    }
}
