// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Returns information about a cluster.</p>
public struct ClusterInfo: Equatable {
    /// <p>Arn of active cluster operation.</p>
    public let activeOperationArn: String?
    /// <p>Information about the broker nodes.</p>
    public let brokerNodeGroupInfo: BrokerNodeGroupInfo?
    /// <p>Includes all client authentication information.</p>
    public let clientAuthentication: ClientAuthentication?
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
    public let clusterArn: String?
    /// <p>The name of the cluster.</p>
    public let clusterName: String?
    /// <p>The time when the cluster was created.</p>
    public let creationTime: Date?
    /// <p>Information about the version of software currently deployed on the Kafka brokers in the cluster.</p>
    public let currentBrokerSoftwareInfo: BrokerSoftwareInfo?
    /// <p>The current version of the MSK cluster.</p>
    public let currentVersion: String?
    /// <p>Includes all encryption-related information.</p>
    public let encryptionInfo: EncryptionInfo?
    /// <p>Specifies which metrics are gathered for the MSK cluster. This property has the following possible values: DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER, and PER_TOPIC_PER_PARTITION. For a list of the metrics associated with each of these levels of monitoring, see <a href="https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html">Monitoring</a>.</p>
    public let enhancedMonitoring: EnhancedMonitoring?
    public let loggingInfo: LoggingInfo?
    /// <p>The number of broker nodes in the cluster.</p>
    public let numberOfBrokerNodes: Int
    /// <p>Settings for open monitoring using Prometheus.</p>
    public let openMonitoring: OpenMonitoring?
    /// <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
    public let state: ClusterState?
    public let stateInfo: StateInfo?
    /// <p>Tags attached to the cluster.</p>
    public let tags: [String:String]?
    /// <p>The connection string to use to connect to the Apache ZooKeeper cluster.</p>
    public let zookeeperConnectString: String?
    /// <p>The connection string to use to connect to zookeeper cluster on Tls port.</p>
    public let zookeeperConnectStringTls: String?

    public init (
        activeOperationArn: String? = nil,
        brokerNodeGroupInfo: BrokerNodeGroupInfo? = nil,
        clientAuthentication: ClientAuthentication? = nil,
        clusterArn: String? = nil,
        clusterName: String? = nil,
        creationTime: Date? = nil,
        currentBrokerSoftwareInfo: BrokerSoftwareInfo? = nil,
        currentVersion: String? = nil,
        encryptionInfo: EncryptionInfo? = nil,
        enhancedMonitoring: EnhancedMonitoring? = nil,
        loggingInfo: LoggingInfo? = nil,
        numberOfBrokerNodes: Int = 0,
        openMonitoring: OpenMonitoring? = nil,
        state: ClusterState? = nil,
        stateInfo: StateInfo? = nil,
        tags: [String:String]? = nil,
        zookeeperConnectString: String? = nil,
        zookeeperConnectStringTls: String? = nil
    )
    {
        self.activeOperationArn = activeOperationArn
        self.brokerNodeGroupInfo = brokerNodeGroupInfo
        self.clientAuthentication = clientAuthentication
        self.clusterArn = clusterArn
        self.clusterName = clusterName
        self.creationTime = creationTime
        self.currentBrokerSoftwareInfo = currentBrokerSoftwareInfo
        self.currentVersion = currentVersion
        self.encryptionInfo = encryptionInfo
        self.enhancedMonitoring = enhancedMonitoring
        self.loggingInfo = loggingInfo
        self.numberOfBrokerNodes = numberOfBrokerNodes
        self.openMonitoring = openMonitoring
        self.state = state
        self.stateInfo = stateInfo
        self.tags = tags
        self.zookeeperConnectString = zookeeperConnectString
        self.zookeeperConnectStringTls = zookeeperConnectStringTls
    }
}
