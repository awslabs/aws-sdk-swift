// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListNodesOutputBody: Equatable {
    public let nextToken: String?
    public let nodeInfoList: [NodeInfo]?
}

extension ListNodesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "nextToken"
        case nodeInfoList = "nodeInfoList"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let nodeInfoListContainer = try containerValues.decodeIfPresent([NodeInfo].self, forKey: .nodeInfoList)
        var nodeInfoListDecoded0:[NodeInfo]? = nil
        if let nodeInfoListContainer = nodeInfoListContainer {
            nodeInfoListDecoded0 = [NodeInfo]()
            for structure0 in nodeInfoListContainer {
                nodeInfoListDecoded0?.append(structure0)
            }
        }
        nodeInfoList = nodeInfoListDecoded0
    }
}
