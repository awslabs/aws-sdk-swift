// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CompatibleKafkaVersion: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case sourceVersion = "sourceVersion"
        case targetVersions = "targetVersions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourceVersion = sourceVersion {
            try encodeContainer.encode(sourceVersion, forKey: .sourceVersion)
        }
        if let targetVersions = targetVersions {
            var targetVersionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetVersions)
            for __listof__string0 in targetVersions {
                try targetVersionsContainer.encode(__listof__string0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceVersion)
        sourceVersion = sourceVersionDecoded
        let targetVersionsContainer = try containerValues.decodeIfPresent([String].self, forKey: .targetVersions)
        var targetVersionsDecoded0:[String]? = nil
        if let targetVersionsContainer = targetVersionsContainer {
            targetVersionsDecoded0 = [String]()
            for string0 in targetVersionsContainer {
                targetVersionsDecoded0?.append(string0)
            }
        }
        targetVersions = targetVersionsDecoded0
    }
}
