// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BrokerNodeInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attachedENIId = "attachedENIId"
        case brokerId = "brokerId"
        case clientSubnet = "clientSubnet"
        case clientVpcIpAddress = "clientVpcIpAddress"
        case currentBrokerSoftwareInfo = "currentBrokerSoftwareInfo"
        case endpoints = "endpoints"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachedENIId = attachedENIId {
            try encodeContainer.encode(attachedENIId, forKey: .attachedENIId)
        }
        if brokerId != 0.0 {
            try encodeContainer.encode(brokerId, forKey: .brokerId)
        }
        if let clientSubnet = clientSubnet {
            try encodeContainer.encode(clientSubnet, forKey: .clientSubnet)
        }
        if let clientVpcIpAddress = clientVpcIpAddress {
            try encodeContainer.encode(clientVpcIpAddress, forKey: .clientVpcIpAddress)
        }
        if let currentBrokerSoftwareInfo = currentBrokerSoftwareInfo {
            try encodeContainer.encode(currentBrokerSoftwareInfo, forKey: .currentBrokerSoftwareInfo)
        }
        if let endpoints = endpoints {
            var endpointsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .endpoints)
            for __listof__string0 in endpoints {
                try endpointsContainer.encode(__listof__string0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachedENIIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .attachedENIId)
        attachedENIId = attachedENIIdDecoded
        let brokerIdDecoded = try containerValues.decode(Double.self, forKey: .brokerId)
        brokerId = brokerIdDecoded
        let clientSubnetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientSubnet)
        clientSubnet = clientSubnetDecoded
        let clientVpcIpAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientVpcIpAddress)
        clientVpcIpAddress = clientVpcIpAddressDecoded
        let currentBrokerSoftwareInfoDecoded = try containerValues.decodeIfPresent(BrokerSoftwareInfo.self, forKey: .currentBrokerSoftwareInfo)
        currentBrokerSoftwareInfo = currentBrokerSoftwareInfoDecoded
        let endpointsContainer = try containerValues.decodeIfPresent([String].self, forKey: .endpoints)
        var endpointsDecoded0:[String]? = nil
        if let endpointsContainer = endpointsContainer {
            endpointsDecoded0 = [String]()
            for string0 in endpointsContainer {
                endpointsDecoded0?.append(string0)
            }
        }
        endpoints = endpointsDecoded0
    }
}
