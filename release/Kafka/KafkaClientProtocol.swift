// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>The operations for managing an Amazon MSK cluster.</p>
public protocol KafkaClientProtocol {
    /// <p>Associates one or more Scram Secrets with an Amazon MSK cluster.</p>
    func batchAssociateScramSecret(input: BatchAssociateScramSecretInput, completion: @escaping (SdkResult<BatchAssociateScramSecretOutputResponse, BatchAssociateScramSecretOutputError>) -> Void)
    /// <p>Disassociates one or more Scram Secrets from an Amazon MSK cluster.</p>
    func batchDisassociateScramSecret(input: BatchDisassociateScramSecretInput, completion: @escaping (SdkResult<BatchDisassociateScramSecretOutputResponse, BatchDisassociateScramSecretOutputError>) -> Void)
    /// <p>Creates a new MSK cluster.</p>
    func createCluster(input: CreateClusterInput, completion: @escaping (SdkResult<CreateClusterOutputResponse, CreateClusterOutputError>) -> Void)
    /// <p>Creates a new MSK configuration.</p>
    func createConfiguration(input: CreateConfigurationInput, completion: @escaping (SdkResult<CreateConfigurationOutputResponse, CreateConfigurationOutputError>) -> Void)
    /// <p>Deletes the MSK cluster specified by the Amazon Resource Name (ARN) in the request.</p>
    func deleteCluster(input: DeleteClusterInput, completion: @escaping (SdkResult<DeleteClusterOutputResponse, DeleteClusterOutputError>) -> Void)
    /// <p>Deletes an MSK Configuration.</p>
    func deleteConfiguration(input: DeleteConfigurationInput, completion: @escaping (SdkResult<DeleteConfigurationOutputResponse, DeleteConfigurationOutputError>) -> Void)
    /// <p>Returns a description of the MSK cluster whose Amazon Resource Name (ARN) is specified in the request.</p>
    func describeCluster(input: DescribeClusterInput, completion: @escaping (SdkResult<DescribeClusterOutputResponse, DescribeClusterOutputError>) -> Void)
    /// <p>Returns a description of the cluster operation specified by the ARN.</p>
    func describeClusterOperation(input: DescribeClusterOperationInput, completion: @escaping (SdkResult<DescribeClusterOperationOutputResponse, DescribeClusterOperationOutputError>) -> Void)
    /// <p>Returns a description of this MSK configuration.</p>
    func describeConfiguration(input: DescribeConfigurationInput, completion: @escaping (SdkResult<DescribeConfigurationOutputResponse, DescribeConfigurationOutputError>) -> Void)
    /// <p>Returns a description of this revision of the configuration.</p>
    func describeConfigurationRevision(input: DescribeConfigurationRevisionInput, completion: @escaping (SdkResult<DescribeConfigurationRevisionOutputResponse, DescribeConfigurationRevisionOutputError>) -> Void)
    /// <p>A list of brokers that a client application can use to bootstrap.</p>
    func getBootstrapBrokers(input: GetBootstrapBrokersInput, completion: @escaping (SdkResult<GetBootstrapBrokersOutputResponse, GetBootstrapBrokersOutputError>) -> Void)
    /// <p>Gets the Apache Kafka versions to which you can update the MSK cluster.</p>
    func getCompatibleKafkaVersions(input: GetCompatibleKafkaVersionsInput, completion: @escaping (SdkResult<GetCompatibleKafkaVersionsOutputResponse, GetCompatibleKafkaVersionsOutputError>) -> Void)
    /// <p>Returns a list of all the operations that have been performed on the specified MSK cluster.</p>
    func listClusterOperations(input: ListClusterOperationsInput, completion: @escaping (SdkResult<ListClusterOperationsOutputResponse, ListClusterOperationsOutputError>) -> Void)
    /// <p>Returns a list of all the MSK clusters in the current Region.</p>
    func listClusters(input: ListClustersInput, completion: @escaping (SdkResult<ListClustersOutputResponse, ListClustersOutputError>) -> Void)
    /// <p>Returns a list of all the MSK configurations in this Region.</p>
    func listConfigurationRevisions(input: ListConfigurationRevisionsInput, completion: @escaping (SdkResult<ListConfigurationRevisionsOutputResponse, ListConfigurationRevisionsOutputError>) -> Void)
    /// <p>Returns a list of all the MSK configurations in this Region.</p>
    func listConfigurations(input: ListConfigurationsInput, completion: @escaping (SdkResult<ListConfigurationsOutputResponse, ListConfigurationsOutputError>) -> Void)
    /// <p>Returns a list of Kafka versions.</p>
    func listKafkaVersions(input: ListKafkaVersionsInput, completion: @escaping (SdkResult<ListKafkaVersionsOutputResponse, ListKafkaVersionsOutputError>) -> Void)
    /// <p>Returns a list of the broker nodes in the cluster.</p>
    func listNodes(input: ListNodesInput, completion: @escaping (SdkResult<ListNodesOutputResponse, ListNodesOutputError>) -> Void)
    /// <p>Returns a list of the Scram Secrets associated with an Amazon MSK cluster.</p>
    func listScramSecrets(input: ListScramSecretsInput, completion: @escaping (SdkResult<ListScramSecretsOutputResponse, ListScramSecretsOutputError>) -> Void)
    /// <p>Returns a list of the tags associated with the specified resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// Reboots brokers.
    func rebootBroker(input: RebootBrokerInput, completion: @escaping (SdkResult<RebootBrokerOutputResponse, RebootBrokerOutputError>) -> Void)
    /// <p>Adds tags to the specified MSK resource.</p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p>Removes the tags associated with the keys that are provided in the query.</p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// <p>Updates the number of broker nodes in the cluster.</p>
    func updateBrokerCount(input: UpdateBrokerCountInput, completion: @escaping (SdkResult<UpdateBrokerCountOutputResponse, UpdateBrokerCountOutputError>) -> Void)
    /// <p>Updates the EBS storage associated with MSK brokers.</p>
    func updateBrokerStorage(input: UpdateBrokerStorageInput, completion: @escaping (SdkResult<UpdateBrokerStorageOutputResponse, UpdateBrokerStorageOutputError>) -> Void)
    /// <p>Updates EC2 instance type.</p>
    func updateBrokerType(input: UpdateBrokerTypeInput, completion: @escaping (SdkResult<UpdateBrokerTypeOutputResponse, UpdateBrokerTypeOutputError>) -> Void)
    /// <p>Updates the cluster with the configuration that is specified in the request body.</p>
    func updateClusterConfiguration(input: UpdateClusterConfigurationInput, completion: @escaping (SdkResult<UpdateClusterConfigurationOutputResponse, UpdateClusterConfigurationOutputError>) -> Void)
    /// <p>Updates the Apache Kafka version for the cluster.</p>
    func updateClusterKafkaVersion(input: UpdateClusterKafkaVersionInput, completion: @escaping (SdkResult<UpdateClusterKafkaVersionOutputResponse, UpdateClusterKafkaVersionOutputError>) -> Void)
    /// <p>Updates an MSK configuration.</p>
    func updateConfiguration(input: UpdateConfigurationInput, completion: @escaping (SdkResult<UpdateConfigurationOutputResponse, UpdateConfigurationOutputError>) -> Void)
    /// <p>Updates the monitoring settings for the cluster. You can use this operation to specify which Apache Kafka metrics you want Amazon MSK to send to Amazon CloudWatch. You can also specify settings for open monitoring with Prometheus.</p>
    func updateMonitoring(input: UpdateMonitoringInput, completion: @escaping (SdkResult<UpdateMonitoringOutputResponse, UpdateMonitoringOutputError>) -> Void)
}
