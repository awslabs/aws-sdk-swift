// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ActionConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case configuration
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configuration = configuration {
            var configurationContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .configuration)
            for (dictKey0, actionconfigurationmap0) in configuration {
                try configurationContainer.encode(actionconfigurationmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .configuration)
        var configurationDecoded0: [String:String]? = nil
        if let configurationContainer = configurationContainer {
            configurationDecoded0 = [String:String]()
            for (key0, actionconfigurationvalue0) in configurationContainer {
                configurationDecoded0?[key0] = actionconfigurationvalue0
            }
        }
        configuration = configurationDecoded0
    }
}
