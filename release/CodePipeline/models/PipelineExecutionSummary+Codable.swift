// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PipelineExecutionSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case lastUpdateTime
        case pipelineExecutionId
        case sourceRevisions
        case startTime
        case status
        case stopTrigger
        case trigger
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastUpdateTime = lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let pipelineExecutionId = pipelineExecutionId {
            try encodeContainer.encode(pipelineExecutionId, forKey: .pipelineExecutionId)
        }
        if let sourceRevisions = sourceRevisions {
            var sourceRevisionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sourceRevisions)
            for sourcerevisionlist0 in sourceRevisions {
                try sourceRevisionsContainer.encode(sourcerevisionlist0)
            }
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let stopTrigger = stopTrigger {
            try encodeContainer.encode(stopTrigger, forKey: .stopTrigger)
        }
        if let trigger = trigger {
            try encodeContainer.encode(trigger, forKey: .trigger)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pipelineExecutionId)
        pipelineExecutionId = pipelineExecutionIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(PipelineExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
        let sourceRevisionsContainer = try containerValues.decodeIfPresent([SourceRevision].self, forKey: .sourceRevisions)
        var sourceRevisionsDecoded0:[SourceRevision]? = nil
        if let sourceRevisionsContainer = sourceRevisionsContainer {
            sourceRevisionsDecoded0 = [SourceRevision]()
            for structure0 in sourceRevisionsContainer {
                sourceRevisionsDecoded0?.append(structure0)
            }
        }
        sourceRevisions = sourceRevisionsDecoded0
        let triggerDecoded = try containerValues.decodeIfPresent(ExecutionTrigger.self, forKey: .trigger)
        trigger = triggerDecoded
        let stopTriggerDecoded = try containerValues.decodeIfPresent(StopExecutionTrigger.self, forKey: .stopTrigger)
        stopTrigger = stopTriggerDecoded
    }
}
