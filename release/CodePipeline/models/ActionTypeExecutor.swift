// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The action engine, or executor, for an action type created for a provider, where the
///             action is to be used by customers of the provider. The action engine is associated with
///             the model used to create and update the action, such as the Lambda integration
///             model.</p>
public struct ActionTypeExecutor: Equatable {
    /// <p>The action configuration properties for the action type. These properties are
    ///             specified in the action definition when the action type is created.</p>
    public let configuration: ExecutorConfiguration?
    /// <p>The timeout in seconds for the job. An action execution can have multiple jobs. This
    ///             is the timeout for a single job, not the entire action execution.</p>
    public let jobTimeout: Int?
    /// <p>The policy statement that specifies the permissions in the CodePipeline customerâ€™s
    ///             account that are needed to successfully run an action.</p>
    ///         <p>To grant permission to another account, specify the account ID as the Principal, a
    ///             domain-style identifier defined by the service, for example
    ///                 <code>codepipeline.amazonaws.com</code>.</p>
    ///         <note>
    ///             <p>The size of the passed JSON policy document cannot exceed 2048 characters.</p>
    ///         </note>
    public let policyStatementsTemplate: String?
    /// <p>The integration model used to create and update the action type, <code>Lambda</code>
    ///             or <code>JobWorker</code>. </p>
    public let type: ExecutorType?

    public init (
        configuration: ExecutorConfiguration? = nil,
        jobTimeout: Int? = nil,
        policyStatementsTemplate: String? = nil,
        type: ExecutorType? = nil
    )
    {
        self.configuration = configuration
        self.jobTimeout = jobTimeout
        self.policyStatementsTemplate = policyStatementsTemplate
        self.type = type
    }
}
