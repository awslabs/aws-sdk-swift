// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateCustomActionTypeInputBody: Equatable {
    public let category: ActionCategory?
    public let provider: String?
    public let version: String?
    public let settings: ActionTypeSettings?
    public let configurationProperties: [ActionConfigurationProperty]?
    public let inputArtifactDetails: ArtifactDetails?
    public let outputArtifactDetails: ArtifactDetails?
    public let tags: [Tag]?
}

extension CreateCustomActionTypeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case category
        case configurationProperties
        case inputArtifactDetails
        case outputArtifactDetails
        case provider
        case settings
        case tags
        case version
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let categoryDecoded = try containerValues.decodeIfPresent(ActionCategory.self, forKey: .category)
        category = categoryDecoded
        let providerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .provider)
        provider = providerDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(ActionTypeSettings.self, forKey: .settings)
        settings = settingsDecoded
        let configurationPropertiesContainer = try containerValues.decodeIfPresent([ActionConfigurationProperty].self, forKey: .configurationProperties)
        var configurationPropertiesDecoded0:[ActionConfigurationProperty]? = nil
        if let configurationPropertiesContainer = configurationPropertiesContainer {
            configurationPropertiesDecoded0 = [ActionConfigurationProperty]()
            for structure0 in configurationPropertiesContainer {
                configurationPropertiesDecoded0?.append(structure0)
            }
        }
        configurationProperties = configurationPropertiesDecoded0
        let inputArtifactDetailsDecoded = try containerValues.decodeIfPresent(ArtifactDetails.self, forKey: .inputArtifactDetails)
        inputArtifactDetails = inputArtifactDetailsDecoded
        let outputArtifactDetailsDecoded = try containerValues.decodeIfPresent(ArtifactDetails.self, forKey: .outputArtifactDetails)
        outputArtifactDetails = outputArtifactDetailsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
