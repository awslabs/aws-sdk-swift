// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ActionConfigurationProperty: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description
        case key
        case name
        case queryable
        case `required` = "required"
        case secret
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if key != false {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if queryable != false {
            try encodeContainer.encode(queryable, forKey: .queryable)
        }
        if `required` != false {
            try encodeContainer.encode(`required`, forKey: .`required`)
        }
        if secret != false {
            try encodeContainer.encode(secret, forKey: .secret)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let requiredDecoded = try containerValues.decode(Bool.self, forKey: .required)
        `required` = requiredDecoded
        let keyDecoded = try containerValues.decode(Bool.self, forKey: .key)
        key = keyDecoded
        let secretDecoded = try containerValues.decode(Bool.self, forKey: .secret)
        secret = secretDecoded
        let queryableDecoded = try containerValues.decode(Bool.self, forKey: .queryable)
        queryable = queryableDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let typeDecoded = try containerValues.decodeIfPresent(ActionConfigurationPropertyType.self, forKey: .type)
        type = typeDecoded
    }
}
