// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ActionExecutionInput: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actionTypeId
        case configuration
        case inputArtifacts
        case namespace
        case region
        case resolvedConfiguration
        case roleArn
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionTypeId = actionTypeId {
            try encodeContainer.encode(actionTypeId, forKey: .actionTypeId)
        }
        if let configuration = configuration {
            var configurationContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .configuration)
            for (dictKey0, actionconfigurationmap0) in configuration {
                try configurationContainer.encode(actionconfigurationmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let inputArtifacts = inputArtifacts {
            var inputArtifactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputArtifacts)
            for artifactdetaillist0 in inputArtifacts {
                try inputArtifactsContainer.encode(artifactdetaillist0)
            }
        }
        if let namespace = namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
        if let region = region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let resolvedConfiguration = resolvedConfiguration {
            var resolvedConfigurationContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .resolvedConfiguration)
            for (dictKey0, resolvedactionconfigurationmap0) in resolvedConfiguration {
                try resolvedConfigurationContainer.encode(resolvedactionconfigurationmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionTypeIdDecoded = try containerValues.decodeIfPresent(ActionTypeId.self, forKey: .actionTypeId)
        actionTypeId = actionTypeIdDecoded
        let configurationContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .configuration)
        var configurationDecoded0: [String:String]? = nil
        if let configurationContainer = configurationContainer {
            configurationDecoded0 = [String:String]()
            for (key0, actionconfigurationvalue0) in configurationContainer {
                configurationDecoded0?[key0] = actionconfigurationvalue0
            }
        }
        configuration = configurationDecoded0
        let resolvedConfigurationContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .resolvedConfiguration)
        var resolvedConfigurationDecoded0: [String:String]? = nil
        if let resolvedConfigurationContainer = resolvedConfigurationContainer {
            resolvedConfigurationDecoded0 = [String:String]()
            for (key0, string0) in resolvedConfigurationContainer {
                resolvedConfigurationDecoded0?[key0] = string0
            }
        }
        resolvedConfiguration = resolvedConfigurationDecoded0
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let regionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .region)
        region = regionDecoded
        let inputArtifactsContainer = try containerValues.decodeIfPresent([ArtifactDetail].self, forKey: .inputArtifacts)
        var inputArtifactsDecoded0:[ArtifactDetail]? = nil
        if let inputArtifactsContainer = inputArtifactsContainer {
            inputArtifactsDecoded0 = [ArtifactDetail]()
            for structure0 in inputArtifactsContainer {
                inputArtifactsDecoded0?.append(structure0)
            }
        }
        inputArtifacts = inputArtifactsDecoded0
        let namespaceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .namespace)
        namespace = namespaceDecoded
    }
}
