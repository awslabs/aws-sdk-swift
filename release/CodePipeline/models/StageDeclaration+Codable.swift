// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StageDeclaration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actions
        case blockers
        case name
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for stageactiondeclarationlist0 in actions {
                try actionsContainer.encode(stageactiondeclarationlist0)
            }
        }
        if let blockers = blockers {
            var blockersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .blockers)
            for stageblockerdeclarationlist0 in blockers {
                try blockersContainer.encode(stageblockerdeclarationlist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let blockersContainer = try containerValues.decodeIfPresent([BlockerDeclaration].self, forKey: .blockers)
        var blockersDecoded0:[BlockerDeclaration]? = nil
        if let blockersContainer = blockersContainer {
            blockersDecoded0 = [BlockerDeclaration]()
            for structure0 in blockersContainer {
                blockersDecoded0?.append(structure0)
            }
        }
        blockers = blockersDecoded0
        let actionsContainer = try containerValues.decodeIfPresent([ActionDeclaration].self, forKey: .actions)
        var actionsDecoded0:[ActionDeclaration]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [ActionDeclaration]()
            for structure0 in actionsContainer {
                actionsDecoded0?.append(structure0)
            }
        }
        actions = actionsDecoded0
    }
}
