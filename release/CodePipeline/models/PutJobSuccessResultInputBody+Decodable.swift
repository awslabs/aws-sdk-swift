// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutJobSuccessResultInputBody: Equatable {
    public let jobId: String?
    public let currentRevision: CurrentRevision?
    public let continuationToken: String?
    public let executionDetails: ExecutionDetails?
    public let outputVariables: [String:String]?
}

extension PutJobSuccessResultInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case continuationToken
        case currentRevision
        case executionDetails
        case jobId
        case outputVariables
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let currentRevisionDecoded = try containerValues.decodeIfPresent(CurrentRevision.self, forKey: .currentRevision)
        currentRevision = currentRevisionDecoded
        let continuationTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .continuationToken)
        continuationToken = continuationTokenDecoded
        let executionDetailsDecoded = try containerValues.decodeIfPresent(ExecutionDetails.self, forKey: .executionDetails)
        executionDetails = executionDetailsDecoded
        let outputVariablesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .outputVariables)
        var outputVariablesDecoded0: [String:String]? = nil
        if let outputVariablesContainer = outputVariablesContainer {
            outputVariablesDecoded0 = [String:String]()
            for (key0, outputvariablesvalue0) in outputVariablesContainer {
                outputVariablesDecoded0?[key0] = outputvariablesvalue0
            }
        }
        outputVariables = outputVariablesDecoded0
    }
}
