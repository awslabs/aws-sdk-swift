// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ActionType: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actionConfigurationProperties
        case id
        case inputArtifactDetails
        case outputArtifactDetails
        case settings
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionConfigurationProperties = actionConfigurationProperties {
            var actionConfigurationPropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actionConfigurationProperties)
            for actionconfigurationpropertylist0 in actionConfigurationProperties {
                try actionConfigurationPropertiesContainer.encode(actionconfigurationpropertylist0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let inputArtifactDetails = inputArtifactDetails {
            try encodeContainer.encode(inputArtifactDetails, forKey: .inputArtifactDetails)
        }
        if let outputArtifactDetails = outputArtifactDetails {
            try encodeContainer.encode(outputArtifactDetails, forKey: .outputArtifactDetails)
        }
        if let settings = settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(ActionTypeId.self, forKey: .id)
        id = idDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(ActionTypeSettings.self, forKey: .settings)
        settings = settingsDecoded
        let actionConfigurationPropertiesContainer = try containerValues.decodeIfPresent([ActionConfigurationProperty].self, forKey: .actionConfigurationProperties)
        var actionConfigurationPropertiesDecoded0:[ActionConfigurationProperty]? = nil
        if let actionConfigurationPropertiesContainer = actionConfigurationPropertiesContainer {
            actionConfigurationPropertiesDecoded0 = [ActionConfigurationProperty]()
            for structure0 in actionConfigurationPropertiesContainer {
                actionConfigurationPropertiesDecoded0?.append(structure0)
            }
        }
        actionConfigurationProperties = actionConfigurationPropertiesDecoded0
        let inputArtifactDetailsDecoded = try containerValues.decodeIfPresent(ArtifactDetails.self, forKey: .inputArtifactDetails)
        inputArtifactDetails = inputArtifactDetailsDecoded
        let outputArtifactDetailsDecoded = try containerValues.decodeIfPresent(ArtifactDetails.self, forKey: .outputArtifactDetails)
        outputArtifactDetails = outputArtifactDetailsDecoded
    }
}
