// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ExecutionTrigger: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case triggerDetail
        case triggerType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let triggerDetail = triggerDetail {
            try encodeContainer.encode(triggerDetail, forKey: .triggerDetail)
        }
        if let triggerType = triggerType {
            try encodeContainer.encode(triggerType.rawValue, forKey: .triggerType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let triggerTypeDecoded = try containerValues.decodeIfPresent(TriggerType.self, forKey: .triggerType)
        triggerType = triggerTypeDecoded
        let triggerDetailDecoded = try containerValues.decodeIfPresent(String.self, forKey: .triggerDetail)
        triggerDetail = triggerDetailDecoded
    }
}
