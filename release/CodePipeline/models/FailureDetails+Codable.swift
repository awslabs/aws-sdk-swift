// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FailureDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case externalExecutionId
        case message
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let externalExecutionId = externalExecutionId {
            try encodeContainer.encode(externalExecutionId, forKey: .externalExecutionId)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(FailureType.self, forKey: .type)
        type = typeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let externalExecutionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .externalExecutionId)
        externalExecutionId = externalExecutionIdDecoded
    }
}
