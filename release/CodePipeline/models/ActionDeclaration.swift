// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents information about an action declaration.</p>
public struct ActionDeclaration: Equatable {
    /// <p>Specifies the action type and the provider of the action.</p>
    public let actionTypeId: ActionTypeId?
    /// <p>The action's configuration. These are key-value pairs that specify input values for
    ///             an action. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements">Action Structure Requirements in CodePipeline</a>. For the list of
    ///             configuration properties for the AWS CloudFormation action type in CodePipeline, see
    ///                 <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-action-reference.html">Configuration Properties Reference</a> in the <i>AWS CloudFormation User
    ///                 Guide</i>. For template snippets with examples, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-parameter-override-functions.html">Using Parameter Override Functions with CodePipeline Pipelines</a> in the
    ///                 <i>AWS CloudFormation User Guide</i>.</p>
    ///         <p>The values can be represented in either JSON or YAML format. For example, the JSON
    ///             configuration item format is as follows: </p>
    ///         <p>
    ///             <i>JSON:</i>
    ///          </p>
    ///         <p>
    ///             <code>"Configuration" : { Key : Value },</code>
    ///         </p>
    public let configuration: [String:String]?
    /// <p>The name or ID of the artifact consumed by the action, such as a test or build
    ///             artifact.</p>
    public let inputArtifacts: [InputArtifact]?
    /// <p>The action declaration's name.</p>
    public let name: String?
    /// <p>The variable namespace associated with the action. All variables produced as output by
    ///             this action fall under this namespace.</p>
    public let namespace: String?
    /// <p>The name or ID of the result of the action declaration, such as a test or build
    ///             artifact.</p>
    public let outputArtifacts: [OutputArtifact]?
    /// <p>The action declaration's AWS Region, such as us-east-1.</p>
    public let region: String?
    /// <p>The ARN of the IAM service role that performs the declared action. This is assumed
    ///             through the roleArn for the pipeline.</p>
    public let roleArn: String?
    /// <p>The order in which actions are run.</p>
    public let runOrder: Int?

    public init (
        actionTypeId: ActionTypeId? = nil,
        configuration: [String:String]? = nil,
        inputArtifacts: [InputArtifact]? = nil,
        name: String? = nil,
        namespace: String? = nil,
        outputArtifacts: [OutputArtifact]? = nil,
        region: String? = nil,
        roleArn: String? = nil,
        runOrder: Int? = nil
    )
    {
        self.actionTypeId = actionTypeId
        self.configuration = configuration
        self.inputArtifacts = inputArtifacts
        self.name = name
        self.namespace = namespace
        self.outputArtifacts = outputArtifacts
        self.region = region
        self.roleArn = roleArn
        self.runOrder = runOrder
    }
}
