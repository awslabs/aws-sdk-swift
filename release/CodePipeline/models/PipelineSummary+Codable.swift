// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PipelineSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case created
        case name
        case updated
        case version
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let created = created {
            try encodeContainer.encode(created.timeIntervalSince1970, forKey: .created)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let updated = updated {
            try encodeContainer.encode(updated.timeIntervalSince1970, forKey: .updated)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .version)
        version = versionDecoded
        let createdDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .created)
        created = createdDecoded
        let updatedDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .updated)
        updated = updatedDecoded
    }
}
