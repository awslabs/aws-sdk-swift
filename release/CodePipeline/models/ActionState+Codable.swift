// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ActionState: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actionName
        case currentRevision
        case entityUrl
        case latestExecution
        case revisionUrl
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionName = actionName {
            try encodeContainer.encode(actionName, forKey: .actionName)
        }
        if let currentRevision = currentRevision {
            try encodeContainer.encode(currentRevision, forKey: .currentRevision)
        }
        if let entityUrl = entityUrl {
            try encodeContainer.encode(entityUrl, forKey: .entityUrl)
        }
        if let latestExecution = latestExecution {
            try encodeContainer.encode(latestExecution, forKey: .latestExecution)
        }
        if let revisionUrl = revisionUrl {
            try encodeContainer.encode(revisionUrl, forKey: .revisionUrl)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let currentRevisionDecoded = try containerValues.decodeIfPresent(ActionRevision.self, forKey: .currentRevision)
        currentRevision = currentRevisionDecoded
        let latestExecutionDecoded = try containerValues.decodeIfPresent(ActionExecution.self, forKey: .latestExecution)
        latestExecution = latestExecutionDecoded
        let entityUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .entityUrl)
        entityUrl = entityUrlDecoded
        let revisionUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .revisionUrl)
        revisionUrl = revisionUrlDecoded
    }
}
