// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ActionDeclaration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actionTypeId
        case configuration
        case inputArtifacts
        case name
        case namespace
        case outputArtifacts
        case region
        case roleArn
        case runOrder
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionTypeId = actionTypeId {
            try encodeContainer.encode(actionTypeId, forKey: .actionTypeId)
        }
        if let configuration = configuration {
            var configurationContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .configuration)
            for (dictKey0, actionconfigurationmap0) in configuration {
                try configurationContainer.encode(actionconfigurationmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let inputArtifacts = inputArtifacts {
            var inputArtifactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputArtifacts)
            for inputartifactlist0 in inputArtifacts {
                try inputArtifactsContainer.encode(inputartifactlist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let namespace = namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
        if let outputArtifacts = outputArtifacts {
            var outputArtifactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputArtifacts)
            for outputartifactlist0 in outputArtifacts {
                try outputArtifactsContainer.encode(outputartifactlist0)
            }
        }
        if let region = region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let runOrder = runOrder {
            try encodeContainer.encode(runOrder, forKey: .runOrder)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let actionTypeIdDecoded = try containerValues.decodeIfPresent(ActionTypeId.self, forKey: .actionTypeId)
        actionTypeId = actionTypeIdDecoded
        let runOrderDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .runOrder)
        runOrder = runOrderDecoded
        let configurationContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .configuration)
        var configurationDecoded0: [String:String]? = nil
        if let configurationContainer = configurationContainer {
            configurationDecoded0 = [String:String]()
            for (key0, actionconfigurationvalue0) in configurationContainer {
                configurationDecoded0?[key0] = actionconfigurationvalue0
            }
        }
        configuration = configurationDecoded0
        let outputArtifactsContainer = try containerValues.decodeIfPresent([OutputArtifact].self, forKey: .outputArtifacts)
        var outputArtifactsDecoded0:[OutputArtifact]? = nil
        if let outputArtifactsContainer = outputArtifactsContainer {
            outputArtifactsDecoded0 = [OutputArtifact]()
            for structure0 in outputArtifactsContainer {
                outputArtifactsDecoded0?.append(structure0)
            }
        }
        outputArtifacts = outputArtifactsDecoded0
        let inputArtifactsContainer = try containerValues.decodeIfPresent([InputArtifact].self, forKey: .inputArtifacts)
        var inputArtifactsDecoded0:[InputArtifact]? = nil
        if let inputArtifactsContainer = inputArtifactsContainer {
            inputArtifactsDecoded0 = [InputArtifact]()
            for structure0 in inputArtifactsContainer {
                inputArtifactsDecoded0?.append(structure0)
            }
        }
        inputArtifacts = inputArtifactsDecoded0
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let regionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .region)
        region = regionDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .namespace)
        namespace = namespaceDecoded
    }
}
