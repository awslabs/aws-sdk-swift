// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListActionTypesOutputBody: Equatable {
    public let actionTypes: [ActionType]?
    public let nextToken: String?
}

extension ListActionTypesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case actionTypes
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionTypesContainer = try containerValues.decodeIfPresent([ActionType].self, forKey: .actionTypes)
        var actionTypesDecoded0:[ActionType]? = nil
        if let actionTypesContainer = actionTypesContainer {
            actionTypesDecoded0 = [ActionType]()
            for structure0 in actionTypesContainer {
                actionTypesDecoded0?.append(structure0)
            }
        }
        actionTypes = actionTypesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
