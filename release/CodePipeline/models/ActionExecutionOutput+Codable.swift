// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ActionExecutionOutput: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case executionResult
        case outputArtifacts
        case outputVariables
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionResult = executionResult {
            try encodeContainer.encode(executionResult, forKey: .executionResult)
        }
        if let outputArtifacts = outputArtifacts {
            var outputArtifactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputArtifacts)
            for artifactdetaillist0 in outputArtifacts {
                try outputArtifactsContainer.encode(artifactdetaillist0)
            }
        }
        if let outputVariables = outputVariables {
            var outputVariablesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .outputVariables)
            for (dictKey0, outputvariablesmap0) in outputVariables {
                try outputVariablesContainer.encode(outputvariablesmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputArtifactsContainer = try containerValues.decodeIfPresent([ArtifactDetail].self, forKey: .outputArtifacts)
        var outputArtifactsDecoded0:[ArtifactDetail]? = nil
        if let outputArtifactsContainer = outputArtifactsContainer {
            outputArtifactsDecoded0 = [ArtifactDetail]()
            for structure0 in outputArtifactsContainer {
                outputArtifactsDecoded0?.append(structure0)
            }
        }
        outputArtifacts = outputArtifactsDecoded0
        let executionResultDecoded = try containerValues.decodeIfPresent(ActionExecutionResult.self, forKey: .executionResult)
        executionResult = executionResultDecoded
        let outputVariablesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .outputVariables)
        var outputVariablesDecoded0: [String:String]? = nil
        if let outputVariablesContainer = outputVariablesContainer {
            outputVariablesDecoded0 = [String:String]()
            for (key0, outputvariablesvalue0) in outputVariablesContainer {
                outputVariablesDecoded0?[key0] = outputvariablesvalue0
            }
        }
        outputVariables = outputVariablesDecoded0
    }
}
