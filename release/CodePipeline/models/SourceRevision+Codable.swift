// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SourceRevision: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actionName
        case revisionId
        case revisionSummary
        case revisionUrl
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionName = actionName {
            try encodeContainer.encode(actionName, forKey: .actionName)
        }
        if let revisionId = revisionId {
            try encodeContainer.encode(revisionId, forKey: .revisionId)
        }
        if let revisionSummary = revisionSummary {
            try encodeContainer.encode(revisionSummary, forKey: .revisionSummary)
        }
        if let revisionUrl = revisionUrl {
            try encodeContainer.encode(revisionUrl, forKey: .revisionUrl)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let revisionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .revisionId)
        revisionId = revisionIdDecoded
        let revisionSummaryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .revisionSummary)
        revisionSummary = revisionSummaryDecoded
        let revisionUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .revisionUrl)
        revisionUrl = revisionUrlDecoded
    }
}
