// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <fullname>AWS CodeDeploy</fullname>
///         <p>AWS CodeDeploy is a deployment service that automates application deployments to
///             Amazon EC2 instances, on-premises instances running in your own facility, serverless AWS
///             Lambda functions, or applications in an Amazon ECS service.</p>
///         <p>You can deploy a nearly unlimited variety of application content, such as an updated
///             Lambda function, updated applications in an Amazon ECS service, code, web and
///             configuration files, executables, packages, scripts, multimedia files, and so on. AWS
///             CodeDeploy can deploy application content stored in Amazon S3 buckets, GitHub
///             repositories, or Bitbucket repositories. You do not need to make changes to your
///             existing code before you can use AWS CodeDeploy.</p>
///         <p>AWS CodeDeploy makes it easier for you to rapidly release new features, helps you
///             avoid downtime during application deployment, and handles the complexity of updating
///             your applications, without many of the risks associated with error-prone manual
///             deployments.</p>
///         <p>
///             <b>AWS CodeDeploy Components</b>
///         </p>
///         <p>Use the information in this guide to help you work with the following AWS CodeDeploy
///             components:</p>
///         <ul>
///             <li>
///                 <p>
///                     <b>Application</b>: A name that uniquely identifies
///                     the application you want to deploy. AWS CodeDeploy uses this name, which
///                     functions as a container, to ensure the correct combination of revision,
///                     deployment configuration, and deployment group are referenced during a
///                     deployment.</p>
///             </li>
///             <li>
///                 <p>
///                     <b>Deployment group</b>: A set of individual
///                     instances, CodeDeploy Lambda deployment configuration settings, or an Amazon ECS
///                     service and network details. A Lambda deployment group specifies how to route
///                     traffic to a new version of a Lambda function. An Amazon ECS deployment group
///                     specifies the service created in Amazon ECS to deploy, a load balancer, and a
///                     listener to reroute production traffic to an updated containerized application.
///                     An EC2/On-premises deployment group contains individually tagged instances,
///                     Amazon EC2 instances in Amazon EC2 Auto Scaling groups, or both. All deployment
///                     groups can specify optional trigger, alarm, and rollback settings.</p>
///             </li>
///             <li>
///                 <p>
///                     <b>Deployment configuration</b>: A set of deployment
///                     rules and deployment success and failure conditions used by AWS CodeDeploy
///                     during a deployment.</p>
///             </li>
///             <li>
///                 <p>
///                     <b>Deployment</b>: The process and the components used
///                     when updating a Lambda function, a containerized application in an Amazon ECS
///                     service, or of installing content on one or more instances. </p>
///             </li>
///             <li>
///                 <p>
///                     <b>Application revisions</b>: For an AWS Lambda
///                     deployment, this is an AppSpec file that specifies the Lambda function to be
///                     updated and one or more functions to validate deployment lifecycle events. For
///                     an Amazon ECS deployment, this is an AppSpec file that specifies the Amazon ECS
///                     task definition, container, and port where production traffic is rerouted. For
///                     an EC2/On-premises deployment, this is an archive file that contains source
///                     content—source code, webpages, executable files, and deployment scripts—along
///                     with an AppSpec file. Revisions are stored in Amazon S3 buckets or GitHub
///                     repositories. For Amazon S3, a revision is uniquely identified by its Amazon S3
///                     object key and its ETag, version, or both. For GitHub, a revision is uniquely
///                     identified by its commit ID.</p>
///             </li>
///          </ul>
///         <p>This guide also contains information to help you get details about the instances in
///             your deployments, to make on-premises instances available for AWS CodeDeploy
///             deployments, to get details about a Lambda function deployment, and to get details about
///             Amazon ECS service deployments.</p>
///         <p>
///             <b>AWS CodeDeploy Information Resources</b>
///          </p>
///         <ul>
///             <li>
///                 <p>
///                   <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide">AWS CodeDeploy
///                         User Guide</a>
///                </p>
///             </li>
///             <li>
///                 <p>
///                   <a href="https://docs.aws.amazon.com/codedeploy/latest/APIReference/">AWS
///                         CodeDeploy API Reference Guide</a>
///                </p>
///             </li>
///             <li>
///                 <p>
///                   <a href="https://docs.aws.amazon.com/cli/latest/reference/deploy/index.html">AWS
///                         CLI Reference for AWS CodeDeploy</a>
///                </p>
///             </li>
///             <li>
///                 <p>
///                     <a href="https://forums.aws.amazon.com/forum.jspa?forumID=179">AWS CodeDeploy
///                         Developer Forum</a>
///                 </p>
///             </li>
///          </ul>
public protocol CodeDeployClientProtocol {
    /// <p>Adds tags to on-premises instances.</p>
    func addTagsToOnPremisesInstances(input: AddTagsToOnPremisesInstancesInput, completion: @escaping (SdkResult<AddTagsToOnPremisesInstancesOutputResponse, AddTagsToOnPremisesInstancesOutputError>) -> Void)
    /// <p>Gets information about one or more application revisions. The maximum number of
    ///             application revisions that can be returned is 25.</p>
    func batchGetApplicationRevisions(input: BatchGetApplicationRevisionsInput, completion: @escaping (SdkResult<BatchGetApplicationRevisionsOutputResponse, BatchGetApplicationRevisionsOutputError>) -> Void)
    /// <p>Gets information about one or more applications. The maximum number of applications
    ///             that can be returned is 100.</p>
    func batchGetApplications(input: BatchGetApplicationsInput, completion: @escaping (SdkResult<BatchGetApplicationsOutputResponse, BatchGetApplicationsOutputError>) -> Void)
    /// <p>Gets information about one or more deployment groups.</p>
    func batchGetDeploymentGroups(input: BatchGetDeploymentGroupsInput, completion: @escaping (SdkResult<BatchGetDeploymentGroupsOutputResponse, BatchGetDeploymentGroupsOutputError>) -> Void)
    /// <note>
    ///             <p> This method works, but is deprecated. Use <code>BatchGetDeploymentTargets</code>
    ///                 instead. </p>
    ///         </note>
    ///         <p> Returns an array of one or more instances associated with a deployment. This method
    ///             works with EC2/On-premises and AWS Lambda compute platforms. The newer
    ///                 <code>BatchGetDeploymentTargets</code> works with all compute platforms. The maximum
    ///             number of instances that can be returned is 25.</p>
    @available(*, deprecated, message: "This operation is deprecated, use BatchGetDeploymentTargets instead.")
    func batchGetDeploymentInstances(input: BatchGetDeploymentInstancesInput, completion: @escaping (SdkResult<BatchGetDeploymentInstancesOutputResponse, BatchGetDeploymentInstancesOutputError>) -> Void)
    /// <p>Gets information about one or more deployments. The maximum number of deployments that
    ///             can be returned is 25.</p>
    func batchGetDeployments(input: BatchGetDeploymentsInput, completion: @escaping (SdkResult<BatchGetDeploymentsOutputResponse, BatchGetDeploymentsOutputError>) -> Void)
    /// <p> Returns an array of one or more targets associated with a deployment. This method
    ///             works with all compute types and should be used instead of the deprecated
    ///                 <code>BatchGetDeploymentInstances</code>. The maximum number of targets that can be
    ///             returned is 25.</p>
    ///         <p> The type of targets returned depends on the deployment's compute platform or
    ///             deployment method: </p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <b>EC2/On-premises</b>: Information about EC2 instance
    ///                     targets. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>AWS Lambda</b>: Information about Lambda functions
    ///                     targets. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>Amazon ECS</b>: Information about Amazon ECS
    ///                     service targets. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <b>CloudFormation</b>: Information about targets of
    ///                     blue/green deployments initiated by a CloudFormation stack update.</p>
    ///             </li>
    ///          </ul>
    func batchGetDeploymentTargets(input: BatchGetDeploymentTargetsInput, completion: @escaping (SdkResult<BatchGetDeploymentTargetsOutputResponse, BatchGetDeploymentTargetsOutputError>) -> Void)
    /// <p>Gets information about one or more on-premises instances. The maximum number of
    ///             on-premises instances that can be returned is 25.</p>
    func batchGetOnPremisesInstances(input: BatchGetOnPremisesInstancesInput, completion: @escaping (SdkResult<BatchGetOnPremisesInstancesOutputResponse, BatchGetOnPremisesInstancesOutputError>) -> Void)
    /// <p>For a blue/green deployment, starts the process of rerouting traffic from instances in
    ///             the original environment to instances in the replacement environment without waiting for
    ///             a specified wait time to elapse. (Traffic rerouting, which is achieved by registering
    ///             instances in the replacement environment with the load balancer, can start as soon as
    ///             all instances have a status of Ready.) </p>
    func continueDeployment(input: ContinueDeploymentInput, completion: @escaping (SdkResult<ContinueDeploymentOutputResponse, ContinueDeploymentOutputError>) -> Void)
    /// <p>Creates an application.</p>
    func createApplication(input: CreateApplicationInput, completion: @escaping (SdkResult<CreateApplicationOutputResponse, CreateApplicationOutputError>) -> Void)
    /// <p>Deploys an application revision through the specified deployment group.</p>
    func createDeployment(input: CreateDeploymentInput, completion: @escaping (SdkResult<CreateDeploymentOutputResponse, CreateDeploymentOutputError>) -> Void)
    /// <p> Creates a deployment configuration. </p>
    func createDeploymentConfig(input: CreateDeploymentConfigInput, completion: @escaping (SdkResult<CreateDeploymentConfigOutputResponse, CreateDeploymentConfigOutputError>) -> Void)
    /// <p>Creates a deployment group to which application revisions are deployed.</p>
    func createDeploymentGroup(input: CreateDeploymentGroupInput, completion: @escaping (SdkResult<CreateDeploymentGroupOutputResponse, CreateDeploymentGroupOutputError>) -> Void)
    /// <p>Deletes an application.</p>
    func deleteApplication(input: DeleteApplicationInput, completion: @escaping (SdkResult<DeleteApplicationOutputResponse, DeleteApplicationOutputError>) -> Void)
    /// <p>Deletes a deployment configuration.</p>
    ///         <note>
    ///             <p>A deployment configuration cannot be deleted if it is currently in use. Predefined
    ///                 configurations cannot be deleted.</p>
    ///         </note>
    func deleteDeploymentConfig(input: DeleteDeploymentConfigInput, completion: @escaping (SdkResult<DeleteDeploymentConfigOutputResponse, DeleteDeploymentConfigOutputError>) -> Void)
    /// <p>Deletes a deployment group.</p>
    func deleteDeploymentGroup(input: DeleteDeploymentGroupInput, completion: @escaping (SdkResult<DeleteDeploymentGroupOutputResponse, DeleteDeploymentGroupOutputError>) -> Void)
    /// <p>Deletes a GitHub account connection.</p>
    func deleteGitHubAccountToken(input: DeleteGitHubAccountTokenInput, completion: @escaping (SdkResult<DeleteGitHubAccountTokenOutputResponse, DeleteGitHubAccountTokenOutputError>) -> Void)
    /// <p>Deletes resources linked to an external ID.</p>
    func deleteResourcesByExternalId(input: DeleteResourcesByExternalIdInput, completion: @escaping (SdkResult<DeleteResourcesByExternalIdOutputResponse, DeleteResourcesByExternalIdOutputError>) -> Void)
    /// <p>Deregisters an on-premises instance.</p>
    func deregisterOnPremisesInstance(input: DeregisterOnPremisesInstanceInput, completion: @escaping (SdkResult<DeregisterOnPremisesInstanceOutputResponse, DeregisterOnPremisesInstanceOutputError>) -> Void)
    /// <p>Gets information about an application.</p>
    func getApplication(input: GetApplicationInput, completion: @escaping (SdkResult<GetApplicationOutputResponse, GetApplicationOutputError>) -> Void)
    /// <p>Gets information about an application revision.</p>
    func getApplicationRevision(input: GetApplicationRevisionInput, completion: @escaping (SdkResult<GetApplicationRevisionOutputResponse, GetApplicationRevisionOutputError>) -> Void)
    /// <p>Gets information about a deployment.</p>
    ///         <note>
    ///             <p> The <code>content</code> property of the <code>appSpecContent</code> object in
    ///                 the returned revision is always null. Use <code>GetApplicationRevision</code> and
    ///                 the <code>sha256</code> property of the returned <code>appSpecContent</code> object
    ///                 to get the content of the deployment’s AppSpec file. </p>
    ///         </note>
    func getDeployment(input: GetDeploymentInput, completion: @escaping (SdkResult<GetDeploymentOutputResponse, GetDeploymentOutputError>) -> Void)
    /// <p>Gets information about a deployment configuration.</p>
    func getDeploymentConfig(input: GetDeploymentConfigInput, completion: @escaping (SdkResult<GetDeploymentConfigOutputResponse, GetDeploymentConfigOutputError>) -> Void)
    /// <p>Gets information about a deployment group.</p>
    func getDeploymentGroup(input: GetDeploymentGroupInput, completion: @escaping (SdkResult<GetDeploymentGroupOutputResponse, GetDeploymentGroupOutputError>) -> Void)
    /// <p>Gets information about an instance as part of a deployment.</p>
    @available(*, deprecated, message: "This operation is deprecated, use GetDeploymentTarget instead.")
    func getDeploymentInstance(input: GetDeploymentInstanceInput, completion: @escaping (SdkResult<GetDeploymentInstanceOutputResponse, GetDeploymentInstanceOutputError>) -> Void)
    /// <p> Returns information about a deployment target. </p>
    func getDeploymentTarget(input: GetDeploymentTargetInput, completion: @escaping (SdkResult<GetDeploymentTargetOutputResponse, GetDeploymentTargetOutputError>) -> Void)
    /// <p> Gets information about an on-premises instance. </p>
    func getOnPremisesInstance(input: GetOnPremisesInstanceInput, completion: @escaping (SdkResult<GetOnPremisesInstanceOutputResponse, GetOnPremisesInstanceOutputError>) -> Void)
    /// <p>Lists information about revisions for an application.</p>
    func listApplicationRevisions(input: ListApplicationRevisionsInput, completion: @escaping (SdkResult<ListApplicationRevisionsOutputResponse, ListApplicationRevisionsOutputError>) -> Void)
    /// <p>Lists the applications registered with the IAM user or AWS account.</p>
    func listApplications(input: ListApplicationsInput, completion: @escaping (SdkResult<ListApplicationsOutputResponse, ListApplicationsOutputError>) -> Void)
    /// <p>Lists the deployment configurations with the IAM user or AWS account.</p>
    func listDeploymentConfigs(input: ListDeploymentConfigsInput, completion: @escaping (SdkResult<ListDeploymentConfigsOutputResponse, ListDeploymentConfigsOutputError>) -> Void)
    /// <p>Lists the deployment groups for an application registered with the IAM user or AWS
    ///             account.</p>
    func listDeploymentGroups(input: ListDeploymentGroupsInput, completion: @escaping (SdkResult<ListDeploymentGroupsOutputResponse, ListDeploymentGroupsOutputError>) -> Void)
    /// <note>
    ///             <p> The newer <code>BatchGetDeploymentTargets</code> should be used instead because
    ///                 it works with all compute types. <code>ListDeploymentInstances</code> throws an
    ///                 exception if it is used with a compute platform other than EC2/On-premises or AWS
    ///                 Lambda. </p>
    ///         </note>
    ///         <p> Lists the instance for a deployment associated with the IAM user or AWS account. </p>
    @available(*, deprecated, message: "This operation is deprecated, use ListDeploymentTargets instead.")
    func listDeploymentInstances(input: ListDeploymentInstancesInput, completion: @escaping (SdkResult<ListDeploymentInstancesOutputResponse, ListDeploymentInstancesOutputError>) -> Void)
    /// <p>Lists the deployments in a deployment group for an application registered with the IAM
    ///             user or AWS account.</p>
    func listDeployments(input: ListDeploymentsInput, completion: @escaping (SdkResult<ListDeploymentsOutputResponse, ListDeploymentsOutputError>) -> Void)
    /// <p> Returns an array of target IDs that are associated a deployment. </p>
    func listDeploymentTargets(input: ListDeploymentTargetsInput, completion: @escaping (SdkResult<ListDeploymentTargetsOutputResponse, ListDeploymentTargetsOutputError>) -> Void)
    /// <p>Lists the names of stored connections to GitHub accounts.</p>
    func listGitHubAccountTokenNames(input: ListGitHubAccountTokenNamesInput, completion: @escaping (SdkResult<ListGitHubAccountTokenNamesOutputResponse, ListGitHubAccountTokenNamesOutputError>) -> Void)
    /// <p>Gets a list of names for one or more on-premises instances.</p>
    ///         <p>Unless otherwise specified, both registered and deregistered on-premises instance
    ///             names are listed. To list only registered or deregistered on-premises instance names,
    ///             use the registration status parameter.</p>
    func listOnPremisesInstances(input: ListOnPremisesInstancesInput, completion: @escaping (SdkResult<ListOnPremisesInstancesOutputResponse, ListOnPremisesInstancesOutputError>) -> Void)
    /// <p> Returns a list of tags for the resource identified by a specified Amazon Resource
    ///             Name (ARN). Tags are used to organize and categorize your CodeDeploy resources. </p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p> Sets the result of a Lambda validation function. The function validates lifecycle
    ///             hooks during a deployment that uses the AWS Lambda or Amazon ECS compute platform. For
    ///             AWS Lambda deployments, the available lifecycle hooks are
    ///                 <code>BeforeAllowTraffic</code> and <code>AfterAllowTraffic</code>. For Amazon ECS
    ///             deployments, the available lifecycle hooks are <code>BeforeInstall</code>,
    ///                 <code>AfterInstall</code>, <code>AfterAllowTestTraffic</code>,
    ///                 <code>BeforeAllowTraffic</code>, and <code>AfterAllowTraffic</code>. Lambda
    ///             validation functions return <code>Succeeded</code> or <code>Failed</code>. For more
    ///             information, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file-structure-hooks.html#appspec-hooks-lambda">AppSpec 'hooks' Section for an AWS Lambda Deployment </a> and <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file-structure-hooks.html#appspec-hooks-ecs">AppSpec 'hooks' Section for an Amazon ECS Deployment</a>.</p>
    func putLifecycleEventHookExecutionStatus(input: PutLifecycleEventHookExecutionStatusInput, completion: @escaping (SdkResult<PutLifecycleEventHookExecutionStatusOutputResponse, PutLifecycleEventHookExecutionStatusOutputError>) -> Void)
    /// <p>Registers with AWS CodeDeploy a revision for the specified application.</p>
    func registerApplicationRevision(input: RegisterApplicationRevisionInput, completion: @escaping (SdkResult<RegisterApplicationRevisionOutputResponse, RegisterApplicationRevisionOutputError>) -> Void)
    /// <p>Registers an on-premises instance.</p>
    ///         <note>
    ///             <p>Only one IAM ARN (an IAM session ARN or IAM user ARN) is supported in the request.
    ///                 You cannot use both.</p>
    ///         </note>
    func registerOnPremisesInstance(input: RegisterOnPremisesInstanceInput, completion: @escaping (SdkResult<RegisterOnPremisesInstanceOutputResponse, RegisterOnPremisesInstanceOutputError>) -> Void)
    /// <p>Removes one or more tags from one or more on-premises instances.</p>
    func removeTagsFromOnPremisesInstances(input: RemoveTagsFromOnPremisesInstancesInput, completion: @escaping (SdkResult<RemoveTagsFromOnPremisesInstancesOutputResponse, RemoveTagsFromOnPremisesInstancesOutputError>) -> Void)
    /// <p>In a blue/green deployment, overrides any specified wait time and starts terminating
    ///             instances immediately after the traffic routing is complete.</p>
    @available(*, deprecated, message: "This operation is deprecated, use ContinueDeployment with DeploymentWaitType instead.")
    func skipWaitTimeForInstanceTermination(input: SkipWaitTimeForInstanceTerminationInput, completion: @escaping (SdkResult<SkipWaitTimeForInstanceTerminationOutputResponse, SkipWaitTimeForInstanceTerminationOutputError>) -> Void)
    /// <p>Attempts to stop an ongoing deployment.</p>
    func stopDeployment(input: StopDeploymentInput, completion: @escaping (SdkResult<StopDeploymentOutputResponse, StopDeploymentOutputError>) -> Void)
    /// <p> Associates the list of tags in the input <code>Tags</code> parameter with the
    ///             resource identified by the <code>ResourceArn</code> input parameter. </p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p> Disassociates a resource from a list of tags. The resource is identified by the
    ///                 <code>ResourceArn</code> input parameter. The tags are identified by the list of
    ///             keys in the <code>TagKeys</code> input parameter. </p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// <p>Changes the name of an application.</p>
    func updateApplication(input: UpdateApplicationInput, completion: @escaping (SdkResult<UpdateApplicationOutputResponse, UpdateApplicationOutputError>) -> Void)
    /// <p>Changes information about a deployment group.</p>
    func updateDeploymentGroup(input: UpdateDeploymentGroupInput, completion: @escaping (SdkResult<UpdateDeploymentGroupOutputResponse, UpdateDeploymentGroupOutputError>) -> Void)
}
