// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OnPremisesTagSet: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case onPremisesTagSetList
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let onPremisesTagSetList = onPremisesTagSetList {
            var onPremisesTagSetListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .onPremisesTagSetList)
            for onpremisestagsetlist0 in onPremisesTagSetList {
                var onpremisestagsetlist0Container = onPremisesTagSetListContainer.nestedUnkeyedContainer()
                if let onpremisestagsetlist0 = onpremisestagsetlist0 {
                    for tagfilterlist1 in onpremisestagsetlist0 {
                        try onpremisestagsetlist0Container.encode(tagfilterlist1)
                    }
                }
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let onPremisesTagSetListContainer = try containerValues.decodeIfPresent([[TagFilter]?].self, forKey: .onPremisesTagSetList)
        var onPremisesTagSetListDecoded0:[[TagFilter]?]? = nil
        if let onPremisesTagSetListContainer = onPremisesTagSetListContainer {
            onPremisesTagSetListDecoded0 = [[TagFilter]?]()
            for list0 in onPremisesTagSetListContainer {
                var list0Decoded0 = [TagFilter]()
                if let list0 = list0 {
                    for structure1 in list0 {
                        list0Decoded0.append(structure1)
                    }
                }
                onPremisesTagSetListDecoded0?.append(list0Decoded0)
            }
        }
        onPremisesTagSetList = onPremisesTagSetListDecoded0
    }
}
