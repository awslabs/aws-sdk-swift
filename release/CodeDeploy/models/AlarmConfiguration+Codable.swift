// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AlarmConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alarms
        case enabled
        case ignorePollAlarmFailure
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarms = alarms {
            var alarmsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .alarms)
            for alarmlist0 in alarms {
                try alarmsContainer.encode(alarmlist0)
            }
        }
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if ignorePollAlarmFailure != false {
            try encodeContainer.encode(ignorePollAlarmFailure, forKey: .ignorePollAlarmFailure)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decode(Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let ignorePollAlarmFailureDecoded = try containerValues.decode(Bool.self, forKey: .ignorePollAlarmFailure)
        ignorePollAlarmFailure = ignorePollAlarmFailureDecoded
        let alarmsContainer = try containerValues.decodeIfPresent([Alarm].self, forKey: .alarms)
        var alarmsDecoded0:[Alarm]? = nil
        if let alarmsContainer = alarmsContainer {
            alarmsDecoded0 = [Alarm]()
            for structure0 in alarmsContainer {
                alarmsDecoded0?.append(structure0)
            }
        }
        alarms = alarmsDecoded0
    }
}
