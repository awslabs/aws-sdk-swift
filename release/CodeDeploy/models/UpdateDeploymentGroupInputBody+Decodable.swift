// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateDeploymentGroupInputBody: Equatable {
    public let applicationName: String?
    public let currentDeploymentGroupName: String?
    public let newDeploymentGroupName: String?
    public let deploymentConfigName: String?
    public let ec2TagFilters: [EC2TagFilter]?
    public let onPremisesInstanceTagFilters: [TagFilter]?
    public let autoScalingGroups: [String]?
    public let serviceRoleArn: String?
    public let triggerConfigurations: [TriggerConfig]?
    public let alarmConfiguration: AlarmConfiguration?
    public let autoRollbackConfiguration: AutoRollbackConfiguration?
    public let outdatedInstancesStrategy: OutdatedInstancesStrategy?
    public let deploymentStyle: DeploymentStyle?
    public let blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration?
    public let loadBalancerInfo: LoadBalancerInfo?
    public let ec2TagSet: EC2TagSet?
    public let ecsServices: [ECSService]?
    public let onPremisesTagSet: OnPremisesTagSet?
}

extension UpdateDeploymentGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case alarmConfiguration
        case applicationName
        case autoRollbackConfiguration
        case autoScalingGroups
        case blueGreenDeploymentConfiguration
        case currentDeploymentGroupName
        case deploymentConfigName
        case deploymentStyle
        case ec2TagFilters
        case ec2TagSet
        case ecsServices
        case loadBalancerInfo
        case newDeploymentGroupName
        case onPremisesInstanceTagFilters
        case onPremisesTagSet
        case outdatedInstancesStrategy
        case serviceRoleArn
        case triggerConfigurations
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let currentDeploymentGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .currentDeploymentGroupName)
        currentDeploymentGroupName = currentDeploymentGroupNameDecoded
        let newDeploymentGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .newDeploymentGroupName)
        newDeploymentGroupName = newDeploymentGroupNameDecoded
        let deploymentConfigNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentConfigName)
        deploymentConfigName = deploymentConfigNameDecoded
        let ec2TagFiltersContainer = try containerValues.decodeIfPresent([EC2TagFilter].self, forKey: .ec2TagFilters)
        var ec2TagFiltersDecoded0:[EC2TagFilter]? = nil
        if let ec2TagFiltersContainer = ec2TagFiltersContainer {
            ec2TagFiltersDecoded0 = [EC2TagFilter]()
            for structure0 in ec2TagFiltersContainer {
                ec2TagFiltersDecoded0?.append(structure0)
            }
        }
        ec2TagFilters = ec2TagFiltersDecoded0
        let onPremisesInstanceTagFiltersContainer = try containerValues.decodeIfPresent([TagFilter].self, forKey: .onPremisesInstanceTagFilters)
        var onPremisesInstanceTagFiltersDecoded0:[TagFilter]? = nil
        if let onPremisesInstanceTagFiltersContainer = onPremisesInstanceTagFiltersContainer {
            onPremisesInstanceTagFiltersDecoded0 = [TagFilter]()
            for structure0 in onPremisesInstanceTagFiltersContainer {
                onPremisesInstanceTagFiltersDecoded0?.append(structure0)
            }
        }
        onPremisesInstanceTagFilters = onPremisesInstanceTagFiltersDecoded0
        let autoScalingGroupsContainer = try containerValues.decodeIfPresent([String].self, forKey: .autoScalingGroups)
        var autoScalingGroupsDecoded0:[String]? = nil
        if let autoScalingGroupsContainer = autoScalingGroupsContainer {
            autoScalingGroupsDecoded0 = [String]()
            for string0 in autoScalingGroupsContainer {
                autoScalingGroupsDecoded0?.append(string0)
            }
        }
        autoScalingGroups = autoScalingGroupsDecoded0
        let serviceRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRoleArn)
        serviceRoleArn = serviceRoleArnDecoded
        let triggerConfigurationsContainer = try containerValues.decodeIfPresent([TriggerConfig].self, forKey: .triggerConfigurations)
        var triggerConfigurationsDecoded0:[TriggerConfig]? = nil
        if let triggerConfigurationsContainer = triggerConfigurationsContainer {
            triggerConfigurationsDecoded0 = [TriggerConfig]()
            for structure0 in triggerConfigurationsContainer {
                triggerConfigurationsDecoded0?.append(structure0)
            }
        }
        triggerConfigurations = triggerConfigurationsDecoded0
        let alarmConfigurationDecoded = try containerValues.decodeIfPresent(AlarmConfiguration.self, forKey: .alarmConfiguration)
        alarmConfiguration = alarmConfigurationDecoded
        let autoRollbackConfigurationDecoded = try containerValues.decodeIfPresent(AutoRollbackConfiguration.self, forKey: .autoRollbackConfiguration)
        autoRollbackConfiguration = autoRollbackConfigurationDecoded
        let outdatedInstancesStrategyDecoded = try containerValues.decodeIfPresent(OutdatedInstancesStrategy.self, forKey: .outdatedInstancesStrategy)
        outdatedInstancesStrategy = outdatedInstancesStrategyDecoded
        let deploymentStyleDecoded = try containerValues.decodeIfPresent(DeploymentStyle.self, forKey: .deploymentStyle)
        deploymentStyle = deploymentStyleDecoded
        let blueGreenDeploymentConfigurationDecoded = try containerValues.decodeIfPresent(BlueGreenDeploymentConfiguration.self, forKey: .blueGreenDeploymentConfiguration)
        blueGreenDeploymentConfiguration = blueGreenDeploymentConfigurationDecoded
        let loadBalancerInfoDecoded = try containerValues.decodeIfPresent(LoadBalancerInfo.self, forKey: .loadBalancerInfo)
        loadBalancerInfo = loadBalancerInfoDecoded
        let ec2TagSetDecoded = try containerValues.decodeIfPresent(EC2TagSet.self, forKey: .ec2TagSet)
        ec2TagSet = ec2TagSetDecoded
        let ecsServicesContainer = try containerValues.decodeIfPresent([ECSService].self, forKey: .ecsServices)
        var ecsServicesDecoded0:[ECSService]? = nil
        if let ecsServicesContainer = ecsServicesContainer {
            ecsServicesDecoded0 = [ECSService]()
            for structure0 in ecsServicesContainer {
                ecsServicesDecoded0?.append(structure0)
            }
        }
        ecsServices = ecsServicesDecoded0
        let onPremisesTagSetDecoded = try containerValues.decodeIfPresent(OnPremisesTagSet.self, forKey: .onPremisesTagSet)
        onPremisesTagSet = onPremisesTagSetDecoded
    }
}
