// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

public struct AddTagsToOnPremisesInstancesInputBodyMiddleware: Middleware {
    public let id: String = "AddTagsToOnPremisesInstancesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AddTagsToOnPremisesInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<AddTagsToOnPremisesInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AddTagsToOnPremisesInstancesInput>
    public typealias MOutput = OperationOutput<AddTagsToOnPremisesInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AddTagsToOnPremisesInstancesOutputError>
}

extension AddTagsToOnPremisesInstancesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AddTagsToOnPremisesInstancesInput(instanceNames: \(String(describing: instanceNames)), tags: \(String(describing: tags)))"}
}

extension AddTagsToOnPremisesInstancesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instanceNames
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceNames = instanceNames {
            var instanceNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceNames)
            for instancenamelist0 in instanceNames {
                try instanceNamesContainer.encode(instancenamelist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct AddTagsToOnPremisesInstancesInputHeadersMiddleware: Middleware {
    public let id: String = "AddTagsToOnPremisesInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AddTagsToOnPremisesInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<AddTagsToOnPremisesInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AddTagsToOnPremisesInstancesInput>
    public typealias MOutput = OperationOutput<AddTagsToOnPremisesInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AddTagsToOnPremisesInstancesOutputError>
}

public struct AddTagsToOnPremisesInstancesInputQueryItemMiddleware: Middleware {
    public let id: String = "AddTagsToOnPremisesInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AddTagsToOnPremisesInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<AddTagsToOnPremisesInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AddTagsToOnPremisesInstancesInput>
    public typealias MOutput = OperationOutput<AddTagsToOnPremisesInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AddTagsToOnPremisesInstancesOutputError>
}

/// <p>Represents the input of, and adds tags to, an on-premises instance operation.</p>
public struct AddTagsToOnPremisesInstancesInput: Equatable {
    /// <p>The names of the on-premises instances to which to add tags.</p>
    public let instanceNames: [String]?
    /// <p>The tag key-value pairs to add to the on-premises instances.</p>
    ///         <p>Keys and values are both required. Keys cannot be null or empty strings. Value-only
    ///             tags are not allowed.</p>
    public let tags: [Tag]?

    public init (
        instanceNames: [String]? = nil,
        tags: [Tag]? = nil
    )
    {
        self.instanceNames = instanceNames
        self.tags = tags
    }
}

struct AddTagsToOnPremisesInstancesInputBody: Equatable {
    public let tags: [Tag]?
    public let instanceNames: [String]?
}

extension AddTagsToOnPremisesInstancesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceNames
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let instanceNamesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .instanceNames)
        var instanceNamesDecoded0:[String]? = nil
        if let instanceNamesContainer = instanceNamesContainer {
            instanceNamesDecoded0 = [String]()
            for string0 in instanceNamesContainer {
                if let string0 = string0 {
                    instanceNamesDecoded0?.append(string0)
                }
            }
        }
        instanceNames = instanceNamesDecoded0
    }
}

extension AddTagsToOnPremisesInstancesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddTagsToOnPremisesInstancesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InstanceLimitExceededException" : self = .instanceLimitExceededException(try InstanceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceNameRequiredException" : self = .instanceNameRequiredException(try InstanceNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceNotRegisteredException" : self = .instanceNotRegisteredException(try InstanceNotRegisteredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceNameException" : self = .invalidInstanceNameException(try InvalidInstanceNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagException" : self = .invalidTagException(try InvalidTagException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagLimitExceededException" : self = .tagLimitExceededException(try TagLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagRequiredException" : self = .tagRequiredException(try TagRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AddTagsToOnPremisesInstancesOutputError: Equatable {
    case instanceLimitExceededException(InstanceLimitExceededException)
    case instanceNameRequiredException(InstanceNameRequiredException)
    case instanceNotRegisteredException(InstanceNotRegisteredException)
    case invalidInstanceNameException(InvalidInstanceNameException)
    case invalidTagException(InvalidTagException)
    case tagLimitExceededException(TagLimitExceededException)
    case tagRequiredException(TagRequiredException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddTagsToOnPremisesInstancesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AddTagsToOnPremisesInstancesOutputResponse()"}
}

extension AddTagsToOnPremisesInstancesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct AddTagsToOnPremisesInstancesOutputResponse: Equatable {

    public init() {}
}

struct AddTagsToOnPremisesInstancesOutputResponseBody: Equatable {
}

extension AddTagsToOnPremisesInstancesOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension Alarm: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
    }
}

extension Alarm: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Alarm(name: \(String(describing: name)))"}
}

/// <p>Information about an alarm.</p>
public struct Alarm: Equatable {
    /// <p>The name of the alarm. Maximum length is 255 characters. Each alarm name can be used
    ///             only once in a list of alarms.</p>
    public let name: String?

    public init (
        name: String? = nil
    )
    {
        self.name = name
    }
}

extension AlarmConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alarms
        case enabled
        case ignorePollAlarmFailure
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarms = alarms {
            var alarmsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .alarms)
            for alarmlist0 in alarms {
                try alarmsContainer.encode(alarmlist0)
            }
        }
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if ignorePollAlarmFailure != false {
            try encodeContainer.encode(ignorePollAlarmFailure, forKey: .ignorePollAlarmFailure)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decode(Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let ignorePollAlarmFailureDecoded = try containerValues.decode(Bool.self, forKey: .ignorePollAlarmFailure)
        ignorePollAlarmFailure = ignorePollAlarmFailureDecoded
        let alarmsContainer = try containerValues.decodeIfPresent([Alarm?].self, forKey: .alarms)
        var alarmsDecoded0:[Alarm]? = nil
        if let alarmsContainer = alarmsContainer {
            alarmsDecoded0 = [Alarm]()
            for structure0 in alarmsContainer {
                if let structure0 = structure0 {
                    alarmsDecoded0?.append(structure0)
                }
            }
        }
        alarms = alarmsDecoded0
    }
}

extension AlarmConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AlarmConfiguration(alarms: \(String(describing: alarms)), enabled: \(String(describing: enabled)), ignorePollAlarmFailure: \(String(describing: ignorePollAlarmFailure)))"}
}

/// <p>Information about alarms associated with the deployment group.</p>
public struct AlarmConfiguration: Equatable {
    /// <p>A list of alarms configured for the deployment group. A maximum of 10 alarms can be
    ///             added to a deployment group.</p>
    public let alarms: [Alarm]?
    /// <p>Indicates whether the alarm configuration is enabled.</p>
    public let enabled: Bool
    /// <p>Indicates whether a deployment should continue if information about the current state
    ///             of alarms cannot be retrieved from Amazon CloudWatch. The default value is false.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>true</code>: The deployment proceeds even if alarm status information
    ///                     can't be retrieved from Amazon CloudWatch.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>false</code>: The deployment stops if alarm status information can't be
    ///                     retrieved from Amazon CloudWatch.</p>
    ///             </li>
    ///          </ul>
    public let ignorePollAlarmFailure: Bool

    public init (
        alarms: [Alarm]? = nil,
        enabled: Bool = false,
        ignorePollAlarmFailure: Bool = false
    )
    {
        self.alarms = alarms
        self.enabled = enabled
        self.ignorePollAlarmFailure = ignorePollAlarmFailure
    }
}

extension AlarmsLimitExceededException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AlarmsLimitExceededException(message: \(String(describing: message)))"}
}

extension AlarmsLimitExceededException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: AlarmsLimitExceededExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The maximum number of alarms for a deployment group (10) was exceeded.</p>
public struct AlarmsLimitExceededException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct AlarmsLimitExceededExceptionBody: Equatable {
    public let message: String?
}

extension AlarmsLimitExceededExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AppSpecContent: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case content
        case sha256
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let sha256 = sha256 {
            try encodeContainer.encode(sha256, forKey: .sha256)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .content)
        content = contentDecoded
        let sha256Decoded = try containerValues.decodeIfPresent(String.self, forKey: .sha256)
        sha256 = sha256Decoded
    }
}

extension AppSpecContent: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AppSpecContent(content: \(String(describing: content)), sha256: \(String(describing: sha256)))"}
}

/// <p> A revision for an AWS Lambda or Amazon ECS deployment that is a YAML-formatted or
///             JSON-formatted string. For AWS Lambda and Amazon ECS deployments, the revision is the
///             same as the AppSpec file. This method replaces the deprecated <code>RawString</code>
///             data type. </p>
public struct AppSpecContent: Equatable {
    /// <p> The YAML-formatted or JSON-formatted revision string. </p>
    ///         <p> For an AWS Lambda deployment, the content includes a Lambda function name, the alias
    ///             for its original version, and the alias for its replacement version. The deployment
    ///             shifts traffic from the original version of the Lambda function to the replacement
    ///             version. </p>
    ///         <p> For an Amazon ECS deployment, the content includes the task name, information about
    ///             the load balancer that serves traffic to the container, and more. </p>
    ///         <p> For both types of deployments, the content can specify Lambda functions that run at
    ///             specified hooks, such as <code>BeforeInstall</code>, during a deployment. </p>
    public let content: String?
    /// <p> The SHA256 hash value of the revision content. </p>
    public let sha256: String?

    public init (
        content: String? = nil,
        sha256: String? = nil
    )
    {
        self.content = content
        self.sha256 = sha256
    }
}

extension ApplicationAlreadyExistsException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ApplicationAlreadyExistsException(message: \(String(describing: message)))"}
}

extension ApplicationAlreadyExistsException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ApplicationAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An application with the specified name with the IAM user or AWS account already
///             exists.</p>
public struct ApplicationAlreadyExistsException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ApplicationAlreadyExistsExceptionBody: Equatable {
    public let message: String?
}

extension ApplicationAlreadyExistsExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ApplicationDoesNotExistException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ApplicationDoesNotExistException(message: \(String(describing: message)))"}
}

extension ApplicationDoesNotExistException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ApplicationDoesNotExistExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The application does not exist with the IAM user or AWS account.</p>
public struct ApplicationDoesNotExistException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ApplicationDoesNotExistExceptionBody: Equatable {
    public let message: String?
}

extension ApplicationDoesNotExistExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ApplicationInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationId
        case applicationName
        case computePlatform
        case createTime
        case gitHubAccountName
        case linkedToGitHub
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let applicationName = applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let computePlatform = computePlatform {
            try encodeContainer.encode(computePlatform.rawValue, forKey: .computePlatform)
        }
        if let createTime = createTime {
            try encodeContainer.encode(createTime.timeIntervalSince1970, forKey: .createTime)
        }
        if let gitHubAccountName = gitHubAccountName {
            try encodeContainer.encode(gitHubAccountName, forKey: .gitHubAccountName)
        }
        if linkedToGitHub != false {
            try encodeContainer.encode(linkedToGitHub, forKey: .linkedToGitHub)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createTime)
        createTime = createTimeDecoded
        let linkedToGitHubDecoded = try containerValues.decode(Bool.self, forKey: .linkedToGitHub)
        linkedToGitHub = linkedToGitHubDecoded
        let gitHubAccountNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gitHubAccountName)
        gitHubAccountName = gitHubAccountNameDecoded
        let computePlatformDecoded = try containerValues.decodeIfPresent(ComputePlatform.self, forKey: .computePlatform)
        computePlatform = computePlatformDecoded
    }
}

extension ApplicationInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ApplicationInfo(applicationId: \(String(describing: applicationId)), applicationName: \(String(describing: applicationName)), computePlatform: \(String(describing: computePlatform)), createTime: \(String(describing: createTime)), gitHubAccountName: \(String(describing: gitHubAccountName)), linkedToGitHub: \(String(describing: linkedToGitHub)))"}
}

/// <p>Information about an application.</p>
public struct ApplicationInfo: Equatable {
    /// <p>The application ID.</p>
    public let applicationId: String?
    /// <p>The application name.</p>
    public let applicationName: String?
    /// <p>The destination platform type for deployment of the application (<code>Lambda</code>
    ///             or <code>Server</code>).</p>
    public let computePlatform: ComputePlatform?
    /// <p>The time at which the application was created.</p>
    public let createTime: Date?
    /// <p>The name for a connection to a GitHub account.</p>
    public let gitHubAccountName: String?
    /// <p>True if the user has authenticated with GitHub for the specified application.
    ///             Otherwise, false.</p>
    public let linkedToGitHub: Bool

    public init (
        applicationId: String? = nil,
        applicationName: String? = nil,
        computePlatform: ComputePlatform? = nil,
        createTime: Date? = nil,
        gitHubAccountName: String? = nil,
        linkedToGitHub: Bool = false
    )
    {
        self.applicationId = applicationId
        self.applicationName = applicationName
        self.computePlatform = computePlatform
        self.createTime = createTime
        self.gitHubAccountName = gitHubAccountName
        self.linkedToGitHub = linkedToGitHub
    }
}

extension ApplicationLimitExceededException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ApplicationLimitExceededException(message: \(String(describing: message)))"}
}

extension ApplicationLimitExceededException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ApplicationLimitExceededExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>More applications were attempted to be created than are allowed.</p>
public struct ApplicationLimitExceededException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ApplicationLimitExceededExceptionBody: Equatable {
    public let message: String?
}

extension ApplicationLimitExceededExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ApplicationNameRequiredException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ApplicationNameRequiredException(message: \(String(describing: message)))"}
}

extension ApplicationNameRequiredException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ApplicationNameRequiredExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The minimum number of required application names was not specified.</p>
public struct ApplicationNameRequiredException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ApplicationNameRequiredExceptionBody: Equatable {
    public let message: String?
}

extension ApplicationNameRequiredExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum ApplicationRevisionSortBy {
    case firstusedtime
    case lastusedtime
    case registertime
    case sdkUnknown(String)
}

extension ApplicationRevisionSortBy : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ApplicationRevisionSortBy] {
        return [
            .firstusedtime,
            .lastusedtime,
            .registertime,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .firstusedtime: return "firstUsedTime"
        case .lastusedtime: return "lastUsedTime"
        case .registertime: return "registerTime"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ApplicationRevisionSortBy(rawValue: rawValue) ?? ApplicationRevisionSortBy.sdkUnknown(rawValue)
    }
}

extension ArnNotSupportedException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ArnNotSupportedException(message: \(String(describing: message)))"}
}

extension ArnNotSupportedException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ArnNotSupportedExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p> The specified ARN is not supported. For example, it might be an ARN for a resource
///             that is not expected. </p>
public struct ArnNotSupportedException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ArnNotSupportedExceptionBody: Equatable {
    public let message: String?
}

extension ArnNotSupportedExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AutoRollbackConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case enabled
        case events
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let events = events {
            var eventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .events)
            for autorollbackeventslist0 in events {
                try eventsContainer.encode(autorollbackeventslist0.rawValue)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decode(Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let eventsContainer = try containerValues.decodeIfPresent([AutoRollbackEvent?].self, forKey: .events)
        var eventsDecoded0:[AutoRollbackEvent]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [AutoRollbackEvent]()
            for string0 in eventsContainer {
                if let string0 = string0 {
                    eventsDecoded0?.append(string0)
                }
            }
        }
        events = eventsDecoded0
    }
}

extension AutoRollbackConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AutoRollbackConfiguration(enabled: \(String(describing: enabled)), events: \(String(describing: events)))"}
}

/// <p>Information about a configuration for automatically rolling back to a previous version
///             of an application revision when a deployment is not completed successfully.</p>
public struct AutoRollbackConfiguration: Equatable {
    /// <p>Indicates whether a defined automatic rollback configuration is currently
    ///             enabled.</p>
    public let enabled: Bool
    /// <p>The event type or types that trigger a rollback.</p>
    public let events: [AutoRollbackEvent]?

    public init (
        enabled: Bool = false,
        events: [AutoRollbackEvent]? = nil
    )
    {
        self.enabled = enabled
        self.events = events
    }
}

public enum AutoRollbackEvent {
    case deploymentFailure
    case deploymentStopOnAlarm
    case deploymentStopOnRequest
    case sdkUnknown(String)
}

extension AutoRollbackEvent : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AutoRollbackEvent] {
        return [
            .deploymentFailure,
            .deploymentStopOnAlarm,
            .deploymentStopOnRequest,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .deploymentFailure: return "DEPLOYMENT_FAILURE"
        case .deploymentStopOnAlarm: return "DEPLOYMENT_STOP_ON_ALARM"
        case .deploymentStopOnRequest: return "DEPLOYMENT_STOP_ON_REQUEST"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AutoRollbackEvent(rawValue: rawValue) ?? AutoRollbackEvent.sdkUnknown(rawValue)
    }
}

extension AutoScalingGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case hook
        case name
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hook = hook {
            try encodeContainer.encode(hook, forKey: .hook)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let hookDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hook)
        hook = hookDecoded
    }
}

extension AutoScalingGroup: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AutoScalingGroup(hook: \(String(describing: hook)), name: \(String(describing: name)))"}
}

/// <p>Information about an Auto Scaling group.</p>
public struct AutoScalingGroup: Equatable {
    /// <p>An Auto Scaling lifecycle event hook name.</p>
    public let hook: String?
    /// <p>The Auto Scaling group name.</p>
    public let name: String?

    public init (
        hook: String? = nil,
        name: String? = nil
    )
    {
        self.hook = hook
        self.name = name
    }
}

public struct BatchGetApplicationRevisionsInputBodyMiddleware: Middleware {
    public let id: String = "BatchGetApplicationRevisionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetApplicationRevisionsInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetApplicationRevisionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetApplicationRevisionsInput>
    public typealias MOutput = OperationOutput<BatchGetApplicationRevisionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetApplicationRevisionsOutputError>
}

extension BatchGetApplicationRevisionsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchGetApplicationRevisionsInput(applicationName: \(String(describing: applicationName)), revisions: \(String(describing: revisions)))"}
}

extension BatchGetApplicationRevisionsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case revisions
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let revisions = revisions {
            var revisionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .revisions)
            for revisionlocationlist0 in revisions {
                try revisionsContainer.encode(revisionlocationlist0)
            }
        }
    }
}

public struct BatchGetApplicationRevisionsInputHeadersMiddleware: Middleware {
    public let id: String = "BatchGetApplicationRevisionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetApplicationRevisionsInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetApplicationRevisionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetApplicationRevisionsInput>
    public typealias MOutput = OperationOutput<BatchGetApplicationRevisionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetApplicationRevisionsOutputError>
}

public struct BatchGetApplicationRevisionsInputQueryItemMiddleware: Middleware {
    public let id: String = "BatchGetApplicationRevisionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetApplicationRevisionsInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetApplicationRevisionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetApplicationRevisionsInput>
    public typealias MOutput = OperationOutput<BatchGetApplicationRevisionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetApplicationRevisionsOutputError>
}

/// <p>Represents the input of a <code>BatchGetApplicationRevisions</code> operation.</p>
public struct BatchGetApplicationRevisionsInput: Equatable {
    /// <p>The name of an AWS CodeDeploy application about which to get revision
    ///             information.</p>
    public let applicationName: String?
    /// <p>An array of <code>RevisionLocation</code> objects that specify information to get
    ///             about the application revisions, including type and location. The maximum number of
    ///                 <code>RevisionLocation</code> objects you can specify is 25.</p>
    public let revisions: [RevisionLocation]?

    public init (
        applicationName: String? = nil,
        revisions: [RevisionLocation]? = nil
    )
    {
        self.applicationName = applicationName
        self.revisions = revisions
    }
}

struct BatchGetApplicationRevisionsInputBody: Equatable {
    public let applicationName: String?
    public let revisions: [RevisionLocation]?
}

extension BatchGetApplicationRevisionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case revisions
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let revisionsContainer = try containerValues.decodeIfPresent([RevisionLocation?].self, forKey: .revisions)
        var revisionsDecoded0:[RevisionLocation]? = nil
        if let revisionsContainer = revisionsContainer {
            revisionsDecoded0 = [RevisionLocation]()
            for structure0 in revisionsContainer {
                if let structure0 = structure0 {
                    revisionsDecoded0?.append(structure0)
                }
            }
        }
        revisions = revisionsDecoded0
    }
}

extension BatchGetApplicationRevisionsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetApplicationRevisionsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BatchLimitExceededException" : self = .batchLimitExceededException(try BatchLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRevisionException" : self = .invalidRevisionException(try InvalidRevisionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RevisionRequiredException" : self = .revisionRequiredException(try RevisionRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchGetApplicationRevisionsOutputError: Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case batchLimitExceededException(BatchLimitExceededException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidRevisionException(InvalidRevisionException)
    case revisionRequiredException(RevisionRequiredException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetApplicationRevisionsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchGetApplicationRevisionsOutputResponse(applicationName: \(String(describing: applicationName)), errorMessage: \(String(describing: errorMessage)), revisions: \(String(describing: revisions)))"}
}

extension BatchGetApplicationRevisionsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BatchGetApplicationRevisionsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.applicationName = output.applicationName
            self.errorMessage = output.errorMessage
            self.revisions = output.revisions
        } else {
            self.applicationName = nil
            self.errorMessage = nil
            self.revisions = nil
        }
    }
}

/// <p>Represents the output of a <code>BatchGetApplicationRevisions</code> operation.</p>
public struct BatchGetApplicationRevisionsOutputResponse: Equatable {
    /// <p>The name of the application that corresponds to the revisions.</p>
    public let applicationName: String?
    /// <p>Information about errors that might have occurred during the API call.</p>
    public let errorMessage: String?
    /// <p>Additional information about the revisions, including the type and location.</p>
    public let revisions: [RevisionInfo]?

    public init (
        applicationName: String? = nil,
        errorMessage: String? = nil,
        revisions: [RevisionInfo]? = nil
    )
    {
        self.applicationName = applicationName
        self.errorMessage = errorMessage
        self.revisions = revisions
    }
}

struct BatchGetApplicationRevisionsOutputResponseBody: Equatable {
    public let applicationName: String?
    public let errorMessage: String?
    public let revisions: [RevisionInfo]?
}

extension BatchGetApplicationRevisionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case errorMessage
        case revisions
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let revisionsContainer = try containerValues.decodeIfPresent([RevisionInfo?].self, forKey: .revisions)
        var revisionsDecoded0:[RevisionInfo]? = nil
        if let revisionsContainer = revisionsContainer {
            revisionsDecoded0 = [RevisionInfo]()
            for structure0 in revisionsContainer {
                if let structure0 = structure0 {
                    revisionsDecoded0?.append(structure0)
                }
            }
        }
        revisions = revisionsDecoded0
    }
}

public struct BatchGetApplicationsInputBodyMiddleware: Middleware {
    public let id: String = "BatchGetApplicationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetApplicationsInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetApplicationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetApplicationsInput>
    public typealias MOutput = OperationOutput<BatchGetApplicationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetApplicationsOutputError>
}

extension BatchGetApplicationsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchGetApplicationsInput(applicationNames: \(String(describing: applicationNames)))"}
}

extension BatchGetApplicationsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationNames
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationNames = applicationNames {
            var applicationNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .applicationNames)
            for applicationslist0 in applicationNames {
                try applicationNamesContainer.encode(applicationslist0)
            }
        }
    }
}

public struct BatchGetApplicationsInputHeadersMiddleware: Middleware {
    public let id: String = "BatchGetApplicationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetApplicationsInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetApplicationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetApplicationsInput>
    public typealias MOutput = OperationOutput<BatchGetApplicationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetApplicationsOutputError>
}

public struct BatchGetApplicationsInputQueryItemMiddleware: Middleware {
    public let id: String = "BatchGetApplicationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetApplicationsInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetApplicationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetApplicationsInput>
    public typealias MOutput = OperationOutput<BatchGetApplicationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetApplicationsOutputError>
}

/// <p>Represents the input of a <code>BatchGetApplications</code> operation.</p>
public struct BatchGetApplicationsInput: Equatable {
    /// <p>A list of application names separated by spaces. The maximum number of application
    ///             names you can specify is 100.</p>
    public let applicationNames: [String]?

    public init (
        applicationNames: [String]? = nil
    )
    {
        self.applicationNames = applicationNames
    }
}

struct BatchGetApplicationsInputBody: Equatable {
    public let applicationNames: [String]?
}

extension BatchGetApplicationsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationNames
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNamesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .applicationNames)
        var applicationNamesDecoded0:[String]? = nil
        if let applicationNamesContainer = applicationNamesContainer {
            applicationNamesDecoded0 = [String]()
            for string0 in applicationNamesContainer {
                if let string0 = string0 {
                    applicationNamesDecoded0?.append(string0)
                }
            }
        }
        applicationNames = applicationNamesDecoded0
    }
}

extension BatchGetApplicationsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetApplicationsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BatchLimitExceededException" : self = .batchLimitExceededException(try BatchLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchGetApplicationsOutputError: Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case batchLimitExceededException(BatchLimitExceededException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetApplicationsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchGetApplicationsOutputResponse(applicationsInfo: \(String(describing: applicationsInfo)))"}
}

extension BatchGetApplicationsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BatchGetApplicationsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.applicationsInfo = output.applicationsInfo
        } else {
            self.applicationsInfo = nil
        }
    }
}

/// <p>Represents the output of a <code>BatchGetApplications</code> operation.</p>
public struct BatchGetApplicationsOutputResponse: Equatable {
    /// <p>Information about the applications.</p>
    public let applicationsInfo: [ApplicationInfo]?

    public init (
        applicationsInfo: [ApplicationInfo]? = nil
    )
    {
        self.applicationsInfo = applicationsInfo
    }
}

struct BatchGetApplicationsOutputResponseBody: Equatable {
    public let applicationsInfo: [ApplicationInfo]?
}

extension BatchGetApplicationsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationsInfo
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationsInfoContainer = try containerValues.decodeIfPresent([ApplicationInfo?].self, forKey: .applicationsInfo)
        var applicationsInfoDecoded0:[ApplicationInfo]? = nil
        if let applicationsInfoContainer = applicationsInfoContainer {
            applicationsInfoDecoded0 = [ApplicationInfo]()
            for structure0 in applicationsInfoContainer {
                if let structure0 = structure0 {
                    applicationsInfoDecoded0?.append(structure0)
                }
            }
        }
        applicationsInfo = applicationsInfoDecoded0
    }
}

public struct BatchGetDeploymentGroupsInputBodyMiddleware: Middleware {
    public let id: String = "BatchGetDeploymentGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetDeploymentGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetDeploymentGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetDeploymentGroupsInput>
    public typealias MOutput = OperationOutput<BatchGetDeploymentGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetDeploymentGroupsOutputError>
}

extension BatchGetDeploymentGroupsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchGetDeploymentGroupsInput(applicationName: \(String(describing: applicationName)), deploymentGroupNames: \(String(describing: deploymentGroupNames)))"}
}

extension BatchGetDeploymentGroupsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case deploymentGroupNames
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let deploymentGroupNames = deploymentGroupNames {
            var deploymentGroupNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deploymentGroupNames)
            for deploymentgroupslist0 in deploymentGroupNames {
                try deploymentGroupNamesContainer.encode(deploymentgroupslist0)
            }
        }
    }
}

public struct BatchGetDeploymentGroupsInputHeadersMiddleware: Middleware {
    public let id: String = "BatchGetDeploymentGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetDeploymentGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetDeploymentGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetDeploymentGroupsInput>
    public typealias MOutput = OperationOutput<BatchGetDeploymentGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetDeploymentGroupsOutputError>
}

public struct BatchGetDeploymentGroupsInputQueryItemMiddleware: Middleware {
    public let id: String = "BatchGetDeploymentGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetDeploymentGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetDeploymentGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetDeploymentGroupsInput>
    public typealias MOutput = OperationOutput<BatchGetDeploymentGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetDeploymentGroupsOutputError>
}

/// <p>Represents the input of a <code>BatchGetDeploymentGroups</code> operation.</p>
public struct BatchGetDeploymentGroupsInput: Equatable {
    /// <p>The name of an AWS CodeDeploy application associated with the applicable IAM user or
    ///             AWS account.</p>
    public let applicationName: String?
    /// <p>The names of the deployment groups.</p>
    public let deploymentGroupNames: [String]?

    public init (
        applicationName: String? = nil,
        deploymentGroupNames: [String]? = nil
    )
    {
        self.applicationName = applicationName
        self.deploymentGroupNames = deploymentGroupNames
    }
}

struct BatchGetDeploymentGroupsInputBody: Equatable {
    public let applicationName: String?
    public let deploymentGroupNames: [String]?
}

extension BatchGetDeploymentGroupsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case deploymentGroupNames
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let deploymentGroupNamesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .deploymentGroupNames)
        var deploymentGroupNamesDecoded0:[String]? = nil
        if let deploymentGroupNamesContainer = deploymentGroupNamesContainer {
            deploymentGroupNamesDecoded0 = [String]()
            for string0 in deploymentGroupNamesContainer {
                if let string0 = string0 {
                    deploymentGroupNamesDecoded0?.append(string0)
                }
            }
        }
        deploymentGroupNames = deploymentGroupNamesDecoded0
    }
}

extension BatchGetDeploymentGroupsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetDeploymentGroupsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BatchLimitExceededException" : self = .batchLimitExceededException(try BatchLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentConfigDoesNotExistException" : self = .deploymentConfigDoesNotExistException(try DeploymentConfigDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupNameRequiredException" : self = .deploymentGroupNameRequiredException(try DeploymentGroupNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentGroupNameException" : self = .invalidDeploymentGroupNameException(try InvalidDeploymentGroupNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchGetDeploymentGroupsOutputError: Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case batchLimitExceededException(BatchLimitExceededException)
    case deploymentConfigDoesNotExistException(DeploymentConfigDoesNotExistException)
    case deploymentGroupNameRequiredException(DeploymentGroupNameRequiredException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidDeploymentGroupNameException(InvalidDeploymentGroupNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetDeploymentGroupsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchGetDeploymentGroupsOutputResponse(deploymentGroupsInfo: \(String(describing: deploymentGroupsInfo)), errorMessage: \(String(describing: errorMessage)))"}
}

extension BatchGetDeploymentGroupsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BatchGetDeploymentGroupsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.deploymentGroupsInfo = output.deploymentGroupsInfo
            self.errorMessage = output.errorMessage
        } else {
            self.deploymentGroupsInfo = nil
            self.errorMessage = nil
        }
    }
}

/// <p>Represents the output of a <code>BatchGetDeploymentGroups</code> operation.</p>
public struct BatchGetDeploymentGroupsOutputResponse: Equatable {
    /// <p>Information about the deployment groups.</p>
    public let deploymentGroupsInfo: [DeploymentGroupInfo]?
    /// <p>Information about errors that might have occurred during the API call.</p>
    public let errorMessage: String?

    public init (
        deploymentGroupsInfo: [DeploymentGroupInfo]? = nil,
        errorMessage: String? = nil
    )
    {
        self.deploymentGroupsInfo = deploymentGroupsInfo
        self.errorMessage = errorMessage
    }
}

struct BatchGetDeploymentGroupsOutputResponseBody: Equatable {
    public let deploymentGroupsInfo: [DeploymentGroupInfo]?
    public let errorMessage: String?
}

extension BatchGetDeploymentGroupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentGroupsInfo
        case errorMessage
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentGroupsInfoContainer = try containerValues.decodeIfPresent([DeploymentGroupInfo?].self, forKey: .deploymentGroupsInfo)
        var deploymentGroupsInfoDecoded0:[DeploymentGroupInfo]? = nil
        if let deploymentGroupsInfoContainer = deploymentGroupsInfoContainer {
            deploymentGroupsInfoDecoded0 = [DeploymentGroupInfo]()
            for structure0 in deploymentGroupsInfoContainer {
                if let structure0 = structure0 {
                    deploymentGroupsInfoDecoded0?.append(structure0)
                }
            }
        }
        deploymentGroupsInfo = deploymentGroupsInfoDecoded0
        let errorMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

public struct BatchGetDeploymentInstancesInputBodyMiddleware: Middleware {
    public let id: String = "BatchGetDeploymentInstancesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetDeploymentInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetDeploymentInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetDeploymentInstancesInput>
    public typealias MOutput = OperationOutput<BatchGetDeploymentInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetDeploymentInstancesOutputError>
}

extension BatchGetDeploymentInstancesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchGetDeploymentInstancesInput(deploymentId: \(String(describing: deploymentId)), instanceIds: \(String(describing: instanceIds)))"}
}

extension BatchGetDeploymentInstancesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deploymentId
        case instanceIds
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let instanceIds = instanceIds {
            var instanceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceIds)
            for instanceslist0 in instanceIds {
                try instanceIdsContainer.encode(instanceslist0)
            }
        }
    }
}

public struct BatchGetDeploymentInstancesInputHeadersMiddleware: Middleware {
    public let id: String = "BatchGetDeploymentInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetDeploymentInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetDeploymentInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetDeploymentInstancesInput>
    public typealias MOutput = OperationOutput<BatchGetDeploymentInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetDeploymentInstancesOutputError>
}

public struct BatchGetDeploymentInstancesInputQueryItemMiddleware: Middleware {
    public let id: String = "BatchGetDeploymentInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetDeploymentInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetDeploymentInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetDeploymentInstancesInput>
    public typealias MOutput = OperationOutput<BatchGetDeploymentInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetDeploymentInstancesOutputError>
}

/// <p> Represents the input of a <code>BatchGetDeploymentInstances</code> operation. </p>
public struct BatchGetDeploymentInstancesInput: Equatable {
    /// <p> The unique ID of a deployment. </p>
    public let deploymentId: String?
    /// <p>The unique IDs of instances used in the deployment. The maximum number of instance IDs
    ///             you can specify is 25.</p>
    public let instanceIds: [String]?

    public init (
        deploymentId: String? = nil,
        instanceIds: [String]? = nil
    )
    {
        self.deploymentId = deploymentId
        self.instanceIds = instanceIds
    }
}

struct BatchGetDeploymentInstancesInputBody: Equatable {
    public let deploymentId: String?
    public let instanceIds: [String]?
}

extension BatchGetDeploymentInstancesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentId
        case instanceIds
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let instanceIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .instanceIds)
        var instanceIdsDecoded0:[String]? = nil
        if let instanceIdsContainer = instanceIdsContainer {
            instanceIdsDecoded0 = [String]()
            for string0 in instanceIdsContainer {
                if let string0 = string0 {
                    instanceIdsDecoded0?.append(string0)
                }
            }
        }
        instanceIds = instanceIdsDecoded0
    }
}

extension BatchGetDeploymentInstancesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetDeploymentInstancesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BatchLimitExceededException" : self = .batchLimitExceededException(try BatchLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentDoesNotExistException" : self = .deploymentDoesNotExistException(try DeploymentDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceIdRequiredException" : self = .instanceIdRequiredException(try InstanceIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidComputePlatformException" : self = .invalidComputePlatformException(try InvalidComputePlatformException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceNameException" : self = .invalidInstanceNameException(try InvalidInstanceNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchGetDeploymentInstancesOutputError: Equatable {
    case batchLimitExceededException(BatchLimitExceededException)
    case deploymentDoesNotExistException(DeploymentDoesNotExistException)
    case deploymentIdRequiredException(DeploymentIdRequiredException)
    case instanceIdRequiredException(InstanceIdRequiredException)
    case invalidComputePlatformException(InvalidComputePlatformException)
    case invalidDeploymentIdException(InvalidDeploymentIdException)
    case invalidInstanceNameException(InvalidInstanceNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetDeploymentInstancesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchGetDeploymentInstancesOutputResponse(errorMessage: \(String(describing: errorMessage)), instancesSummary: \(String(describing: instancesSummary)))"}
}

extension BatchGetDeploymentInstancesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BatchGetDeploymentInstancesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.errorMessage = output.errorMessage
            self.instancesSummary = output.instancesSummary
        } else {
            self.errorMessage = nil
            self.instancesSummary = nil
        }
    }
}

/// <p>Represents the output of a <code>BatchGetDeploymentInstances</code> operation.</p>
public struct BatchGetDeploymentInstancesOutputResponse: Equatable {
    /// <p>Information about errors that might have occurred during the API call.</p>
    public let errorMessage: String?
    /// <p>Information about the instance.</p>
    public let instancesSummary: [InstanceSummary]?

    public init (
        errorMessage: String? = nil,
        instancesSummary: [InstanceSummary]? = nil
    )
    {
        self.errorMessage = errorMessage
        self.instancesSummary = instancesSummary
    }
}

struct BatchGetDeploymentInstancesOutputResponseBody: Equatable {
    public let instancesSummary: [InstanceSummary]?
    public let errorMessage: String?
}

extension BatchGetDeploymentInstancesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case errorMessage
        case instancesSummary
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instancesSummaryContainer = try containerValues.decodeIfPresent([InstanceSummary?].self, forKey: .instancesSummary)
        var instancesSummaryDecoded0:[InstanceSummary]? = nil
        if let instancesSummaryContainer = instancesSummaryContainer {
            instancesSummaryDecoded0 = [InstanceSummary]()
            for structure0 in instancesSummaryContainer {
                if let structure0 = structure0 {
                    instancesSummaryDecoded0?.append(structure0)
                }
            }
        }
        instancesSummary = instancesSummaryDecoded0
        let errorMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

public struct BatchGetDeploymentTargetsInputBodyMiddleware: Middleware {
    public let id: String = "BatchGetDeploymentTargetsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetDeploymentTargetsInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetDeploymentTargetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetDeploymentTargetsInput>
    public typealias MOutput = OperationOutput<BatchGetDeploymentTargetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetDeploymentTargetsOutputError>
}

extension BatchGetDeploymentTargetsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchGetDeploymentTargetsInput(deploymentId: \(String(describing: deploymentId)), targetIds: \(String(describing: targetIds)))"}
}

extension BatchGetDeploymentTargetsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deploymentId
        case targetIds
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let targetIds = targetIds {
            var targetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetIds)
            for targetidlist0 in targetIds {
                try targetIdsContainer.encode(targetidlist0)
            }
        }
    }
}

public struct BatchGetDeploymentTargetsInputHeadersMiddleware: Middleware {
    public let id: String = "BatchGetDeploymentTargetsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetDeploymentTargetsInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetDeploymentTargetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetDeploymentTargetsInput>
    public typealias MOutput = OperationOutput<BatchGetDeploymentTargetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetDeploymentTargetsOutputError>
}

public struct BatchGetDeploymentTargetsInputQueryItemMiddleware: Middleware {
    public let id: String = "BatchGetDeploymentTargetsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetDeploymentTargetsInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetDeploymentTargetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetDeploymentTargetsInput>
    public typealias MOutput = OperationOutput<BatchGetDeploymentTargetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetDeploymentTargetsOutputError>
}

public struct BatchGetDeploymentTargetsInput: Equatable {
    /// <p> The unique ID of a deployment. </p>
    public let deploymentId: String?
    /// <p> The unique IDs of the deployment targets. The compute platform of the deployment
    ///             determines the type of the targets and their formats. The maximum number of deployment
    ///             target IDs you can specify is 25.</p>
    ///         <ul>
    ///             <li>
    ///                 <p> For deployments that use the EC2/On-premises compute platform, the target IDs
    ///                     are EC2 or on-premises instances IDs, and their target type is
    ///                         <code>instanceTarget</code>. </p>
    ///             </li>
    ///             <li>
    ///                 <p> For deployments that use the AWS Lambda compute platform, the target IDs are
    ///                     the names of Lambda functions, and their target type is
    ///                         <code>instanceTarget</code>. </p>
    ///             </li>
    ///             <li>
    ///                 <p> For deployments that use the Amazon ECS compute platform, the target IDs are
    ///                     pairs of Amazon ECS clusters and services specified using the format
    ///                         <code><clustername>:<servicename></code>. Their target type is
    ///                         <code>ecsTarget</code>. </p>
    ///             </li>
    ///             <li>
    ///                 <p> For deployments that are deployed with AWS CloudFormation, the target IDs are
    ///                     CloudFormation stack IDs. Their target type is
    ///                     <code>cloudFormationTarget</code>. </p>
    ///             </li>
    ///          </ul>
    public let targetIds: [String]?

    public init (
        deploymentId: String? = nil,
        targetIds: [String]? = nil
    )
    {
        self.deploymentId = deploymentId
        self.targetIds = targetIds
    }
}

struct BatchGetDeploymentTargetsInputBody: Equatable {
    public let deploymentId: String?
    public let targetIds: [String]?
}

extension BatchGetDeploymentTargetsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentId
        case targetIds
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let targetIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .targetIds)
        var targetIdsDecoded0:[String]? = nil
        if let targetIdsContainer = targetIdsContainer {
            targetIdsDecoded0 = [String]()
            for string0 in targetIdsContainer {
                if let string0 = string0 {
                    targetIdsDecoded0?.append(string0)
                }
            }
        }
        targetIds = targetIdsDecoded0
    }
}

extension BatchGetDeploymentTargetsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetDeploymentTargetsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "DeploymentDoesNotExistException" : self = .deploymentDoesNotExistException(try DeploymentDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentNotStartedException" : self = .deploymentNotStartedException(try DeploymentNotStartedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentTargetDoesNotExistException" : self = .deploymentTargetDoesNotExistException(try DeploymentTargetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentTargetIdRequiredException" : self = .deploymentTargetIdRequiredException(try DeploymentTargetIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentTargetListSizeExceededException" : self = .deploymentTargetListSizeExceededException(try DeploymentTargetListSizeExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceDoesNotExistException" : self = .instanceDoesNotExistException(try InstanceDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentTargetIdException" : self = .invalidDeploymentTargetIdException(try InvalidDeploymentTargetIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchGetDeploymentTargetsOutputError: Equatable {
    case deploymentDoesNotExistException(DeploymentDoesNotExistException)
    case deploymentIdRequiredException(DeploymentIdRequiredException)
    case deploymentNotStartedException(DeploymentNotStartedException)
    case deploymentTargetDoesNotExistException(DeploymentTargetDoesNotExistException)
    case deploymentTargetIdRequiredException(DeploymentTargetIdRequiredException)
    case deploymentTargetListSizeExceededException(DeploymentTargetListSizeExceededException)
    case instanceDoesNotExistException(InstanceDoesNotExistException)
    case invalidDeploymentIdException(InvalidDeploymentIdException)
    case invalidDeploymentTargetIdException(InvalidDeploymentTargetIdException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetDeploymentTargetsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchGetDeploymentTargetsOutputResponse(deploymentTargets: \(String(describing: deploymentTargets)))"}
}

extension BatchGetDeploymentTargetsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BatchGetDeploymentTargetsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.deploymentTargets = output.deploymentTargets
        } else {
            self.deploymentTargets = nil
        }
    }
}

public struct BatchGetDeploymentTargetsOutputResponse: Equatable {
    /// <p> A list of target objects for a deployment. Each target object contains details about
    ///             the target, such as its status and lifecycle events. The type of the target objects
    ///             depends on the deployment' compute platform. </p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <b>EC2/On-premises</b>: Each target object is an EC2
    ///                     or on-premises instance. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>AWS Lambda</b>: The target object is a specific
    ///                     version of an AWS Lambda function. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>Amazon ECS</b>: The target object is an Amazon ECS
    ///                     service. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <b>CloudFormation</b>: The target object is an AWS
    ///                     CloudFormation blue/green deployment. </p>
    ///             </li>
    ///          </ul>
    public let deploymentTargets: [DeploymentTarget]?

    public init (
        deploymentTargets: [DeploymentTarget]? = nil
    )
    {
        self.deploymentTargets = deploymentTargets
    }
}

struct BatchGetDeploymentTargetsOutputResponseBody: Equatable {
    public let deploymentTargets: [DeploymentTarget]?
}

extension BatchGetDeploymentTargetsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentTargets
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentTargetsContainer = try containerValues.decodeIfPresent([DeploymentTarget?].self, forKey: .deploymentTargets)
        var deploymentTargetsDecoded0:[DeploymentTarget]? = nil
        if let deploymentTargetsContainer = deploymentTargetsContainer {
            deploymentTargetsDecoded0 = [DeploymentTarget]()
            for structure0 in deploymentTargetsContainer {
                if let structure0 = structure0 {
                    deploymentTargetsDecoded0?.append(structure0)
                }
            }
        }
        deploymentTargets = deploymentTargetsDecoded0
    }
}

public struct BatchGetDeploymentsInputBodyMiddleware: Middleware {
    public let id: String = "BatchGetDeploymentsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetDeploymentsInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetDeploymentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetDeploymentsInput>
    public typealias MOutput = OperationOutput<BatchGetDeploymentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetDeploymentsOutputError>
}

extension BatchGetDeploymentsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchGetDeploymentsInput(deploymentIds: \(String(describing: deploymentIds)))"}
}

extension BatchGetDeploymentsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deploymentIds
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentIds = deploymentIds {
            var deploymentIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deploymentIds)
            for deploymentslist0 in deploymentIds {
                try deploymentIdsContainer.encode(deploymentslist0)
            }
        }
    }
}

public struct BatchGetDeploymentsInputHeadersMiddleware: Middleware {
    public let id: String = "BatchGetDeploymentsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetDeploymentsInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetDeploymentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetDeploymentsInput>
    public typealias MOutput = OperationOutput<BatchGetDeploymentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetDeploymentsOutputError>
}

public struct BatchGetDeploymentsInputQueryItemMiddleware: Middleware {
    public let id: String = "BatchGetDeploymentsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetDeploymentsInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetDeploymentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetDeploymentsInput>
    public typealias MOutput = OperationOutput<BatchGetDeploymentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetDeploymentsOutputError>
}

/// <p> Represents the input of a <code>BatchGetDeployments</code> operation. </p>
public struct BatchGetDeploymentsInput: Equatable {
    /// <p> A list of deployment IDs, separated by spaces. The maximum number of deployment IDs
    ///             you can specify is 25.</p>
    public let deploymentIds: [String]?

    public init (
        deploymentIds: [String]? = nil
    )
    {
        self.deploymentIds = deploymentIds
    }
}

struct BatchGetDeploymentsInputBody: Equatable {
    public let deploymentIds: [String]?
}

extension BatchGetDeploymentsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentIds
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .deploymentIds)
        var deploymentIdsDecoded0:[String]? = nil
        if let deploymentIdsContainer = deploymentIdsContainer {
            deploymentIdsDecoded0 = [String]()
            for string0 in deploymentIdsContainer {
                if let string0 = string0 {
                    deploymentIdsDecoded0?.append(string0)
                }
            }
        }
        deploymentIds = deploymentIdsDecoded0
    }
}

extension BatchGetDeploymentsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetDeploymentsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BatchLimitExceededException" : self = .batchLimitExceededException(try BatchLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchGetDeploymentsOutputError: Equatable {
    case batchLimitExceededException(BatchLimitExceededException)
    case deploymentIdRequiredException(DeploymentIdRequiredException)
    case invalidDeploymentIdException(InvalidDeploymentIdException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetDeploymentsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchGetDeploymentsOutputResponse(deploymentsInfo: \(String(describing: deploymentsInfo)))"}
}

extension BatchGetDeploymentsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BatchGetDeploymentsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.deploymentsInfo = output.deploymentsInfo
        } else {
            self.deploymentsInfo = nil
        }
    }
}

/// <p> Represents the output of a <code>BatchGetDeployments</code> operation. </p>
public struct BatchGetDeploymentsOutputResponse: Equatable {
    /// <p> Information about the deployments. </p>
    public let deploymentsInfo: [DeploymentInfo]?

    public init (
        deploymentsInfo: [DeploymentInfo]? = nil
    )
    {
        self.deploymentsInfo = deploymentsInfo
    }
}

struct BatchGetDeploymentsOutputResponseBody: Equatable {
    public let deploymentsInfo: [DeploymentInfo]?
}

extension BatchGetDeploymentsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentsInfo
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentsInfoContainer = try containerValues.decodeIfPresent([DeploymentInfo?].self, forKey: .deploymentsInfo)
        var deploymentsInfoDecoded0:[DeploymentInfo]? = nil
        if let deploymentsInfoContainer = deploymentsInfoContainer {
            deploymentsInfoDecoded0 = [DeploymentInfo]()
            for structure0 in deploymentsInfoContainer {
                if let structure0 = structure0 {
                    deploymentsInfoDecoded0?.append(structure0)
                }
            }
        }
        deploymentsInfo = deploymentsInfoDecoded0
    }
}

public struct BatchGetOnPremisesInstancesInputBodyMiddleware: Middleware {
    public let id: String = "BatchGetOnPremisesInstancesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetOnPremisesInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetOnPremisesInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetOnPremisesInstancesInput>
    public typealias MOutput = OperationOutput<BatchGetOnPremisesInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetOnPremisesInstancesOutputError>
}

extension BatchGetOnPremisesInstancesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchGetOnPremisesInstancesInput(instanceNames: \(String(describing: instanceNames)))"}
}

extension BatchGetOnPremisesInstancesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instanceNames
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceNames = instanceNames {
            var instanceNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceNames)
            for instancenamelist0 in instanceNames {
                try instanceNamesContainer.encode(instancenamelist0)
            }
        }
    }
}

public struct BatchGetOnPremisesInstancesInputHeadersMiddleware: Middleware {
    public let id: String = "BatchGetOnPremisesInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetOnPremisesInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetOnPremisesInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetOnPremisesInstancesInput>
    public typealias MOutput = OperationOutput<BatchGetOnPremisesInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetOnPremisesInstancesOutputError>
}

public struct BatchGetOnPremisesInstancesInputQueryItemMiddleware: Middleware {
    public let id: String = "BatchGetOnPremisesInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchGetOnPremisesInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchGetOnPremisesInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchGetOnPremisesInstancesInput>
    public typealias MOutput = OperationOutput<BatchGetOnPremisesInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchGetOnPremisesInstancesOutputError>
}

/// <p>Represents the input of a <code>BatchGetOnPremisesInstances</code> operation.</p>
public struct BatchGetOnPremisesInstancesInput: Equatable {
    /// <p>The names of the on-premises instances about which to get information. The maximum
    ///             number of instance names you can specify is 25.</p>
    public let instanceNames: [String]?

    public init (
        instanceNames: [String]? = nil
    )
    {
        self.instanceNames = instanceNames
    }
}

struct BatchGetOnPremisesInstancesInputBody: Equatable {
    public let instanceNames: [String]?
}

extension BatchGetOnPremisesInstancesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceNames
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNamesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .instanceNames)
        var instanceNamesDecoded0:[String]? = nil
        if let instanceNamesContainer = instanceNamesContainer {
            instanceNamesDecoded0 = [String]()
            for string0 in instanceNamesContainer {
                if let string0 = string0 {
                    instanceNamesDecoded0?.append(string0)
                }
            }
        }
        instanceNames = instanceNamesDecoded0
    }
}

extension BatchGetOnPremisesInstancesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetOnPremisesInstancesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BatchLimitExceededException" : self = .batchLimitExceededException(try BatchLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceNameRequiredException" : self = .instanceNameRequiredException(try InstanceNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceNameException" : self = .invalidInstanceNameException(try InvalidInstanceNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchGetOnPremisesInstancesOutputError: Equatable {
    case batchLimitExceededException(BatchLimitExceededException)
    case instanceNameRequiredException(InstanceNameRequiredException)
    case invalidInstanceNameException(InvalidInstanceNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetOnPremisesInstancesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchGetOnPremisesInstancesOutputResponse(instanceInfos: \(String(describing: instanceInfos)))"}
}

extension BatchGetOnPremisesInstancesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BatchGetOnPremisesInstancesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.instanceInfos = output.instanceInfos
        } else {
            self.instanceInfos = nil
        }
    }
}

/// <p>Represents the output of a <code>BatchGetOnPremisesInstances</code> operation.</p>
public struct BatchGetOnPremisesInstancesOutputResponse: Equatable {
    /// <p>Information about the on-premises instances.</p>
    public let instanceInfos: [InstanceInfo]?

    public init (
        instanceInfos: [InstanceInfo]? = nil
    )
    {
        self.instanceInfos = instanceInfos
    }
}

struct BatchGetOnPremisesInstancesOutputResponseBody: Equatable {
    public let instanceInfos: [InstanceInfo]?
}

extension BatchGetOnPremisesInstancesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceInfos
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceInfosContainer = try containerValues.decodeIfPresent([InstanceInfo?].self, forKey: .instanceInfos)
        var instanceInfosDecoded0:[InstanceInfo]? = nil
        if let instanceInfosContainer = instanceInfosContainer {
            instanceInfosDecoded0 = [InstanceInfo]()
            for structure0 in instanceInfosContainer {
                if let structure0 = structure0 {
                    instanceInfosDecoded0?.append(structure0)
                }
            }
        }
        instanceInfos = instanceInfosDecoded0
    }
}

extension BatchLimitExceededException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BatchLimitExceededException(message: \(String(describing: message)))"}
}

extension BatchLimitExceededException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BatchLimitExceededExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The maximum number of names or IDs allowed for this request (100) was exceeded.</p>
public struct BatchLimitExceededException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct BatchLimitExceededExceptionBody: Equatable {
    public let message: String?
}

extension BatchLimitExceededExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension BlueGreenDeploymentConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deploymentReadyOption
        case greenFleetProvisioningOption
        case terminateBlueInstancesOnDeploymentSuccess
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentReadyOption = deploymentReadyOption {
            try encodeContainer.encode(deploymentReadyOption, forKey: .deploymentReadyOption)
        }
        if let greenFleetProvisioningOption = greenFleetProvisioningOption {
            try encodeContainer.encode(greenFleetProvisioningOption, forKey: .greenFleetProvisioningOption)
        }
        if let terminateBlueInstancesOnDeploymentSuccess = terminateBlueInstancesOnDeploymentSuccess {
            try encodeContainer.encode(terminateBlueInstancesOnDeploymentSuccess, forKey: .terminateBlueInstancesOnDeploymentSuccess)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let terminateBlueInstancesOnDeploymentSuccessDecoded = try containerValues.decodeIfPresent(BlueInstanceTerminationOption.self, forKey: .terminateBlueInstancesOnDeploymentSuccess)
        terminateBlueInstancesOnDeploymentSuccess = terminateBlueInstancesOnDeploymentSuccessDecoded
        let deploymentReadyOptionDecoded = try containerValues.decodeIfPresent(DeploymentReadyOption.self, forKey: .deploymentReadyOption)
        deploymentReadyOption = deploymentReadyOptionDecoded
        let greenFleetProvisioningOptionDecoded = try containerValues.decodeIfPresent(GreenFleetProvisioningOption.self, forKey: .greenFleetProvisioningOption)
        greenFleetProvisioningOption = greenFleetProvisioningOptionDecoded
    }
}

extension BlueGreenDeploymentConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BlueGreenDeploymentConfiguration(deploymentReadyOption: \(String(describing: deploymentReadyOption)), greenFleetProvisioningOption: \(String(describing: greenFleetProvisioningOption)), terminateBlueInstancesOnDeploymentSuccess: \(String(describing: terminateBlueInstancesOnDeploymentSuccess)))"}
}

/// <p>Information about blue/green deployment options for a deployment group.</p>
public struct BlueGreenDeploymentConfiguration: Equatable {
    /// <p>Information about the action to take when newly provisioned instances are ready to
    ///             receive traffic in a blue/green deployment.</p>
    public let deploymentReadyOption: DeploymentReadyOption?
    /// <p>Information about how instances are provisioned for a replacement environment in a
    ///             blue/green deployment.</p>
    public let greenFleetProvisioningOption: GreenFleetProvisioningOption?
    /// <p>Information about whether to terminate instances in the original fleet during a
    ///             blue/green deployment.</p>
    public let terminateBlueInstancesOnDeploymentSuccess: BlueInstanceTerminationOption?

    public init (
        deploymentReadyOption: DeploymentReadyOption? = nil,
        greenFleetProvisioningOption: GreenFleetProvisioningOption? = nil,
        terminateBlueInstancesOnDeploymentSuccess: BlueInstanceTerminationOption? = nil
    )
    {
        self.deploymentReadyOption = deploymentReadyOption
        self.greenFleetProvisioningOption = greenFleetProvisioningOption
        self.terminateBlueInstancesOnDeploymentSuccess = terminateBlueInstancesOnDeploymentSuccess
    }
}

extension BlueInstanceTerminationOption: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case action
        case terminationWaitTimeInMinutes
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if terminationWaitTimeInMinutes != 0 {
            try encodeContainer.encode(terminationWaitTimeInMinutes, forKey: .terminationWaitTimeInMinutes)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(InstanceAction.self, forKey: .action)
        action = actionDecoded
        let terminationWaitTimeInMinutesDecoded = try containerValues.decode(Int.self, forKey: .terminationWaitTimeInMinutes)
        terminationWaitTimeInMinutes = terminationWaitTimeInMinutesDecoded
    }
}

extension BlueInstanceTerminationOption: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BlueInstanceTerminationOption(action: \(String(describing: action)), terminationWaitTimeInMinutes: \(String(describing: terminationWaitTimeInMinutes)))"}
}

/// <p>Information about whether instances in the original environment are terminated when a
///             blue/green deployment is successful. <code>BlueInstanceTerminationOption</code> does not
///             apply to Lambda deployments. </p>
public struct BlueInstanceTerminationOption: Equatable {
    /// <p>The action to take on instances in the original environment after a successful
    ///             blue/green deployment.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>TERMINATE</code>: Instances are terminated after a specified wait
    ///                     time.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>KEEP_ALIVE</code>: Instances are left running after they are
    ///                     deregistered from the load balancer and removed from the deployment
    ///                     group.</p>
    ///             </li>
    ///          </ul>
    public let action: InstanceAction?
    /// <p>For an Amazon EC2 deployment, the number of minutes to wait after a successful
    ///             blue/green deployment before terminating instances from the original environment.</p>
    ///
    ///         <p> For an Amazon ECS deployment, the number of minutes before deleting the original
    ///             (blue) task set. During an Amazon ECS deployment, CodeDeploy shifts traffic from the
    ///             original (blue) task set to a replacement (green) task set. </p>
    ///
    ///         <p> The maximum setting is 2880 minutes (2 days). </p>
    public let terminationWaitTimeInMinutes: Int

    public init (
        action: InstanceAction? = nil,
        terminationWaitTimeInMinutes: Int = 0
    )
    {
        self.action = action
        self.terminationWaitTimeInMinutes = terminationWaitTimeInMinutes
    }
}

extension BucketNameFilterRequiredException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BucketNameFilterRequiredException(message: \(String(describing: message)))"}
}

extension BucketNameFilterRequiredException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: BucketNameFilterRequiredExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A bucket name is required, but was not provided.</p>
public struct BucketNameFilterRequiredException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct BucketNameFilterRequiredExceptionBody: Equatable {
    public let message: String?
}

extension BucketNameFilterRequiredExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum BundleType {
    case json
    case tar
    case targzip
    case yaml
    case zip
    case sdkUnknown(String)
}

extension BundleType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BundleType] {
        return [
            .json,
            .tar,
            .targzip,
            .yaml,
            .zip,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .json: return "JSON"
        case .tar: return "tar"
        case .targzip: return "tgz"
        case .yaml: return "YAML"
        case .zip: return "zip"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BundleType(rawValue: rawValue) ?? BundleType.sdkUnknown(rawValue)
    }
}

extension CloudFormationTarget: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deploymentId
        case lastUpdatedAt
        case lifecycleEvents
        case resourceType
        case status
        case targetId
        case targetVersionWeight
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let lifecycleEvents = lifecycleEvents {
            var lifecycleEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lifecycleEvents)
            for lifecycleeventlist0 in lifecycleEvents {
                try lifecycleEventsContainer.encode(lifecycleeventlist0)
            }
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetId = targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
        if targetVersionWeight != 0.0 {
            try encodeContainer.encode(targetVersionWeight, forKey: .targetVersionWeight)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetId)
        targetId = targetIdDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let lifecycleEventsContainer = try containerValues.decodeIfPresent([LifecycleEvent?].self, forKey: .lifecycleEvents)
        var lifecycleEventsDecoded0:[LifecycleEvent]? = nil
        if let lifecycleEventsContainer = lifecycleEventsContainer {
            lifecycleEventsDecoded0 = [LifecycleEvent]()
            for structure0 in lifecycleEventsContainer {
                if let structure0 = structure0 {
                    lifecycleEventsDecoded0?.append(structure0)
                }
            }
        }
        lifecycleEvents = lifecycleEventsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(TargetStatus.self, forKey: .status)
        status = statusDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let targetVersionWeightDecoded = try containerValues.decode(Double.self, forKey: .targetVersionWeight)
        targetVersionWeight = targetVersionWeightDecoded
    }
}

extension CloudFormationTarget: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CloudFormationTarget(deploymentId: \(String(describing: deploymentId)), lastUpdatedAt: \(String(describing: lastUpdatedAt)), lifecycleEvents: \(String(describing: lifecycleEvents)), resourceType: \(String(describing: resourceType)), status: \(String(describing: status)), targetId: \(String(describing: targetId)), targetVersionWeight: \(String(describing: targetVersionWeight)))"}
}

/// <p> Information about the target to be updated by an AWS CloudFormation blue/green
///             deployment. This target type is used for all deployments initiated by a CloudFormation
///             stack update.</p>
public struct CloudFormationTarget: Equatable {
    /// <p>The unique ID of an AWS CloudFormation blue/green deployment.</p>
    public let deploymentId: String?
    /// <p> The date and time when the target application was updated by an AWS CloudFormation
    ///             blue/green deployment. </p>
    public let lastUpdatedAt: Date?
    /// <p> The lifecycle events of the AWS CloudFormation blue/green deployment to this target
    ///             application. </p>
    public let lifecycleEvents: [LifecycleEvent]?
    /// <p>The resource type for the AWS CloudFormation blue/green deployment.</p>
    public let resourceType: String?
    /// <p> The status of an AWS CloudFormation blue/green deployment's target application.
    ///         </p>
    public let status: TargetStatus?
    /// <p> The unique ID of a deployment target that has a type
    ///                 of <code>CloudFormationTarget</code>. </p>
    public let targetId: String?
    /// <p>The percentage of production traffic that the target version of an AWS CloudFormation
    ///             blue/green deployment receives.</p>
    public let targetVersionWeight: Double

    public init (
        deploymentId: String? = nil,
        lastUpdatedAt: Date? = nil,
        lifecycleEvents: [LifecycleEvent]? = nil,
        resourceType: String? = nil,
        status: TargetStatus? = nil,
        targetId: String? = nil,
        targetVersionWeight: Double = 0.0
    )
    {
        self.deploymentId = deploymentId
        self.lastUpdatedAt = lastUpdatedAt
        self.lifecycleEvents = lifecycleEvents
        self.resourceType = resourceType
        self.status = status
        self.targetId = targetId
        self.targetVersionWeight = targetVersionWeight
    }
}

public enum ComputePlatform {
    case ecs
    case lambda
    case server
    case sdkUnknown(String)
}

extension ComputePlatform : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ComputePlatform] {
        return [
            .ecs,
            .lambda,
            .server,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .ecs: return "ECS"
        case .lambda: return "Lambda"
        case .server: return "Server"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ComputePlatform(rawValue: rawValue) ?? ComputePlatform.sdkUnknown(rawValue)
    }
}

public struct ContinueDeploymentInputBodyMiddleware: Middleware {
    public let id: String = "ContinueDeploymentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ContinueDeploymentInput>,
                  next: H) -> Swift.Result<OperationOutput<ContinueDeploymentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ContinueDeploymentInput>
    public typealias MOutput = OperationOutput<ContinueDeploymentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ContinueDeploymentOutputError>
}

extension ContinueDeploymentInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ContinueDeploymentInput(deploymentId: \(String(describing: deploymentId)), deploymentWaitType: \(String(describing: deploymentWaitType)))"}
}

extension ContinueDeploymentInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deploymentId
        case deploymentWaitType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let deploymentWaitType = deploymentWaitType {
            try encodeContainer.encode(deploymentWaitType.rawValue, forKey: .deploymentWaitType)
        }
    }
}

public struct ContinueDeploymentInputHeadersMiddleware: Middleware {
    public let id: String = "ContinueDeploymentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ContinueDeploymentInput>,
                  next: H) -> Swift.Result<OperationOutput<ContinueDeploymentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ContinueDeploymentInput>
    public typealias MOutput = OperationOutput<ContinueDeploymentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ContinueDeploymentOutputError>
}

public struct ContinueDeploymentInputQueryItemMiddleware: Middleware {
    public let id: String = "ContinueDeploymentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ContinueDeploymentInput>,
                  next: H) -> Swift.Result<OperationOutput<ContinueDeploymentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ContinueDeploymentInput>
    public typealias MOutput = OperationOutput<ContinueDeploymentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ContinueDeploymentOutputError>
}

public struct ContinueDeploymentInput: Equatable {
    /// <p> The unique ID of a blue/green deployment for which you want to start rerouting
    ///             traffic to the replacement environment. </p>
    public let deploymentId: String?
    /// <p> The status of the deployment's waiting period. <code>READY_WAIT</code> indicates that
    ///             the deployment is ready to start shifting traffic. <code>TERMINATION_WAIT</code>
    ///             indicates that the traffic is shifted, but the original target is not terminated.
    ///         </p>
    public let deploymentWaitType: DeploymentWaitType?

    public init (
        deploymentId: String? = nil,
        deploymentWaitType: DeploymentWaitType? = nil
    )
    {
        self.deploymentId = deploymentId
        self.deploymentWaitType = deploymentWaitType
    }
}

struct ContinueDeploymentInputBody: Equatable {
    public let deploymentId: String?
    public let deploymentWaitType: DeploymentWaitType?
}

extension ContinueDeploymentInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentId
        case deploymentWaitType
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let deploymentWaitTypeDecoded = try containerValues.decodeIfPresent(DeploymentWaitType.self, forKey: .deploymentWaitType)
        deploymentWaitType = deploymentWaitTypeDecoded
    }
}

extension ContinueDeploymentOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ContinueDeploymentOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "DeploymentAlreadyCompletedException" : self = .deploymentAlreadyCompletedException(try DeploymentAlreadyCompletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentDoesNotExistException" : self = .deploymentDoesNotExistException(try DeploymentDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIsNotInReadyStateException" : self = .deploymentIsNotInReadyStateException(try DeploymentIsNotInReadyStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentStatusException" : self = .invalidDeploymentStatusException(try InvalidDeploymentStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentWaitTypeException" : self = .invalidDeploymentWaitTypeException(try InvalidDeploymentWaitTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedActionForDeploymentTypeException" : self = .unsupportedActionForDeploymentTypeException(try UnsupportedActionForDeploymentTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ContinueDeploymentOutputError: Equatable {
    case deploymentAlreadyCompletedException(DeploymentAlreadyCompletedException)
    case deploymentDoesNotExistException(DeploymentDoesNotExistException)
    case deploymentIdRequiredException(DeploymentIdRequiredException)
    case deploymentIsNotInReadyStateException(DeploymentIsNotInReadyStateException)
    case invalidDeploymentIdException(InvalidDeploymentIdException)
    case invalidDeploymentStatusException(InvalidDeploymentStatusException)
    case invalidDeploymentWaitTypeException(InvalidDeploymentWaitTypeException)
    case unsupportedActionForDeploymentTypeException(UnsupportedActionForDeploymentTypeException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ContinueDeploymentOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ContinueDeploymentOutputResponse()"}
}

extension ContinueDeploymentOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct ContinueDeploymentOutputResponse: Equatable {

    public init() {}
}

struct ContinueDeploymentOutputResponseBody: Equatable {
}

extension ContinueDeploymentOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct CreateApplicationInputBodyMiddleware: Middleware {
    public let id: String = "CreateApplicationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateApplicationInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateApplicationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateApplicationInput>
    public typealias MOutput = OperationOutput<CreateApplicationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateApplicationOutputError>
}

extension CreateApplicationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateApplicationInput(applicationName: \(String(describing: applicationName)), computePlatform: \(String(describing: computePlatform)), tags: \(String(describing: tags)))"}
}

extension CreateApplicationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case computePlatform
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let computePlatform = computePlatform {
            try encodeContainer.encode(computePlatform.rawValue, forKey: .computePlatform)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateApplicationInputHeadersMiddleware: Middleware {
    public let id: String = "CreateApplicationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateApplicationInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateApplicationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateApplicationInput>
    public typealias MOutput = OperationOutput<CreateApplicationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateApplicationOutputError>
}

public struct CreateApplicationInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateApplicationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateApplicationInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateApplicationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateApplicationInput>
    public typealias MOutput = OperationOutput<CreateApplicationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateApplicationOutputError>
}

/// <p>Represents the input of a <code>CreateApplication</code> operation.</p>
public struct CreateApplicationInput: Equatable {
    /// <p>The name of the application. This name must be unique with the applicable IAM user or
    ///             AWS account.</p>
    public let applicationName: String?
    /// <p> The destination platform type for the deployment (<code>Lambda</code>,
    ///                 <code>Server</code>, or <code>ECS</code>).</p>
    public let computePlatform: ComputePlatform?
    /// <p> The metadata that you apply to CodeDeploy applications to help you organize and
    ///             categorize them. Each tag consists of a key and an optional value, both of which you
    ///             define. </p>
    public let tags: [Tag]?

    public init (
        applicationName: String? = nil,
        computePlatform: ComputePlatform? = nil,
        tags: [Tag]? = nil
    )
    {
        self.applicationName = applicationName
        self.computePlatform = computePlatform
        self.tags = tags
    }
}

struct CreateApplicationInputBody: Equatable {
    public let applicationName: String?
    public let computePlatform: ComputePlatform?
    public let tags: [Tag]?
}

extension CreateApplicationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case computePlatform
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let computePlatformDecoded = try containerValues.decodeIfPresent(ComputePlatform.self, forKey: .computePlatform)
        computePlatform = computePlatformDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateApplicationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateApplicationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ApplicationAlreadyExistsException" : self = .applicationAlreadyExistsException(try ApplicationAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationLimitExceededException" : self = .applicationLimitExceededException(try ApplicationLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidComputePlatformException" : self = .invalidComputePlatformException(try InvalidComputePlatformException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagsToAddException" : self = .invalidTagsToAddException(try InvalidTagsToAddException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateApplicationOutputError: Equatable {
    case applicationAlreadyExistsException(ApplicationAlreadyExistsException)
    case applicationLimitExceededException(ApplicationLimitExceededException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidComputePlatformException(InvalidComputePlatformException)
    case invalidTagsToAddException(InvalidTagsToAddException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateApplicationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateApplicationOutputResponse(applicationId: \(String(describing: applicationId)))"}
}

extension CreateApplicationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateApplicationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.applicationId = output.applicationId
        } else {
            self.applicationId = nil
        }
    }
}

/// <p>Represents the output of a <code>CreateApplication</code> operation.</p>
public struct CreateApplicationOutputResponse: Equatable {
    /// <p>A unique application ID.</p>
    public let applicationId: String?

    public init (
        applicationId: String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct CreateApplicationOutputResponseBody: Equatable {
    public let applicationId: String?
}

extension CreateApplicationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
    }
}

public struct CreateDeploymentConfigInputBodyMiddleware: Middleware {
    public let id: String = "CreateDeploymentConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateDeploymentConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateDeploymentConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateDeploymentConfigInput>
    public typealias MOutput = OperationOutput<CreateDeploymentConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateDeploymentConfigOutputError>
}

extension CreateDeploymentConfigInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateDeploymentConfigInput(computePlatform: \(String(describing: computePlatform)), deploymentConfigName: \(String(describing: deploymentConfigName)), minimumHealthyHosts: \(String(describing: minimumHealthyHosts)), trafficRoutingConfig: \(String(describing: trafficRoutingConfig)))"}
}

extension CreateDeploymentConfigInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case computePlatform
        case deploymentConfigName
        case minimumHealthyHosts
        case trafficRoutingConfig
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computePlatform = computePlatform {
            try encodeContainer.encode(computePlatform.rawValue, forKey: .computePlatform)
        }
        if let deploymentConfigName = deploymentConfigName {
            try encodeContainer.encode(deploymentConfigName, forKey: .deploymentConfigName)
        }
        if let minimumHealthyHosts = minimumHealthyHosts {
            try encodeContainer.encode(minimumHealthyHosts, forKey: .minimumHealthyHosts)
        }
        if let trafficRoutingConfig = trafficRoutingConfig {
            try encodeContainer.encode(trafficRoutingConfig, forKey: .trafficRoutingConfig)
        }
    }
}

public struct CreateDeploymentConfigInputHeadersMiddleware: Middleware {
    public let id: String = "CreateDeploymentConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateDeploymentConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateDeploymentConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateDeploymentConfigInput>
    public typealias MOutput = OperationOutput<CreateDeploymentConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateDeploymentConfigOutputError>
}

public struct CreateDeploymentConfigInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateDeploymentConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateDeploymentConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateDeploymentConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateDeploymentConfigInput>
    public typealias MOutput = OperationOutput<CreateDeploymentConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateDeploymentConfigOutputError>
}

/// <p>Represents the input of a <code>CreateDeploymentConfig</code> operation.</p>
public struct CreateDeploymentConfigInput: Equatable {
    /// <p>The destination platform type for the deployment (<code>Lambda</code>,
    ///                 <code>Server</code>, or <code>ECS</code>).</p>
    public let computePlatform: ComputePlatform?
    /// <p>The name of the deployment configuration to create.</p>
    public let deploymentConfigName: String?
    /// <p>The minimum number of healthy instances that should be available at any time during
    ///             the deployment. There are two parameters expected in the input: type and value.</p>
    ///         <p>The type parameter takes either of the following values:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>HOST_COUNT: The value parameter represents the minimum number of healthy
    ///                     instances as an absolute value.</p>
    ///             </li>
    ///             <li>
    ///                 <p>FLEET_PERCENT: The value parameter represents the minimum number of healthy
    ///                     instances as a percentage of the total number of instances in the deployment. If
    ///                     you specify FLEET_PERCENT, at the start of the deployment, AWS CodeDeploy
    ///                     converts the percentage to the equivalent number of instances and rounds up
    ///                     fractional instances.</p>
    ///             </li>
    ///          </ul>
    ///         <p>The value parameter takes an integer.</p>
    ///         <p>For example, to set a minimum of 95% healthy instance, specify a type of FLEET_PERCENT
    ///             and a value of 95.</p>
    public let minimumHealthyHosts: MinimumHealthyHosts?
    /// <p>The configuration that specifies how the deployment traffic is routed.</p>
    public let trafficRoutingConfig: TrafficRoutingConfig?

    public init (
        computePlatform: ComputePlatform? = nil,
        deploymentConfigName: String? = nil,
        minimumHealthyHosts: MinimumHealthyHosts? = nil,
        trafficRoutingConfig: TrafficRoutingConfig? = nil
    )
    {
        self.computePlatform = computePlatform
        self.deploymentConfigName = deploymentConfigName
        self.minimumHealthyHosts = minimumHealthyHosts
        self.trafficRoutingConfig = trafficRoutingConfig
    }
}

struct CreateDeploymentConfigInputBody: Equatable {
    public let deploymentConfigName: String?
    public let minimumHealthyHosts: MinimumHealthyHosts?
    public let trafficRoutingConfig: TrafficRoutingConfig?
    public let computePlatform: ComputePlatform?
}

extension CreateDeploymentConfigInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case computePlatform
        case deploymentConfigName
        case minimumHealthyHosts
        case trafficRoutingConfig
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentConfigNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentConfigName)
        deploymentConfigName = deploymentConfigNameDecoded
        let minimumHealthyHostsDecoded = try containerValues.decodeIfPresent(MinimumHealthyHosts.self, forKey: .minimumHealthyHosts)
        minimumHealthyHosts = minimumHealthyHostsDecoded
        let trafficRoutingConfigDecoded = try containerValues.decodeIfPresent(TrafficRoutingConfig.self, forKey: .trafficRoutingConfig)
        trafficRoutingConfig = trafficRoutingConfigDecoded
        let computePlatformDecoded = try containerValues.decodeIfPresent(ComputePlatform.self, forKey: .computePlatform)
        computePlatform = computePlatformDecoded
    }
}

extension CreateDeploymentConfigOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDeploymentConfigOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "DeploymentConfigAlreadyExistsException" : self = .deploymentConfigAlreadyExistsException(try DeploymentConfigAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentConfigLimitExceededException" : self = .deploymentConfigLimitExceededException(try DeploymentConfigLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentConfigNameRequiredException" : self = .deploymentConfigNameRequiredException(try DeploymentConfigNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidComputePlatformException" : self = .invalidComputePlatformException(try InvalidComputePlatformException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentConfigNameException" : self = .invalidDeploymentConfigNameException(try InvalidDeploymentConfigNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidMinimumHealthyHostValueException" : self = .invalidMinimumHealthyHostValueException(try InvalidMinimumHealthyHostValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTrafficRoutingConfigurationException" : self = .invalidTrafficRoutingConfigurationException(try InvalidTrafficRoutingConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDeploymentConfigOutputError: Equatable {
    case deploymentConfigAlreadyExistsException(DeploymentConfigAlreadyExistsException)
    case deploymentConfigLimitExceededException(DeploymentConfigLimitExceededException)
    case deploymentConfigNameRequiredException(DeploymentConfigNameRequiredException)
    case invalidComputePlatformException(InvalidComputePlatformException)
    case invalidDeploymentConfigNameException(InvalidDeploymentConfigNameException)
    case invalidMinimumHealthyHostValueException(InvalidMinimumHealthyHostValueException)
    case invalidTrafficRoutingConfigurationException(InvalidTrafficRoutingConfigurationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDeploymentConfigOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateDeploymentConfigOutputResponse(deploymentConfigId: \(String(describing: deploymentConfigId)))"}
}

extension CreateDeploymentConfigOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateDeploymentConfigOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.deploymentConfigId = output.deploymentConfigId
        } else {
            self.deploymentConfigId = nil
        }
    }
}

/// <p>Represents the output of a <code>CreateDeploymentConfig</code> operation.</p>
public struct CreateDeploymentConfigOutputResponse: Equatable {
    /// <p>A unique deployment configuration ID.</p>
    public let deploymentConfigId: String?

    public init (
        deploymentConfigId: String? = nil
    )
    {
        self.deploymentConfigId = deploymentConfigId
    }
}

struct CreateDeploymentConfigOutputResponseBody: Equatable {
    public let deploymentConfigId: String?
}

extension CreateDeploymentConfigOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentConfigId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentConfigIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentConfigId)
        deploymentConfigId = deploymentConfigIdDecoded
    }
}

public struct CreateDeploymentGroupInputBodyMiddleware: Middleware {
    public let id: String = "CreateDeploymentGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateDeploymentGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateDeploymentGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateDeploymentGroupInput>
    public typealias MOutput = OperationOutput<CreateDeploymentGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateDeploymentGroupOutputError>
}

extension CreateDeploymentGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateDeploymentGroupInput(alarmConfiguration: \(String(describing: alarmConfiguration)), applicationName: \(String(describing: applicationName)), autoRollbackConfiguration: \(String(describing: autoRollbackConfiguration)), autoScalingGroups: \(String(describing: autoScalingGroups)), blueGreenDeploymentConfiguration: \(String(describing: blueGreenDeploymentConfiguration)), deploymentConfigName: \(String(describing: deploymentConfigName)), deploymentGroupName: \(String(describing: deploymentGroupName)), deploymentStyle: \(String(describing: deploymentStyle)), ec2TagFilters: \(String(describing: ec2TagFilters)), ec2TagSet: \(String(describing: ec2TagSet)), ecsServices: \(String(describing: ecsServices)), loadBalancerInfo: \(String(describing: loadBalancerInfo)), onPremisesInstanceTagFilters: \(String(describing: onPremisesInstanceTagFilters)), onPremisesTagSet: \(String(describing: onPremisesTagSet)), outdatedInstancesStrategy: \(String(describing: outdatedInstancesStrategy)), serviceRoleArn: \(String(describing: serviceRoleArn)), tags: \(String(describing: tags)), triggerConfigurations: \(String(describing: triggerConfigurations)))"}
}

extension CreateDeploymentGroupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alarmConfiguration
        case applicationName
        case autoRollbackConfiguration
        case autoScalingGroups
        case blueGreenDeploymentConfiguration
        case deploymentConfigName
        case deploymentGroupName
        case deploymentStyle
        case ec2TagFilters
        case ec2TagSet
        case ecsServices
        case loadBalancerInfo
        case onPremisesInstanceTagFilters
        case onPremisesTagSet
        case outdatedInstancesStrategy
        case serviceRoleArn
        case tags
        case triggerConfigurations
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmConfiguration = alarmConfiguration {
            try encodeContainer.encode(alarmConfiguration, forKey: .alarmConfiguration)
        }
        if let applicationName = applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let autoRollbackConfiguration = autoRollbackConfiguration {
            try encodeContainer.encode(autoRollbackConfiguration, forKey: .autoRollbackConfiguration)
        }
        if let autoScalingGroups = autoScalingGroups {
            var autoScalingGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .autoScalingGroups)
            for autoscalinggroupnamelist0 in autoScalingGroups {
                try autoScalingGroupsContainer.encode(autoscalinggroupnamelist0)
            }
        }
        if let blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration {
            try encodeContainer.encode(blueGreenDeploymentConfiguration, forKey: .blueGreenDeploymentConfiguration)
        }
        if let deploymentConfigName = deploymentConfigName {
            try encodeContainer.encode(deploymentConfigName, forKey: .deploymentConfigName)
        }
        if let deploymentGroupName = deploymentGroupName {
            try encodeContainer.encode(deploymentGroupName, forKey: .deploymentGroupName)
        }
        if let deploymentStyle = deploymentStyle {
            try encodeContainer.encode(deploymentStyle, forKey: .deploymentStyle)
        }
        if let ec2TagFilters = ec2TagFilters {
            var ec2TagFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2TagFilters)
            for ec2tagfilterlist0 in ec2TagFilters {
                try ec2TagFiltersContainer.encode(ec2tagfilterlist0)
            }
        }
        if let ec2TagSet = ec2TagSet {
            try encodeContainer.encode(ec2TagSet, forKey: .ec2TagSet)
        }
        if let ecsServices = ecsServices {
            var ecsServicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ecsServices)
            for ecsservicelist0 in ecsServices {
                try ecsServicesContainer.encode(ecsservicelist0)
            }
        }
        if let loadBalancerInfo = loadBalancerInfo {
            try encodeContainer.encode(loadBalancerInfo, forKey: .loadBalancerInfo)
        }
        if let onPremisesInstanceTagFilters = onPremisesInstanceTagFilters {
            var onPremisesInstanceTagFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .onPremisesInstanceTagFilters)
            for tagfilterlist0 in onPremisesInstanceTagFilters {
                try onPremisesInstanceTagFiltersContainer.encode(tagfilterlist0)
            }
        }
        if let onPremisesTagSet = onPremisesTagSet {
            try encodeContainer.encode(onPremisesTagSet, forKey: .onPremisesTagSet)
        }
        if let outdatedInstancesStrategy = outdatedInstancesStrategy {
            try encodeContainer.encode(outdatedInstancesStrategy.rawValue, forKey: .outdatedInstancesStrategy)
        }
        if let serviceRoleArn = serviceRoleArn {
            try encodeContainer.encode(serviceRoleArn, forKey: .serviceRoleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let triggerConfigurations = triggerConfigurations {
            var triggerConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .triggerConfigurations)
            for triggerconfiglist0 in triggerConfigurations {
                try triggerConfigurationsContainer.encode(triggerconfiglist0)
            }
        }
    }
}

public struct CreateDeploymentGroupInputHeadersMiddleware: Middleware {
    public let id: String = "CreateDeploymentGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateDeploymentGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateDeploymentGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateDeploymentGroupInput>
    public typealias MOutput = OperationOutput<CreateDeploymentGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateDeploymentGroupOutputError>
}

public struct CreateDeploymentGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateDeploymentGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateDeploymentGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateDeploymentGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateDeploymentGroupInput>
    public typealias MOutput = OperationOutput<CreateDeploymentGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateDeploymentGroupOutputError>
}

/// <p>Represents the input of a <code>CreateDeploymentGroup</code> operation.</p>
public struct CreateDeploymentGroupInput: Equatable {
    /// <p>Information to add about Amazon CloudWatch alarms when the deployment group is
    ///             created.</p>
    public let alarmConfiguration: AlarmConfiguration?
    /// <p>The name of an AWS CodeDeploy application associated with the IAM user or AWS
    ///             account.</p>
    public let applicationName: String?
    /// <p>Configuration information for an automatic rollback that is added when a deployment
    ///             group is created.</p>
    public let autoRollbackConfiguration: AutoRollbackConfiguration?
    /// <p>A list of associated Amazon EC2 Auto Scaling groups.</p>
    public let autoScalingGroups: [String]?
    /// <p>Information about blue/green deployment options for a deployment group.</p>
    public let blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration?
    /// <p>If specified, the deployment configuration name can be either one of the predefined
    ///             configurations provided with AWS CodeDeploy or a custom deployment configuration that
    ///             you create by calling the create deployment configuration operation.</p>
    ///         <p>
    ///             <code>CodeDeployDefault.OneAtATime</code> is the default deployment configuration. It
    ///             is used if a configuration isn't specified for the deployment or deployment
    ///             group.</p>
    ///         <p>For more information about the predefined deployment configurations in AWS CodeDeploy,
    ///             see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations.html">Working with
    ///                 Deployment Configurations in CodeDeploy</a> in the <i>AWS CodeDeploy User
    ///                 Guide</i>.</p>
    public let deploymentConfigName: String?
    /// <p>The name of a new deployment group for the specified application.</p>
    public let deploymentGroupName: String?
    /// <p>Information about the type of deployment, in-place or blue/green, that you want to run
    ///             and whether to route deployment traffic behind a load balancer.</p>
    public let deploymentStyle: DeploymentStyle?
    /// <p>The Amazon EC2 tags on which to filter. The deployment group includes EC2 instances
    ///             with any of the specified tags. Cannot be used in the same call as ec2TagSet.</p>
    public let ec2TagFilters: [EC2TagFilter]?
    /// <p>Information about groups of tags applied to EC2 instances. The deployment group
    ///             includes only EC2 instances identified by all the tag groups. Cannot be used in the same
    ///             call as <code>ec2TagFilters</code>.</p>
    public let ec2TagSet: EC2TagSet?
    /// <p> The target Amazon ECS services in the deployment group. This applies only to
    ///             deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service
    ///             is specified as an Amazon ECS cluster and service name pair using the format
    ///                 <code><clustername>:<servicename></code>. </p>
    public let ecsServices: [ECSService]?
    /// <p>Information about the load balancer used in a deployment.</p>
    public let loadBalancerInfo: LoadBalancerInfo?
    /// <p>The on-premises instance tags on which to filter. The deployment group includes
    ///             on-premises instances with any of the specified tags. Cannot be used in the same call as
    ///                 <code>OnPremisesTagSet</code>.</p>
    public let onPremisesInstanceTagFilters: [TagFilter]?
    /// <p>Information about groups of tags applied to on-premises instances. The deployment
    ///             group includes only on-premises instances identified by all of the tag groups. Cannot be
    ///             used in the same call as <code>onPremisesInstanceTagFilters</code>.</p>
    public let onPremisesTagSet: OnPremisesTagSet?
    /// <p>Indicates what happens when new EC2 instances are launched mid-deployment and do not
    ///             receive the deployed application revision.</p>
    ///         <p>If this option is set to <code>UPDATE</code> or is unspecified, CodeDeploy initiates
    ///             one or more 'auto-update outdated instances' deployments to apply the deployed
    ///             application revision to the new EC2 instances.</p>
    ///         <p>If this option is set to <code>IGNORE</code>, CodeDeploy does not initiate a
    ///             deployment to update the new EC2 instances. This may result in instances having
    ///             different revisions.</p>
    public let outdatedInstancesStrategy: OutdatedInstancesStrategy?
    /// <p>A service role Amazon Resource Name (ARN) that allows AWS CodeDeploy to act on the
    ///             user's behalf when interacting with AWS services.</p>
    public let serviceRoleArn: String?
    /// <p> The metadata that you apply to CodeDeploy deployment groups to help you organize and
    ///             categorize them. Each tag consists of a key and an optional value, both of which you
    ///             define. </p>
    public let tags: [Tag]?
    /// <p>Information about triggers to create when the deployment group is created. For
    ///             examples, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-notify-sns.html">Create a Trigger for an
    ///                 AWS CodeDeploy Event</a> in the <i>AWS CodeDeploy User
    ///             Guide</i>.</p>
    public let triggerConfigurations: [TriggerConfig]?

    public init (
        alarmConfiguration: AlarmConfiguration? = nil,
        applicationName: String? = nil,
        autoRollbackConfiguration: AutoRollbackConfiguration? = nil,
        autoScalingGroups: [String]? = nil,
        blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil,
        deploymentConfigName: String? = nil,
        deploymentGroupName: String? = nil,
        deploymentStyle: DeploymentStyle? = nil,
        ec2TagFilters: [EC2TagFilter]? = nil,
        ec2TagSet: EC2TagSet? = nil,
        ecsServices: [ECSService]? = nil,
        loadBalancerInfo: LoadBalancerInfo? = nil,
        onPremisesInstanceTagFilters: [TagFilter]? = nil,
        onPremisesTagSet: OnPremisesTagSet? = nil,
        outdatedInstancesStrategy: OutdatedInstancesStrategy? = nil,
        serviceRoleArn: String? = nil,
        tags: [Tag]? = nil,
        triggerConfigurations: [TriggerConfig]? = nil
    )
    {
        self.alarmConfiguration = alarmConfiguration
        self.applicationName = applicationName
        self.autoRollbackConfiguration = autoRollbackConfiguration
        self.autoScalingGroups = autoScalingGroups
        self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
        self.deploymentConfigName = deploymentConfigName
        self.deploymentGroupName = deploymentGroupName
        self.deploymentStyle = deploymentStyle
        self.ec2TagFilters = ec2TagFilters
        self.ec2TagSet = ec2TagSet
        self.ecsServices = ecsServices
        self.loadBalancerInfo = loadBalancerInfo
        self.onPremisesInstanceTagFilters = onPremisesInstanceTagFilters
        self.onPremisesTagSet = onPremisesTagSet
        self.outdatedInstancesStrategy = outdatedInstancesStrategy
        self.serviceRoleArn = serviceRoleArn
        self.tags = tags
        self.triggerConfigurations = triggerConfigurations
    }
}

struct CreateDeploymentGroupInputBody: Equatable {
    public let applicationName: String?
    public let deploymentGroupName: String?
    public let deploymentConfigName: String?
    public let ec2TagFilters: [EC2TagFilter]?
    public let onPremisesInstanceTagFilters: [TagFilter]?
    public let autoScalingGroups: [String]?
    public let serviceRoleArn: String?
    public let triggerConfigurations: [TriggerConfig]?
    public let alarmConfiguration: AlarmConfiguration?
    public let autoRollbackConfiguration: AutoRollbackConfiguration?
    public let outdatedInstancesStrategy: OutdatedInstancesStrategy?
    public let deploymentStyle: DeploymentStyle?
    public let blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration?
    public let loadBalancerInfo: LoadBalancerInfo?
    public let ec2TagSet: EC2TagSet?
    public let ecsServices: [ECSService]?
    public let onPremisesTagSet: OnPremisesTagSet?
    public let tags: [Tag]?
}

extension CreateDeploymentGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case alarmConfiguration
        case applicationName
        case autoRollbackConfiguration
        case autoScalingGroups
        case blueGreenDeploymentConfiguration
        case deploymentConfigName
        case deploymentGroupName
        case deploymentStyle
        case ec2TagFilters
        case ec2TagSet
        case ecsServices
        case loadBalancerInfo
        case onPremisesInstanceTagFilters
        case onPremisesTagSet
        case outdatedInstancesStrategy
        case serviceRoleArn
        case tags
        case triggerConfigurations
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let deploymentGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentGroupName)
        deploymentGroupName = deploymentGroupNameDecoded
        let deploymentConfigNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentConfigName)
        deploymentConfigName = deploymentConfigNameDecoded
        let ec2TagFiltersContainer = try containerValues.decodeIfPresent([EC2TagFilter?].self, forKey: .ec2TagFilters)
        var ec2TagFiltersDecoded0:[EC2TagFilter]? = nil
        if let ec2TagFiltersContainer = ec2TagFiltersContainer {
            ec2TagFiltersDecoded0 = [EC2TagFilter]()
            for structure0 in ec2TagFiltersContainer {
                if let structure0 = structure0 {
                    ec2TagFiltersDecoded0?.append(structure0)
                }
            }
        }
        ec2TagFilters = ec2TagFiltersDecoded0
        let onPremisesInstanceTagFiltersContainer = try containerValues.decodeIfPresent([TagFilter?].self, forKey: .onPremisesInstanceTagFilters)
        var onPremisesInstanceTagFiltersDecoded0:[TagFilter]? = nil
        if let onPremisesInstanceTagFiltersContainer = onPremisesInstanceTagFiltersContainer {
            onPremisesInstanceTagFiltersDecoded0 = [TagFilter]()
            for structure0 in onPremisesInstanceTagFiltersContainer {
                if let structure0 = structure0 {
                    onPremisesInstanceTagFiltersDecoded0?.append(structure0)
                }
            }
        }
        onPremisesInstanceTagFilters = onPremisesInstanceTagFiltersDecoded0
        let autoScalingGroupsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .autoScalingGroups)
        var autoScalingGroupsDecoded0:[String]? = nil
        if let autoScalingGroupsContainer = autoScalingGroupsContainer {
            autoScalingGroupsDecoded0 = [String]()
            for string0 in autoScalingGroupsContainer {
                if let string0 = string0 {
                    autoScalingGroupsDecoded0?.append(string0)
                }
            }
        }
        autoScalingGroups = autoScalingGroupsDecoded0
        let serviceRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRoleArn)
        serviceRoleArn = serviceRoleArnDecoded
        let triggerConfigurationsContainer = try containerValues.decodeIfPresent([TriggerConfig?].self, forKey: .triggerConfigurations)
        var triggerConfigurationsDecoded0:[TriggerConfig]? = nil
        if let triggerConfigurationsContainer = triggerConfigurationsContainer {
            triggerConfigurationsDecoded0 = [TriggerConfig]()
            for structure0 in triggerConfigurationsContainer {
                if let structure0 = structure0 {
                    triggerConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        triggerConfigurations = triggerConfigurationsDecoded0
        let alarmConfigurationDecoded = try containerValues.decodeIfPresent(AlarmConfiguration.self, forKey: .alarmConfiguration)
        alarmConfiguration = alarmConfigurationDecoded
        let autoRollbackConfigurationDecoded = try containerValues.decodeIfPresent(AutoRollbackConfiguration.self, forKey: .autoRollbackConfiguration)
        autoRollbackConfiguration = autoRollbackConfigurationDecoded
        let outdatedInstancesStrategyDecoded = try containerValues.decodeIfPresent(OutdatedInstancesStrategy.self, forKey: .outdatedInstancesStrategy)
        outdatedInstancesStrategy = outdatedInstancesStrategyDecoded
        let deploymentStyleDecoded = try containerValues.decodeIfPresent(DeploymentStyle.self, forKey: .deploymentStyle)
        deploymentStyle = deploymentStyleDecoded
        let blueGreenDeploymentConfigurationDecoded = try containerValues.decodeIfPresent(BlueGreenDeploymentConfiguration.self, forKey: .blueGreenDeploymentConfiguration)
        blueGreenDeploymentConfiguration = blueGreenDeploymentConfigurationDecoded
        let loadBalancerInfoDecoded = try containerValues.decodeIfPresent(LoadBalancerInfo.self, forKey: .loadBalancerInfo)
        loadBalancerInfo = loadBalancerInfoDecoded
        let ec2TagSetDecoded = try containerValues.decodeIfPresent(EC2TagSet.self, forKey: .ec2TagSet)
        ec2TagSet = ec2TagSetDecoded
        let ecsServicesContainer = try containerValues.decodeIfPresent([ECSService?].self, forKey: .ecsServices)
        var ecsServicesDecoded0:[ECSService]? = nil
        if let ecsServicesContainer = ecsServicesContainer {
            ecsServicesDecoded0 = [ECSService]()
            for structure0 in ecsServicesContainer {
                if let structure0 = structure0 {
                    ecsServicesDecoded0?.append(structure0)
                }
            }
        }
        ecsServices = ecsServicesDecoded0
        let onPremisesTagSetDecoded = try containerValues.decodeIfPresent(OnPremisesTagSet.self, forKey: .onPremisesTagSet)
        onPremisesTagSet = onPremisesTagSetDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateDeploymentGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDeploymentGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AlarmsLimitExceededException" : self = .alarmsLimitExceededException(try AlarmsLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentConfigDoesNotExistException" : self = .deploymentConfigDoesNotExistException(try DeploymentConfigDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupAlreadyExistsException" : self = .deploymentGroupAlreadyExistsException(try DeploymentGroupAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupLimitExceededException" : self = .deploymentGroupLimitExceededException(try DeploymentGroupLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupNameRequiredException" : self = .deploymentGroupNameRequiredException(try DeploymentGroupNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ECSServiceMappingLimitExceededException" : self = .eCSServiceMappingLimitExceededException(try ECSServiceMappingLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAlarmConfigException" : self = .invalidAlarmConfigException(try InvalidAlarmConfigException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAutoRollbackConfigException" : self = .invalidAutoRollbackConfigException(try InvalidAutoRollbackConfigException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAutoScalingGroupException" : self = .invalidAutoScalingGroupException(try InvalidAutoScalingGroupException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidBlueGreenDeploymentConfigurationException" : self = .invalidBlueGreenDeploymentConfigurationException(try InvalidBlueGreenDeploymentConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentConfigNameException" : self = .invalidDeploymentConfigNameException(try InvalidDeploymentConfigNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentGroupNameException" : self = .invalidDeploymentGroupNameException(try InvalidDeploymentGroupNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentStyleException" : self = .invalidDeploymentStyleException(try InvalidDeploymentStyleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEC2TagCombinationException" : self = .invalidEC2TagCombinationException(try InvalidEC2TagCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEC2TagException" : self = .invalidEC2TagException(try InvalidEC2TagException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidECSServiceException" : self = .invalidECSServiceException(try InvalidECSServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLoadBalancerInfoException" : self = .invalidLoadBalancerInfoException(try InvalidLoadBalancerInfoException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidOnPremisesTagCombinationException" : self = .invalidOnPremisesTagCombinationException(try InvalidOnPremisesTagCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRoleException" : self = .invalidRoleException(try InvalidRoleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagException" : self = .invalidTagException(try InvalidTagException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagsToAddException" : self = .invalidTagsToAddException(try InvalidTagsToAddException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTargetGroupPairException" : self = .invalidTargetGroupPairException(try InvalidTargetGroupPairException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTrafficRoutingConfigurationException" : self = .invalidTrafficRoutingConfigurationException(try InvalidTrafficRoutingConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTriggerConfigException" : self = .invalidTriggerConfigException(try InvalidTriggerConfigException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LifecycleHookLimitExceededException" : self = .lifecycleHookLimitExceededException(try LifecycleHookLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RoleRequiredException" : self = .roleRequiredException(try RoleRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagSetListLimitExceededException" : self = .tagSetListLimitExceededException(try TagSetListLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TriggerTargetsLimitExceededException" : self = .triggerTargetsLimitExceededException(try TriggerTargetsLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDeploymentGroupOutputError: Equatable {
    case alarmsLimitExceededException(AlarmsLimitExceededException)
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case deploymentConfigDoesNotExistException(DeploymentConfigDoesNotExistException)
    case deploymentGroupAlreadyExistsException(DeploymentGroupAlreadyExistsException)
    case deploymentGroupLimitExceededException(DeploymentGroupLimitExceededException)
    case deploymentGroupNameRequiredException(DeploymentGroupNameRequiredException)
    case eCSServiceMappingLimitExceededException(ECSServiceMappingLimitExceededException)
    case invalidAlarmConfigException(InvalidAlarmConfigException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidAutoRollbackConfigException(InvalidAutoRollbackConfigException)
    case invalidAutoScalingGroupException(InvalidAutoScalingGroupException)
    case invalidBlueGreenDeploymentConfigurationException(InvalidBlueGreenDeploymentConfigurationException)
    case invalidDeploymentConfigNameException(InvalidDeploymentConfigNameException)
    case invalidDeploymentGroupNameException(InvalidDeploymentGroupNameException)
    case invalidDeploymentStyleException(InvalidDeploymentStyleException)
    case invalidEC2TagCombinationException(InvalidEC2TagCombinationException)
    case invalidEC2TagException(InvalidEC2TagException)
    case invalidECSServiceException(InvalidECSServiceException)
    case invalidInputException(InvalidInputException)
    case invalidLoadBalancerInfoException(InvalidLoadBalancerInfoException)
    case invalidOnPremisesTagCombinationException(InvalidOnPremisesTagCombinationException)
    case invalidRoleException(InvalidRoleException)
    case invalidTagException(InvalidTagException)
    case invalidTagsToAddException(InvalidTagsToAddException)
    case invalidTargetGroupPairException(InvalidTargetGroupPairException)
    case invalidTrafficRoutingConfigurationException(InvalidTrafficRoutingConfigurationException)
    case invalidTriggerConfigException(InvalidTriggerConfigException)
    case lifecycleHookLimitExceededException(LifecycleHookLimitExceededException)
    case roleRequiredException(RoleRequiredException)
    case tagSetListLimitExceededException(TagSetListLimitExceededException)
    case throttlingException(ThrottlingException)
    case triggerTargetsLimitExceededException(TriggerTargetsLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDeploymentGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateDeploymentGroupOutputResponse(deploymentGroupId: \(String(describing: deploymentGroupId)))"}
}

extension CreateDeploymentGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateDeploymentGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.deploymentGroupId = output.deploymentGroupId
        } else {
            self.deploymentGroupId = nil
        }
    }
}

/// <p>Represents the output of a <code>CreateDeploymentGroup</code> operation.</p>
public struct CreateDeploymentGroupOutputResponse: Equatable {
    /// <p>A unique deployment group ID.</p>
    public let deploymentGroupId: String?

    public init (
        deploymentGroupId: String? = nil
    )
    {
        self.deploymentGroupId = deploymentGroupId
    }
}

struct CreateDeploymentGroupOutputResponseBody: Equatable {
    public let deploymentGroupId: String?
}

extension CreateDeploymentGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentGroupId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentGroupId)
        deploymentGroupId = deploymentGroupIdDecoded
    }
}

public struct CreateDeploymentInputBodyMiddleware: Middleware {
    public let id: String = "CreateDeploymentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateDeploymentInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateDeploymentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateDeploymentInput>
    public typealias MOutput = OperationOutput<CreateDeploymentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateDeploymentOutputError>
}

extension CreateDeploymentInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateDeploymentInput(applicationName: \(String(describing: applicationName)), autoRollbackConfiguration: \(String(describing: autoRollbackConfiguration)), deploymentConfigName: \(String(describing: deploymentConfigName)), deploymentGroupName: \(String(describing: deploymentGroupName)), description: \(String(describing: description)), fileExistsBehavior: \(String(describing: fileExistsBehavior)), ignoreApplicationStopFailures: \(String(describing: ignoreApplicationStopFailures)), revision: \(String(describing: revision)), targetInstances: \(String(describing: targetInstances)), updateOutdatedInstancesOnly: \(String(describing: updateOutdatedInstancesOnly)))"}
}

extension CreateDeploymentInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case autoRollbackConfiguration
        case deploymentConfigName
        case deploymentGroupName
        case description
        case fileExistsBehavior
        case ignoreApplicationStopFailures
        case revision
        case targetInstances
        case updateOutdatedInstancesOnly
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let autoRollbackConfiguration = autoRollbackConfiguration {
            try encodeContainer.encode(autoRollbackConfiguration, forKey: .autoRollbackConfiguration)
        }
        if let deploymentConfigName = deploymentConfigName {
            try encodeContainer.encode(deploymentConfigName, forKey: .deploymentConfigName)
        }
        if let deploymentGroupName = deploymentGroupName {
            try encodeContainer.encode(deploymentGroupName, forKey: .deploymentGroupName)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let fileExistsBehavior = fileExistsBehavior {
            try encodeContainer.encode(fileExistsBehavior.rawValue, forKey: .fileExistsBehavior)
        }
        if ignoreApplicationStopFailures != false {
            try encodeContainer.encode(ignoreApplicationStopFailures, forKey: .ignoreApplicationStopFailures)
        }
        if let revision = revision {
            try encodeContainer.encode(revision, forKey: .revision)
        }
        if let targetInstances = targetInstances {
            try encodeContainer.encode(targetInstances, forKey: .targetInstances)
        }
        if updateOutdatedInstancesOnly != false {
            try encodeContainer.encode(updateOutdatedInstancesOnly, forKey: .updateOutdatedInstancesOnly)
        }
    }
}

public struct CreateDeploymentInputHeadersMiddleware: Middleware {
    public let id: String = "CreateDeploymentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateDeploymentInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateDeploymentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateDeploymentInput>
    public typealias MOutput = OperationOutput<CreateDeploymentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateDeploymentOutputError>
}

public struct CreateDeploymentInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateDeploymentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateDeploymentInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateDeploymentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateDeploymentInput>
    public typealias MOutput = OperationOutput<CreateDeploymentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateDeploymentOutputError>
}

/// <p>Represents the input of a <code>CreateDeployment</code> operation.</p>
public struct CreateDeploymentInput: Equatable {
    /// <p>The name of an AWS CodeDeploy application associated with the IAM user or AWS
    ///             account.</p>
    public let applicationName: String?
    /// <p>Configuration information for an automatic rollback that is added when a deployment is
    ///             created.</p>
    public let autoRollbackConfiguration: AutoRollbackConfiguration?
    /// <p>The name of a deployment configuration associated with the IAM user or AWS
    ///             account.</p>
    ///         <p>If not specified, the value configured in the deployment group is used as the default.
    ///             If the deployment group does not have a deployment configuration associated with it,
    ///                 <code>CodeDeployDefault</code>.<code>OneAtATime</code> is used by default.</p>
    public let deploymentConfigName: String?
    /// <p>The name of the deployment group.</p>
    public let deploymentGroupName: String?
    /// <p>A comment about the deployment.</p>
    public let description: String?
    /// <p>Information about how AWS CodeDeploy handles files that already exist in a deployment
    ///             target location but weren't part of the previous successful deployment.</p>
    ///         <p>The <code>fileExistsBehavior</code> parameter takes any of the following
    ///             values:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>DISALLOW: The deployment fails. This is also the default behavior if no option
    ///                     is specified.</p>
    ///             </li>
    ///             <li>
    ///                 <p>OVERWRITE: The version of the file from the application revision currently
    ///                     being deployed replaces the version already on the instance.</p>
    ///             </li>
    ///             <li>
    ///                 <p>RETAIN: The version of the file already on the instance is kept and used as
    ///                     part of the new deployment.</p>
    ///             </li>
    ///          </ul>
    public let fileExistsBehavior: FileExistsBehavior?
    /// <p> If true, then if an <code>ApplicationStop</code>, <code>BeforeBlockTraffic</code>, or
    ///                 <code>AfterBlockTraffic</code> deployment lifecycle event to an instance fails, then
    ///             the deployment continues to the next deployment lifecycle event. For example, if
    ///                 <code>ApplicationStop</code> fails, the deployment continues with
    ///                 <code>DownloadBundle</code>. If <code>BeforeBlockTraffic</code> fails, the
    ///             deployment continues with <code>BlockTraffic</code>. If <code>AfterBlockTraffic</code>
    ///             fails, the deployment continues with <code>ApplicationStop</code>. </p>
    ///
    ///         <p> If false or not specified, then if a lifecycle event fails during a deployment to an
    ///             instance, that deployment fails. If deployment to that instance is part of an overall
    ///             deployment and the number of healthy hosts is not less than the minimum number of
    ///             healthy hosts, then a deployment to the next instance is attempted. </p>
    ///
    ///         <p> During a deployment, the AWS CodeDeploy agent runs the scripts specified for
    ///                 <code>ApplicationStop</code>, <code>BeforeBlockTraffic</code>, and
    ///                 <code>AfterBlockTraffic</code> in the AppSpec file from the previous successful
    ///             deployment. (All other scripts are run from the AppSpec file in the current deployment.)
    ///             If one of these scripts contains an error and does not run successfully, the deployment
    ///             can fail. </p>
    ///
    ///         <p> If the cause of the failure is a script from the last successful deployment that will
    ///             never run successfully, create a new deployment and use
    ///                 <code>ignoreApplicationStopFailures</code> to specify that the
    ///                 <code>ApplicationStop</code>, <code>BeforeBlockTraffic</code>, and
    ///                 <code>AfterBlockTraffic</code> failures should be ignored. </p>
    public let ignoreApplicationStopFailures: Bool
    /// <p> The type and location of the revision to deploy. </p>
    public let revision: RevisionLocation?
    /// <p> Information about the instances that belong to the replacement environment in a
    ///             blue/green deployment. </p>
    public let targetInstances: TargetInstances?
    /// <p> Indicates whether to deploy to all instances or only to instances that are not
    ///             running the latest application revision. </p>
    public let updateOutdatedInstancesOnly: Bool

    public init (
        applicationName: String? = nil,
        autoRollbackConfiguration: AutoRollbackConfiguration? = nil,
        deploymentConfigName: String? = nil,
        deploymentGroupName: String? = nil,
        description: String? = nil,
        fileExistsBehavior: FileExistsBehavior? = nil,
        ignoreApplicationStopFailures: Bool = false,
        revision: RevisionLocation? = nil,
        targetInstances: TargetInstances? = nil,
        updateOutdatedInstancesOnly: Bool = false
    )
    {
        self.applicationName = applicationName
        self.autoRollbackConfiguration = autoRollbackConfiguration
        self.deploymentConfigName = deploymentConfigName
        self.deploymentGroupName = deploymentGroupName
        self.description = description
        self.fileExistsBehavior = fileExistsBehavior
        self.ignoreApplicationStopFailures = ignoreApplicationStopFailures
        self.revision = revision
        self.targetInstances = targetInstances
        self.updateOutdatedInstancesOnly = updateOutdatedInstancesOnly
    }
}

struct CreateDeploymentInputBody: Equatable {
    public let applicationName: String?
    public let deploymentGroupName: String?
    public let revision: RevisionLocation?
    public let deploymentConfigName: String?
    public let description: String?
    public let ignoreApplicationStopFailures: Bool
    public let targetInstances: TargetInstances?
    public let autoRollbackConfiguration: AutoRollbackConfiguration?
    public let updateOutdatedInstancesOnly: Bool
    public let fileExistsBehavior: FileExistsBehavior?
}

extension CreateDeploymentInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case autoRollbackConfiguration
        case deploymentConfigName
        case deploymentGroupName
        case description
        case fileExistsBehavior
        case ignoreApplicationStopFailures
        case revision
        case targetInstances
        case updateOutdatedInstancesOnly
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let deploymentGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentGroupName)
        deploymentGroupName = deploymentGroupNameDecoded
        let revisionDecoded = try containerValues.decodeIfPresent(RevisionLocation.self, forKey: .revision)
        revision = revisionDecoded
        let deploymentConfigNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentConfigName)
        deploymentConfigName = deploymentConfigNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let ignoreApplicationStopFailuresDecoded = try containerValues.decode(Bool.self, forKey: .ignoreApplicationStopFailures)
        ignoreApplicationStopFailures = ignoreApplicationStopFailuresDecoded
        let targetInstancesDecoded = try containerValues.decodeIfPresent(TargetInstances.self, forKey: .targetInstances)
        targetInstances = targetInstancesDecoded
        let autoRollbackConfigurationDecoded = try containerValues.decodeIfPresent(AutoRollbackConfiguration.self, forKey: .autoRollbackConfiguration)
        autoRollbackConfiguration = autoRollbackConfigurationDecoded
        let updateOutdatedInstancesOnlyDecoded = try containerValues.decode(Bool.self, forKey: .updateOutdatedInstancesOnly)
        updateOutdatedInstancesOnly = updateOutdatedInstancesOnlyDecoded
        let fileExistsBehaviorDecoded = try containerValues.decodeIfPresent(FileExistsBehavior.self, forKey: .fileExistsBehavior)
        fileExistsBehavior = fileExistsBehaviorDecoded
    }
}

extension CreateDeploymentOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDeploymentOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentConfigDoesNotExistException" : self = .deploymentConfigDoesNotExistException(try DeploymentConfigDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupDoesNotExistException" : self = .deploymentGroupDoesNotExistException(try DeploymentGroupDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupNameRequiredException" : self = .deploymentGroupNameRequiredException(try DeploymentGroupNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentLimitExceededException" : self = .deploymentLimitExceededException(try DeploymentLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DescriptionTooLongException" : self = .descriptionTooLongException(try DescriptionTooLongException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAutoRollbackConfigException" : self = .invalidAutoRollbackConfigException(try InvalidAutoRollbackConfigException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAutoScalingGroupException" : self = .invalidAutoScalingGroupException(try InvalidAutoScalingGroupException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentConfigNameException" : self = .invalidDeploymentConfigNameException(try InvalidDeploymentConfigNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentGroupNameException" : self = .invalidDeploymentGroupNameException(try InvalidDeploymentGroupNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFileExistsBehaviorException" : self = .invalidFileExistsBehaviorException(try InvalidFileExistsBehaviorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGitHubAccountTokenException" : self = .invalidGitHubAccountTokenException(try InvalidGitHubAccountTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidIgnoreApplicationStopFailuresValueException" : self = .invalidIgnoreApplicationStopFailuresValueException(try InvalidIgnoreApplicationStopFailuresValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLoadBalancerInfoException" : self = .invalidLoadBalancerInfoException(try InvalidLoadBalancerInfoException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRevisionException" : self = .invalidRevisionException(try InvalidRevisionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRoleException" : self = .invalidRoleException(try InvalidRoleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTargetInstancesException" : self = .invalidTargetInstancesException(try InvalidTargetInstancesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTrafficRoutingConfigurationException" : self = .invalidTrafficRoutingConfigurationException(try InvalidTrafficRoutingConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUpdateOutdatedInstancesOnlyValueException" : self = .invalidUpdateOutdatedInstancesOnlyValueException(try InvalidUpdateOutdatedInstancesOnlyValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RevisionDoesNotExistException" : self = .revisionDoesNotExistException(try RevisionDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RevisionRequiredException" : self = .revisionRequiredException(try RevisionRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDeploymentOutputError: Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case deploymentConfigDoesNotExistException(DeploymentConfigDoesNotExistException)
    case deploymentGroupDoesNotExistException(DeploymentGroupDoesNotExistException)
    case deploymentGroupNameRequiredException(DeploymentGroupNameRequiredException)
    case deploymentLimitExceededException(DeploymentLimitExceededException)
    case descriptionTooLongException(DescriptionTooLongException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidAutoRollbackConfigException(InvalidAutoRollbackConfigException)
    case invalidAutoScalingGroupException(InvalidAutoScalingGroupException)
    case invalidDeploymentConfigNameException(InvalidDeploymentConfigNameException)
    case invalidDeploymentGroupNameException(InvalidDeploymentGroupNameException)
    case invalidFileExistsBehaviorException(InvalidFileExistsBehaviorException)
    case invalidGitHubAccountTokenException(InvalidGitHubAccountTokenException)
    case invalidIgnoreApplicationStopFailuresValueException(InvalidIgnoreApplicationStopFailuresValueException)
    case invalidLoadBalancerInfoException(InvalidLoadBalancerInfoException)
    case invalidRevisionException(InvalidRevisionException)
    case invalidRoleException(InvalidRoleException)
    case invalidTargetInstancesException(InvalidTargetInstancesException)
    case invalidTrafficRoutingConfigurationException(InvalidTrafficRoutingConfigurationException)
    case invalidUpdateOutdatedInstancesOnlyValueException(InvalidUpdateOutdatedInstancesOnlyValueException)
    case revisionDoesNotExistException(RevisionDoesNotExistException)
    case revisionRequiredException(RevisionRequiredException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDeploymentOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateDeploymentOutputResponse(deploymentId: \(String(describing: deploymentId)))"}
}

extension CreateDeploymentOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateDeploymentOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.deploymentId = output.deploymentId
        } else {
            self.deploymentId = nil
        }
    }
}

/// <p> Represents the output of a <code>CreateDeployment</code> operation. </p>
public struct CreateDeploymentOutputResponse: Equatable {
    /// <p> The unique ID of a deployment. </p>
    public let deploymentId: String?

    public init (
        deploymentId: String? = nil
    )
    {
        self.deploymentId = deploymentId
    }
}

struct CreateDeploymentOutputResponseBody: Equatable {
    public let deploymentId: String?
}

extension CreateDeploymentOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
    }
}

public struct DeleteApplicationInputBodyMiddleware: Middleware {
    public let id: String = "DeleteApplicationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteApplicationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteApplicationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteApplicationInput>
    public typealias MOutput = OperationOutput<DeleteApplicationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteApplicationOutputError>
}

extension DeleteApplicationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteApplicationInput(applicationName: \(String(describing: applicationName)))"}
}

extension DeleteApplicationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
    }
}

public struct DeleteApplicationInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteApplicationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteApplicationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteApplicationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteApplicationInput>
    public typealias MOutput = OperationOutput<DeleteApplicationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteApplicationOutputError>
}

public struct DeleteApplicationInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteApplicationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteApplicationInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteApplicationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteApplicationInput>
    public typealias MOutput = OperationOutput<DeleteApplicationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteApplicationOutputError>
}

/// <p>Represents the input of a <code>DeleteApplication</code> operation.</p>
public struct DeleteApplicationInput: Equatable {
    /// <p>The name of an AWS CodeDeploy application associated with the IAM user or AWS
    ///             account.</p>
    public let applicationName: String?

    public init (
        applicationName: String? = nil
    )
    {
        self.applicationName = applicationName
    }
}

struct DeleteApplicationInputBody: Equatable {
    public let applicationName: String?
}

extension DeleteApplicationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
    }
}

extension DeleteApplicationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteApplicationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRoleException" : self = .invalidRoleException(try InvalidRoleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteApplicationOutputError: Equatable {
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidRoleException(InvalidRoleException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteApplicationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteApplicationOutputResponse()"}
}

extension DeleteApplicationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteApplicationOutputResponse: Equatable {

    public init() {}
}

struct DeleteApplicationOutputResponseBody: Equatable {
}

extension DeleteApplicationOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteDeploymentConfigInputBodyMiddleware: Middleware {
    public let id: String = "DeleteDeploymentConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteDeploymentConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteDeploymentConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteDeploymentConfigInput>
    public typealias MOutput = OperationOutput<DeleteDeploymentConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteDeploymentConfigOutputError>
}

extension DeleteDeploymentConfigInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteDeploymentConfigInput(deploymentConfigName: \(String(describing: deploymentConfigName)))"}
}

extension DeleteDeploymentConfigInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deploymentConfigName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentConfigName = deploymentConfigName {
            try encodeContainer.encode(deploymentConfigName, forKey: .deploymentConfigName)
        }
    }
}

public struct DeleteDeploymentConfigInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteDeploymentConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteDeploymentConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteDeploymentConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteDeploymentConfigInput>
    public typealias MOutput = OperationOutput<DeleteDeploymentConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteDeploymentConfigOutputError>
}

public struct DeleteDeploymentConfigInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteDeploymentConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteDeploymentConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteDeploymentConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteDeploymentConfigInput>
    public typealias MOutput = OperationOutput<DeleteDeploymentConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteDeploymentConfigOutputError>
}

/// <p>Represents the input of a <code>DeleteDeploymentConfig</code> operation.</p>
public struct DeleteDeploymentConfigInput: Equatable {
    /// <p>The name of a deployment configuration associated with the IAM user or AWS
    ///             account.</p>
    public let deploymentConfigName: String?

    public init (
        deploymentConfigName: String? = nil
    )
    {
        self.deploymentConfigName = deploymentConfigName
    }
}

struct DeleteDeploymentConfigInputBody: Equatable {
    public let deploymentConfigName: String?
}

extension DeleteDeploymentConfigInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentConfigName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentConfigNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentConfigName)
        deploymentConfigName = deploymentConfigNameDecoded
    }
}

extension DeleteDeploymentConfigOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDeploymentConfigOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "DeploymentConfigInUseException" : self = .deploymentConfigInUseException(try DeploymentConfigInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentConfigNameRequiredException" : self = .deploymentConfigNameRequiredException(try DeploymentConfigNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentConfigNameException" : self = .invalidDeploymentConfigNameException(try InvalidDeploymentConfigNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidOperationException" : self = .invalidOperationException(try InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDeploymentConfigOutputError: Equatable {
    case deploymentConfigInUseException(DeploymentConfigInUseException)
    case deploymentConfigNameRequiredException(DeploymentConfigNameRequiredException)
    case invalidDeploymentConfigNameException(InvalidDeploymentConfigNameException)
    case invalidOperationException(InvalidOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDeploymentConfigOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteDeploymentConfigOutputResponse()"}
}

extension DeleteDeploymentConfigOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDeploymentConfigOutputResponse: Equatable {

    public init() {}
}

struct DeleteDeploymentConfigOutputResponseBody: Equatable {
}

extension DeleteDeploymentConfigOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct DeleteDeploymentGroupInputBodyMiddleware: Middleware {
    public let id: String = "DeleteDeploymentGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteDeploymentGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteDeploymentGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteDeploymentGroupInput>
    public typealias MOutput = OperationOutput<DeleteDeploymentGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteDeploymentGroupOutputError>
}

extension DeleteDeploymentGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteDeploymentGroupInput(applicationName: \(String(describing: applicationName)), deploymentGroupName: \(String(describing: deploymentGroupName)))"}
}

extension DeleteDeploymentGroupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case deploymentGroupName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let deploymentGroupName = deploymentGroupName {
            try encodeContainer.encode(deploymentGroupName, forKey: .deploymentGroupName)
        }
    }
}

public struct DeleteDeploymentGroupInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteDeploymentGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteDeploymentGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteDeploymentGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteDeploymentGroupInput>
    public typealias MOutput = OperationOutput<DeleteDeploymentGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteDeploymentGroupOutputError>
}

public struct DeleteDeploymentGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteDeploymentGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteDeploymentGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteDeploymentGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteDeploymentGroupInput>
    public typealias MOutput = OperationOutput<DeleteDeploymentGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteDeploymentGroupOutputError>
}

/// <p>Represents the input of a <code>DeleteDeploymentGroup</code> operation.</p>
public struct DeleteDeploymentGroupInput: Equatable {
    /// <p>The name of an AWS CodeDeploy application associated with the IAM user or AWS
    ///             account.</p>
    public let applicationName: String?
    /// <p>The name of a deployment group for the specified application.</p>
    public let deploymentGroupName: String?

    public init (
        applicationName: String? = nil,
        deploymentGroupName: String? = nil
    )
    {
        self.applicationName = applicationName
        self.deploymentGroupName = deploymentGroupName
    }
}

struct DeleteDeploymentGroupInputBody: Equatable {
    public let applicationName: String?
    public let deploymentGroupName: String?
}

extension DeleteDeploymentGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case deploymentGroupName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let deploymentGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentGroupName)
        deploymentGroupName = deploymentGroupNameDecoded
    }
}

extension DeleteDeploymentGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDeploymentGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupNameRequiredException" : self = .deploymentGroupNameRequiredException(try DeploymentGroupNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentGroupNameException" : self = .invalidDeploymentGroupNameException(try InvalidDeploymentGroupNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRoleException" : self = .invalidRoleException(try InvalidRoleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDeploymentGroupOutputError: Equatable {
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case deploymentGroupNameRequiredException(DeploymentGroupNameRequiredException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidDeploymentGroupNameException(InvalidDeploymentGroupNameException)
    case invalidRoleException(InvalidRoleException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDeploymentGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteDeploymentGroupOutputResponse(hooksNotCleanedUp: \(String(describing: hooksNotCleanedUp)))"}
}

extension DeleteDeploymentGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeleteDeploymentGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.hooksNotCleanedUp = output.hooksNotCleanedUp
        } else {
            self.hooksNotCleanedUp = nil
        }
    }
}

/// <p>Represents the output of a <code>DeleteDeploymentGroup</code> operation.</p>
public struct DeleteDeploymentGroupOutputResponse: Equatable {
    /// <p>If the output contains no data, and the corresponding deployment group contained at
    ///             least one Auto Scaling group, AWS CodeDeploy successfully removed all corresponding Auto
    ///             Scaling lifecycle event hooks from the Amazon EC2 instances in the Auto Scaling group.
    ///             If the output contains data, AWS CodeDeploy could not remove some Auto Scaling lifecycle
    ///             event hooks from the Amazon EC2 instances in the Auto Scaling group.</p>
    public let hooksNotCleanedUp: [AutoScalingGroup]?

    public init (
        hooksNotCleanedUp: [AutoScalingGroup]? = nil
    )
    {
        self.hooksNotCleanedUp = hooksNotCleanedUp
    }
}

struct DeleteDeploymentGroupOutputResponseBody: Equatable {
    public let hooksNotCleanedUp: [AutoScalingGroup]?
}

extension DeleteDeploymentGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case hooksNotCleanedUp
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hooksNotCleanedUpContainer = try containerValues.decodeIfPresent([AutoScalingGroup?].self, forKey: .hooksNotCleanedUp)
        var hooksNotCleanedUpDecoded0:[AutoScalingGroup]? = nil
        if let hooksNotCleanedUpContainer = hooksNotCleanedUpContainer {
            hooksNotCleanedUpDecoded0 = [AutoScalingGroup]()
            for structure0 in hooksNotCleanedUpContainer {
                if let structure0 = structure0 {
                    hooksNotCleanedUpDecoded0?.append(structure0)
                }
            }
        }
        hooksNotCleanedUp = hooksNotCleanedUpDecoded0
    }
}

public struct DeleteGitHubAccountTokenInputBodyMiddleware: Middleware {
    public let id: String = "DeleteGitHubAccountTokenInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteGitHubAccountTokenInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteGitHubAccountTokenOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteGitHubAccountTokenInput>
    public typealias MOutput = OperationOutput<DeleteGitHubAccountTokenOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteGitHubAccountTokenOutputError>
}

extension DeleteGitHubAccountTokenInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteGitHubAccountTokenInput(tokenName: \(String(describing: tokenName)))"}
}

extension DeleteGitHubAccountTokenInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case tokenName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tokenName = tokenName {
            try encodeContainer.encode(tokenName, forKey: .tokenName)
        }
    }
}

public struct DeleteGitHubAccountTokenInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteGitHubAccountTokenInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteGitHubAccountTokenInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteGitHubAccountTokenOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteGitHubAccountTokenInput>
    public typealias MOutput = OperationOutput<DeleteGitHubAccountTokenOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteGitHubAccountTokenOutputError>
}

public struct DeleteGitHubAccountTokenInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteGitHubAccountTokenInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteGitHubAccountTokenInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteGitHubAccountTokenOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteGitHubAccountTokenInput>
    public typealias MOutput = OperationOutput<DeleteGitHubAccountTokenOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteGitHubAccountTokenOutputError>
}

/// <p>Represents the input of a <code>DeleteGitHubAccount</code> operation.</p>
public struct DeleteGitHubAccountTokenInput: Equatable {
    /// <p>The name of the GitHub account connection to delete.</p>
    public let tokenName: String?

    public init (
        tokenName: String? = nil
    )
    {
        self.tokenName = tokenName
    }
}

struct DeleteGitHubAccountTokenInputBody: Equatable {
    public let tokenName: String?
}

extension DeleteGitHubAccountTokenInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tokenName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tokenNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tokenName)
        tokenName = tokenNameDecoded
    }
}

extension DeleteGitHubAccountTokenOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteGitHubAccountTokenOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "GitHubAccountTokenDoesNotExistException" : self = .gitHubAccountTokenDoesNotExistException(try GitHubAccountTokenDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GitHubAccountTokenNameRequiredException" : self = .gitHubAccountTokenNameRequiredException(try GitHubAccountTokenNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGitHubAccountTokenNameException" : self = .invalidGitHubAccountTokenNameException(try InvalidGitHubAccountTokenNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotSupportedException" : self = .operationNotSupportedException(try OperationNotSupportedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceValidationException" : self = .resourceValidationException(try ResourceValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteGitHubAccountTokenOutputError: Equatable {
    case gitHubAccountTokenDoesNotExistException(GitHubAccountTokenDoesNotExistException)
    case gitHubAccountTokenNameRequiredException(GitHubAccountTokenNameRequiredException)
    case invalidGitHubAccountTokenNameException(InvalidGitHubAccountTokenNameException)
    case operationNotSupportedException(OperationNotSupportedException)
    case resourceValidationException(ResourceValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteGitHubAccountTokenOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteGitHubAccountTokenOutputResponse(tokenName: \(String(describing: tokenName)))"}
}

extension DeleteGitHubAccountTokenOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeleteGitHubAccountTokenOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.tokenName = output.tokenName
        } else {
            self.tokenName = nil
        }
    }
}

/// <p>Represents the output of a <code>DeleteGitHubAccountToken</code> operation.</p>
public struct DeleteGitHubAccountTokenOutputResponse: Equatable {
    /// <p>The name of the GitHub account connection that was deleted.</p>
    public let tokenName: String?

    public init (
        tokenName: String? = nil
    )
    {
        self.tokenName = tokenName
    }
}

struct DeleteGitHubAccountTokenOutputResponseBody: Equatable {
    public let tokenName: String?
}

extension DeleteGitHubAccountTokenOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tokenName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tokenNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tokenName)
        tokenName = tokenNameDecoded
    }
}

public struct DeleteResourcesByExternalIdInputBodyMiddleware: Middleware {
    public let id: String = "DeleteResourcesByExternalIdInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteResourcesByExternalIdInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteResourcesByExternalIdOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteResourcesByExternalIdInput>
    public typealias MOutput = OperationOutput<DeleteResourcesByExternalIdOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteResourcesByExternalIdOutputError>
}

extension DeleteResourcesByExternalIdInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteResourcesByExternalIdInput(externalId: \(String(describing: externalId)))"}
}

extension DeleteResourcesByExternalIdInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case externalId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let externalId = externalId {
            try encodeContainer.encode(externalId, forKey: .externalId)
        }
    }
}

public struct DeleteResourcesByExternalIdInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteResourcesByExternalIdInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteResourcesByExternalIdInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteResourcesByExternalIdOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteResourcesByExternalIdInput>
    public typealias MOutput = OperationOutput<DeleteResourcesByExternalIdOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteResourcesByExternalIdOutputError>
}

public struct DeleteResourcesByExternalIdInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteResourcesByExternalIdInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteResourcesByExternalIdInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteResourcesByExternalIdOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteResourcesByExternalIdInput>
    public typealias MOutput = OperationOutput<DeleteResourcesByExternalIdOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteResourcesByExternalIdOutputError>
}

public struct DeleteResourcesByExternalIdInput: Equatable {
    /// <p>The unique ID of an external resource (for example, a CloudFormation stack ID) that is
    ///             linked to one or more CodeDeploy resources.</p>
    public let externalId: String?

    public init (
        externalId: String? = nil
    )
    {
        self.externalId = externalId
    }
}

struct DeleteResourcesByExternalIdInputBody: Equatable {
    public let externalId: String?
}

extension DeleteResourcesByExternalIdInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case externalId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let externalIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .externalId)
        externalId = externalIdDecoded
    }
}

extension DeleteResourcesByExternalIdOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteResourcesByExternalIdOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteResourcesByExternalIdOutputError: Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteResourcesByExternalIdOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteResourcesByExternalIdOutputResponse()"}
}

extension DeleteResourcesByExternalIdOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteResourcesByExternalIdOutputResponse: Equatable {

    public init() {}
}

struct DeleteResourcesByExternalIdOutputResponseBody: Equatable {
}

extension DeleteResourcesByExternalIdOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeploymentAlreadyCompletedException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentAlreadyCompletedException(message: \(String(describing: message)))"}
}

extension DeploymentAlreadyCompletedException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeploymentAlreadyCompletedExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The deployment is already complete.</p>
public struct DeploymentAlreadyCompletedException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentAlreadyCompletedExceptionBody: Equatable {
    public let message: String?
}

extension DeploymentAlreadyCompletedExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentConfigAlreadyExistsException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentConfigAlreadyExistsException(message: \(String(describing: message)))"}
}

extension DeploymentConfigAlreadyExistsException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeploymentConfigAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A deployment configuration with the specified name with the IAM user or AWS account
///             already exists.</p>
public struct DeploymentConfigAlreadyExistsException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentConfigAlreadyExistsExceptionBody: Equatable {
    public let message: String?
}

extension DeploymentConfigAlreadyExistsExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentConfigDoesNotExistException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentConfigDoesNotExistException(message: \(String(describing: message)))"}
}

extension DeploymentConfigDoesNotExistException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeploymentConfigDoesNotExistExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The deployment configuration does not exist with the IAM user or AWS account.</p>
public struct DeploymentConfigDoesNotExistException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentConfigDoesNotExistExceptionBody: Equatable {
    public let message: String?
}

extension DeploymentConfigDoesNotExistExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentConfigInUseException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentConfigInUseException(message: \(String(describing: message)))"}
}

extension DeploymentConfigInUseException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeploymentConfigInUseExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The deployment configuration is still in use.</p>
public struct DeploymentConfigInUseException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentConfigInUseExceptionBody: Equatable {
    public let message: String?
}

extension DeploymentConfigInUseExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentConfigInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case computePlatform
        case createTime
        case deploymentConfigId
        case deploymentConfigName
        case minimumHealthyHosts
        case trafficRoutingConfig
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computePlatform = computePlatform {
            try encodeContainer.encode(computePlatform.rawValue, forKey: .computePlatform)
        }
        if let createTime = createTime {
            try encodeContainer.encode(createTime.timeIntervalSince1970, forKey: .createTime)
        }
        if let deploymentConfigId = deploymentConfigId {
            try encodeContainer.encode(deploymentConfigId, forKey: .deploymentConfigId)
        }
        if let deploymentConfigName = deploymentConfigName {
            try encodeContainer.encode(deploymentConfigName, forKey: .deploymentConfigName)
        }
        if let minimumHealthyHosts = minimumHealthyHosts {
            try encodeContainer.encode(minimumHealthyHosts, forKey: .minimumHealthyHosts)
        }
        if let trafficRoutingConfig = trafficRoutingConfig {
            try encodeContainer.encode(trafficRoutingConfig, forKey: .trafficRoutingConfig)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentConfigIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentConfigId)
        deploymentConfigId = deploymentConfigIdDecoded
        let deploymentConfigNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentConfigName)
        deploymentConfigName = deploymentConfigNameDecoded
        let minimumHealthyHostsDecoded = try containerValues.decodeIfPresent(MinimumHealthyHosts.self, forKey: .minimumHealthyHosts)
        minimumHealthyHosts = minimumHealthyHostsDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createTime)
        createTime = createTimeDecoded
        let computePlatformDecoded = try containerValues.decodeIfPresent(ComputePlatform.self, forKey: .computePlatform)
        computePlatform = computePlatformDecoded
        let trafficRoutingConfigDecoded = try containerValues.decodeIfPresent(TrafficRoutingConfig.self, forKey: .trafficRoutingConfig)
        trafficRoutingConfig = trafficRoutingConfigDecoded
    }
}

extension DeploymentConfigInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentConfigInfo(computePlatform: \(String(describing: computePlatform)), createTime: \(String(describing: createTime)), deploymentConfigId: \(String(describing: deploymentConfigId)), deploymentConfigName: \(String(describing: deploymentConfigName)), minimumHealthyHosts: \(String(describing: minimumHealthyHosts)), trafficRoutingConfig: \(String(describing: trafficRoutingConfig)))"}
}

/// <p>Information about a deployment configuration.</p>
public struct DeploymentConfigInfo: Equatable {
    /// <p>The destination platform type for the deployment (<code>Lambda</code>,
    ///                 <code>Server</code>, or <code>ECS</code>).</p>
    public let computePlatform: ComputePlatform?
    /// <p>The time at which the deployment configuration was created.</p>
    public let createTime: Date?
    /// <p>The deployment configuration ID.</p>
    public let deploymentConfigId: String?
    /// <p>The deployment configuration name.</p>
    public let deploymentConfigName: String?
    /// <p>Information about the number or percentage of minimum healthy instance.</p>
    public let minimumHealthyHosts: MinimumHealthyHosts?
    /// <p>The configuration that specifies how the deployment traffic is routed. Used for
    ///             deployments with a Lambda or ECS compute platform only.</p>
    public let trafficRoutingConfig: TrafficRoutingConfig?

    public init (
        computePlatform: ComputePlatform? = nil,
        createTime: Date? = nil,
        deploymentConfigId: String? = nil,
        deploymentConfigName: String? = nil,
        minimumHealthyHosts: MinimumHealthyHosts? = nil,
        trafficRoutingConfig: TrafficRoutingConfig? = nil
    )
    {
        self.computePlatform = computePlatform
        self.createTime = createTime
        self.deploymentConfigId = deploymentConfigId
        self.deploymentConfigName = deploymentConfigName
        self.minimumHealthyHosts = minimumHealthyHosts
        self.trafficRoutingConfig = trafficRoutingConfig
    }
}

extension DeploymentConfigLimitExceededException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentConfigLimitExceededException(message: \(String(describing: message)))"}
}

extension DeploymentConfigLimitExceededException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeploymentConfigLimitExceededExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The deployment configurations limit was exceeded.</p>
public struct DeploymentConfigLimitExceededException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentConfigLimitExceededExceptionBody: Equatable {
    public let message: String?
}

extension DeploymentConfigLimitExceededExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentConfigNameRequiredException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentConfigNameRequiredException(message: \(String(describing: message)))"}
}

extension DeploymentConfigNameRequiredException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeploymentConfigNameRequiredExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The deployment configuration name was not specified.</p>
public struct DeploymentConfigNameRequiredException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentConfigNameRequiredExceptionBody: Equatable {
    public let message: String?
}

extension DeploymentConfigNameRequiredExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum DeploymentCreator {
    case autoscaling
    case cloudformation
    case cloudformationrollback
    case codedeploy
    case codedeployautoupdate
    case codedeployrollback
    case user
    case sdkUnknown(String)
}

extension DeploymentCreator : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DeploymentCreator] {
        return [
            .autoscaling,
            .cloudformation,
            .cloudformationrollback,
            .codedeploy,
            .codedeployautoupdate,
            .codedeployrollback,
            .user,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .autoscaling: return "autoscaling"
        case .cloudformation: return "CloudFormation"
        case .cloudformationrollback: return "CloudFormationRollback"
        case .codedeploy: return "CodeDeploy"
        case .codedeployautoupdate: return "CodeDeployAutoUpdate"
        case .codedeployrollback: return "codeDeployRollback"
        case .user: return "user"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DeploymentCreator(rawValue: rawValue) ?? DeploymentCreator.sdkUnknown(rawValue)
    }
}

extension DeploymentDoesNotExistException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentDoesNotExistException(message: \(String(describing: message)))"}
}

extension DeploymentDoesNotExistException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeploymentDoesNotExistExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The deployment with the IAM user or AWS account does not exist.</p>
public struct DeploymentDoesNotExistException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentDoesNotExistExceptionBody: Equatable {
    public let message: String?
}

extension DeploymentDoesNotExistExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentGroupAlreadyExistsException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentGroupAlreadyExistsException(message: \(String(describing: message)))"}
}

extension DeploymentGroupAlreadyExistsException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeploymentGroupAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A deployment group with the specified name with the IAM user or AWS account already
///             exists.</p>
public struct DeploymentGroupAlreadyExistsException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentGroupAlreadyExistsExceptionBody: Equatable {
    public let message: String?
}

extension DeploymentGroupAlreadyExistsExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentGroupDoesNotExistException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentGroupDoesNotExistException(message: \(String(describing: message)))"}
}

extension DeploymentGroupDoesNotExistException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeploymentGroupDoesNotExistExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The named deployment group with the IAM user or AWS account does not exist.</p>
public struct DeploymentGroupDoesNotExistException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentGroupDoesNotExistExceptionBody: Equatable {
    public let message: String?
}

extension DeploymentGroupDoesNotExistExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentGroupInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alarmConfiguration
        case applicationName
        case autoRollbackConfiguration
        case autoScalingGroups
        case blueGreenDeploymentConfiguration
        case computePlatform
        case deploymentConfigName
        case deploymentGroupId
        case deploymentGroupName
        case deploymentStyle
        case ec2TagFilters
        case ec2TagSet
        case ecsServices
        case lastAttemptedDeployment
        case lastSuccessfulDeployment
        case loadBalancerInfo
        case onPremisesInstanceTagFilters
        case onPremisesTagSet
        case outdatedInstancesStrategy
        case serviceRoleArn
        case targetRevision
        case triggerConfigurations
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmConfiguration = alarmConfiguration {
            try encodeContainer.encode(alarmConfiguration, forKey: .alarmConfiguration)
        }
        if let applicationName = applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let autoRollbackConfiguration = autoRollbackConfiguration {
            try encodeContainer.encode(autoRollbackConfiguration, forKey: .autoRollbackConfiguration)
        }
        if let autoScalingGroups = autoScalingGroups {
            var autoScalingGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .autoScalingGroups)
            for autoscalinggrouplist0 in autoScalingGroups {
                try autoScalingGroupsContainer.encode(autoscalinggrouplist0)
            }
        }
        if let blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration {
            try encodeContainer.encode(blueGreenDeploymentConfiguration, forKey: .blueGreenDeploymentConfiguration)
        }
        if let computePlatform = computePlatform {
            try encodeContainer.encode(computePlatform.rawValue, forKey: .computePlatform)
        }
        if let deploymentConfigName = deploymentConfigName {
            try encodeContainer.encode(deploymentConfigName, forKey: .deploymentConfigName)
        }
        if let deploymentGroupId = deploymentGroupId {
            try encodeContainer.encode(deploymentGroupId, forKey: .deploymentGroupId)
        }
        if let deploymentGroupName = deploymentGroupName {
            try encodeContainer.encode(deploymentGroupName, forKey: .deploymentGroupName)
        }
        if let deploymentStyle = deploymentStyle {
            try encodeContainer.encode(deploymentStyle, forKey: .deploymentStyle)
        }
        if let ec2TagFilters = ec2TagFilters {
            var ec2TagFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2TagFilters)
            for ec2tagfilterlist0 in ec2TagFilters {
                try ec2TagFiltersContainer.encode(ec2tagfilterlist0)
            }
        }
        if let ec2TagSet = ec2TagSet {
            try encodeContainer.encode(ec2TagSet, forKey: .ec2TagSet)
        }
        if let ecsServices = ecsServices {
            var ecsServicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ecsServices)
            for ecsservicelist0 in ecsServices {
                try ecsServicesContainer.encode(ecsservicelist0)
            }
        }
        if let lastAttemptedDeployment = lastAttemptedDeployment {
            try encodeContainer.encode(lastAttemptedDeployment, forKey: .lastAttemptedDeployment)
        }
        if let lastSuccessfulDeployment = lastSuccessfulDeployment {
            try encodeContainer.encode(lastSuccessfulDeployment, forKey: .lastSuccessfulDeployment)
        }
        if let loadBalancerInfo = loadBalancerInfo {
            try encodeContainer.encode(loadBalancerInfo, forKey: .loadBalancerInfo)
        }
        if let onPremisesInstanceTagFilters = onPremisesInstanceTagFilters {
            var onPremisesInstanceTagFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .onPremisesInstanceTagFilters)
            for tagfilterlist0 in onPremisesInstanceTagFilters {
                try onPremisesInstanceTagFiltersContainer.encode(tagfilterlist0)
            }
        }
        if let onPremisesTagSet = onPremisesTagSet {
            try encodeContainer.encode(onPremisesTagSet, forKey: .onPremisesTagSet)
        }
        if let outdatedInstancesStrategy = outdatedInstancesStrategy {
            try encodeContainer.encode(outdatedInstancesStrategy.rawValue, forKey: .outdatedInstancesStrategy)
        }
        if let serviceRoleArn = serviceRoleArn {
            try encodeContainer.encode(serviceRoleArn, forKey: .serviceRoleArn)
        }
        if let targetRevision = targetRevision {
            try encodeContainer.encode(targetRevision, forKey: .targetRevision)
        }
        if let triggerConfigurations = triggerConfigurations {
            var triggerConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .triggerConfigurations)
            for triggerconfiglist0 in triggerConfigurations {
                try triggerConfigurationsContainer.encode(triggerconfiglist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let deploymentGroupIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentGroupId)
        deploymentGroupId = deploymentGroupIdDecoded
        let deploymentGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentGroupName)
        deploymentGroupName = deploymentGroupNameDecoded
        let deploymentConfigNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentConfigName)
        deploymentConfigName = deploymentConfigNameDecoded
        let ec2TagFiltersContainer = try containerValues.decodeIfPresent([EC2TagFilter?].self, forKey: .ec2TagFilters)
        var ec2TagFiltersDecoded0:[EC2TagFilter]? = nil
        if let ec2TagFiltersContainer = ec2TagFiltersContainer {
            ec2TagFiltersDecoded0 = [EC2TagFilter]()
            for structure0 in ec2TagFiltersContainer {
                if let structure0 = structure0 {
                    ec2TagFiltersDecoded0?.append(structure0)
                }
            }
        }
        ec2TagFilters = ec2TagFiltersDecoded0
        let onPremisesInstanceTagFiltersContainer = try containerValues.decodeIfPresent([TagFilter?].self, forKey: .onPremisesInstanceTagFilters)
        var onPremisesInstanceTagFiltersDecoded0:[TagFilter]? = nil
        if let onPremisesInstanceTagFiltersContainer = onPremisesInstanceTagFiltersContainer {
            onPremisesInstanceTagFiltersDecoded0 = [TagFilter]()
            for structure0 in onPremisesInstanceTagFiltersContainer {
                if let structure0 = structure0 {
                    onPremisesInstanceTagFiltersDecoded0?.append(structure0)
                }
            }
        }
        onPremisesInstanceTagFilters = onPremisesInstanceTagFiltersDecoded0
        let autoScalingGroupsContainer = try containerValues.decodeIfPresent([AutoScalingGroup?].self, forKey: .autoScalingGroups)
        var autoScalingGroupsDecoded0:[AutoScalingGroup]? = nil
        if let autoScalingGroupsContainer = autoScalingGroupsContainer {
            autoScalingGroupsDecoded0 = [AutoScalingGroup]()
            for structure0 in autoScalingGroupsContainer {
                if let structure0 = structure0 {
                    autoScalingGroupsDecoded0?.append(structure0)
                }
            }
        }
        autoScalingGroups = autoScalingGroupsDecoded0
        let serviceRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRoleArn)
        serviceRoleArn = serviceRoleArnDecoded
        let targetRevisionDecoded = try containerValues.decodeIfPresent(RevisionLocation.self, forKey: .targetRevision)
        targetRevision = targetRevisionDecoded
        let triggerConfigurationsContainer = try containerValues.decodeIfPresent([TriggerConfig?].self, forKey: .triggerConfigurations)
        var triggerConfigurationsDecoded0:[TriggerConfig]? = nil
        if let triggerConfigurationsContainer = triggerConfigurationsContainer {
            triggerConfigurationsDecoded0 = [TriggerConfig]()
            for structure0 in triggerConfigurationsContainer {
                if let structure0 = structure0 {
                    triggerConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        triggerConfigurations = triggerConfigurationsDecoded0
        let alarmConfigurationDecoded = try containerValues.decodeIfPresent(AlarmConfiguration.self, forKey: .alarmConfiguration)
        alarmConfiguration = alarmConfigurationDecoded
        let autoRollbackConfigurationDecoded = try containerValues.decodeIfPresent(AutoRollbackConfiguration.self, forKey: .autoRollbackConfiguration)
        autoRollbackConfiguration = autoRollbackConfigurationDecoded
        let deploymentStyleDecoded = try containerValues.decodeIfPresent(DeploymentStyle.self, forKey: .deploymentStyle)
        deploymentStyle = deploymentStyleDecoded
        let outdatedInstancesStrategyDecoded = try containerValues.decodeIfPresent(OutdatedInstancesStrategy.self, forKey: .outdatedInstancesStrategy)
        outdatedInstancesStrategy = outdatedInstancesStrategyDecoded
        let blueGreenDeploymentConfigurationDecoded = try containerValues.decodeIfPresent(BlueGreenDeploymentConfiguration.self, forKey: .blueGreenDeploymentConfiguration)
        blueGreenDeploymentConfiguration = blueGreenDeploymentConfigurationDecoded
        let loadBalancerInfoDecoded = try containerValues.decodeIfPresent(LoadBalancerInfo.self, forKey: .loadBalancerInfo)
        loadBalancerInfo = loadBalancerInfoDecoded
        let lastSuccessfulDeploymentDecoded = try containerValues.decodeIfPresent(LastDeploymentInfo.self, forKey: .lastSuccessfulDeployment)
        lastSuccessfulDeployment = lastSuccessfulDeploymentDecoded
        let lastAttemptedDeploymentDecoded = try containerValues.decodeIfPresent(LastDeploymentInfo.self, forKey: .lastAttemptedDeployment)
        lastAttemptedDeployment = lastAttemptedDeploymentDecoded
        let ec2TagSetDecoded = try containerValues.decodeIfPresent(EC2TagSet.self, forKey: .ec2TagSet)
        ec2TagSet = ec2TagSetDecoded
        let onPremisesTagSetDecoded = try containerValues.decodeIfPresent(OnPremisesTagSet.self, forKey: .onPremisesTagSet)
        onPremisesTagSet = onPremisesTagSetDecoded
        let computePlatformDecoded = try containerValues.decodeIfPresent(ComputePlatform.self, forKey: .computePlatform)
        computePlatform = computePlatformDecoded
        let ecsServicesContainer = try containerValues.decodeIfPresent([ECSService?].self, forKey: .ecsServices)
        var ecsServicesDecoded0:[ECSService]? = nil
        if let ecsServicesContainer = ecsServicesContainer {
            ecsServicesDecoded0 = [ECSService]()
            for structure0 in ecsServicesContainer {
                if let structure0 = structure0 {
                    ecsServicesDecoded0?.append(structure0)
                }
            }
        }
        ecsServices = ecsServicesDecoded0
    }
}

extension DeploymentGroupInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentGroupInfo(alarmConfiguration: \(String(describing: alarmConfiguration)), applicationName: \(String(describing: applicationName)), autoRollbackConfiguration: \(String(describing: autoRollbackConfiguration)), autoScalingGroups: \(String(describing: autoScalingGroups)), blueGreenDeploymentConfiguration: \(String(describing: blueGreenDeploymentConfiguration)), computePlatform: \(String(describing: computePlatform)), deploymentConfigName: \(String(describing: deploymentConfigName)), deploymentGroupId: \(String(describing: deploymentGroupId)), deploymentGroupName: \(String(describing: deploymentGroupName)), deploymentStyle: \(String(describing: deploymentStyle)), ec2TagFilters: \(String(describing: ec2TagFilters)), ec2TagSet: \(String(describing: ec2TagSet)), ecsServices: \(String(describing: ecsServices)), lastAttemptedDeployment: \(String(describing: lastAttemptedDeployment)), lastSuccessfulDeployment: \(String(describing: lastSuccessfulDeployment)), loadBalancerInfo: \(String(describing: loadBalancerInfo)), onPremisesInstanceTagFilters: \(String(describing: onPremisesInstanceTagFilters)), onPremisesTagSet: \(String(describing: onPremisesTagSet)), outdatedInstancesStrategy: \(String(describing: outdatedInstancesStrategy)), serviceRoleArn: \(String(describing: serviceRoleArn)), targetRevision: \(String(describing: targetRevision)), triggerConfigurations: \(String(describing: triggerConfigurations)))"}
}

/// <p>Information about a deployment group.</p>
public struct DeploymentGroupInfo: Equatable {
    /// <p>A list of alarms associated with the deployment group.</p>
    public let alarmConfiguration: AlarmConfiguration?
    /// <p>The application name.</p>
    public let applicationName: String?
    /// <p>Information about the automatic rollback configuration associated with the deployment
    ///             group.</p>
    public let autoRollbackConfiguration: AutoRollbackConfiguration?
    /// <p>A list of associated Auto Scaling groups.</p>
    public let autoScalingGroups: [AutoScalingGroup]?
    /// <p>Information about blue/green deployment options for a deployment group.</p>
    public let blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration?
    /// <p>The destination platform type for the deployment (<code>Lambda</code>,
    ///                 <code>Server</code>, or <code>ECS</code>).</p>
    public let computePlatform: ComputePlatform?
    /// <p>The deployment configuration name.</p>
    public let deploymentConfigName: String?
    /// <p>The deployment group ID.</p>
    public let deploymentGroupId: String?
    /// <p>The deployment group name.</p>
    public let deploymentGroupName: String?
    /// <p>Information about the type of deployment, either in-place or blue/green, you want to
    ///             run and whether to route deployment traffic behind a load balancer.</p>
    public let deploymentStyle: DeploymentStyle?
    /// <p>The Amazon EC2 tags on which to filter. The deployment group includes EC2 instances
    ///             with any of the specified tags.</p>
    public let ec2TagFilters: [EC2TagFilter]?
    /// <p>Information about groups of tags applied to an EC2 instance. The deployment group
    ///             includes only EC2 instances identified by all of the tag groups. Cannot be used in the
    ///             same call as ec2TagFilters.</p>
    public let ec2TagSet: EC2TagSet?
    /// <p> The target Amazon ECS services in the deployment group. This applies only to
    ///             deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service
    ///             is specified as an Amazon ECS cluster and service name pair using the format
    ///                 <code><clustername>:<servicename></code>. </p>
    public let ecsServices: [ECSService]?
    /// <p>Information about the most recent attempted deployment to the deployment group.</p>
    public let lastAttemptedDeployment: LastDeploymentInfo?
    /// <p>Information about the most recent successful deployment to the deployment
    ///             group.</p>
    public let lastSuccessfulDeployment: LastDeploymentInfo?
    /// <p>Information about the load balancer to use in a deployment.</p>
    public let loadBalancerInfo: LoadBalancerInfo?
    /// <p>The on-premises instance tags on which to filter. The deployment group includes
    ///             on-premises instances with any of the specified tags.</p>
    public let onPremisesInstanceTagFilters: [TagFilter]?
    /// <p>Information about groups of tags applied to an on-premises instance. The deployment
    ///             group includes only on-premises instances identified by all the tag groups. Cannot be
    ///             used in the same call as onPremisesInstanceTagFilters.</p>
    public let onPremisesTagSet: OnPremisesTagSet?
    /// <p>Indicates what happens when new EC2 instances are launched mid-deployment and do not
    ///             receive the deployed application revision.</p>
    ///         <p>If this option is set to <code>UPDATE</code> or is unspecified, CodeDeploy initiates
    ///             one or more 'auto-update outdated instances' deployments to apply the deployed
    ///             application revision to the new EC2 instances.</p>
    ///         <p>If this option is set to <code>IGNORE</code>, CodeDeploy does not initiate a
    ///             deployment to update the new EC2 instances. This may result in instances having
    ///             different revisions.</p>
    public let outdatedInstancesStrategy: OutdatedInstancesStrategy?
    /// <p>A service role Amazon Resource Name (ARN) that grants CodeDeploy permission to make
    ///             calls to AWS services on your behalf. For more information, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/getting-started-create-service-role.html">Create a
    ///                 Service Role for AWS CodeDeploy</a> in the <i>AWS CodeDeploy User
    ///                 Guide</i>.</p>
    public let serviceRoleArn: String?
    /// <p>Information about the deployment group's target revision, including type and
    ///             location.</p>
    public let targetRevision: RevisionLocation?
    /// <p>Information about triggers associated with the deployment group.</p>
    public let triggerConfigurations: [TriggerConfig]?

    public init (
        alarmConfiguration: AlarmConfiguration? = nil,
        applicationName: String? = nil,
        autoRollbackConfiguration: AutoRollbackConfiguration? = nil,
        autoScalingGroups: [AutoScalingGroup]? = nil,
        blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil,
        computePlatform: ComputePlatform? = nil,
        deploymentConfigName: String? = nil,
        deploymentGroupId: String? = nil,
        deploymentGroupName: String? = nil,
        deploymentStyle: DeploymentStyle? = nil,
        ec2TagFilters: [EC2TagFilter]? = nil,
        ec2TagSet: EC2TagSet? = nil,
        ecsServices: [ECSService]? = nil,
        lastAttemptedDeployment: LastDeploymentInfo? = nil,
        lastSuccessfulDeployment: LastDeploymentInfo? = nil,
        loadBalancerInfo: LoadBalancerInfo? = nil,
        onPremisesInstanceTagFilters: [TagFilter]? = nil,
        onPremisesTagSet: OnPremisesTagSet? = nil,
        outdatedInstancesStrategy: OutdatedInstancesStrategy? = nil,
        serviceRoleArn: String? = nil,
        targetRevision: RevisionLocation? = nil,
        triggerConfigurations: [TriggerConfig]? = nil
    )
    {
        self.alarmConfiguration = alarmConfiguration
        self.applicationName = applicationName
        self.autoRollbackConfiguration = autoRollbackConfiguration
        self.autoScalingGroups = autoScalingGroups
        self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
        self.computePlatform = computePlatform
        self.deploymentConfigName = deploymentConfigName
        self.deploymentGroupId = deploymentGroupId
        self.deploymentGroupName = deploymentGroupName
        self.deploymentStyle = deploymentStyle
        self.ec2TagFilters = ec2TagFilters
        self.ec2TagSet = ec2TagSet
        self.ecsServices = ecsServices
        self.lastAttemptedDeployment = lastAttemptedDeployment
        self.lastSuccessfulDeployment = lastSuccessfulDeployment
        self.loadBalancerInfo = loadBalancerInfo
        self.onPremisesInstanceTagFilters = onPremisesInstanceTagFilters
        self.onPremisesTagSet = onPremisesTagSet
        self.outdatedInstancesStrategy = outdatedInstancesStrategy
        self.serviceRoleArn = serviceRoleArn
        self.targetRevision = targetRevision
        self.triggerConfigurations = triggerConfigurations
    }
}

extension DeploymentGroupLimitExceededException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentGroupLimitExceededException(message: \(String(describing: message)))"}
}

extension DeploymentGroupLimitExceededException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeploymentGroupLimitExceededExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p> The deployment groups limit was exceeded.</p>
public struct DeploymentGroupLimitExceededException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentGroupLimitExceededExceptionBody: Equatable {
    public let message: String?
}

extension DeploymentGroupLimitExceededExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentGroupNameRequiredException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentGroupNameRequiredException(message: \(String(describing: message)))"}
}

extension DeploymentGroupNameRequiredException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeploymentGroupNameRequiredExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The deployment group name was not specified.</p>
public struct DeploymentGroupNameRequiredException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentGroupNameRequiredExceptionBody: Equatable {
    public let message: String?
}

extension DeploymentGroupNameRequiredExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentIdRequiredException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentIdRequiredException(message: \(String(describing: message)))"}
}

extension DeploymentIdRequiredException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeploymentIdRequiredExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>At least one deployment ID must be specified.</p>
public struct DeploymentIdRequiredException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentIdRequiredExceptionBody: Equatable {
    public let message: String?
}

extension DeploymentIdRequiredExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case additionalDeploymentStatusInfo
        case applicationName
        case autoRollbackConfiguration
        case blueGreenDeploymentConfiguration
        case completeTime
        case computePlatform
        case createTime
        case creator
        case deploymentConfigName
        case deploymentGroupName
        case deploymentId
        case deploymentOverview
        case deploymentStatusMessages
        case deploymentStyle
        case description
        case errorInformation
        case externalId
        case fileExistsBehavior
        case ignoreApplicationStopFailures
        case instanceTerminationWaitTimeStarted
        case loadBalancerInfo
        case previousRevision
        case relatedDeployments
        case revision
        case rollbackInfo
        case startTime
        case status
        case targetInstances
        case updateOutdatedInstancesOnly
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalDeploymentStatusInfo = additionalDeploymentStatusInfo {
            try encodeContainer.encode(additionalDeploymentStatusInfo, forKey: .additionalDeploymentStatusInfo)
        }
        if let applicationName = applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let autoRollbackConfiguration = autoRollbackConfiguration {
            try encodeContainer.encode(autoRollbackConfiguration, forKey: .autoRollbackConfiguration)
        }
        if let blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration {
            try encodeContainer.encode(blueGreenDeploymentConfiguration, forKey: .blueGreenDeploymentConfiguration)
        }
        if let completeTime = completeTime {
            try encodeContainer.encode(completeTime.timeIntervalSince1970, forKey: .completeTime)
        }
        if let computePlatform = computePlatform {
            try encodeContainer.encode(computePlatform.rawValue, forKey: .computePlatform)
        }
        if let createTime = createTime {
            try encodeContainer.encode(createTime.timeIntervalSince1970, forKey: .createTime)
        }
        if let creator = creator {
            try encodeContainer.encode(creator.rawValue, forKey: .creator)
        }
        if let deploymentConfigName = deploymentConfigName {
            try encodeContainer.encode(deploymentConfigName, forKey: .deploymentConfigName)
        }
        if let deploymentGroupName = deploymentGroupName {
            try encodeContainer.encode(deploymentGroupName, forKey: .deploymentGroupName)
        }
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let deploymentOverview = deploymentOverview {
            try encodeContainer.encode(deploymentOverview, forKey: .deploymentOverview)
        }
        if let deploymentStatusMessages = deploymentStatusMessages {
            var deploymentStatusMessagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deploymentStatusMessages)
            for deploymentstatusmessagelist0 in deploymentStatusMessages {
                try deploymentStatusMessagesContainer.encode(deploymentstatusmessagelist0)
            }
        }
        if let deploymentStyle = deploymentStyle {
            try encodeContainer.encode(deploymentStyle, forKey: .deploymentStyle)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let errorInformation = errorInformation {
            try encodeContainer.encode(errorInformation, forKey: .errorInformation)
        }
        if let externalId = externalId {
            try encodeContainer.encode(externalId, forKey: .externalId)
        }
        if let fileExistsBehavior = fileExistsBehavior {
            try encodeContainer.encode(fileExistsBehavior.rawValue, forKey: .fileExistsBehavior)
        }
        if ignoreApplicationStopFailures != false {
            try encodeContainer.encode(ignoreApplicationStopFailures, forKey: .ignoreApplicationStopFailures)
        }
        if instanceTerminationWaitTimeStarted != false {
            try encodeContainer.encode(instanceTerminationWaitTimeStarted, forKey: .instanceTerminationWaitTimeStarted)
        }
        if let loadBalancerInfo = loadBalancerInfo {
            try encodeContainer.encode(loadBalancerInfo, forKey: .loadBalancerInfo)
        }
        if let previousRevision = previousRevision {
            try encodeContainer.encode(previousRevision, forKey: .previousRevision)
        }
        if let relatedDeployments = relatedDeployments {
            try encodeContainer.encode(relatedDeployments, forKey: .relatedDeployments)
        }
        if let revision = revision {
            try encodeContainer.encode(revision, forKey: .revision)
        }
        if let rollbackInfo = rollbackInfo {
            try encodeContainer.encode(rollbackInfo, forKey: .rollbackInfo)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetInstances = targetInstances {
            try encodeContainer.encode(targetInstances, forKey: .targetInstances)
        }
        if updateOutdatedInstancesOnly != false {
            try encodeContainer.encode(updateOutdatedInstancesOnly, forKey: .updateOutdatedInstancesOnly)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let deploymentGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentGroupName)
        deploymentGroupName = deploymentGroupNameDecoded
        let deploymentConfigNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentConfigName)
        deploymentConfigName = deploymentConfigNameDecoded
        let deploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let previousRevisionDecoded = try containerValues.decodeIfPresent(RevisionLocation.self, forKey: .previousRevision)
        previousRevision = previousRevisionDecoded
        let revisionDecoded = try containerValues.decodeIfPresent(RevisionLocation.self, forKey: .revision)
        revision = revisionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DeploymentStatus.self, forKey: .status)
        status = statusDecoded
        let errorInformationDecoded = try containerValues.decodeIfPresent(ErrorInformation.self, forKey: .errorInformation)
        errorInformation = errorInformationDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createTime)
        createTime = createTimeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let completeTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .completeTime)
        completeTime = completeTimeDecoded
        let deploymentOverviewDecoded = try containerValues.decodeIfPresent(DeploymentOverview.self, forKey: .deploymentOverview)
        deploymentOverview = deploymentOverviewDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let creatorDecoded = try containerValues.decodeIfPresent(DeploymentCreator.self, forKey: .creator)
        creator = creatorDecoded
        let ignoreApplicationStopFailuresDecoded = try containerValues.decode(Bool.self, forKey: .ignoreApplicationStopFailures)
        ignoreApplicationStopFailures = ignoreApplicationStopFailuresDecoded
        let autoRollbackConfigurationDecoded = try containerValues.decodeIfPresent(AutoRollbackConfiguration.self, forKey: .autoRollbackConfiguration)
        autoRollbackConfiguration = autoRollbackConfigurationDecoded
        let updateOutdatedInstancesOnlyDecoded = try containerValues.decode(Bool.self, forKey: .updateOutdatedInstancesOnly)
        updateOutdatedInstancesOnly = updateOutdatedInstancesOnlyDecoded
        let rollbackInfoDecoded = try containerValues.decodeIfPresent(RollbackInfo.self, forKey: .rollbackInfo)
        rollbackInfo = rollbackInfoDecoded
        let deploymentStyleDecoded = try containerValues.decodeIfPresent(DeploymentStyle.self, forKey: .deploymentStyle)
        deploymentStyle = deploymentStyleDecoded
        let targetInstancesDecoded = try containerValues.decodeIfPresent(TargetInstances.self, forKey: .targetInstances)
        targetInstances = targetInstancesDecoded
        let instanceTerminationWaitTimeStartedDecoded = try containerValues.decode(Bool.self, forKey: .instanceTerminationWaitTimeStarted)
        instanceTerminationWaitTimeStarted = instanceTerminationWaitTimeStartedDecoded
        let blueGreenDeploymentConfigurationDecoded = try containerValues.decodeIfPresent(BlueGreenDeploymentConfiguration.self, forKey: .blueGreenDeploymentConfiguration)
        blueGreenDeploymentConfiguration = blueGreenDeploymentConfigurationDecoded
        let loadBalancerInfoDecoded = try containerValues.decodeIfPresent(LoadBalancerInfo.self, forKey: .loadBalancerInfo)
        loadBalancerInfo = loadBalancerInfoDecoded
        let additionalDeploymentStatusInfoDecoded = try containerValues.decodeIfPresent(String.self, forKey: .additionalDeploymentStatusInfo)
        additionalDeploymentStatusInfo = additionalDeploymentStatusInfoDecoded
        let fileExistsBehaviorDecoded = try containerValues.decodeIfPresent(FileExistsBehavior.self, forKey: .fileExistsBehavior)
        fileExistsBehavior = fileExistsBehaviorDecoded
        let deploymentStatusMessagesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .deploymentStatusMessages)
        var deploymentStatusMessagesDecoded0:[String]? = nil
        if let deploymentStatusMessagesContainer = deploymentStatusMessagesContainer {
            deploymentStatusMessagesDecoded0 = [String]()
            for string0 in deploymentStatusMessagesContainer {
                if let string0 = string0 {
                    deploymentStatusMessagesDecoded0?.append(string0)
                }
            }
        }
        deploymentStatusMessages = deploymentStatusMessagesDecoded0
        let computePlatformDecoded = try containerValues.decodeIfPresent(ComputePlatform.self, forKey: .computePlatform)
        computePlatform = computePlatformDecoded
        let externalIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .externalId)
        externalId = externalIdDecoded
        let relatedDeploymentsDecoded = try containerValues.decodeIfPresent(RelatedDeployments.self, forKey: .relatedDeployments)
        relatedDeployments = relatedDeploymentsDecoded
    }
}

extension DeploymentInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentInfo(additionalDeploymentStatusInfo: \(String(describing: additionalDeploymentStatusInfo)), applicationName: \(String(describing: applicationName)), autoRollbackConfiguration: \(String(describing: autoRollbackConfiguration)), blueGreenDeploymentConfiguration: \(String(describing: blueGreenDeploymentConfiguration)), completeTime: \(String(describing: completeTime)), computePlatform: \(String(describing: computePlatform)), createTime: \(String(describing: createTime)), creator: \(String(describing: creator)), deploymentConfigName: \(String(describing: deploymentConfigName)), deploymentGroupName: \(String(describing: deploymentGroupName)), deploymentId: \(String(describing: deploymentId)), deploymentOverview: \(String(describing: deploymentOverview)), deploymentStatusMessages: \(String(describing: deploymentStatusMessages)), deploymentStyle: \(String(describing: deploymentStyle)), description: \(String(describing: description)), errorInformation: \(String(describing: errorInformation)), externalId: \(String(describing: externalId)), fileExistsBehavior: \(String(describing: fileExistsBehavior)), ignoreApplicationStopFailures: \(String(describing: ignoreApplicationStopFailures)), instanceTerminationWaitTimeStarted: \(String(describing: instanceTerminationWaitTimeStarted)), loadBalancerInfo: \(String(describing: loadBalancerInfo)), previousRevision: \(String(describing: previousRevision)), relatedDeployments: \(String(describing: relatedDeployments)), revision: \(String(describing: revision)), rollbackInfo: \(String(describing: rollbackInfo)), startTime: \(String(describing: startTime)), status: \(String(describing: status)), targetInstances: \(String(describing: targetInstances)), updateOutdatedInstancesOnly: \(String(describing: updateOutdatedInstancesOnly)))"}
}

/// <p>Information about a deployment.</p>
public struct DeploymentInfo: Equatable {
    /// <p>Provides information about the results of a deployment, such as whether instances in
    ///             the original environment in a blue/green deployment were not terminated.</p>
    @available(*, deprecated)
    public let additionalDeploymentStatusInfo: String?
    /// <p>The application name.</p>
    public let applicationName: String?
    /// <p>Information about the automatic rollback configuration associated with the
    ///             deployment.</p>
    public let autoRollbackConfiguration: AutoRollbackConfiguration?
    /// <p>Information about blue/green deployment options for this deployment.</p>
    public let blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration?
    /// <p>A timestamp that indicates when the deployment was complete.</p>
    public let completeTime: Date?
    /// <p>The destination platform type for the deployment (<code>Lambda</code>,
    ///                 <code>Server</code>, or <code>ECS</code>).</p>
    public let computePlatform: ComputePlatform?
    /// <p>A timestamp that indicates when the deployment was created.</p>
    public let createTime: Date?
    /// <p>The means by which the deployment was created:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>user</code>: A user created the deployment.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>autoscaling</code>: Amazon EC2 Auto Scaling created the
    ///                     deployment.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>codeDeployRollback</code>: A rollback process created the
    ///                     deployment.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>CodeDeployAutoUpdate</code>: An auto-update process created the
    ///                     deployment when it detected outdated EC2 instances.</p>
    ///             </li>
    ///          </ul>
    public let creator: DeploymentCreator?
    /// <p> The deployment configuration name. </p>
    public let deploymentConfigName: String?
    /// <p> The deployment group name. </p>
    public let deploymentGroupName: String?
    /// <p> The unique ID of a deployment. </p>
    public let deploymentId: String?
    /// <p>A summary of the deployment status of the instances in the deployment.</p>
    public let deploymentOverview: DeploymentOverview?
    /// <p>Messages that contain information about the status of a deployment.</p>
    public let deploymentStatusMessages: [String]?
    /// <p>Information about the type of deployment, either in-place or blue/green, you want to
    ///             run and whether to route deployment traffic behind a load balancer.</p>
    public let deploymentStyle: DeploymentStyle?
    /// <p>A comment about the deployment.</p>
    public let description: String?
    /// <p>Information about any error associated with this deployment.</p>
    public let errorInformation: ErrorInformation?
    /// <p>The unique ID for an external resource (for example, a CloudFormation stack ID) that
    ///             is linked to this deployment.</p>
    public let externalId: String?
    /// <p>Information about how AWS CodeDeploy handles files that already exist in a deployment
    ///             target location but weren't part of the previous successful deployment.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>DISALLOW</code>: The deployment fails. This is also the default behavior
    ///                     if no option is specified.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>OVERWRITE</code>: The version of the file from the application revision
    ///                     currently being deployed replaces the version already on the instance.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>RETAIN</code>: The version of the file already on the instance is kept
    ///                     and used as part of the new deployment.</p>
    ///             </li>
    ///          </ul>
    public let fileExistsBehavior: FileExistsBehavior?
    /// <p> If true, then if an <code>ApplicationStop</code>, <code>BeforeBlockTraffic</code>, or
    ///                 <code>AfterBlockTraffic</code> deployment lifecycle event to an instance fails, then
    ///             the deployment continues to the next deployment lifecycle event. For example, if
    ///                 <code>ApplicationStop</code> fails, the deployment continues with DownloadBundle. If
    ///                 <code>BeforeBlockTraffic</code> fails, the deployment continues with
    ///                 <code>BlockTraffic</code>. If <code>AfterBlockTraffic</code> fails, the deployment
    ///             continues with <code>ApplicationStop</code>. </p>
    ///
    ///         <p> If false or not specified, then if a lifecycle event fails during a deployment to an
    ///             instance, that deployment fails. If deployment to that instance is part of an overall
    ///             deployment and the number of healthy hosts is not less than the minimum number of
    ///             healthy hosts, then a deployment to the next instance is attempted. </p>
    ///
    ///         <p> During a deployment, the AWS CodeDeploy agent runs the scripts specified for
    ///                 <code>ApplicationStop</code>, <code>BeforeBlockTraffic</code>, and
    ///                 <code>AfterBlockTraffic</code> in the AppSpec file from the previous successful
    ///             deployment. (All other scripts are run from the AppSpec file in the current deployment.)
    ///             If one of these scripts contains an error and does not run successfully, the deployment
    ///             can fail. </p>
    ///
    ///         <p> If the cause of the failure is a script from the last successful deployment that will
    ///             never run successfully, create a new deployment and use
    ///                 <code>ignoreApplicationStopFailures</code> to specify that the
    ///                 <code>ApplicationStop</code>, <code>BeforeBlockTraffic</code>, and
    ///                 <code>AfterBlockTraffic</code> failures should be ignored. </p>
    public let ignoreApplicationStopFailures: Bool
    /// <p>Indicates whether the wait period set for the termination of instances in the original
    ///             environment has started. Status is 'false' if the KEEP_ALIVE option is specified.
    ///             Otherwise, 'true' as soon as the termination wait period starts.</p>
    public let instanceTerminationWaitTimeStarted: Bool
    /// <p>Information about the load balancer used in the deployment.</p>
    public let loadBalancerInfo: LoadBalancerInfo?
    /// <p>Information about the application revision that was deployed to the deployment group
    ///             before the most recent successful deployment.</p>
    public let previousRevision: RevisionLocation?
    /// <p>Information about deployments related to the specified deployment.</p>
    public let relatedDeployments: RelatedDeployments?
    /// <p>Information about the location of stored application artifacts and the service from
    ///             which to retrieve them.</p>
    public let revision: RevisionLocation?
    /// <p>Information about a deployment rollback.</p>
    public let rollbackInfo: RollbackInfo?
    /// <p>A timestamp that indicates when the deployment was deployed to the deployment
    ///             group.</p>
    ///         <p>In some cases, the reported value of the start time might be later than the complete
    ///             time. This is due to differences in the clock settings of backend servers that
    ///             participate in the deployment process.</p>
    public let startTime: Date?
    /// <p>The current state of the deployment as a whole.</p>
    public let status: DeploymentStatus?
    /// <p>Information about the instances that belong to the replacement environment in a
    ///             blue/green deployment.</p>
    public let targetInstances: TargetInstances?
    /// <p>Indicates whether only instances that are not running the latest application revision
    ///             are to be deployed to.</p>
    public let updateOutdatedInstancesOnly: Bool

    public init (
        additionalDeploymentStatusInfo: String? = nil,
        applicationName: String? = nil,
        autoRollbackConfiguration: AutoRollbackConfiguration? = nil,
        blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil,
        completeTime: Date? = nil,
        computePlatform: ComputePlatform? = nil,
        createTime: Date? = nil,
        creator: DeploymentCreator? = nil,
        deploymentConfigName: String? = nil,
        deploymentGroupName: String? = nil,
        deploymentId: String? = nil,
        deploymentOverview: DeploymentOverview? = nil,
        deploymentStatusMessages: [String]? = nil,
        deploymentStyle: DeploymentStyle? = nil,
        description: String? = nil,
        errorInformation: ErrorInformation? = nil,
        externalId: String? = nil,
        fileExistsBehavior: FileExistsBehavior? = nil,
        ignoreApplicationStopFailures: Bool = false,
        instanceTerminationWaitTimeStarted: Bool = false,
        loadBalancerInfo: LoadBalancerInfo? = nil,
        previousRevision: RevisionLocation? = nil,
        relatedDeployments: RelatedDeployments? = nil,
        revision: RevisionLocation? = nil,
        rollbackInfo: RollbackInfo? = nil,
        startTime: Date? = nil,
        status: DeploymentStatus? = nil,
        targetInstances: TargetInstances? = nil,
        updateOutdatedInstancesOnly: Bool = false
    )
    {
        self.additionalDeploymentStatusInfo = additionalDeploymentStatusInfo
        self.applicationName = applicationName
        self.autoRollbackConfiguration = autoRollbackConfiguration
        self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
        self.completeTime = completeTime
        self.computePlatform = computePlatform
        self.createTime = createTime
        self.creator = creator
        self.deploymentConfigName = deploymentConfigName
        self.deploymentGroupName = deploymentGroupName
        self.deploymentId = deploymentId
        self.deploymentOverview = deploymentOverview
        self.deploymentStatusMessages = deploymentStatusMessages
        self.deploymentStyle = deploymentStyle
        self.description = description
        self.errorInformation = errorInformation
        self.externalId = externalId
        self.fileExistsBehavior = fileExistsBehavior
        self.ignoreApplicationStopFailures = ignoreApplicationStopFailures
        self.instanceTerminationWaitTimeStarted = instanceTerminationWaitTimeStarted
        self.loadBalancerInfo = loadBalancerInfo
        self.previousRevision = previousRevision
        self.relatedDeployments = relatedDeployments
        self.revision = revision
        self.rollbackInfo = rollbackInfo
        self.startTime = startTime
        self.status = status
        self.targetInstances = targetInstances
        self.updateOutdatedInstancesOnly = updateOutdatedInstancesOnly
    }
}

extension DeploymentIsNotInReadyStateException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentIsNotInReadyStateException(message: \(String(describing: message)))"}
}

extension DeploymentIsNotInReadyStateException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeploymentIsNotInReadyStateExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The deployment does not have a status of Ready and can't continue yet.</p>
public struct DeploymentIsNotInReadyStateException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentIsNotInReadyStateExceptionBody: Equatable {
    public let message: String?
}

extension DeploymentIsNotInReadyStateExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentLimitExceededException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentLimitExceededException(message: \(String(describing: message)))"}
}

extension DeploymentLimitExceededException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeploymentLimitExceededExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The number of allowed deployments was exceeded.</p>
public struct DeploymentLimitExceededException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentLimitExceededExceptionBody: Equatable {
    public let message: String?
}

extension DeploymentLimitExceededExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentNotStartedException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentNotStartedException(message: \(String(describing: message)))"}
}

extension DeploymentNotStartedException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeploymentNotStartedExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified deployment has not started.</p>
public struct DeploymentNotStartedException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentNotStartedExceptionBody: Equatable {
    public let message: String?
}

extension DeploymentNotStartedExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum DeploymentOption {
    case withoutTrafficControl
    case withTrafficControl
    case sdkUnknown(String)
}

extension DeploymentOption : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DeploymentOption] {
        return [
            .withoutTrafficControl,
            .withTrafficControl,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .withoutTrafficControl: return "WITHOUT_TRAFFIC_CONTROL"
        case .withTrafficControl: return "WITH_TRAFFIC_CONTROL"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DeploymentOption(rawValue: rawValue) ?? DeploymentOption.sdkUnknown(rawValue)
    }
}

extension DeploymentOverview: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case failed = "Failed"
        case inProgress = "InProgress"
        case pending = "Pending"
        case ready = "Ready"
        case skipped = "Skipped"
        case succeeded = "Succeeded"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if failed != 0 {
            try encodeContainer.encode(failed, forKey: .failed)
        }
        if inProgress != 0 {
            try encodeContainer.encode(inProgress, forKey: .inProgress)
        }
        if pending != 0 {
            try encodeContainer.encode(pending, forKey: .pending)
        }
        if ready != 0 {
            try encodeContainer.encode(ready, forKey: .ready)
        }
        if skipped != 0 {
            try encodeContainer.encode(skipped, forKey: .skipped)
        }
        if succeeded != 0 {
            try encodeContainer.encode(succeeded, forKey: .succeeded)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pendingDecoded = try containerValues.decode(Int.self, forKey: .pending)
        pending = pendingDecoded
        let inProgressDecoded = try containerValues.decode(Int.self, forKey: .inProgress)
        inProgress = inProgressDecoded
        let succeededDecoded = try containerValues.decode(Int.self, forKey: .succeeded)
        succeeded = succeededDecoded
        let failedDecoded = try containerValues.decode(Int.self, forKey: .failed)
        failed = failedDecoded
        let skippedDecoded = try containerValues.decode(Int.self, forKey: .skipped)
        skipped = skippedDecoded
        let readyDecoded = try containerValues.decode(Int.self, forKey: .ready)
        ready = readyDecoded
    }
}

extension DeploymentOverview: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentOverview(failed: \(String(describing: failed)), inProgress: \(String(describing: inProgress)), pending: \(String(describing: pending)), ready: \(String(describing: ready)), skipped: \(String(describing: skipped)), succeeded: \(String(describing: succeeded)))"}
}

/// <p>Information about the deployment status of the instances in the deployment.</p>
public struct DeploymentOverview: Equatable {
    /// <p>The number of instances in the deployment in a failed state.</p>
    public let failed: Int
    /// <p>The number of instances in which the deployment is in progress.</p>
    public let inProgress: Int
    /// <p>The number of instances in the deployment in a pending state.</p>
    public let pending: Int
    /// <p>The number of instances in a replacement environment ready to receive traffic in a
    ///             blue/green deployment.</p>
    public let ready: Int
    /// <p>The number of instances in the deployment in a skipped state.</p>
    public let skipped: Int
    /// <p>The number of instances in the deployment to which revisions have been successfully
    ///             deployed.</p>
    public let succeeded: Int

    public init (
        failed: Int = 0,
        inProgress: Int = 0,
        pending: Int = 0,
        ready: Int = 0,
        skipped: Int = 0,
        succeeded: Int = 0
    )
    {
        self.failed = failed
        self.inProgress = inProgress
        self.pending = pending
        self.ready = ready
        self.skipped = skipped
        self.succeeded = succeeded
    }
}

public enum DeploymentReadyAction {
    case continueDeployment
    case stopDeployment
    case sdkUnknown(String)
}

extension DeploymentReadyAction : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DeploymentReadyAction] {
        return [
            .continueDeployment,
            .stopDeployment,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .continueDeployment: return "CONTINUE_DEPLOYMENT"
        case .stopDeployment: return "STOP_DEPLOYMENT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DeploymentReadyAction(rawValue: rawValue) ?? DeploymentReadyAction.sdkUnknown(rawValue)
    }
}

extension DeploymentReadyOption: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actionOnTimeout
        case waitTimeInMinutes
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionOnTimeout = actionOnTimeout {
            try encodeContainer.encode(actionOnTimeout.rawValue, forKey: .actionOnTimeout)
        }
        if waitTimeInMinutes != 0 {
            try encodeContainer.encode(waitTimeInMinutes, forKey: .waitTimeInMinutes)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionOnTimeoutDecoded = try containerValues.decodeIfPresent(DeploymentReadyAction.self, forKey: .actionOnTimeout)
        actionOnTimeout = actionOnTimeoutDecoded
        let waitTimeInMinutesDecoded = try containerValues.decode(Int.self, forKey: .waitTimeInMinutes)
        waitTimeInMinutes = waitTimeInMinutesDecoded
    }
}

extension DeploymentReadyOption: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentReadyOption(actionOnTimeout: \(String(describing: actionOnTimeout)), waitTimeInMinutes: \(String(describing: waitTimeInMinutes)))"}
}

/// <p>Information about how traffic is rerouted to instances in a replacement environment in
///             a blue/green deployment.</p>
public struct DeploymentReadyOption: Equatable {
    /// <p>Information about when to reroute traffic from an original environment to a
    ///             replacement environment in a blue/green deployment.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>CONTINUE_DEPLOYMENT: Register new instances with the load balancer immediately
    ///                     after the new application revision is installed on the instances in the
    ///                     replacement environment.</p>
    ///             </li>
    ///             <li>
    ///                 <p>STOP_DEPLOYMENT: Do not register new instances with a load balancer unless
    ///                     traffic rerouting is started using <a>ContinueDeployment</a>. If
    ///                     traffic rerouting is not started before the end of the specified wait period,
    ///                     the deployment status is changed to Stopped.</p>
    ///             </li>
    ///          </ul>
    public let actionOnTimeout: DeploymentReadyAction?
    /// <p>The number of minutes to wait before the status of a blue/green deployment is changed
    ///             to Stopped if rerouting is not started manually. Applies only to the
    ///                 <code>STOP_DEPLOYMENT</code> option for <code>actionOnTimeout</code>.</p>
    public let waitTimeInMinutes: Int

    public init (
        actionOnTimeout: DeploymentReadyAction? = nil,
        waitTimeInMinutes: Int = 0
    )
    {
        self.actionOnTimeout = actionOnTimeout
        self.waitTimeInMinutes = waitTimeInMinutes
    }
}

public enum DeploymentStatus {
    case baking
    case created
    case failed
    case inProgress
    case queued
    case ready
    case stopped
    case succeeded
    case sdkUnknown(String)
}

extension DeploymentStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DeploymentStatus] {
        return [
            .baking,
            .created,
            .failed,
            .inProgress,
            .queued,
            .ready,
            .stopped,
            .succeeded,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .baking: return "Baking"
        case .created: return "Created"
        case .failed: return "Failed"
        case .inProgress: return "InProgress"
        case .queued: return "Queued"
        case .ready: return "Ready"
        case .stopped: return "Stopped"
        case .succeeded: return "Succeeded"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DeploymentStatus(rawValue: rawValue) ?? DeploymentStatus.sdkUnknown(rawValue)
    }
}

extension DeploymentStyle: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deploymentOption
        case deploymentType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentOption = deploymentOption {
            try encodeContainer.encode(deploymentOption.rawValue, forKey: .deploymentOption)
        }
        if let deploymentType = deploymentType {
            try encodeContainer.encode(deploymentType.rawValue, forKey: .deploymentType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentTypeDecoded = try containerValues.decodeIfPresent(DeploymentType.self, forKey: .deploymentType)
        deploymentType = deploymentTypeDecoded
        let deploymentOptionDecoded = try containerValues.decodeIfPresent(DeploymentOption.self, forKey: .deploymentOption)
        deploymentOption = deploymentOptionDecoded
    }
}

extension DeploymentStyle: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentStyle(deploymentOption: \(String(describing: deploymentOption)), deploymentType: \(String(describing: deploymentType)))"}
}

/// <p>Information about the type of deployment, either in-place or blue/green, you want to
///             run and whether to route deployment traffic behind a load balancer.</p>
public struct DeploymentStyle: Equatable {
    /// <p>Indicates whether to route deployment traffic behind a load balancer.</p>
    public let deploymentOption: DeploymentOption?
    /// <p>Indicates whether to run an in-place deployment or a blue/green deployment.</p>
    public let deploymentType: DeploymentType?

    public init (
        deploymentOption: DeploymentOption? = nil,
        deploymentType: DeploymentType? = nil
    )
    {
        self.deploymentOption = deploymentOption
        self.deploymentType = deploymentType
    }
}

extension DeploymentTarget: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cloudFormationTarget
        case deploymentTargetType
        case ecsTarget
        case instanceTarget
        case lambdaTarget
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudFormationTarget = cloudFormationTarget {
            try encodeContainer.encode(cloudFormationTarget, forKey: .cloudFormationTarget)
        }
        if let deploymentTargetType = deploymentTargetType {
            try encodeContainer.encode(deploymentTargetType.rawValue, forKey: .deploymentTargetType)
        }
        if let ecsTarget = ecsTarget {
            try encodeContainer.encode(ecsTarget, forKey: .ecsTarget)
        }
        if let instanceTarget = instanceTarget {
            try encodeContainer.encode(instanceTarget, forKey: .instanceTarget)
        }
        if let lambdaTarget = lambdaTarget {
            try encodeContainer.encode(lambdaTarget, forKey: .lambdaTarget)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentTargetTypeDecoded = try containerValues.decodeIfPresent(DeploymentTargetType.self, forKey: .deploymentTargetType)
        deploymentTargetType = deploymentTargetTypeDecoded
        let instanceTargetDecoded = try containerValues.decodeIfPresent(InstanceTarget.self, forKey: .instanceTarget)
        instanceTarget = instanceTargetDecoded
        let lambdaTargetDecoded = try containerValues.decodeIfPresent(LambdaTarget.self, forKey: .lambdaTarget)
        lambdaTarget = lambdaTargetDecoded
        let ecsTargetDecoded = try containerValues.decodeIfPresent(ECSTarget.self, forKey: .ecsTarget)
        ecsTarget = ecsTargetDecoded
        let cloudFormationTargetDecoded = try containerValues.decodeIfPresent(CloudFormationTarget.self, forKey: .cloudFormationTarget)
        cloudFormationTarget = cloudFormationTargetDecoded
    }
}

extension DeploymentTarget: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentTarget(cloudFormationTarget: \(String(describing: cloudFormationTarget)), deploymentTargetType: \(String(describing: deploymentTargetType)), ecsTarget: \(String(describing: ecsTarget)), instanceTarget: \(String(describing: instanceTarget)), lambdaTarget: \(String(describing: lambdaTarget)))"}
}

/// <p> Information about the deployment target. </p>
public struct DeploymentTarget: Equatable {
    /// <p> Information about the target to be updated by an AWS CloudFormation blue/green
    ///             deployment. This target type is used for all deployments initiated by a CloudFormation
    ///             stack update.</p>
    public let cloudFormationTarget: CloudFormationTarget?
    /// <p>The deployment type that is specific to the deployment's compute platform or
    ///             deployments initiated by a CloudFormation stack update.</p>
    public let deploymentTargetType: DeploymentTargetType?
    /// <p> Information about the target for a deployment that uses the Amazon ECS compute
    ///             platform. </p>
    public let ecsTarget: ECSTarget?
    /// <p> Information about the target for a deployment that uses the EC2/On-premises compute
    ///             platform. </p>
    public let instanceTarget: InstanceTarget?
    /// <p> Information about the target for a deployment that uses the AWS Lambda compute
    ///             platform. </p>
    public let lambdaTarget: LambdaTarget?

    public init (
        cloudFormationTarget: CloudFormationTarget? = nil,
        deploymentTargetType: DeploymentTargetType? = nil,
        ecsTarget: ECSTarget? = nil,
        instanceTarget: InstanceTarget? = nil,
        lambdaTarget: LambdaTarget? = nil
    )
    {
        self.cloudFormationTarget = cloudFormationTarget
        self.deploymentTargetType = deploymentTargetType
        self.ecsTarget = ecsTarget
        self.instanceTarget = instanceTarget
        self.lambdaTarget = lambdaTarget
    }
}

extension DeploymentTargetDoesNotExistException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentTargetDoesNotExistException(message: \(String(describing: message)))"}
}

extension DeploymentTargetDoesNotExistException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeploymentTargetDoesNotExistExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p> The provided target ID does not belong to the attempted deployment. </p>
public struct DeploymentTargetDoesNotExistException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentTargetDoesNotExistExceptionBody: Equatable {
    public let message: String?
}

extension DeploymentTargetDoesNotExistExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentTargetIdRequiredException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentTargetIdRequiredException(message: \(String(describing: message)))"}
}

extension DeploymentTargetIdRequiredException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeploymentTargetIdRequiredExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p> A deployment target ID was not provided. </p>
public struct DeploymentTargetIdRequiredException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentTargetIdRequiredExceptionBody: Equatable {
    public let message: String?
}

extension DeploymentTargetIdRequiredExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentTargetListSizeExceededException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeploymentTargetListSizeExceededException(message: \(String(describing: message)))"}
}

extension DeploymentTargetListSizeExceededException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DeploymentTargetListSizeExceededExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p> The maximum number of targets that can be associated with an Amazon ECS or AWS Lambda
///             deployment was exceeded. The target list of both types of deployments must have exactly
///             one item. This exception does not apply to EC2/On-premises deployments. </p>
public struct DeploymentTargetListSizeExceededException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentTargetListSizeExceededExceptionBody: Equatable {
    public let message: String?
}

extension DeploymentTargetListSizeExceededExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum DeploymentTargetType {
    case cloudformationTarget
    case ecsTarget
    case instanceTarget
    case lambdaTarget
    case sdkUnknown(String)
}

extension DeploymentTargetType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DeploymentTargetType] {
        return [
            .cloudformationTarget,
            .ecsTarget,
            .instanceTarget,
            .lambdaTarget,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .cloudformationTarget: return "CloudFormationTarget"
        case .ecsTarget: return "ECSTarget"
        case .instanceTarget: return "InstanceTarget"
        case .lambdaTarget: return "LambdaTarget"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DeploymentTargetType(rawValue: rawValue) ?? DeploymentTargetType.sdkUnknown(rawValue)
    }
}

public enum DeploymentType {
    case blueGreen
    case inPlace
    case sdkUnknown(String)
}

extension DeploymentType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DeploymentType] {
        return [
            .blueGreen,
            .inPlace,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .blueGreen: return "BLUE_GREEN"
        case .inPlace: return "IN_PLACE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DeploymentType(rawValue: rawValue) ?? DeploymentType.sdkUnknown(rawValue)
    }
}

public enum DeploymentWaitType {
    case readyWait
    case terminationWait
    case sdkUnknown(String)
}

extension DeploymentWaitType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DeploymentWaitType] {
        return [
            .readyWait,
            .terminationWait,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .readyWait: return "READY_WAIT"
        case .terminationWait: return "TERMINATION_WAIT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DeploymentWaitType(rawValue: rawValue) ?? DeploymentWaitType.sdkUnknown(rawValue)
    }
}

public struct DeregisterOnPremisesInstanceInputBodyMiddleware: Middleware {
    public let id: String = "DeregisterOnPremisesInstanceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeregisterOnPremisesInstanceInput>,
                  next: H) -> Swift.Result<OperationOutput<DeregisterOnPremisesInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeregisterOnPremisesInstanceInput>
    public typealias MOutput = OperationOutput<DeregisterOnPremisesInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeregisterOnPremisesInstanceOutputError>
}

extension DeregisterOnPremisesInstanceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeregisterOnPremisesInstanceInput(instanceName: \(String(describing: instanceName)))"}
}

extension DeregisterOnPremisesInstanceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instanceName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

public struct DeregisterOnPremisesInstanceInputHeadersMiddleware: Middleware {
    public let id: String = "DeregisterOnPremisesInstanceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeregisterOnPremisesInstanceInput>,
                  next: H) -> Swift.Result<OperationOutput<DeregisterOnPremisesInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeregisterOnPremisesInstanceInput>
    public typealias MOutput = OperationOutput<DeregisterOnPremisesInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeregisterOnPremisesInstanceOutputError>
}

public struct DeregisterOnPremisesInstanceInputQueryItemMiddleware: Middleware {
    public let id: String = "DeregisterOnPremisesInstanceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeregisterOnPremisesInstanceInput>,
                  next: H) -> Swift.Result<OperationOutput<DeregisterOnPremisesInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeregisterOnPremisesInstanceInput>
    public typealias MOutput = OperationOutput<DeregisterOnPremisesInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeregisterOnPremisesInstanceOutputError>
}

/// <p>Represents the input of a <code>DeregisterOnPremisesInstance</code> operation.</p>
public struct DeregisterOnPremisesInstanceInput: Equatable {
    /// <p>The name of the on-premises instance to deregister.</p>
    public let instanceName: String?

    public init (
        instanceName: String? = nil
    )
    {
        self.instanceName = instanceName
    }
}

struct DeregisterOnPremisesInstanceInputBody: Equatable {
    public let instanceName: String?
}

extension DeregisterOnPremisesInstanceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
    }
}

extension DeregisterOnPremisesInstanceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeregisterOnPremisesInstanceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InstanceNameRequiredException" : self = .instanceNameRequiredException(try InstanceNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceNameException" : self = .invalidInstanceNameException(try InvalidInstanceNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeregisterOnPremisesInstanceOutputError: Equatable {
    case instanceNameRequiredException(InstanceNameRequiredException)
    case invalidInstanceNameException(InvalidInstanceNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeregisterOnPremisesInstanceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeregisterOnPremisesInstanceOutputResponse()"}
}

extension DeregisterOnPremisesInstanceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeregisterOnPremisesInstanceOutputResponse: Equatable {

    public init() {}
}

struct DeregisterOnPremisesInstanceOutputResponseBody: Equatable {
}

extension DeregisterOnPremisesInstanceOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DescriptionTooLongException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DescriptionTooLongException(message: \(String(describing: message)))"}
}

extension DescriptionTooLongException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: DescriptionTooLongExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The description is too long.</p>
public struct DescriptionTooLongException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct DescriptionTooLongExceptionBody: Equatable {
    public let message: String?
}

extension DescriptionTooLongExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Diagnostics: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case errorCode
        case logTail
        case message
        case scriptName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode.rawValue, forKey: .errorCode)
        }
        if let logTail = logTail {
            try encodeContainer.encode(logTail, forKey: .logTail)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let scriptName = scriptName {
            try encodeContainer.encode(scriptName, forKey: .scriptName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorCodeDecoded = try containerValues.decodeIfPresent(LifecycleErrorCode.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let scriptNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scriptName)
        scriptName = scriptNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let logTailDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logTail)
        logTail = logTailDecoded
    }
}

extension Diagnostics: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Diagnostics(errorCode: \(String(describing: errorCode)), logTail: \(String(describing: logTail)), message: \(String(describing: message)), scriptName: \(String(describing: scriptName)))"}
}

/// <p>Diagnostic information about executable scripts that are part of a deployment.</p>
public struct Diagnostics: Equatable {
    /// <p>The associated error code:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Success: The specified script ran.</p>
    ///             </li>
    ///             <li>
    ///                 <p>ScriptMissing: The specified script was not found in the specified
    ///                     location.</p>
    ///             </li>
    ///             <li>
    ///                 <p>ScriptNotExecutable: The specified script is not a recognized executable file
    ///                     type.</p>
    ///             </li>
    ///             <li>
    ///                 <p>ScriptTimedOut: The specified script did not finish running in the specified
    ///                     time period.</p>
    ///             </li>
    ///             <li>
    ///                 <p>ScriptFailed: The specified script failed to run as expected.</p>
    ///             </li>
    ///             <li>
    ///                 <p>UnknownError: The specified script did not run for an unknown reason.</p>
    ///             </li>
    ///          </ul>
    public let errorCode: LifecycleErrorCode?
    /// <p>The last portion of the diagnostic log.</p>
    ///         <p>If available, AWS CodeDeploy returns up to the last 4 KB of the diagnostic log.</p>
    public let logTail: String?
    /// <p>The message associated with the error.</p>
    public let message: String?
    /// <p>The name of the script.</p>
    public let scriptName: String?

    public init (
        errorCode: LifecycleErrorCode? = nil,
        logTail: String? = nil,
        message: String? = nil,
        scriptName: String? = nil
    )
    {
        self.errorCode = errorCode
        self.logTail = logTail
        self.message = message
        self.scriptName = scriptName
    }
}

extension EC2TagFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case key = "Key"
        case type = "Type"
        case value = "Value"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
        let typeDecoded = try containerValues.decodeIfPresent(EC2TagFilterType.self, forKey: .type)
        type = typeDecoded
    }
}

extension EC2TagFilter: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EC2TagFilter(key: \(String(describing: key)), type: \(String(describing: type)), value: \(String(describing: value)))"}
}

/// <p>Information about an EC2 tag filter.</p>
public struct EC2TagFilter: Equatable {
    /// <p>The tag filter key.</p>
    public let key: String?
    /// <p>The tag filter type:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>KEY_ONLY</code>: Key only.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>VALUE_ONLY</code>: Value only.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>KEY_AND_VALUE</code>: Key and value.</p>
    ///             </li>
    ///          </ul>
    public let type: EC2TagFilterType?
    /// <p>The tag filter value.</p>
    public let value: String?

    public init (
        key: String? = nil,
        type: EC2TagFilterType? = nil,
        value: String? = nil
    )
    {
        self.key = key
        self.type = type
        self.value = value
    }
}

public enum EC2TagFilterType {
    case keyAndValue
    case keyOnly
    case valueOnly
    case sdkUnknown(String)
}

extension EC2TagFilterType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [EC2TagFilterType] {
        return [
            .keyAndValue,
            .keyOnly,
            .valueOnly,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .keyAndValue: return "KEY_AND_VALUE"
        case .keyOnly: return "KEY_ONLY"
        case .valueOnly: return "VALUE_ONLY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = EC2TagFilterType(rawValue: rawValue) ?? EC2TagFilterType.sdkUnknown(rawValue)
    }
}

extension EC2TagSet: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ec2TagSetList
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ec2TagSetList = ec2TagSetList {
            var ec2TagSetListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2TagSetList)
            for ec2tagsetlist0 in ec2TagSetList {
                var ec2tagsetlist0Container = ec2TagSetListContainer.nestedUnkeyedContainer()
                for ec2tagfilterlist1 in ec2tagsetlist0 {
                    try ec2tagsetlist0Container.encode(ec2tagfilterlist1)
                }
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ec2TagSetListContainer = try containerValues.decodeIfPresent([[EC2TagFilter?]?].self, forKey: .ec2TagSetList)
        var ec2TagSetListDecoded0:[[EC2TagFilter]]? = nil
        if let ec2TagSetListContainer = ec2TagSetListContainer {
            ec2TagSetListDecoded0 = [[EC2TagFilter]]()
            for list0 in ec2TagSetListContainer {
                var list0Decoded0: [EC2TagFilter]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [EC2TagFilter]()
                    for structure1 in list0 {
                        if let structure1 = structure1 {
                            list0Decoded0?.append(structure1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    ec2TagSetListDecoded0?.append(list0Decoded0)
                }
            }
        }
        ec2TagSetList = ec2TagSetListDecoded0
    }
}

extension EC2TagSet: CustomDebugStringConvertible {
    public var debugDescription: String {
        "EC2TagSet(ec2TagSetList: \(String(describing: ec2TagSetList)))"}
}

/// <p>Information about groups of EC2 instance tags.</p>
public struct EC2TagSet: Equatable {
    /// <p>A list that contains other lists of EC2 instance tag groups. For an instance to be
    ///             included in the deployment group, it must be identified by all of the tag groups in the
    ///             list.</p>
    public let ec2TagSetList: [[EC2TagFilter]]?

    public init (
        ec2TagSetList: [[EC2TagFilter]]? = nil
    )
    {
        self.ec2TagSetList = ec2TagSetList
    }
}

extension ECSService: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clusterName
        case serviceName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterName = clusterName {
            try encodeContainer.encode(clusterName, forKey: .clusterName)
        }
        if let serviceName = serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let clusterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
    }
}

extension ECSService: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ECSService(clusterName: \(String(describing: clusterName)), serviceName: \(String(describing: serviceName)))"}
}

/// <p> Contains the service and cluster names used to identify an Amazon ECS deployment's
///             target. </p>
public struct ECSService: Equatable {
    /// <p> The name of the cluster that the Amazon ECS service is associated with. </p>
    public let clusterName: String?
    /// <p> The name of the target Amazon ECS service. </p>
    public let serviceName: String?

    public init (
        clusterName: String? = nil,
        serviceName: String? = nil
    )
    {
        self.clusterName = clusterName
        self.serviceName = serviceName
    }
}

extension ECSServiceMappingLimitExceededException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ECSServiceMappingLimitExceededException(message: \(String(describing: message)))"}
}

extension ECSServiceMappingLimitExceededException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ECSServiceMappingLimitExceededExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p> The Amazon ECS service is associated with more than one deployment groups. An Amazon
///             ECS service can be associated with only one deployment group. </p>
public struct ECSServiceMappingLimitExceededException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ECSServiceMappingLimitExceededExceptionBody: Equatable {
    public let message: String?
}

extension ECSServiceMappingLimitExceededExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ECSTarget: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deploymentId
        case lastUpdatedAt
        case lifecycleEvents
        case status
        case targetArn
        case targetId
        case taskSetsInfo
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let lifecycleEvents = lifecycleEvents {
            var lifecycleEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lifecycleEvents)
            for lifecycleeventlist0 in lifecycleEvents {
                try lifecycleEventsContainer.encode(lifecycleeventlist0)
            }
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetArn = targetArn {
            try encodeContainer.encode(targetArn, forKey: .targetArn)
        }
        if let targetId = targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
        if let taskSetsInfo = taskSetsInfo {
            var taskSetsInfoContainer = encodeContainer.nestedUnkeyedContainer(forKey: .taskSetsInfo)
            for ecstasksetlist0 in taskSetsInfo {
                try taskSetsInfoContainer.encode(ecstasksetlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetId)
        targetId = targetIdDecoded
        let targetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let lifecycleEventsContainer = try containerValues.decodeIfPresent([LifecycleEvent?].self, forKey: .lifecycleEvents)
        var lifecycleEventsDecoded0:[LifecycleEvent]? = nil
        if let lifecycleEventsContainer = lifecycleEventsContainer {
            lifecycleEventsDecoded0 = [LifecycleEvent]()
            for structure0 in lifecycleEventsContainer {
                if let structure0 = structure0 {
                    lifecycleEventsDecoded0?.append(structure0)
                }
            }
        }
        lifecycleEvents = lifecycleEventsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(TargetStatus.self, forKey: .status)
        status = statusDecoded
        let taskSetsInfoContainer = try containerValues.decodeIfPresent([ECSTaskSet?].self, forKey: .taskSetsInfo)
        var taskSetsInfoDecoded0:[ECSTaskSet]? = nil
        if let taskSetsInfoContainer = taskSetsInfoContainer {
            taskSetsInfoDecoded0 = [ECSTaskSet]()
            for structure0 in taskSetsInfoContainer {
                if let structure0 = structure0 {
                    taskSetsInfoDecoded0?.append(structure0)
                }
            }
        }
        taskSetsInfo = taskSetsInfoDecoded0
    }
}

extension ECSTarget: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ECSTarget(deploymentId: \(String(describing: deploymentId)), lastUpdatedAt: \(String(describing: lastUpdatedAt)), lifecycleEvents: \(String(describing: lifecycleEvents)), status: \(String(describing: status)), targetArn: \(String(describing: targetArn)), targetId: \(String(describing: targetId)), taskSetsInfo: \(String(describing: taskSetsInfo)))"}
}

/// <p> Information about the target of an Amazon ECS deployment. </p>
public struct ECSTarget: Equatable {
    /// <p> The unique ID of a deployment. </p>
    public let deploymentId: String?
    /// <p> The date and time when the target Amazon ECS application was updated by a deployment.
    ///         </p>
    public let lastUpdatedAt: Date?
    /// <p> The lifecycle events of the deployment to this target Amazon ECS application. </p>
    public let lifecycleEvents: [LifecycleEvent]?
    /// <p> The status an Amazon ECS deployment's target ECS application. </p>
    public let status: TargetStatus?
    /// <p> The Amazon Resource Name (ARN) of the target. </p>
    public let targetArn: String?
    /// <p> The unique ID of a deployment target that has a type of <code>ecsTarget</code>.
    ///         </p>
    public let targetId: String?
    /// <p> The <code>ECSTaskSet</code> objects associated with the ECS target. </p>
    public let taskSetsInfo: [ECSTaskSet]?

    public init (
        deploymentId: String? = nil,
        lastUpdatedAt: Date? = nil,
        lifecycleEvents: [LifecycleEvent]? = nil,
        status: TargetStatus? = nil,
        targetArn: String? = nil,
        targetId: String? = nil,
        taskSetsInfo: [ECSTaskSet]? = nil
    )
    {
        self.deploymentId = deploymentId
        self.lastUpdatedAt = lastUpdatedAt
        self.lifecycleEvents = lifecycleEvents
        self.status = status
        self.targetArn = targetArn
        self.targetId = targetId
        self.taskSetsInfo = taskSetsInfo
    }
}

extension ECSTaskSet: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case desiredCount
        case identifer
        case pendingCount
        case runningCount
        case status
        case targetGroup
        case taskSetLabel
        case trafficWeight
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if desiredCount != 0 {
            try encodeContainer.encode(desiredCount, forKey: .desiredCount)
        }
        if let identifer = identifer {
            try encodeContainer.encode(identifer, forKey: .identifer)
        }
        if pendingCount != 0 {
            try encodeContainer.encode(pendingCount, forKey: .pendingCount)
        }
        if runningCount != 0 {
            try encodeContainer.encode(runningCount, forKey: .runningCount)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let targetGroup = targetGroup {
            try encodeContainer.encode(targetGroup, forKey: .targetGroup)
        }
        if let taskSetLabel = taskSetLabel {
            try encodeContainer.encode(taskSetLabel.rawValue, forKey: .taskSetLabel)
        }
        if trafficWeight != 0.0 {
            try encodeContainer.encode(trafficWeight, forKey: .trafficWeight)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identiferDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identifer)
        identifer = identiferDecoded
        let desiredCountDecoded = try containerValues.decode(Int.self, forKey: .desiredCount)
        desiredCount = desiredCountDecoded
        let pendingCountDecoded = try containerValues.decode(Int.self, forKey: .pendingCount)
        pendingCount = pendingCountDecoded
        let runningCountDecoded = try containerValues.decode(Int.self, forKey: .runningCount)
        runningCount = runningCountDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let trafficWeightDecoded = try containerValues.decode(Double.self, forKey: .trafficWeight)
        trafficWeight = trafficWeightDecoded
        let targetGroupDecoded = try containerValues.decodeIfPresent(TargetGroupInfo.self, forKey: .targetGroup)
        targetGroup = targetGroupDecoded
        let taskSetLabelDecoded = try containerValues.decodeIfPresent(TargetLabel.self, forKey: .taskSetLabel)
        taskSetLabel = taskSetLabelDecoded
    }
}

extension ECSTaskSet: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ECSTaskSet(desiredCount: \(String(describing: desiredCount)), identifer: \(String(describing: identifer)), pendingCount: \(String(describing: pendingCount)), runningCount: \(String(describing: runningCount)), status: \(String(describing: status)), targetGroup: \(String(describing: targetGroup)), taskSetLabel: \(String(describing: taskSetLabel)), trafficWeight: \(String(describing: trafficWeight)))"}
}

/// <p> Information about a set of Amazon ECS tasks in an AWS CodeDeploy deployment. An
///             Amazon ECS task set includes details such as the desired number of tasks, how many tasks
///             are running, and whether the task set serves production traffic. An AWS CodeDeploy
///             application that uses the Amazon ECS compute platform deploys a containerized
///             application in an Amazon ECS service as a task set. </p>
public struct ECSTaskSet: Equatable {
    /// <p> The number of tasks in a task set. During a deployment that uses the Amazon ECS
    ///             compute type, CodeDeploy instructs Amazon ECS to create a new task set and uses this
    ///             value to determine how many tasks to create. After the updated task set is created,
    ///             CodeDeploy shifts traffic to the new task set. </p>
    public let desiredCount: Int
    /// <p> A unique ID of an <code>ECSTaskSet</code>. </p>
    public let identifer: String?
    /// <p> The number of tasks in the task set that are in the <code>PENDING</code> status
    ///             during an Amazon ECS deployment. A task in the <code>PENDING</code> state is preparing
    ///             to enter the <code>RUNNING</code> state. A task set enters the <code>PENDING</code>
    ///             status when it launches for the first time, or when it is restarted after being in the
    ///                 <code>STOPPED</code> state. </p>
    public let pendingCount: Int
    /// <p> The number of tasks in the task set that are in the <code>RUNNING</code> status
    ///             during an Amazon ECS deployment. A task in the <code>RUNNING</code> state is running and
    ///             ready for use. </p>
    public let runningCount: Int
    /// <p> The status of the task set. There are three valid task set statuses: </p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>PRIMARY</code>: Indicates the task set is serving production traffic.
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>ACTIVE</code>: Indicates the task set is not serving production traffic.
    ///                 </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>DRAINING</code>: Indicates the tasks in the task set are being stopped and
    ///                     their corresponding targets are being deregistered from their target group.
    ///                 </p>
    ///             </li>
    ///          </ul>
    public let status: String?
    /// <p> The target group associated with the task set. The target group is used by AWS
    ///             CodeDeploy to manage traffic to a task set. </p>
    public let targetGroup: TargetGroupInfo?
    /// <p> A label that identifies whether the ECS task set is an original target
    ///                 (<code>BLUE</code>) or a replacement target (<code>GREEN</code>). </p>
    public let taskSetLabel: TargetLabel?
    /// <p> The percentage of traffic served by this task set. </p>
    public let trafficWeight: Double

    public init (
        desiredCount: Int = 0,
        identifer: String? = nil,
        pendingCount: Int = 0,
        runningCount: Int = 0,
        status: String? = nil,
        targetGroup: TargetGroupInfo? = nil,
        taskSetLabel: TargetLabel? = nil,
        trafficWeight: Double = 0.0
    )
    {
        self.desiredCount = desiredCount
        self.identifer = identifer
        self.pendingCount = pendingCount
        self.runningCount = runningCount
        self.status = status
        self.targetGroup = targetGroup
        self.taskSetLabel = taskSetLabel
        self.trafficWeight = trafficWeight
    }
}

extension ELBInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
    }
}

extension ELBInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ELBInfo(name: \(String(describing: name)))"}
}

/// <p>Information about a load balancer in Elastic Load Balancing to use in a deployment.
///             Instances are registered directly with a load balancer, and traffic is routed to the
///             load balancer.</p>
public struct ELBInfo: Equatable {
    /// <p>For blue/green deployments, the name of the load balancer that is used to route
    ///             traffic from original instances to replacement instances in a blue/green deployment. For
    ///             in-place deployments, the name of the load balancer that instances are deregistered from
    ///             so they are not serving traffic during a deployment, and then re-registered with after
    ///             the deployment is complete.</p>
    public let name: String?

    public init (
        name: String? = nil
    )
    {
        self.name = name
    }
}

public enum ErrorCode {
    case agentIssue
    case alarmActive
    case applicationMissing
    case autoscalingValidationError
    case autoScalingConfiguration
    case autoScalingIamRolePermissions
    case cloudformationStackFailure
    case codedeployResourceCannotBeFound
    case customerApplicationUnhealthy
    case deploymentGroupMissing
    case ecsUpdateError
    case elasticLoadBalancingInvalid
    case elbInvalidInstance
    case healthConstraints
    case healthConstraintsInvalid
    case hookExecutionFailure
    case iamRoleMissing
    case iamRolePermissions
    case internalError
    case invalidEcsService
    case invalidLambdaConfiguration
    case invalidLambdaFunction
    case invalidRevision
    case manualStop
    case missingBlueGreenDeploymentConfiguration
    case missingElbInformation
    case missingGithubToken
    case noEc2Subscription
    case noInstances
    case overMaxInstances
    case resourceLimitExceeded
    case revisionMissing
    case throttled
    case timeout
    case sdkUnknown(String)
}

extension ErrorCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ErrorCode] {
        return [
            .agentIssue,
            .alarmActive,
            .applicationMissing,
            .autoscalingValidationError,
            .autoScalingConfiguration,
            .autoScalingIamRolePermissions,
            .cloudformationStackFailure,
            .codedeployResourceCannotBeFound,
            .customerApplicationUnhealthy,
            .deploymentGroupMissing,
            .ecsUpdateError,
            .elasticLoadBalancingInvalid,
            .elbInvalidInstance,
            .healthConstraints,
            .healthConstraintsInvalid,
            .hookExecutionFailure,
            .iamRoleMissing,
            .iamRolePermissions,
            .internalError,
            .invalidEcsService,
            .invalidLambdaConfiguration,
            .invalidLambdaFunction,
            .invalidRevision,
            .manualStop,
            .missingBlueGreenDeploymentConfiguration,
            .missingElbInformation,
            .missingGithubToken,
            .noEc2Subscription,
            .noInstances,
            .overMaxInstances,
            .resourceLimitExceeded,
            .revisionMissing,
            .throttled,
            .timeout,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .agentIssue: return "AGENT_ISSUE"
        case .alarmActive: return "ALARM_ACTIVE"
        case .applicationMissing: return "APPLICATION_MISSING"
        case .autoscalingValidationError: return "AUTOSCALING_VALIDATION_ERROR"
        case .autoScalingConfiguration: return "AUTO_SCALING_CONFIGURATION"
        case .autoScalingIamRolePermissions: return "AUTO_SCALING_IAM_ROLE_PERMISSIONS"
        case .cloudformationStackFailure: return "CLOUDFORMATION_STACK_FAILURE"
        case .codedeployResourceCannotBeFound: return "CODEDEPLOY_RESOURCE_CANNOT_BE_FOUND"
        case .customerApplicationUnhealthy: return "CUSTOMER_APPLICATION_UNHEALTHY"
        case .deploymentGroupMissing: return "DEPLOYMENT_GROUP_MISSING"
        case .ecsUpdateError: return "ECS_UPDATE_ERROR"
        case .elasticLoadBalancingInvalid: return "ELASTIC_LOAD_BALANCING_INVALID"
        case .elbInvalidInstance: return "ELB_INVALID_INSTANCE"
        case .healthConstraints: return "HEALTH_CONSTRAINTS"
        case .healthConstraintsInvalid: return "HEALTH_CONSTRAINTS_INVALID"
        case .hookExecutionFailure: return "HOOK_EXECUTION_FAILURE"
        case .iamRoleMissing: return "IAM_ROLE_MISSING"
        case .iamRolePermissions: return "IAM_ROLE_PERMISSIONS"
        case .internalError: return "INTERNAL_ERROR"
        case .invalidEcsService: return "INVALID_ECS_SERVICE"
        case .invalidLambdaConfiguration: return "INVALID_LAMBDA_CONFIGURATION"
        case .invalidLambdaFunction: return "INVALID_LAMBDA_FUNCTION"
        case .invalidRevision: return "INVALID_REVISION"
        case .manualStop: return "MANUAL_STOP"
        case .missingBlueGreenDeploymentConfiguration: return "MISSING_BLUE_GREEN_DEPLOYMENT_CONFIGURATION"
        case .missingElbInformation: return "MISSING_ELB_INFORMATION"
        case .missingGithubToken: return "MISSING_GITHUB_TOKEN"
        case .noEc2Subscription: return "NO_EC2_SUBSCRIPTION"
        case .noInstances: return "NO_INSTANCES"
        case .overMaxInstances: return "OVER_MAX_INSTANCES"
        case .resourceLimitExceeded: return "RESOURCE_LIMIT_EXCEEDED"
        case .revisionMissing: return "REVISION_MISSING"
        case .throttled: return "THROTTLED"
        case .timeout: return "TIMEOUT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ErrorCode(rawValue: rawValue) ?? ErrorCode.sdkUnknown(rawValue)
    }
}

extension ErrorInformation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case code
        case message
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(ErrorCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ErrorInformation: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ErrorInformation(code: \(String(describing: code)), message: \(String(describing: message)))"}
}

/// <p>Information about a deployment error.</p>
public struct ErrorInformation: Equatable {
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/error-codes.html">Error Codes for AWS
    ///                 CodeDeploy</a> in the <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide">AWS CodeDeploy User Guide</a>.</p>
    ///         <p>The error code:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>APPLICATION_MISSING: The application was missing. This error code is most
    ///                     likely raised if the application is deleted after the deployment is created, but
    ///                     before it is started.</p>
    ///             </li>
    ///             <li>
    ///                 <p>DEPLOYMENT_GROUP_MISSING: The deployment group was missing. This error code is
    ///                     most likely raised if the deployment group is deleted after the deployment is
    ///                     created, but before it is started.</p>
    ///             </li>
    ///             <li>
    ///                 <p>HEALTH_CONSTRAINTS: The deployment failed on too many instances to be
    ///                     successfully deployed within the instance health constraints specified.</p>
    ///             </li>
    ///             <li>
    ///                 <p>HEALTH_CONSTRAINTS_INVALID: The revision cannot be successfully deployed
    ///                     within the instance health constraints specified.</p>
    ///             </li>
    ///             <li>
    ///                 <p>IAM_ROLE_MISSING: The service role cannot be accessed.</p>
    ///             </li>
    ///             <li>
    ///                 <p>IAM_ROLE_PERMISSIONS: The service role does not have the correct
    ///                     permissions.</p>
    ///             </li>
    ///             <li>
    ///                 <p>INTERNAL_ERROR: There was an internal error.</p>
    ///             </li>
    ///             <li>
    ///                 <p>NO_EC2_SUBSCRIPTION: The calling account is not subscribed to Amazon
    ///                     EC2.</p>
    ///             </li>
    ///             <li>
    ///                 <p>NO_INSTANCES: No instances were specified, or no instances can be
    ///                     found.</p>
    ///             </li>
    ///             <li>
    ///                 <p>OVER_MAX_INSTANCES: The maximum number of instances was exceeded.</p>
    ///             </li>
    ///             <li>
    ///                 <p>THROTTLED: The operation was throttled because the calling account exceeded
    ///                     the throttling limits of one or more AWS services.</p>
    ///             </li>
    ///             <li>
    ///                 <p>TIMEOUT: The deployment has timed out.</p>
    ///             </li>
    ///             <li>
    ///                 <p>REVISION_MISSING: The revision ID was missing. This error code is most likely
    ///                     raised if the revision is deleted after the deployment is created, but before it
    ///                     is started.</p>
    ///             </li>
    ///          </ul>
    public let code: ErrorCode?
    /// <p>An accompanying error message.</p>
    public let message: String?

    public init (
        code: ErrorCode? = nil,
        message: String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

public enum FileExistsBehavior {
    case disallow
    case overwrite
    case retain
    case sdkUnknown(String)
}

extension FileExistsBehavior : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [FileExistsBehavior] {
        return [
            .disallow,
            .overwrite,
            .retain,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .disallow: return "DISALLOW"
        case .overwrite: return "OVERWRITE"
        case .retain: return "RETAIN"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = FileExistsBehavior(rawValue: rawValue) ?? FileExistsBehavior.sdkUnknown(rawValue)
    }
}

extension GenericRevisionInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deploymentGroups
        case description
        case firstUsedTime
        case lastUsedTime
        case registerTime
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentGroups = deploymentGroups {
            var deploymentGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deploymentGroups)
            for deploymentgroupslist0 in deploymentGroups {
                try deploymentGroupsContainer.encode(deploymentgroupslist0)
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let firstUsedTime = firstUsedTime {
            try encodeContainer.encode(firstUsedTime.timeIntervalSince1970, forKey: .firstUsedTime)
        }
        if let lastUsedTime = lastUsedTime {
            try encodeContainer.encode(lastUsedTime.timeIntervalSince1970, forKey: .lastUsedTime)
        }
        if let registerTime = registerTime {
            try encodeContainer.encode(registerTime.timeIntervalSince1970, forKey: .registerTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let deploymentGroupsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .deploymentGroups)
        var deploymentGroupsDecoded0:[String]? = nil
        if let deploymentGroupsContainer = deploymentGroupsContainer {
            deploymentGroupsDecoded0 = [String]()
            for string0 in deploymentGroupsContainer {
                if let string0 = string0 {
                    deploymentGroupsDecoded0?.append(string0)
                }
            }
        }
        deploymentGroups = deploymentGroupsDecoded0
        let firstUsedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .firstUsedTime)
        firstUsedTime = firstUsedTimeDecoded
        let lastUsedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUsedTime)
        lastUsedTime = lastUsedTimeDecoded
        let registerTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .registerTime)
        registerTime = registerTimeDecoded
    }
}

extension GenericRevisionInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GenericRevisionInfo(deploymentGroups: \(String(describing: deploymentGroups)), description: \(String(describing: description)), firstUsedTime: \(String(describing: firstUsedTime)), lastUsedTime: \(String(describing: lastUsedTime)), registerTime: \(String(describing: registerTime)))"}
}

/// <p>Information about an application revision.</p>
public struct GenericRevisionInfo: Equatable {
    /// <p>The deployment groups for which this is the current target revision.</p>
    public let deploymentGroups: [String]?
    /// <p>A comment about the revision.</p>
    public let description: String?
    /// <p>When the revision was first used by AWS CodeDeploy.</p>
    public let firstUsedTime: Date?
    /// <p>When the revision was last used by AWS CodeDeploy.</p>
    public let lastUsedTime: Date?
    /// <p>When the revision was registered with AWS CodeDeploy.</p>
    public let registerTime: Date?

    public init (
        deploymentGroups: [String]? = nil,
        description: String? = nil,
        firstUsedTime: Date? = nil,
        lastUsedTime: Date? = nil,
        registerTime: Date? = nil
    )
    {
        self.deploymentGroups = deploymentGroups
        self.description = description
        self.firstUsedTime = firstUsedTime
        self.lastUsedTime = lastUsedTime
        self.registerTime = registerTime
    }
}

public struct GetApplicationInputBodyMiddleware: Middleware {
    public let id: String = "GetApplicationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetApplicationInput>,
                  next: H) -> Swift.Result<OperationOutput<GetApplicationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetApplicationInput>
    public typealias MOutput = OperationOutput<GetApplicationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetApplicationOutputError>
}

extension GetApplicationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetApplicationInput(applicationName: \(String(describing: applicationName)))"}
}

extension GetApplicationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
    }
}

public struct GetApplicationInputHeadersMiddleware: Middleware {
    public let id: String = "GetApplicationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetApplicationInput>,
                  next: H) -> Swift.Result<OperationOutput<GetApplicationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetApplicationInput>
    public typealias MOutput = OperationOutput<GetApplicationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetApplicationOutputError>
}

public struct GetApplicationInputQueryItemMiddleware: Middleware {
    public let id: String = "GetApplicationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetApplicationInput>,
                  next: H) -> Swift.Result<OperationOutput<GetApplicationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetApplicationInput>
    public typealias MOutput = OperationOutput<GetApplicationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetApplicationOutputError>
}

/// <p>Represents the input of a <code>GetApplication</code> operation.</p>
public struct GetApplicationInput: Equatable {
    /// <p>The name of an AWS CodeDeploy application associated with the IAM user or AWS
    ///             account.</p>
    public let applicationName: String?

    public init (
        applicationName: String? = nil
    )
    {
        self.applicationName = applicationName
    }
}

struct GetApplicationInputBody: Equatable {
    public let applicationName: String?
}

extension GetApplicationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
    }
}

extension GetApplicationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetApplicationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetApplicationOutputError: Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetApplicationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetApplicationOutputResponse(application: \(String(describing: application)))"}
}

extension GetApplicationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetApplicationOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.application = output.application
        } else {
            self.application = nil
        }
    }
}

/// <p>Represents the output of a <code>GetApplication</code> operation.</p>
public struct GetApplicationOutputResponse: Equatable {
    /// <p>Information about the application.</p>
    public let application: ApplicationInfo?

    public init (
        application: ApplicationInfo? = nil
    )
    {
        self.application = application
    }
}

struct GetApplicationOutputResponseBody: Equatable {
    public let application: ApplicationInfo?
}

extension GetApplicationOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case application
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationDecoded = try containerValues.decodeIfPresent(ApplicationInfo.self, forKey: .application)
        application = applicationDecoded
    }
}

public struct GetApplicationRevisionInputBodyMiddleware: Middleware {
    public let id: String = "GetApplicationRevisionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetApplicationRevisionInput>,
                  next: H) -> Swift.Result<OperationOutput<GetApplicationRevisionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetApplicationRevisionInput>
    public typealias MOutput = OperationOutput<GetApplicationRevisionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetApplicationRevisionOutputError>
}

extension GetApplicationRevisionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetApplicationRevisionInput(applicationName: \(String(describing: applicationName)), revision: \(String(describing: revision)))"}
}

extension GetApplicationRevisionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case revision
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let revision = revision {
            try encodeContainer.encode(revision, forKey: .revision)
        }
    }
}

public struct GetApplicationRevisionInputHeadersMiddleware: Middleware {
    public let id: String = "GetApplicationRevisionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetApplicationRevisionInput>,
                  next: H) -> Swift.Result<OperationOutput<GetApplicationRevisionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetApplicationRevisionInput>
    public typealias MOutput = OperationOutput<GetApplicationRevisionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetApplicationRevisionOutputError>
}

public struct GetApplicationRevisionInputQueryItemMiddleware: Middleware {
    public let id: String = "GetApplicationRevisionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetApplicationRevisionInput>,
                  next: H) -> Swift.Result<OperationOutput<GetApplicationRevisionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetApplicationRevisionInput>
    public typealias MOutput = OperationOutput<GetApplicationRevisionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetApplicationRevisionOutputError>
}

/// <p>Represents the input of a <code>GetApplicationRevision</code> operation.</p>
public struct GetApplicationRevisionInput: Equatable {
    /// <p>The name of the application that corresponds to the revision.</p>
    public let applicationName: String?
    /// <p>Information about the application revision to get, including type and location.</p>
    public let revision: RevisionLocation?

    public init (
        applicationName: String? = nil,
        revision: RevisionLocation? = nil
    )
    {
        self.applicationName = applicationName
        self.revision = revision
    }
}

struct GetApplicationRevisionInputBody: Equatable {
    public let applicationName: String?
    public let revision: RevisionLocation?
}

extension GetApplicationRevisionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case revision
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let revisionDecoded = try containerValues.decodeIfPresent(RevisionLocation.self, forKey: .revision)
        revision = revisionDecoded
    }
}

extension GetApplicationRevisionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetApplicationRevisionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRevisionException" : self = .invalidRevisionException(try InvalidRevisionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RevisionDoesNotExistException" : self = .revisionDoesNotExistException(try RevisionDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RevisionRequiredException" : self = .revisionRequiredException(try RevisionRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetApplicationRevisionOutputError: Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidRevisionException(InvalidRevisionException)
    case revisionDoesNotExistException(RevisionDoesNotExistException)
    case revisionRequiredException(RevisionRequiredException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetApplicationRevisionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetApplicationRevisionOutputResponse(applicationName: \(String(describing: applicationName)), revision: \(String(describing: revision)), revisionInfo: \(String(describing: revisionInfo)))"}
}

extension GetApplicationRevisionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetApplicationRevisionOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.applicationName = output.applicationName
            self.revision = output.revision
            self.revisionInfo = output.revisionInfo
        } else {
            self.applicationName = nil
            self.revision = nil
            self.revisionInfo = nil
        }
    }
}

/// <p>Represents the output of a <code>GetApplicationRevision</code> operation.</p>
public struct GetApplicationRevisionOutputResponse: Equatable {
    /// <p>The name of the application that corresponds to the revision.</p>
    public let applicationName: String?
    /// <p>Additional information about the revision, including type and location.</p>
    public let revision: RevisionLocation?
    /// <p>General information about the revision.</p>
    public let revisionInfo: GenericRevisionInfo?

    public init (
        applicationName: String? = nil,
        revision: RevisionLocation? = nil,
        revisionInfo: GenericRevisionInfo? = nil
    )
    {
        self.applicationName = applicationName
        self.revision = revision
        self.revisionInfo = revisionInfo
    }
}

struct GetApplicationRevisionOutputResponseBody: Equatable {
    public let applicationName: String?
    public let revision: RevisionLocation?
    public let revisionInfo: GenericRevisionInfo?
}

extension GetApplicationRevisionOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case revision
        case revisionInfo
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let revisionDecoded = try containerValues.decodeIfPresent(RevisionLocation.self, forKey: .revision)
        revision = revisionDecoded
        let revisionInfoDecoded = try containerValues.decodeIfPresent(GenericRevisionInfo.self, forKey: .revisionInfo)
        revisionInfo = revisionInfoDecoded
    }
}

public struct GetDeploymentConfigInputBodyMiddleware: Middleware {
    public let id: String = "GetDeploymentConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetDeploymentConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<GetDeploymentConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetDeploymentConfigInput>
    public typealias MOutput = OperationOutput<GetDeploymentConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetDeploymentConfigOutputError>
}

extension GetDeploymentConfigInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetDeploymentConfigInput(deploymentConfigName: \(String(describing: deploymentConfigName)))"}
}

extension GetDeploymentConfigInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deploymentConfigName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentConfigName = deploymentConfigName {
            try encodeContainer.encode(deploymentConfigName, forKey: .deploymentConfigName)
        }
    }
}

public struct GetDeploymentConfigInputHeadersMiddleware: Middleware {
    public let id: String = "GetDeploymentConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetDeploymentConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<GetDeploymentConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetDeploymentConfigInput>
    public typealias MOutput = OperationOutput<GetDeploymentConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetDeploymentConfigOutputError>
}

public struct GetDeploymentConfigInputQueryItemMiddleware: Middleware {
    public let id: String = "GetDeploymentConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetDeploymentConfigInput>,
                  next: H) -> Swift.Result<OperationOutput<GetDeploymentConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetDeploymentConfigInput>
    public typealias MOutput = OperationOutput<GetDeploymentConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetDeploymentConfigOutputError>
}

/// <p>Represents the input of a <code>GetDeploymentConfig</code> operation.</p>
public struct GetDeploymentConfigInput: Equatable {
    /// <p>The name of a deployment configuration associated with the IAM user or AWS
    ///             account.</p>
    public let deploymentConfigName: String?

    public init (
        deploymentConfigName: String? = nil
    )
    {
        self.deploymentConfigName = deploymentConfigName
    }
}

struct GetDeploymentConfigInputBody: Equatable {
    public let deploymentConfigName: String?
}

extension GetDeploymentConfigInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentConfigName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentConfigNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentConfigName)
        deploymentConfigName = deploymentConfigNameDecoded
    }
}

extension GetDeploymentConfigOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDeploymentConfigOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "DeploymentConfigDoesNotExistException" : self = .deploymentConfigDoesNotExistException(try DeploymentConfigDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentConfigNameRequiredException" : self = .deploymentConfigNameRequiredException(try DeploymentConfigNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidComputePlatformException" : self = .invalidComputePlatformException(try InvalidComputePlatformException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentConfigNameException" : self = .invalidDeploymentConfigNameException(try InvalidDeploymentConfigNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDeploymentConfigOutputError: Equatable {
    case deploymentConfigDoesNotExistException(DeploymentConfigDoesNotExistException)
    case deploymentConfigNameRequiredException(DeploymentConfigNameRequiredException)
    case invalidComputePlatformException(InvalidComputePlatformException)
    case invalidDeploymentConfigNameException(InvalidDeploymentConfigNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDeploymentConfigOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetDeploymentConfigOutputResponse(deploymentConfigInfo: \(String(describing: deploymentConfigInfo)))"}
}

extension GetDeploymentConfigOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetDeploymentConfigOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.deploymentConfigInfo = output.deploymentConfigInfo
        } else {
            self.deploymentConfigInfo = nil
        }
    }
}

/// <p>Represents the output of a <code>GetDeploymentConfig</code> operation.</p>
public struct GetDeploymentConfigOutputResponse: Equatable {
    /// <p>Information about the deployment configuration.</p>
    public let deploymentConfigInfo: DeploymentConfigInfo?

    public init (
        deploymentConfigInfo: DeploymentConfigInfo? = nil
    )
    {
        self.deploymentConfigInfo = deploymentConfigInfo
    }
}

struct GetDeploymentConfigOutputResponseBody: Equatable {
    public let deploymentConfigInfo: DeploymentConfigInfo?
}

extension GetDeploymentConfigOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentConfigInfo
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentConfigInfoDecoded = try containerValues.decodeIfPresent(DeploymentConfigInfo.self, forKey: .deploymentConfigInfo)
        deploymentConfigInfo = deploymentConfigInfoDecoded
    }
}

public struct GetDeploymentGroupInputBodyMiddleware: Middleware {
    public let id: String = "GetDeploymentGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetDeploymentGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<GetDeploymentGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetDeploymentGroupInput>
    public typealias MOutput = OperationOutput<GetDeploymentGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetDeploymentGroupOutputError>
}

extension GetDeploymentGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetDeploymentGroupInput(applicationName: \(String(describing: applicationName)), deploymentGroupName: \(String(describing: deploymentGroupName)))"}
}

extension GetDeploymentGroupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case deploymentGroupName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let deploymentGroupName = deploymentGroupName {
            try encodeContainer.encode(deploymentGroupName, forKey: .deploymentGroupName)
        }
    }
}

public struct GetDeploymentGroupInputHeadersMiddleware: Middleware {
    public let id: String = "GetDeploymentGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetDeploymentGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<GetDeploymentGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetDeploymentGroupInput>
    public typealias MOutput = OperationOutput<GetDeploymentGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetDeploymentGroupOutputError>
}

public struct GetDeploymentGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "GetDeploymentGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetDeploymentGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<GetDeploymentGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetDeploymentGroupInput>
    public typealias MOutput = OperationOutput<GetDeploymentGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetDeploymentGroupOutputError>
}

/// <p>Represents the input of a <code>GetDeploymentGroup</code> operation.</p>
public struct GetDeploymentGroupInput: Equatable {
    /// <p>The name of an AWS CodeDeploy application associated with the IAM user or AWS
    ///             account.</p>
    public let applicationName: String?
    /// <p>The name of a deployment group for the specified application.</p>
    public let deploymentGroupName: String?

    public init (
        applicationName: String? = nil,
        deploymentGroupName: String? = nil
    )
    {
        self.applicationName = applicationName
        self.deploymentGroupName = deploymentGroupName
    }
}

struct GetDeploymentGroupInputBody: Equatable {
    public let applicationName: String?
    public let deploymentGroupName: String?
}

extension GetDeploymentGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case deploymentGroupName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let deploymentGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentGroupName)
        deploymentGroupName = deploymentGroupNameDecoded
    }
}

extension GetDeploymentGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDeploymentGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentConfigDoesNotExistException" : self = .deploymentConfigDoesNotExistException(try DeploymentConfigDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupDoesNotExistException" : self = .deploymentGroupDoesNotExistException(try DeploymentGroupDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupNameRequiredException" : self = .deploymentGroupNameRequiredException(try DeploymentGroupNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentGroupNameException" : self = .invalidDeploymentGroupNameException(try InvalidDeploymentGroupNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDeploymentGroupOutputError: Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case deploymentConfigDoesNotExistException(DeploymentConfigDoesNotExistException)
    case deploymentGroupDoesNotExistException(DeploymentGroupDoesNotExistException)
    case deploymentGroupNameRequiredException(DeploymentGroupNameRequiredException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidDeploymentGroupNameException(InvalidDeploymentGroupNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDeploymentGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetDeploymentGroupOutputResponse(deploymentGroupInfo: \(String(describing: deploymentGroupInfo)))"}
}

extension GetDeploymentGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetDeploymentGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.deploymentGroupInfo = output.deploymentGroupInfo
        } else {
            self.deploymentGroupInfo = nil
        }
    }
}

/// <p>Represents the output of a <code>GetDeploymentGroup</code> operation.</p>
public struct GetDeploymentGroupOutputResponse: Equatable {
    /// <p>Information about the deployment group.</p>
    public let deploymentGroupInfo: DeploymentGroupInfo?

    public init (
        deploymentGroupInfo: DeploymentGroupInfo? = nil
    )
    {
        self.deploymentGroupInfo = deploymentGroupInfo
    }
}

struct GetDeploymentGroupOutputResponseBody: Equatable {
    public let deploymentGroupInfo: DeploymentGroupInfo?
}

extension GetDeploymentGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentGroupInfo
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentGroupInfoDecoded = try containerValues.decodeIfPresent(DeploymentGroupInfo.self, forKey: .deploymentGroupInfo)
        deploymentGroupInfo = deploymentGroupInfoDecoded
    }
}

public struct GetDeploymentInputBodyMiddleware: Middleware {
    public let id: String = "GetDeploymentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetDeploymentInput>,
                  next: H) -> Swift.Result<OperationOutput<GetDeploymentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetDeploymentInput>
    public typealias MOutput = OperationOutput<GetDeploymentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetDeploymentOutputError>
}

extension GetDeploymentInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetDeploymentInput(deploymentId: \(String(describing: deploymentId)))"}
}

extension GetDeploymentInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deploymentId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
    }
}

public struct GetDeploymentInputHeadersMiddleware: Middleware {
    public let id: String = "GetDeploymentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetDeploymentInput>,
                  next: H) -> Swift.Result<OperationOutput<GetDeploymentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetDeploymentInput>
    public typealias MOutput = OperationOutput<GetDeploymentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetDeploymentOutputError>
}

public struct GetDeploymentInputQueryItemMiddleware: Middleware {
    public let id: String = "GetDeploymentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetDeploymentInput>,
                  next: H) -> Swift.Result<OperationOutput<GetDeploymentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetDeploymentInput>
    public typealias MOutput = OperationOutput<GetDeploymentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetDeploymentOutputError>
}

/// <p>Represents the input of a <code>GetDeployment</code> operation.</p>
public struct GetDeploymentInput: Equatable {
    /// <p> The unique ID of a deployment associated with the IAM user or AWS account. </p>
    public let deploymentId: String?

    public init (
        deploymentId: String? = nil
    )
    {
        self.deploymentId = deploymentId
    }
}

struct GetDeploymentInputBody: Equatable {
    public let deploymentId: String?
}

extension GetDeploymentInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
    }
}

public struct GetDeploymentInstanceInputBodyMiddleware: Middleware {
    public let id: String = "GetDeploymentInstanceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetDeploymentInstanceInput>,
                  next: H) -> Swift.Result<OperationOutput<GetDeploymentInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetDeploymentInstanceInput>
    public typealias MOutput = OperationOutput<GetDeploymentInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetDeploymentInstanceOutputError>
}

extension GetDeploymentInstanceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetDeploymentInstanceInput(deploymentId: \(String(describing: deploymentId)), instanceId: \(String(describing: instanceId)))"}
}

extension GetDeploymentInstanceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deploymentId
        case instanceId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
    }
}

public struct GetDeploymentInstanceInputHeadersMiddleware: Middleware {
    public let id: String = "GetDeploymentInstanceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetDeploymentInstanceInput>,
                  next: H) -> Swift.Result<OperationOutput<GetDeploymentInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetDeploymentInstanceInput>
    public typealias MOutput = OperationOutput<GetDeploymentInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetDeploymentInstanceOutputError>
}

public struct GetDeploymentInstanceInputQueryItemMiddleware: Middleware {
    public let id: String = "GetDeploymentInstanceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetDeploymentInstanceInput>,
                  next: H) -> Swift.Result<OperationOutput<GetDeploymentInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetDeploymentInstanceInput>
    public typealias MOutput = OperationOutput<GetDeploymentInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetDeploymentInstanceOutputError>
}

/// <p> Represents the input of a <code>GetDeploymentInstance</code> operation. </p>
public struct GetDeploymentInstanceInput: Equatable {
    /// <p> The unique ID of a deployment. </p>
    public let deploymentId: String?
    /// <p> The unique ID of an instance in the deployment group. </p>
    public let instanceId: String?

    public init (
        deploymentId: String? = nil,
        instanceId: String? = nil
    )
    {
        self.deploymentId = deploymentId
        self.instanceId = instanceId
    }
}

struct GetDeploymentInstanceInputBody: Equatable {
    public let deploymentId: String?
    public let instanceId: String?
}

extension GetDeploymentInstanceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentId
        case instanceId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
    }
}

extension GetDeploymentInstanceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDeploymentInstanceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "DeploymentDoesNotExistException" : self = .deploymentDoesNotExistException(try DeploymentDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceDoesNotExistException" : self = .instanceDoesNotExistException(try InstanceDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceIdRequiredException" : self = .instanceIdRequiredException(try InstanceIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidComputePlatformException" : self = .invalidComputePlatformException(try InvalidComputePlatformException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceNameException" : self = .invalidInstanceNameException(try InvalidInstanceNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDeploymentInstanceOutputError: Equatable {
    case deploymentDoesNotExistException(DeploymentDoesNotExistException)
    case deploymentIdRequiredException(DeploymentIdRequiredException)
    case instanceDoesNotExistException(InstanceDoesNotExistException)
    case instanceIdRequiredException(InstanceIdRequiredException)
    case invalidComputePlatformException(InvalidComputePlatformException)
    case invalidDeploymentIdException(InvalidDeploymentIdException)
    case invalidInstanceNameException(InvalidInstanceNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDeploymentInstanceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetDeploymentInstanceOutputResponse(instanceSummary: \(String(describing: instanceSummary)))"}
}

extension GetDeploymentInstanceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetDeploymentInstanceOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.instanceSummary = output.instanceSummary
        } else {
            self.instanceSummary = nil
        }
    }
}

/// <p> Represents the output of a <code>GetDeploymentInstance</code> operation. </p>
public struct GetDeploymentInstanceOutputResponse: Equatable {
    /// <p> Information about the instance. </p>
    @available(*, deprecated, message: "InstanceSummary is deprecated, use DeploymentTarget instead.")
    public let instanceSummary: InstanceSummary?

    public init (
        instanceSummary: InstanceSummary? = nil
    )
    {
        self.instanceSummary = instanceSummary
    }
}

struct GetDeploymentInstanceOutputResponseBody: Equatable {
    public let instanceSummary: InstanceSummary?
}

extension GetDeploymentInstanceOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceSummary
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceSummaryDecoded = try containerValues.decodeIfPresent(InstanceSummary.self, forKey: .instanceSummary)
        instanceSummary = instanceSummaryDecoded
    }
}

extension GetDeploymentOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDeploymentOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "DeploymentDoesNotExistException" : self = .deploymentDoesNotExistException(try DeploymentDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDeploymentOutputError: Equatable {
    case deploymentDoesNotExistException(DeploymentDoesNotExistException)
    case deploymentIdRequiredException(DeploymentIdRequiredException)
    case invalidDeploymentIdException(InvalidDeploymentIdException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDeploymentOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetDeploymentOutputResponse(deploymentInfo: \(String(describing: deploymentInfo)))"}
}

extension GetDeploymentOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetDeploymentOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.deploymentInfo = output.deploymentInfo
        } else {
            self.deploymentInfo = nil
        }
    }
}

/// <p>Represents the output of a <code>GetDeployment</code> operation.</p>
public struct GetDeploymentOutputResponse: Equatable {
    /// <p>Information about the deployment.</p>
    public let deploymentInfo: DeploymentInfo?

    public init (
        deploymentInfo: DeploymentInfo? = nil
    )
    {
        self.deploymentInfo = deploymentInfo
    }
}

struct GetDeploymentOutputResponseBody: Equatable {
    public let deploymentInfo: DeploymentInfo?
}

extension GetDeploymentOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentInfo
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentInfoDecoded = try containerValues.decodeIfPresent(DeploymentInfo.self, forKey: .deploymentInfo)
        deploymentInfo = deploymentInfoDecoded
    }
}

public struct GetDeploymentTargetInputBodyMiddleware: Middleware {
    public let id: String = "GetDeploymentTargetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetDeploymentTargetInput>,
                  next: H) -> Swift.Result<OperationOutput<GetDeploymentTargetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetDeploymentTargetInput>
    public typealias MOutput = OperationOutput<GetDeploymentTargetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetDeploymentTargetOutputError>
}

extension GetDeploymentTargetInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetDeploymentTargetInput(deploymentId: \(String(describing: deploymentId)), targetId: \(String(describing: targetId)))"}
}

extension GetDeploymentTargetInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deploymentId
        case targetId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let targetId = targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
    }
}

public struct GetDeploymentTargetInputHeadersMiddleware: Middleware {
    public let id: String = "GetDeploymentTargetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetDeploymentTargetInput>,
                  next: H) -> Swift.Result<OperationOutput<GetDeploymentTargetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetDeploymentTargetInput>
    public typealias MOutput = OperationOutput<GetDeploymentTargetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetDeploymentTargetOutputError>
}

public struct GetDeploymentTargetInputQueryItemMiddleware: Middleware {
    public let id: String = "GetDeploymentTargetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetDeploymentTargetInput>,
                  next: H) -> Swift.Result<OperationOutput<GetDeploymentTargetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetDeploymentTargetInput>
    public typealias MOutput = OperationOutput<GetDeploymentTargetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetDeploymentTargetOutputError>
}

public struct GetDeploymentTargetInput: Equatable {
    /// <p> The unique ID of a deployment. </p>
    public let deploymentId: String?
    /// <p> The unique ID of a deployment target. </p>
    public let targetId: String?

    public init (
        deploymentId: String? = nil,
        targetId: String? = nil
    )
    {
        self.deploymentId = deploymentId
        self.targetId = targetId
    }
}

struct GetDeploymentTargetInputBody: Equatable {
    public let deploymentId: String?
    public let targetId: String?
}

extension GetDeploymentTargetInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentId
        case targetId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetId)
        targetId = targetIdDecoded
    }
}

extension GetDeploymentTargetOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDeploymentTargetOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "DeploymentDoesNotExistException" : self = .deploymentDoesNotExistException(try DeploymentDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentNotStartedException" : self = .deploymentNotStartedException(try DeploymentNotStartedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentTargetDoesNotExistException" : self = .deploymentTargetDoesNotExistException(try DeploymentTargetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentTargetIdRequiredException" : self = .deploymentTargetIdRequiredException(try DeploymentTargetIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentTargetIdException" : self = .invalidDeploymentTargetIdException(try InvalidDeploymentTargetIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceNameException" : self = .invalidInstanceNameException(try InvalidInstanceNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDeploymentTargetOutputError: Equatable {
    case deploymentDoesNotExistException(DeploymentDoesNotExistException)
    case deploymentIdRequiredException(DeploymentIdRequiredException)
    case deploymentNotStartedException(DeploymentNotStartedException)
    case deploymentTargetDoesNotExistException(DeploymentTargetDoesNotExistException)
    case deploymentTargetIdRequiredException(DeploymentTargetIdRequiredException)
    case invalidDeploymentIdException(InvalidDeploymentIdException)
    case invalidDeploymentTargetIdException(InvalidDeploymentTargetIdException)
    case invalidInstanceNameException(InvalidInstanceNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDeploymentTargetOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetDeploymentTargetOutputResponse(deploymentTarget: \(String(describing: deploymentTarget)))"}
}

extension GetDeploymentTargetOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetDeploymentTargetOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.deploymentTarget = output.deploymentTarget
        } else {
            self.deploymentTarget = nil
        }
    }
}

public struct GetDeploymentTargetOutputResponse: Equatable {
    /// <p> A deployment target that contains information about a deployment such as its status,
    ///             lifecycle events, and when it was last updated. It also contains metadata about the
    ///             deployment target. The deployment target metadata depends on the deployment target's
    ///             type (<code>instanceTarget</code>, <code>lambdaTarget</code>, or
    ///             <code>ecsTarget</code>). </p>
    public let deploymentTarget: DeploymentTarget?

    public init (
        deploymentTarget: DeploymentTarget? = nil
    )
    {
        self.deploymentTarget = deploymentTarget
    }
}

struct GetDeploymentTargetOutputResponseBody: Equatable {
    public let deploymentTarget: DeploymentTarget?
}

extension GetDeploymentTargetOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentTarget
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentTargetDecoded = try containerValues.decodeIfPresent(DeploymentTarget.self, forKey: .deploymentTarget)
        deploymentTarget = deploymentTargetDecoded
    }
}

public struct GetOnPremisesInstanceInputBodyMiddleware: Middleware {
    public let id: String = "GetOnPremisesInstanceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetOnPremisesInstanceInput>,
                  next: H) -> Swift.Result<OperationOutput<GetOnPremisesInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetOnPremisesInstanceInput>
    public typealias MOutput = OperationOutput<GetOnPremisesInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetOnPremisesInstanceOutputError>
}

extension GetOnPremisesInstanceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetOnPremisesInstanceInput(instanceName: \(String(describing: instanceName)))"}
}

extension GetOnPremisesInstanceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instanceName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

public struct GetOnPremisesInstanceInputHeadersMiddleware: Middleware {
    public let id: String = "GetOnPremisesInstanceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetOnPremisesInstanceInput>,
                  next: H) -> Swift.Result<OperationOutput<GetOnPremisesInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetOnPremisesInstanceInput>
    public typealias MOutput = OperationOutput<GetOnPremisesInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetOnPremisesInstanceOutputError>
}

public struct GetOnPremisesInstanceInputQueryItemMiddleware: Middleware {
    public let id: String = "GetOnPremisesInstanceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetOnPremisesInstanceInput>,
                  next: H) -> Swift.Result<OperationOutput<GetOnPremisesInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetOnPremisesInstanceInput>
    public typealias MOutput = OperationOutput<GetOnPremisesInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetOnPremisesInstanceOutputError>
}

/// <p> Represents the input of a <code>GetOnPremisesInstance</code> operation. </p>
public struct GetOnPremisesInstanceInput: Equatable {
    /// <p> The name of the on-premises instance about which to get information. </p>
    public let instanceName: String?

    public init (
        instanceName: String? = nil
    )
    {
        self.instanceName = instanceName
    }
}

struct GetOnPremisesInstanceInputBody: Equatable {
    public let instanceName: String?
}

extension GetOnPremisesInstanceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
    }
}

extension GetOnPremisesInstanceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetOnPremisesInstanceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InstanceNameRequiredException" : self = .instanceNameRequiredException(try InstanceNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceNotRegisteredException" : self = .instanceNotRegisteredException(try InstanceNotRegisteredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceNameException" : self = .invalidInstanceNameException(try InvalidInstanceNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetOnPremisesInstanceOutputError: Equatable {
    case instanceNameRequiredException(InstanceNameRequiredException)
    case instanceNotRegisteredException(InstanceNotRegisteredException)
    case invalidInstanceNameException(InvalidInstanceNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetOnPremisesInstanceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetOnPremisesInstanceOutputResponse(instanceInfo: \(String(describing: instanceInfo)))"}
}

extension GetOnPremisesInstanceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetOnPremisesInstanceOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.instanceInfo = output.instanceInfo
        } else {
            self.instanceInfo = nil
        }
    }
}

/// <p> Represents the output of a <code>GetOnPremisesInstance</code> operation. </p>
public struct GetOnPremisesInstanceOutputResponse: Equatable {
    /// <p> Information about the on-premises instance. </p>
    public let instanceInfo: InstanceInfo?

    public init (
        instanceInfo: InstanceInfo? = nil
    )
    {
        self.instanceInfo = instanceInfo
    }
}

struct GetOnPremisesInstanceOutputResponseBody: Equatable {
    public let instanceInfo: InstanceInfo?
}

extension GetOnPremisesInstanceOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceInfo
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceInfoDecoded = try containerValues.decodeIfPresent(InstanceInfo.self, forKey: .instanceInfo)
        instanceInfo = instanceInfoDecoded
    }
}

extension GitHubAccountTokenDoesNotExistException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GitHubAccountTokenDoesNotExistException(message: \(String(describing: message)))"}
}

extension GitHubAccountTokenDoesNotExistException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GitHubAccountTokenDoesNotExistExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>No GitHub account connection exists with the named specified in the call.</p>
public struct GitHubAccountTokenDoesNotExistException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct GitHubAccountTokenDoesNotExistExceptionBody: Equatable {
    public let message: String?
}

extension GitHubAccountTokenDoesNotExistExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GitHubAccountTokenNameRequiredException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GitHubAccountTokenNameRequiredException(message: \(String(describing: message)))"}
}

extension GitHubAccountTokenNameRequiredException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GitHubAccountTokenNameRequiredExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The call is missing a required GitHub account connection name.</p>
public struct GitHubAccountTokenNameRequiredException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct GitHubAccountTokenNameRequiredExceptionBody: Equatable {
    public let message: String?
}

extension GitHubAccountTokenNameRequiredExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GitHubLocation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case commitId
        case repository
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let commitId = commitId {
            try encodeContainer.encode(commitId, forKey: .commitId)
        }
        if let repository = repository {
            try encodeContainer.encode(repository, forKey: .repository)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .repository)
        repository = repositoryDecoded
        let commitIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .commitId)
        commitId = commitIdDecoded
    }
}

extension GitHubLocation: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GitHubLocation(commitId: \(String(describing: commitId)), repository: \(String(describing: repository)))"}
}

/// <p>Information about the location of application artifacts stored in GitHub.</p>
public struct GitHubLocation: Equatable {
    /// <p>The SHA1 commit ID of the GitHub commit that represents the bundled artifacts for the
    ///             application revision.</p>
    public let commitId: String?
    /// <p>The GitHub account and repository pair that stores a reference to the commit that
    ///             represents the bundled artifacts for the application revision. </p>
    ///         <p>Specified as account/repository.</p>
    public let repository: String?

    public init (
        commitId: String? = nil,
        repository: String? = nil
    )
    {
        self.commitId = commitId
        self.repository = repository
    }
}

public enum GreenFleetProvisioningAction {
    case copyAutoScalingGroup
    case discoverExisting
    case sdkUnknown(String)
}

extension GreenFleetProvisioningAction : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [GreenFleetProvisioningAction] {
        return [
            .copyAutoScalingGroup,
            .discoverExisting,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .copyAutoScalingGroup: return "COPY_AUTO_SCALING_GROUP"
        case .discoverExisting: return "DISCOVER_EXISTING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = GreenFleetProvisioningAction(rawValue: rawValue) ?? GreenFleetProvisioningAction.sdkUnknown(rawValue)
    }
}

extension GreenFleetProvisioningOption: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case action
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(GreenFleetProvisioningAction.self, forKey: .action)
        action = actionDecoded
    }
}

extension GreenFleetProvisioningOption: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GreenFleetProvisioningOption(action: \(String(describing: action)))"}
}

/// <p>Information about the instances that belong to the replacement environment in a
///             blue/green deployment.</p>
public struct GreenFleetProvisioningOption: Equatable {
    /// <p>The method used to add instances to a replacement environment.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>DISCOVER_EXISTING</code>: Use instances that already exist or will be
    ///                     created manually.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>COPY_AUTO_SCALING_GROUP</code>: Use settings from a specified Auto
    ///                     Scaling group to define and create instances in a new Auto Scaling group.</p>
    ///             </li>
    ///          </ul>
    public let action: GreenFleetProvisioningAction?

    public init (
        action: GreenFleetProvisioningAction? = nil
    )
    {
        self.action = action
    }
}

extension IamArnRequiredException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "IamArnRequiredException(message: \(String(describing: message)))"}
}

extension IamArnRequiredException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: IamArnRequiredExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>No IAM ARN was included in the request. You must use an IAM session ARN or IAM user
///             ARN in the request.</p>
public struct IamArnRequiredException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct IamArnRequiredExceptionBody: Equatable {
    public let message: String?
}

extension IamArnRequiredExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IamSessionArnAlreadyRegisteredException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "IamSessionArnAlreadyRegisteredException(message: \(String(describing: message)))"}
}

extension IamSessionArnAlreadyRegisteredException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: IamSessionArnAlreadyRegisteredExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request included an IAM session ARN that has already been used to register a
///             different instance.</p>
public struct IamSessionArnAlreadyRegisteredException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct IamSessionArnAlreadyRegisteredExceptionBody: Equatable {
    public let message: String?
}

extension IamSessionArnAlreadyRegisteredExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IamUserArnAlreadyRegisteredException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "IamUserArnAlreadyRegisteredException(message: \(String(describing: message)))"}
}

extension IamUserArnAlreadyRegisteredException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: IamUserArnAlreadyRegisteredExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified IAM user ARN is already registered with an on-premises instance.</p>
public struct IamUserArnAlreadyRegisteredException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct IamUserArnAlreadyRegisteredExceptionBody: Equatable {
    public let message: String?
}

extension IamUserArnAlreadyRegisteredExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IamUserArnRequiredException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "IamUserArnRequiredException(message: \(String(describing: message)))"}
}

extension IamUserArnRequiredException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: IamUserArnRequiredExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An IAM user ARN was not specified.</p>
public struct IamUserArnRequiredException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct IamUserArnRequiredExceptionBody: Equatable {
    public let message: String?
}

extension IamUserArnRequiredExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum InstanceAction {
    case keepAlive
    case terminate
    case sdkUnknown(String)
}

extension InstanceAction : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InstanceAction] {
        return [
            .keepAlive,
            .terminate,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .keepAlive: return "KEEP_ALIVE"
        case .terminate: return "TERMINATE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InstanceAction(rawValue: rawValue) ?? InstanceAction.sdkUnknown(rawValue)
    }
}

extension InstanceDoesNotExistException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceDoesNotExistException(message: \(String(describing: message)))"}
}

extension InstanceDoesNotExistException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InstanceDoesNotExistExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified instance does not exist in the deployment group.</p>
@available(*, deprecated, message: "This exception is deprecated, use DeploymentTargetDoesNotExistException instead.")
public struct InstanceDoesNotExistException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InstanceDoesNotExistExceptionBody: Equatable {
    public let message: String?
}

extension InstanceDoesNotExistExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InstanceIdRequiredException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceIdRequiredException(message: \(String(describing: message)))"}
}

extension InstanceIdRequiredException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InstanceIdRequiredExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The instance ID was not specified.</p>
@available(*, deprecated, message: "This exception is deprecated, use DeploymentTargetIdRequiredException instead.")
public struct InstanceIdRequiredException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InstanceIdRequiredExceptionBody: Equatable {
    public let message: String?
}

extension InstanceIdRequiredExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InstanceInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deregisterTime
        case iamSessionArn
        case iamUserArn
        case instanceArn
        case instanceName
        case registerTime
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deregisterTime = deregisterTime {
            try encodeContainer.encode(deregisterTime.timeIntervalSince1970, forKey: .deregisterTime)
        }
        if let iamSessionArn = iamSessionArn {
            try encodeContainer.encode(iamSessionArn, forKey: .iamSessionArn)
        }
        if let iamUserArn = iamUserArn {
            try encodeContainer.encode(iamUserArn, forKey: .iamUserArn)
        }
        if let instanceArn = instanceArn {
            try encodeContainer.encode(instanceArn, forKey: .instanceArn)
        }
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let registerTime = registerTime {
            try encodeContainer.encode(registerTime.timeIntervalSince1970, forKey: .registerTime)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let iamSessionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iamSessionArn)
        iamSessionArn = iamSessionArnDecoded
        let iamUserArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iamUserArn)
        iamUserArn = iamUserArnDecoded
        let instanceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceArn)
        instanceArn = instanceArnDecoded
        let registerTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .registerTime)
        registerTime = registerTimeDecoded
        let deregisterTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .deregisterTime)
        deregisterTime = deregisterTimeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension InstanceInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceInfo(deregisterTime: \(String(describing: deregisterTime)), iamSessionArn: \(String(describing: iamSessionArn)), iamUserArn: \(String(describing: iamUserArn)), instanceArn: \(String(describing: instanceArn)), instanceName: \(String(describing: instanceName)), registerTime: \(String(describing: registerTime)), tags: \(String(describing: tags)))"}
}

/// <p>Information about an on-premises instance.</p>
public struct InstanceInfo: Equatable {
    /// <p>If the on-premises instance was deregistered, the time at which the on-premises
    ///             instance was deregistered.</p>
    public let deregisterTime: Date?
    /// <p>The ARN of the IAM session associated with the on-premises instance.</p>
    public let iamSessionArn: String?
    /// <p>The IAM user ARN associated with the on-premises instance.</p>
    public let iamUserArn: String?
    /// <p>The ARN of the on-premises instance.</p>
    public let instanceArn: String?
    /// <p>The name of the on-premises instance.</p>
    public let instanceName: String?
    /// <p>The time at which the on-premises instance was registered.</p>
    public let registerTime: Date?
    /// <p>The tags currently associated with the on-premises instance.</p>
    public let tags: [Tag]?

    public init (
        deregisterTime: Date? = nil,
        iamSessionArn: String? = nil,
        iamUserArn: String? = nil,
        instanceArn: String? = nil,
        instanceName: String? = nil,
        registerTime: Date? = nil,
        tags: [Tag]? = nil
    )
    {
        self.deregisterTime = deregisterTime
        self.iamSessionArn = iamSessionArn
        self.iamUserArn = iamUserArn
        self.instanceArn = instanceArn
        self.instanceName = instanceName
        self.registerTime = registerTime
        self.tags = tags
    }
}

extension InstanceLimitExceededException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceLimitExceededException(message: \(String(describing: message)))"}
}

extension InstanceLimitExceededException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InstanceLimitExceededExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The maximum number of allowed on-premises instances in a single call was
///             exceeded.</p>
public struct InstanceLimitExceededException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InstanceLimitExceededExceptionBody: Equatable {
    public let message: String?
}

extension InstanceLimitExceededExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InstanceNameAlreadyRegisteredException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceNameAlreadyRegisteredException(message: \(String(describing: message)))"}
}

extension InstanceNameAlreadyRegisteredException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InstanceNameAlreadyRegisteredExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified on-premises instance name is already registered.</p>
public struct InstanceNameAlreadyRegisteredException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InstanceNameAlreadyRegisteredExceptionBody: Equatable {
    public let message: String?
}

extension InstanceNameAlreadyRegisteredExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InstanceNameRequiredException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceNameRequiredException(message: \(String(describing: message)))"}
}

extension InstanceNameRequiredException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InstanceNameRequiredExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An on-premises instance name was not specified.</p>
public struct InstanceNameRequiredException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InstanceNameRequiredExceptionBody: Equatable {
    public let message: String?
}

extension InstanceNameRequiredExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InstanceNotRegisteredException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceNotRegisteredException(message: \(String(describing: message)))"}
}

extension InstanceNotRegisteredException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InstanceNotRegisteredExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified on-premises instance is not registered.</p>
public struct InstanceNotRegisteredException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InstanceNotRegisteredExceptionBody: Equatable {
    public let message: String?
}

extension InstanceNotRegisteredExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

@available(*, deprecated, message: "InstanceStatus is deprecated, use TargetStatus instead.")
public enum InstanceStatus {
    case failed
    case inProgress
    case pending
    case ready
    case skipped
    case succeeded
    case unknown
    case sdkUnknown(String)
}

extension InstanceStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InstanceStatus] {
        return [
            .failed,
            .inProgress,
            .pending,
            .ready,
            .skipped,
            .succeeded,
            .unknown,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .failed: return "Failed"
        case .inProgress: return "InProgress"
        case .pending: return "Pending"
        case .ready: return "Ready"
        case .skipped: return "Skipped"
        case .succeeded: return "Succeeded"
        case .unknown: return "Unknown"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InstanceStatus(rawValue: rawValue) ?? InstanceStatus.sdkUnknown(rawValue)
    }
}

extension InstanceSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deploymentId
        case instanceId
        case instanceType
        case lastUpdatedAt
        case lifecycleEvents
        case status
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let lifecycleEvents = lifecycleEvents {
            var lifecycleEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lifecycleEvents)
            for lifecycleeventlist0 in lifecycleEvents {
                try lifecycleEventsContainer.encode(lifecycleeventlist0)
            }
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(InstanceStatus.self, forKey: .status)
        status = statusDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let lifecycleEventsContainer = try containerValues.decodeIfPresent([LifecycleEvent?].self, forKey: .lifecycleEvents)
        var lifecycleEventsDecoded0:[LifecycleEvent]? = nil
        if let lifecycleEventsContainer = lifecycleEventsContainer {
            lifecycleEventsDecoded0 = [LifecycleEvent]()
            for structure0 in lifecycleEventsContainer {
                if let structure0 = structure0 {
                    lifecycleEventsDecoded0?.append(structure0)
                }
            }
        }
        lifecycleEvents = lifecycleEventsDecoded0
        let instanceTypeDecoded = try containerValues.decodeIfPresent(InstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
    }
}

extension InstanceSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceSummary(deploymentId: \(String(describing: deploymentId)), instanceId: \(String(describing: instanceId)), instanceType: \(String(describing: instanceType)), lastUpdatedAt: \(String(describing: lastUpdatedAt)), lifecycleEvents: \(String(describing: lifecycleEvents)), status: \(String(describing: status)))"}
}

/// <p>Information about an instance in a deployment.</p>
@available(*, deprecated, message: "InstanceSummary is deprecated, use DeploymentTarget instead.")
public struct InstanceSummary: Equatable {
    /// <p> The unique ID of a deployment. </p>
    public let deploymentId: String?
    /// <p>The instance ID.</p>
    public let instanceId: String?
    /// <p>Information about which environment an instance belongs to in a blue/green
    ///             deployment.</p>
    ///         <ul>
    ///             <li>
    ///                 <p>BLUE: The instance is part of the original environment.</p>
    ///             </li>
    ///             <li>
    ///                 <p>GREEN: The instance is part of the replacement environment.</p>
    ///             </li>
    ///          </ul>
    public let instanceType: InstanceType?
    /// <p>A timestamp that indicates when the instance information was last updated.</p>
    public let lastUpdatedAt: Date?
    /// <p>A list of lifecycle events for this instance.</p>
    public let lifecycleEvents: [LifecycleEvent]?
    /// <p>The deployment status for this instance:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>Pending</code>: The deployment is pending for this instance.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>In Progress</code>: The deployment is in progress for this
    ///                     instance.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Succeeded</code>: The deployment has succeeded for this instance.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Failed</code>: The deployment has failed for this instance.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Skipped</code>: The deployment has been skipped for this
    ///                     instance.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Unknown</code>: The deployment status is unknown for this
    ///                     instance.</p>
    ///             </li>
    ///          </ul>
    @available(*, deprecated, message: "InstanceStatus is deprecated, use TargetStatus instead.")
    public let status: InstanceStatus?

    public init (
        deploymentId: String? = nil,
        instanceId: String? = nil,
        instanceType: InstanceType? = nil,
        lastUpdatedAt: Date? = nil,
        lifecycleEvents: [LifecycleEvent]? = nil,
        status: InstanceStatus? = nil
    )
    {
        self.deploymentId = deploymentId
        self.instanceId = instanceId
        self.instanceType = instanceType
        self.lastUpdatedAt = lastUpdatedAt
        self.lifecycleEvents = lifecycleEvents
        self.status = status
    }
}

extension InstanceTarget: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deploymentId
        case instanceLabel
        case lastUpdatedAt
        case lifecycleEvents
        case status
        case targetArn
        case targetId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let instanceLabel = instanceLabel {
            try encodeContainer.encode(instanceLabel.rawValue, forKey: .instanceLabel)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let lifecycleEvents = lifecycleEvents {
            var lifecycleEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lifecycleEvents)
            for lifecycleeventlist0 in lifecycleEvents {
                try lifecycleEventsContainer.encode(lifecycleeventlist0)
            }
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetArn = targetArn {
            try encodeContainer.encode(targetArn, forKey: .targetArn)
        }
        if let targetId = targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetId)
        targetId = targetIdDecoded
        let targetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(TargetStatus.self, forKey: .status)
        status = statusDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let lifecycleEventsContainer = try containerValues.decodeIfPresent([LifecycleEvent?].self, forKey: .lifecycleEvents)
        var lifecycleEventsDecoded0:[LifecycleEvent]? = nil
        if let lifecycleEventsContainer = lifecycleEventsContainer {
            lifecycleEventsDecoded0 = [LifecycleEvent]()
            for structure0 in lifecycleEventsContainer {
                if let structure0 = structure0 {
                    lifecycleEventsDecoded0?.append(structure0)
                }
            }
        }
        lifecycleEvents = lifecycleEventsDecoded0
        let instanceLabelDecoded = try containerValues.decodeIfPresent(TargetLabel.self, forKey: .instanceLabel)
        instanceLabel = instanceLabelDecoded
    }
}

extension InstanceTarget: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstanceTarget(deploymentId: \(String(describing: deploymentId)), instanceLabel: \(String(describing: instanceLabel)), lastUpdatedAt: \(String(describing: lastUpdatedAt)), lifecycleEvents: \(String(describing: lifecycleEvents)), status: \(String(describing: status)), targetArn: \(String(describing: targetArn)), targetId: \(String(describing: targetId)))"}
}

/// <p> A target Amazon EC2 or on-premises instance during a deployment that uses the
///             EC2/On-premises compute platform. </p>
public struct InstanceTarget: Equatable {
    /// <p> The unique ID of a deployment. </p>
    public let deploymentId: String?
    /// <p> A label that identifies whether the instance is an original target
    ///             (<code>BLUE</code>) or a replacement target (<code>GREEN</code>). </p>
    public let instanceLabel: TargetLabel?
    /// <p> The date and time when the target instance was updated by a deployment. </p>
    public let lastUpdatedAt: Date?
    /// <p> The lifecycle events of the deployment to this target instance. </p>
    public let lifecycleEvents: [LifecycleEvent]?
    /// <p> The status an EC2/On-premises deployment's target instance. </p>
    public let status: TargetStatus?
    /// <p> The Amazon Resource Name (ARN) of the target. </p>
    public let targetArn: String?
    /// <p> The unique ID of a deployment target that has a type of <code>instanceTarget</code>.
    ///         </p>
    public let targetId: String?

    public init (
        deploymentId: String? = nil,
        instanceLabel: TargetLabel? = nil,
        lastUpdatedAt: Date? = nil,
        lifecycleEvents: [LifecycleEvent]? = nil,
        status: TargetStatus? = nil,
        targetArn: String? = nil,
        targetId: String? = nil
    )
    {
        self.deploymentId = deploymentId
        self.instanceLabel = instanceLabel
        self.lastUpdatedAt = lastUpdatedAt
        self.lifecycleEvents = lifecycleEvents
        self.status = status
        self.targetArn = targetArn
        self.targetId = targetId
    }
}

public enum InstanceType {
    case blue
    case green
    case sdkUnknown(String)
}

extension InstanceType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InstanceType] {
        return [
            .blue,
            .green,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .blue: return "Blue"
        case .green: return "Green"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InstanceType(rawValue: rawValue) ?? InstanceType.sdkUnknown(rawValue)
    }
}

extension InvalidAlarmConfigException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidAlarmConfigException(message: \(String(describing: message)))"}
}

extension InvalidAlarmConfigException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidAlarmConfigExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The format of the alarm configuration is invalid. Possible causes include:</p>
///         <ul>
///             <li>
///                 <p>The alarm list is null.</p>
///             </li>
///             <li>
///                 <p>The alarm object is null.</p>
///             </li>
///             <li>
///                 <p>The alarm name is empty or null or exceeds the limit of 255 characters.</p>
///             </li>
///             <li>
///                 <p>Two alarms with the same name have been specified.</p>
///             </li>
///             <li>
///                 <p>The alarm configuration is enabled, but the alarm list is empty.</p>
///             </li>
///          </ul>
public struct InvalidAlarmConfigException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidAlarmConfigExceptionBody: Equatable {
    public let message: String?
}

extension InvalidAlarmConfigExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidApplicationNameException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidApplicationNameException(message: \(String(describing: message)))"}
}

extension InvalidApplicationNameException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidApplicationNameExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The application name was specified in an invalid format.</p>
public struct InvalidApplicationNameException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidApplicationNameExceptionBody: Equatable {
    public let message: String?
}

extension InvalidApplicationNameExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidArnException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidArnException(message: \(String(describing: message)))"}
}

extension InvalidArnException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidArnExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p> The specified ARN is not in a valid format. </p>
public struct InvalidArnException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidArnExceptionBody: Equatable {
    public let message: String?
}

extension InvalidArnExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidAutoRollbackConfigException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidAutoRollbackConfigException(message: \(String(describing: message)))"}
}

extension InvalidAutoRollbackConfigException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidAutoRollbackConfigExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The automatic rollback configuration was specified in an invalid format. For example,
///             automatic rollback is enabled, but an invalid triggering event type or no event types
///             were listed.</p>
public struct InvalidAutoRollbackConfigException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidAutoRollbackConfigExceptionBody: Equatable {
    public let message: String?
}

extension InvalidAutoRollbackConfigExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidAutoScalingGroupException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidAutoScalingGroupException(message: \(String(describing: message)))"}
}

extension InvalidAutoScalingGroupException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidAutoScalingGroupExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The Auto Scaling group was specified in an invalid format or does not exist.</p>
public struct InvalidAutoScalingGroupException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidAutoScalingGroupExceptionBody: Equatable {
    public let message: String?
}

extension InvalidAutoScalingGroupExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidBlueGreenDeploymentConfigurationException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidBlueGreenDeploymentConfigurationException(message: \(String(describing: message)))"}
}

extension InvalidBlueGreenDeploymentConfigurationException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidBlueGreenDeploymentConfigurationExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The configuration for the blue/green deployment group was provided in an invalid
///             format. For information about deployment configuration format, see <a>CreateDeploymentConfig</a>.</p>
public struct InvalidBlueGreenDeploymentConfigurationException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidBlueGreenDeploymentConfigurationExceptionBody: Equatable {
    public let message: String?
}

extension InvalidBlueGreenDeploymentConfigurationExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidBucketNameFilterException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidBucketNameFilterException(message: \(String(describing: message)))"}
}

extension InvalidBucketNameFilterException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidBucketNameFilterExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The bucket name either doesn't exist or was specified in an invalid format.</p>
public struct InvalidBucketNameFilterException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidBucketNameFilterExceptionBody: Equatable {
    public let message: String?
}

extension InvalidBucketNameFilterExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidComputePlatformException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidComputePlatformException(message: \(String(describing: message)))"}
}

extension InvalidComputePlatformException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidComputePlatformExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The computePlatform is invalid. The computePlatform should be <code>Lambda</code>,
///                 <code>Server</code>, or <code>ECS</code>.</p>
public struct InvalidComputePlatformException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidComputePlatformExceptionBody: Equatable {
    public let message: String?
}

extension InvalidComputePlatformExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDeployedStateFilterException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidDeployedStateFilterException(message: \(String(describing: message)))"}
}

extension InvalidDeployedStateFilterException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidDeployedStateFilterExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The deployed state filter was specified in an invalid format.</p>
public struct InvalidDeployedStateFilterException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDeployedStateFilterExceptionBody: Equatable {
    public let message: String?
}

extension InvalidDeployedStateFilterExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDeploymentConfigNameException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidDeploymentConfigNameException(message: \(String(describing: message)))"}
}

extension InvalidDeploymentConfigNameException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidDeploymentConfigNameExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The deployment configuration name was specified in an invalid format.</p>
public struct InvalidDeploymentConfigNameException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDeploymentConfigNameExceptionBody: Equatable {
    public let message: String?
}

extension InvalidDeploymentConfigNameExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDeploymentGroupNameException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidDeploymentGroupNameException(message: \(String(describing: message)))"}
}

extension InvalidDeploymentGroupNameException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidDeploymentGroupNameExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The deployment group name was specified in an invalid format.</p>
public struct InvalidDeploymentGroupNameException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDeploymentGroupNameExceptionBody: Equatable {
    public let message: String?
}

extension InvalidDeploymentGroupNameExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDeploymentIdException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidDeploymentIdException(message: \(String(describing: message)))"}
}

extension InvalidDeploymentIdException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidDeploymentIdExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>At least one of the deployment IDs was specified in an invalid format.</p>
public struct InvalidDeploymentIdException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDeploymentIdExceptionBody: Equatable {
    public let message: String?
}

extension InvalidDeploymentIdExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDeploymentInstanceTypeException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidDeploymentInstanceTypeException(message: \(String(describing: message)))"}
}

extension InvalidDeploymentInstanceTypeException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidDeploymentInstanceTypeExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An instance type was specified for an in-place deployment. Instance types are
///             supported for blue/green deployments only.</p>
public struct InvalidDeploymentInstanceTypeException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDeploymentInstanceTypeExceptionBody: Equatable {
    public let message: String?
}

extension InvalidDeploymentInstanceTypeExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDeploymentStatusException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidDeploymentStatusException(message: \(String(describing: message)))"}
}

extension InvalidDeploymentStatusException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidDeploymentStatusExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified deployment status doesn't exist or cannot be determined.</p>
public struct InvalidDeploymentStatusException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDeploymentStatusExceptionBody: Equatable {
    public let message: String?
}

extension InvalidDeploymentStatusExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDeploymentStyleException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidDeploymentStyleException(message: \(String(describing: message)))"}
}

extension InvalidDeploymentStyleException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidDeploymentStyleExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An invalid deployment style was specified. Valid deployment types include "IN_PLACE"
///             and "BLUE_GREEN." Valid deployment options include "WITH_TRAFFIC_CONTROL" and
///             "WITHOUT_TRAFFIC_CONTROL."</p>
public struct InvalidDeploymentStyleException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDeploymentStyleExceptionBody: Equatable {
    public let message: String?
}

extension InvalidDeploymentStyleExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDeploymentTargetIdException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidDeploymentTargetIdException(message: \(String(describing: message)))"}
}

extension InvalidDeploymentTargetIdException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidDeploymentTargetIdExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p> The target ID provided was not valid. </p>
public struct InvalidDeploymentTargetIdException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDeploymentTargetIdExceptionBody: Equatable {
    public let message: String?
}

extension InvalidDeploymentTargetIdExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDeploymentWaitTypeException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidDeploymentWaitTypeException(message: \(String(describing: message)))"}
}

extension InvalidDeploymentWaitTypeException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidDeploymentWaitTypeExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p> The wait type is invalid. </p>
public struct InvalidDeploymentWaitTypeException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDeploymentWaitTypeExceptionBody: Equatable {
    public let message: String?
}

extension InvalidDeploymentWaitTypeExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidEC2TagCombinationException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidEC2TagCombinationException(message: \(String(describing: message)))"}
}

extension InvalidEC2TagCombinationException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidEC2TagCombinationExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A call was submitted that specified both Ec2TagFilters and Ec2TagSet, but only one of
///             these data types can be used in a single call.</p>
public struct InvalidEC2TagCombinationException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidEC2TagCombinationExceptionBody: Equatable {
    public let message: String?
}

extension InvalidEC2TagCombinationExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidEC2TagException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidEC2TagException(message: \(String(describing: message)))"}
}

extension InvalidEC2TagException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidEC2TagExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The tag was specified in an invalid format.</p>
public struct InvalidEC2TagException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidEC2TagExceptionBody: Equatable {
    public let message: String?
}

extension InvalidEC2TagExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidECSServiceException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidECSServiceException(message: \(String(describing: message)))"}
}

extension InvalidECSServiceException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidECSServiceExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p> The Amazon ECS service identifier is not valid. </p>
public struct InvalidECSServiceException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidECSServiceExceptionBody: Equatable {
    public let message: String?
}

extension InvalidECSServiceExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidExternalIdException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidExternalIdException(message: \(String(describing: message)))"}
}

extension InvalidExternalIdException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidExternalIdExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The external ID was specified in an invalid format.</p>
public struct InvalidExternalIdException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidExternalIdExceptionBody: Equatable {
    public let message: String?
}

extension InvalidExternalIdExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidFileExistsBehaviorException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidFileExistsBehaviorException(message: \(String(describing: message)))"}
}

extension InvalidFileExistsBehaviorException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidFileExistsBehaviorExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An invalid fileExistsBehavior option was specified to determine how AWS CodeDeploy
///             handles files or directories that already exist in a deployment target location, but
///             weren't part of the previous successful deployment. Valid values include "DISALLOW,"
///             "OVERWRITE," and "RETAIN."</p>
public struct InvalidFileExistsBehaviorException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidFileExistsBehaviorExceptionBody: Equatable {
    public let message: String?
}

extension InvalidFileExistsBehaviorExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidGitHubAccountTokenException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidGitHubAccountTokenException(message: \(String(describing: message)))"}
}

extension InvalidGitHubAccountTokenException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidGitHubAccountTokenExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The GitHub token is not valid.</p>
public struct InvalidGitHubAccountTokenException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidGitHubAccountTokenExceptionBody: Equatable {
    public let message: String?
}

extension InvalidGitHubAccountTokenExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidGitHubAccountTokenNameException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidGitHubAccountTokenNameException(message: \(String(describing: message)))"}
}

extension InvalidGitHubAccountTokenNameException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidGitHubAccountTokenNameExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The format of the specified GitHub account connection name is invalid.</p>
public struct InvalidGitHubAccountTokenNameException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidGitHubAccountTokenNameExceptionBody: Equatable {
    public let message: String?
}

extension InvalidGitHubAccountTokenNameExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidIamSessionArnException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidIamSessionArnException(message: \(String(describing: message)))"}
}

extension InvalidIamSessionArnException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidIamSessionArnExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The IAM session ARN was specified in an invalid format.</p>
public struct InvalidIamSessionArnException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidIamSessionArnExceptionBody: Equatable {
    public let message: String?
}

extension InvalidIamSessionArnExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidIamUserArnException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidIamUserArnException(message: \(String(describing: message)))"}
}

extension InvalidIamUserArnException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidIamUserArnExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The IAM user ARN was specified in an invalid format.</p>
public struct InvalidIamUserArnException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidIamUserArnExceptionBody: Equatable {
    public let message: String?
}

extension InvalidIamUserArnExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidIgnoreApplicationStopFailuresValueException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidIgnoreApplicationStopFailuresValueException(message: \(String(describing: message)))"}
}

extension InvalidIgnoreApplicationStopFailuresValueException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidIgnoreApplicationStopFailuresValueExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The IgnoreApplicationStopFailures value is invalid. For AWS Lambda deployments,
///                 <code>false</code> is expected. For EC2/On-premises deployments, <code>true</code>
///             or <code>false</code> is expected.</p>
public struct InvalidIgnoreApplicationStopFailuresValueException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidIgnoreApplicationStopFailuresValueExceptionBody: Equatable {
    public let message: String?
}

extension InvalidIgnoreApplicationStopFailuresValueExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidInputException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidInputException(message: \(String(describing: message)))"}
}

extension InvalidInputException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidInputExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The input was specified in an invalid format.</p>
public struct InvalidInputException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidInputExceptionBody: Equatable {
    public let message: String?
}

extension InvalidInputExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidInstanceNameException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidInstanceNameException(message: \(String(describing: message)))"}
}

extension InvalidInstanceNameException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidInstanceNameExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The on-premises instance name was specified in an invalid format.</p>
public struct InvalidInstanceNameException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidInstanceNameExceptionBody: Equatable {
    public let message: String?
}

extension InvalidInstanceNameExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidInstanceStatusException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidInstanceStatusException(message: \(String(describing: message)))"}
}

extension InvalidInstanceStatusException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidInstanceStatusExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified instance status does not exist.</p>
public struct InvalidInstanceStatusException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidInstanceStatusExceptionBody: Equatable {
    public let message: String?
}

extension InvalidInstanceStatusExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidInstanceTypeException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidInstanceTypeException(message: \(String(describing: message)))"}
}

extension InvalidInstanceTypeException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidInstanceTypeExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An invalid instance type was specified for instances in a blue/green deployment. Valid
///             values include "Blue" for an original environment and "Green" for a replacement
///             environment.</p>
public struct InvalidInstanceTypeException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidInstanceTypeExceptionBody: Equatable {
    public let message: String?
}

extension InvalidInstanceTypeExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidKeyPrefixFilterException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidKeyPrefixFilterException(message: \(String(describing: message)))"}
}

extension InvalidKeyPrefixFilterException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidKeyPrefixFilterExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified key prefix filter was specified in an invalid format.</p>
public struct InvalidKeyPrefixFilterException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidKeyPrefixFilterExceptionBody: Equatable {
    public let message: String?
}

extension InvalidKeyPrefixFilterExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidLifecycleEventHookExecutionIdException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidLifecycleEventHookExecutionIdException(message: \(String(describing: message)))"}
}

extension InvalidLifecycleEventHookExecutionIdException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidLifecycleEventHookExecutionIdExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A lifecycle event hook is invalid. Review the <code>hooks</code> section in your
///             AppSpec file to ensure the lifecycle events and <code>hooks</code> functions are
///             valid.</p>
public struct InvalidLifecycleEventHookExecutionIdException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidLifecycleEventHookExecutionIdExceptionBody: Equatable {
    public let message: String?
}

extension InvalidLifecycleEventHookExecutionIdExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidLifecycleEventHookExecutionStatusException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidLifecycleEventHookExecutionStatusException(message: \(String(describing: message)))"}
}

extension InvalidLifecycleEventHookExecutionStatusException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidLifecycleEventHookExecutionStatusExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The result of a Lambda validation function that verifies a lifecycle event is invalid.
///             It should return <code>Succeeded</code> or <code>Failed</code>.</p>
public struct InvalidLifecycleEventHookExecutionStatusException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidLifecycleEventHookExecutionStatusExceptionBody: Equatable {
    public let message: String?
}

extension InvalidLifecycleEventHookExecutionStatusExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidLoadBalancerInfoException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidLoadBalancerInfoException(message: \(String(describing: message)))"}
}

extension InvalidLoadBalancerInfoException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidLoadBalancerInfoExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An invalid load balancer name, or no load balancer name, was specified.</p>
public struct InvalidLoadBalancerInfoException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidLoadBalancerInfoExceptionBody: Equatable {
    public let message: String?
}

extension InvalidLoadBalancerInfoExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidMinimumHealthyHostValueException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidMinimumHealthyHostValueException(message: \(String(describing: message)))"}
}

extension InvalidMinimumHealthyHostValueException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidMinimumHealthyHostValueExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The minimum healthy instance value was specified in an invalid format.</p>
public struct InvalidMinimumHealthyHostValueException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidMinimumHealthyHostValueExceptionBody: Equatable {
    public let message: String?
}

extension InvalidMinimumHealthyHostValueExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidNextTokenException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidNextTokenException(message: \(String(describing: message)))"}
}

extension InvalidNextTokenException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidNextTokenExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The next token was specified in an invalid format.</p>
public struct InvalidNextTokenException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidNextTokenExceptionBody: Equatable {
    public let message: String?
}

extension InvalidNextTokenExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidOnPremisesTagCombinationException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidOnPremisesTagCombinationException(message: \(String(describing: message)))"}
}

extension InvalidOnPremisesTagCombinationException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidOnPremisesTagCombinationExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A call was submitted that specified both OnPremisesTagFilters and OnPremisesTagSet,
///             but only one of these data types can be used in a single call.</p>
public struct InvalidOnPremisesTagCombinationException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidOnPremisesTagCombinationExceptionBody: Equatable {
    public let message: String?
}

extension InvalidOnPremisesTagCombinationExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidOperationException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidOperationException(message: \(String(describing: message)))"}
}

extension InvalidOperationException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidOperationExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An invalid operation was detected.</p>
public struct InvalidOperationException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidOperationExceptionBody: Equatable {
    public let message: String?
}

extension InvalidOperationExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRegistrationStatusException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidRegistrationStatusException(message: \(String(describing: message)))"}
}

extension InvalidRegistrationStatusException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidRegistrationStatusExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The registration status was specified in an invalid format.</p>
public struct InvalidRegistrationStatusException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidRegistrationStatusExceptionBody: Equatable {
    public let message: String?
}

extension InvalidRegistrationStatusExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRevisionException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidRevisionException(message: \(String(describing: message)))"}
}

extension InvalidRevisionException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidRevisionExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The revision was specified in an invalid format.</p>
public struct InvalidRevisionException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidRevisionExceptionBody: Equatable {
    public let message: String?
}

extension InvalidRevisionExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRoleException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidRoleException(message: \(String(describing: message)))"}
}

extension InvalidRoleException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidRoleExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The service role ARN was specified in an invalid format. Or, if an Auto Scaling group
///             was specified, the specified service role does not grant the appropriate permissions to
///             Amazon EC2 Auto Scaling.</p>
public struct InvalidRoleException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidRoleExceptionBody: Equatable {
    public let message: String?
}

extension InvalidRoleExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSortByException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidSortByException(message: \(String(describing: message)))"}
}

extension InvalidSortByException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidSortByExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The column name to sort by is either not present or was specified in an invalid
///             format.</p>
public struct InvalidSortByException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidSortByExceptionBody: Equatable {
    public let message: String?
}

extension InvalidSortByExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSortOrderException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidSortOrderException(message: \(String(describing: message)))"}
}

extension InvalidSortOrderException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidSortOrderExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The sort order was specified in an invalid format.</p>
public struct InvalidSortOrderException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidSortOrderExceptionBody: Equatable {
    public let message: String?
}

extension InvalidSortOrderExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTagException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidTagException(message: \(String(describing: message)))"}
}

extension InvalidTagException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidTagExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The tag was specified in an invalid format.</p>
public struct InvalidTagException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTagExceptionBody: Equatable {
    public let message: String?
}

extension InvalidTagExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTagFilterException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidTagFilterException(message: \(String(describing: message)))"}
}

extension InvalidTagFilterException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidTagFilterExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The tag filter was specified in an invalid format.</p>
public struct InvalidTagFilterException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTagFilterExceptionBody: Equatable {
    public let message: String?
}

extension InvalidTagFilterExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTagsToAddException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidTagsToAddException(message: \(String(describing: message)))"}
}

extension InvalidTagsToAddException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidTagsToAddExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p> The specified tags are not valid. </p>
public struct InvalidTagsToAddException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTagsToAddExceptionBody: Equatable {
    public let message: String?
}

extension InvalidTagsToAddExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTargetFilterNameException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidTargetFilterNameException(message: \(String(describing: message)))"}
}

extension InvalidTargetFilterNameException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidTargetFilterNameExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p> The target filter name is invalid. </p>
public struct InvalidTargetFilterNameException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTargetFilterNameExceptionBody: Equatable {
    public let message: String?
}

extension InvalidTargetFilterNameExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTargetGroupPairException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidTargetGroupPairException(message: \(String(describing: message)))"}
}

extension InvalidTargetGroupPairException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidTargetGroupPairExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p> A target group pair associated with this deployment is not valid. </p>
public struct InvalidTargetGroupPairException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTargetGroupPairExceptionBody: Equatable {
    public let message: String?
}

extension InvalidTargetGroupPairExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTargetInstancesException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidTargetInstancesException(message: \(String(describing: message)))"}
}

extension InvalidTargetInstancesException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidTargetInstancesExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The target instance configuration is invalid. Possible causes include:</p>
///         <ul>
///             <li>
///                 <p>Configuration data for target instances was entered for an in-place
///                     deployment.</p>
///             </li>
///             <li>
///                 <p>The limit of 10 tags for a tag type was exceeded.</p>
///             </li>
///             <li>
///                 <p>The combined length of the tag names exceeded the limit. </p>
///             </li>
///             <li>
///                 <p>A specified tag is not currently applied to any instances.</p>
///             </li>
///          </ul>
public struct InvalidTargetInstancesException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTargetInstancesExceptionBody: Equatable {
    public let message: String?
}

extension InvalidTargetInstancesExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTimeRangeException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidTimeRangeException(message: \(String(describing: message)))"}
}

extension InvalidTimeRangeException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidTimeRangeExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified time range was specified in an invalid format.</p>
public struct InvalidTimeRangeException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTimeRangeExceptionBody: Equatable {
    public let message: String?
}

extension InvalidTimeRangeExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTrafficRoutingConfigurationException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidTrafficRoutingConfigurationException(message: \(String(describing: message)))"}
}

extension InvalidTrafficRoutingConfigurationException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidTrafficRoutingConfigurationExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p> The configuration that specifies how traffic is routed during a deployment is
///             invalid.</p>
public struct InvalidTrafficRoutingConfigurationException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTrafficRoutingConfigurationExceptionBody: Equatable {
    public let message: String?
}

extension InvalidTrafficRoutingConfigurationExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTriggerConfigException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidTriggerConfigException(message: \(String(describing: message)))"}
}

extension InvalidTriggerConfigException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidTriggerConfigExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The trigger was specified in an invalid format.</p>
public struct InvalidTriggerConfigException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTriggerConfigExceptionBody: Equatable {
    public let message: String?
}

extension InvalidTriggerConfigExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidUpdateOutdatedInstancesOnlyValueException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidUpdateOutdatedInstancesOnlyValueException(message: \(String(describing: message)))"}
}

extension InvalidUpdateOutdatedInstancesOnlyValueException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidUpdateOutdatedInstancesOnlyValueExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The UpdateOutdatedInstancesOnly value is invalid. For AWS Lambda deployments,
///                 <code>false</code> is expected. For EC2/On-premises deployments, <code>true</code>
///             or <code>false</code> is expected.</p>
public struct InvalidUpdateOutdatedInstancesOnlyValueException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidUpdateOutdatedInstancesOnlyValueExceptionBody: Equatable {
    public let message: String?
}

extension InvalidUpdateOutdatedInstancesOnlyValueExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LambdaFunctionInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case currentVersion
        case functionAlias
        case functionName
        case targetVersion
        case targetVersionWeight
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currentVersion = currentVersion {
            try encodeContainer.encode(currentVersion, forKey: .currentVersion)
        }
        if let functionAlias = functionAlias {
            try encodeContainer.encode(functionAlias, forKey: .functionAlias)
        }
        if let functionName = functionName {
            try encodeContainer.encode(functionName, forKey: .functionName)
        }
        if let targetVersion = targetVersion {
            try encodeContainer.encode(targetVersion, forKey: .targetVersion)
        }
        if targetVersionWeight != 0.0 {
            try encodeContainer.encode(targetVersionWeight, forKey: .targetVersionWeight)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let functionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .functionName)
        functionName = functionNameDecoded
        let functionAliasDecoded = try containerValues.decodeIfPresent(String.self, forKey: .functionAlias)
        functionAlias = functionAliasDecoded
        let currentVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .currentVersion)
        currentVersion = currentVersionDecoded
        let targetVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetVersion)
        targetVersion = targetVersionDecoded
        let targetVersionWeightDecoded = try containerValues.decode(Double.self, forKey: .targetVersionWeight)
        targetVersionWeight = targetVersionWeightDecoded
    }
}

extension LambdaFunctionInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LambdaFunctionInfo(currentVersion: \(String(describing: currentVersion)), functionAlias: \(String(describing: functionAlias)), functionName: \(String(describing: functionName)), targetVersion: \(String(describing: targetVersion)), targetVersionWeight: \(String(describing: targetVersionWeight)))"}
}

/// <p> Information about a Lambda function specified in a deployment. </p>
public struct LambdaFunctionInfo: Equatable {
    /// <p> The version of a Lambda function that production traffic points to. </p>
    public let currentVersion: String?
    /// <p> The alias of a Lambda function. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html">AWS Lambda Function Aliases</a> in the
    ///                 <i>AWS Lambda Developer Guide</i>.</p>
    public let functionAlias: String?
    /// <p> The name of a Lambda function. </p>
    public let functionName: String?
    /// <p> The version of a Lambda function that production traffic points to after the Lambda
    ///             function is deployed. </p>
    public let targetVersion: String?
    /// <p> The percentage of production traffic that the target version of a Lambda function
    ///             receives. </p>
    public let targetVersionWeight: Double

    public init (
        currentVersion: String? = nil,
        functionAlias: String? = nil,
        functionName: String? = nil,
        targetVersion: String? = nil,
        targetVersionWeight: Double = 0.0
    )
    {
        self.currentVersion = currentVersion
        self.functionAlias = functionAlias
        self.functionName = functionName
        self.targetVersion = targetVersion
        self.targetVersionWeight = targetVersionWeight
    }
}

extension LambdaTarget: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deploymentId
        case lambdaFunctionInfo
        case lastUpdatedAt
        case lifecycleEvents
        case status
        case targetArn
        case targetId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let lambdaFunctionInfo = lambdaFunctionInfo {
            try encodeContainer.encode(lambdaFunctionInfo, forKey: .lambdaFunctionInfo)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let lifecycleEvents = lifecycleEvents {
            var lifecycleEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lifecycleEvents)
            for lifecycleeventlist0 in lifecycleEvents {
                try lifecycleEventsContainer.encode(lifecycleeventlist0)
            }
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetArn = targetArn {
            try encodeContainer.encode(targetArn, forKey: .targetArn)
        }
        if let targetId = targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetId)
        targetId = targetIdDecoded
        let targetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(TargetStatus.self, forKey: .status)
        status = statusDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let lifecycleEventsContainer = try containerValues.decodeIfPresent([LifecycleEvent?].self, forKey: .lifecycleEvents)
        var lifecycleEventsDecoded0:[LifecycleEvent]? = nil
        if let lifecycleEventsContainer = lifecycleEventsContainer {
            lifecycleEventsDecoded0 = [LifecycleEvent]()
            for structure0 in lifecycleEventsContainer {
                if let structure0 = structure0 {
                    lifecycleEventsDecoded0?.append(structure0)
                }
            }
        }
        lifecycleEvents = lifecycleEventsDecoded0
        let lambdaFunctionInfoDecoded = try containerValues.decodeIfPresent(LambdaFunctionInfo.self, forKey: .lambdaFunctionInfo)
        lambdaFunctionInfo = lambdaFunctionInfoDecoded
    }
}

extension LambdaTarget: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LambdaTarget(deploymentId: \(String(describing: deploymentId)), lambdaFunctionInfo: \(String(describing: lambdaFunctionInfo)), lastUpdatedAt: \(String(describing: lastUpdatedAt)), lifecycleEvents: \(String(describing: lifecycleEvents)), status: \(String(describing: status)), targetArn: \(String(describing: targetArn)), targetId: \(String(describing: targetId)))"}
}

/// <p> Information about the target AWS Lambda function during an AWS Lambda deployment.
///         </p>
public struct LambdaTarget: Equatable {
    /// <p> The unique ID of a deployment. </p>
    public let deploymentId: String?
    /// <p> A <code>LambdaFunctionInfo</code> object that describes a target Lambda function.
    ///         </p>
    public let lambdaFunctionInfo: LambdaFunctionInfo?
    /// <p> The date and time when the target Lambda function was updated by a deployment.
    ///         </p>
    public let lastUpdatedAt: Date?
    /// <p> The lifecycle events of the deployment to this target Lambda function. </p>
    public let lifecycleEvents: [LifecycleEvent]?
    /// <p> The status an AWS Lambda deployment's target Lambda function. </p>
    public let status: TargetStatus?
    /// <p> The Amazon Resource Name (ARN) of the target. </p>
    public let targetArn: String?
    /// <p> The unique ID of a deployment target that has a type of <code>lambdaTarget</code>.
    ///         </p>
    public let targetId: String?

    public init (
        deploymentId: String? = nil,
        lambdaFunctionInfo: LambdaFunctionInfo? = nil,
        lastUpdatedAt: Date? = nil,
        lifecycleEvents: [LifecycleEvent]? = nil,
        status: TargetStatus? = nil,
        targetArn: String? = nil,
        targetId: String? = nil
    )
    {
        self.deploymentId = deploymentId
        self.lambdaFunctionInfo = lambdaFunctionInfo
        self.lastUpdatedAt = lastUpdatedAt
        self.lifecycleEvents = lifecycleEvents
        self.status = status
        self.targetArn = targetArn
        self.targetId = targetId
    }
}

extension LastDeploymentInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createTime
        case deploymentId
        case endTime
        case status
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createTime = createTime {
            try encodeContainer.encode(createTime.timeIntervalSince1970, forKey: .createTime)
        }
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DeploymentStatus.self, forKey: .status)
        status = statusDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createTime)
        createTime = createTimeDecoded
    }
}

extension LastDeploymentInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LastDeploymentInfo(createTime: \(String(describing: createTime)), deploymentId: \(String(describing: deploymentId)), endTime: \(String(describing: endTime)), status: \(String(describing: status)))"}
}

/// <p>Information about the most recent attempted or successful deployment to a deployment
///             group.</p>
public struct LastDeploymentInfo: Equatable {
    /// <p>A timestamp that indicates when the most recent deployment to the deployment group
    ///             started.</p>
    public let createTime: Date?
    /// <p> The unique ID of a deployment. </p>
    public let deploymentId: String?
    /// <p>A timestamp that indicates when the most recent deployment to the deployment group was
    ///             complete.</p>
    public let endTime: Date?
    /// <p>The status of the most recent deployment.</p>
    public let status: DeploymentStatus?

    public init (
        createTime: Date? = nil,
        deploymentId: String? = nil,
        endTime: Date? = nil,
        status: DeploymentStatus? = nil
    )
    {
        self.createTime = createTime
        self.deploymentId = deploymentId
        self.endTime = endTime
        self.status = status
    }
}

public enum LifecycleErrorCode {
    case scriptFailed
    case scriptMissing
    case scriptNotExecutable
    case scriptTimedOut
    case success
    case unknownError
    case sdkUnknown(String)
}

extension LifecycleErrorCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [LifecycleErrorCode] {
        return [
            .scriptFailed,
            .scriptMissing,
            .scriptNotExecutable,
            .scriptTimedOut,
            .success,
            .unknownError,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .scriptFailed: return "ScriptFailed"
        case .scriptMissing: return "ScriptMissing"
        case .scriptNotExecutable: return "ScriptNotExecutable"
        case .scriptTimedOut: return "ScriptTimedOut"
        case .success: return "Success"
        case .unknownError: return "UnknownError"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = LifecycleErrorCode(rawValue: rawValue) ?? LifecycleErrorCode.sdkUnknown(rawValue)
    }
}

extension LifecycleEvent: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case diagnostics
        case endTime
        case lifecycleEventName
        case startTime
        case status
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let diagnostics = diagnostics {
            try encodeContainer.encode(diagnostics, forKey: .diagnostics)
        }
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let lifecycleEventName = lifecycleEventName {
            try encodeContainer.encode(lifecycleEventName, forKey: .lifecycleEventName)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lifecycleEventNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lifecycleEventName)
        lifecycleEventName = lifecycleEventNameDecoded
        let diagnosticsDecoded = try containerValues.decodeIfPresent(Diagnostics.self, forKey: .diagnostics)
        diagnostics = diagnosticsDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LifecycleEventStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension LifecycleEvent: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LifecycleEvent(diagnostics: \(String(describing: diagnostics)), endTime: \(String(describing: endTime)), lifecycleEventName: \(String(describing: lifecycleEventName)), startTime: \(String(describing: startTime)), status: \(String(describing: status)))"}
}

/// <p>Information about a deployment lifecycle event.</p>
public struct LifecycleEvent: Equatable {
    /// <p>Diagnostic information about the deployment lifecycle event.</p>
    public let diagnostics: Diagnostics?
    /// <p>A timestamp that indicates when the deployment lifecycle event ended.</p>
    public let endTime: Date?
    /// <p>The deployment lifecycle event name, such as <code>ApplicationStop</code>,
    ///                 <code>BeforeInstall</code>, <code>AfterInstall</code>,
    ///             <code>ApplicationStart</code>, or <code>ValidateService</code>.</p>
    public let lifecycleEventName: String?
    /// <p>A timestamp that indicates when the deployment lifecycle event started.</p>
    public let startTime: Date?
    /// <p>The deployment lifecycle event status:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Pending: The deployment lifecycle event is pending.</p>
    ///             </li>
    ///             <li>
    ///                 <p>InProgress: The deployment lifecycle event is in progress.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Succeeded: The deployment lifecycle event ran successfully.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Failed: The deployment lifecycle event has failed.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Skipped: The deployment lifecycle event has been skipped.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Unknown: The deployment lifecycle event is unknown.</p>
    ///             </li>
    ///          </ul>
    public let status: LifecycleEventStatus?

    public init (
        diagnostics: Diagnostics? = nil,
        endTime: Date? = nil,
        lifecycleEventName: String? = nil,
        startTime: Date? = nil,
        status: LifecycleEventStatus? = nil
    )
    {
        self.diagnostics = diagnostics
        self.endTime = endTime
        self.lifecycleEventName = lifecycleEventName
        self.startTime = startTime
        self.status = status
    }
}

extension LifecycleEventAlreadyCompletedException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LifecycleEventAlreadyCompletedException(message: \(String(describing: message)))"}
}

extension LifecycleEventAlreadyCompletedException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: LifecycleEventAlreadyCompletedExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An attempt to return the status of an already completed lifecycle event
///             occurred.</p>
public struct LifecycleEventAlreadyCompletedException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct LifecycleEventAlreadyCompletedExceptionBody: Equatable {
    public let message: String?
}

extension LifecycleEventAlreadyCompletedExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum LifecycleEventStatus {
    case failed
    case inProgress
    case pending
    case skipped
    case succeeded
    case unknown
    case sdkUnknown(String)
}

extension LifecycleEventStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [LifecycleEventStatus] {
        return [
            .failed,
            .inProgress,
            .pending,
            .skipped,
            .succeeded,
            .unknown,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .failed: return "Failed"
        case .inProgress: return "InProgress"
        case .pending: return "Pending"
        case .skipped: return "Skipped"
        case .succeeded: return "Succeeded"
        case .unknown: return "Unknown"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = LifecycleEventStatus(rawValue: rawValue) ?? LifecycleEventStatus.sdkUnknown(rawValue)
    }
}

extension LifecycleHookLimitExceededException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LifecycleHookLimitExceededException(message: \(String(describing: message)))"}
}

extension LifecycleHookLimitExceededException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: LifecycleHookLimitExceededExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The limit for lifecycle hooks was exceeded.</p>
public struct LifecycleHookLimitExceededException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct LifecycleHookLimitExceededExceptionBody: Equatable {
    public let message: String?
}

extension LifecycleHookLimitExceededExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct ListApplicationRevisionsInputBodyMiddleware: Middleware {
    public let id: String = "ListApplicationRevisionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListApplicationRevisionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListApplicationRevisionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListApplicationRevisionsInput>
    public typealias MOutput = OperationOutput<ListApplicationRevisionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListApplicationRevisionsOutputError>
}

extension ListApplicationRevisionsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListApplicationRevisionsInput(applicationName: \(String(describing: applicationName)), deployed: \(String(describing: deployed)), nextToken: \(String(describing: nextToken)), s3Bucket: \(String(describing: s3Bucket)), s3KeyPrefix: \(String(describing: s3KeyPrefix)), sortBy: \(String(describing: sortBy)), sortOrder: \(String(describing: sortOrder)))"}
}

extension ListApplicationRevisionsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case deployed
        case nextToken
        case s3Bucket
        case s3KeyPrefix
        case sortBy
        case sortOrder
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let deployed = deployed {
            try encodeContainer.encode(deployed.rawValue, forKey: .deployed)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let s3Bucket = s3Bucket {
            try encodeContainer.encode(s3Bucket, forKey: .s3Bucket)
        }
        if let s3KeyPrefix = s3KeyPrefix {
            try encodeContainer.encode(s3KeyPrefix, forKey: .s3KeyPrefix)
        }
        if let sortBy = sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

public struct ListApplicationRevisionsInputHeadersMiddleware: Middleware {
    public let id: String = "ListApplicationRevisionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListApplicationRevisionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListApplicationRevisionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListApplicationRevisionsInput>
    public typealias MOutput = OperationOutput<ListApplicationRevisionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListApplicationRevisionsOutputError>
}

public struct ListApplicationRevisionsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListApplicationRevisionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListApplicationRevisionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListApplicationRevisionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListApplicationRevisionsInput>
    public typealias MOutput = OperationOutput<ListApplicationRevisionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListApplicationRevisionsOutputError>
}

/// <p> Represents the input of a <code>ListApplicationRevisions</code> operation. </p>
public struct ListApplicationRevisionsInput: Equatable {
    /// <p> The name of an AWS CodeDeploy application associated with the IAM user or AWS
    ///             account. </p>
    public let applicationName: String?
    /// <p> Whether to list revisions based on whether the revision is the target revision of a
    ///             deployment group: </p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>include</code>: List revisions that are target revisions of a deployment
    ///                     group.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>exclude</code>: Do not list revisions that are target revisions of a
    ///                     deployment group.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>ignore</code>: List all revisions.</p>
    ///             </li>
    ///          </ul>
    public let deployed: ListStateFilterAction?
    /// <p>An identifier returned from the previous <code>ListApplicationRevisions</code> call.
    ///             It can be used to return the next set of applications in the list.</p>
    public let nextToken: String?
    /// <p> An Amazon S3 bucket name to limit the search for revisions. </p>
    ///         <p> If set to null, all of the user's buckets are searched. </p>
    public let s3Bucket: String?
    /// <p> A key prefix for the set of Amazon S3 objects to limit the search for revisions.
    ///         </p>
    public let s3KeyPrefix: String?
    /// <p>The column name to use to sort the list results:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>registerTime</code>: Sort by the time the revisions were registered with
    ///                     AWS CodeDeploy.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>firstUsedTime</code>: Sort by the time the revisions were first used in
    ///                     a deployment.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>lastUsedTime</code>: Sort by the time the revisions were last used in a
    ///                     deployment.</p>
    ///             </li>
    ///          </ul>
    ///         <p> If not specified or set to null, the results are returned in an arbitrary order.
    ///         </p>
    public let sortBy: ApplicationRevisionSortBy?
    /// <p> The order in which to sort the list results: </p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>ascending</code>: ascending order.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>descending</code>: descending order.</p>
    ///             </li>
    ///          </ul>
    ///         <p>If not specified, the results are sorted in ascending order.</p>
    ///         <p>If set to null, the results are sorted in an arbitrary order.</p>
    public let sortOrder: SortOrder?

    public init (
        applicationName: String? = nil,
        deployed: ListStateFilterAction? = nil,
        nextToken: String? = nil,
        s3Bucket: String? = nil,
        s3KeyPrefix: String? = nil,
        sortBy: ApplicationRevisionSortBy? = nil,
        sortOrder: SortOrder? = nil
    )
    {
        self.applicationName = applicationName
        self.deployed = deployed
        self.nextToken = nextToken
        self.s3Bucket = s3Bucket
        self.s3KeyPrefix = s3KeyPrefix
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListApplicationRevisionsInputBody: Equatable {
    public let applicationName: String?
    public let sortBy: ApplicationRevisionSortBy?
    public let sortOrder: SortOrder?
    public let s3Bucket: String?
    public let s3KeyPrefix: String?
    public let deployed: ListStateFilterAction?
    public let nextToken: String?
}

extension ListApplicationRevisionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case deployed
        case nextToken
        case s3Bucket
        case s3KeyPrefix
        case sortBy
        case sortOrder
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(ApplicationRevisionSortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let s3BucketDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
        let s3KeyPrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3KeyPrefix)
        s3KeyPrefix = s3KeyPrefixDecoded
        let deployedDecoded = try containerValues.decodeIfPresent(ListStateFilterAction.self, forKey: .deployed)
        deployed = deployedDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListApplicationRevisionsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListApplicationRevisionsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BucketNameFilterRequiredException" : self = .bucketNameFilterRequiredException(try BucketNameFilterRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidBucketNameFilterException" : self = .invalidBucketNameFilterException(try InvalidBucketNameFilterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeployedStateFilterException" : self = .invalidDeployedStateFilterException(try InvalidDeployedStateFilterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKeyPrefixFilterException" : self = .invalidKeyPrefixFilterException(try InvalidKeyPrefixFilterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSortByException" : self = .invalidSortByException(try InvalidSortByException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSortOrderException" : self = .invalidSortOrderException(try InvalidSortOrderException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListApplicationRevisionsOutputError: Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case bucketNameFilterRequiredException(BucketNameFilterRequiredException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidBucketNameFilterException(InvalidBucketNameFilterException)
    case invalidDeployedStateFilterException(InvalidDeployedStateFilterException)
    case invalidKeyPrefixFilterException(InvalidKeyPrefixFilterException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidSortByException(InvalidSortByException)
    case invalidSortOrderException(InvalidSortOrderException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListApplicationRevisionsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListApplicationRevisionsOutputResponse(nextToken: \(String(describing: nextToken)), revisions: \(String(describing: revisions)))"}
}

extension ListApplicationRevisionsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListApplicationRevisionsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.revisions = output.revisions
        } else {
            self.nextToken = nil
            self.revisions = nil
        }
    }
}

/// <p>Represents the output of a <code>ListApplicationRevisions</code> operation.</p>
public struct ListApplicationRevisionsOutputResponse: Equatable {
    /// <p>If a large amount of information is returned, an identifier is also returned. It can
    ///             be used in a subsequent list application revisions call to return the next set of
    ///             application revisions in the list.</p>
    public let nextToken: String?
    /// <p>A list of locations that contain the matching revisions.</p>
    public let revisions: [RevisionLocation]?

    public init (
        nextToken: String? = nil,
        revisions: [RevisionLocation]? = nil
    )
    {
        self.nextToken = nextToken
        self.revisions = revisions
    }
}

struct ListApplicationRevisionsOutputResponseBody: Equatable {
    public let revisions: [RevisionLocation]?
    public let nextToken: String?
}

extension ListApplicationRevisionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case revisions
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let revisionsContainer = try containerValues.decodeIfPresent([RevisionLocation?].self, forKey: .revisions)
        var revisionsDecoded0:[RevisionLocation]? = nil
        if let revisionsContainer = revisionsContainer {
            revisionsDecoded0 = [RevisionLocation]()
            for structure0 in revisionsContainer {
                if let structure0 = structure0 {
                    revisionsDecoded0?.append(structure0)
                }
            }
        }
        revisions = revisionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListApplicationsInputBodyMiddleware: Middleware {
    public let id: String = "ListApplicationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListApplicationsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListApplicationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListApplicationsInput>
    public typealias MOutput = OperationOutput<ListApplicationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListApplicationsOutputError>
}

extension ListApplicationsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListApplicationsInput(nextToken: \(String(describing: nextToken)))"}
}

extension ListApplicationsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case nextToken
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListApplicationsInputHeadersMiddleware: Middleware {
    public let id: String = "ListApplicationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListApplicationsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListApplicationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListApplicationsInput>
    public typealias MOutput = OperationOutput<ListApplicationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListApplicationsOutputError>
}

public struct ListApplicationsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListApplicationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListApplicationsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListApplicationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListApplicationsInput>
    public typealias MOutput = OperationOutput<ListApplicationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListApplicationsOutputError>
}

/// <p>Represents the input of a <code>ListApplications</code> operation.</p>
public struct ListApplicationsInput: Equatable {
    /// <p>An identifier returned from the previous list applications call. It can be used to
    ///             return the next set of applications in the list.</p>
    public let nextToken: String?

    public init (
        nextToken: String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

struct ListApplicationsInputBody: Equatable {
    public let nextToken: String?
}

extension ListApplicationsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListApplicationsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListApplicationsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListApplicationsOutputError: Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListApplicationsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListApplicationsOutputResponse(applications: \(String(describing: applications)), nextToken: \(String(describing: nextToken)))"}
}

extension ListApplicationsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListApplicationsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.applications = output.applications
            self.nextToken = output.nextToken
        } else {
            self.applications = nil
            self.nextToken = nil
        }
    }
}

/// <p>Represents the output of a ListApplications operation.</p>
public struct ListApplicationsOutputResponse: Equatable {
    /// <p>A list of application names.</p>
    public let applications: [String]?
    /// <p>If a large amount of information is returned, an identifier is also returned. It can
    ///             be used in a subsequent list applications call to return the next set of applications in
    ///             the list.</p>
    public let nextToken: String?

    public init (
        applications: [String]? = nil,
        nextToken: String? = nil
    )
    {
        self.applications = applications
        self.nextToken = nextToken
    }
}

struct ListApplicationsOutputResponseBody: Equatable {
    public let applications: [String]?
    public let nextToken: String?
}

extension ListApplicationsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applications
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .applications)
        var applicationsDecoded0:[String]? = nil
        if let applicationsContainer = applicationsContainer {
            applicationsDecoded0 = [String]()
            for string0 in applicationsContainer {
                if let string0 = string0 {
                    applicationsDecoded0?.append(string0)
                }
            }
        }
        applications = applicationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListDeploymentConfigsInputBodyMiddleware: Middleware {
    public let id: String = "ListDeploymentConfigsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDeploymentConfigsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDeploymentConfigsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDeploymentConfigsInput>
    public typealias MOutput = OperationOutput<ListDeploymentConfigsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDeploymentConfigsOutputError>
}

extension ListDeploymentConfigsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListDeploymentConfigsInput(nextToken: \(String(describing: nextToken)))"}
}

extension ListDeploymentConfigsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case nextToken
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListDeploymentConfigsInputHeadersMiddleware: Middleware {
    public let id: String = "ListDeploymentConfigsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDeploymentConfigsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDeploymentConfigsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDeploymentConfigsInput>
    public typealias MOutput = OperationOutput<ListDeploymentConfigsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDeploymentConfigsOutputError>
}

public struct ListDeploymentConfigsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListDeploymentConfigsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDeploymentConfigsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDeploymentConfigsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDeploymentConfigsInput>
    public typealias MOutput = OperationOutput<ListDeploymentConfigsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDeploymentConfigsOutputError>
}

/// <p>Represents the input of a <code>ListDeploymentConfigs</code> operation.</p>
public struct ListDeploymentConfigsInput: Equatable {
    /// <p>An identifier returned from the previous <code>ListDeploymentConfigs</code> call. It
    ///             can be used to return the next set of deployment configurations in the list. </p>
    public let nextToken: String?

    public init (
        nextToken: String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

struct ListDeploymentConfigsInputBody: Equatable {
    public let nextToken: String?
}

extension ListDeploymentConfigsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDeploymentConfigsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDeploymentConfigsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDeploymentConfigsOutputError: Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDeploymentConfigsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListDeploymentConfigsOutputResponse(deploymentConfigsList: \(String(describing: deploymentConfigsList)), nextToken: \(String(describing: nextToken)))"}
}

extension ListDeploymentConfigsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListDeploymentConfigsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.deploymentConfigsList = output.deploymentConfigsList
            self.nextToken = output.nextToken
        } else {
            self.deploymentConfigsList = nil
            self.nextToken = nil
        }
    }
}

/// <p>Represents the output of a <code>ListDeploymentConfigs</code> operation.</p>
public struct ListDeploymentConfigsOutputResponse: Equatable {
    /// <p>A list of deployment configurations, including built-in configurations such as
    ///                 <code>CodeDeployDefault.OneAtATime</code>.</p>
    public let deploymentConfigsList: [String]?
    /// <p>If a large amount of information is returned, an identifier is also returned. It can
    ///             be used in a subsequent list deployment configurations call to return the next set of
    ///             deployment configurations in the list.</p>
    public let nextToken: String?

    public init (
        deploymentConfigsList: [String]? = nil,
        nextToken: String? = nil
    )
    {
        self.deploymentConfigsList = deploymentConfigsList
        self.nextToken = nextToken
    }
}

struct ListDeploymentConfigsOutputResponseBody: Equatable {
    public let deploymentConfigsList: [String]?
    public let nextToken: String?
}

extension ListDeploymentConfigsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentConfigsList
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentConfigsListContainer = try containerValues.decodeIfPresent([String?].self, forKey: .deploymentConfigsList)
        var deploymentConfigsListDecoded0:[String]? = nil
        if let deploymentConfigsListContainer = deploymentConfigsListContainer {
            deploymentConfigsListDecoded0 = [String]()
            for string0 in deploymentConfigsListContainer {
                if let string0 = string0 {
                    deploymentConfigsListDecoded0?.append(string0)
                }
            }
        }
        deploymentConfigsList = deploymentConfigsListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListDeploymentGroupsInputBodyMiddleware: Middleware {
    public let id: String = "ListDeploymentGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDeploymentGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDeploymentGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDeploymentGroupsInput>
    public typealias MOutput = OperationOutput<ListDeploymentGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDeploymentGroupsOutputError>
}

extension ListDeploymentGroupsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListDeploymentGroupsInput(applicationName: \(String(describing: applicationName)), nextToken: \(String(describing: nextToken)))"}
}

extension ListDeploymentGroupsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case nextToken
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListDeploymentGroupsInputHeadersMiddleware: Middleware {
    public let id: String = "ListDeploymentGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDeploymentGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDeploymentGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDeploymentGroupsInput>
    public typealias MOutput = OperationOutput<ListDeploymentGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDeploymentGroupsOutputError>
}

public struct ListDeploymentGroupsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListDeploymentGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDeploymentGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDeploymentGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDeploymentGroupsInput>
    public typealias MOutput = OperationOutput<ListDeploymentGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDeploymentGroupsOutputError>
}

/// <p>Represents the input of a <code>ListDeploymentGroups</code> operation.</p>
public struct ListDeploymentGroupsInput: Equatable {
    /// <p>The name of an AWS CodeDeploy application associated with the IAM user or AWS
    ///             account.</p>
    public let applicationName: String?
    /// <p>An identifier returned from the previous list deployment groups call. It can be used
    ///             to return the next set of deployment groups in the list.</p>
    public let nextToken: String?

    public init (
        applicationName: String? = nil,
        nextToken: String? = nil
    )
    {
        self.applicationName = applicationName
        self.nextToken = nextToken
    }
}

struct ListDeploymentGroupsInputBody: Equatable {
    public let applicationName: String?
    public let nextToken: String?
}

extension ListDeploymentGroupsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDeploymentGroupsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDeploymentGroupsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDeploymentGroupsOutputError: Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidNextTokenException(InvalidNextTokenException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDeploymentGroupsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListDeploymentGroupsOutputResponse(applicationName: \(String(describing: applicationName)), deploymentGroups: \(String(describing: deploymentGroups)), nextToken: \(String(describing: nextToken)))"}
}

extension ListDeploymentGroupsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListDeploymentGroupsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.applicationName = output.applicationName
            self.deploymentGroups = output.deploymentGroups
            self.nextToken = output.nextToken
        } else {
            self.applicationName = nil
            self.deploymentGroups = nil
            self.nextToken = nil
        }
    }
}

/// <p>Represents the output of a <code>ListDeploymentGroups</code> operation.</p>
public struct ListDeploymentGroupsOutputResponse: Equatable {
    /// <p>The application name.</p>
    public let applicationName: String?
    /// <p>A list of deployment group names.</p>
    public let deploymentGroups: [String]?
    /// <p>If a large amount of information is returned, an identifier is also returned. It can
    ///             be used in a subsequent list deployment groups call to return the next set of deployment
    ///             groups in the list.</p>
    public let nextToken: String?

    public init (
        applicationName: String? = nil,
        deploymentGroups: [String]? = nil,
        nextToken: String? = nil
    )
    {
        self.applicationName = applicationName
        self.deploymentGroups = deploymentGroups
        self.nextToken = nextToken
    }
}

struct ListDeploymentGroupsOutputResponseBody: Equatable {
    public let applicationName: String?
    public let deploymentGroups: [String]?
    public let nextToken: String?
}

extension ListDeploymentGroupsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case deploymentGroups
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let deploymentGroupsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .deploymentGroups)
        var deploymentGroupsDecoded0:[String]? = nil
        if let deploymentGroupsContainer = deploymentGroupsContainer {
            deploymentGroupsDecoded0 = [String]()
            for string0 in deploymentGroupsContainer {
                if let string0 = string0 {
                    deploymentGroupsDecoded0?.append(string0)
                }
            }
        }
        deploymentGroups = deploymentGroupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListDeploymentInstancesInputBodyMiddleware: Middleware {
    public let id: String = "ListDeploymentInstancesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDeploymentInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDeploymentInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDeploymentInstancesInput>
    public typealias MOutput = OperationOutput<ListDeploymentInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDeploymentInstancesOutputError>
}

extension ListDeploymentInstancesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListDeploymentInstancesInput(deploymentId: \(String(describing: deploymentId)), instanceStatusFilter: \(String(describing: instanceStatusFilter)), instanceTypeFilter: \(String(describing: instanceTypeFilter)), nextToken: \(String(describing: nextToken)))"}
}

extension ListDeploymentInstancesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deploymentId
        case instanceStatusFilter
        case instanceTypeFilter
        case nextToken
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let instanceStatusFilter = instanceStatusFilter {
            var instanceStatusFilterContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceStatusFilter)
            for instancestatuslist0 in instanceStatusFilter {
                try instanceStatusFilterContainer.encode(instancestatuslist0.rawValue)
            }
        }
        if let instanceTypeFilter = instanceTypeFilter {
            var instanceTypeFilterContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceTypeFilter)
            for instancetypelist0 in instanceTypeFilter {
                try instanceTypeFilterContainer.encode(instancetypelist0.rawValue)
            }
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListDeploymentInstancesInputHeadersMiddleware: Middleware {
    public let id: String = "ListDeploymentInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDeploymentInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDeploymentInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDeploymentInstancesInput>
    public typealias MOutput = OperationOutput<ListDeploymentInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDeploymentInstancesOutputError>
}

public struct ListDeploymentInstancesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListDeploymentInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDeploymentInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDeploymentInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDeploymentInstancesInput>
    public typealias MOutput = OperationOutput<ListDeploymentInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDeploymentInstancesOutputError>
}

/// <p> Represents the input of a <code>ListDeploymentInstances</code> operation. </p>
public struct ListDeploymentInstancesInput: Equatable {
    /// <p> The unique ID of a deployment. </p>
    public let deploymentId: String?
    /// <p>A subset of instances to list by status:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>Pending</code>: Include those instances with pending deployments.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>InProgress</code>: Include those instances where deployments are still
    ///                     in progress.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Succeeded</code>: Include those instances with successful
    ///                     deployments.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Failed</code>: Include those instances with failed deployments.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Skipped</code>: Include those instances with skipped deployments.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Unknown</code>: Include those instances with deployments in an unknown
    ///                     state.</p>
    ///             </li>
    ///          </ul>
    public let instanceStatusFilter: [InstanceStatus]?
    /// <p>The set of instances in a blue/green deployment, either those in the original
    ///             environment ("BLUE") or those in the replacement environment ("GREEN"), for which you
    ///             want to view instance information.</p>
    public let instanceTypeFilter: [InstanceType]?
    /// <p>An identifier returned from the previous list deployment instances call. It can be
    ///             used to return the next set of deployment instances in the list.</p>
    public let nextToken: String?

    public init (
        deploymentId: String? = nil,
        instanceStatusFilter: [InstanceStatus]? = nil,
        instanceTypeFilter: [InstanceType]? = nil,
        nextToken: String? = nil
    )
    {
        self.deploymentId = deploymentId
        self.instanceStatusFilter = instanceStatusFilter
        self.instanceTypeFilter = instanceTypeFilter
        self.nextToken = nextToken
    }
}

struct ListDeploymentInstancesInputBody: Equatable {
    public let deploymentId: String?
    public let nextToken: String?
    public let instanceStatusFilter: [InstanceStatus]?
    public let instanceTypeFilter: [InstanceType]?
}

extension ListDeploymentInstancesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentId
        case instanceStatusFilter
        case instanceTypeFilter
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let instanceStatusFilterContainer = try containerValues.decodeIfPresent([InstanceStatus?].self, forKey: .instanceStatusFilter)
        var instanceStatusFilterDecoded0:[InstanceStatus]? = nil
        if let instanceStatusFilterContainer = instanceStatusFilterContainer {
            instanceStatusFilterDecoded0 = [InstanceStatus]()
            for string0 in instanceStatusFilterContainer {
                if let string0 = string0 {
                    instanceStatusFilterDecoded0?.append(string0)
                }
            }
        }
        instanceStatusFilter = instanceStatusFilterDecoded0
        let instanceTypeFilterContainer = try containerValues.decodeIfPresent([InstanceType?].self, forKey: .instanceTypeFilter)
        var instanceTypeFilterDecoded0:[InstanceType]? = nil
        if let instanceTypeFilterContainer = instanceTypeFilterContainer {
            instanceTypeFilterDecoded0 = [InstanceType]()
            for string0 in instanceTypeFilterContainer {
                if let string0 = string0 {
                    instanceTypeFilterDecoded0?.append(string0)
                }
            }
        }
        instanceTypeFilter = instanceTypeFilterDecoded0
    }
}

extension ListDeploymentInstancesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDeploymentInstancesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "DeploymentDoesNotExistException" : self = .deploymentDoesNotExistException(try DeploymentDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentNotStartedException" : self = .deploymentNotStartedException(try DeploymentNotStartedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidComputePlatformException" : self = .invalidComputePlatformException(try InvalidComputePlatformException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentInstanceTypeException" : self = .invalidDeploymentInstanceTypeException(try InvalidDeploymentInstanceTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceStatusException" : self = .invalidInstanceStatusException(try InvalidInstanceStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceTypeException" : self = .invalidInstanceTypeException(try InvalidInstanceTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTargetFilterNameException" : self = .invalidTargetFilterNameException(try InvalidTargetFilterNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDeploymentInstancesOutputError: Equatable {
    case deploymentDoesNotExistException(DeploymentDoesNotExistException)
    case deploymentIdRequiredException(DeploymentIdRequiredException)
    case deploymentNotStartedException(DeploymentNotStartedException)
    case invalidComputePlatformException(InvalidComputePlatformException)
    case invalidDeploymentIdException(InvalidDeploymentIdException)
    case invalidDeploymentInstanceTypeException(InvalidDeploymentInstanceTypeException)
    case invalidInstanceStatusException(InvalidInstanceStatusException)
    case invalidInstanceTypeException(InvalidInstanceTypeException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidTargetFilterNameException(InvalidTargetFilterNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDeploymentInstancesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListDeploymentInstancesOutputResponse(instancesList: \(String(describing: instancesList)), nextToken: \(String(describing: nextToken)))"}
}

extension ListDeploymentInstancesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListDeploymentInstancesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.instancesList = output.instancesList
            self.nextToken = output.nextToken
        } else {
            self.instancesList = nil
            self.nextToken = nil
        }
    }
}

/// <p>Represents the output of a <code>ListDeploymentInstances</code> operation.</p>
public struct ListDeploymentInstancesOutputResponse: Equatable {
    /// <p>A list of instance IDs.</p>
    public let instancesList: [String]?
    /// <p>If a large amount of information is returned, an identifier is also returned. It can
    ///             be used in a subsequent list deployment instances call to return the next set of
    ///             deployment instances in the list.</p>
    public let nextToken: String?

    public init (
        instancesList: [String]? = nil,
        nextToken: String? = nil
    )
    {
        self.instancesList = instancesList
        self.nextToken = nextToken
    }
}

struct ListDeploymentInstancesOutputResponseBody: Equatable {
    public let instancesList: [String]?
    public let nextToken: String?
}

extension ListDeploymentInstancesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instancesList
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instancesListContainer = try containerValues.decodeIfPresent([String?].self, forKey: .instancesList)
        var instancesListDecoded0:[String]? = nil
        if let instancesListContainer = instancesListContainer {
            instancesListDecoded0 = [String]()
            for string0 in instancesListContainer {
                if let string0 = string0 {
                    instancesListDecoded0?.append(string0)
                }
            }
        }
        instancesList = instancesListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListDeploymentTargetsInputBodyMiddleware: Middleware {
    public let id: String = "ListDeploymentTargetsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDeploymentTargetsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDeploymentTargetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDeploymentTargetsInput>
    public typealias MOutput = OperationOutput<ListDeploymentTargetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDeploymentTargetsOutputError>
}

extension ListDeploymentTargetsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListDeploymentTargetsInput(deploymentId: \(String(describing: deploymentId)), nextToken: \(String(describing: nextToken)), targetFilters: \(String(describing: targetFilters)))"}
}

extension ListDeploymentTargetsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deploymentId
        case nextToken
        case targetFilters
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let targetFilters = targetFilters {
            var targetFiltersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .targetFilters)
            for (dictKey0, targetfilters0) in targetFilters {
                try targetFiltersContainer.encode(targetfilters0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}

public struct ListDeploymentTargetsInputHeadersMiddleware: Middleware {
    public let id: String = "ListDeploymentTargetsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDeploymentTargetsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDeploymentTargetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDeploymentTargetsInput>
    public typealias MOutput = OperationOutput<ListDeploymentTargetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDeploymentTargetsOutputError>
}

public struct ListDeploymentTargetsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListDeploymentTargetsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDeploymentTargetsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDeploymentTargetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDeploymentTargetsInput>
    public typealias MOutput = OperationOutput<ListDeploymentTargetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDeploymentTargetsOutputError>
}

public struct ListDeploymentTargetsInput: Equatable {
    /// <p> The unique ID of a deployment. </p>
    public let deploymentId: String?
    /// <p> A token identifier returned from the previous <code>ListDeploymentTargets</code>
    ///             call. It can be used to return the next set of deployment targets in the list. </p>
    public let nextToken: String?
    /// <p> A key used to filter the returned targets. The two valid values are:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                     <code>TargetStatus</code> - A <code>TargetStatus</code> filter string can be
    ///                         <code>Failed</code>, <code>InProgress</code>, <code>Pending</code>,
    ///                         <code>Ready</code>, <code>Skipped</code>, <code>Succeeded</code>, or
    ///                         <code>Unknown</code>. </p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                     <code>ServerInstanceLabel</code> - A <code>ServerInstanceLabel</code> filter
    ///                     string can be <code>Blue</code> or <code>Green</code>. </p>
    ///             </li>
    ///          </ul>
    public let targetFilters: [String:[String]]?

    public init (
        deploymentId: String? = nil,
        nextToken: String? = nil,
        targetFilters: [String:[String]]? = nil
    )
    {
        self.deploymentId = deploymentId
        self.nextToken = nextToken
        self.targetFilters = targetFilters
    }
}

struct ListDeploymentTargetsInputBody: Equatable {
    public let deploymentId: String?
    public let nextToken: String?
    public let targetFilters: [String:[String]]?
}

extension ListDeploymentTargetsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentId
        case nextToken
        case targetFilters
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let targetFiltersContainer = try containerValues.decodeIfPresent([String: [String?]?].self, forKey: .targetFilters)
        var targetFiltersDecoded0: [String:[String]]? = nil
        if let targetFiltersContainer = targetFiltersContainer {
            targetFiltersDecoded0 = [String:[String]]()
            for (key0, filtervaluelist0) in targetFiltersContainer {
                var filtervaluelist0Decoded0: [String]? = nil
                if let filtervaluelist0 = filtervaluelist0 {
                    filtervaluelist0Decoded0 = [String]()
                    for string1 in filtervaluelist0 {
                        if let string1 = string1 {
                            filtervaluelist0Decoded0?.append(string1)
                        }
                    }
                }
                targetFiltersDecoded0?[key0] = filtervaluelist0Decoded0
            }
        }
        targetFilters = targetFiltersDecoded0
    }
}

extension ListDeploymentTargetsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDeploymentTargetsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "DeploymentDoesNotExistException" : self = .deploymentDoesNotExistException(try DeploymentDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentNotStartedException" : self = .deploymentNotStartedException(try DeploymentNotStartedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentInstanceTypeException" : self = .invalidDeploymentInstanceTypeException(try InvalidDeploymentInstanceTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceStatusException" : self = .invalidInstanceStatusException(try InvalidInstanceStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceTypeException" : self = .invalidInstanceTypeException(try InvalidInstanceTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDeploymentTargetsOutputError: Equatable {
    case deploymentDoesNotExistException(DeploymentDoesNotExistException)
    case deploymentIdRequiredException(DeploymentIdRequiredException)
    case deploymentNotStartedException(DeploymentNotStartedException)
    case invalidDeploymentIdException(InvalidDeploymentIdException)
    case invalidDeploymentInstanceTypeException(InvalidDeploymentInstanceTypeException)
    case invalidInstanceStatusException(InvalidInstanceStatusException)
    case invalidInstanceTypeException(InvalidInstanceTypeException)
    case invalidNextTokenException(InvalidNextTokenException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDeploymentTargetsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListDeploymentTargetsOutputResponse(nextToken: \(String(describing: nextToken)), targetIds: \(String(describing: targetIds)))"}
}

extension ListDeploymentTargetsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListDeploymentTargetsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.targetIds = output.targetIds
        } else {
            self.nextToken = nil
            self.targetIds = nil
        }
    }
}

public struct ListDeploymentTargetsOutputResponse: Equatable {
    /// <p> If a large amount of information is returned, a token identifier is also returned. It
    ///             can be used in a subsequent <code>ListDeploymentTargets</code> call to return the next
    ///             set of deployment targets in the list. </p>
    public let nextToken: String?
    /// <p> The unique IDs of deployment targets. </p>
    public let targetIds: [String]?

    public init (
        nextToken: String? = nil,
        targetIds: [String]? = nil
    )
    {
        self.nextToken = nextToken
        self.targetIds = targetIds
    }
}

struct ListDeploymentTargetsOutputResponseBody: Equatable {
    public let targetIds: [String]?
    public let nextToken: String?
}

extension ListDeploymentTargetsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case targetIds
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .targetIds)
        var targetIdsDecoded0:[String]? = nil
        if let targetIdsContainer = targetIdsContainer {
            targetIdsDecoded0 = [String]()
            for string0 in targetIdsContainer {
                if let string0 = string0 {
                    targetIdsDecoded0?.append(string0)
                }
            }
        }
        targetIds = targetIdsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListDeploymentsInputBodyMiddleware: Middleware {
    public let id: String = "ListDeploymentsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDeploymentsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDeploymentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDeploymentsInput>
    public typealias MOutput = OperationOutput<ListDeploymentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDeploymentsOutputError>
}

extension ListDeploymentsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListDeploymentsInput(applicationName: \(String(describing: applicationName)), createTimeRange: \(String(describing: createTimeRange)), deploymentGroupName: \(String(describing: deploymentGroupName)), externalId: \(String(describing: externalId)), includeOnlyStatuses: \(String(describing: includeOnlyStatuses)), nextToken: \(String(describing: nextToken)))"}
}

extension ListDeploymentsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case createTimeRange
        case deploymentGroupName
        case externalId
        case includeOnlyStatuses
        case nextToken
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let createTimeRange = createTimeRange {
            try encodeContainer.encode(createTimeRange, forKey: .createTimeRange)
        }
        if let deploymentGroupName = deploymentGroupName {
            try encodeContainer.encode(deploymentGroupName, forKey: .deploymentGroupName)
        }
        if let externalId = externalId {
            try encodeContainer.encode(externalId, forKey: .externalId)
        }
        if let includeOnlyStatuses = includeOnlyStatuses {
            var includeOnlyStatusesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includeOnlyStatuses)
            for deploymentstatuslist0 in includeOnlyStatuses {
                try includeOnlyStatusesContainer.encode(deploymentstatuslist0.rawValue)
            }
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListDeploymentsInputHeadersMiddleware: Middleware {
    public let id: String = "ListDeploymentsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDeploymentsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDeploymentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDeploymentsInput>
    public typealias MOutput = OperationOutput<ListDeploymentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDeploymentsOutputError>
}

public struct ListDeploymentsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListDeploymentsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListDeploymentsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListDeploymentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListDeploymentsInput>
    public typealias MOutput = OperationOutput<ListDeploymentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListDeploymentsOutputError>
}

/// <p>Represents the input of a <code>ListDeployments</code> operation.</p>
public struct ListDeploymentsInput: Equatable {
    /// <p>The name of an AWS CodeDeploy application associated with the IAM user or AWS
    ///             account.</p>
    ///         <note>
    ///             <p>If <code>applicationName</code> is specified, then
    ///                     <code>deploymentGroupName</code> must be specified. If it is not specified, then
    ///                     <code>deploymentGroupName</code> must not be specified. </p>
    ///         </note>
    public let applicationName: String?
    /// <p>A time range (start and end) for returning a subset of the list of deployments.</p>
    public let createTimeRange: TimeRange?
    /// <p>The name of a deployment group for the specified application.</p>
    ///         <note>
    ///             <p>If <code>deploymentGroupName</code> is specified, then
    ///                     <code>applicationName</code> must be specified. If it is not specified, then
    ///                     <code>applicationName</code> must not be specified. </p>
    ///         </note>
    public let deploymentGroupName: String?
    /// <p>The unique ID of an external resource for returning deployments linked to the external
    ///             resource.</p>
    public let externalId: String?
    /// <p>A subset of deployments to list by status:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>Created</code>: Include created deployments in the resulting
    ///                     list.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Queued</code>: Include queued deployments in the resulting list.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>In Progress</code>: Include in-progress deployments in the resulting
    ///                     list.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Succeeded</code>: Include successful deployments in the resulting
    ///                     list.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Failed</code>: Include failed deployments in the resulting list.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Stopped</code>: Include stopped deployments in the resulting
    ///                     list.</p>
    ///             </li>
    ///          </ul>
    public let includeOnlyStatuses: [DeploymentStatus]?
    /// <p>An identifier returned from the previous list deployments call. It can be used to
    ///             return the next set of deployments in the list.</p>
    public let nextToken: String?

    public init (
        applicationName: String? = nil,
        createTimeRange: TimeRange? = nil,
        deploymentGroupName: String? = nil,
        externalId: String? = nil,
        includeOnlyStatuses: [DeploymentStatus]? = nil,
        nextToken: String? = nil
    )
    {
        self.applicationName = applicationName
        self.createTimeRange = createTimeRange
        self.deploymentGroupName = deploymentGroupName
        self.externalId = externalId
        self.includeOnlyStatuses = includeOnlyStatuses
        self.nextToken = nextToken
    }
}

struct ListDeploymentsInputBody: Equatable {
    public let applicationName: String?
    public let deploymentGroupName: String?
    public let externalId: String?
    public let includeOnlyStatuses: [DeploymentStatus]?
    public let createTimeRange: TimeRange?
    public let nextToken: String?
}

extension ListDeploymentsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case createTimeRange
        case deploymentGroupName
        case externalId
        case includeOnlyStatuses
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let deploymentGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentGroupName)
        deploymentGroupName = deploymentGroupNameDecoded
        let externalIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .externalId)
        externalId = externalIdDecoded
        let includeOnlyStatusesContainer = try containerValues.decodeIfPresent([DeploymentStatus?].self, forKey: .includeOnlyStatuses)
        var includeOnlyStatusesDecoded0:[DeploymentStatus]? = nil
        if let includeOnlyStatusesContainer = includeOnlyStatusesContainer {
            includeOnlyStatusesDecoded0 = [DeploymentStatus]()
            for string0 in includeOnlyStatusesContainer {
                if let string0 = string0 {
                    includeOnlyStatusesDecoded0?.append(string0)
                }
            }
        }
        includeOnlyStatuses = includeOnlyStatusesDecoded0
        let createTimeRangeDecoded = try containerValues.decodeIfPresent(TimeRange.self, forKey: .createTimeRange)
        createTimeRange = createTimeRangeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDeploymentsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDeploymentsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupDoesNotExistException" : self = .deploymentGroupDoesNotExistException(try DeploymentGroupDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupNameRequiredException" : self = .deploymentGroupNameRequiredException(try DeploymentGroupNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentGroupNameException" : self = .invalidDeploymentGroupNameException(try InvalidDeploymentGroupNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentStatusException" : self = .invalidDeploymentStatusException(try InvalidDeploymentStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidExternalIdException" : self = .invalidExternalIdException(try InvalidExternalIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTimeRangeException" : self = .invalidTimeRangeException(try InvalidTimeRangeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDeploymentsOutputError: Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case deploymentGroupDoesNotExistException(DeploymentGroupDoesNotExistException)
    case deploymentGroupNameRequiredException(DeploymentGroupNameRequiredException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidDeploymentGroupNameException(InvalidDeploymentGroupNameException)
    case invalidDeploymentStatusException(InvalidDeploymentStatusException)
    case invalidExternalIdException(InvalidExternalIdException)
    case invalidInputException(InvalidInputException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidTimeRangeException(InvalidTimeRangeException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDeploymentsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListDeploymentsOutputResponse(deployments: \(String(describing: deployments)), nextToken: \(String(describing: nextToken)))"}
}

extension ListDeploymentsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListDeploymentsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.deployments = output.deployments
            self.nextToken = output.nextToken
        } else {
            self.deployments = nil
            self.nextToken = nil
        }
    }
}

/// <p>Represents the output of a <code>ListDeployments</code> operation.</p>
public struct ListDeploymentsOutputResponse: Equatable {
    /// <p>A list of deployment IDs.</p>
    public let deployments: [String]?
    /// <p>If a large amount of information is returned, an identifier is also returned. It can
    ///             be used in a subsequent list deployments call to return the next set of deployments in
    ///             the list.</p>
    public let nextToken: String?

    public init (
        deployments: [String]? = nil,
        nextToken: String? = nil
    )
    {
        self.deployments = deployments
        self.nextToken = nextToken
    }
}

struct ListDeploymentsOutputResponseBody: Equatable {
    public let deployments: [String]?
    public let nextToken: String?
}

extension ListDeploymentsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deployments
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .deployments)
        var deploymentsDecoded0:[String]? = nil
        if let deploymentsContainer = deploymentsContainer {
            deploymentsDecoded0 = [String]()
            for string0 in deploymentsContainer {
                if let string0 = string0 {
                    deploymentsDecoded0?.append(string0)
                }
            }
        }
        deployments = deploymentsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListGitHubAccountTokenNamesInputBodyMiddleware: Middleware {
    public let id: String = "ListGitHubAccountTokenNamesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListGitHubAccountTokenNamesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListGitHubAccountTokenNamesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListGitHubAccountTokenNamesInput>
    public typealias MOutput = OperationOutput<ListGitHubAccountTokenNamesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListGitHubAccountTokenNamesOutputError>
}

extension ListGitHubAccountTokenNamesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListGitHubAccountTokenNamesInput(nextToken: \(String(describing: nextToken)))"}
}

extension ListGitHubAccountTokenNamesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case nextToken
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListGitHubAccountTokenNamesInputHeadersMiddleware: Middleware {
    public let id: String = "ListGitHubAccountTokenNamesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListGitHubAccountTokenNamesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListGitHubAccountTokenNamesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListGitHubAccountTokenNamesInput>
    public typealias MOutput = OperationOutput<ListGitHubAccountTokenNamesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListGitHubAccountTokenNamesOutputError>
}

public struct ListGitHubAccountTokenNamesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListGitHubAccountTokenNamesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListGitHubAccountTokenNamesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListGitHubAccountTokenNamesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListGitHubAccountTokenNamesInput>
    public typealias MOutput = OperationOutput<ListGitHubAccountTokenNamesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListGitHubAccountTokenNamesOutputError>
}

/// <p>Represents the input of a <code>ListGitHubAccountTokenNames</code> operation.</p>
public struct ListGitHubAccountTokenNamesInput: Equatable {
    /// <p>An identifier returned from the previous <code>ListGitHubAccountTokenNames</code>
    ///             call. It can be used to return the next set of names in the list. </p>
    public let nextToken: String?

    public init (
        nextToken: String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

struct ListGitHubAccountTokenNamesInputBody: Equatable {
    public let nextToken: String?
}

extension ListGitHubAccountTokenNamesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListGitHubAccountTokenNamesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListGitHubAccountTokenNamesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotSupportedException" : self = .operationNotSupportedException(try OperationNotSupportedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceValidationException" : self = .resourceValidationException(try ResourceValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListGitHubAccountTokenNamesOutputError: Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case operationNotSupportedException(OperationNotSupportedException)
    case resourceValidationException(ResourceValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListGitHubAccountTokenNamesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListGitHubAccountTokenNamesOutputResponse(nextToken: \(String(describing: nextToken)), tokenNameList: \(String(describing: tokenNameList)))"}
}

extension ListGitHubAccountTokenNamesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListGitHubAccountTokenNamesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.tokenNameList = output.tokenNameList
        } else {
            self.nextToken = nil
            self.tokenNameList = nil
        }
    }
}

/// <p>Represents the output of a <code>ListGitHubAccountTokenNames</code> operation.</p>
public struct ListGitHubAccountTokenNamesOutputResponse: Equatable {
    /// <p>If a large amount of information is returned, an identifier is also returned. It can
    ///             be used in a subsequent <code>ListGitHubAccountTokenNames</code> call to return the next
    ///             set of names in the list. </p>
    public let nextToken: String?
    /// <p>A list of names of connections to GitHub accounts.</p>
    public let tokenNameList: [String]?

    public init (
        nextToken: String? = nil,
        tokenNameList: [String]? = nil
    )
    {
        self.nextToken = nextToken
        self.tokenNameList = tokenNameList
    }
}

struct ListGitHubAccountTokenNamesOutputResponseBody: Equatable {
    public let tokenNameList: [String]?
    public let nextToken: String?
}

extension ListGitHubAccountTokenNamesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case tokenNameList
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tokenNameListContainer = try containerValues.decodeIfPresent([String?].self, forKey: .tokenNameList)
        var tokenNameListDecoded0:[String]? = nil
        if let tokenNameListContainer = tokenNameListContainer {
            tokenNameListDecoded0 = [String]()
            for string0 in tokenNameListContainer {
                if let string0 = string0 {
                    tokenNameListDecoded0?.append(string0)
                }
            }
        }
        tokenNameList = tokenNameListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListOnPremisesInstancesInputBodyMiddleware: Middleware {
    public let id: String = "ListOnPremisesInstancesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListOnPremisesInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListOnPremisesInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListOnPremisesInstancesInput>
    public typealias MOutput = OperationOutput<ListOnPremisesInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListOnPremisesInstancesOutputError>
}

extension ListOnPremisesInstancesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListOnPremisesInstancesInput(nextToken: \(String(describing: nextToken)), registrationStatus: \(String(describing: registrationStatus)), tagFilters: \(String(describing: tagFilters)))"}
}

extension ListOnPremisesInstancesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case registrationStatus
        case tagFilters
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let registrationStatus = registrationStatus {
            try encodeContainer.encode(registrationStatus.rawValue, forKey: .registrationStatus)
        }
        if let tagFilters = tagFilters {
            var tagFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagFilters)
            for tagfilterlist0 in tagFilters {
                try tagFiltersContainer.encode(tagfilterlist0)
            }
        }
    }
}

public struct ListOnPremisesInstancesInputHeadersMiddleware: Middleware {
    public let id: String = "ListOnPremisesInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListOnPremisesInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListOnPremisesInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListOnPremisesInstancesInput>
    public typealias MOutput = OperationOutput<ListOnPremisesInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListOnPremisesInstancesOutputError>
}

public struct ListOnPremisesInstancesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListOnPremisesInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListOnPremisesInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListOnPremisesInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListOnPremisesInstancesInput>
    public typealias MOutput = OperationOutput<ListOnPremisesInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListOnPremisesInstancesOutputError>
}

/// <p>Represents the input of a <code>ListOnPremisesInstances</code> operation.</p>
public struct ListOnPremisesInstancesInput: Equatable {
    /// <p>An identifier returned from the previous list on-premises instances call. It can be
    ///             used to return the next set of on-premises instances in the list.</p>
    public let nextToken: String?
    /// <p>The registration status of the on-premises instances:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>Deregistered</code>: Include deregistered on-premises instances in the
    ///                     resulting list.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Registered</code>: Include registered on-premises instances in the
    ///                     resulting list.</p>
    ///             </li>
    ///          </ul>
    public let registrationStatus: RegistrationStatus?
    /// <p>The on-premises instance tags that are used to restrict the on-premises instance names
    ///             returned.</p>
    public let tagFilters: [TagFilter]?

    public init (
        nextToken: String? = nil,
        registrationStatus: RegistrationStatus? = nil,
        tagFilters: [TagFilter]? = nil
    )
    {
        self.nextToken = nextToken
        self.registrationStatus = registrationStatus
        self.tagFilters = tagFilters
    }
}

struct ListOnPremisesInstancesInputBody: Equatable {
    public let registrationStatus: RegistrationStatus?
    public let tagFilters: [TagFilter]?
    public let nextToken: String?
}

extension ListOnPremisesInstancesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case registrationStatus
        case tagFilters
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registrationStatusDecoded = try containerValues.decodeIfPresent(RegistrationStatus.self, forKey: .registrationStatus)
        registrationStatus = registrationStatusDecoded
        let tagFiltersContainer = try containerValues.decodeIfPresent([TagFilter?].self, forKey: .tagFilters)
        var tagFiltersDecoded0:[TagFilter]? = nil
        if let tagFiltersContainer = tagFiltersContainer {
            tagFiltersDecoded0 = [TagFilter]()
            for structure0 in tagFiltersContainer {
                if let structure0 = structure0 {
                    tagFiltersDecoded0?.append(structure0)
                }
            }
        }
        tagFilters = tagFiltersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListOnPremisesInstancesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListOnPremisesInstancesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRegistrationStatusException" : self = .invalidRegistrationStatusException(try InvalidRegistrationStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagFilterException" : self = .invalidTagFilterException(try InvalidTagFilterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListOnPremisesInstancesOutputError: Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidRegistrationStatusException(InvalidRegistrationStatusException)
    case invalidTagFilterException(InvalidTagFilterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListOnPremisesInstancesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListOnPremisesInstancesOutputResponse(instanceNames: \(String(describing: instanceNames)), nextToken: \(String(describing: nextToken)))"}
}

extension ListOnPremisesInstancesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListOnPremisesInstancesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.instanceNames = output.instanceNames
            self.nextToken = output.nextToken
        } else {
            self.instanceNames = nil
            self.nextToken = nil
        }
    }
}

/// <p>Represents the output of the list on-premises instances operation.</p>
public struct ListOnPremisesInstancesOutputResponse: Equatable {
    /// <p>The list of matching on-premises instance names.</p>
    public let instanceNames: [String]?
    /// <p>If a large amount of information is returned, an identifier is also returned. It can
    ///             be used in a subsequent list on-premises instances call to return the next set of
    ///             on-premises instances in the list.</p>
    public let nextToken: String?

    public init (
        instanceNames: [String]? = nil,
        nextToken: String? = nil
    )
    {
        self.instanceNames = instanceNames
        self.nextToken = nextToken
    }
}

struct ListOnPremisesInstancesOutputResponseBody: Equatable {
    public let instanceNames: [String]?
    public let nextToken: String?
}

extension ListOnPremisesInstancesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceNames
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNamesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .instanceNames)
        var instanceNamesDecoded0:[String]? = nil
        if let instanceNamesContainer = instanceNamesContainer {
            instanceNamesDecoded0 = [String]()
            for string0 in instanceNamesContainer {
                if let string0 = string0 {
                    instanceNamesDecoded0?.append(string0)
                }
            }
        }
        instanceNames = instanceNamesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public enum ListStateFilterAction {
    case exclude
    case ignore
    case include
    case sdkUnknown(String)
}

extension ListStateFilterAction : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ListStateFilterAction] {
        return [
            .exclude,
            .ignore,
            .include,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .exclude: return "exclude"
        case .ignore: return "ignore"
        case .include: return "include"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ListStateFilterAction(rawValue: rawValue) ?? ListStateFilterAction.sdkUnknown(rawValue)
    }
}

public struct ListTagsForResourceInputBodyMiddleware: Middleware {
    public let id: String = "ListTagsForResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsForResourceOutputError>
}

extension ListTagsForResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTagsForResourceInput(nextToken: \(String(describing: nextToken)), resourceArn: \(String(describing: resourceArn)))"}
}

extension ListTagsForResourceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: Middleware {
    public let id: String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInput: Equatable {
    /// <p>An identifier returned from the previous <code>ListTagsForResource</code> call. It can
    ///             be used to return the next set of applications in the list.</p>
    public let nextToken: String?
    /// <p> The ARN of a CodeDeploy resource. <code>ListTagsForResource</code> returns all the
    ///             tags associated with the resource that is identified by the <code>ResourceArn</code>.
    ///         </p>
    public let resourceArn: String?

    public init (
        nextToken: String? = nil,
        resourceArn: String? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Equatable {
    public let resourceArn: String?
    public let nextToken: String?
}

extension ListTagsForResourceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ArnNotSupportedException" : self = .arnNotSupportedException(try ArnNotSupportedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArnException" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceArnRequiredException" : self = .resourceArnRequiredException(try ResourceArnRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Equatable {
    case arnNotSupportedException(ArnNotSupportedException)
    case invalidArnException(InvalidArnException)
    case resourceArnRequiredException(ResourceArnRequiredException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTagsForResourceOutputResponse(nextToken: \(String(describing: nextToken)), tags: \(String(describing: tags)))"}
}

extension ListTagsForResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.tags = output.tags
        } else {
            self.nextToken = nil
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Equatable {
    /// <p>If a large amount of information is returned, an identifier is also returned. It can
    ///             be used in a subsequent list application revisions call to return the next set of
    ///             application revisions in the list.</p>
    public let nextToken: String?
    /// <p> A list of tags returned by <code>ListTagsForResource</code>. The tags are associated
    ///             with the resource identified by the input <code>ResourceArn</code> parameter. </p>
    public let tags: [Tag]?

    public init (
        nextToken: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Equatable {
    public let tags: [Tag]?
    public let nextToken: String?
}

extension ListTagsForResourceOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension LoadBalancerInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case elbInfoList
        case targetGroupInfoList
        case targetGroupPairInfoList
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let elbInfoList = elbInfoList {
            var elbInfoListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .elbInfoList)
            for elbinfolist0 in elbInfoList {
                try elbInfoListContainer.encode(elbinfolist0)
            }
        }
        if let targetGroupInfoList = targetGroupInfoList {
            var targetGroupInfoListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetGroupInfoList)
            for targetgroupinfolist0 in targetGroupInfoList {
                try targetGroupInfoListContainer.encode(targetgroupinfolist0)
            }
        }
        if let targetGroupPairInfoList = targetGroupPairInfoList {
            var targetGroupPairInfoListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetGroupPairInfoList)
            for targetgrouppairinfolist0 in targetGroupPairInfoList {
                try targetGroupPairInfoListContainer.encode(targetgrouppairinfolist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let elbInfoListContainer = try containerValues.decodeIfPresent([ELBInfo?].self, forKey: .elbInfoList)
        var elbInfoListDecoded0:[ELBInfo]? = nil
        if let elbInfoListContainer = elbInfoListContainer {
            elbInfoListDecoded0 = [ELBInfo]()
            for structure0 in elbInfoListContainer {
                if let structure0 = structure0 {
                    elbInfoListDecoded0?.append(structure0)
                }
            }
        }
        elbInfoList = elbInfoListDecoded0
        let targetGroupInfoListContainer = try containerValues.decodeIfPresent([TargetGroupInfo?].self, forKey: .targetGroupInfoList)
        var targetGroupInfoListDecoded0:[TargetGroupInfo]? = nil
        if let targetGroupInfoListContainer = targetGroupInfoListContainer {
            targetGroupInfoListDecoded0 = [TargetGroupInfo]()
            for structure0 in targetGroupInfoListContainer {
                if let structure0 = structure0 {
                    targetGroupInfoListDecoded0?.append(structure0)
                }
            }
        }
        targetGroupInfoList = targetGroupInfoListDecoded0
        let targetGroupPairInfoListContainer = try containerValues.decodeIfPresent([TargetGroupPairInfo?].self, forKey: .targetGroupPairInfoList)
        var targetGroupPairInfoListDecoded0:[TargetGroupPairInfo]? = nil
        if let targetGroupPairInfoListContainer = targetGroupPairInfoListContainer {
            targetGroupPairInfoListDecoded0 = [TargetGroupPairInfo]()
            for structure0 in targetGroupPairInfoListContainer {
                if let structure0 = structure0 {
                    targetGroupPairInfoListDecoded0?.append(structure0)
                }
            }
        }
        targetGroupPairInfoList = targetGroupPairInfoListDecoded0
    }
}

extension LoadBalancerInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LoadBalancerInfo(elbInfoList: \(String(describing: elbInfoList)), targetGroupInfoList: \(String(describing: targetGroupInfoList)), targetGroupPairInfoList: \(String(describing: targetGroupPairInfoList)))"}
}

/// <p>Information about the Elastic Load Balancing load balancer or target group used in a
///             deployment.</p>
public struct LoadBalancerInfo: Equatable {
    /// <p>An array that contains information about the load balancer to use for load balancing
    ///             in a deployment. In Elastic Load Balancing, load balancers are used with Classic Load
    ///             Balancers.</p>
    ///         <note>
    ///             <p> Adding more than one load balancer to the array is not supported. </p>
    ///         </note>
    public let elbInfoList: [ELBInfo]?
    /// <p>An array that contains information about the target group to use for load balancing in
    ///             a deployment. In Elastic Load Balancing, target groups are used with Application Load
    ///             Balancers.</p>
    ///         <note>
    ///             <p> Adding more than one target group to the array is not supported. </p>
    ///         </note>
    public let targetGroupInfoList: [TargetGroupInfo]?
    /// <p> The target group pair information. This is an array of
    ///                 <code>TargeGroupPairInfo</code> objects with a maximum size of one. </p>
    public let targetGroupPairInfoList: [TargetGroupPairInfo]?

    public init (
        elbInfoList: [ELBInfo]? = nil,
        targetGroupInfoList: [TargetGroupInfo]? = nil,
        targetGroupPairInfoList: [TargetGroupPairInfo]? = nil
    )
    {
        self.elbInfoList = elbInfoList
        self.targetGroupInfoList = targetGroupInfoList
        self.targetGroupPairInfoList = targetGroupPairInfoList
    }
}

extension MinimumHealthyHosts: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case type
        case value
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if value != 0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(MinimumHealthyHostsType.self, forKey: .type)
        type = typeDecoded
        let valueDecoded = try containerValues.decode(Int.self, forKey: .value)
        value = valueDecoded
    }
}

extension MinimumHealthyHosts: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MinimumHealthyHosts(type: \(String(describing: type)), value: \(String(describing: value)))"}
}

/// <p>Information about minimum healthy instance.</p>
public struct MinimumHealthyHosts: Equatable {
    /// <p>The minimum healthy instance type:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>HOST_COUNT</code>: The minimum number of healthy instances as an
    ///                     absolute value.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>FLEET_PERCENT</code>: The minimum number of healthy instances as a
    ///                     percentage of the total number of instances in the deployment.</p>
    ///             </li>
    ///          </ul>
    ///         <p>In an example of nine instances, if a HOST_COUNT of six is specified, deploy to up to
    ///             three instances at a time. The deployment is successful if six or more instances are
    ///             deployed to successfully. Otherwise, the deployment fails. If a FLEET_PERCENT of 40 is
    ///             specified, deploy to up to five instances at a time. The deployment is successful if
    ///             four or more instances are deployed to successfully. Otherwise, the deployment
    ///             fails.</p>
    ///         <note>
    ///             <p>In a call to the <code>GetDeploymentConfig</code>, CodeDeployDefault.OneAtATime
    ///                 returns a minimum healthy instance type of MOST_CONCURRENCY and a value of 1. This
    ///                 means a deployment to only one instance at a time. (You cannot set the type to
    ///                 MOST_CONCURRENCY, only to HOST_COUNT or FLEET_PERCENT.) In addition, with
    ///                 CodeDeployDefault.OneAtATime, AWS CodeDeploy attempts to ensure that all instances
    ///                 but one are kept in a healthy state during the deployment. Although this allows one
    ///                 instance at a time to be taken offline for a new deployment, it also means that if
    ///                 the deployment to the last instance fails, the overall deployment is still
    ///                 successful.</p>
    ///         </note>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/instances-health.html">AWS CodeDeploy Instance
    ///                 Health</a> in the <i>AWS CodeDeploy User Guide</i>.</p>
    public let type: MinimumHealthyHostsType?
    /// <p>The minimum healthy instance value.</p>
    public let value: Int

    public init (
        type: MinimumHealthyHostsType? = nil,
        value: Int = 0
    )
    {
        self.type = type
        self.value = value
    }
}

public enum MinimumHealthyHostsType {
    case fleetPercent
    case hostCount
    case sdkUnknown(String)
}

extension MinimumHealthyHostsType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MinimumHealthyHostsType] {
        return [
            .fleetPercent,
            .hostCount,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .fleetPercent: return "FLEET_PERCENT"
        case .hostCount: return "HOST_COUNT"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MinimumHealthyHostsType(rawValue: rawValue) ?? MinimumHealthyHostsType.sdkUnknown(rawValue)
    }
}

extension MultipleIamArnsProvidedException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MultipleIamArnsProvidedException(message: \(String(describing: message)))"}
}

extension MultipleIamArnsProvidedException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: MultipleIamArnsProvidedExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Both an IAM user ARN and an IAM session ARN were included in the request. Use only one
///             ARN type.</p>
public struct MultipleIamArnsProvidedException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct MultipleIamArnsProvidedExceptionBody: Equatable {
    public let message: String?
}

extension MultipleIamArnsProvidedExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OnPremisesTagSet: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case onPremisesTagSetList
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let onPremisesTagSetList = onPremisesTagSetList {
            var onPremisesTagSetListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .onPremisesTagSetList)
            for onpremisestagsetlist0 in onPremisesTagSetList {
                var onpremisestagsetlist0Container = onPremisesTagSetListContainer.nestedUnkeyedContainer()
                for tagfilterlist1 in onpremisestagsetlist0 {
                    try onpremisestagsetlist0Container.encode(tagfilterlist1)
                }
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let onPremisesTagSetListContainer = try containerValues.decodeIfPresent([[TagFilter?]?].self, forKey: .onPremisesTagSetList)
        var onPremisesTagSetListDecoded0:[[TagFilter]]? = nil
        if let onPremisesTagSetListContainer = onPremisesTagSetListContainer {
            onPremisesTagSetListDecoded0 = [[TagFilter]]()
            for list0 in onPremisesTagSetListContainer {
                var list0Decoded0: [TagFilter]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [TagFilter]()
                    for structure1 in list0 {
                        if let structure1 = structure1 {
                            list0Decoded0?.append(structure1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    onPremisesTagSetListDecoded0?.append(list0Decoded0)
                }
            }
        }
        onPremisesTagSetList = onPremisesTagSetListDecoded0
    }
}

extension OnPremisesTagSet: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OnPremisesTagSet(onPremisesTagSetList: \(String(describing: onPremisesTagSetList)))"}
}

/// <p>Information about groups of on-premises instance tags.</p>
public struct OnPremisesTagSet: Equatable {
    /// <p>A list that contains other lists of on-premises instance tag groups. For an instance
    ///             to be included in the deployment group, it must be identified by all of the tag groups
    ///             in the list.</p>
    public let onPremisesTagSetList: [[TagFilter]]?

    public init (
        onPremisesTagSetList: [[TagFilter]]? = nil
    )
    {
        self.onPremisesTagSetList = onPremisesTagSetList
    }
}

extension OperationNotSupportedException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OperationNotSupportedException(message: \(String(describing: message)))"}
}

extension OperationNotSupportedException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: OperationNotSupportedExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The API used does not support the deployment.</p>
public struct OperationNotSupportedException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct OperationNotSupportedExceptionBody: Equatable {
    public let message: String?
}

extension OperationNotSupportedExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum OutdatedInstancesStrategy {
    case ignore
    case update
    case sdkUnknown(String)
}

extension OutdatedInstancesStrategy : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [OutdatedInstancesStrategy] {
        return [
            .ignore,
            .update,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .ignore: return "IGNORE"
        case .update: return "UPDATE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = OutdatedInstancesStrategy(rawValue: rawValue) ?? OutdatedInstancesStrategy.sdkUnknown(rawValue)
    }
}

public struct PutLifecycleEventHookExecutionStatusInputBodyMiddleware: Middleware {
    public let id: String = "PutLifecycleEventHookExecutionStatusInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutLifecycleEventHookExecutionStatusInput>,
                  next: H) -> Swift.Result<OperationOutput<PutLifecycleEventHookExecutionStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutLifecycleEventHookExecutionStatusInput>
    public typealias MOutput = OperationOutput<PutLifecycleEventHookExecutionStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutLifecycleEventHookExecutionStatusOutputError>
}

extension PutLifecycleEventHookExecutionStatusInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutLifecycleEventHookExecutionStatusInput(deploymentId: \(String(describing: deploymentId)), lifecycleEventHookExecutionId: \(String(describing: lifecycleEventHookExecutionId)), status: \(String(describing: status)))"}
}

extension PutLifecycleEventHookExecutionStatusInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deploymentId
        case lifecycleEventHookExecutionId
        case status
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let lifecycleEventHookExecutionId = lifecycleEventHookExecutionId {
            try encodeContainer.encode(lifecycleEventHookExecutionId, forKey: .lifecycleEventHookExecutionId)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

public struct PutLifecycleEventHookExecutionStatusInputHeadersMiddleware: Middleware {
    public let id: String = "PutLifecycleEventHookExecutionStatusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutLifecycleEventHookExecutionStatusInput>,
                  next: H) -> Swift.Result<OperationOutput<PutLifecycleEventHookExecutionStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutLifecycleEventHookExecutionStatusInput>
    public typealias MOutput = OperationOutput<PutLifecycleEventHookExecutionStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutLifecycleEventHookExecutionStatusOutputError>
}

public struct PutLifecycleEventHookExecutionStatusInputQueryItemMiddleware: Middleware {
    public let id: String = "PutLifecycleEventHookExecutionStatusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutLifecycleEventHookExecutionStatusInput>,
                  next: H) -> Swift.Result<OperationOutput<PutLifecycleEventHookExecutionStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutLifecycleEventHookExecutionStatusInput>
    public typealias MOutput = OperationOutput<PutLifecycleEventHookExecutionStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutLifecycleEventHookExecutionStatusOutputError>
}

public struct PutLifecycleEventHookExecutionStatusInput: Equatable {
    /// <p> The unique ID of a deployment. Pass this ID to a Lambda function that validates a
    ///             deployment lifecycle event. </p>
    public let deploymentId: String?
    /// <p> The execution ID of a deployment's lifecycle hook. A deployment lifecycle hook is
    ///             specified in the <code>hooks</code> section of the AppSpec file. </p>
    public let lifecycleEventHookExecutionId: String?
    /// <p>The result of a Lambda function that validates a deployment lifecycle event.
    ///                 <code>Succeeded</code> and <code>Failed</code> are the only valid values for
    ///                 <code>status</code>.</p>
    public let status: LifecycleEventStatus?

    public init (
        deploymentId: String? = nil,
        lifecycleEventHookExecutionId: String? = nil,
        status: LifecycleEventStatus? = nil
    )
    {
        self.deploymentId = deploymentId
        self.lifecycleEventHookExecutionId = lifecycleEventHookExecutionId
        self.status = status
    }
}

struct PutLifecycleEventHookExecutionStatusInputBody: Equatable {
    public let deploymentId: String?
    public let lifecycleEventHookExecutionId: String?
    public let status: LifecycleEventStatus?
}

extension PutLifecycleEventHookExecutionStatusInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentId
        case lifecycleEventHookExecutionId
        case status
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let lifecycleEventHookExecutionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lifecycleEventHookExecutionId)
        lifecycleEventHookExecutionId = lifecycleEventHookExecutionIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LifecycleEventStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension PutLifecycleEventHookExecutionStatusOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutLifecycleEventHookExecutionStatusOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "DeploymentDoesNotExistException" : self = .deploymentDoesNotExistException(try DeploymentDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLifecycleEventHookExecutionIdException" : self = .invalidLifecycleEventHookExecutionIdException(try InvalidLifecycleEventHookExecutionIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLifecycleEventHookExecutionStatusException" : self = .invalidLifecycleEventHookExecutionStatusException(try InvalidLifecycleEventHookExecutionStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LifecycleEventAlreadyCompletedException" : self = .lifecycleEventAlreadyCompletedException(try LifecycleEventAlreadyCompletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedActionForDeploymentTypeException" : self = .unsupportedActionForDeploymentTypeException(try UnsupportedActionForDeploymentTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutLifecycleEventHookExecutionStatusOutputError: Equatable {
    case deploymentDoesNotExistException(DeploymentDoesNotExistException)
    case deploymentIdRequiredException(DeploymentIdRequiredException)
    case invalidDeploymentIdException(InvalidDeploymentIdException)
    case invalidLifecycleEventHookExecutionIdException(InvalidLifecycleEventHookExecutionIdException)
    case invalidLifecycleEventHookExecutionStatusException(InvalidLifecycleEventHookExecutionStatusException)
    case lifecycleEventAlreadyCompletedException(LifecycleEventAlreadyCompletedException)
    case unsupportedActionForDeploymentTypeException(UnsupportedActionForDeploymentTypeException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutLifecycleEventHookExecutionStatusOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "PutLifecycleEventHookExecutionStatusOutputResponse(lifecycleEventHookExecutionId: \(String(describing: lifecycleEventHookExecutionId)))"}
}

extension PutLifecycleEventHookExecutionStatusOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: PutLifecycleEventHookExecutionStatusOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.lifecycleEventHookExecutionId = output.lifecycleEventHookExecutionId
        } else {
            self.lifecycleEventHookExecutionId = nil
        }
    }
}

public struct PutLifecycleEventHookExecutionStatusOutputResponse: Equatable {
    /// <p>The execution ID of the lifecycle event hook. A hook is specified in the
    ///                 <code>hooks</code> section of the deployment's AppSpec file.</p>
    public let lifecycleEventHookExecutionId: String?

    public init (
        lifecycleEventHookExecutionId: String? = nil
    )
    {
        self.lifecycleEventHookExecutionId = lifecycleEventHookExecutionId
    }
}

struct PutLifecycleEventHookExecutionStatusOutputResponseBody: Equatable {
    public let lifecycleEventHookExecutionId: String?
}

extension PutLifecycleEventHookExecutionStatusOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case lifecycleEventHookExecutionId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lifecycleEventHookExecutionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lifecycleEventHookExecutionId)
        lifecycleEventHookExecutionId = lifecycleEventHookExecutionIdDecoded
    }
}

extension RawString: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case content
        case sha256
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let sha256 = sha256 {
            try encodeContainer.encode(sha256, forKey: .sha256)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .content)
        content = contentDecoded
        let sha256Decoded = try containerValues.decodeIfPresent(String.self, forKey: .sha256)
        sha256 = sha256Decoded
    }
}

extension RawString: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RawString(content: \(String(describing: content)), sha256: \(String(describing: sha256)))"}
}

/// <p>A revision for an AWS Lambda deployment that is a YAML-formatted or JSON-formatted
///             string. For AWS Lambda deployments, the revision is the same as the AppSpec file.</p>
@available(*, deprecated, message: "RawString and String revision type are deprecated, use AppSpecContent type instead.")
public struct RawString: Equatable {
    /// <p>The YAML-formatted or JSON-formatted revision string. It includes information about
    ///             which Lambda function to update and optional Lambda functions that validate deployment
    ///             lifecycle events.</p>
    public let content: String?
    /// <p>The SHA256 hash value of the revision content.</p>
    public let sha256: String?

    public init (
        content: String? = nil,
        sha256: String? = nil
    )
    {
        self.content = content
        self.sha256 = sha256
    }
}

public struct RegisterApplicationRevisionInputBodyMiddleware: Middleware {
    public let id: String = "RegisterApplicationRevisionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterApplicationRevisionInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterApplicationRevisionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterApplicationRevisionInput>
    public typealias MOutput = OperationOutput<RegisterApplicationRevisionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterApplicationRevisionOutputError>
}

extension RegisterApplicationRevisionInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RegisterApplicationRevisionInput(applicationName: \(String(describing: applicationName)), description: \(String(describing: description)), revision: \(String(describing: revision)))"}
}

extension RegisterApplicationRevisionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case description
        case revision
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let revision = revision {
            try encodeContainer.encode(revision, forKey: .revision)
        }
    }
}

public struct RegisterApplicationRevisionInputHeadersMiddleware: Middleware {
    public let id: String = "RegisterApplicationRevisionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterApplicationRevisionInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterApplicationRevisionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterApplicationRevisionInput>
    public typealias MOutput = OperationOutput<RegisterApplicationRevisionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterApplicationRevisionOutputError>
}

public struct RegisterApplicationRevisionInputQueryItemMiddleware: Middleware {
    public let id: String = "RegisterApplicationRevisionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterApplicationRevisionInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterApplicationRevisionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterApplicationRevisionInput>
    public typealias MOutput = OperationOutput<RegisterApplicationRevisionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterApplicationRevisionOutputError>
}

/// <p>Represents the input of a RegisterApplicationRevision operation.</p>
public struct RegisterApplicationRevisionInput: Equatable {
    /// <p>The name of an AWS CodeDeploy application associated with the IAM user or AWS
    ///             account.</p>
    public let applicationName: String?
    /// <p>A comment about the revision.</p>
    public let description: String?
    /// <p>Information about the application revision to register, including type and
    ///             location.</p>
    public let revision: RevisionLocation?

    public init (
        applicationName: String? = nil,
        description: String? = nil,
        revision: RevisionLocation? = nil
    )
    {
        self.applicationName = applicationName
        self.description = description
        self.revision = revision
    }
}

struct RegisterApplicationRevisionInputBody: Equatable {
    public let applicationName: String?
    public let description: String?
    public let revision: RevisionLocation?
}

extension RegisterApplicationRevisionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case description
        case revision
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let revisionDecoded = try containerValues.decodeIfPresent(RevisionLocation.self, forKey: .revision)
        revision = revisionDecoded
    }
}

extension RegisterApplicationRevisionOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterApplicationRevisionOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DescriptionTooLongException" : self = .descriptionTooLongException(try DescriptionTooLongException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRevisionException" : self = .invalidRevisionException(try InvalidRevisionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RevisionRequiredException" : self = .revisionRequiredException(try RevisionRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RegisterApplicationRevisionOutputError: Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case descriptionTooLongException(DescriptionTooLongException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidRevisionException(InvalidRevisionException)
    case revisionRequiredException(RevisionRequiredException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterApplicationRevisionOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RegisterApplicationRevisionOutputResponse()"}
}

extension RegisterApplicationRevisionOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct RegisterApplicationRevisionOutputResponse: Equatable {

    public init() {}
}

struct RegisterApplicationRevisionOutputResponseBody: Equatable {
}

extension RegisterApplicationRevisionOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct RegisterOnPremisesInstanceInputBodyMiddleware: Middleware {
    public let id: String = "RegisterOnPremisesInstanceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterOnPremisesInstanceInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterOnPremisesInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterOnPremisesInstanceInput>
    public typealias MOutput = OperationOutput<RegisterOnPremisesInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterOnPremisesInstanceOutputError>
}

extension RegisterOnPremisesInstanceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RegisterOnPremisesInstanceInput(iamSessionArn: \(String(describing: iamSessionArn)), iamUserArn: \(String(describing: iamUserArn)), instanceName: \(String(describing: instanceName)))"}
}

extension RegisterOnPremisesInstanceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case iamSessionArn
        case iamUserArn
        case instanceName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let iamSessionArn = iamSessionArn {
            try encodeContainer.encode(iamSessionArn, forKey: .iamSessionArn)
        }
        if let iamUserArn = iamUserArn {
            try encodeContainer.encode(iamUserArn, forKey: .iamUserArn)
        }
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

public struct RegisterOnPremisesInstanceInputHeadersMiddleware: Middleware {
    public let id: String = "RegisterOnPremisesInstanceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterOnPremisesInstanceInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterOnPremisesInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterOnPremisesInstanceInput>
    public typealias MOutput = OperationOutput<RegisterOnPremisesInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterOnPremisesInstanceOutputError>
}

public struct RegisterOnPremisesInstanceInputQueryItemMiddleware: Middleware {
    public let id: String = "RegisterOnPremisesInstanceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterOnPremisesInstanceInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterOnPremisesInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterOnPremisesInstanceInput>
    public typealias MOutput = OperationOutput<RegisterOnPremisesInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterOnPremisesInstanceOutputError>
}

/// <p>Represents the input of the register on-premises instance operation.</p>
public struct RegisterOnPremisesInstanceInput: Equatable {
    /// <p>The ARN of the IAM session to associate with the on-premises instance.</p>
    public let iamSessionArn: String?
    /// <p>The ARN of the IAM user to associate with the on-premises instance.</p>
    public let iamUserArn: String?
    /// <p>The name of the on-premises instance to register.</p>
    public let instanceName: String?

    public init (
        iamSessionArn: String? = nil,
        iamUserArn: String? = nil,
        instanceName: String? = nil
    )
    {
        self.iamSessionArn = iamSessionArn
        self.iamUserArn = iamUserArn
        self.instanceName = instanceName
    }
}

struct RegisterOnPremisesInstanceInputBody: Equatable {
    public let instanceName: String?
    public let iamSessionArn: String?
    public let iamUserArn: String?
}

extension RegisterOnPremisesInstanceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case iamSessionArn
        case iamUserArn
        case instanceName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let iamSessionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iamSessionArn)
        iamSessionArn = iamSessionArnDecoded
        let iamUserArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iamUserArn)
        iamUserArn = iamUserArnDecoded
    }
}

extension RegisterOnPremisesInstanceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterOnPremisesInstanceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "IamArnRequiredException" : self = .iamArnRequiredException(try IamArnRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IamSessionArnAlreadyRegisteredException" : self = .iamSessionArnAlreadyRegisteredException(try IamSessionArnAlreadyRegisteredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IamUserArnAlreadyRegisteredException" : self = .iamUserArnAlreadyRegisteredException(try IamUserArnAlreadyRegisteredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IamUserArnRequiredException" : self = .iamUserArnRequiredException(try IamUserArnRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceNameAlreadyRegisteredException" : self = .instanceNameAlreadyRegisteredException(try InstanceNameAlreadyRegisteredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceNameRequiredException" : self = .instanceNameRequiredException(try InstanceNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidIamSessionArnException" : self = .invalidIamSessionArnException(try InvalidIamSessionArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidIamUserArnException" : self = .invalidIamUserArnException(try InvalidIamUserArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceNameException" : self = .invalidInstanceNameException(try InvalidInstanceNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MultipleIamArnsProvidedException" : self = .multipleIamArnsProvidedException(try MultipleIamArnsProvidedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RegisterOnPremisesInstanceOutputError: Equatable {
    case iamArnRequiredException(IamArnRequiredException)
    case iamSessionArnAlreadyRegisteredException(IamSessionArnAlreadyRegisteredException)
    case iamUserArnAlreadyRegisteredException(IamUserArnAlreadyRegisteredException)
    case iamUserArnRequiredException(IamUserArnRequiredException)
    case instanceNameAlreadyRegisteredException(InstanceNameAlreadyRegisteredException)
    case instanceNameRequiredException(InstanceNameRequiredException)
    case invalidIamSessionArnException(InvalidIamSessionArnException)
    case invalidIamUserArnException(InvalidIamUserArnException)
    case invalidInstanceNameException(InvalidInstanceNameException)
    case multipleIamArnsProvidedException(MultipleIamArnsProvidedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterOnPremisesInstanceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RegisterOnPremisesInstanceOutputResponse()"}
}

extension RegisterOnPremisesInstanceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct RegisterOnPremisesInstanceOutputResponse: Equatable {

    public init() {}
}

struct RegisterOnPremisesInstanceOutputResponseBody: Equatable {
}

extension RegisterOnPremisesInstanceOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public enum RegistrationStatus {
    case deregistered
    case registered
    case sdkUnknown(String)
}

extension RegistrationStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [RegistrationStatus] {
        return [
            .deregistered,
            .registered,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .deregistered: return "Deregistered"
        case .registered: return "Registered"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = RegistrationStatus(rawValue: rawValue) ?? RegistrationStatus.sdkUnknown(rawValue)
    }
}

extension RelatedDeployments: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoUpdateOutdatedInstancesDeploymentIds
        case autoUpdateOutdatedInstancesRootDeploymentId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoUpdateOutdatedInstancesDeploymentIds = autoUpdateOutdatedInstancesDeploymentIds {
            var autoUpdateOutdatedInstancesDeploymentIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .autoUpdateOutdatedInstancesDeploymentIds)
            for deploymentslist0 in autoUpdateOutdatedInstancesDeploymentIds {
                try autoUpdateOutdatedInstancesDeploymentIdsContainer.encode(deploymentslist0)
            }
        }
        if let autoUpdateOutdatedInstancesRootDeploymentId = autoUpdateOutdatedInstancesRootDeploymentId {
            try encodeContainer.encode(autoUpdateOutdatedInstancesRootDeploymentId, forKey: .autoUpdateOutdatedInstancesRootDeploymentId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoUpdateOutdatedInstancesRootDeploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoUpdateOutdatedInstancesRootDeploymentId)
        autoUpdateOutdatedInstancesRootDeploymentId = autoUpdateOutdatedInstancesRootDeploymentIdDecoded
        let autoUpdateOutdatedInstancesDeploymentIdsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .autoUpdateOutdatedInstancesDeploymentIds)
        var autoUpdateOutdatedInstancesDeploymentIdsDecoded0:[String]? = nil
        if let autoUpdateOutdatedInstancesDeploymentIdsContainer = autoUpdateOutdatedInstancesDeploymentIdsContainer {
            autoUpdateOutdatedInstancesDeploymentIdsDecoded0 = [String]()
            for string0 in autoUpdateOutdatedInstancesDeploymentIdsContainer {
                if let string0 = string0 {
                    autoUpdateOutdatedInstancesDeploymentIdsDecoded0?.append(string0)
                }
            }
        }
        autoUpdateOutdatedInstancesDeploymentIds = autoUpdateOutdatedInstancesDeploymentIdsDecoded0
    }
}

extension RelatedDeployments: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RelatedDeployments(autoUpdateOutdatedInstancesDeploymentIds: \(String(describing: autoUpdateOutdatedInstancesDeploymentIds)), autoUpdateOutdatedInstancesRootDeploymentId: \(String(describing: autoUpdateOutdatedInstancesRootDeploymentId)))"}
}

/// <p>Information about deployments related to the specified deployment.</p>
public struct RelatedDeployments: Equatable {
    /// <p>The deployment IDs of 'auto-update outdated instances' deployments triggered by this
    ///             deployment.</p>
    public let autoUpdateOutdatedInstancesDeploymentIds: [String]?
    /// <p>The deployment ID of the root deployment that triggered this deployment.</p>
    public let autoUpdateOutdatedInstancesRootDeploymentId: String?

    public init (
        autoUpdateOutdatedInstancesDeploymentIds: [String]? = nil,
        autoUpdateOutdatedInstancesRootDeploymentId: String? = nil
    )
    {
        self.autoUpdateOutdatedInstancesDeploymentIds = autoUpdateOutdatedInstancesDeploymentIds
        self.autoUpdateOutdatedInstancesRootDeploymentId = autoUpdateOutdatedInstancesRootDeploymentId
    }
}

public struct RemoveTagsFromOnPremisesInstancesInputBodyMiddleware: Middleware {
    public let id: String = "RemoveTagsFromOnPremisesInstancesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RemoveTagsFromOnPremisesInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<RemoveTagsFromOnPremisesInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RemoveTagsFromOnPremisesInstancesInput>
    public typealias MOutput = OperationOutput<RemoveTagsFromOnPremisesInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RemoveTagsFromOnPremisesInstancesOutputError>
}

extension RemoveTagsFromOnPremisesInstancesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RemoveTagsFromOnPremisesInstancesInput(instanceNames: \(String(describing: instanceNames)), tags: \(String(describing: tags)))"}
}

extension RemoveTagsFromOnPremisesInstancesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instanceNames
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceNames = instanceNames {
            var instanceNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceNames)
            for instancenamelist0 in instanceNames {
                try instanceNamesContainer.encode(instancenamelist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct RemoveTagsFromOnPremisesInstancesInputHeadersMiddleware: Middleware {
    public let id: String = "RemoveTagsFromOnPremisesInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RemoveTagsFromOnPremisesInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<RemoveTagsFromOnPremisesInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RemoveTagsFromOnPremisesInstancesInput>
    public typealias MOutput = OperationOutput<RemoveTagsFromOnPremisesInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RemoveTagsFromOnPremisesInstancesOutputError>
}

public struct RemoveTagsFromOnPremisesInstancesInputQueryItemMiddleware: Middleware {
    public let id: String = "RemoveTagsFromOnPremisesInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RemoveTagsFromOnPremisesInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<RemoveTagsFromOnPremisesInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RemoveTagsFromOnPremisesInstancesInput>
    public typealias MOutput = OperationOutput<RemoveTagsFromOnPremisesInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RemoveTagsFromOnPremisesInstancesOutputError>
}

/// <p>Represents the input of a <code>RemoveTagsFromOnPremisesInstances</code>
///             operation.</p>
public struct RemoveTagsFromOnPremisesInstancesInput: Equatable {
    /// <p>The names of the on-premises instances from which to remove tags.</p>
    public let instanceNames: [String]?
    /// <p>The tag key-value pairs to remove from the on-premises instances.</p>
    public let tags: [Tag]?

    public init (
        instanceNames: [String]? = nil,
        tags: [Tag]? = nil
    )
    {
        self.instanceNames = instanceNames
        self.tags = tags
    }
}

struct RemoveTagsFromOnPremisesInstancesInputBody: Equatable {
    public let tags: [Tag]?
    public let instanceNames: [String]?
}

extension RemoveTagsFromOnPremisesInstancesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case instanceNames
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let instanceNamesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .instanceNames)
        var instanceNamesDecoded0:[String]? = nil
        if let instanceNamesContainer = instanceNamesContainer {
            instanceNamesDecoded0 = [String]()
            for string0 in instanceNamesContainer {
                if let string0 = string0 {
                    instanceNamesDecoded0?.append(string0)
                }
            }
        }
        instanceNames = instanceNamesDecoded0
    }
}

extension RemoveTagsFromOnPremisesInstancesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RemoveTagsFromOnPremisesInstancesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InstanceLimitExceededException" : self = .instanceLimitExceededException(try InstanceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceNameRequiredException" : self = .instanceNameRequiredException(try InstanceNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceNotRegisteredException" : self = .instanceNotRegisteredException(try InstanceNotRegisteredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceNameException" : self = .invalidInstanceNameException(try InvalidInstanceNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagException" : self = .invalidTagException(try InvalidTagException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagLimitExceededException" : self = .tagLimitExceededException(try TagLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagRequiredException" : self = .tagRequiredException(try TagRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RemoveTagsFromOnPremisesInstancesOutputError: Equatable {
    case instanceLimitExceededException(InstanceLimitExceededException)
    case instanceNameRequiredException(InstanceNameRequiredException)
    case instanceNotRegisteredException(InstanceNotRegisteredException)
    case invalidInstanceNameException(InvalidInstanceNameException)
    case invalidTagException(InvalidTagException)
    case tagLimitExceededException(TagLimitExceededException)
    case tagRequiredException(TagRequiredException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveTagsFromOnPremisesInstancesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RemoveTagsFromOnPremisesInstancesOutputResponse()"}
}

extension RemoveTagsFromOnPremisesInstancesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct RemoveTagsFromOnPremisesInstancesOutputResponse: Equatable {

    public init() {}
}

struct RemoveTagsFromOnPremisesInstancesOutputResponseBody: Equatable {
}

extension RemoveTagsFromOnPremisesInstancesOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ResourceArnRequiredException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResourceArnRequiredException(message: \(String(describing: message)))"}
}

extension ResourceArnRequiredException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ResourceArnRequiredExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p> The ARN of a resource is required, but was not found. </p>
public struct ResourceArnRequiredException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceArnRequiredExceptionBody: Equatable {
    public let message: String?
}

extension ResourceArnRequiredExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceValidationException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResourceValidationException(message: \(String(describing: message)))"}
}

extension ResourceValidationException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ResourceValidationExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified resource could not be validated.</p>
public struct ResourceValidationException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceValidationExceptionBody: Equatable {
    public let message: String?
}

extension ResourceValidationExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RevisionDoesNotExistException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RevisionDoesNotExistException(message: \(String(describing: message)))"}
}

extension RevisionDoesNotExistException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: RevisionDoesNotExistExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The named revision does not exist with the IAM user or AWS account.</p>
public struct RevisionDoesNotExistException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct RevisionDoesNotExistExceptionBody: Equatable {
    public let message: String?
}

extension RevisionDoesNotExistExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RevisionInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case genericRevisionInfo
        case revisionLocation
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let genericRevisionInfo = genericRevisionInfo {
            try encodeContainer.encode(genericRevisionInfo, forKey: .genericRevisionInfo)
        }
        if let revisionLocation = revisionLocation {
            try encodeContainer.encode(revisionLocation, forKey: .revisionLocation)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let revisionLocationDecoded = try containerValues.decodeIfPresent(RevisionLocation.self, forKey: .revisionLocation)
        revisionLocation = revisionLocationDecoded
        let genericRevisionInfoDecoded = try containerValues.decodeIfPresent(GenericRevisionInfo.self, forKey: .genericRevisionInfo)
        genericRevisionInfo = genericRevisionInfoDecoded
    }
}

extension RevisionInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RevisionInfo(genericRevisionInfo: \(String(describing: genericRevisionInfo)), revisionLocation: \(String(describing: revisionLocation)))"}
}

/// <p>Information about an application revision.</p>
public struct RevisionInfo: Equatable {
    /// <p>Information about an application revision, including usage details and associated
    ///             deployment groups.</p>
    public let genericRevisionInfo: GenericRevisionInfo?
    /// <p>Information about the location and type of an application revision.</p>
    public let revisionLocation: RevisionLocation?

    public init (
        genericRevisionInfo: GenericRevisionInfo? = nil,
        revisionLocation: RevisionLocation? = nil
    )
    {
        self.genericRevisionInfo = genericRevisionInfo
        self.revisionLocation = revisionLocation
    }
}

extension RevisionLocation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case appSpecContent
        case gitHubLocation
        case revisionType
        case s3Location
        case string
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appSpecContent = appSpecContent {
            try encodeContainer.encode(appSpecContent, forKey: .appSpecContent)
        }
        if let gitHubLocation = gitHubLocation {
            try encodeContainer.encode(gitHubLocation, forKey: .gitHubLocation)
        }
        if let revisionType = revisionType {
            try encodeContainer.encode(revisionType.rawValue, forKey: .revisionType)
        }
        if let s3Location = s3Location {
            try encodeContainer.encode(s3Location, forKey: .s3Location)
        }
        if let string = string {
            try encodeContainer.encode(string, forKey: .string)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let revisionTypeDecoded = try containerValues.decodeIfPresent(RevisionLocationType.self, forKey: .revisionType)
        revisionType = revisionTypeDecoded
        let s3LocationDecoded = try containerValues.decodeIfPresent(S3Location.self, forKey: .s3Location)
        s3Location = s3LocationDecoded
        let gitHubLocationDecoded = try containerValues.decodeIfPresent(GitHubLocation.self, forKey: .gitHubLocation)
        gitHubLocation = gitHubLocationDecoded
        let stringDecoded = try containerValues.decodeIfPresent(RawString.self, forKey: .string)
        string = stringDecoded
        let appSpecContentDecoded = try containerValues.decodeIfPresent(AppSpecContent.self, forKey: .appSpecContent)
        appSpecContent = appSpecContentDecoded
    }
}

extension RevisionLocation: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RevisionLocation(appSpecContent: \(String(describing: appSpecContent)), gitHubLocation: \(String(describing: gitHubLocation)), revisionType: \(String(describing: revisionType)), s3Location: \(String(describing: s3Location)), string: \(String(describing: string)))"}
}

/// <p>Information about the location of an application revision.</p>
public struct RevisionLocation: Equatable {
    /// <p> The content of an AppSpec file for an AWS Lambda or Amazon ECS deployment. The
    ///             content is formatted as JSON or YAML and stored as a RawString. </p>
    public let appSpecContent: AppSpecContent?
    /// <p>Information about the location of application artifacts stored in GitHub.</p>
    public let gitHubLocation: GitHubLocation?
    /// <p>The type of application revision:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>S3: An application revision stored in Amazon S3.</p>
    ///             </li>
    ///             <li>
    ///                 <p>GitHub: An application revision stored in GitHub (EC2/On-premises deployments
    ///                     only).</p>
    ///             </li>
    ///             <li>
    ///                 <p>String: A YAML-formatted or JSON-formatted string (AWS Lambda deployments
    ///                     only).</p>
    ///             </li>
    ///             <li>
    ///                 <p>AppSpecContent: An <code>AppSpecContent</code> object that contains the
    ///                     contents of an AppSpec file for an AWS Lambda or Amazon ECS deployment. The
    ///                     content is formatted as JSON or YAML stored as a RawString.</p>
    ///             </li>
    ///          </ul>
    public let revisionType: RevisionLocationType?
    /// <p>Information about the location of a revision stored in Amazon S3. </p>
    public let s3Location: S3Location?
    /// <p>Information about the location of an AWS Lambda deployment revision stored as a
    ///             RawString.</p>
    @available(*, deprecated, message: "RawString and String revision type are deprecated, use AppSpecContent type instead.")
    public let string: RawString?

    public init (
        appSpecContent: AppSpecContent? = nil,
        gitHubLocation: GitHubLocation? = nil,
        revisionType: RevisionLocationType? = nil,
        s3Location: S3Location? = nil,
        string: RawString? = nil
    )
    {
        self.appSpecContent = appSpecContent
        self.gitHubLocation = gitHubLocation
        self.revisionType = revisionType
        self.s3Location = s3Location
        self.string = string
    }
}

public enum RevisionLocationType {
    case appspeccontent
    case github
    case s3
    case string
    case sdkUnknown(String)
}

extension RevisionLocationType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [RevisionLocationType] {
        return [
            .appspeccontent,
            .github,
            .s3,
            .string,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .appspeccontent: return "AppSpecContent"
        case .github: return "GitHub"
        case .s3: return "S3"
        case .string: return "String"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = RevisionLocationType(rawValue: rawValue) ?? RevisionLocationType.sdkUnknown(rawValue)
    }
}

extension RevisionRequiredException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RevisionRequiredException(message: \(String(describing: message)))"}
}

extension RevisionRequiredException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: RevisionRequiredExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The revision ID was not specified.</p>
public struct RevisionRequiredException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct RevisionRequiredExceptionBody: Equatable {
    public let message: String?
}

extension RevisionRequiredExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RoleRequiredException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RoleRequiredException(message: \(String(describing: message)))"}
}

extension RoleRequiredException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: RoleRequiredExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The role ID was not specified.</p>
public struct RoleRequiredException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct RoleRequiredExceptionBody: Equatable {
    public let message: String?
}

extension RoleRequiredExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RollbackInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case rollbackDeploymentId
        case rollbackMessage
        case rollbackTriggeringDeploymentId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let rollbackDeploymentId = rollbackDeploymentId {
            try encodeContainer.encode(rollbackDeploymentId, forKey: .rollbackDeploymentId)
        }
        if let rollbackMessage = rollbackMessage {
            try encodeContainer.encode(rollbackMessage, forKey: .rollbackMessage)
        }
        if let rollbackTriggeringDeploymentId = rollbackTriggeringDeploymentId {
            try encodeContainer.encode(rollbackTriggeringDeploymentId, forKey: .rollbackTriggeringDeploymentId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rollbackDeploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .rollbackDeploymentId)
        rollbackDeploymentId = rollbackDeploymentIdDecoded
        let rollbackTriggeringDeploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .rollbackTriggeringDeploymentId)
        rollbackTriggeringDeploymentId = rollbackTriggeringDeploymentIdDecoded
        let rollbackMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .rollbackMessage)
        rollbackMessage = rollbackMessageDecoded
    }
}

extension RollbackInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RollbackInfo(rollbackDeploymentId: \(String(describing: rollbackDeploymentId)), rollbackMessage: \(String(describing: rollbackMessage)), rollbackTriggeringDeploymentId: \(String(describing: rollbackTriggeringDeploymentId)))"}
}

/// <p>Information about a deployment rollback.</p>
public struct RollbackInfo: Equatable {
    /// <p>The ID of the deployment rollback.</p>
    public let rollbackDeploymentId: String?
    /// <p>Information that describes the status of a deployment rollback (for example, whether
    ///             the deployment can't be rolled back, is in progress, failed, or succeeded). </p>
    public let rollbackMessage: String?
    /// <p>The deployment ID of the deployment that was underway and triggered a rollback
    ///             deployment because it failed or was stopped.</p>
    public let rollbackTriggeringDeploymentId: String?

    public init (
        rollbackDeploymentId: String? = nil,
        rollbackMessage: String? = nil,
        rollbackTriggeringDeploymentId: String? = nil
    )
    {
        self.rollbackDeploymentId = rollbackDeploymentId
        self.rollbackMessage = rollbackMessage
        self.rollbackTriggeringDeploymentId = rollbackTriggeringDeploymentId
    }
}

extension S3Location: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bucket
        case bundleType
        case eTag
        case key
        case version
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let bundleType = bundleType {
            try encodeContainer.encode(bundleType.rawValue, forKey: .bundleType)
        }
        if let eTag = eTag {
            try encodeContainer.encode(eTag, forKey: .eTag)
        }
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .key)
        key = keyDecoded
        let bundleTypeDecoded = try containerValues.decodeIfPresent(BundleType.self, forKey: .bundleType)
        bundleType = bundleTypeDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let eTagDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eTag)
        eTag = eTagDecoded
    }
}

extension S3Location: CustomDebugStringConvertible {
    public var debugDescription: String {
        "S3Location(bucket: \(String(describing: bucket)), bundleType: \(String(describing: bundleType)), eTag: \(String(describing: eTag)), key: \(String(describing: key)), version: \(String(describing: version)))"}
}

/// <p>Information about the location of application artifacts stored in Amazon S3.</p>
public struct S3Location: Equatable {
    /// <p>The name of the Amazon S3 bucket where the application revision is stored.</p>
    public let bucket: String?
    /// <p>The file type of the application revision. Must be one of the following:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>tar</code>: A tar archive file.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>tgz</code>: A compressed tar archive file.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>zip</code>: A zip archive file.</p>
    ///             </li>
    ///          </ul>
    public let bundleType: BundleType?
    /// <p>The ETag of the Amazon S3 object that represents the bundled artifacts for the
    ///             application revision.</p>
    ///         <p>If the ETag is not specified as an input parameter, ETag validation of the object is
    ///             skipped.</p>
    public let eTag: String?
    /// <p>The name of the Amazon S3 object that represents the bundled artifacts for the
    ///             application revision.</p>
    public let key: String?
    /// <p>A specific version of the Amazon S3 object that represents the bundled artifacts for
    ///             the application revision.</p>
    ///         <p>If the version is not specified, the system uses the most recent version by
    ///             default.</p>
    public let version: String?

    public init (
        bucket: String? = nil,
        bundleType: BundleType? = nil,
        eTag: String? = nil,
        key: String? = nil,
        version: String? = nil
    )
    {
        self.bucket = bucket
        self.bundleType = bundleType
        self.eTag = eTag
        self.key = key
        self.version = version
    }
}

public struct SkipWaitTimeForInstanceTerminationInputBodyMiddleware: Middleware {
    public let id: String = "SkipWaitTimeForInstanceTerminationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SkipWaitTimeForInstanceTerminationInput>,
                  next: H) -> Swift.Result<OperationOutput<SkipWaitTimeForInstanceTerminationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SkipWaitTimeForInstanceTerminationInput>
    public typealias MOutput = OperationOutput<SkipWaitTimeForInstanceTerminationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SkipWaitTimeForInstanceTerminationOutputError>
}

extension SkipWaitTimeForInstanceTerminationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SkipWaitTimeForInstanceTerminationInput(deploymentId: \(String(describing: deploymentId)))"}
}

extension SkipWaitTimeForInstanceTerminationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deploymentId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
    }
}

public struct SkipWaitTimeForInstanceTerminationInputHeadersMiddleware: Middleware {
    public let id: String = "SkipWaitTimeForInstanceTerminationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SkipWaitTimeForInstanceTerminationInput>,
                  next: H) -> Swift.Result<OperationOutput<SkipWaitTimeForInstanceTerminationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SkipWaitTimeForInstanceTerminationInput>
    public typealias MOutput = OperationOutput<SkipWaitTimeForInstanceTerminationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SkipWaitTimeForInstanceTerminationOutputError>
}

public struct SkipWaitTimeForInstanceTerminationInputQueryItemMiddleware: Middleware {
    public let id: String = "SkipWaitTimeForInstanceTerminationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SkipWaitTimeForInstanceTerminationInput>,
                  next: H) -> Swift.Result<OperationOutput<SkipWaitTimeForInstanceTerminationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SkipWaitTimeForInstanceTerminationInput>
    public typealias MOutput = OperationOutput<SkipWaitTimeForInstanceTerminationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SkipWaitTimeForInstanceTerminationOutputError>
}

public struct SkipWaitTimeForInstanceTerminationInput: Equatable {
    /// <p> The unique ID of a blue/green deployment for which you want to skip the instance
    ///             termination wait time. </p>
    public let deploymentId: String?

    public init (
        deploymentId: String? = nil
    )
    {
        self.deploymentId = deploymentId
    }
}

struct SkipWaitTimeForInstanceTerminationInputBody: Equatable {
    public let deploymentId: String?
}

extension SkipWaitTimeForInstanceTerminationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
    }
}

extension SkipWaitTimeForInstanceTerminationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SkipWaitTimeForInstanceTerminationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "DeploymentAlreadyCompletedException" : self = .deploymentAlreadyCompletedException(try DeploymentAlreadyCompletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentDoesNotExistException" : self = .deploymentDoesNotExistException(try DeploymentDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentNotStartedException" : self = .deploymentNotStartedException(try DeploymentNotStartedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedActionForDeploymentTypeException" : self = .unsupportedActionForDeploymentTypeException(try UnsupportedActionForDeploymentTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SkipWaitTimeForInstanceTerminationOutputError: Equatable {
    case deploymentAlreadyCompletedException(DeploymentAlreadyCompletedException)
    case deploymentDoesNotExistException(DeploymentDoesNotExistException)
    case deploymentIdRequiredException(DeploymentIdRequiredException)
    case deploymentNotStartedException(DeploymentNotStartedException)
    case invalidDeploymentIdException(InvalidDeploymentIdException)
    case unsupportedActionForDeploymentTypeException(UnsupportedActionForDeploymentTypeException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SkipWaitTimeForInstanceTerminationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "SkipWaitTimeForInstanceTerminationOutputResponse()"}
}

extension SkipWaitTimeForInstanceTerminationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct SkipWaitTimeForInstanceTerminationOutputResponse: Equatable {

    public init() {}
}

struct SkipWaitTimeForInstanceTerminationOutputResponseBody: Equatable {
}

extension SkipWaitTimeForInstanceTerminationOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public enum SortOrder {
    case ascending
    case descending
    case sdkUnknown(String)
}

extension SortOrder : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SortOrder] {
        return [
            .ascending,
            .descending,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .ascending: return "ascending"
        case .descending: return "descending"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SortOrder(rawValue: rawValue) ?? SortOrder.sdkUnknown(rawValue)
    }
}

public struct StopDeploymentInputBodyMiddleware: Middleware {
    public let id: String = "StopDeploymentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StopDeploymentInput>,
                  next: H) -> Swift.Result<OperationOutput<StopDeploymentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StopDeploymentInput>
    public typealias MOutput = OperationOutput<StopDeploymentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StopDeploymentOutputError>
}

extension StopDeploymentInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StopDeploymentInput(autoRollbackEnabled: \(String(describing: autoRollbackEnabled)), deploymentId: \(String(describing: deploymentId)))"}
}

extension StopDeploymentInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoRollbackEnabled
        case deploymentId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoRollbackEnabled = autoRollbackEnabled {
            try encodeContainer.encode(autoRollbackEnabled, forKey: .autoRollbackEnabled)
        }
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
    }
}

public struct StopDeploymentInputHeadersMiddleware: Middleware {
    public let id: String = "StopDeploymentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StopDeploymentInput>,
                  next: H) -> Swift.Result<OperationOutput<StopDeploymentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StopDeploymentInput>
    public typealias MOutput = OperationOutput<StopDeploymentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StopDeploymentOutputError>
}

public struct StopDeploymentInputQueryItemMiddleware: Middleware {
    public let id: String = "StopDeploymentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StopDeploymentInput>,
                  next: H) -> Swift.Result<OperationOutput<StopDeploymentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StopDeploymentInput>
    public typealias MOutput = OperationOutput<StopDeploymentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StopDeploymentOutputError>
}

/// <p> Represents the input of a <code>StopDeployment</code> operation. </p>
public struct StopDeploymentInput: Equatable {
    /// <p> Indicates, when a deployment is stopped, whether instances that have been updated
    ///             should be rolled back to the previous version of the application revision. </p>
    public let autoRollbackEnabled: Bool?
    /// <p> The unique ID of a deployment. </p>
    public let deploymentId: String?

    public init (
        autoRollbackEnabled: Bool? = nil,
        deploymentId: String? = nil
    )
    {
        self.autoRollbackEnabled = autoRollbackEnabled
        self.deploymentId = deploymentId
    }
}

struct StopDeploymentInputBody: Equatable {
    public let deploymentId: String?
    public let autoRollbackEnabled: Bool?
}

extension StopDeploymentInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case autoRollbackEnabled
        case deploymentId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let autoRollbackEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .autoRollbackEnabled)
        autoRollbackEnabled = autoRollbackEnabledDecoded
    }
}

extension StopDeploymentOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopDeploymentOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "DeploymentAlreadyCompletedException" : self = .deploymentAlreadyCompletedException(try DeploymentAlreadyCompletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentDoesNotExistException" : self = .deploymentDoesNotExistException(try DeploymentDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupDoesNotExistException" : self = .deploymentGroupDoesNotExistException(try DeploymentGroupDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedActionForDeploymentTypeException" : self = .unsupportedActionForDeploymentTypeException(try UnsupportedActionForDeploymentTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopDeploymentOutputError: Equatable {
    case deploymentAlreadyCompletedException(DeploymentAlreadyCompletedException)
    case deploymentDoesNotExistException(DeploymentDoesNotExistException)
    case deploymentGroupDoesNotExistException(DeploymentGroupDoesNotExistException)
    case deploymentIdRequiredException(DeploymentIdRequiredException)
    case invalidDeploymentIdException(InvalidDeploymentIdException)
    case unsupportedActionForDeploymentTypeException(UnsupportedActionForDeploymentTypeException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopDeploymentOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "StopDeploymentOutputResponse(status: \(String(describing: status)), statusMessage: \(String(describing: statusMessage)))"}
}

extension StopDeploymentOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: StopDeploymentOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.status = output.status
            self.statusMessage = output.statusMessage
        } else {
            self.status = nil
            self.statusMessage = nil
        }
    }
}

/// <p> Represents the output of a <code>StopDeployment</code> operation. </p>
public struct StopDeploymentOutputResponse: Equatable {
    /// <p>The status of the stop deployment operation:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Pending: The stop operation is pending.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Succeeded: The stop operation was successful.</p>
    ///             </li>
    ///          </ul>
    public let status: StopStatus?
    /// <p>An accompanying status message.</p>
    public let statusMessage: String?

    public init (
        status: StopStatus? = nil,
        statusMessage: String? = nil
    )
    {
        self.status = status
        self.statusMessage = statusMessage
    }
}

struct StopDeploymentOutputResponseBody: Equatable {
    public let status: StopStatus?
    public let statusMessage: String?
}

extension StopDeploymentOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case status
        case statusMessage
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(StopStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
    }
}

public enum StopStatus {
    case pending
    case succeeded
    case sdkUnknown(String)
}

extension StopStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [StopStatus] {
        return [
            .pending,
            .succeeded,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .pending: return "Pending"
        case .succeeded: return "Succeeded"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = StopStatus(rawValue: rawValue) ?? StopStatus.sdkUnknown(rawValue)
    }
}

extension Tag: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
    }
}

extension Tag: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Tag(key: \(String(describing: key)), value: \(String(describing: value)))"}
}

/// <p>Information about a tag.</p>
public struct Tag: Equatable {
    /// <p>The tag's key.</p>
    public let key: String?
    /// <p>The tag's value.</p>
    public let value: String?

    public init (
        key: String? = nil,
        value: String? = nil
    )
    {
        self.key = key
        self.value = value
    }
}

extension TagFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case key = "Key"
        case type = "Type"
        case value = "Value"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
        let typeDecoded = try containerValues.decodeIfPresent(TagFilterType.self, forKey: .type)
        type = typeDecoded
    }
}

extension TagFilter: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagFilter(key: \(String(describing: key)), type: \(String(describing: type)), value: \(String(describing: value)))"}
}

/// <p>Information about an on-premises instance tag filter.</p>
public struct TagFilter: Equatable {
    /// <p>The on-premises instance tag filter key.</p>
    public let key: String?
    /// <p>The on-premises instance tag filter type:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>KEY_ONLY: Key only.</p>
    ///             </li>
    ///             <li>
    ///                 <p>VALUE_ONLY: Value only.</p>
    ///             </li>
    ///             <li>
    ///                 <p>KEY_AND_VALUE: Key and value.</p>
    ///             </li>
    ///          </ul>
    public let type: TagFilterType?
    /// <p>The on-premises instance tag filter value.</p>
    public let value: String?

    public init (
        key: String? = nil,
        type: TagFilterType? = nil,
        value: String? = nil
    )
    {
        self.key = key
        self.type = type
        self.value = value
    }
}

public enum TagFilterType {
    case keyAndValue
    case keyOnly
    case valueOnly
    case sdkUnknown(String)
}

extension TagFilterType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TagFilterType] {
        return [
            .keyAndValue,
            .keyOnly,
            .valueOnly,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .keyAndValue: return "KEY_AND_VALUE"
        case .keyOnly: return "KEY_ONLY"
        case .valueOnly: return "VALUE_ONLY"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TagFilterType(rawValue: rawValue) ?? TagFilterType.sdkUnknown(rawValue)
    }
}

extension TagLimitExceededException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagLimitExceededException(message: \(String(describing: message)))"}
}

extension TagLimitExceededException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TagLimitExceededExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The maximum allowed number of tags was exceeded.</p>
public struct TagLimitExceededException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct TagLimitExceededExceptionBody: Equatable {
    public let message: String?
}

extension TagLimitExceededExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TagRequiredException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagRequiredException(message: \(String(describing: message)))"}
}

extension TagRequiredException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TagRequiredExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A tag was not specified.</p>
public struct TagRequiredException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct TagRequiredExceptionBody: Equatable {
    public let message: String?
}

extension TagRequiredExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct TagResourceInputBodyMiddleware: Middleware {
    public let id: String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagResourceInput>
    public typealias MOutput = OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagResourceOutputError>
}

extension TagResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagResourceInput(resourceArn: \(String(describing: resourceArn)), tags: \(String(describing: tags)))"}
}

extension TagResourceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct TagResourceInputHeadersMiddleware: Middleware {
    public let id: String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagResourceInput>
    public typealias MOutput = OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagResourceInput>
    public typealias MOutput = OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagResourceOutputError>
}

public struct TagResourceInput: Equatable {
    /// <p> The ARN of a resource, such as a CodeDeploy application or deployment group. </p>
    public let resourceArn: String?
    /// <p> A list of tags that <code>TagResource</code> associates with a resource. The resource
    ///             is identified by the <code>ResourceArn</code> input parameter. </p>
    public let tags: [Tag]?

    public init (
        resourceArn: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Equatable {
    public let resourceArn: String?
    public let tags: [Tag]?
}

extension TagResourceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ArnNotSupportedException" : self = .arnNotSupportedException(try ArnNotSupportedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentConfigDoesNotExistException" : self = .deploymentConfigDoesNotExistException(try DeploymentConfigDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupDoesNotExistException" : self = .deploymentGroupDoesNotExistException(try DeploymentGroupDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArnException" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagsToAddException" : self = .invalidTagsToAddException(try InvalidTagsToAddException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceArnRequiredException" : self = .resourceArnRequiredException(try ResourceArnRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagRequiredException" : self = .tagRequiredException(try TagRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case arnNotSupportedException(ArnNotSupportedException)
    case deploymentConfigDoesNotExistException(DeploymentConfigDoesNotExistException)
    case deploymentGroupDoesNotExistException(DeploymentGroupDoesNotExistException)
    case invalidArnException(InvalidArnException)
    case invalidTagsToAddException(InvalidTagsToAddException)
    case resourceArnRequiredException(ResourceArnRequiredException)
    case tagRequiredException(TagRequiredException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagResourceOutputResponse()"}
}

extension TagResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Equatable {

    public init() {}
}

struct TagResourceOutputResponseBody: Equatable {
}

extension TagResourceOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension TagSetListLimitExceededException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagSetListLimitExceededException(message: \(String(describing: message)))"}
}

extension TagSetListLimitExceededException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TagSetListLimitExceededExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The number of tag groups included in the tag set list exceeded the maximum allowed
///             limit of 3.</p>
public struct TagSetListLimitExceededException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct TagSetListLimitExceededExceptionBody: Equatable {
    public let message: String?
}

extension TagSetListLimitExceededExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum TargetFilterName {
    case serverInstanceLabel
    case targetStatus
    case sdkUnknown(String)
}

extension TargetFilterName : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TargetFilterName] {
        return [
            .serverInstanceLabel,
            .targetStatus,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .serverInstanceLabel: return "ServerInstanceLabel"
        case .targetStatus: return "TargetStatus"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TargetFilterName(rawValue: rawValue) ?? TargetFilterName.sdkUnknown(rawValue)
    }
}

extension TargetGroupInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
    }
}

extension TargetGroupInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TargetGroupInfo(name: \(String(describing: name)))"}
}

/// <p>Information about a target group in Elastic Load Balancing to use in a deployment.
///             Instances are registered as targets in a target group, and traffic is routed to the
///             target group.</p>
public struct TargetGroupInfo: Equatable {
    /// <p>For blue/green deployments, the name of the target group that instances in the
    ///             original environment are deregistered from, and instances in the replacement environment
    ///             are registered with. For in-place deployments, the name of the target group that
    ///             instances are deregistered from, so they are not serving traffic during a deployment,
    ///             and then re-registered with after the deployment is complete. </p>
    public let name: String?

    public init (
        name: String? = nil
    )
    {
        self.name = name
    }
}

extension TargetGroupPairInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case prodTrafficRoute
        case targetGroups
        case testTrafficRoute
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let prodTrafficRoute = prodTrafficRoute {
            try encodeContainer.encode(prodTrafficRoute, forKey: .prodTrafficRoute)
        }
        if let targetGroups = targetGroups {
            var targetGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetGroups)
            for targetgroupinfolist0 in targetGroups {
                try targetGroupsContainer.encode(targetgroupinfolist0)
            }
        }
        if let testTrafficRoute = testTrafficRoute {
            try encodeContainer.encode(testTrafficRoute, forKey: .testTrafficRoute)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetGroupsContainer = try containerValues.decodeIfPresent([TargetGroupInfo?].self, forKey: .targetGroups)
        var targetGroupsDecoded0:[TargetGroupInfo]? = nil
        if let targetGroupsContainer = targetGroupsContainer {
            targetGroupsDecoded0 = [TargetGroupInfo]()
            for structure0 in targetGroupsContainer {
                if let structure0 = structure0 {
                    targetGroupsDecoded0?.append(structure0)
                }
            }
        }
        targetGroups = targetGroupsDecoded0
        let prodTrafficRouteDecoded = try containerValues.decodeIfPresent(TrafficRoute.self, forKey: .prodTrafficRoute)
        prodTrafficRoute = prodTrafficRouteDecoded
        let testTrafficRouteDecoded = try containerValues.decodeIfPresent(TrafficRoute.self, forKey: .testTrafficRoute)
        testTrafficRoute = testTrafficRouteDecoded
    }
}

extension TargetGroupPairInfo: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TargetGroupPairInfo(prodTrafficRoute: \(String(describing: prodTrafficRoute)), targetGroups: \(String(describing: targetGroups)), testTrafficRoute: \(String(describing: testTrafficRoute)))"}
}

/// <p> Information about two target groups and how traffic is routed during an Amazon ECS
///             deployment. An optional test traffic route can be specified. </p>
public struct TargetGroupPairInfo: Equatable {
    /// <p> The path used by a load balancer to route production traffic when an Amazon ECS
    ///             deployment is complete. </p>
    public let prodTrafficRoute: TrafficRoute?
    /// <p> One pair of target groups. One is associated with the original task set. The second
    ///             is associated with the task set that serves traffic after the deployment is complete.
    ///         </p>
    public let targetGroups: [TargetGroupInfo]?
    /// <p> An optional path used by a load balancer to route test traffic after an Amazon ECS
    ///             deployment. Validation can occur while test traffic is served during a deployment.
    ///         </p>
    public let testTrafficRoute: TrafficRoute?

    public init (
        prodTrafficRoute: TrafficRoute? = nil,
        targetGroups: [TargetGroupInfo]? = nil,
        testTrafficRoute: TrafficRoute? = nil
    )
    {
        self.prodTrafficRoute = prodTrafficRoute
        self.targetGroups = targetGroups
        self.testTrafficRoute = testTrafficRoute
    }
}

extension TargetInstances: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case autoScalingGroups
        case ec2TagSet
        case tagFilters
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingGroups = autoScalingGroups {
            var autoScalingGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .autoScalingGroups)
            for autoscalinggroupnamelist0 in autoScalingGroups {
                try autoScalingGroupsContainer.encode(autoscalinggroupnamelist0)
            }
        }
        if let ec2TagSet = ec2TagSet {
            try encodeContainer.encode(ec2TagSet, forKey: .ec2TagSet)
        }
        if let tagFilters = tagFilters {
            var tagFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagFilters)
            for ec2tagfilterlist0 in tagFilters {
                try tagFiltersContainer.encode(ec2tagfilterlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagFiltersContainer = try containerValues.decodeIfPresent([EC2TagFilter?].self, forKey: .tagFilters)
        var tagFiltersDecoded0:[EC2TagFilter]? = nil
        if let tagFiltersContainer = tagFiltersContainer {
            tagFiltersDecoded0 = [EC2TagFilter]()
            for structure0 in tagFiltersContainer {
                if let structure0 = structure0 {
                    tagFiltersDecoded0?.append(structure0)
                }
            }
        }
        tagFilters = tagFiltersDecoded0
        let autoScalingGroupsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .autoScalingGroups)
        var autoScalingGroupsDecoded0:[String]? = nil
        if let autoScalingGroupsContainer = autoScalingGroupsContainer {
            autoScalingGroupsDecoded0 = [String]()
            for string0 in autoScalingGroupsContainer {
                if let string0 = string0 {
                    autoScalingGroupsDecoded0?.append(string0)
                }
            }
        }
        autoScalingGroups = autoScalingGroupsDecoded0
        let ec2TagSetDecoded = try containerValues.decodeIfPresent(EC2TagSet.self, forKey: .ec2TagSet)
        ec2TagSet = ec2TagSetDecoded
    }
}

extension TargetInstances: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TargetInstances(autoScalingGroups: \(String(describing: autoScalingGroups)), ec2TagSet: \(String(describing: ec2TagSet)), tagFilters: \(String(describing: tagFilters)))"}
}

/// <p>Information about the instances to be used in the replacement environment in a
///             blue/green deployment.</p>
public struct TargetInstances: Equatable {
    /// <p>The names of one or more Auto Scaling groups to identify a replacement environment for
    ///             a blue/green deployment.</p>
    public let autoScalingGroups: [String]?
    /// <p>Information about the groups of EC2 instance tags that an instance must be identified
    ///             by in order for it to be included in the replacement environment for a blue/green
    ///             deployment. Cannot be used in the same call as <code>tagFilters</code>.</p>
    public let ec2TagSet: EC2TagSet?
    /// <p>The tag filter key, type, and value used to identify Amazon EC2 instances in a
    ///             replacement environment for a blue/green deployment. Cannot be used in the same call as
    ///                 <code>ec2TagSet</code>.</p>
    public let tagFilters: [EC2TagFilter]?

    public init (
        autoScalingGroups: [String]? = nil,
        ec2TagSet: EC2TagSet? = nil,
        tagFilters: [EC2TagFilter]? = nil
    )
    {
        self.autoScalingGroups = autoScalingGroups
        self.ec2TagSet = ec2TagSet
        self.tagFilters = tagFilters
    }
}

public enum TargetLabel {
    case blue
    case green
    case sdkUnknown(String)
}

extension TargetLabel : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TargetLabel] {
        return [
            .blue,
            .green,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .blue: return "Blue"
        case .green: return "Green"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TargetLabel(rawValue: rawValue) ?? TargetLabel.sdkUnknown(rawValue)
    }
}

public enum TargetStatus {
    case failed
    case inProgress
    case pending
    case ready
    case skipped
    case succeeded
    case unknown
    case sdkUnknown(String)
}

extension TargetStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TargetStatus] {
        return [
            .failed,
            .inProgress,
            .pending,
            .ready,
            .skipped,
            .succeeded,
            .unknown,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .failed: return "Failed"
        case .inProgress: return "InProgress"
        case .pending: return "Pending"
        case .ready: return "Ready"
        case .skipped: return "Skipped"
        case .succeeded: return "Succeeded"
        case .unknown: return "Unknown"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TargetStatus(rawValue: rawValue) ?? TargetStatus.sdkUnknown(rawValue)
    }
}

extension ThrottlingException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ThrottlingException(message: \(String(describing: message)))"}
}

extension ThrottlingException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An API function was called too frequently.</p>
public struct ThrottlingException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ThrottlingExceptionBody: Equatable {
    public let message: String?
}

extension ThrottlingExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TimeBasedCanary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case canaryInterval
        case canaryPercentage
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if canaryInterval != 0 {
            try encodeContainer.encode(canaryInterval, forKey: .canaryInterval)
        }
        if canaryPercentage != 0 {
            try encodeContainer.encode(canaryPercentage, forKey: .canaryPercentage)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let canaryPercentageDecoded = try containerValues.decode(Int.self, forKey: .canaryPercentage)
        canaryPercentage = canaryPercentageDecoded
        let canaryIntervalDecoded = try containerValues.decode(Int.self, forKey: .canaryInterval)
        canaryInterval = canaryIntervalDecoded
    }
}

extension TimeBasedCanary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TimeBasedCanary(canaryInterval: \(String(describing: canaryInterval)), canaryPercentage: \(String(describing: canaryPercentage)))"}
}

/// <p>A configuration that shifts traffic from one version of a Lambda function or ECS task
///             set to another in two increments. The original and target Lambda function versions or
///             ECS task sets are specified in the deployment's AppSpec file.</p>
public struct TimeBasedCanary: Equatable {
    /// <p>The number of minutes between the first and second traffic shifts of a
    ///                 <code>TimeBasedCanary</code> deployment.</p>
    public let canaryInterval: Int
    /// <p>The percentage of traffic to shift in the first increment of a
    ///                 <code>TimeBasedCanary</code> deployment.</p>
    public let canaryPercentage: Int

    public init (
        canaryInterval: Int = 0,
        canaryPercentage: Int = 0
    )
    {
        self.canaryInterval = canaryInterval
        self.canaryPercentage = canaryPercentage
    }
}

extension TimeBasedLinear: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case linearInterval
        case linearPercentage
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if linearInterval != 0 {
            try encodeContainer.encode(linearInterval, forKey: .linearInterval)
        }
        if linearPercentage != 0 {
            try encodeContainer.encode(linearPercentage, forKey: .linearPercentage)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let linearPercentageDecoded = try containerValues.decode(Int.self, forKey: .linearPercentage)
        linearPercentage = linearPercentageDecoded
        let linearIntervalDecoded = try containerValues.decode(Int.self, forKey: .linearInterval)
        linearInterval = linearIntervalDecoded
    }
}

extension TimeBasedLinear: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TimeBasedLinear(linearInterval: \(String(describing: linearInterval)), linearPercentage: \(String(describing: linearPercentage)))"}
}

/// <p>A configuration that shifts traffic from one version of a Lambda function or ECS task
///             set to another in equal increments, with an equal number of minutes between each
///             increment. The original and target Lambda function versions or ECS task sets are
///             specified in the deployment's AppSpec file.</p>
public struct TimeBasedLinear: Equatable {
    /// <p>The number of minutes between each incremental traffic shift of a
    ///                 <code>TimeBasedLinear</code> deployment.</p>
    public let linearInterval: Int
    /// <p>The percentage of traffic that is shifted at the start of each increment of a
    ///                 <code>TimeBasedLinear</code> deployment.</p>
    public let linearPercentage: Int

    public init (
        linearInterval: Int = 0,
        linearPercentage: Int = 0
    )
    {
        self.linearInterval = linearInterval
        self.linearPercentage = linearPercentage
    }
}

extension TimeRange: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case end
        case start
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let end = end {
            try encodeContainer.encode(end.timeIntervalSince1970, forKey: .end)
        }
        if let start = start {
            try encodeContainer.encode(start.timeIntervalSince1970, forKey: .start)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .start)
        start = startDecoded
        let endDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .end)
        end = endDecoded
    }
}

extension TimeRange: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TimeRange(end: \(String(describing: end)), start: \(String(describing: start)))"}
}

/// <p>Information about a time range.</p>
public struct TimeRange: Equatable {
    /// <p>The end time of the time range.</p>
    ///         <note>
    ///             <p>Specify null to leave the end time open-ended.</p>
    ///         </note>
    public let end: Date?
    /// <p>The start time of the time range.</p>
    ///         <note>
    ///             <p>Specify null to leave the start time open-ended.</p>
    ///         </note>
    public let start: Date?

    public init (
        end: Date? = nil,
        start: Date? = nil
    )
    {
        self.end = end
        self.start = start
    }
}

extension TrafficRoute: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case listenerArns
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let listenerArns = listenerArns {
            var listenerArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .listenerArns)
            for listenerarnlist0 in listenerArns {
                try listenerArnsContainer.encode(listenerarnlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let listenerArnsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .listenerArns)
        var listenerArnsDecoded0:[String]? = nil
        if let listenerArnsContainer = listenerArnsContainer {
            listenerArnsDecoded0 = [String]()
            for string0 in listenerArnsContainer {
                if let string0 = string0 {
                    listenerArnsDecoded0?.append(string0)
                }
            }
        }
        listenerArns = listenerArnsDecoded0
    }
}

extension TrafficRoute: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TrafficRoute(listenerArns: \(String(describing: listenerArns)))"}
}

/// <p> Information about a listener. The listener contains the path used to route traffic
///             that is received from the load balancer to a target group. </p>
public struct TrafficRoute: Equatable {
    /// <p> The Amazon Resource Name (ARN) of one listener. The listener identifies the route
    ///             between a target group and a load balancer. This is an array of strings with a maximum
    ///             size of one. </p>
    public let listenerArns: [String]?

    public init (
        listenerArns: [String]? = nil
    )
    {
        self.listenerArns = listenerArns
    }
}

extension TrafficRoutingConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case timeBasedCanary
        case timeBasedLinear
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let timeBasedCanary = timeBasedCanary {
            try encodeContainer.encode(timeBasedCanary, forKey: .timeBasedCanary)
        }
        if let timeBasedLinear = timeBasedLinear {
            try encodeContainer.encode(timeBasedLinear, forKey: .timeBasedLinear)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(TrafficRoutingType.self, forKey: .type)
        type = typeDecoded
        let timeBasedCanaryDecoded = try containerValues.decodeIfPresent(TimeBasedCanary.self, forKey: .timeBasedCanary)
        timeBasedCanary = timeBasedCanaryDecoded
        let timeBasedLinearDecoded = try containerValues.decodeIfPresent(TimeBasedLinear.self, forKey: .timeBasedLinear)
        timeBasedLinear = timeBasedLinearDecoded
    }
}

extension TrafficRoutingConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TrafficRoutingConfig(timeBasedCanary: \(String(describing: timeBasedCanary)), timeBasedLinear: \(String(describing: timeBasedLinear)), type: \(String(describing: type)))"}
}

/// <p>The configuration that specifies how traffic is shifted from one version of a Lambda
///             function to another version during an AWS Lambda deployment, or from one Amazon ECS task
///             set to another during an Amazon ECS deployment.</p>
public struct TrafficRoutingConfig: Equatable {
    /// <p>A configuration that shifts traffic from one version of a Lambda function or ECS task
    ///             set to another in two increments. The original and target Lambda function versions or
    ///             ECS task sets are specified in the deployment's AppSpec file.</p>
    public let timeBasedCanary: TimeBasedCanary?
    /// <p>A configuration that shifts traffic from one version of a Lambda function or ECS task
    ///             set to another in equal increments, with an equal number of minutes between each
    ///             increment. The original and target Lambda function versions or ECS task sets are
    ///             specified in the deployment's AppSpec file.</p>
    public let timeBasedLinear: TimeBasedLinear?
    /// <p>The type of traffic shifting (<code>TimeBasedCanary</code> or
    ///                 <code>TimeBasedLinear</code>) used by a deployment configuration.</p>
    public let type: TrafficRoutingType?

    public init (
        timeBasedCanary: TimeBasedCanary? = nil,
        timeBasedLinear: TimeBasedLinear? = nil,
        type: TrafficRoutingType? = nil
    )
    {
        self.timeBasedCanary = timeBasedCanary
        self.timeBasedLinear = timeBasedLinear
        self.type = type
    }
}

public enum TrafficRoutingType {
    case allatonce
    case timebasedcanary
    case timebasedlinear
    case sdkUnknown(String)
}

extension TrafficRoutingType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TrafficRoutingType] {
        return [
            .allatonce,
            .timebasedcanary,
            .timebasedlinear,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .allatonce: return "AllAtOnce"
        case .timebasedcanary: return "TimeBasedCanary"
        case .timebasedlinear: return "TimeBasedLinear"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TrafficRoutingType(rawValue: rawValue) ?? TrafficRoutingType.sdkUnknown(rawValue)
    }
}

extension TriggerConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case triggerEvents
        case triggerName
        case triggerTargetArn
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let triggerEvents = triggerEvents {
            var triggerEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .triggerEvents)
            for triggereventtypelist0 in triggerEvents {
                try triggerEventsContainer.encode(triggereventtypelist0.rawValue)
            }
        }
        if let triggerName = triggerName {
            try encodeContainer.encode(triggerName, forKey: .triggerName)
        }
        if let triggerTargetArn = triggerTargetArn {
            try encodeContainer.encode(triggerTargetArn, forKey: .triggerTargetArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let triggerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .triggerName)
        triggerName = triggerNameDecoded
        let triggerTargetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .triggerTargetArn)
        triggerTargetArn = triggerTargetArnDecoded
        let triggerEventsContainer = try containerValues.decodeIfPresent([TriggerEventType?].self, forKey: .triggerEvents)
        var triggerEventsDecoded0:[TriggerEventType]? = nil
        if let triggerEventsContainer = triggerEventsContainer {
            triggerEventsDecoded0 = [TriggerEventType]()
            for string0 in triggerEventsContainer {
                if let string0 = string0 {
                    triggerEventsDecoded0?.append(string0)
                }
            }
        }
        triggerEvents = triggerEventsDecoded0
    }
}

extension TriggerConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TriggerConfig(triggerEvents: \(String(describing: triggerEvents)), triggerName: \(String(describing: triggerName)), triggerTargetArn: \(String(describing: triggerTargetArn)))"}
}

/// <p>Information about notification triggers for the deployment group.</p>
public struct TriggerConfig: Equatable {
    /// <p>The event type or types for which notifications are triggered.</p>
    public let triggerEvents: [TriggerEventType]?
    /// <p>The name of the notification trigger.</p>
    public let triggerName: String?
    /// <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service topic through
    ///             which notifications about deployment or instance events are sent.</p>
    public let triggerTargetArn: String?

    public init (
        triggerEvents: [TriggerEventType]? = nil,
        triggerName: String? = nil,
        triggerTargetArn: String? = nil
    )
    {
        self.triggerEvents = triggerEvents
        self.triggerName = triggerName
        self.triggerTargetArn = triggerTargetArn
    }
}

public enum TriggerEventType {
    case deploymentFailure
    case deploymentReady
    case deploymentRollback
    case deploymentStart
    case deploymentStop
    case deploymentSuccess
    case instanceFailure
    case instanceReady
    case instanceStart
    case instanceSuccess
    case sdkUnknown(String)
}

extension TriggerEventType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TriggerEventType] {
        return [
            .deploymentFailure,
            .deploymentReady,
            .deploymentRollback,
            .deploymentStart,
            .deploymentStop,
            .deploymentSuccess,
            .instanceFailure,
            .instanceReady,
            .instanceStart,
            .instanceSuccess,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .deploymentFailure: return "DeploymentFailure"
        case .deploymentReady: return "DeploymentReady"
        case .deploymentRollback: return "DeploymentRollback"
        case .deploymentStart: return "DeploymentStart"
        case .deploymentStop: return "DeploymentStop"
        case .deploymentSuccess: return "DeploymentSuccess"
        case .instanceFailure: return "InstanceFailure"
        case .instanceReady: return "InstanceReady"
        case .instanceStart: return "InstanceStart"
        case .instanceSuccess: return "InstanceSuccess"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TriggerEventType(rawValue: rawValue) ?? TriggerEventType.sdkUnknown(rawValue)
    }
}

extension TriggerTargetsLimitExceededException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TriggerTargetsLimitExceededException(message: \(String(describing: message)))"}
}

extension TriggerTargetsLimitExceededException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TriggerTargetsLimitExceededExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The maximum allowed number of triggers was exceeded.</p>
public struct TriggerTargetsLimitExceededException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct TriggerTargetsLimitExceededExceptionBody: Equatable {
    public let message: String?
}

extension TriggerTargetsLimitExceededExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UnsupportedActionForDeploymentTypeException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UnsupportedActionForDeploymentTypeException(message: \(String(describing: message)))"}
}

extension UnsupportedActionForDeploymentTypeException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UnsupportedActionForDeploymentTypeExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A call was submitted that is not supported for the specified deployment type.</p>
public struct UnsupportedActionForDeploymentTypeException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    /// <p>The message that corresponds to the exception thrown by AWS CodeDeploy.</p>
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct UnsupportedActionForDeploymentTypeExceptionBody: Equatable {
    public let message: String?
}

extension UnsupportedActionForDeploymentTypeExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct UntagResourceInputBodyMiddleware: Middleware {
    public let id: String = "UntagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagResourceInput>
    public typealias MOutput = OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagResourceOutputError>
}

extension UntagResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UntagResourceInput(resourceArn: \(String(describing: resourceArn)), tagKeys: \(String(describing: tagKeys)))"}
}

extension UntagResourceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkeylist0 in tagKeys {
                try tagKeysContainer.encode(tagkeylist0)
            }
        }
    }
}

public struct UntagResourceInputHeadersMiddleware: Middleware {
    public let id: String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagResourceInput>
    public typealias MOutput = OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagResourceInput>
    public typealias MOutput = OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagResourceOutputError>
}

public struct UntagResourceInput: Equatable {
    /// <p> The Amazon Resource Name (ARN) that specifies from which resource to disassociate the
    ///             tags with the keys in the <code>TagKeys</code> input parameter. </p>
    public let resourceArn: String?
    /// <p> A list of keys of <code>Tag</code> objects. The <code>Tag</code> objects identified
    ///             by the keys are disassociated from the resource specified by the
    ///                 <code>ResourceArn</code> input parameter. </p>
    public let tagKeys: [String]?

    public init (
        resourceArn: String? = nil,
        tagKeys: [String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Equatable {
    public let resourceArn: String?
    public let tagKeys: [String]?
}

extension UntagResourceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ArnNotSupportedException" : self = .arnNotSupportedException(try ArnNotSupportedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentConfigDoesNotExistException" : self = .deploymentConfigDoesNotExistException(try DeploymentConfigDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupDoesNotExistException" : self = .deploymentGroupDoesNotExistException(try DeploymentGroupDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArnException" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagsToAddException" : self = .invalidTagsToAddException(try InvalidTagsToAddException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceArnRequiredException" : self = .resourceArnRequiredException(try ResourceArnRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagRequiredException" : self = .tagRequiredException(try TagRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case arnNotSupportedException(ArnNotSupportedException)
    case deploymentConfigDoesNotExistException(DeploymentConfigDoesNotExistException)
    case deploymentGroupDoesNotExistException(DeploymentGroupDoesNotExistException)
    case invalidArnException(InvalidArnException)
    case invalidTagsToAddException(InvalidTagsToAddException)
    case resourceArnRequiredException(ResourceArnRequiredException)
    case tagRequiredException(TagRequiredException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UntagResourceOutputResponse()"}
}

extension UntagResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Equatable {

    public init() {}
}

struct UntagResourceOutputResponseBody: Equatable {
}

extension UntagResourceOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct UpdateApplicationInputBodyMiddleware: Middleware {
    public let id: String = "UpdateApplicationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateApplicationInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateApplicationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateApplicationInput>
    public typealias MOutput = OperationOutput<UpdateApplicationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateApplicationOutputError>
}

extension UpdateApplicationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateApplicationInput(applicationName: \(String(describing: applicationName)), newApplicationName: \(String(describing: newApplicationName)))"}
}

extension UpdateApplicationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case newApplicationName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let newApplicationName = newApplicationName {
            try encodeContainer.encode(newApplicationName, forKey: .newApplicationName)
        }
    }
}

public struct UpdateApplicationInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateApplicationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateApplicationInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateApplicationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateApplicationInput>
    public typealias MOutput = OperationOutput<UpdateApplicationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateApplicationOutputError>
}

public struct UpdateApplicationInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateApplicationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateApplicationInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateApplicationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateApplicationInput>
    public typealias MOutput = OperationOutput<UpdateApplicationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateApplicationOutputError>
}

/// <p>Represents the input of an <code>UpdateApplication</code> operation.</p>
public struct UpdateApplicationInput: Equatable {
    /// <p>The current name of the application you want to change.</p>
    public let applicationName: String?
    /// <p>The new name to give the application.</p>
    public let newApplicationName: String?

    public init (
        applicationName: String? = nil,
        newApplicationName: String? = nil
    )
    {
        self.applicationName = applicationName
        self.newApplicationName = newApplicationName
    }
}

struct UpdateApplicationInputBody: Equatable {
    public let applicationName: String?
    public let newApplicationName: String?
}

extension UpdateApplicationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case newApplicationName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let newApplicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .newApplicationName)
        newApplicationName = newApplicationNameDecoded
    }
}

extension UpdateApplicationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateApplicationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ApplicationAlreadyExistsException" : self = .applicationAlreadyExistsException(try ApplicationAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateApplicationOutputError: Equatable {
    case applicationAlreadyExistsException(ApplicationAlreadyExistsException)
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateApplicationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateApplicationOutputResponse()"}
}

extension UpdateApplicationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct UpdateApplicationOutputResponse: Equatable {

    public init() {}
}

struct UpdateApplicationOutputResponseBody: Equatable {
}

extension UpdateApplicationOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct UpdateDeploymentGroupInputBodyMiddleware: Middleware {
    public let id: String = "UpdateDeploymentGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateDeploymentGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateDeploymentGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateDeploymentGroupInput>
    public typealias MOutput = OperationOutput<UpdateDeploymentGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateDeploymentGroupOutputError>
}

extension UpdateDeploymentGroupInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateDeploymentGroupInput(alarmConfiguration: \(String(describing: alarmConfiguration)), applicationName: \(String(describing: applicationName)), autoRollbackConfiguration: \(String(describing: autoRollbackConfiguration)), autoScalingGroups: \(String(describing: autoScalingGroups)), blueGreenDeploymentConfiguration: \(String(describing: blueGreenDeploymentConfiguration)), currentDeploymentGroupName: \(String(describing: currentDeploymentGroupName)), deploymentConfigName: \(String(describing: deploymentConfigName)), deploymentStyle: \(String(describing: deploymentStyle)), ec2TagFilters: \(String(describing: ec2TagFilters)), ec2TagSet: \(String(describing: ec2TagSet)), ecsServices: \(String(describing: ecsServices)), loadBalancerInfo: \(String(describing: loadBalancerInfo)), newDeploymentGroupName: \(String(describing: newDeploymentGroupName)), onPremisesInstanceTagFilters: \(String(describing: onPremisesInstanceTagFilters)), onPremisesTagSet: \(String(describing: onPremisesTagSet)), outdatedInstancesStrategy: \(String(describing: outdatedInstancesStrategy)), serviceRoleArn: \(String(describing: serviceRoleArn)), triggerConfigurations: \(String(describing: triggerConfigurations)))"}
}

extension UpdateDeploymentGroupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alarmConfiguration
        case applicationName
        case autoRollbackConfiguration
        case autoScalingGroups
        case blueGreenDeploymentConfiguration
        case currentDeploymentGroupName
        case deploymentConfigName
        case deploymentStyle
        case ec2TagFilters
        case ec2TagSet
        case ecsServices
        case loadBalancerInfo
        case newDeploymentGroupName
        case onPremisesInstanceTagFilters
        case onPremisesTagSet
        case outdatedInstancesStrategy
        case serviceRoleArn
        case triggerConfigurations
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmConfiguration = alarmConfiguration {
            try encodeContainer.encode(alarmConfiguration, forKey: .alarmConfiguration)
        }
        if let applicationName = applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let autoRollbackConfiguration = autoRollbackConfiguration {
            try encodeContainer.encode(autoRollbackConfiguration, forKey: .autoRollbackConfiguration)
        }
        if let autoScalingGroups = autoScalingGroups {
            var autoScalingGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .autoScalingGroups)
            for autoscalinggroupnamelist0 in autoScalingGroups {
                try autoScalingGroupsContainer.encode(autoscalinggroupnamelist0)
            }
        }
        if let blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration {
            try encodeContainer.encode(blueGreenDeploymentConfiguration, forKey: .blueGreenDeploymentConfiguration)
        }
        if let currentDeploymentGroupName = currentDeploymentGroupName {
            try encodeContainer.encode(currentDeploymentGroupName, forKey: .currentDeploymentGroupName)
        }
        if let deploymentConfigName = deploymentConfigName {
            try encodeContainer.encode(deploymentConfigName, forKey: .deploymentConfigName)
        }
        if let deploymentStyle = deploymentStyle {
            try encodeContainer.encode(deploymentStyle, forKey: .deploymentStyle)
        }
        if let ec2TagFilters = ec2TagFilters {
            var ec2TagFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2TagFilters)
            for ec2tagfilterlist0 in ec2TagFilters {
                try ec2TagFiltersContainer.encode(ec2tagfilterlist0)
            }
        }
        if let ec2TagSet = ec2TagSet {
            try encodeContainer.encode(ec2TagSet, forKey: .ec2TagSet)
        }
        if let ecsServices = ecsServices {
            var ecsServicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ecsServices)
            for ecsservicelist0 in ecsServices {
                try ecsServicesContainer.encode(ecsservicelist0)
            }
        }
        if let loadBalancerInfo = loadBalancerInfo {
            try encodeContainer.encode(loadBalancerInfo, forKey: .loadBalancerInfo)
        }
        if let newDeploymentGroupName = newDeploymentGroupName {
            try encodeContainer.encode(newDeploymentGroupName, forKey: .newDeploymentGroupName)
        }
        if let onPremisesInstanceTagFilters = onPremisesInstanceTagFilters {
            var onPremisesInstanceTagFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .onPremisesInstanceTagFilters)
            for tagfilterlist0 in onPremisesInstanceTagFilters {
                try onPremisesInstanceTagFiltersContainer.encode(tagfilterlist0)
            }
        }
        if let onPremisesTagSet = onPremisesTagSet {
            try encodeContainer.encode(onPremisesTagSet, forKey: .onPremisesTagSet)
        }
        if let outdatedInstancesStrategy = outdatedInstancesStrategy {
            try encodeContainer.encode(outdatedInstancesStrategy.rawValue, forKey: .outdatedInstancesStrategy)
        }
        if let serviceRoleArn = serviceRoleArn {
            try encodeContainer.encode(serviceRoleArn, forKey: .serviceRoleArn)
        }
        if let triggerConfigurations = triggerConfigurations {
            var triggerConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .triggerConfigurations)
            for triggerconfiglist0 in triggerConfigurations {
                try triggerConfigurationsContainer.encode(triggerconfiglist0)
            }
        }
    }
}

public struct UpdateDeploymentGroupInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateDeploymentGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateDeploymentGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateDeploymentGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateDeploymentGroupInput>
    public typealias MOutput = OperationOutput<UpdateDeploymentGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateDeploymentGroupOutputError>
}

public struct UpdateDeploymentGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateDeploymentGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateDeploymentGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateDeploymentGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateDeploymentGroupInput>
    public typealias MOutput = OperationOutput<UpdateDeploymentGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateDeploymentGroupOutputError>
}

/// <p>Represents the input of an <code>UpdateDeploymentGroup</code> operation.</p>
public struct UpdateDeploymentGroupInput: Equatable {
    /// <p>Information to add or change about Amazon CloudWatch alarms when the deployment group
    ///             is updated.</p>
    public let alarmConfiguration: AlarmConfiguration?
    /// <p>The application name that corresponds to the deployment group to update.</p>
    public let applicationName: String?
    /// <p>Information for an automatic rollback configuration that is added or changed when a
    ///             deployment group is updated.</p>
    public let autoRollbackConfiguration: AutoRollbackConfiguration?
    /// <p>The replacement list of Auto Scaling groups to be included in the deployment group, if
    ///             you want to change them. To keep the Auto Scaling groups, enter their names. To remove
    ///             Auto Scaling groups, do not enter any Auto Scaling group names.</p>
    public let autoScalingGroups: [String]?
    /// <p>Information about blue/green deployment options for a deployment group.</p>
    public let blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration?
    /// <p>The current name of the deployment group.</p>
    public let currentDeploymentGroupName: String?
    /// <p>The replacement deployment configuration name to use, if you want to change it.</p>
    public let deploymentConfigName: String?
    /// <p>Information about the type of deployment, either in-place or blue/green, you want to
    ///             run and whether to route deployment traffic behind a load balancer.</p>
    public let deploymentStyle: DeploymentStyle?
    /// <p>The replacement set of Amazon EC2 tags on which to filter, if you want to change them.
    ///             To keep the existing tags, enter their names. To remove tags, do not enter any tag
    ///             names.</p>
    public let ec2TagFilters: [EC2TagFilter]?
    /// <p>Information about groups of tags applied to on-premises instances. The deployment
    ///             group includes only EC2 instances identified by all the tag groups.</p>
    public let ec2TagSet: EC2TagSet?
    /// <p> The target Amazon ECS services in the deployment group. This applies only to
    ///             deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service
    ///             is specified as an Amazon ECS cluster and service name pair using the format
    ///                 <code><clustername>:<servicename></code>. </p>
    public let ecsServices: [ECSService]?
    /// <p>Information about the load balancer used in a deployment.</p>
    public let loadBalancerInfo: LoadBalancerInfo?
    /// <p>The new name of the deployment group, if you want to change it.</p>
    public let newDeploymentGroupName: String?
    /// <p>The replacement set of on-premises instance tags on which to filter, if you want to
    ///             change them. To keep the existing tags, enter their names. To remove tags, do not enter
    ///             any tag names.</p>
    public let onPremisesInstanceTagFilters: [TagFilter]?
    /// <p>Information about an on-premises instance tag set. The deployment group includes only
    ///             on-premises instances identified by all the tag groups.</p>
    public let onPremisesTagSet: OnPremisesTagSet?
    /// <p>Indicates what happens when new EC2 instances are launched mid-deployment and do not
    ///             receive the deployed application revision.</p>
    ///         <p>If this option is set to <code>UPDATE</code> or is unspecified, CodeDeploy initiates
    ///             one or more 'auto-update outdated instances' deployments to apply the deployed
    ///             application revision to the new EC2 instances.</p>
    ///         <p>If this option is set to <code>IGNORE</code>, CodeDeploy does not initiate a
    ///             deployment to update the new EC2 instances. This may result in instances having
    ///             different revisions.</p>
    public let outdatedInstancesStrategy: OutdatedInstancesStrategy?
    /// <p>A replacement ARN for the service role, if you want to change it.</p>
    public let serviceRoleArn: String?
    /// <p>Information about triggers to change when the deployment group is updated. For
    ///             examples, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-notify-edit.html">Edit a Trigger in a
    ///                 CodeDeploy Deployment Group</a> in the <i>AWS CodeDeploy User
    ///                 Guide</i>.</p>
    public let triggerConfigurations: [TriggerConfig]?

    public init (
        alarmConfiguration: AlarmConfiguration? = nil,
        applicationName: String? = nil,
        autoRollbackConfiguration: AutoRollbackConfiguration? = nil,
        autoScalingGroups: [String]? = nil,
        blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil,
        currentDeploymentGroupName: String? = nil,
        deploymentConfigName: String? = nil,
        deploymentStyle: DeploymentStyle? = nil,
        ec2TagFilters: [EC2TagFilter]? = nil,
        ec2TagSet: EC2TagSet? = nil,
        ecsServices: [ECSService]? = nil,
        loadBalancerInfo: LoadBalancerInfo? = nil,
        newDeploymentGroupName: String? = nil,
        onPremisesInstanceTagFilters: [TagFilter]? = nil,
        onPremisesTagSet: OnPremisesTagSet? = nil,
        outdatedInstancesStrategy: OutdatedInstancesStrategy? = nil,
        serviceRoleArn: String? = nil,
        triggerConfigurations: [TriggerConfig]? = nil
    )
    {
        self.alarmConfiguration = alarmConfiguration
        self.applicationName = applicationName
        self.autoRollbackConfiguration = autoRollbackConfiguration
        self.autoScalingGroups = autoScalingGroups
        self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
        self.currentDeploymentGroupName = currentDeploymentGroupName
        self.deploymentConfigName = deploymentConfigName
        self.deploymentStyle = deploymentStyle
        self.ec2TagFilters = ec2TagFilters
        self.ec2TagSet = ec2TagSet
        self.ecsServices = ecsServices
        self.loadBalancerInfo = loadBalancerInfo
        self.newDeploymentGroupName = newDeploymentGroupName
        self.onPremisesInstanceTagFilters = onPremisesInstanceTagFilters
        self.onPremisesTagSet = onPremisesTagSet
        self.outdatedInstancesStrategy = outdatedInstancesStrategy
        self.serviceRoleArn = serviceRoleArn
        self.triggerConfigurations = triggerConfigurations
    }
}

struct UpdateDeploymentGroupInputBody: Equatable {
    public let applicationName: String?
    public let currentDeploymentGroupName: String?
    public let newDeploymentGroupName: String?
    public let deploymentConfigName: String?
    public let ec2TagFilters: [EC2TagFilter]?
    public let onPremisesInstanceTagFilters: [TagFilter]?
    public let autoScalingGroups: [String]?
    public let serviceRoleArn: String?
    public let triggerConfigurations: [TriggerConfig]?
    public let alarmConfiguration: AlarmConfiguration?
    public let autoRollbackConfiguration: AutoRollbackConfiguration?
    public let outdatedInstancesStrategy: OutdatedInstancesStrategy?
    public let deploymentStyle: DeploymentStyle?
    public let blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration?
    public let loadBalancerInfo: LoadBalancerInfo?
    public let ec2TagSet: EC2TagSet?
    public let ecsServices: [ECSService]?
    public let onPremisesTagSet: OnPremisesTagSet?
}

extension UpdateDeploymentGroupInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case alarmConfiguration
        case applicationName
        case autoRollbackConfiguration
        case autoScalingGroups
        case blueGreenDeploymentConfiguration
        case currentDeploymentGroupName
        case deploymentConfigName
        case deploymentStyle
        case ec2TagFilters
        case ec2TagSet
        case ecsServices
        case loadBalancerInfo
        case newDeploymentGroupName
        case onPremisesInstanceTagFilters
        case onPremisesTagSet
        case outdatedInstancesStrategy
        case serviceRoleArn
        case triggerConfigurations
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let currentDeploymentGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .currentDeploymentGroupName)
        currentDeploymentGroupName = currentDeploymentGroupNameDecoded
        let newDeploymentGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .newDeploymentGroupName)
        newDeploymentGroupName = newDeploymentGroupNameDecoded
        let deploymentConfigNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentConfigName)
        deploymentConfigName = deploymentConfigNameDecoded
        let ec2TagFiltersContainer = try containerValues.decodeIfPresent([EC2TagFilter?].self, forKey: .ec2TagFilters)
        var ec2TagFiltersDecoded0:[EC2TagFilter]? = nil
        if let ec2TagFiltersContainer = ec2TagFiltersContainer {
            ec2TagFiltersDecoded0 = [EC2TagFilter]()
            for structure0 in ec2TagFiltersContainer {
                if let structure0 = structure0 {
                    ec2TagFiltersDecoded0?.append(structure0)
                }
            }
        }
        ec2TagFilters = ec2TagFiltersDecoded0
        let onPremisesInstanceTagFiltersContainer = try containerValues.decodeIfPresent([TagFilter?].self, forKey: .onPremisesInstanceTagFilters)
        var onPremisesInstanceTagFiltersDecoded0:[TagFilter]? = nil
        if let onPremisesInstanceTagFiltersContainer = onPremisesInstanceTagFiltersContainer {
            onPremisesInstanceTagFiltersDecoded0 = [TagFilter]()
            for structure0 in onPremisesInstanceTagFiltersContainer {
                if let structure0 = structure0 {
                    onPremisesInstanceTagFiltersDecoded0?.append(structure0)
                }
            }
        }
        onPremisesInstanceTagFilters = onPremisesInstanceTagFiltersDecoded0
        let autoScalingGroupsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .autoScalingGroups)
        var autoScalingGroupsDecoded0:[String]? = nil
        if let autoScalingGroupsContainer = autoScalingGroupsContainer {
            autoScalingGroupsDecoded0 = [String]()
            for string0 in autoScalingGroupsContainer {
                if let string0 = string0 {
                    autoScalingGroupsDecoded0?.append(string0)
                }
            }
        }
        autoScalingGroups = autoScalingGroupsDecoded0
        let serviceRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRoleArn)
        serviceRoleArn = serviceRoleArnDecoded
        let triggerConfigurationsContainer = try containerValues.decodeIfPresent([TriggerConfig?].self, forKey: .triggerConfigurations)
        var triggerConfigurationsDecoded0:[TriggerConfig]? = nil
        if let triggerConfigurationsContainer = triggerConfigurationsContainer {
            triggerConfigurationsDecoded0 = [TriggerConfig]()
            for structure0 in triggerConfigurationsContainer {
                if let structure0 = structure0 {
                    triggerConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        triggerConfigurations = triggerConfigurationsDecoded0
        let alarmConfigurationDecoded = try containerValues.decodeIfPresent(AlarmConfiguration.self, forKey: .alarmConfiguration)
        alarmConfiguration = alarmConfigurationDecoded
        let autoRollbackConfigurationDecoded = try containerValues.decodeIfPresent(AutoRollbackConfiguration.self, forKey: .autoRollbackConfiguration)
        autoRollbackConfiguration = autoRollbackConfigurationDecoded
        let outdatedInstancesStrategyDecoded = try containerValues.decodeIfPresent(OutdatedInstancesStrategy.self, forKey: .outdatedInstancesStrategy)
        outdatedInstancesStrategy = outdatedInstancesStrategyDecoded
        let deploymentStyleDecoded = try containerValues.decodeIfPresent(DeploymentStyle.self, forKey: .deploymentStyle)
        deploymentStyle = deploymentStyleDecoded
        let blueGreenDeploymentConfigurationDecoded = try containerValues.decodeIfPresent(BlueGreenDeploymentConfiguration.self, forKey: .blueGreenDeploymentConfiguration)
        blueGreenDeploymentConfiguration = blueGreenDeploymentConfigurationDecoded
        let loadBalancerInfoDecoded = try containerValues.decodeIfPresent(LoadBalancerInfo.self, forKey: .loadBalancerInfo)
        loadBalancerInfo = loadBalancerInfoDecoded
        let ec2TagSetDecoded = try containerValues.decodeIfPresent(EC2TagSet.self, forKey: .ec2TagSet)
        ec2TagSet = ec2TagSetDecoded
        let ecsServicesContainer = try containerValues.decodeIfPresent([ECSService?].self, forKey: .ecsServices)
        var ecsServicesDecoded0:[ECSService]? = nil
        if let ecsServicesContainer = ecsServicesContainer {
            ecsServicesDecoded0 = [ECSService]()
            for structure0 in ecsServicesContainer {
                if let structure0 = structure0 {
                    ecsServicesDecoded0?.append(structure0)
                }
            }
        }
        ecsServices = ecsServicesDecoded0
        let onPremisesTagSetDecoded = try containerValues.decodeIfPresent(OnPremisesTagSet.self, forKey: .onPremisesTagSet)
        onPremisesTagSet = onPremisesTagSetDecoded
    }
}

extension UpdateDeploymentGroupOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDeploymentGroupOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AlarmsLimitExceededException" : self = .alarmsLimitExceededException(try AlarmsLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentConfigDoesNotExistException" : self = .deploymentConfigDoesNotExistException(try DeploymentConfigDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupAlreadyExistsException" : self = .deploymentGroupAlreadyExistsException(try DeploymentGroupAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupDoesNotExistException" : self = .deploymentGroupDoesNotExistException(try DeploymentGroupDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupNameRequiredException" : self = .deploymentGroupNameRequiredException(try DeploymentGroupNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ECSServiceMappingLimitExceededException" : self = .eCSServiceMappingLimitExceededException(try ECSServiceMappingLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAlarmConfigException" : self = .invalidAlarmConfigException(try InvalidAlarmConfigException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAutoRollbackConfigException" : self = .invalidAutoRollbackConfigException(try InvalidAutoRollbackConfigException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAutoScalingGroupException" : self = .invalidAutoScalingGroupException(try InvalidAutoScalingGroupException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidBlueGreenDeploymentConfigurationException" : self = .invalidBlueGreenDeploymentConfigurationException(try InvalidBlueGreenDeploymentConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentConfigNameException" : self = .invalidDeploymentConfigNameException(try InvalidDeploymentConfigNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentGroupNameException" : self = .invalidDeploymentGroupNameException(try InvalidDeploymentGroupNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentStyleException" : self = .invalidDeploymentStyleException(try InvalidDeploymentStyleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEC2TagCombinationException" : self = .invalidEC2TagCombinationException(try InvalidEC2TagCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEC2TagException" : self = .invalidEC2TagException(try InvalidEC2TagException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidECSServiceException" : self = .invalidECSServiceException(try InvalidECSServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLoadBalancerInfoException" : self = .invalidLoadBalancerInfoException(try InvalidLoadBalancerInfoException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidOnPremisesTagCombinationException" : self = .invalidOnPremisesTagCombinationException(try InvalidOnPremisesTagCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRoleException" : self = .invalidRoleException(try InvalidRoleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagException" : self = .invalidTagException(try InvalidTagException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTargetGroupPairException" : self = .invalidTargetGroupPairException(try InvalidTargetGroupPairException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTrafficRoutingConfigurationException" : self = .invalidTrafficRoutingConfigurationException(try InvalidTrafficRoutingConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTriggerConfigException" : self = .invalidTriggerConfigException(try InvalidTriggerConfigException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LifecycleHookLimitExceededException" : self = .lifecycleHookLimitExceededException(try LifecycleHookLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagSetListLimitExceededException" : self = .tagSetListLimitExceededException(try TagSetListLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TriggerTargetsLimitExceededException" : self = .triggerTargetsLimitExceededException(try TriggerTargetsLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateDeploymentGroupOutputError: Equatable {
    case alarmsLimitExceededException(AlarmsLimitExceededException)
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case deploymentConfigDoesNotExistException(DeploymentConfigDoesNotExistException)
    case deploymentGroupAlreadyExistsException(DeploymentGroupAlreadyExistsException)
    case deploymentGroupDoesNotExistException(DeploymentGroupDoesNotExistException)
    case deploymentGroupNameRequiredException(DeploymentGroupNameRequiredException)
    case eCSServiceMappingLimitExceededException(ECSServiceMappingLimitExceededException)
    case invalidAlarmConfigException(InvalidAlarmConfigException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidAutoRollbackConfigException(InvalidAutoRollbackConfigException)
    case invalidAutoScalingGroupException(InvalidAutoScalingGroupException)
    case invalidBlueGreenDeploymentConfigurationException(InvalidBlueGreenDeploymentConfigurationException)
    case invalidDeploymentConfigNameException(InvalidDeploymentConfigNameException)
    case invalidDeploymentGroupNameException(InvalidDeploymentGroupNameException)
    case invalidDeploymentStyleException(InvalidDeploymentStyleException)
    case invalidEC2TagCombinationException(InvalidEC2TagCombinationException)
    case invalidEC2TagException(InvalidEC2TagException)
    case invalidECSServiceException(InvalidECSServiceException)
    case invalidInputException(InvalidInputException)
    case invalidLoadBalancerInfoException(InvalidLoadBalancerInfoException)
    case invalidOnPremisesTagCombinationException(InvalidOnPremisesTagCombinationException)
    case invalidRoleException(InvalidRoleException)
    case invalidTagException(InvalidTagException)
    case invalidTargetGroupPairException(InvalidTargetGroupPairException)
    case invalidTrafficRoutingConfigurationException(InvalidTrafficRoutingConfigurationException)
    case invalidTriggerConfigException(InvalidTriggerConfigException)
    case lifecycleHookLimitExceededException(LifecycleHookLimitExceededException)
    case tagSetListLimitExceededException(TagSetListLimitExceededException)
    case throttlingException(ThrottlingException)
    case triggerTargetsLimitExceededException(TriggerTargetsLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDeploymentGroupOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateDeploymentGroupOutputResponse(hooksNotCleanedUp: \(String(describing: hooksNotCleanedUp)))"}
}

extension UpdateDeploymentGroupOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: UpdateDeploymentGroupOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.hooksNotCleanedUp = output.hooksNotCleanedUp
        } else {
            self.hooksNotCleanedUp = nil
        }
    }
}

/// <p>Represents the output of an <code>UpdateDeploymentGroup</code> operation.</p>
public struct UpdateDeploymentGroupOutputResponse: Equatable {
    /// <p>If the output contains no data, and the corresponding deployment group contained at
    ///             least one Auto Scaling group, AWS CodeDeploy successfully removed all corresponding Auto
    ///             Scaling lifecycle event hooks from the AWS account. If the output contains data, AWS
    ///             CodeDeploy could not remove some Auto Scaling lifecycle event hooks from the AWS
    ///             account.</p>
    public let hooksNotCleanedUp: [AutoScalingGroup]?

    public init (
        hooksNotCleanedUp: [AutoScalingGroup]? = nil
    )
    {
        self.hooksNotCleanedUp = hooksNotCleanedUp
    }
}

struct UpdateDeploymentGroupOutputResponseBody: Equatable {
    public let hooksNotCleanedUp: [AutoScalingGroup]?
}

extension UpdateDeploymentGroupOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case hooksNotCleanedUp
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hooksNotCleanedUpContainer = try containerValues.decodeIfPresent([AutoScalingGroup?].self, forKey: .hooksNotCleanedUp)
        var hooksNotCleanedUpDecoded0:[AutoScalingGroup]? = nil
        if let hooksNotCleanedUpContainer = hooksNotCleanedUpContainer {
            hooksNotCleanedUpDecoded0 = [AutoScalingGroup]()
            for structure0 in hooksNotCleanedUpContainer {
                if let structure0 = structure0 {
                    hooksNotCleanedUpDecoded0?.append(structure0)
                }
            }
        }
        hooksNotCleanedUp = hooksNotCleanedUpDecoded0
    }
}
