// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LoadBalancerInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case elbInfoList
        case targetGroupInfoList
        case targetGroupPairInfoList
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let elbInfoList = elbInfoList {
            var elbInfoListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .elbInfoList)
            for elbinfolist0 in elbInfoList {
                try elbInfoListContainer.encode(elbinfolist0)
            }
        }
        if let targetGroupInfoList = targetGroupInfoList {
            var targetGroupInfoListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetGroupInfoList)
            for targetgroupinfolist0 in targetGroupInfoList {
                try targetGroupInfoListContainer.encode(targetgroupinfolist0)
            }
        }
        if let targetGroupPairInfoList = targetGroupPairInfoList {
            var targetGroupPairInfoListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetGroupPairInfoList)
            for targetgrouppairinfolist0 in targetGroupPairInfoList {
                try targetGroupPairInfoListContainer.encode(targetgrouppairinfolist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let elbInfoListContainer = try containerValues.decodeIfPresent([ELBInfo].self, forKey: .elbInfoList)
        var elbInfoListDecoded0:[ELBInfo]? = nil
        if let elbInfoListContainer = elbInfoListContainer {
            elbInfoListDecoded0 = [ELBInfo]()
            for structure0 in elbInfoListContainer {
                elbInfoListDecoded0?.append(structure0)
            }
        }
        elbInfoList = elbInfoListDecoded0
        let targetGroupInfoListContainer = try containerValues.decodeIfPresent([TargetGroupInfo].self, forKey: .targetGroupInfoList)
        var targetGroupInfoListDecoded0:[TargetGroupInfo]? = nil
        if let targetGroupInfoListContainer = targetGroupInfoListContainer {
            targetGroupInfoListDecoded0 = [TargetGroupInfo]()
            for structure0 in targetGroupInfoListContainer {
                targetGroupInfoListDecoded0?.append(structure0)
            }
        }
        targetGroupInfoList = targetGroupInfoListDecoded0
        let targetGroupPairInfoListContainer = try containerValues.decodeIfPresent([TargetGroupPairInfo].self, forKey: .targetGroupPairInfoList)
        var targetGroupPairInfoListDecoded0:[TargetGroupPairInfo]? = nil
        if let targetGroupPairInfoListContainer = targetGroupPairInfoListContainer {
            targetGroupPairInfoListDecoded0 = [TargetGroupPairInfo]()
            for structure0 in targetGroupPairInfoListContainer {
                targetGroupPairInfoListDecoded0?.append(structure0)
            }
        }
        targetGroupPairInfoList = targetGroupPairInfoListDecoded0
    }
}
