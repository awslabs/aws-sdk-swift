// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDeploymentsInputBody: Equatable {
    public let applicationName: String?
    public let deploymentGroupName: String?
    public let externalId: String?
    public let includeOnlyStatuses: [DeploymentStatus]?
    public let createTimeRange: TimeRange?
    public let nextToken: String?
}

extension ListDeploymentsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationName
        case createTimeRange
        case deploymentGroupName
        case externalId
        case includeOnlyStatuses
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let deploymentGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentGroupName)
        deploymentGroupName = deploymentGroupNameDecoded
        let externalIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .externalId)
        externalId = externalIdDecoded
        let includeOnlyStatusesContainer = try containerValues.decodeIfPresent([DeploymentStatus].self, forKey: .includeOnlyStatuses)
        var includeOnlyStatusesDecoded0:[DeploymentStatus]? = nil
        if let includeOnlyStatusesContainer = includeOnlyStatusesContainer {
            includeOnlyStatusesDecoded0 = [DeploymentStatus]()
            for string0 in includeOnlyStatusesContainer {
                includeOnlyStatusesDecoded0?.append(string0)
            }
        }
        includeOnlyStatuses = includeOnlyStatusesDecoded0
        let createTimeRangeDecoded = try containerValues.decodeIfPresent(TimeRange.self, forKey: .createTimeRange)
        createTimeRange = createTimeRangeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
