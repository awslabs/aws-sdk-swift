// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TriggerConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case triggerEvents
        case triggerName
        case triggerTargetArn
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let triggerEvents = triggerEvents {
            var triggerEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .triggerEvents)
            for triggereventtypelist0 in triggerEvents {
                try triggerEventsContainer.encode(triggereventtypelist0.rawValue)
            }
        }
        if let triggerName = triggerName {
            try encodeContainer.encode(triggerName, forKey: .triggerName)
        }
        if let triggerTargetArn = triggerTargetArn {
            try encodeContainer.encode(triggerTargetArn, forKey: .triggerTargetArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let triggerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .triggerName)
        triggerName = triggerNameDecoded
        let triggerTargetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .triggerTargetArn)
        triggerTargetArn = triggerTargetArnDecoded
        let triggerEventsContainer = try containerValues.decodeIfPresent([TriggerEventType].self, forKey: .triggerEvents)
        var triggerEventsDecoded0:[TriggerEventType]? = nil
        if let triggerEventsContainer = triggerEventsContainer {
            triggerEventsDecoded0 = [TriggerEventType]()
            for string0 in triggerEventsContainer {
                triggerEventsDecoded0?.append(string0)
            }
        }
        triggerEvents = triggerEventsDecoded0
    }
}
