// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Information about a deployment lifecycle event.</p>
public struct LifecycleEvent: Equatable {
    /// <p>Diagnostic information about the deployment lifecycle event.</p>
    public let diagnostics: Diagnostics?
    /// <p>A timestamp that indicates when the deployment lifecycle event ended.</p>
    public let endTime: Date?
    /// <p>The deployment lifecycle event name, such as <code>ApplicationStop</code>,
    ///                 <code>BeforeInstall</code>, <code>AfterInstall</code>,
    ///             <code>ApplicationStart</code>, or <code>ValidateService</code>.</p>
    public let lifecycleEventName: String?
    /// <p>A timestamp that indicates when the deployment lifecycle event started.</p>
    public let startTime: Date?
    /// <p>The deployment lifecycle event status:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Pending: The deployment lifecycle event is pending.</p>
    ///             </li>
    ///             <li>
    ///                 <p>InProgress: The deployment lifecycle event is in progress.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Succeeded: The deployment lifecycle event ran successfully.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Failed: The deployment lifecycle event has failed.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Skipped: The deployment lifecycle event has been skipped.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Unknown: The deployment lifecycle event is unknown.</p>
    ///             </li>
    ///          </ul>
    public let status: LifecycleEventStatus?

    public init (
        diagnostics: Diagnostics? = nil,
        endTime: Date? = nil,
        lifecycleEventName: String? = nil,
        startTime: Date? = nil,
        status: LifecycleEventStatus? = nil
    )
    {
        self.diagnostics = diagnostics
        self.endTime = endTime
        self.lifecycleEventName = lifecycleEventName
        self.startTime = startTime
        self.status = status
    }
}
