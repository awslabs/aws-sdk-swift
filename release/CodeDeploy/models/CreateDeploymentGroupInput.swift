// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents the input of a <code>CreateDeploymentGroup</code> operation.</p>
public struct CreateDeploymentGroupInput: Equatable {
    /// <p>Information to add about Amazon CloudWatch alarms when the deployment group is
    ///             created.</p>
    public let alarmConfiguration: AlarmConfiguration?
    /// <p>The name of an AWS CodeDeploy application associated with the IAM user or AWS
    ///             account.</p>
    public let applicationName: String?
    /// <p>Configuration information for an automatic rollback that is added when a deployment
    ///             group is created.</p>
    public let autoRollbackConfiguration: AutoRollbackConfiguration?
    /// <p>A list of associated Amazon EC2 Auto Scaling groups.</p>
    public let autoScalingGroups: [String]?
    /// <p>Information about blue/green deployment options for a deployment group.</p>
    public let blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration?
    /// <p>If specified, the deployment configuration name can be either one of the predefined
    ///             configurations provided with AWS CodeDeploy or a custom deployment configuration that
    ///             you create by calling the create deployment configuration operation.</p>
    ///         <p>
    ///             <code>CodeDeployDefault.OneAtATime</code> is the default deployment configuration. It
    ///             is used if a configuration isn't specified for the deployment or deployment
    ///             group.</p>
    ///         <p>For more information about the predefined deployment configurations in AWS CodeDeploy,
    ///             see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations.html">Working with
    ///                 Deployment Configurations in CodeDeploy</a> in the <i>AWS CodeDeploy User
    ///                 Guide</i>.</p>
    public let deploymentConfigName: String?
    /// <p>The name of a new deployment group for the specified application.</p>
    public let deploymentGroupName: String?
    /// <p>Information about the type of deployment, in-place or blue/green, that you want to run
    ///             and whether to route deployment traffic behind a load balancer.</p>
    public let deploymentStyle: DeploymentStyle?
    /// <p>The Amazon EC2 tags on which to filter. The deployment group includes EC2 instances
    ///             with any of the specified tags. Cannot be used in the same call as ec2TagSet.</p>
    public let ec2TagFilters: [EC2TagFilter]?
    /// <p>Information about groups of tags applied to EC2 instances. The deployment group
    ///             includes only EC2 instances identified by all the tag groups. Cannot be used in the same
    ///             call as <code>ec2TagFilters</code>.</p>
    public let ec2TagSet: EC2TagSet?
    /// <p> The target Amazon ECS services in the deployment group. This applies only to
    ///             deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service
    ///             is specified as an Amazon ECS cluster and service name pair using the format
    ///                 <code><clustername>:<servicename></code>. </p>
    public let ecsServices: [ECSService]?
    /// <p>Information about the load balancer used in a deployment.</p>
    public let loadBalancerInfo: LoadBalancerInfo?
    /// <p>The on-premises instance tags on which to filter. The deployment group includes
    ///             on-premises instances with any of the specified tags. Cannot be used in the same call as
    ///                 <code>OnPremisesTagSet</code>.</p>
    public let onPremisesInstanceTagFilters: [TagFilter]?
    /// <p>Information about groups of tags applied to on-premises instances. The deployment
    ///             group includes only on-premises instances identified by all of the tag groups. Cannot be
    ///             used in the same call as <code>onPremisesInstanceTagFilters</code>.</p>
    public let onPremisesTagSet: OnPremisesTagSet?
    /// <p>Indicates what happens when new EC2 instances are launched mid-deployment and do not
    ///             receive the deployed application revision.</p>
    ///         <p>If this option is set to <code>UPDATE</code> or is unspecified, CodeDeploy initiates
    ///             one or more 'auto-update outdated instances' deployments to apply the deployed
    ///             application revision to the new EC2 instances.</p>
    ///         <p>If this option is set to <code>IGNORE</code>, CodeDeploy does not initiate a
    ///             deployment to update the new EC2 instances. This may result in instances having
    ///             different revisions.</p>
    public let outdatedInstancesStrategy: OutdatedInstancesStrategy?
    /// <p>A service role Amazon Resource Name (ARN) that allows AWS CodeDeploy to act on the
    ///             user's behalf when interacting with AWS services.</p>
    public let serviceRoleArn: String?
    /// <p> The metadata that you apply to CodeDeploy deployment groups to help you organize and
    ///             categorize them. Each tag consists of a key and an optional value, both of which you
    ///             define. </p>
    public let tags: [Tag]?
    /// <p>Information about triggers to create when the deployment group is created. For
    ///             examples, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-notify-sns.html">Create a Trigger for an
    ///                 AWS CodeDeploy Event</a> in the <i>AWS CodeDeploy User
    ///             Guide</i>.</p>
    public let triggerConfigurations: [TriggerConfig]?

    public init (
        alarmConfiguration: AlarmConfiguration? = nil,
        applicationName: String? = nil,
        autoRollbackConfiguration: AutoRollbackConfiguration? = nil,
        autoScalingGroups: [String]? = nil,
        blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil,
        deploymentConfigName: String? = nil,
        deploymentGroupName: String? = nil,
        deploymentStyle: DeploymentStyle? = nil,
        ec2TagFilters: [EC2TagFilter]? = nil,
        ec2TagSet: EC2TagSet? = nil,
        ecsServices: [ECSService]? = nil,
        loadBalancerInfo: LoadBalancerInfo? = nil,
        onPremisesInstanceTagFilters: [TagFilter]? = nil,
        onPremisesTagSet: OnPremisesTagSet? = nil,
        outdatedInstancesStrategy: OutdatedInstancesStrategy? = nil,
        serviceRoleArn: String? = nil,
        tags: [Tag]? = nil,
        triggerConfigurations: [TriggerConfig]? = nil
    )
    {
        self.alarmConfiguration = alarmConfiguration
        self.applicationName = applicationName
        self.autoRollbackConfiguration = autoRollbackConfiguration
        self.autoScalingGroups = autoScalingGroups
        self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
        self.deploymentConfigName = deploymentConfigName
        self.deploymentGroupName = deploymentGroupName
        self.deploymentStyle = deploymentStyle
        self.ec2TagFilters = ec2TagFilters
        self.ec2TagSet = ec2TagSet
        self.ecsServices = ecsServices
        self.loadBalancerInfo = loadBalancerInfo
        self.onPremisesInstanceTagFilters = onPremisesInstanceTagFilters
        self.onPremisesTagSet = onPremisesTagSet
        self.outdatedInstancesStrategy = outdatedInstancesStrategy
        self.serviceRoleArn = serviceRoleArn
        self.tags = tags
        self.triggerConfigurations = triggerConfigurations
    }
}
