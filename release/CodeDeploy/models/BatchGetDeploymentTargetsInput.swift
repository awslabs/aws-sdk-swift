// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct BatchGetDeploymentTargetsInput: Equatable {
    /// <p> The unique ID of a deployment. </p>
    public let deploymentId: String?
    /// <p> The unique IDs of the deployment targets. The compute platform of the deployment
    ///             determines the type of the targets and their formats. The maximum number of deployment
    ///             target IDs you can specify is 25.</p>
    ///         <ul>
    ///             <li>
    ///                 <p> For deployments that use the EC2/On-premises compute platform, the target IDs
    ///                     are EC2 or on-premises instances IDs, and their target type is
    ///                         <code>instanceTarget</code>. </p>
    ///             </li>
    ///             <li>
    ///                 <p> For deployments that use the AWS Lambda compute platform, the target IDs are
    ///                     the names of Lambda functions, and their target type is
    ///                         <code>instanceTarget</code>. </p>
    ///             </li>
    ///             <li>
    ///                 <p> For deployments that use the Amazon ECS compute platform, the target IDs are
    ///                     pairs of Amazon ECS clusters and services specified using the format
    ///                         <code><clustername>:<servicename></code>. Their target type is
    ///                         <code>ecsTarget</code>. </p>
    ///             </li>
    ///             <li>
    ///                 <p> For deployments that are deployed with AWS CloudFormation, the target IDs are
    ///                     CloudFormation stack IDs. Their target type is
    ///                     <code>cloudFormationTarget</code>. </p>
    ///             </li>
    ///          </ul>
    public let targetIds: [String]?

    public init (
        deploymentId: String? = nil,
        targetIds: [String]? = nil
    )
    {
        self.deploymentId = deploymentId
        self.targetIds = targetIds
    }
}
