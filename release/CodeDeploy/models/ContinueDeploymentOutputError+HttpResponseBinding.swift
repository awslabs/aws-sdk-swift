// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime

extension ContinueDeploymentOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ContinueDeploymentOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "DeploymentAlreadyCompletedException" : self = .deploymentAlreadyCompletedException(try DeploymentAlreadyCompletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentDoesNotExistException" : self = .deploymentDoesNotExistException(try DeploymentDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIsNotInReadyStateException" : self = .deploymentIsNotInReadyStateException(try DeploymentIsNotInReadyStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentStatusException" : self = .invalidDeploymentStatusException(try InvalidDeploymentStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentWaitTypeException" : self = .invalidDeploymentWaitTypeException(try InvalidDeploymentWaitTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedActionForDeploymentTypeException" : self = .unsupportedActionForDeploymentTypeException(try UnsupportedActionForDeploymentTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}
