// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents the input of a <code>CreateDeployment</code> operation.</p>
public struct CreateDeploymentInput: Equatable {
    /// <p>The name of an AWS CodeDeploy application associated with the IAM user or AWS
    ///             account.</p>
    public let applicationName: String?
    /// <p>Configuration information for an automatic rollback that is added when a deployment is
    ///             created.</p>
    public let autoRollbackConfiguration: AutoRollbackConfiguration?
    /// <p>The name of a deployment configuration associated with the IAM user or AWS
    ///             account.</p>
    ///         <p>If not specified, the value configured in the deployment group is used as the default.
    ///             If the deployment group does not have a deployment configuration associated with it,
    ///                 <code>CodeDeployDefault</code>.<code>OneAtATime</code> is used by default.</p>
    public let deploymentConfigName: String?
    /// <p>The name of the deployment group.</p>
    public let deploymentGroupName: String?
    /// <p>A comment about the deployment.</p>
    public let description: String?
    /// <p>Information about how AWS CodeDeploy handles files that already exist in a deployment
    ///             target location but weren't part of the previous successful deployment.</p>
    ///         <p>The <code>fileExistsBehavior</code> parameter takes any of the following
    ///             values:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>DISALLOW: The deployment fails. This is also the default behavior if no option
    ///                     is specified.</p>
    ///             </li>
    ///             <li>
    ///                 <p>OVERWRITE: The version of the file from the application revision currently
    ///                     being deployed replaces the version already on the instance.</p>
    ///             </li>
    ///             <li>
    ///                 <p>RETAIN: The version of the file already on the instance is kept and used as
    ///                     part of the new deployment.</p>
    ///             </li>
    ///          </ul>
    public let fileExistsBehavior: FileExistsBehavior?
    /// <p> If true, then if an <code>ApplicationStop</code>, <code>BeforeBlockTraffic</code>, or
    ///                 <code>AfterBlockTraffic</code> deployment lifecycle event to an instance fails, then
    ///             the deployment continues to the next deployment lifecycle event. For example, if
    ///                 <code>ApplicationStop</code> fails, the deployment continues with
    ///                 <code>DownloadBundle</code>. If <code>BeforeBlockTraffic</code> fails, the
    ///             deployment continues with <code>BlockTraffic</code>. If <code>AfterBlockTraffic</code>
    ///             fails, the deployment continues with <code>ApplicationStop</code>. </p>
    ///
    ///         <p> If false or not specified, then if a lifecycle event fails during a deployment to an
    ///             instance, that deployment fails. If deployment to that instance is part of an overall
    ///             deployment and the number of healthy hosts is not less than the minimum number of
    ///             healthy hosts, then a deployment to the next instance is attempted. </p>
    ///
    ///         <p> During a deployment, the AWS CodeDeploy agent runs the scripts specified for
    ///                 <code>ApplicationStop</code>, <code>BeforeBlockTraffic</code>, and
    ///                 <code>AfterBlockTraffic</code> in the AppSpec file from the previous successful
    ///             deployment. (All other scripts are run from the AppSpec file in the current deployment.)
    ///             If one of these scripts contains an error and does not run successfully, the deployment
    ///             can fail. </p>
    ///
    ///         <p> If the cause of the failure is a script from the last successful deployment that will
    ///             never run successfully, create a new deployment and use
    ///                 <code>ignoreApplicationStopFailures</code> to specify that the
    ///                 <code>ApplicationStop</code>, <code>BeforeBlockTraffic</code>, and
    ///                 <code>AfterBlockTraffic</code> failures should be ignored. </p>
    public let ignoreApplicationStopFailures: Bool
    /// <p> The type and location of the revision to deploy. </p>
    public let revision: RevisionLocation?
    /// <p> Information about the instances that belong to the replacement environment in a
    ///             blue/green deployment. </p>
    public let targetInstances: TargetInstances?
    /// <p> Indicates whether to deploy to all instances or only to instances that are not
    ///             running the latest application revision. </p>
    public let updateOutdatedInstancesOnly: Bool

    public init (
        applicationName: String? = nil,
        autoRollbackConfiguration: AutoRollbackConfiguration? = nil,
        deploymentConfigName: String? = nil,
        deploymentGroupName: String? = nil,
        description: String? = nil,
        fileExistsBehavior: FileExistsBehavior? = nil,
        ignoreApplicationStopFailures: Bool = false,
        revision: RevisionLocation? = nil,
        targetInstances: TargetInstances? = nil,
        updateOutdatedInstancesOnly: Bool = false
    )
    {
        self.applicationName = applicationName
        self.autoRollbackConfiguration = autoRollbackConfiguration
        self.deploymentConfigName = deploymentConfigName
        self.deploymentGroupName = deploymentGroupName
        self.description = description
        self.fileExistsBehavior = fileExistsBehavior
        self.ignoreApplicationStopFailures = ignoreApplicationStopFailures
        self.revision = revision
        self.targetInstances = targetInstances
        self.updateOutdatedInstancesOnly = updateOutdatedInstancesOnly
    }
}
