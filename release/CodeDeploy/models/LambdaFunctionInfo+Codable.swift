// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LambdaFunctionInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case currentVersion
        case functionAlias
        case functionName
        case targetVersion
        case targetVersionWeight
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currentVersion = currentVersion {
            try encodeContainer.encode(currentVersion, forKey: .currentVersion)
        }
        if let functionAlias = functionAlias {
            try encodeContainer.encode(functionAlias, forKey: .functionAlias)
        }
        if let functionName = functionName {
            try encodeContainer.encode(functionName, forKey: .functionName)
        }
        if let targetVersion = targetVersion {
            try encodeContainer.encode(targetVersion, forKey: .targetVersion)
        }
        if targetVersionWeight != 0.0 {
            try encodeContainer.encode(targetVersionWeight, forKey: .targetVersionWeight)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let functionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .functionName)
        functionName = functionNameDecoded
        let functionAliasDecoded = try containerValues.decodeIfPresent(String.self, forKey: .functionAlias)
        functionAlias = functionAliasDecoded
        let currentVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .currentVersion)
        currentVersion = currentVersionDecoded
        let targetVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetVersion)
        targetVersion = targetVersionDecoded
        let targetVersionWeightDecoded = try containerValues.decode(Double.self, forKey: .targetVersionWeight)
        targetVersionWeight = targetVersionWeightDecoded
    }
}
