// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateDeploymentGroupInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alarmConfiguration
        case applicationName
        case autoRollbackConfiguration
        case autoScalingGroups
        case blueGreenDeploymentConfiguration
        case currentDeploymentGroupName
        case deploymentConfigName
        case deploymentStyle
        case ec2TagFilters
        case ec2TagSet
        case ecsServices
        case loadBalancerInfo
        case newDeploymentGroupName
        case onPremisesInstanceTagFilters
        case onPremisesTagSet
        case outdatedInstancesStrategy
        case serviceRoleArn
        case triggerConfigurations
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmConfiguration = alarmConfiguration {
            try encodeContainer.encode(alarmConfiguration, forKey: .alarmConfiguration)
        }
        if let applicationName = applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let autoRollbackConfiguration = autoRollbackConfiguration {
            try encodeContainer.encode(autoRollbackConfiguration, forKey: .autoRollbackConfiguration)
        }
        if let autoScalingGroups = autoScalingGroups {
            var autoScalingGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .autoScalingGroups)
            for autoscalinggroupnamelist0 in autoScalingGroups {
                try autoScalingGroupsContainer.encode(autoscalinggroupnamelist0)
            }
        }
        if let blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration {
            try encodeContainer.encode(blueGreenDeploymentConfiguration, forKey: .blueGreenDeploymentConfiguration)
        }
        if let currentDeploymentGroupName = currentDeploymentGroupName {
            try encodeContainer.encode(currentDeploymentGroupName, forKey: .currentDeploymentGroupName)
        }
        if let deploymentConfigName = deploymentConfigName {
            try encodeContainer.encode(deploymentConfigName, forKey: .deploymentConfigName)
        }
        if let deploymentStyle = deploymentStyle {
            try encodeContainer.encode(deploymentStyle, forKey: .deploymentStyle)
        }
        if let ec2TagFilters = ec2TagFilters {
            var ec2TagFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2TagFilters)
            for ec2tagfilterlist0 in ec2TagFilters {
                try ec2TagFiltersContainer.encode(ec2tagfilterlist0)
            }
        }
        if let ec2TagSet = ec2TagSet {
            try encodeContainer.encode(ec2TagSet, forKey: .ec2TagSet)
        }
        if let ecsServices = ecsServices {
            var ecsServicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ecsServices)
            for ecsservicelist0 in ecsServices {
                try ecsServicesContainer.encode(ecsservicelist0)
            }
        }
        if let loadBalancerInfo = loadBalancerInfo {
            try encodeContainer.encode(loadBalancerInfo, forKey: .loadBalancerInfo)
        }
        if let newDeploymentGroupName = newDeploymentGroupName {
            try encodeContainer.encode(newDeploymentGroupName, forKey: .newDeploymentGroupName)
        }
        if let onPremisesInstanceTagFilters = onPremisesInstanceTagFilters {
            var onPremisesInstanceTagFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .onPremisesInstanceTagFilters)
            for tagfilterlist0 in onPremisesInstanceTagFilters {
                try onPremisesInstanceTagFiltersContainer.encode(tagfilterlist0)
            }
        }
        if let onPremisesTagSet = onPremisesTagSet {
            try encodeContainer.encode(onPremisesTagSet, forKey: .onPremisesTagSet)
        }
        if let outdatedInstancesStrategy = outdatedInstancesStrategy {
            try encodeContainer.encode(outdatedInstancesStrategy.rawValue, forKey: .outdatedInstancesStrategy)
        }
        if let serviceRoleArn = serviceRoleArn {
            try encodeContainer.encode(serviceRoleArn, forKey: .serviceRoleArn)
        }
        if let triggerConfigurations = triggerConfigurations {
            var triggerConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .triggerConfigurations)
            for triggerconfiglist0 in triggerConfigurations {
                try triggerConfigurationsContainer.encode(triggerconfiglist0)
            }
        }
    }
}
