// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudFormationTarget: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deploymentId
        case lastUpdatedAt
        case lifecycleEvents
        case resourceType
        case status
        case targetId
        case targetVersionWeight
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let lifecycleEvents = lifecycleEvents {
            var lifecycleEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lifecycleEvents)
            for lifecycleeventlist0 in lifecycleEvents {
                try lifecycleEventsContainer.encode(lifecycleeventlist0)
            }
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetId = targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
        if targetVersionWeight != 0.0 {
            try encodeContainer.encode(targetVersionWeight, forKey: .targetVersionWeight)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetId)
        targetId = targetIdDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let lifecycleEventsContainer = try containerValues.decodeIfPresent([LifecycleEvent].self, forKey: .lifecycleEvents)
        var lifecycleEventsDecoded0:[LifecycleEvent]? = nil
        if let lifecycleEventsContainer = lifecycleEventsContainer {
            lifecycleEventsDecoded0 = [LifecycleEvent]()
            for structure0 in lifecycleEventsContainer {
                lifecycleEventsDecoded0?.append(structure0)
            }
        }
        lifecycleEvents = lifecycleEventsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(TargetStatus.self, forKey: .status)
        status = statusDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let targetVersionWeightDecoded = try containerValues.decode(Double.self, forKey: .targetVersionWeight)
        targetVersionWeight = targetVersionWeightDecoded
    }
}
