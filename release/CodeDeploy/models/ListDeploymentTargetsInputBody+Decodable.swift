// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDeploymentTargetsInputBody: Equatable {
    public let deploymentId: String?
    public let nextToken: String?
    public let targetFilters: [String:[String]?]?
}

extension ListDeploymentTargetsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deploymentId
        case nextToken
        case targetFilters
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let targetFiltersContainer = try containerValues.decodeIfPresent([String:[String]?].self, forKey: .targetFilters)
        var targetFiltersDecoded0: [String:[String]?]? = nil
        if let targetFiltersContainer = targetFiltersContainer {
            targetFiltersDecoded0 = [String:[String]?]()
            for (key0, filtervaluelist0) in targetFiltersContainer {
                var filtervaluelist0Decoded0 = [String]()
                if let filtervaluelist0 = filtervaluelist0 {
                    for string1 in filtervaluelist0 {
                        filtervaluelist0Decoded0.append(string1)
                    }
                }
                targetFiltersDecoded0?[key0] = filtervaluelist0Decoded0
            }
        }
        targetFilters = targetFiltersDecoded0
    }
}
