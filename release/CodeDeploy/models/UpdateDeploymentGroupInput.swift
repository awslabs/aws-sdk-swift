// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents the input of an <code>UpdateDeploymentGroup</code> operation.</p>
public struct UpdateDeploymentGroupInput: Equatable {
    /// <p>Information to add or change about Amazon CloudWatch alarms when the deployment group
    ///             is updated.</p>
    public let alarmConfiguration: AlarmConfiguration?
    /// <p>The application name that corresponds to the deployment group to update.</p>
    public let applicationName: String?
    /// <p>Information for an automatic rollback configuration that is added or changed when a
    ///             deployment group is updated.</p>
    public let autoRollbackConfiguration: AutoRollbackConfiguration?
    /// <p>The replacement list of Auto Scaling groups to be included in the deployment group, if
    ///             you want to change them. To keep the Auto Scaling groups, enter their names. To remove
    ///             Auto Scaling groups, do not enter any Auto Scaling group names.</p>
    public let autoScalingGroups: [String]?
    /// <p>Information about blue/green deployment options for a deployment group.</p>
    public let blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration?
    /// <p>The current name of the deployment group.</p>
    public let currentDeploymentGroupName: String?
    /// <p>The replacement deployment configuration name to use, if you want to change it.</p>
    public let deploymentConfigName: String?
    /// <p>Information about the type of deployment, either in-place or blue/green, you want to
    ///             run and whether to route deployment traffic behind a load balancer.</p>
    public let deploymentStyle: DeploymentStyle?
    /// <p>The replacement set of Amazon EC2 tags on which to filter, if you want to change them.
    ///             To keep the existing tags, enter their names. To remove tags, do not enter any tag
    ///             names.</p>
    public let ec2TagFilters: [EC2TagFilter]?
    /// <p>Information about groups of tags applied to on-premises instances. The deployment
    ///             group includes only EC2 instances identified by all the tag groups.</p>
    public let ec2TagSet: EC2TagSet?
    /// <p> The target Amazon ECS services in the deployment group. This applies only to
    ///             deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service
    ///             is specified as an Amazon ECS cluster and service name pair using the format
    ///                 <code><clustername>:<servicename></code>. </p>
    public let ecsServices: [ECSService]?
    /// <p>Information about the load balancer used in a deployment.</p>
    public let loadBalancerInfo: LoadBalancerInfo?
    /// <p>The new name of the deployment group, if you want to change it.</p>
    public let newDeploymentGroupName: String?
    /// <p>The replacement set of on-premises instance tags on which to filter, if you want to
    ///             change them. To keep the existing tags, enter their names. To remove tags, do not enter
    ///             any tag names.</p>
    public let onPremisesInstanceTagFilters: [TagFilter]?
    /// <p>Information about an on-premises instance tag set. The deployment group includes only
    ///             on-premises instances identified by all the tag groups.</p>
    public let onPremisesTagSet: OnPremisesTagSet?
    /// <p>Indicates what happens when new EC2 instances are launched mid-deployment and do not
    ///             receive the deployed application revision.</p>
    ///         <p>If this option is set to <code>UPDATE</code> or is unspecified, CodeDeploy initiates
    ///             one or more 'auto-update outdated instances' deployments to apply the deployed
    ///             application revision to the new EC2 instances.</p>
    ///         <p>If this option is set to <code>IGNORE</code>, CodeDeploy does not initiate a
    ///             deployment to update the new EC2 instances. This may result in instances having
    ///             different revisions.</p>
    public let outdatedInstancesStrategy: OutdatedInstancesStrategy?
    /// <p>A replacement ARN for the service role, if you want to change it.</p>
    public let serviceRoleArn: String?
    /// <p>Information about triggers to change when the deployment group is updated. For
    ///             examples, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-notify-edit.html">Edit a Trigger in a
    ///                 CodeDeploy Deployment Group</a> in the <i>AWS CodeDeploy User
    ///                 Guide</i>.</p>
    public let triggerConfigurations: [TriggerConfig]?

    public init (
        alarmConfiguration: AlarmConfiguration? = nil,
        applicationName: String? = nil,
        autoRollbackConfiguration: AutoRollbackConfiguration? = nil,
        autoScalingGroups: [String]? = nil,
        blueGreenDeploymentConfiguration: BlueGreenDeploymentConfiguration? = nil,
        currentDeploymentGroupName: String? = nil,
        deploymentConfigName: String? = nil,
        deploymentStyle: DeploymentStyle? = nil,
        ec2TagFilters: [EC2TagFilter]? = nil,
        ec2TagSet: EC2TagSet? = nil,
        ecsServices: [ECSService]? = nil,
        loadBalancerInfo: LoadBalancerInfo? = nil,
        newDeploymentGroupName: String? = nil,
        onPremisesInstanceTagFilters: [TagFilter]? = nil,
        onPremisesTagSet: OnPremisesTagSet? = nil,
        outdatedInstancesStrategy: OutdatedInstancesStrategy? = nil,
        serviceRoleArn: String? = nil,
        triggerConfigurations: [TriggerConfig]? = nil
    )
    {
        self.alarmConfiguration = alarmConfiguration
        self.applicationName = applicationName
        self.autoRollbackConfiguration = autoRollbackConfiguration
        self.autoScalingGroups = autoScalingGroups
        self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
        self.currentDeploymentGroupName = currentDeploymentGroupName
        self.deploymentConfigName = deploymentConfigName
        self.deploymentStyle = deploymentStyle
        self.ec2TagFilters = ec2TagFilters
        self.ec2TagSet = ec2TagSet
        self.ecsServices = ecsServices
        self.loadBalancerInfo = loadBalancerInfo
        self.newDeploymentGroupName = newDeploymentGroupName
        self.onPremisesInstanceTagFilters = onPremisesInstanceTagFilters
        self.onPremisesTagSet = onPremisesTagSet
        self.outdatedInstancesStrategy = outdatedInstancesStrategy
        self.serviceRoleArn = serviceRoleArn
        self.triggerConfigurations = triggerConfigurations
    }
}
