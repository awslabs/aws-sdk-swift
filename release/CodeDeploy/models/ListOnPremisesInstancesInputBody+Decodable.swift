// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListOnPremisesInstancesInputBody: Equatable {
    public let registrationStatus: RegistrationStatus?
    public let tagFilters: [TagFilter]?
    public let nextToken: String?
}

extension ListOnPremisesInstancesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken
        case registrationStatus
        case tagFilters
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registrationStatusDecoded = try containerValues.decodeIfPresent(RegistrationStatus.self, forKey: .registrationStatus)
        registrationStatus = registrationStatusDecoded
        let tagFiltersContainer = try containerValues.decodeIfPresent([TagFilter].self, forKey: .tagFilters)
        var tagFiltersDecoded0:[TagFilter]? = nil
        if let tagFiltersContainer = tagFiltersContainer {
            tagFiltersDecoded0 = [TagFilter]()
            for structure0 in tagFiltersContainer {
                tagFiltersDecoded0?.append(structure0)
            }
        }
        tagFilters = tagFiltersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
