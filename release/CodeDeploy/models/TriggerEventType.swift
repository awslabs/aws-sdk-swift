// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum TriggerEventType {
    case deploymentFailure
    case deploymentReady
    case deploymentRollback
    case deploymentStart
    case deploymentStop
    case deploymentSuccess
    case instanceFailure
    case instanceReady
    case instanceStart
    case instanceSuccess
    case sdkUnknown(String)
}

extension TriggerEventType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TriggerEventType] {
        return [
            .deploymentFailure,
            .deploymentReady,
            .deploymentRollback,
            .deploymentStart,
            .deploymentStop,
            .deploymentSuccess,
            .instanceFailure,
            .instanceReady,
            .instanceStart,
            .instanceSuccess,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .deploymentFailure: return "DeploymentFailure"
        case .deploymentReady: return "DeploymentReady"
        case .deploymentRollback: return "DeploymentRollback"
        case .deploymentStart: return "DeploymentStart"
        case .deploymentStop: return "DeploymentStop"
        case .deploymentSuccess: return "DeploymentSuccess"
        case .instanceFailure: return "InstanceFailure"
        case .instanceReady: return "InstanceReady"
        case .instanceStart: return "InstanceStart"
        case .instanceSuccess: return "InstanceSuccess"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TriggerEventType(rawValue: rawValue) ?? TriggerEventType.sdkUnknown(rawValue)
    }
}
