// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListKeysOutputBody: Equatable {
    public let keys: [KeyListEntry]?
    public let nextMarker: String?
    public let truncated: Bool
}

extension ListKeysOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case keys = "Keys"
        case nextMarker = "NextMarker"
        case truncated = "Truncated"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keysContainer = try containerValues.decodeIfPresent([KeyListEntry].self, forKey: .keys)
        var keysDecoded0:[KeyListEntry]? = nil
        if let keysContainer = keysContainer {
            keysDecoded0 = [KeyListEntry]()
            for structure0 in keysContainer {
                keysDecoded0?.append(structure0)
            }
        }
        keys = keysDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let truncatedDecoded = try containerValues.decode(Bool.self, forKey: .truncated)
        truncated = truncatedDecoded
    }
}
