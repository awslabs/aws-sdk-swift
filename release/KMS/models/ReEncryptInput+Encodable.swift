// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ReEncryptInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ciphertextBlob = "CiphertextBlob"
        case destinationEncryptionAlgorithm = "DestinationEncryptionAlgorithm"
        case destinationEncryptionContext = "DestinationEncryptionContext"
        case destinationKeyId = "DestinationKeyId"
        case grantTokens = "GrantTokens"
        case sourceEncryptionAlgorithm = "SourceEncryptionAlgorithm"
        case sourceEncryptionContext = "SourceEncryptionContext"
        case sourceKeyId = "SourceKeyId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ciphertextBlob = ciphertextBlob {
            try encodeContainer.encode(ciphertextBlob.base64EncodedString(), forKey: .ciphertextBlob)
        }
        if let destinationEncryptionAlgorithm = destinationEncryptionAlgorithm {
            try encodeContainer.encode(destinationEncryptionAlgorithm.rawValue, forKey: .destinationEncryptionAlgorithm)
        }
        if let destinationEncryptionContext = destinationEncryptionContext {
            var destinationEncryptionContextContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .destinationEncryptionContext)
            for (dictKey0, encryptioncontexttype0) in destinationEncryptionContext {
                try destinationEncryptionContextContainer.encode(encryptioncontexttype0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let destinationKeyId = destinationKeyId {
            try encodeContainer.encode(destinationKeyId, forKey: .destinationKeyId)
        }
        if let grantTokens = grantTokens {
            var grantTokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .grantTokens)
            for granttokenlist0 in grantTokens {
                try grantTokensContainer.encode(granttokenlist0)
            }
        }
        if let sourceEncryptionAlgorithm = sourceEncryptionAlgorithm {
            try encodeContainer.encode(sourceEncryptionAlgorithm.rawValue, forKey: .sourceEncryptionAlgorithm)
        }
        if let sourceEncryptionContext = sourceEncryptionContext {
            var sourceEncryptionContextContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .sourceEncryptionContext)
            for (dictKey0, encryptioncontexttype0) in sourceEncryptionContext {
                try sourceEncryptionContextContainer.encode(encryptioncontexttype0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let sourceKeyId = sourceKeyId {
            try encodeContainer.encode(sourceKeyId, forKey: .sourceKeyId)
        }
    }
}
