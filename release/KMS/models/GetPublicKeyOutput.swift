// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetPublicKeyOutput: Equatable {
    /// <p>The type of the of the public key that was downloaded.</p>
    public let customerMasterKeySpec: CustomerMasterKeySpec?
    /// <p>The encryption algorithms that AWS KMS supports for this key. </p>
    ///          <p>This information is critical. If a public key encrypts data outside of AWS KMS by using an
    ///       unsupported encryption algorithm, the ciphertext cannot be decrypted. </p>
    ///          <p>This field appears in the response only when the <code>KeyUsage</code> of the public key
    ///       is <code>ENCRYPT_DECRYPT</code>.</p>
    public let encryptionAlgorithms: [EncryptionAlgorithmSpec]?
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key ARN</a>) of the asymmetric CMK from which the public key was downloaded.</p>
    public let keyId: String?
    /// <p>The permitted use of the public key. Valid values are <code>ENCRYPT_DECRYPT</code> or
    ///         <code>SIGN_VERIFY</code>. </p>
    ///          <p>This information is critical. If a public key with <code>SIGN_VERIFY</code> key usage
    ///       encrypts data outside of AWS KMS, the ciphertext cannot be decrypted. </p>
    public let keyUsage: KeyUsageType?
    /// <p>The exported public key. </p>
    ///          <p>The value is a DER-encoded X.509 public key, also known as
    ///         <code>SubjectPublicKeyInfo</code> (SPKI), as defined in <a href="https://tools.ietf.org/html/rfc5280">RFC 5280</a>. When you use the HTTP API or the AWS CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.</p>
    ///          <p></p>
    public let publicKey: Data?
    /// <p>The signing algorithms that AWS KMS supports for this key.</p>
    ///          <p>This field appears in the response only when the <code>KeyUsage</code> of the public key
    ///       is <code>SIGN_VERIFY</code>.</p>
    public let signingAlgorithms: [SigningAlgorithmSpec]?

    public init (
        customerMasterKeySpec: CustomerMasterKeySpec? = nil,
        encryptionAlgorithms: [EncryptionAlgorithmSpec]? = nil,
        keyId: String? = nil,
        keyUsage: KeyUsageType? = nil,
        publicKey: Data? = nil,
        signingAlgorithms: [SigningAlgorithmSpec]? = nil
    )
    {
        self.customerMasterKeySpec = customerMasterKeySpec
        self.encryptionAlgorithms = encryptionAlgorithms
        self.keyId = keyId
        self.keyUsage = keyUsage
        self.publicKey = publicKey
        self.signingAlgorithms = signingAlgorithms
    }
}
