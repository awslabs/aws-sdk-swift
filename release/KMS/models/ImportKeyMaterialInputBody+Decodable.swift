// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ImportKeyMaterialInputBody: Equatable {
    public let keyId: String?
    public let importToken: Data?
    public let encryptedKeyMaterial: Data?
    public let validTo: Date?
    public let expirationModel: ExpirationModelType?
}

extension ImportKeyMaterialInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case encryptedKeyMaterial = "EncryptedKeyMaterial"
        case expirationModel = "ExpirationModel"
        case importToken = "ImportToken"
        case keyId = "KeyId"
        case validTo = "ValidTo"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let importTokenDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .importToken)
        importToken = importTokenDecoded
        let encryptedKeyMaterialDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .encryptedKeyMaterial)
        encryptedKeyMaterial = encryptedKeyMaterialDecoded
        let validToDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .validTo)
        validTo = validToDecoded
        let expirationModelDecoded = try containerValues.decodeIfPresent(ExpirationModelType.self, forKey: .expirationModel)
        expirationModel = expirationModelDecoded
    }
}
