// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateGrantInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case constraints = "Constraints"
        case grantTokens = "GrantTokens"
        case granteePrincipal = "GranteePrincipal"
        case keyId = "KeyId"
        case name = "Name"
        case operations = "Operations"
        case retiringPrincipal = "RetiringPrincipal"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let constraints = constraints {
            try encodeContainer.encode(constraints, forKey: .constraints)
        }
        if let grantTokens = grantTokens {
            var grantTokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .grantTokens)
            for granttokenlist0 in grantTokens {
                try grantTokensContainer.encode(granttokenlist0)
            }
        }
        if let granteePrincipal = granteePrincipal {
            try encodeContainer.encode(granteePrincipal, forKey: .granteePrincipal)
        }
        if let keyId = keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let operations = operations {
            var operationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .operations)
            for grantoperationlist0 in operations {
                try operationsContainer.encode(grantoperationlist0.rawValue)
            }
        }
        if let retiringPrincipal = retiringPrincipal {
            try encodeContainer.encode(retiringPrincipal, forKey: .retiringPrincipal)
        }
    }
}
