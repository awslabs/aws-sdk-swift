// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum SigningAlgorithmSpec {
    case ecdsaSha256
    case ecdsaSha384
    case ecdsaSha512
    case rsassaPkcs1V15Sha256
    case rsassaPkcs1V15Sha384
    case rsassaPkcs1V15Sha512
    case rsassaPssSha256
    case rsassaPssSha384
    case rsassaPssSha512
    case sdkUnknown(String)
}

extension SigningAlgorithmSpec : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SigningAlgorithmSpec] {
        return [
            .ecdsaSha256,
            .ecdsaSha384,
            .ecdsaSha512,
            .rsassaPkcs1V15Sha256,
            .rsassaPkcs1V15Sha384,
            .rsassaPkcs1V15Sha512,
            .rsassaPssSha256,
            .rsassaPssSha384,
            .rsassaPssSha512,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .ecdsaSha256: return "ECDSA_SHA_256"
        case .ecdsaSha384: return "ECDSA_SHA_384"
        case .ecdsaSha512: return "ECDSA_SHA_512"
        case .rsassaPkcs1V15Sha256: return "RSASSA_PKCS1_V1_5_SHA_256"
        case .rsassaPkcs1V15Sha384: return "RSASSA_PKCS1_V1_5_SHA_384"
        case .rsassaPkcs1V15Sha512: return "RSASSA_PKCS1_V1_5_SHA_512"
        case .rsassaPssSha256: return "RSASSA_PSS_SHA_256"
        case .rsassaPssSha384: return "RSASSA_PSS_SHA_384"
        case .rsassaPssSha512: return "RSASSA_PSS_SHA_512"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SigningAlgorithmSpec(rawValue: rawValue) ?? SigningAlgorithmSpec.sdkUnknown(rawValue)
    }
}
