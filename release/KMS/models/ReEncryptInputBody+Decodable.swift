// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ReEncryptInputBody: Equatable {
    public let ciphertextBlob: Data?
    public let sourceEncryptionContext: [String:String]?
    public let sourceKeyId: String?
    public let destinationKeyId: String?
    public let destinationEncryptionContext: [String:String]?
    public let sourceEncryptionAlgorithm: EncryptionAlgorithmSpec?
    public let destinationEncryptionAlgorithm: EncryptionAlgorithmSpec?
    public let grantTokens: [String]?
}

extension ReEncryptInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case ciphertextBlob = "CiphertextBlob"
        case destinationEncryptionAlgorithm = "DestinationEncryptionAlgorithm"
        case destinationEncryptionContext = "DestinationEncryptionContext"
        case destinationKeyId = "DestinationKeyId"
        case grantTokens = "GrantTokens"
        case sourceEncryptionAlgorithm = "SourceEncryptionAlgorithm"
        case sourceEncryptionContext = "SourceEncryptionContext"
        case sourceKeyId = "SourceKeyId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ciphertextBlobDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .ciphertextBlob)
        ciphertextBlob = ciphertextBlobDecoded
        let sourceEncryptionContextContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .sourceEncryptionContext)
        var sourceEncryptionContextDecoded0: [String:String]? = nil
        if let sourceEncryptionContextContainer = sourceEncryptionContextContainer {
            sourceEncryptionContextDecoded0 = [String:String]()
            for (key0, encryptioncontextvalue0) in sourceEncryptionContextContainer {
                sourceEncryptionContextDecoded0?[key0] = encryptioncontextvalue0
            }
        }
        sourceEncryptionContext = sourceEncryptionContextDecoded0
        let sourceKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceKeyId)
        sourceKeyId = sourceKeyIdDecoded
        let destinationKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationKeyId)
        destinationKeyId = destinationKeyIdDecoded
        let destinationEncryptionContextContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .destinationEncryptionContext)
        var destinationEncryptionContextDecoded0: [String:String]? = nil
        if let destinationEncryptionContextContainer = destinationEncryptionContextContainer {
            destinationEncryptionContextDecoded0 = [String:String]()
            for (key0, encryptioncontextvalue0) in destinationEncryptionContextContainer {
                destinationEncryptionContextDecoded0?[key0] = encryptioncontextvalue0
            }
        }
        destinationEncryptionContext = destinationEncryptionContextDecoded0
        let sourceEncryptionAlgorithmDecoded = try containerValues.decodeIfPresent(EncryptionAlgorithmSpec.self, forKey: .sourceEncryptionAlgorithm)
        sourceEncryptionAlgorithm = sourceEncryptionAlgorithmDecoded
        let destinationEncryptionAlgorithmDecoded = try containerValues.decodeIfPresent(EncryptionAlgorithmSpec.self, forKey: .destinationEncryptionAlgorithm)
        destinationEncryptionAlgorithm = destinationEncryptionAlgorithmDecoded
        let grantTokensContainer = try containerValues.decodeIfPresent([String].self, forKey: .grantTokens)
        var grantTokensDecoded0:[String]? = nil
        if let grantTokensContainer = grantTokensContainer {
            grantTokensDecoded0 = [String]()
            for string0 in grantTokensContainer {
                grantTokensDecoded0?.append(string0)
            }
        }
        grantTokens = grantTokensDecoded0
    }
}
