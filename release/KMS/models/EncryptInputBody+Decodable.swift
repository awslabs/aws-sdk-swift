// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct EncryptInputBody: Equatable {
    public let keyId: String?
    public let plaintext: Data?
    public let encryptionContext: [String:String]?
    public let grantTokens: [String]?
    public let encryptionAlgorithm: EncryptionAlgorithmSpec?
}

extension EncryptInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case encryptionAlgorithm = "EncryptionAlgorithm"
        case encryptionContext = "EncryptionContext"
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
        case plaintext = "Plaintext"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let plaintextDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .plaintext)
        plaintext = plaintextDecoded
        let encryptionContextContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .encryptionContext)
        var encryptionContextDecoded0: [String:String]? = nil
        if let encryptionContextContainer = encryptionContextContainer {
            encryptionContextDecoded0 = [String:String]()
            for (key0, encryptioncontextvalue0) in encryptionContextContainer {
                encryptionContextDecoded0?[key0] = encryptioncontextvalue0
            }
        }
        encryptionContext = encryptionContextDecoded0
        let grantTokensContainer = try containerValues.decodeIfPresent([String].self, forKey: .grantTokens)
        var grantTokensDecoded0:[String]? = nil
        if let grantTokensContainer = grantTokensContainer {
            grantTokensDecoded0 = [String]()
            for string0 in grantTokensContainer {
                grantTokensDecoded0?.append(string0)
            }
        }
        grantTokens = grantTokensDecoded0
        let encryptionAlgorithmDecoded = try containerValues.decodeIfPresent(EncryptionAlgorithmSpec.self, forKey: .encryptionAlgorithm)
        encryptionAlgorithm = encryptionAlgorithmDecoded
    }
}
