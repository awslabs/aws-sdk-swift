// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SignOutputBody: Equatable {
    public let keyId: String?
    public let signature: Data?
    public let signingAlgorithm: SigningAlgorithmSpec?
}

extension SignOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case keyId = "KeyId"
        case signature = "Signature"
        case signingAlgorithm = "SigningAlgorithm"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let signatureDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .signature)
        signature = signatureDecoded
        let signingAlgorithmDecoded = try containerValues.decodeIfPresent(SigningAlgorithmSpec.self, forKey: .signingAlgorithm)
        signingAlgorithm = signingAlgorithmDecoded
    }
}
