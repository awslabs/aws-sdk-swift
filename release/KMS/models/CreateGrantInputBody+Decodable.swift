// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateGrantInputBody: Equatable {
    public let keyId: String?
    public let granteePrincipal: String?
    public let retiringPrincipal: String?
    public let operations: [GrantOperation]?
    public let constraints: GrantConstraints?
    public let grantTokens: [String]?
    public let name: String?
}

extension CreateGrantInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case constraints = "Constraints"
        case grantTokens = "GrantTokens"
        case granteePrincipal = "GranteePrincipal"
        case keyId = "KeyId"
        case name = "Name"
        case operations = "Operations"
        case retiringPrincipal = "RetiringPrincipal"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let granteePrincipalDecoded = try containerValues.decodeIfPresent(String.self, forKey: .granteePrincipal)
        granteePrincipal = granteePrincipalDecoded
        let retiringPrincipalDecoded = try containerValues.decodeIfPresent(String.self, forKey: .retiringPrincipal)
        retiringPrincipal = retiringPrincipalDecoded
        let operationsContainer = try containerValues.decodeIfPresent([GrantOperation].self, forKey: .operations)
        var operationsDecoded0:[GrantOperation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [GrantOperation]()
            for string0 in operationsContainer {
                operationsDecoded0?.append(string0)
            }
        }
        operations = operationsDecoded0
        let constraintsDecoded = try containerValues.decodeIfPresent(GrantConstraints.self, forKey: .constraints)
        constraints = constraintsDecoded
        let grantTokensContainer = try containerValues.decodeIfPresent([String].self, forKey: .grantTokens)
        var grantTokensDecoded0:[String]? = nil
        if let grantTokensContainer = grantTokensContainer {
            grantTokensDecoded0 = [String]()
            for string0 in grantTokensContainer {
                grantTokensDecoded0?.append(string0)
            }
        }
        grantTokens = grantTokensDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
    }
}
