// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GrantListEntry: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case constraints = "Constraints"
        case creationDate = "CreationDate"
        case grantId = "GrantId"
        case granteePrincipal = "GranteePrincipal"
        case issuingAccount = "IssuingAccount"
        case keyId = "KeyId"
        case name = "Name"
        case operations = "Operations"
        case retiringPrincipal = "RetiringPrincipal"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let constraints = constraints {
            try encodeContainer.encode(constraints, forKey: .constraints)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let grantId = grantId {
            try encodeContainer.encode(grantId, forKey: .grantId)
        }
        if let granteePrincipal = granteePrincipal {
            try encodeContainer.encode(granteePrincipal, forKey: .granteePrincipal)
        }
        if let issuingAccount = issuingAccount {
            try encodeContainer.encode(issuingAccount, forKey: .issuingAccount)
        }
        if let keyId = keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let operations = operations {
            var operationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .operations)
            for grantoperationlist0 in operations {
                try operationsContainer.encode(grantoperationlist0.rawValue)
            }
        }
        if let retiringPrincipal = retiringPrincipal {
            try encodeContainer.encode(retiringPrincipal, forKey: .retiringPrincipal)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let grantIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .grantId)
        grantId = grantIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let granteePrincipalDecoded = try containerValues.decodeIfPresent(String.self, forKey: .granteePrincipal)
        granteePrincipal = granteePrincipalDecoded
        let retiringPrincipalDecoded = try containerValues.decodeIfPresent(String.self, forKey: .retiringPrincipal)
        retiringPrincipal = retiringPrincipalDecoded
        let issuingAccountDecoded = try containerValues.decodeIfPresent(String.self, forKey: .issuingAccount)
        issuingAccount = issuingAccountDecoded
        let operationsContainer = try containerValues.decodeIfPresent([GrantOperation].self, forKey: .operations)
        var operationsDecoded0:[GrantOperation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [GrantOperation]()
            for string0 in operationsContainer {
                operationsDecoded0?.append(string0)
            }
        }
        operations = operationsDecoded0
        let constraintsDecoded = try containerValues.decodeIfPresent(GrantConstraints.self, forKey: .constraints)
        constraints = constraintsDecoded
    }
}
