// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AliasListEntry: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aliasArn = "AliasArn"
        case aliasName = "AliasName"
        case creationDate = "CreationDate"
        case lastUpdatedDate = "LastUpdatedDate"
        case targetKeyId = "TargetKeyId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasArn = aliasArn {
            try encodeContainer.encode(aliasArn, forKey: .aliasArn)
        }
        if let aliasName = aliasName {
            try encodeContainer.encode(aliasName, forKey: .aliasName)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let lastUpdatedDate = lastUpdatedDate {
            try encodeContainer.encode(lastUpdatedDate.timeIntervalSince1970, forKey: .lastUpdatedDate)
        }
        if let targetKeyId = targetKeyId {
            try encodeContainer.encode(targetKeyId, forKey: .targetKeyId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aliasName)
        aliasName = aliasNameDecoded
        let aliasArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aliasArn)
        aliasArn = aliasArnDecoded
        let targetKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetKeyId)
        targetKeyId = targetKeyIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
    }
}
