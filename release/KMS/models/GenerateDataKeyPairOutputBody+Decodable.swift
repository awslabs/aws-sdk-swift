// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GenerateDataKeyPairOutputBody: Equatable {
    public let privateKeyCiphertextBlob: Data?
    public let privateKeyPlaintext: Data?
    public let publicKey: Data?
    public let keyId: String?
    public let keyPairSpec: DataKeyPairSpec?
}

extension GenerateDataKeyPairOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case keyId = "KeyId"
        case keyPairSpec = "KeyPairSpec"
        case privateKeyCiphertextBlob = "PrivateKeyCiphertextBlob"
        case privateKeyPlaintext = "PrivateKeyPlaintext"
        case publicKey = "PublicKey"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let privateKeyCiphertextBlobDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .privateKeyCiphertextBlob)
        privateKeyCiphertextBlob = privateKeyCiphertextBlobDecoded
        let privateKeyPlaintextDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .privateKeyPlaintext)
        privateKeyPlaintext = privateKeyPlaintextDecoded
        let publicKeyDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .publicKey)
        publicKey = publicKeyDecoded
        let keyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let keyPairSpecDecoded = try containerValues.decodeIfPresent(DataKeyPairSpec.self, forKey: .keyPairSpec)
        keyPairSpec = keyPairSpecDecoded
    }
}
