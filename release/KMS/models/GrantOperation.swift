// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum GrantOperation {
    case creategrant
    case decrypt
    case describekey
    case encrypt
    case generatedatakey
    case generatedatakeypair
    case generatedatakeypairwithoutplaintext
    case generatedatakeywithoutplaintext
    case getpublickey
    case reencryptfrom
    case reencryptto
    case retiregrant
    case sign
    case verify
    case sdkUnknown(String)
}

extension GrantOperation : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [GrantOperation] {
        return [
            .creategrant,
            .decrypt,
            .describekey,
            .encrypt,
            .generatedatakey,
            .generatedatakeypair,
            .generatedatakeypairwithoutplaintext,
            .generatedatakeywithoutplaintext,
            .getpublickey,
            .reencryptfrom,
            .reencryptto,
            .retiregrant,
            .sign,
            .verify,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .creategrant: return "CreateGrant"
        case .decrypt: return "Decrypt"
        case .describekey: return "DescribeKey"
        case .encrypt: return "Encrypt"
        case .generatedatakey: return "GenerateDataKey"
        case .generatedatakeypair: return "GenerateDataKeyPair"
        case .generatedatakeypairwithoutplaintext: return "GenerateDataKeyPairWithoutPlaintext"
        case .generatedatakeywithoutplaintext: return "GenerateDataKeyWithoutPlaintext"
        case .getpublickey: return "GetPublicKey"
        case .reencryptfrom: return "ReEncryptFrom"
        case .reencryptto: return "ReEncryptTo"
        case .retiregrant: return "RetireGrant"
        case .sign: return "Sign"
        case .verify: return "Verify"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = GrantOperation(rawValue: rawValue) ?? GrantOperation.sdkUnknown(rawValue)
    }
}
