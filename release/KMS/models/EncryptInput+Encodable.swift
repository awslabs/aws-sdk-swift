// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EncryptInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case encryptionAlgorithm = "EncryptionAlgorithm"
        case encryptionContext = "EncryptionContext"
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
        case plaintext = "Plaintext"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptionAlgorithm = encryptionAlgorithm {
            try encodeContainer.encode(encryptionAlgorithm.rawValue, forKey: .encryptionAlgorithm)
        }
        if let encryptionContext = encryptionContext {
            var encryptionContextContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .encryptionContext)
            for (dictKey0, encryptioncontexttype0) in encryptionContext {
                try encryptionContextContainer.encode(encryptioncontexttype0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let grantTokens = grantTokens {
            var grantTokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .grantTokens)
            for granttokenlist0 in grantTokens {
                try grantTokensContainer.encode(granttokenlist0)
            }
        }
        if let keyId = keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let plaintext = plaintext {
            try encodeContainer.encode(plaintext.base64EncodedString(), forKey: .plaintext)
        }
    }
}
