// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ImportKeyMaterialInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case encryptedKeyMaterial = "EncryptedKeyMaterial"
        case expirationModel = "ExpirationModel"
        case importToken = "ImportToken"
        case keyId = "KeyId"
        case validTo = "ValidTo"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptedKeyMaterial = encryptedKeyMaterial {
            try encodeContainer.encode(encryptedKeyMaterial.base64EncodedString(), forKey: .encryptedKeyMaterial)
        }
        if let expirationModel = expirationModel {
            try encodeContainer.encode(expirationModel.rawValue, forKey: .expirationModel)
        }
        if let importToken = importToken {
            try encodeContainer.encode(importToken.base64EncodedString(), forKey: .importToken)
        }
        if let keyId = keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let validTo = validTo {
            try encodeContainer.encode(validTo.timeIntervalSince1970, forKey: .validTo)
        }
    }
}
