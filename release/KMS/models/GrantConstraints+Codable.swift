// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GrantConstraints: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case encryptionContextEquals = "EncryptionContextEquals"
        case encryptionContextSubset = "EncryptionContextSubset"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptionContextEquals = encryptionContextEquals {
            var encryptionContextEqualsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .encryptionContextEquals)
            for (dictKey0, encryptioncontexttype0) in encryptionContextEquals {
                try encryptionContextEqualsContainer.encode(encryptioncontexttype0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let encryptionContextSubset = encryptionContextSubset {
            var encryptionContextSubsetContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .encryptionContextSubset)
            for (dictKey0, encryptioncontexttype0) in encryptionContextSubset {
                try encryptionContextSubsetContainer.encode(encryptioncontexttype0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let encryptionContextSubsetContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .encryptionContextSubset)
        var encryptionContextSubsetDecoded0: [String:String]? = nil
        if let encryptionContextSubsetContainer = encryptionContextSubsetContainer {
            encryptionContextSubsetDecoded0 = [String:String]()
            for (key0, encryptioncontextvalue0) in encryptionContextSubsetContainer {
                encryptionContextSubsetDecoded0?[key0] = encryptioncontextvalue0
            }
        }
        encryptionContextSubset = encryptionContextSubsetDecoded0
        let encryptionContextEqualsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .encryptionContextEquals)
        var encryptionContextEqualsDecoded0: [String:String]? = nil
        if let encryptionContextEqualsContainer = encryptionContextEqualsContainer {
            encryptionContextEqualsDecoded0 = [String:String]()
            for (key0, encryptioncontextvalue0) in encryptionContextEqualsContainer {
                encryptionContextEqualsDecoded0?[key0] = encryptioncontextvalue0
            }
        }
        encryptionContextEquals = encryptionContextEqualsDecoded0
    }
}
