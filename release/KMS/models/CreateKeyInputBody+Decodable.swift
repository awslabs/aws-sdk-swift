// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateKeyInputBody: Equatable {
    public let policy: String?
    public let description: String?
    public let keyUsage: KeyUsageType?
    public let customerMasterKeySpec: CustomerMasterKeySpec?
    public let origin: OriginType?
    public let customKeyStoreId: String?
    public let bypassPolicyLockoutSafetyCheck: Bool
    public let tags: [Tag]?
}

extension CreateKeyInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case bypassPolicyLockoutSafetyCheck = "BypassPolicyLockoutSafetyCheck"
        case customKeyStoreId = "CustomKeyStoreId"
        case customerMasterKeySpec = "CustomerMasterKeySpec"
        case description = "Description"
        case keyUsage = "KeyUsage"
        case origin = "Origin"
        case policy = "Policy"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .policy)
        policy = policyDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let keyUsageDecoded = try containerValues.decodeIfPresent(KeyUsageType.self, forKey: .keyUsage)
        keyUsage = keyUsageDecoded
        let customerMasterKeySpecDecoded = try containerValues.decodeIfPresent(CustomerMasterKeySpec.self, forKey: .customerMasterKeySpec)
        customerMasterKeySpec = customerMasterKeySpecDecoded
        let originDecoded = try containerValues.decodeIfPresent(OriginType.self, forKey: .origin)
        origin = originDecoded
        let customKeyStoreIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customKeyStoreId)
        customKeyStoreId = customKeyStoreIdDecoded
        let bypassPolicyLockoutSafetyCheckDecoded = try containerValues.decode(Bool.self, forKey: .bypassPolicyLockoutSafetyCheck)
        bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheckDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
