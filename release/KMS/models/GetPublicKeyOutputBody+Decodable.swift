// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetPublicKeyOutputBody: Equatable {
    public let keyId: String?
    public let publicKey: Data?
    public let customerMasterKeySpec: CustomerMasterKeySpec?
    public let keyUsage: KeyUsageType?
    public let encryptionAlgorithms: [EncryptionAlgorithmSpec]?
    public let signingAlgorithms: [SigningAlgorithmSpec]?
}

extension GetPublicKeyOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case customerMasterKeySpec = "CustomerMasterKeySpec"
        case encryptionAlgorithms = "EncryptionAlgorithms"
        case keyId = "KeyId"
        case keyUsage = "KeyUsage"
        case publicKey = "PublicKey"
        case signingAlgorithms = "SigningAlgorithms"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let publicKeyDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .publicKey)
        publicKey = publicKeyDecoded
        let customerMasterKeySpecDecoded = try containerValues.decodeIfPresent(CustomerMasterKeySpec.self, forKey: .customerMasterKeySpec)
        customerMasterKeySpec = customerMasterKeySpecDecoded
        let keyUsageDecoded = try containerValues.decodeIfPresent(KeyUsageType.self, forKey: .keyUsage)
        keyUsage = keyUsageDecoded
        let encryptionAlgorithmsContainer = try containerValues.decodeIfPresent([EncryptionAlgorithmSpec].self, forKey: .encryptionAlgorithms)
        var encryptionAlgorithmsDecoded0:[EncryptionAlgorithmSpec]? = nil
        if let encryptionAlgorithmsContainer = encryptionAlgorithmsContainer {
            encryptionAlgorithmsDecoded0 = [EncryptionAlgorithmSpec]()
            for string0 in encryptionAlgorithmsContainer {
                encryptionAlgorithmsDecoded0?.append(string0)
            }
        }
        encryptionAlgorithms = encryptionAlgorithmsDecoded0
        let signingAlgorithmsContainer = try containerValues.decodeIfPresent([SigningAlgorithmSpec].self, forKey: .signingAlgorithms)
        var signingAlgorithmsDecoded0:[SigningAlgorithmSpec]? = nil
        if let signingAlgorithmsContainer = signingAlgorithmsContainer {
            signingAlgorithmsDecoded0 = [SigningAlgorithmSpec]()
            for string0 in signingAlgorithmsContainer {
                signingAlgorithmsDecoded0?.append(string0)
            }
        }
        signingAlgorithms = signingAlgorithmsDecoded0
    }
}
