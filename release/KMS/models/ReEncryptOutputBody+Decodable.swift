// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ReEncryptOutputBody: Equatable {
    public let ciphertextBlob: Data?
    public let sourceKeyId: String?
    public let keyId: String?
    public let sourceEncryptionAlgorithm: EncryptionAlgorithmSpec?
    public let destinationEncryptionAlgorithm: EncryptionAlgorithmSpec?
}

extension ReEncryptOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case ciphertextBlob = "CiphertextBlob"
        case destinationEncryptionAlgorithm = "DestinationEncryptionAlgorithm"
        case keyId = "KeyId"
        case sourceEncryptionAlgorithm = "SourceEncryptionAlgorithm"
        case sourceKeyId = "SourceKeyId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ciphertextBlobDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .ciphertextBlob)
        ciphertextBlob = ciphertextBlobDecoded
        let sourceKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceKeyId)
        sourceKeyId = sourceKeyIdDecoded
        let keyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let sourceEncryptionAlgorithmDecoded = try containerValues.decodeIfPresent(EncryptionAlgorithmSpec.self, forKey: .sourceEncryptionAlgorithm)
        sourceEncryptionAlgorithm = sourceEncryptionAlgorithmDecoded
        let destinationEncryptionAlgorithmDecoded = try containerValues.decodeIfPresent(EncryptionAlgorithmSpec.self, forKey: .destinationEncryptionAlgorithm)
        destinationEncryptionAlgorithm = destinationEncryptionAlgorithmDecoded
    }
}
