// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetEntitlementsInputBody: Equatable {
    public let productCode: String?
    public let filter: [String:[String]?]?
    public let nextToken: String?
    public let maxResults: Int?
}

extension GetEntitlementsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case productCode = "ProductCode"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let productCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .productCode)
        productCode = productCodeDecoded
        let filterContainer = try containerValues.decodeIfPresent([String:[String]?].self, forKey: .filter)
        var filterDecoded0: [String:[String]?]? = nil
        if let filterContainer = filterContainer {
            filterDecoded0 = [String:[String]?]()
            for (key0, filtervaluelist0) in filterContainer {
                var filtervaluelist0Decoded0 = [String]()
                if let filtervaluelist0 = filtervaluelist0 {
                    for string1 in filtervaluelist0 {
                        filtervaluelist0Decoded0.append(string1)
                    }
                }
                filterDecoded0?[key0] = filtervaluelist0Decoded0
            }
        }
        filter = filterDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
