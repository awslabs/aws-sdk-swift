// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Entitlement: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case customerIdentifier = "CustomerIdentifier"
        case dimension = "Dimension"
        case expirationDate = "ExpirationDate"
        case productCode = "ProductCode"
        case value = "Value"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customerIdentifier = customerIdentifier {
            try encodeContainer.encode(customerIdentifier, forKey: .customerIdentifier)
        }
        if let dimension = dimension {
            try encodeContainer.encode(dimension, forKey: .dimension)
        }
        if let expirationDate = expirationDate {
            try encodeContainer.encode(expirationDate.timeIntervalSince1970, forKey: .expirationDate)
        }
        if let productCode = productCode {
            try encodeContainer.encode(productCode, forKey: .productCode)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let productCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .productCode)
        productCode = productCodeDecoded
        let dimensionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dimension)
        dimension = dimensionDecoded
        let customerIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customerIdentifier)
        customerIdentifier = customerIdentifierDecoded
        let valueDecoded = try containerValues.decodeIfPresent(EntitlementValue.self, forKey: .value)
        value = valueDecoded
        let expirationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .expirationDate)
        expirationDate = expirationDateDecoded
    }
}
