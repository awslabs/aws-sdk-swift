// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation

public class CodeGuruProfilerClient {
    let client: SdkHttpClient
    let config: CodeGuruProfilerClientConfiguration
    let serviceName = "CodeGuruProfiler"
    let encoder: RequestEncoder
    let decoder: ResponseDecoder

    public init(config: CodeGuruProfilerClientConfiguration) {
        client = SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.encoder = config.encoder ?? encoder
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public class CodeGuruProfilerClientConfiguration: ClientRuntime.Configuration, AWSClientConfiguration {

        public var region: String
        public var credentialsProvider: AWSCredentialsProvider
        public var signingRegion: String
        public var endpointResolver: EndpointResolver

        public init (
            credentialsProvider: AWSCredentialsProvider,
            endpointResolver: EndpointResolver,
            region: String,
            signingRegion: String
        ) throws
        {
            self.credentialsProvider = credentialsProvider
            self.endpointResolver = endpointResolver
            self.region = region
            self.signingRegion = signingRegion
        }

        public convenience init(credentialsProvider: AWSCredentialsProvider) throws {
            let region = "us-east-1"
            let signingRegion = "us-east-1"
            let endpointResolver = DefaultEndpointResolver()
            try self.init(
                credentialsProvider: credentialsProvider,
                endpointResolver: endpointResolver,
                region: region,
                signingRegion: signingRegion
            )
        }

        public static func `default`() throws -> CodeGuruProfilerClientConfiguration {
            let awsCredsProvider = try AWSCredentialsProvider.fromEnv()
            return try CodeGuruProfilerClientConfiguration(credentialsProvider: awsCredsProvider)
        }
    }
}

extension CodeGuruProfilerClient: CodeGuruProfilerClientProtocol {
    /// <p>Add up to 2 anomaly notifications channels for a profiling group.</p>
    public func addNotificationChannels(input: AddNotificationChannelsInput, completion: @escaping (SdkResult<AddNotificationChannelsOutputResponse, AddNotificationChannelsOutputError>) -> Void)
    {
        guard let profilingGroupName = input.profilingGroupName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component profilingGroupName unexpectedly nil"))))
            return
        }
        let urlPath = "/profilingGroups/\(profilingGroupName)/notificationConfiguration"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "addNotificationChannels")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "codeguru-profiler.\(config.region).amazonaws.com")
                      .withSigningName(value: "codeguru-profiler")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AddNotificationChannelsInput, AddNotificationChannelsOutputResponse, AddNotificationChannelsOutputError>(id: "addNotificationChannels")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AddNotificationChannelsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AddNotificationChannelsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AddNotificationChannelsInput, AddNotificationChannelsOutputResponse, AddNotificationChannelsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: AddNotificationChannelsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    ///          Returns the time series of values for a requested list
    ///          of frame metrics from a time period.</p>
    public func batchGetFrameMetricData(input: BatchGetFrameMetricDataInput, completion: @escaping (SdkResult<BatchGetFrameMetricDataOutputResponse, BatchGetFrameMetricDataOutputError>) -> Void)
    {
        guard let profilingGroupName = input.profilingGroupName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component profilingGroupName unexpectedly nil"))))
            return
        }
        let urlPath = "/profilingGroups/\(profilingGroupName)/frames/-/metrics"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "batchGetFrameMetricData")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "codeguru-profiler.\(config.region).amazonaws.com")
                      .withSigningName(value: "codeguru-profiler")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<BatchGetFrameMetricDataInput, BatchGetFrameMetricDataOutputResponse, BatchGetFrameMetricDataOutputError>(id: "batchGetFrameMetricData")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: BatchGetFrameMetricDataInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: BatchGetFrameMetricDataInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<BatchGetFrameMetricDataInput, BatchGetFrameMetricDataOutputResponse, BatchGetFrameMetricDataOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: BatchGetFrameMetricDataInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    ///           Used by profiler agents to report their current state and to receive remote
    ///           configuration updates. For example, <code>ConfigureAgent</code> can be used
    ///          to tell an agent whether to profile or not and for how long to return profiling data.
    ///       </p>
    public func configureAgent(input: ConfigureAgentInput, completion: @escaping (SdkResult<ConfigureAgentOutputResponse, ConfigureAgentOutputError>) -> Void)
    {
        guard let profilingGroupName = input.profilingGroupName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component profilingGroupName unexpectedly nil"))))
            return
        }
        let urlPath = "/profilingGroups/\(profilingGroupName)/configureAgent"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "configureAgent")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "codeguru-profiler.\(config.region).amazonaws.com")
                      .withSigningName(value: "codeguru-profiler")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ConfigureAgentInput, ConfigureAgentOutputResponse, ConfigureAgentOutputError>(id: "configureAgent")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ConfigureAgentInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ConfigureAgentInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ConfigureAgentInput, ConfigureAgentOutputResponse, ConfigureAgentOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: ConfigureAgentInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a profiling group.</p>
    public func createProfilingGroup(input: CreateProfilingGroupInput, completion: @escaping (SdkResult<CreateProfilingGroupOutputResponse, CreateProfilingGroupOutputError>) -> Void)
    {
        let urlPath = "/profilingGroups"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createProfilingGroup")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "codeguru-profiler.\(config.region).amazonaws.com")
                      .withSigningName(value: "codeguru-profiler")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateProfilingGroupInput, CreateProfilingGroupOutputResponse, CreateProfilingGroupOutputError>(id: "createProfilingGroup")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<CreateProfilingGroupOutputResponse>, SdkError<CreateProfilingGroupOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientToken == nil {
                copiedInput.clientToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: CreateProfilingGroupInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateProfilingGroupInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateProfilingGroupInput, CreateProfilingGroupOutputResponse, CreateProfilingGroupOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateProfilingGroupInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes a profiling group.</p>
    public func deleteProfilingGroup(input: DeleteProfilingGroupInput, completion: @escaping (SdkResult<DeleteProfilingGroupOutputResponse, DeleteProfilingGroupOutputError>) -> Void)
    {
        guard let profilingGroupName = input.profilingGroupName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component profilingGroupName unexpectedly nil"))))
            return
        }
        let urlPath = "/profilingGroups/\(profilingGroupName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteProfilingGroup")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "codeguru-profiler.\(config.region).amazonaws.com")
                      .withSigningName(value: "codeguru-profiler")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteProfilingGroupInput, DeleteProfilingGroupOutputResponse, DeleteProfilingGroupOutputError>(id: "deleteProfilingGroup")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteProfilingGroupInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteProfilingGroupInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteProfilingGroupInput, DeleteProfilingGroupOutputResponse, DeleteProfilingGroupOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    ///          Returns a <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ProfilingGroupDescription.html">
    ///                <code>ProfilingGroupDescription</code>
    ///             </a>
    ///          object that contains information about the requested profiling group.
    ///       </p>
    public func describeProfilingGroup(input: DescribeProfilingGroupInput, completion: @escaping (SdkResult<DescribeProfilingGroupOutputResponse, DescribeProfilingGroupOutputError>) -> Void)
    {
        guard let profilingGroupName = input.profilingGroupName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component profilingGroupName unexpectedly nil"))))
            return
        }
        let urlPath = "/profilingGroups/\(profilingGroupName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeProfilingGroup")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "codeguru-profiler.\(config.region).amazonaws.com")
                      .withSigningName(value: "codeguru-profiler")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeProfilingGroupInput, DescribeProfilingGroupOutputResponse, DescribeProfilingGroupOutputError>(id: "describeProfilingGroup")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeProfilingGroupInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeProfilingGroupInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeProfilingGroupInput, DescribeProfilingGroupOutputResponse, DescribeProfilingGroupOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    ///             Returns a list of
    ///             <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_FindingsReportSummary.html">
    ///                <code>FindingsReportSummary</code>
    ///             </a>
    ///             objects that contain analysis results for all profiling groups in your AWS account.
    ///         </p>
    public func getFindingsReportAccountSummary(input: GetFindingsReportAccountSummaryInput, completion: @escaping (SdkResult<GetFindingsReportAccountSummaryOutputResponse, GetFindingsReportAccountSummaryOutputError>) -> Void)
    {
        let urlPath = "/internal/findingsReports"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getFindingsReportAccountSummary")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "codeguru-profiler.\(config.region).amazonaws.com")
                      .withSigningName(value: "codeguru-profiler")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetFindingsReportAccountSummaryInput, GetFindingsReportAccountSummaryOutputResponse, GetFindingsReportAccountSummaryOutputError>(id: "getFindingsReportAccountSummary")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetFindingsReportAccountSummaryInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetFindingsReportAccountSummaryInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetFindingsReportAccountSummaryInput, GetFindingsReportAccountSummaryOutputResponse, GetFindingsReportAccountSummaryOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Get the current configuration for anomaly notifications for a profiling group.</p>
    public func getNotificationConfiguration(input: GetNotificationConfigurationInput, completion: @escaping (SdkResult<GetNotificationConfigurationOutputResponse, GetNotificationConfigurationOutputError>) -> Void)
    {
        guard let profilingGroupName = input.profilingGroupName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component profilingGroupName unexpectedly nil"))))
            return
        }
        let urlPath = "/profilingGroups/\(profilingGroupName)/notificationConfiguration"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getNotificationConfiguration")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "codeguru-profiler.\(config.region).amazonaws.com")
                      .withSigningName(value: "codeguru-profiler")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetNotificationConfigurationInput, GetNotificationConfigurationOutputResponse, GetNotificationConfigurationOutputError>(id: "getNotificationConfiguration")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetNotificationConfigurationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetNotificationConfigurationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetNotificationConfigurationInput, GetNotificationConfigurationOutputResponse, GetNotificationConfigurationOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    ///             Returns the JSON-formatted resource-based policy on a profiling group.
    ///         </p>
    public func getPolicy(input: GetPolicyInput, completion: @escaping (SdkResult<GetPolicyOutputResponse, GetPolicyOutputError>) -> Void)
    {
        guard let profilingGroupName = input.profilingGroupName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component profilingGroupName unexpectedly nil"))))
            return
        }
        let urlPath = "/profilingGroups/\(profilingGroupName)/policy"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getPolicy")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "codeguru-profiler.\(config.region).amazonaws.com")
                      .withSigningName(value: "codeguru-profiler")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetPolicyInput, GetPolicyOutputResponse, GetPolicyOutputError>(id: "getPolicy")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetPolicyInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetPolicyInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetPolicyInput, GetPolicyOutputResponse, GetPolicyOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    ///          Gets the aggregated profile of a profiling group for a specified time range.
    ///          Amazon CodeGuru Profiler collects posted agent profiles for a profiling group
    ///          into aggregated profiles.
    ///      </p>
    ///
    ///          <note>
    ///             <p>
    ///             Because aggregated profiles expire over time <code>GetProfile</code> is not idempotent.
    ///          </p>
    ///          </note>
    ///
    ///          <p>
    ///          Specify the time range for the requested aggregated profile using 1 or 2 of the following parameters: <code>startTime</code>,
    ///          <code>endTime</code>, <code>period</code>. The maximum time range allowed is 7 days. If you specify all 3 parameters,
    ///          an exception is thrown. If you specify only <code>period</code>, the latest aggregated profile is returned.
    ///       </p>
    ///
    ///          <p>
    ///          Aggregated profiles are available with aggregation periods of 5 minutes, 1 hour, and 1 day, aligned to
    ///          UTC. The aggregation period of an aggregated profile determines how long it is retained. For more
    ///          information, see <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_AggregatedProfileTime.html">
    ///                <code>AggregatedProfileTime</code>
    ///             </a>. The aggregated profile's aggregation period determines how long
    ///          it is retained by CodeGuru Profiler.
    ///       </p>
    ///
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                If the aggregation period is 5 minutes, the aggregated profile is retained for 15 days.
    ///             </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                If the aggregation period is 1 hour, the aggregated profile is retained for 60 days.
    ///             </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                If the aggregation period is 1 day, the aggregated profile is retained for 3 years.
    ///             </p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p>There are two use cases for calling <code>GetProfile</code>.</p>
    ///          <ol>
    ///             <li>
    ///                <p>
    ///                If you want to return an aggregated profile that already exists, use
    ///                <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ListProfileTimes.html">
    ///                      <code>ListProfileTimes</code>
    ///                   </a> to
    ///                view the time ranges of existing aggregated profiles. Use them in a <code>GetProfile</code> request to return a specific,
    ///                existing aggregated profile.
    ///             </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                If you want to return an aggregated profile for a time range that doesn't align with an existing aggregated profile,
    ///                then CodeGuru Profiler makes a best effort to combine existing aggregated profiles from the requested time
    ///                range and return them as one aggregated profile.
    ///             </p>
    ///
    ///                <p> If aggregated profiles do not exist for the full time range requested, then
    ///                aggregated profiles for a smaller time range are returned. For example, if the
    ///                requested time range is from 00:00 to 00:20, and the existing aggregated profiles are
    ///                from 00:15 and 00:25, then the aggregated profiles from 00:15 to 00:20 are returned. </p>
    ///
    ///
    ///             </li>
    ///          </ol>
    public func getProfile(input: GetProfileInput, completion: @escaping (SdkResult<GetProfileOutputResponse, GetProfileOutputError>) -> Void)
    {
        guard let profilingGroupName = input.profilingGroupName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component profilingGroupName unexpectedly nil"))))
            return
        }
        let urlPath = "/profilingGroups/\(profilingGroupName)/profile"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getProfile")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "codeguru-profiler.\(config.region).amazonaws.com")
                      .withSigningName(value: "codeguru-profiler")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetProfileInput, GetProfileOutputResponse, GetProfileOutputError>(id: "getProfile")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetProfileInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetProfileInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetProfileInput, GetProfileOutputResponse, GetProfileOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    ///             Returns a list of
    ///             <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_Recommendation.html">
    ///                <code>Recommendation</code>
    ///             </a>
    ///             objects that contain recommendations for a profiling group for a given time period. A list of
    ///             <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_Anomaly.html">
    ///                <code>Anomaly</code>
    ///             </a>
    ///             objects that contains details about anomalies detected in the profiling group for the same time period is also
    ///             returned.
    ///         </p>
    public func getRecommendations(input: GetRecommendationsInput, completion: @escaping (SdkResult<GetRecommendationsOutputResponse, GetRecommendationsOutputError>) -> Void)
    {
        guard let profilingGroupName = input.profilingGroupName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component profilingGroupName unexpectedly nil"))))
            return
        }
        let urlPath = "/internal/profilingGroups/\(profilingGroupName)/recommendations"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getRecommendations")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "codeguru-profiler.\(config.region).amazonaws.com")
                      .withSigningName(value: "codeguru-profiler")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetRecommendationsInput, GetRecommendationsOutputResponse, GetRecommendationsOutputError>(id: "getRecommendations")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetRecommendationsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetRecommendationsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetRecommendationsInput, GetRecommendationsOutputResponse, GetRecommendationsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>List the available reports for a given profiling group and time range.</p>
    public func listFindingsReports(input: ListFindingsReportsInput, completion: @escaping (SdkResult<ListFindingsReportsOutputResponse, ListFindingsReportsOutputError>) -> Void)
    {
        guard let profilingGroupName = input.profilingGroupName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component profilingGroupName unexpectedly nil"))))
            return
        }
        let urlPath = "/internal/profilingGroups/\(profilingGroupName)/findingsReports"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listFindingsReports")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "codeguru-profiler.\(config.region).amazonaws.com")
                      .withSigningName(value: "codeguru-profiler")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListFindingsReportsInput, ListFindingsReportsOutputResponse, ListFindingsReportsOutputError>(id: "listFindingsReports")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListFindingsReportsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListFindingsReportsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListFindingsReportsInput, ListFindingsReportsOutputResponse, ListFindingsReportsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the start times of the available aggregated profiles of a profiling group
    ///         for an aggregation period within the specified time range.</p>
    public func listProfileTimes(input: ListProfileTimesInput, completion: @escaping (SdkResult<ListProfileTimesOutputResponse, ListProfileTimesOutputError>) -> Void)
    {
        guard let profilingGroupName = input.profilingGroupName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component profilingGroupName unexpectedly nil"))))
            return
        }
        let urlPath = "/profilingGroups/\(profilingGroupName)/profileTimes"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listProfileTimes")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "codeguru-profiler.\(config.region).amazonaws.com")
                      .withSigningName(value: "codeguru-profiler")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListProfileTimesInput, ListProfileTimesOutputResponse, ListProfileTimesOutputError>(id: "listProfileTimes")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListProfileTimesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListProfileTimesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListProfileTimesInput, ListProfileTimesOutputResponse, ListProfileTimesOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    ///          Returns a list of profiling groups. The profiling groups are returned as
    ///          <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ProfilingGroupDescription.html">
    ///                <code>ProfilingGroupDescription</code>
    ///             </a>
    ///          objects.
    ///       </p>
    public func listProfilingGroups(input: ListProfilingGroupsInput, completion: @escaping (SdkResult<ListProfilingGroupsOutputResponse, ListProfilingGroupsOutputError>) -> Void)
    {
        let urlPath = "/profilingGroups"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listProfilingGroups")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "codeguru-profiler.\(config.region).amazonaws.com")
                      .withSigningName(value: "codeguru-profiler")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListProfilingGroupsInput, ListProfilingGroupsOutputResponse, ListProfilingGroupsOutputError>(id: "listProfilingGroups")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListProfilingGroupsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListProfilingGroupsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListProfilingGroupsInput, ListProfilingGroupsOutputResponse, ListProfilingGroupsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    ///          Returns a list of the tags that are assigned to a specified resource.
    ///       </p>
    public func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    {
        guard let resourceArn = input.resourceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component resourceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/tags/\(resourceArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listTagsForResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "codeguru-profiler.\(config.region).amazonaws.com")
                      .withSigningName(value: "codeguru-profiler")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListTagsForResourceInput, ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>(id: "listTagsForResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListTagsForResourceInput, ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    ///          Submits profiling data to an aggregated profile of a profiling group. To get an
    ///          aggregated profile that is created with this profiling data, use
    ///          <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_GetProfile.html">
    ///                <code>GetProfile</code>
    ///             </a>.
    ///       </p>
    public func postAgentProfile(input: PostAgentProfileInput, completion: @escaping (SdkResult<PostAgentProfileOutputResponse, PostAgentProfileOutputError>) -> Void)
    {
        guard let profilingGroupName = input.profilingGroupName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component profilingGroupName unexpectedly nil"))))
            return
        }
        let urlPath = "/profilingGroups/\(profilingGroupName)/agentProfile"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "postAgentProfile")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "codeguru-profiler.\(config.region).amazonaws.com")
                      .withSigningName(value: "codeguru-profiler")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PostAgentProfileInput, PostAgentProfileOutputResponse, PostAgentProfileOutputError>(id: "postAgentProfile")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<PostAgentProfileOutputResponse>, SdkError<PostAgentProfileOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.profileToken == nil {
                copiedInput.profileToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: PostAgentProfileInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PostAgentProfileInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PostAgentProfileInput, PostAgentProfileOutputResponse, PostAgentProfileOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PostAgentProfileInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    ///             Adds permissions to a profiling group's resource-based policy
    ///             that are provided using an action group. If a profiling group doesn't have
    ///             a resource-based policy, one is created for it using the permissions in the action group and
    ///             the roles and users in the <code>principals</code> parameter.
    ///         </p>
    ///
    ///         <p> The one supported action group that can be added is <code>agentPermission</code>
    ///             which grants <code>ConfigureAgent</code> and <code>PostAgent</code> permissions. For
    ///             more information, see <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-ug/resource-based-policies.html">Resource-based
    ///                 policies in CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User
    ///                 Guide</i>, <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ConfigureAgent.html">
    ///                <code>ConfigureAgent</code>
    ///             </a>, and <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_PostAgentProfile.html">
    ///                <code>PostAgentProfile</code>
    ///             </a>. </p>
    ///
    ///         <p>
    ///             The first time you call <code>PutPermission</code> on a profiling group, do not specify a <code>revisionId</code> because
    ///             it doesn't have a resource-based policy. Subsequent calls must provide a <code>revisionId</code> to specify
    ///             which revision of the resource-based policy to add the permissions to.
    ///         </p>
    ///
    ///         <p>
    ///             The response contains the profiling group's JSON-formatted resource policy.
    ///         </p>
    public func putPermission(input: PutPermissionInput, completion: @escaping (SdkResult<PutPermissionOutputResponse, PutPermissionOutputError>) -> Void)
    {
        guard let profilingGroupName = input.profilingGroupName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component profilingGroupName unexpectedly nil"))))
            return
        }
        guard let actionGroup = input.actionGroup else {
            completion(.failure(.client(ClientError.serializationFailed("uri component actionGroup unexpectedly nil"))))
            return
        }
        let urlPath = "/profilingGroups/\(profilingGroupName)/policy/\(actionGroup.rawValue)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putPermission")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "codeguru-profiler.\(config.region).amazonaws.com")
                      .withSigningName(value: "codeguru-profiler")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<PutPermissionInput, PutPermissionOutputResponse, PutPermissionOutputError>(id: "putPermission")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: PutPermissionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: PutPermissionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<PutPermissionInput, PutPermissionOutputResponse, PutPermissionOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: PutPermissionInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Remove one anomaly notifications channel for a profiling group.</p>
    public func removeNotificationChannel(input: RemoveNotificationChannelInput, completion: @escaping (SdkResult<RemoveNotificationChannelOutputResponse, RemoveNotificationChannelOutputError>) -> Void)
    {
        guard let profilingGroupName = input.profilingGroupName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component profilingGroupName unexpectedly nil"))))
            return
        }
        guard let channelId = input.channelId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component channelId unexpectedly nil"))))
            return
        }
        let urlPath = "/profilingGroups/\(profilingGroupName)/notificationConfiguration/\(channelId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "removeNotificationChannel")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "codeguru-profiler.\(config.region).amazonaws.com")
                      .withSigningName(value: "codeguru-profiler")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RemoveNotificationChannelInput, RemoveNotificationChannelOutputResponse, RemoveNotificationChannelOutputError>(id: "removeNotificationChannel")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RemoveNotificationChannelInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RemoveNotificationChannelInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RemoveNotificationChannelInput, RemoveNotificationChannelOutputResponse, RemoveNotificationChannelOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p> Removes permissions from a profiling group's resource-based policy that are provided
    ///             using an action group. The one supported action group that can be removed is
    ///                 <code>agentPermission</code> which grants <code>ConfigureAgent</code> and
    ///                 <code>PostAgent</code> permissions. For more information, see <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-ug/resource-based-policies.html">Resource-based policies in CodeGuru Profiler</a> in the <i>Amazon
    ///                 CodeGuru Profiler User Guide</i>, <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ConfigureAgent.html">
    ///                <code>ConfigureAgent</code>
    ///             </a>, and <a href="https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_PostAgentProfile.html">
    ///                <code>PostAgentProfile</code>
    ///             </a>. </p>
    public func removePermission(input: RemovePermissionInput, completion: @escaping (SdkResult<RemovePermissionOutputResponse, RemovePermissionOutputError>) -> Void)
    {
        guard let profilingGroupName = input.profilingGroupName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component profilingGroupName unexpectedly nil"))))
            return
        }
        guard let actionGroup = input.actionGroup else {
            completion(.failure(.client(ClientError.serializationFailed("uri component actionGroup unexpectedly nil"))))
            return
        }
        let urlPath = "/profilingGroups/\(profilingGroupName)/policy/\(actionGroup.rawValue)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "removePermission")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "codeguru-profiler.\(config.region).amazonaws.com")
                      .withSigningName(value: "codeguru-profiler")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RemovePermissionInput, RemovePermissionOutputResponse, RemovePermissionOutputError>(id: "removePermission")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RemovePermissionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RemovePermissionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RemovePermissionInput, RemovePermissionOutputResponse, RemovePermissionOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Sends feedback to CodeGuru Profiler about whether the anomaly detected by the analysis is
    ///             useful or not.</p>
    public func submitFeedback(input: SubmitFeedbackInput, completion: @escaping (SdkResult<SubmitFeedbackOutputResponse, SubmitFeedbackOutputError>) -> Void)
    {
        guard let profilingGroupName = input.profilingGroupName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component profilingGroupName unexpectedly nil"))))
            return
        }
        guard let anomalyInstanceId = input.anomalyInstanceId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component anomalyInstanceId unexpectedly nil"))))
            return
        }
        let urlPath = "/internal/profilingGroups/\(profilingGroupName)/anomalies/\(anomalyInstanceId)/feedback"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "submitFeedback")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "codeguru-profiler.\(config.region).amazonaws.com")
                      .withSigningName(value: "codeguru-profiler")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<SubmitFeedbackInput, SubmitFeedbackOutputResponse, SubmitFeedbackOutputError>(id: "submitFeedback")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: SubmitFeedbackInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: SubmitFeedbackInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<SubmitFeedbackInput, SubmitFeedbackOutputResponse, SubmitFeedbackOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: SubmitFeedbackInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    ///          Use to assign one or more tags to a resource.
    ///       </p>
    public func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    {
        guard let resourceArn = input.resourceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component resourceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/tags/\(resourceArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "tagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "codeguru-profiler.\(config.region).amazonaws.com")
                      .withSigningName(value: "codeguru-profiler")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<TagResourceInput, TagResourceOutputResponse, TagResourceOutputError>(id: "tagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<TagResourceInput, TagResourceOutputResponse, TagResourceOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>
    ///          Use to remove one or more tags from a resource.
    ///       </p>
    public func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    {
        guard let resourceArn = input.resourceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component resourceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/tags/\(resourceArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "untagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "codeguru-profiler.\(config.region).amazonaws.com")
                      .withSigningName(value: "codeguru-profiler")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UntagResourceInput, UntagResourceOutputResponse, UntagResourceOutputError>(id: "untagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UntagResourceInput, UntagResourceOutputResponse, UntagResourceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates a profiling group.</p>
    public func updateProfilingGroup(input: UpdateProfilingGroupInput, completion: @escaping (SdkResult<UpdateProfilingGroupOutputResponse, UpdateProfilingGroupOutputError>) -> Void)
    {
        guard let profilingGroupName = input.profilingGroupName else {
            completion(.failure(.client(ClientError.serializationFailed("uri component profilingGroupName unexpectedly nil"))))
            return
        }
        let urlPath = "/profilingGroups/\(profilingGroupName)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateProfilingGroup")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "codeguru-profiler.\(config.region).amazonaws.com")
                      .withSigningName(value: "codeguru-profiler")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateProfilingGroupInput, UpdateProfilingGroupOutputResponse, UpdateProfilingGroupOutputError>(id: "updateProfilingGroup")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateProfilingGroupInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateProfilingGroupInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateProfilingGroupInput, UpdateProfilingGroupOutputResponse, UpdateProfilingGroupOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateProfilingGroupInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
