// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LocalVolumeResourceData: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destinationPath = "DestinationPath"
        case groupOwnerSetting = "GroupOwnerSetting"
        case sourcePath = "SourcePath"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationPath = destinationPath {
            try encodeContainer.encode(destinationPath, forKey: .destinationPath)
        }
        if let groupOwnerSetting = groupOwnerSetting {
            try encodeContainer.encode(groupOwnerSetting, forKey: .groupOwnerSetting)
        }
        if let sourcePath = sourcePath {
            try encodeContainer.encode(sourcePath, forKey: .sourcePath)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationPath)
        destinationPath = destinationPathDecoded
        let groupOwnerSettingDecoded = try containerValues.decodeIfPresent(GroupOwnerSetting.self, forKey: .groupOwnerSetting)
        groupOwnerSetting = groupOwnerSettingDecoded
        let sourcePathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourcePath)
        sourcePath = sourcePathDecoded
    }
}
