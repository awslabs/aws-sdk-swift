// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FunctionDefinitionVersion: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case defaultConfig = "DefaultConfig"
        case functions = "Functions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultConfig = defaultConfig {
            try encodeContainer.encode(defaultConfig, forKey: .defaultConfig)
        }
        if let functions = functions {
            var functionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .functions)
            for __listoffunction0 in functions {
                try functionsContainer.encode(__listoffunction0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultConfigDecoded = try containerValues.decodeIfPresent(FunctionDefaultConfig.self, forKey: .defaultConfig)
        defaultConfig = defaultConfigDecoded
        let functionsContainer = try containerValues.decodeIfPresent([Function].self, forKey: .functions)
        var functionsDecoded0:[Function]? = nil
        if let functionsContainer = functionsContainer {
            functionsDecoded0 = [Function]()
            for structure0 in functionsContainer {
                functionsDecoded0?.append(structure0)
            }
        }
        functions = functionsDecoded0
    }
}
