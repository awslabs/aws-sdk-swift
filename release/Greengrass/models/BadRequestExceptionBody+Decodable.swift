// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct BadRequestExceptionBody: Equatable {
    public let errorDetails: [ErrorDetail]?
    public let message: String?
}

extension BadRequestExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case errorDetails = "ErrorDetails"
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorDetailsContainer = try containerValues.decodeIfPresent([ErrorDetail].self, forKey: .errorDetails)
        var errorDetailsDecoded0:[ErrorDetail]? = nil
        if let errorDetailsContainer = errorDetailsContainer {
            errorDetailsDecoded0 = [ErrorDetail]()
            for structure0 in errorDetailsContainer {
                errorDetailsDecoded0?.append(structure0)
            }
        }
        errorDetails = errorDetailsDecoded0
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}
