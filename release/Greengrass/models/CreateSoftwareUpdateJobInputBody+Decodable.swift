// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateSoftwareUpdateJobInputBody: Equatable {
    public let s3UrlSignerRole: String?
    public let softwareToUpdate: SoftwareToUpdate?
    public let updateAgentLogLevel: UpdateAgentLogLevel?
    public let updateTargets: [String]?
    public let updateTargetsArchitecture: UpdateTargetsArchitecture?
    public let updateTargetsOperatingSystem: UpdateTargetsOperatingSystem?
}

extension CreateSoftwareUpdateJobInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case s3UrlSignerRole = "S3UrlSignerRole"
        case softwareToUpdate = "SoftwareToUpdate"
        case updateAgentLogLevel = "UpdateAgentLogLevel"
        case updateTargets = "UpdateTargets"
        case updateTargetsArchitecture = "UpdateTargetsArchitecture"
        case updateTargetsOperatingSystem = "UpdateTargetsOperatingSystem"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UrlSignerRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3UrlSignerRole)
        s3UrlSignerRole = s3UrlSignerRoleDecoded
        let softwareToUpdateDecoded = try containerValues.decodeIfPresent(SoftwareToUpdate.self, forKey: .softwareToUpdate)
        softwareToUpdate = softwareToUpdateDecoded
        let updateAgentLogLevelDecoded = try containerValues.decodeIfPresent(UpdateAgentLogLevel.self, forKey: .updateAgentLogLevel)
        updateAgentLogLevel = updateAgentLogLevelDecoded
        let updateTargetsContainer = try containerValues.decodeIfPresent([String].self, forKey: .updateTargets)
        var updateTargetsDecoded0:[String]? = nil
        if let updateTargetsContainer = updateTargetsContainer {
            updateTargetsDecoded0 = [String]()
            for string0 in updateTargetsContainer {
                updateTargetsDecoded0?.append(string0)
            }
        }
        updateTargets = updateTargetsDecoded0
        let updateTargetsArchitectureDecoded = try containerValues.decodeIfPresent(UpdateTargetsArchitecture.self, forKey: .updateTargetsArchitecture)
        updateTargetsArchitecture = updateTargetsArchitectureDecoded
        let updateTargetsOperatingSystemDecoded = try containerValues.decodeIfPresent(UpdateTargetsOperatingSystem.self, forKey: .updateTargetsOperatingSystem)
        updateTargetsOperatingSystem = updateTargetsOperatingSystemDecoded
    }
}
