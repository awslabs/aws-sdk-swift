// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConnectorDefinitionVersion: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case connectors = "Connectors"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectors = connectors {
            var connectorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .connectors)
            for __listofconnector0 in connectors {
                try connectorsContainer.encode(__listofconnector0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectorsContainer = try containerValues.decodeIfPresent([Connector].self, forKey: .connectors)
        var connectorsDecoded0:[Connector]? = nil
        if let connectorsContainer = connectorsContainer {
            connectorsDecoded0 = [Connector]()
            for structure0 in connectorsContainer {
                connectorsDecoded0?.append(structure0)
            }
        }
        connectors = connectorsDecoded0
    }
}
