// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FunctionConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case encodingType = "EncodingType"
        case environment = "Environment"
        case execArgs = "ExecArgs"
        case executable = "Executable"
        case memorySize = "MemorySize"
        case pinned = "Pinned"
        case timeout = "Timeout"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encodingType = encodingType {
            try encodeContainer.encode(encodingType.rawValue, forKey: .encodingType)
        }
        if let environment = environment {
            try encodeContainer.encode(environment, forKey: .environment)
        }
        if let execArgs = execArgs {
            try encodeContainer.encode(execArgs, forKey: .execArgs)
        }
        if let executable = executable {
            try encodeContainer.encode(executable, forKey: .executable)
        }
        if memorySize != 0 {
            try encodeContainer.encode(memorySize, forKey: .memorySize)
        }
        if pinned != false {
            try encodeContainer.encode(pinned, forKey: .pinned)
        }
        if timeout != 0 {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let encodingTypeDecoded = try containerValues.decodeIfPresent(EncodingType.self, forKey: .encodingType)
        encodingType = encodingTypeDecoded
        let environmentDecoded = try containerValues.decodeIfPresent(FunctionConfigurationEnvironment.self, forKey: .environment)
        environment = environmentDecoded
        let execArgsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .execArgs)
        execArgs = execArgsDecoded
        let executableDecoded = try containerValues.decodeIfPresent(String.self, forKey: .executable)
        executable = executableDecoded
        let memorySizeDecoded = try containerValues.decode(Int.self, forKey: .memorySize)
        memorySize = memorySizeDecoded
        let pinnedDecoded = try containerValues.decode(Bool.self, forKey: .pinned)
        pinned = pinnedDecoded
        let timeoutDecoded = try containerValues.decode(Int.self, forKey: .timeout)
        timeout = timeoutDecoded
    }
}
