// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Connector: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case connectorArn = "ConnectorArn"
        case id = "Id"
        case parameters = "Parameters"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectorArn = connectorArn {
            try encodeContainer.encode(connectorArn, forKey: .connectorArn)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .parameters)
            for (dictKey0, __mapof__string0) in parameters {
                try parametersContainer.encode(__mapof__string0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectorArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .connectorArn)
        connectorArn = connectorArnDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let parametersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .parameters)
        var parametersDecoded0: [String:String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [String:String]()
            for (key0, __string0) in parametersContainer {
                parametersDecoded0?[key0] = __string0
            }
        }
        parameters = parametersDecoded0
    }
}
