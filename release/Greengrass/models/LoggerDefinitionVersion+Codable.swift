// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LoggerDefinitionVersion: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case loggers = "Loggers"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let loggers = loggers {
            var loggersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .loggers)
            for __listoflogger0 in loggers {
                try loggersContainer.encode(__listoflogger0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loggersContainer = try containerValues.decodeIfPresent([Logger].self, forKey: .loggers)
        var loggersDecoded0:[Logger]? = nil
        if let loggersContainer = loggersContainer {
            loggersDecoded0 = [Logger]()
            for structure0 in loggersContainer {
                loggersDecoded0?.append(structure0)
            }
        }
        loggers = loggersDecoded0
    }
}
