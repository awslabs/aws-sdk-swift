// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FunctionConfigurationEnvironment: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accessSysfs = "AccessSysfs"
        case execution = "Execution"
        case resourceAccessPolicies = "ResourceAccessPolicies"
        case variables = "Variables"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if accessSysfs != false {
            try encodeContainer.encode(accessSysfs, forKey: .accessSysfs)
        }
        if let execution = execution {
            try encodeContainer.encode(execution, forKey: .execution)
        }
        if let resourceAccessPolicies = resourceAccessPolicies {
            var resourceAccessPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAccessPolicies)
            for __listofresourceaccesspolicy0 in resourceAccessPolicies {
                try resourceAccessPoliciesContainer.encode(__listofresourceaccesspolicy0)
            }
        }
        if let variables = variables {
            var variablesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .variables)
            for (dictKey0, __mapof__string0) in variables {
                try variablesContainer.encode(__mapof__string0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessSysfsDecoded = try containerValues.decode(Bool.self, forKey: .accessSysfs)
        accessSysfs = accessSysfsDecoded
        let executionDecoded = try containerValues.decodeIfPresent(FunctionExecutionConfig.self, forKey: .execution)
        execution = executionDecoded
        let resourceAccessPoliciesContainer = try containerValues.decodeIfPresent([ResourceAccessPolicy].self, forKey: .resourceAccessPolicies)
        var resourceAccessPoliciesDecoded0:[ResourceAccessPolicy]? = nil
        if let resourceAccessPoliciesContainer = resourceAccessPoliciesContainer {
            resourceAccessPoliciesDecoded0 = [ResourceAccessPolicy]()
            for structure0 in resourceAccessPoliciesContainer {
                resourceAccessPoliciesDecoded0?.append(structure0)
            }
        }
        resourceAccessPolicies = resourceAccessPoliciesDecoded0
        let variablesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .variables)
        var variablesDecoded0: [String:String]? = nil
        if let variablesContainer = variablesContainer {
            variablesDecoded0 = [String:String]()
            for (key0, __string0) in variablesContainer {
                variablesDecoded0?[key0] = __string0
            }
        }
        variables = variablesDecoded0
    }
}
