// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateContainerServiceInputBody: Equatable {
    public let power: ContainerServicePowerName?
    public let scale: Int?
    public let isDisabled: Bool?
    public let publicDomainNames: [String:[String]?]?
}

extension UpdateContainerServiceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case isDisabled
        case power
        case publicDomainNames
        case scale
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let powerDecoded = try containerValues.decodeIfPresent(ContainerServicePowerName.self, forKey: .power)
        power = powerDecoded
        let scaleDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .scale)
        scale = scaleDecoded
        let isDisabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .isDisabled)
        isDisabled = isDisabledDecoded
        let publicDomainNamesContainer = try containerValues.decodeIfPresent([String:[String]?].self, forKey: .publicDomainNames)
        var publicDomainNamesDecoded0: [String:[String]?]? = nil
        if let publicDomainNamesContainer = publicDomainNamesContainer {
            publicDomainNamesDecoded0 = [String:[String]?]()
            for (key0, containerservicepublicdomainslist0) in publicDomainNamesContainer {
                var containerservicepublicdomainslist0Decoded0 = [String]()
                if let containerservicepublicdomainslist0 = containerservicepublicdomainslist0 {
                    for string1 in containerservicepublicdomainslist0 {
                        containerservicepublicdomainslist0Decoded0.append(string1)
                    }
                }
                publicDomainNamesDecoded0?[key0] = containerservicepublicdomainslist0Decoded0
            }
        }
        publicDomainNames = publicDomainNamesDecoded0
    }
}
