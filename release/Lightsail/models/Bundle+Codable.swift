// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Bundle: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bundleId
        case cpuCount
        case diskSizeInGb
        case instanceType
        case isActive
        case name
        case power
        case price
        case ramSizeInGb
        case supportedPlatforms
        case transferPerMonthInGb
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bundleId = bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let cpuCount = cpuCount {
            try encodeContainer.encode(cpuCount, forKey: .cpuCount)
        }
        if let diskSizeInGb = diskSizeInGb {
            try encodeContainer.encode(diskSizeInGb, forKey: .diskSizeInGb)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let isActive = isActive {
            try encodeContainer.encode(isActive, forKey: .isActive)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let power = power {
            try encodeContainer.encode(power, forKey: .power)
        }
        if let price = price {
            try encodeContainer.encode(price, forKey: .price)
        }
        if let ramSizeInGb = ramSizeInGb {
            try encodeContainer.encode(ramSizeInGb, forKey: .ramSizeInGb)
        }
        if let supportedPlatforms = supportedPlatforms {
            var supportedPlatformsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedPlatforms)
            for instanceplatformlist0 in supportedPlatforms {
                try supportedPlatformsContainer.encode(instanceplatformlist0.rawValue)
            }
        }
        if let transferPerMonthInGb = transferPerMonthInGb {
            try encodeContainer.encode(transferPerMonthInGb, forKey: .transferPerMonthInGb)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let priceDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .price)
        price = priceDecoded
        let cpuCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .cpuCount)
        cpuCount = cpuCountDecoded
        let diskSizeInGbDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .diskSizeInGb)
        diskSizeInGb = diskSizeInGbDecoded
        let bundleIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let isActiveDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .isActive)
        isActive = isActiveDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let powerDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .power)
        power = powerDecoded
        let ramSizeInGbDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .ramSizeInGb)
        ramSizeInGb = ramSizeInGbDecoded
        let transferPerMonthInGbDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .transferPerMonthInGb)
        transferPerMonthInGb = transferPerMonthInGbDecoded
        let supportedPlatformsContainer = try containerValues.decodeIfPresent([InstancePlatform].self, forKey: .supportedPlatforms)
        var supportedPlatformsDecoded0:[InstancePlatform]? = nil
        if let supportedPlatformsContainer = supportedPlatformsContainer {
            supportedPlatformsDecoded0 = [InstancePlatform]()
            for string0 in supportedPlatformsContainer {
                supportedPlatformsDecoded0?.append(string0)
            }
        }
        supportedPlatforms = supportedPlatformsDecoded0
    }
}
