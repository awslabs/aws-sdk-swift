// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum LoadBalancerTlsCertificateRevocationReason {
    case aacompromise
    case affiliationchanged
    case cacompromise
    case certificatehold
    case cessationofoperation
    case keycompromise
    case privilegewithdrawn
    case removefromcrl
    case superceded
    case unspecified
    case sdkUnknown(String)
}

extension LoadBalancerTlsCertificateRevocationReason : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [LoadBalancerTlsCertificateRevocationReason] {
        return [
            .aacompromise,
            .affiliationchanged,
            .cacompromise,
            .certificatehold,
            .cessationofoperation,
            .keycompromise,
            .privilegewithdrawn,
            .removefromcrl,
            .superceded,
            .unspecified,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .aacompromise: return "A_A_COMPROMISE"
        case .affiliationchanged: return "AFFILIATION_CHANGED"
        case .cacompromise: return "CA_COMPROMISE"
        case .certificatehold: return "CERTIFICATE_HOLD"
        case .cessationofoperation: return "CESSATION_OF_OPERATION"
        case .keycompromise: return "KEY_COMPROMISE"
        case .privilegewithdrawn: return "PRIVILEGE_WITHDRAWN"
        case .removefromcrl: return "REMOVE_FROM_CRL"
        case .superceded: return "SUPERCEDED"
        case .unspecified: return "UNSPECIFIED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = LoadBalancerTlsCertificateRevocationReason(rawValue: rawValue) ?? LoadBalancerTlsCertificateRevocationReason.sdkUnknown(rawValue)
    }
}
