// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ExportSnapshotRecordSourceInfo: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case createdAt
        case diskSnapshotInfo
        case fromResourceArn
        case fromResourceName
        case instanceSnapshotInfo
        case name
        case resourceType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let diskSnapshotInfo = diskSnapshotInfo {
            try encodeContainer.encode(diskSnapshotInfo, forKey: .diskSnapshotInfo)
        }
        if let fromResourceArn = fromResourceArn {
            try encodeContainer.encode(fromResourceArn, forKey: .fromResourceArn)
        }
        if let fromResourceName = fromResourceName {
            try encodeContainer.encode(fromResourceName, forKey: .fromResourceName)
        }
        if let instanceSnapshotInfo = instanceSnapshotInfo {
            try encodeContainer.encode(instanceSnapshotInfo, forKey: .instanceSnapshotInfo)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ExportSnapshotRecordSourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let fromResourceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fromResourceName)
        fromResourceName = fromResourceNameDecoded
        let fromResourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fromResourceArn)
        fromResourceArn = fromResourceArnDecoded
        let instanceSnapshotInfoDecoded = try containerValues.decodeIfPresent(InstanceSnapshotInfo.self, forKey: .instanceSnapshotInfo)
        instanceSnapshotInfo = instanceSnapshotInfoDecoded
        let diskSnapshotInfoDecoded = try containerValues.decodeIfPresent(DiskSnapshotInfo.self, forKey: .diskSnapshotInfo)
        diskSnapshotInfo = diskSnapshotInfoDecoded
    }
}
