// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum ResourceType {
    case alarm
    case certificate
    case cloudformationstackrecord
    case contactmethod
    case containerservice
    case disk
    case disksnapshot
    case distribution
    case domain
    case exportsnapshotrecord
    case instance
    case instancesnapshot
    case keypair
    case loadbalancer
    case loadbalancertlscertificate
    case peeredvpc
    case relationaldatabase
    case relationaldatabasesnapshot
    case staticip
    case sdkUnknown(String)
}

extension ResourceType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ResourceType] {
        return [
            .alarm,
            .certificate,
            .cloudformationstackrecord,
            .contactmethod,
            .containerservice,
            .disk,
            .disksnapshot,
            .distribution,
            .domain,
            .exportsnapshotrecord,
            .instance,
            .instancesnapshot,
            .keypair,
            .loadbalancer,
            .loadbalancertlscertificate,
            .peeredvpc,
            .relationaldatabase,
            .relationaldatabasesnapshot,
            .staticip,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .alarm: return "Alarm"
        case .certificate: return "Certificate"
        case .cloudformationstackrecord: return "CloudFormationStackRecord"
        case .contactmethod: return "ContactMethod"
        case .containerservice: return "ContainerService"
        case .disk: return "Disk"
        case .disksnapshot: return "DiskSnapshot"
        case .distribution: return "Distribution"
        case .domain: return "Domain"
        case .exportsnapshotrecord: return "ExportSnapshotRecord"
        case .instance: return "Instance"
        case .instancesnapshot: return "InstanceSnapshot"
        case .keypair: return "KeyPair"
        case .loadbalancer: return "LoadBalancer"
        case .loadbalancertlscertificate: return "LoadBalancerTlsCertificate"
        case .peeredvpc: return "PeeredVpc"
        case .relationaldatabase: return "RelationalDatabase"
        case .relationaldatabasesnapshot: return "RelationalDatabaseSnapshot"
        case .staticip: return "StaticIp"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ResourceType(rawValue: rawValue) ?? ResourceType.sdkUnknown(rawValue)
    }
}
