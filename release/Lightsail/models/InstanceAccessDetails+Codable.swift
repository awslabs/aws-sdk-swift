// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstanceAccessDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case certKey
        case expiresAt
        case hostKeys
        case instanceName
        case ipAddress
        case password
        case passwordData
        case privateKey
        case `protocol` = "protocol"
        case username
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certKey = certKey {
            try encodeContainer.encode(certKey, forKey: .certKey)
        }
        if let expiresAt = expiresAt {
            try encodeContainer.encode(expiresAt.timeIntervalSince1970, forKey: .expiresAt)
        }
        if let hostKeys = hostKeys {
            var hostKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .hostKeys)
            for hostkeyslist0 in hostKeys {
                try hostKeysContainer.encode(hostkeyslist0)
            }
        }
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let ipAddress = ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let password = password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let passwordData = passwordData {
            try encodeContainer.encode(passwordData, forKey: .passwordData)
        }
        if let privateKey = privateKey {
            try encodeContainer.encode(privateKey, forKey: .privateKey)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certKey)
        certKey = certKeyDecoded
        let expiresAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .expiresAt)
        expiresAt = expiresAtDecoded
        let ipAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .password)
        password = passwordDecoded
        let passwordDataDecoded = try containerValues.decodeIfPresent(PasswordData.self, forKey: .passwordData)
        passwordData = passwordDataDecoded
        let privateKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .privateKey)
        privateKey = privateKeyDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(InstanceAccessProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let instanceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .username)
        username = usernameDecoded
        let hostKeysContainer = try containerValues.decodeIfPresent([HostKeyAttributes].self, forKey: .hostKeys)
        var hostKeysDecoded0:[HostKeyAttributes]? = nil
        if let hostKeysContainer = hostKeysContainer {
            hostKeysDecoded0 = [HostKeyAttributes]()
            for structure0 in hostKeysContainer {
                hostKeysDecoded0?.append(structure0)
            }
        }
        hostKeys = hostKeysDecoded0
    }
}
