// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DomainEntry: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id
        case isAlias
        case name
        case options
        case target
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let isAlias = isAlias {
            try encodeContainer.encode(isAlias, forKey: .isAlias)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let options = options {
            var optionsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .options)
            for (dictKey0, domainentryoptions0) in options {
                try optionsContainer.encode(domainentryoptions0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let target = target {
            try encodeContainer.encode(target, forKey: .target)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let targetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .target)
        target = targetDecoded
        let isAliasDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .isAlias)
        isAlias = isAliasDecoded
        let typeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .type)
        type = typeDecoded
        let optionsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .options)
        var optionsDecoded0: [String:String]? = nil
        if let optionsContainer = optionsContainer {
            optionsDecoded0 = [String:String]()
            for (key0, string0) in optionsContainer {
                optionsDecoded0?[key0] = string0
            }
        }
        options = optionsDecoded0
    }
}
