// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Describes an alarm.</p>
///          <p>An alarm is a way to monitor your Amazon Lightsail resource metrics. For more information,
///       see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms
///         in Amazon Lightsail</a>.</p>
public struct Alarm: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the alarm.</p>
    public let arn: String?
    /// <p>The arithmetic operation used when comparing the specified statistic and threshold.</p>
    public let comparisonOperator: ComparisonOperator?
    /// <p>The contact protocols for the alarm, such as <code>Email</code>, <code>SMS</code> (text
    ///       messaging), or both.</p>
    public let contactProtocols: [ContactProtocol]?
    /// <p>The timestamp when the alarm was created.</p>
    public let createdAt: Date?
    /// <p>The number of data points that must not within the specified threshold to trigger the
    ///       alarm.</p>
    public let datapointsToAlarm: Int?
    /// <p>The number of periods over which data is compared to the specified threshold.</p>
    public let evaluationPeriods: Int?
    /// <p>An object that lists information about the location of the alarm.</p>
    public let location: ResourceLocation?
    /// <p>The name of the metric associated with the alarm.</p>
    public let metricName: MetricName?
    /// <p>An object that lists information about the resource monitored by the alarm.</p>
    public let monitoredResourceInfo: MonitoredResourceInfo?
    /// <p>The name of the alarm.</p>
    public let name: String?
    /// <p>Indicates whether the alarm is enabled.</p>
    public let notificationEnabled: Bool?
    /// <p>The alarm states that trigger a notification.</p>
    public let notificationTriggers: [AlarmState]?
    /// <p>The period, in seconds, over which the statistic is applied.</p>
    public let period: Int
    /// <p>The Lightsail resource type (e.g., <code>Alarm</code>).</p>
    public let resourceType: ResourceType?
    /// <p>The current state of the alarm.</p>
    ///          <p>An alarm has the following possible states:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ALARM</code> - The metric is outside of the defined threshold.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>INSUFFICIENT_DATA</code> - The alarm has just started, the metric is not
    ///           available, or not enough data is available for the metric to determine the alarm
    ///           state.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>OK</code> - The metric is within the defined threshold.</p>
    ///             </li>
    ///          </ul>
    public let state: AlarmState?
    /// <p>The statistic for the metric associated with the alarm.</p>
    ///          <p>The following statistics are available:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Minimum</code> - The lowest value observed during the specified period. Use this
    ///           value to determine low volumes of activity for your application.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Maximum</code> - The highest value observed during the specified period. Use
    ///           this value to determine high volumes of activity for your application.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Sum</code> - All values submitted for the matching metric added together. You
    ///           can use this statistic to determine the total volume of a metric.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Average</code> - The value of Sum / SampleCount during the specified period. By
    ///           comparing this statistic with the Minimum and Maximum values, you can determine the full
    ///           scope of a metric and how close the average use is to the Minimum and Maximum values. This
    ///           comparison helps you to know when to increase or decrease your resources.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SampleCount</code> - The count, or number, of data points used for the
    ///           statistical calculation.</p>
    ///             </li>
    ///          </ul>
    public let statistic: MetricStatistic?
    /// <p>The support code. Include this code in your email to support when you have questions about
    ///       your Lightsail alarm. This code enables our support team to look up your Lightsail
    ///       information more easily.</p>
    public let supportCode: String?
    /// <p>The value against which the specified statistic is compared.</p>
    public let threshold: Double?
    /// <p>Specifies how the alarm handles missing data points.</p>
    ///          <p>An alarm can treat missing data in the following ways:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>breaching</code> - Assume the missing data is not within the threshold. Missing
    ///           data counts towards the number of times the metric is not within the threshold.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>notBreaching</code> - Assume the missing data is within the threshold. Missing
    ///           data does not count towards the number of times the metric is not within the
    ///           threshold.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ignore</code> - Ignore the missing data. Maintains the current alarm
    ///           state.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>missing</code> - Missing data is treated as missing.</p>
    ///             </li>
    ///          </ul>
    public let treatMissingData: TreatMissingData?
    /// <p>The unit of the metric associated with the alarm.</p>
    public let unit: MetricUnit?

    public init (
        arn: String? = nil,
        comparisonOperator: ComparisonOperator? = nil,
        contactProtocols: [ContactProtocol]? = nil,
        createdAt: Date? = nil,
        datapointsToAlarm: Int? = nil,
        evaluationPeriods: Int? = nil,
        location: ResourceLocation? = nil,
        metricName: MetricName? = nil,
        monitoredResourceInfo: MonitoredResourceInfo? = nil,
        name: String? = nil,
        notificationEnabled: Bool? = nil,
        notificationTriggers: [AlarmState]? = nil,
        period: Int = 0,
        resourceType: ResourceType? = nil,
        state: AlarmState? = nil,
        statistic: MetricStatistic? = nil,
        supportCode: String? = nil,
        threshold: Double? = nil,
        treatMissingData: TreatMissingData? = nil,
        unit: MetricUnit? = nil
    )
    {
        self.arn = arn
        self.comparisonOperator = comparisonOperator
        self.contactProtocols = contactProtocols
        self.createdAt = createdAt
        self.datapointsToAlarm = datapointsToAlarm
        self.evaluationPeriods = evaluationPeriods
        self.location = location
        self.metricName = metricName
        self.monitoredResourceInfo = monitoredResourceInfo
        self.name = name
        self.notificationEnabled = notificationEnabled
        self.notificationTriggers = notificationTriggers
        self.period = period
        self.resourceType = resourceType
        self.state = state
        self.statistic = statistic
        self.supportCode = supportCode
        self.threshold = threshold
        self.treatMissingData = treatMissingData
        self.unit = unit
    }
}
