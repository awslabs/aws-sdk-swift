// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstanceHardware: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cpuCount
        case disks
        case ramSizeInGb
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cpuCount = cpuCount {
            try encodeContainer.encode(cpuCount, forKey: .cpuCount)
        }
        if let disks = disks {
            var disksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .disks)
            for disklist0 in disks {
                try disksContainer.encode(disklist0)
            }
        }
        if let ramSizeInGb = ramSizeInGb {
            try encodeContainer.encode(ramSizeInGb, forKey: .ramSizeInGb)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cpuCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .cpuCount)
        cpuCount = cpuCountDecoded
        let disksContainer = try containerValues.decodeIfPresent([Disk].self, forKey: .disks)
        var disksDecoded0:[Disk]? = nil
        if let disksContainer = disksContainer {
            disksDecoded0 = [Disk]()
            for structure0 in disksContainer {
                disksDecoded0?.append(structure0)
            }
        }
        disks = disksDecoded0
        let ramSizeInGbDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .ramSizeInGb)
        ramSizeInGb = ramSizeInGbDecoded
    }
}
