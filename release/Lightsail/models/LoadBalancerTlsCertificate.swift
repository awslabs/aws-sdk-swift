// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Describes a load balancer SSL/TLS certificate.</p>
///          <p>TLS is just an updated, more secure version of Secure Socket Layer (SSL).</p>
public struct LoadBalancerTlsCertificate: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the SSL/TLS certificate.</p>
    public let arn: String?
    /// <p>The time when you created your SSL/TLS certificate.</p>
    public let createdAt: Date?
    /// <p>The domain name for your SSL/TLS certificate.</p>
    public let domainName: String?
    /// <p>An array of LoadBalancerTlsCertificateDomainValidationRecord objects describing the
    ///       records.</p>
    public let domainValidationRecords: [LoadBalancerTlsCertificateDomainValidationRecord]?
    /// <p>The validation failure reason, if any, of the certificate.</p>
    ///
    ///          <p>The following failure reasons are possible:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>NO_AVAILABLE_CONTACTS</code>
    ///                   </b> - This failure
    ///           applies to email validation, which is not available for Lightsail certificates.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>ADDITIONAL_VERIFICATION_REQUIRED</code>
    ///                   </b> -
    ///           Lightsail requires additional information to process this certificate request. This can
    ///           happen as a fraud-protection measure, such as when the domain ranks within the Alexa top
    ///           1000 websites. To provide the required information, use the <a href="https://console.aws.amazon.com/support/home">AWS Support Center</a> to contact
    ///           AWS Support.</p>
    ///                <note>
    ///                   <p>You cannot request a certificate for Amazon-owned domain names such as those ending
    ///             in amazonaws.com, cloudfront.net, or elasticbeanstalk.com.</p>
    ///                </note>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>DOMAIN_NOT_ALLOWED</code>
    ///                   </b> - One or more of the
    ///           domain names in the certificate request was reported as an unsafe domain by <a href="https://www.virustotal.com/gui/home/url">VirusTotal</a>. To correct the
    ///           problem, search for your domain name on the <a href="https://www.virustotal.com/gui/home/url">VirusTotal</a> website. If your domain
    ///           is reported as suspicious, see <a href="https://developers.google.com/web/fundamentals/security/hacked">Google Help for
    ///             Hacked Websites</a> to learn what you can do.</p>
    ///                <p>If you believe that the result is a false positive, notify the organization that is
    ///           reporting the domain. VirusTotal is an aggregate of several antivirus and URL scanners and
    ///           cannot remove your domain from a block list itself. After you correct the problem and the
    ///           VirusTotal registry has been updated, request a new certificate.</p>
    ///                <p>If you see this error and your domain is not included in the VirusTotal list, visit
    ///           the <a href="https://console.aws.amazon.com/support/home">AWS Support Center</a>
    ///           and create a case.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>INVALID_PUBLIC_DOMAIN</code>
    ///                   </b> - One or more of
    ///           the domain names in the certificate request is not valid. Typically, this is because a
    ///           domain name in the request is not a valid top-level domain. Try to request a certificate
    ///           again, correcting any spelling errors or typos that were in the failed request, and ensure
    ///           that all domain names in the request are for valid top-level domains. For example, you
    ///           cannot request a certificate for <code>example.invalidpublicdomain</code> because
    ///             <code>invalidpublicdomain</code> is not a valid top-level domain.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>OTHER</code>
    ///                   </b> - Typically, this failure occurs
    ///           when there is a typographical error in one or more of the domain names in the certificate
    ///           request. Try to request a certificate again, correcting any spelling errors or typos that
    ///           were in the failed request. </p>
    ///             </li>
    ///          </ul>
    public let failureReason: LoadBalancerTlsCertificateFailureReason?
    /// <p>When <code>true</code>, the SSL/TLS certificate is attached to the Lightsail load
    ///       balancer.</p>
    public let isAttached: Bool?
    /// <p>The time when the SSL/TLS certificate was issued.</p>
    public let issuedAt: Date?
    /// <p>The issuer of the certificate.</p>
    public let issuer: String?
    /// <p>The algorithm used to generate the key pair (the public and private key).</p>
    public let keyAlgorithm: String?
    /// <p>The load balancer name where your SSL/TLS certificate is attached.</p>
    public let loadBalancerName: String?
    /// <p>The AWS Region and Availability Zone where you created your certificate.</p>
    public let location: ResourceLocation?
    /// <p>The name of the SSL/TLS certificate (e.g., <code>my-certificate</code>).</p>
    public let name: String?
    /// <p>The timestamp when the SSL/TLS certificate expires.</p>
    public let notAfter: Date?
    /// <p>The timestamp when the SSL/TLS certificate is first valid.</p>
    public let notBefore: Date?
    /// <p>An object that describes the status of the certificate renewal managed by
    ///       Lightsail.</p>
    public let renewalSummary: LoadBalancerTlsCertificateRenewalSummary?
    /// <p>The resource type (e.g., <code>LoadBalancerTlsCertificate</code>).</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>Instance</code>
    ///                   </b> - A Lightsail instance (a
    ///           virtual private server)</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>StaticIp</code>
    ///                   </b> - A static IP address</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>KeyPair</code>
    ///                   </b> - The key pair used to connect
    ///           to a Lightsail instance</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>InstanceSnapshot</code>
    ///                   </b> - A Lightsail
    ///           instance snapshot</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>Domain</code>
    ///                   </b> - A DNS zone</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>PeeredVpc</code>
    ///                   </b> - A peered VPC</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>LoadBalancer</code>
    ///                   </b> - A Lightsail load
    ///           balancer</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>LoadBalancerTlsCertificate</code>
    ///                   </b> - An SSL/TLS
    ///           certificate associated with a Lightsail load balancer</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>Disk</code>
    ///                   </b> - A Lightsail block storage
    ///           disk</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>DiskSnapshot</code>
    ///                   </b> - A block storage disk
    ///           snapshot</p>
    ///             </li>
    ///          </ul>
    public let resourceType: ResourceType?
    /// <p>The reason the certificate was revoked. This value is present only when the certificate
    ///       status is <code>REVOKED</code>.</p>
    public let revocationReason: LoadBalancerTlsCertificateRevocationReason?
    /// <p>The timestamp when the certificate was revoked. This value is present only when the
    ///       certificate status is <code>REVOKED</code>.</p>
    public let revokedAt: Date?
    /// <p>The serial number of the certificate.</p>
    public let serial: String?
    /// <p>The algorithm that was used to sign the certificate.</p>
    public let signatureAlgorithm: String?
    /// <p>The validation status of the SSL/TLS certificate. Valid values are below.</p>
    public let status: LoadBalancerTlsCertificateStatus?
    /// <p>The name of the entity that is associated with the public key contained in the
    ///       certificate.</p>
    public let subject: String?
    /// <p>An array of strings that specify the alternate domains (e.g., <code>example2.com</code>)
    ///       and subdomains (e.g., <code>blog.example.com</code>) for the certificate.</p>
    public let subjectAlternativeNames: [String]?
    /// <p>The support code. Include this code in your email to support when you have questions about
    ///       your Lightsail load balancer or SSL/TLS certificate. This code enables our support team to
    ///       look up your Lightsail information more easily.</p>
    public let supportCode: String?
    /// <p>The tag keys and optional values for the resource. For more information about tags in
    ///       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Lightsail
    ///         Dev Guide</a>.</p>
    public let tags: [Tag]?

    public init (
        arn: String? = nil,
        createdAt: Date? = nil,
        domainName: String? = nil,
        domainValidationRecords: [LoadBalancerTlsCertificateDomainValidationRecord]? = nil,
        failureReason: LoadBalancerTlsCertificateFailureReason? = nil,
        isAttached: Bool? = nil,
        issuedAt: Date? = nil,
        issuer: String? = nil,
        keyAlgorithm: String? = nil,
        loadBalancerName: String? = nil,
        location: ResourceLocation? = nil,
        name: String? = nil,
        notAfter: Date? = nil,
        notBefore: Date? = nil,
        renewalSummary: LoadBalancerTlsCertificateRenewalSummary? = nil,
        resourceType: ResourceType? = nil,
        revocationReason: LoadBalancerTlsCertificateRevocationReason? = nil,
        revokedAt: Date? = nil,
        serial: String? = nil,
        signatureAlgorithm: String? = nil,
        status: LoadBalancerTlsCertificateStatus? = nil,
        subject: String? = nil,
        subjectAlternativeNames: [String]? = nil,
        supportCode: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.arn = arn
        self.createdAt = createdAt
        self.domainName = domainName
        self.domainValidationRecords = domainValidationRecords
        self.failureReason = failureReason
        self.isAttached = isAttached
        self.issuedAt = issuedAt
        self.issuer = issuer
        self.keyAlgorithm = keyAlgorithm
        self.loadBalancerName = loadBalancerName
        self.location = location
        self.name = name
        self.notAfter = notAfter
        self.notBefore = notBefore
        self.renewalSummary = renewalSummary
        self.resourceType = resourceType
        self.revocationReason = revocationReason
        self.revokedAt = revokedAt
        self.serial = serial
        self.signatureAlgorithm = signatureAlgorithm
        self.status = status
        self.subject = subject
        self.subjectAlternativeNames = subjectAlternativeNames
        self.supportCode = supportCode
        self.tags = tags
    }
}
