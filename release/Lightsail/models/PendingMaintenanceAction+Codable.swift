// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PendingMaintenanceAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case action
        case currentApplyDate
        case description
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let currentApplyDate = currentApplyDate {
            try encodeContainer.encode(currentApplyDate.timeIntervalSince1970, forKey: .currentApplyDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .action)
        action = actionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let currentApplyDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .currentApplyDate)
        currentApplyDate = currentApplyDateDecoded
    }
}
