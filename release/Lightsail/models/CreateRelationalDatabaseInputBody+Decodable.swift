// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateRelationalDatabaseInputBody: Equatable {
    public let relationalDatabaseName: String?
    public let availabilityZone: String?
    public let relationalDatabaseBlueprintId: String?
    public let relationalDatabaseBundleId: String?
    public let masterDatabaseName: String?
    public let masterUsername: String?
    public let masterUserPassword: String?
    public let preferredBackupWindow: String?
    public let preferredMaintenanceWindow: String?
    public let publiclyAccessible: Bool?
    public let tags: [Tag]?
}

extension CreateRelationalDatabaseInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case availabilityZone
        case masterDatabaseName
        case masterUserPassword
        case masterUsername
        case preferredBackupWindow
        case preferredMaintenanceWindow
        case publiclyAccessible
        case relationalDatabaseBlueprintId
        case relationalDatabaseBundleId
        case relationalDatabaseName
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let relationalDatabaseBlueprintIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .relationalDatabaseBlueprintId)
        relationalDatabaseBlueprintId = relationalDatabaseBlueprintIdDecoded
        let relationalDatabaseBundleIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .relationalDatabaseBundleId)
        relationalDatabaseBundleId = relationalDatabaseBundleIdDecoded
        let masterDatabaseNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .masterDatabaseName)
        masterDatabaseName = masterDatabaseNameDecoded
        let masterUsernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .masterUsername)
        masterUsername = masterUsernameDecoded
        let masterUserPasswordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .masterUserPassword)
        masterUserPassword = masterUserPasswordDecoded
        let preferredBackupWindowDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preferredBackupWindow)
        preferredBackupWindow = preferredBackupWindowDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
