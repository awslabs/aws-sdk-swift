// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ContainerServiceDeployment: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case containers
        case createdAt
        case publicEndpoint
        case state
        case version
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containers = containers {
            var containersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .containers)
            for (dictKey0, containermap0) in containers {
                try containersContainer.encode(containermap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let publicEndpoint = publicEndpoint {
            try encodeContainer.encode(publicEndpoint, forKey: .publicEndpoint)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .version)
        version = versionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ContainerServiceDeploymentState.self, forKey: .state)
        state = stateDecoded
        let containersContainer = try containerValues.decodeIfPresent([String:Container].self, forKey: .containers)
        var containersDecoded0: [String:Container]? = nil
        if let containersContainer = containersContainer {
            containersDecoded0 = [String:Container]()
            for (key0, container0) in containersContainer {
                containersDecoded0?[key0] = container0
            }
        }
        containers = containersDecoded0
        let publicEndpointDecoded = try containerValues.decodeIfPresent(ContainerServiceEndpoint.self, forKey: .publicEndpoint)
        publicEndpoint = publicEndpointDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}
