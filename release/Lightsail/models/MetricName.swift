// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum MetricName {
    case burstcapacitypercentage
    case burstcapacitytime
    case cpuutilization
    case clienttlsnegotiationerrorcount
    case databaseconnections
    case diskqueuedepth
    case freestoragespace
    case httpcodeInstance2xxCount
    case httpcodeInstance3xxCount
    case httpcodeInstance4xxCount
    case httpcodeInstance5xxCount
    case httpcodeLb4xxCount
    case httpcodeLb5xxCount
    case healthyhostcount
    case instanceresponsetime
    case networkin
    case networkout
    case networkreceivethroughput
    case networktransmitthroughput
    case rejectedconnectioncount
    case requestcount
    case statuscheckfailed
    case statuscheckfailedInstance
    case statuscheckfailedSystem
    case unhealthyhostcount
    case sdkUnknown(String)
}

extension MetricName : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MetricName] {
        return [
            .burstcapacitypercentage,
            .burstcapacitytime,
            .cpuutilization,
            .clienttlsnegotiationerrorcount,
            .databaseconnections,
            .diskqueuedepth,
            .freestoragespace,
            .httpcodeInstance2xxCount,
            .httpcodeInstance3xxCount,
            .httpcodeInstance4xxCount,
            .httpcodeInstance5xxCount,
            .httpcodeLb4xxCount,
            .httpcodeLb5xxCount,
            .healthyhostcount,
            .instanceresponsetime,
            .networkin,
            .networkout,
            .networkreceivethroughput,
            .networktransmitthroughput,
            .rejectedconnectioncount,
            .requestcount,
            .statuscheckfailed,
            .statuscheckfailedInstance,
            .statuscheckfailedSystem,
            .unhealthyhostcount,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .burstcapacitypercentage: return "BurstCapacityPercentage"
        case .burstcapacitytime: return "BurstCapacityTime"
        case .cpuutilization: return "CPUUtilization"
        case .clienttlsnegotiationerrorcount: return "ClientTLSNegotiationErrorCount"
        case .databaseconnections: return "DatabaseConnections"
        case .diskqueuedepth: return "DiskQueueDepth"
        case .freestoragespace: return "FreeStorageSpace"
        case .httpcodeInstance2xxCount: return "HTTPCode_Instance_2XX_Count"
        case .httpcodeInstance3xxCount: return "HTTPCode_Instance_3XX_Count"
        case .httpcodeInstance4xxCount: return "HTTPCode_Instance_4XX_Count"
        case .httpcodeInstance5xxCount: return "HTTPCode_Instance_5XX_Count"
        case .httpcodeLb4xxCount: return "HTTPCode_LB_4XX_Count"
        case .httpcodeLb5xxCount: return "HTTPCode_LB_5XX_Count"
        case .healthyhostcount: return "HealthyHostCount"
        case .instanceresponsetime: return "InstanceResponseTime"
        case .networkin: return "NetworkIn"
        case .networkout: return "NetworkOut"
        case .networkreceivethroughput: return "NetworkReceiveThroughput"
        case .networktransmitthroughput: return "NetworkTransmitThroughput"
        case .rejectedconnectioncount: return "RejectedConnectionCount"
        case .requestcount: return "RequestCount"
        case .statuscheckfailed: return "StatusCheckFailed"
        case .statuscheckfailedInstance: return "StatusCheckFailed_Instance"
        case .statuscheckfailedSystem: return "StatusCheckFailed_System"
        case .unhealthyhostcount: return "UnhealthyHostCount"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MetricName(rawValue: rawValue) ?? MetricName.sdkUnknown(rawValue)
    }
}
