// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ContainerImage: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createdAt
        case digest
        case image
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let digest = digest {
            try encodeContainer.encode(digest, forKey: .digest)
        }
        if let image = image {
            try encodeContainer.encode(image, forKey: .image)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .image)
        image = imageDecoded
        let digestDecoded = try containerValues.decodeIfPresent(String.self, forKey: .digest)
        digest = digestDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}
