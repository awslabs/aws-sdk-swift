// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateInstancesFromSnapshotInputBody: Equatable {
    public let instanceNames: [String]?
    public let attachedDiskMapping: [String:[DiskMap]?]?
    public let availabilityZone: String?
    public let instanceSnapshotName: String?
    public let bundleId: String?
    public let userData: String?
    public let keyPairName: String?
    public let tags: [Tag]?
    public let addOns: [AddOnRequest]?
    public let ipAddressType: IpAddressType?
    public let sourceInstanceName: String?
    public let restoreDate: String?
    public let useLatestRestorableAutoSnapshot: Bool?
}

extension CreateInstancesFromSnapshotInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case addOns
        case attachedDiskMapping
        case availabilityZone
        case bundleId
        case instanceNames
        case instanceSnapshotName
        case ipAddressType
        case keyPairName
        case restoreDate
        case sourceInstanceName
        case tags
        case useLatestRestorableAutoSnapshot
        case userData
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .instanceNames)
        var instanceNamesDecoded0:[String]? = nil
        if let instanceNamesContainer = instanceNamesContainer {
            instanceNamesDecoded0 = [String]()
            for string0 in instanceNamesContainer {
                instanceNamesDecoded0?.append(string0)
            }
        }
        instanceNames = instanceNamesDecoded0
        let attachedDiskMappingContainer = try containerValues.decodeIfPresent([String:[DiskMap]?].self, forKey: .attachedDiskMapping)
        var attachedDiskMappingDecoded0: [String:[DiskMap]?]? = nil
        if let attachedDiskMappingContainer = attachedDiskMappingContainer {
            attachedDiskMappingDecoded0 = [String:[DiskMap]?]()
            for (key0, diskmaplist0) in attachedDiskMappingContainer {
                var diskmaplist0Decoded0 = [DiskMap]()
                if let diskmaplist0 = diskmaplist0 {
                    for structure1 in diskmaplist0 {
                        diskmaplist0Decoded0.append(structure1)
                    }
                }
                attachedDiskMappingDecoded0?[key0] = diskmaplist0Decoded0
            }
        }
        attachedDiskMapping = attachedDiskMappingDecoded0
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let instanceSnapshotNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceSnapshotName)
        instanceSnapshotName = instanceSnapshotNameDecoded
        let bundleIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let userDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userData)
        userData = userDataDecoded
        let keyPairNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyPairName)
        keyPairName = keyPairNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let addOnsContainer = try containerValues.decodeIfPresent([AddOnRequest].self, forKey: .addOns)
        var addOnsDecoded0:[AddOnRequest]? = nil
        if let addOnsContainer = addOnsContainer {
            addOnsDecoded0 = [AddOnRequest]()
            for structure0 in addOnsContainer {
                addOnsDecoded0?.append(structure0)
            }
        }
        addOns = addOnsDecoded0
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let sourceInstanceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceInstanceName)
        sourceInstanceName = sourceInstanceNameDecoded
        let restoreDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .restoreDate)
        restoreDate = restoreDateDecoded
        let useLatestRestorableAutoSnapshotDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .useLatestRestorableAutoSnapshot)
        useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshotDecoded
    }
}
