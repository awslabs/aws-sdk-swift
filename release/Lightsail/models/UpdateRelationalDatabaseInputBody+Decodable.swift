// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateRelationalDatabaseInputBody: Equatable {
    public let relationalDatabaseName: String?
    public let masterUserPassword: String?
    public let rotateMasterUserPassword: Bool?
    public let preferredBackupWindow: String?
    public let preferredMaintenanceWindow: String?
    public let enableBackupRetention: Bool?
    public let disableBackupRetention: Bool?
    public let publiclyAccessible: Bool?
    public let applyImmediately: Bool?
    public let caCertificateIdentifier: String?
}

extension UpdateRelationalDatabaseInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applyImmediately
        case caCertificateIdentifier
        case disableBackupRetention
        case enableBackupRetention
        case masterUserPassword
        case preferredBackupWindow
        case preferredMaintenanceWindow
        case publiclyAccessible
        case relationalDatabaseName
        case rotateMasterUserPassword
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let masterUserPasswordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .masterUserPassword)
        masterUserPassword = masterUserPasswordDecoded
        let rotateMasterUserPasswordDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .rotateMasterUserPassword)
        rotateMasterUserPassword = rotateMasterUserPasswordDecoded
        let preferredBackupWindowDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preferredBackupWindow)
        preferredBackupWindow = preferredBackupWindowDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let enableBackupRetentionDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enableBackupRetention)
        enableBackupRetention = enableBackupRetentionDecoded
        let disableBackupRetentionDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .disableBackupRetention)
        disableBackupRetention = disableBackupRetentionDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let applyImmediatelyDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .applyImmediately)
        applyImmediately = applyImmediatelyDecoded
        let caCertificateIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .caCertificateIdentifier)
        caCertificateIdentifier = caCertificateIdentifierDecoded
    }
}
