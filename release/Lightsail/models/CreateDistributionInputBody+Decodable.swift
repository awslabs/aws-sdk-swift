// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDistributionInputBody: Equatable {
    public let distributionName: String?
    public let origin: InputOrigin?
    public let defaultCacheBehavior: CacheBehavior?
    public let cacheBehaviorSettings: CacheSettings?
    public let cacheBehaviors: [CacheBehaviorPerPath]?
    public let bundleId: String?
    public let ipAddressType: IpAddressType?
    public let tags: [Tag]?
}

extension CreateDistributionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case bundleId
        case cacheBehaviorSettings
        case cacheBehaviors
        case defaultCacheBehavior
        case distributionName
        case ipAddressType
        case origin
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .distributionName)
        distributionName = distributionNameDecoded
        let originDecoded = try containerValues.decodeIfPresent(InputOrigin.self, forKey: .origin)
        origin = originDecoded
        let defaultCacheBehaviorDecoded = try containerValues.decodeIfPresent(CacheBehavior.self, forKey: .defaultCacheBehavior)
        defaultCacheBehavior = defaultCacheBehaviorDecoded
        let cacheBehaviorSettingsDecoded = try containerValues.decodeIfPresent(CacheSettings.self, forKey: .cacheBehaviorSettings)
        cacheBehaviorSettings = cacheBehaviorSettingsDecoded
        let cacheBehaviorsContainer = try containerValues.decodeIfPresent([CacheBehaviorPerPath].self, forKey: .cacheBehaviors)
        var cacheBehaviorsDecoded0:[CacheBehaviorPerPath]? = nil
        if let cacheBehaviorsContainer = cacheBehaviorsContainer {
            cacheBehaviorsDecoded0 = [CacheBehaviorPerPath]()
            for structure0 in cacheBehaviorsContainer {
                cacheBehaviorsDecoded0?.append(structure0)
            }
        }
        cacheBehaviors = cacheBehaviorsDecoded0
        let bundleIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
