// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutAlarmInputBody: Equatable {
    public let alarmName: String?
    public let metricName: MetricName?
    public let monitoredResourceName: String?
    public let comparisonOperator: ComparisonOperator?
    public let threshold: Double?
    public let evaluationPeriods: Int?
    public let datapointsToAlarm: Int?
    public let treatMissingData: TreatMissingData?
    public let contactProtocols: [ContactProtocol]?
    public let notificationTriggers: [AlarmState]?
    public let notificationEnabled: Bool?
}

extension PutAlarmInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case alarmName
        case comparisonOperator
        case contactProtocols
        case datapointsToAlarm
        case evaluationPeriods
        case metricName
        case monitoredResourceName
        case notificationEnabled
        case notificationTriggers
        case threshold
        case treatMissingData
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(MetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let monitoredResourceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .monitoredResourceName)
        monitoredResourceName = monitoredResourceNameDecoded
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(ComparisonOperator.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let thresholdDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .threshold)
        threshold = thresholdDecoded
        let evaluationPeriodsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .evaluationPeriods)
        evaluationPeriods = evaluationPeriodsDecoded
        let datapointsToAlarmDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .datapointsToAlarm)
        datapointsToAlarm = datapointsToAlarmDecoded
        let treatMissingDataDecoded = try containerValues.decodeIfPresent(TreatMissingData.self, forKey: .treatMissingData)
        treatMissingData = treatMissingDataDecoded
        let contactProtocolsContainer = try containerValues.decodeIfPresent([ContactProtocol].self, forKey: .contactProtocols)
        var contactProtocolsDecoded0:[ContactProtocol]? = nil
        if let contactProtocolsContainer = contactProtocolsContainer {
            contactProtocolsDecoded0 = [ContactProtocol]()
            for string0 in contactProtocolsContainer {
                contactProtocolsDecoded0?.append(string0)
            }
        }
        contactProtocols = contactProtocolsDecoded0
        let notificationTriggersContainer = try containerValues.decodeIfPresent([AlarmState].self, forKey: .notificationTriggers)
        var notificationTriggersDecoded0:[AlarmState]? = nil
        if let notificationTriggersContainer = notificationTriggersContainer {
            notificationTriggersDecoded0 = [AlarmState]()
            for string0 in notificationTriggersContainer {
                notificationTriggersDecoded0?.append(string0)
            }
        }
        notificationTriggers = notificationTriggersDecoded0
        let notificationEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .notificationEnabled)
        notificationEnabled = notificationEnabledDecoded
    }
}
