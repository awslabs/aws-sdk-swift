// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DiskMap: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case newDiskName
        case originalDiskPath
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let newDiskName = newDiskName {
            try encodeContainer.encode(newDiskName, forKey: .newDiskName)
        }
        if let originalDiskPath = originalDiskPath {
            try encodeContainer.encode(originalDiskPath, forKey: .originalDiskPath)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let originalDiskPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .originalDiskPath)
        originalDiskPath = originalDiskPathDecoded
        let newDiskNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .newDiskName)
        newDiskName = newDiskNameDecoded
    }
}
