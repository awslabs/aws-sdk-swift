// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InputOrigin: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name
        case protocolPolicy
        case regionName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let protocolPolicy = protocolPolicy {
            try encodeContainer.encode(protocolPolicy.rawValue, forKey: .protocolPolicy)
        }
        if let regionName = regionName {
            try encodeContainer.encode(regionName.rawValue, forKey: .regionName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let regionNameDecoded = try containerValues.decodeIfPresent(RegionName.self, forKey: .regionName)
        regionName = regionNameDecoded
        let protocolPolicyDecoded = try containerValues.decodeIfPresent(OriginProtocolPolicyEnum.self, forKey: .protocolPolicy)
        protocolPolicy = protocolPolicyDecoded
    }
}
