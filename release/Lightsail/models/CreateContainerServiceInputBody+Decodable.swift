// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateContainerServiceInputBody: Equatable {
    public let serviceName: String?
    public let power: ContainerServicePowerName?
    public let scale: Int?
    public let tags: [Tag]?
    public let publicDomainNames: [String:[String]?]?
    public let deployment: ContainerServiceDeploymentRequest?
}

extension CreateContainerServiceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deployment
        case power
        case publicDomainNames
        case scale
        case serviceName
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let powerDecoded = try containerValues.decodeIfPresent(ContainerServicePowerName.self, forKey: .power)
        power = powerDecoded
        let scaleDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .scale)
        scale = scaleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let publicDomainNamesContainer = try containerValues.decodeIfPresent([String:[String]?].self, forKey: .publicDomainNames)
        var publicDomainNamesDecoded0: [String:[String]?]? = nil
        if let publicDomainNamesContainer = publicDomainNamesContainer {
            publicDomainNamesDecoded0 = [String:[String]?]()
            for (key0, containerservicepublicdomainslist0) in publicDomainNamesContainer {
                var containerservicepublicdomainslist0Decoded0 = [String]()
                if let containerservicepublicdomainslist0 = containerservicepublicdomainslist0 {
                    for string1 in containerservicepublicdomainslist0 {
                        containerservicepublicdomainslist0Decoded0.append(string1)
                    }
                }
                publicDomainNamesDecoded0?[key0] = containerservicepublicdomainslist0Decoded0
            }
        }
        publicDomainNames = publicDomainNamesDecoded0
        let deploymentDecoded = try containerValues.decodeIfPresent(ContainerServiceDeploymentRequest.self, forKey: .deployment)
        deployment = deploymentDecoded
    }
}
