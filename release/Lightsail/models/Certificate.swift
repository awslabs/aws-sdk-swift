// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Describes the full details of an Amazon Lightsail SSL/TLS certificate.</p>
///          <note>
///             <p>To get a summary of a certificate, use the <code>GetCertificates</code> action and ommit
///           <code>includeCertificateDetails</code> from your request. The response will include only
///         the certificate Amazon Resource Name (ARN), certificate name, domain name, and tags.</p>
///          </note>
public struct Certificate: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the certificate.</p>
    public let arn: String?
    /// <p>The timestamp when the certificate was created.</p>
    public let createdAt: Date?
    /// <p>The domain name of the certificate.</p>
    public let domainName: String?
    /// <p>An array of objects that describe the domain validation records of the certificate.</p>
    public let domainValidationRecords: [DomainValidationRecord]?
    /// <p>The renewal eligibility of the certificate.</p>
    public let eligibleToRenew: String?
    /// <p>The number of Lightsail resources that the certificate is attached to.</p>
    public let inUseResourceCount: Int
    /// <p>The timestamp when the certificate was issued.</p>
    public let issuedAt: Date?
    /// <p>The certificate authority that issued the certificate.</p>
    public let issuerCA: String?
    /// <p>The algorithm used to generate the key pair (the public and private key) of the
    ///       certificate.</p>
    public let keyAlgorithm: String?
    /// <p>The name of the certificate (e.g., <code>my-certificate</code>).</p>
    public let name: String?
    /// <p>The timestamp when the certificate expires.</p>
    public let notAfter: Date?
    /// <p>The timestamp when the certificate is first valid.</p>
    public let notBefore: Date?
    /// <p>An object that describes the status of the certificate renewal managed by
    ///       Lightsail.</p>
    public let renewalSummary: RenewalSummary?
    /// <p>The validation failure reason, if any, of the certificate.</p>
    ///          <p>The following failure reasons are possible:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>NO_AVAILABLE_CONTACTS</code>
    ///                   </b> - This failure
    ///           applies to email validation, which is not available for Lightsail certificates.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>ADDITIONAL_VERIFICATION_REQUIRED</code>
    ///                   </b> -
    ///           Lightsail requires additional information to process this certificate request. This can
    ///           happen as a fraud-protection measure, such as when the domain ranks within the Alexa top
    ///           1000 websites. To provide the required information, use the <a href="https://console.aws.amazon.com/support/home">AWS Support Center</a> to contact
    ///           AWS Support.</p>
    ///                <note>
    ///                   <p>You cannot request a certificate for Amazon-owned domain names such as those ending
    ///             in amazonaws.com, cloudfront.net, or elasticbeanstalk.com.</p>
    ///                </note>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>DOMAIN_NOT_ALLOWED</code>
    ///                   </b> - One or more of the
    ///           domain names in the certificate request was reported as an unsafe domain by <a href="https://www.virustotal.com/gui/home/url">VirusTotal</a>. To correct the
    ///           problem, search for your domain name on the <a href="https://www.virustotal.com/gui/home/url">VirusTotal</a> website. If your domain
    ///           is reported as suspicious, see <a href="https://developers.google.com/web/fundamentals/security/hacked">Google Help for
    ///             Hacked Websites</a> to learn what you can do.</p>
    ///                <p>If you believe that the result is a false positive, notify the organization that is
    ///           reporting the domain. VirusTotal is an aggregate of several antivirus and URL scanners and
    ///           cannot remove your domain from a block list itself. After you correct the problem and the
    ///           VirusTotal registry has been updated, request a new certificate.</p>
    ///                <p>If you see this error and your domain is not included in the VirusTotal list, visit
    ///           the <a href="https://console.aws.amazon.com/support/home">AWS Support Center</a>
    ///           and create a case.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>INVALID_PUBLIC_DOMAIN</code>
    ///                   </b> - One or more of
    ///           the domain names in the certificate request is not valid. Typically, this is because a
    ///           domain name in the request is not a valid top-level domain. Try to request a certificate
    ///           again, correcting any spelling errors or typos that were in the failed request, and ensure
    ///           that all domain names in the request are for valid top-level domains. For example, you
    ///           cannot request a certificate for <code>example.invalidpublicdomain</code> because
    ///             <code>invalidpublicdomain</code> is not a valid top-level domain.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>
    ///                      <code>OTHER</code>
    ///                   </b> - Typically, this failure occurs
    ///           when there is a typographical error in one or more of the domain names in the certificate
    ///           request. Try to request a certificate again, correcting any spelling errors or typos that
    ///           were in the failed request. </p>
    ///             </li>
    ///          </ul>
    public let requestFailureReason: String?
    /// <p>The reason the certificate was revoked. This value is present only when the certificate
    ///       status is <code>REVOKED</code>.</p>
    public let revocationReason: String?
    /// <p>The timestamp when the certificate was revoked. This value is present only when the
    ///       certificate status is <code>REVOKED</code>.</p>
    public let revokedAt: Date?
    /// <p>The serial number of the certificate.</p>
    public let serialNumber: String?
    /// <p>The validation status of the certificate.</p>
    public let status: CertificateStatus?
    /// <p>An array of strings that specify the alternate domains (e.g., <code>example2.com</code>)
    ///       and subdomains (e.g., <code>blog.example.com</code>) of the certificate.</p>
    public let subjectAlternativeNames: [String]?
    /// <p>The support code. Include this code in your email to support when you have questions about
    ///       your Lightsail certificate. This code enables our support team to look up your Lightsail
    ///       information more easily.</p>
    public let supportCode: String?
    /// <p>The tag keys and optional values for the resource. For more information about tags in
    ///       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Lightsail
    ///         Dev Guide</a>.</p>
    public let tags: [Tag]?

    public init (
        arn: String? = nil,
        createdAt: Date? = nil,
        domainName: String? = nil,
        domainValidationRecords: [DomainValidationRecord]? = nil,
        eligibleToRenew: String? = nil,
        inUseResourceCount: Int = 0,
        issuedAt: Date? = nil,
        issuerCA: String? = nil,
        keyAlgorithm: String? = nil,
        name: String? = nil,
        notAfter: Date? = nil,
        notBefore: Date? = nil,
        renewalSummary: RenewalSummary? = nil,
        requestFailureReason: String? = nil,
        revocationReason: String? = nil,
        revokedAt: Date? = nil,
        serialNumber: String? = nil,
        status: CertificateStatus? = nil,
        subjectAlternativeNames: [String]? = nil,
        supportCode: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.arn = arn
        self.createdAt = createdAt
        self.domainName = domainName
        self.domainValidationRecords = domainValidationRecords
        self.eligibleToRenew = eligibleToRenew
        self.inUseResourceCount = inUseResourceCount
        self.issuedAt = issuedAt
        self.issuerCA = issuerCA
        self.keyAlgorithm = keyAlgorithm
        self.name = name
        self.notAfter = notAfter
        self.notBefore = notBefore
        self.renewalSummary = renewalSummary
        self.requestFailureReason = requestFailureReason
        self.revocationReason = revocationReason
        self.revokedAt = revokedAt
        self.serialNumber = serialNumber
        self.status = status
        self.subjectAlternativeNames = subjectAlternativeNames
        self.supportCode = supportCode
        self.tags = tags
    }
}
