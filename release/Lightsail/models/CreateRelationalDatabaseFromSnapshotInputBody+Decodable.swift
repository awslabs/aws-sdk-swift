// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateRelationalDatabaseFromSnapshotInputBody: Equatable {
    public let relationalDatabaseName: String?
    public let availabilityZone: String?
    public let publiclyAccessible: Bool?
    public let relationalDatabaseSnapshotName: String?
    public let relationalDatabaseBundleId: String?
    public let sourceRelationalDatabaseName: String?
    public let restoreTime: Date?
    public let useLatestRestorableTime: Bool?
    public let tags: [Tag]?
}

extension CreateRelationalDatabaseFromSnapshotInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case availabilityZone
        case publiclyAccessible
        case relationalDatabaseBundleId
        case relationalDatabaseName
        case relationalDatabaseSnapshotName
        case restoreTime
        case sourceRelationalDatabaseName
        case tags
        case useLatestRestorableTime
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let relationalDatabaseSnapshotNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .relationalDatabaseSnapshotName)
        relationalDatabaseSnapshotName = relationalDatabaseSnapshotNameDecoded
        let relationalDatabaseBundleIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .relationalDatabaseBundleId)
        relationalDatabaseBundleId = relationalDatabaseBundleIdDecoded
        let sourceRelationalDatabaseNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceRelationalDatabaseName)
        sourceRelationalDatabaseName = sourceRelationalDatabaseNameDecoded
        let restoreTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .restoreTime)
        restoreTime = restoreTimeDecoded
        let useLatestRestorableTimeDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .useLatestRestorableTime)
        useLatestRestorableTime = useLatestRestorableTimeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
