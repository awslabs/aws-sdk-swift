// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateLoadBalancerInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case certificateAlternativeNames
        case certificateDomainName
        case certificateName
        case healthCheckPath
        case instancePort
        case ipAddressType
        case loadBalancerName
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateAlternativeNames = certificateAlternativeNames {
            var certificateAlternativeNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .certificateAlternativeNames)
            for domainnamelist0 in certificateAlternativeNames {
                try certificateAlternativeNamesContainer.encode(domainnamelist0)
            }
        }
        if let certificateDomainName = certificateDomainName {
            try encodeContainer.encode(certificateDomainName, forKey: .certificateDomainName)
        }
        if let certificateName = certificateName {
            try encodeContainer.encode(certificateName, forKey: .certificateName)
        }
        if let healthCheckPath = healthCheckPath {
            try encodeContainer.encode(healthCheckPath, forKey: .healthCheckPath)
        }
        if instancePort != 0 {
            try encodeContainer.encode(instancePort, forKey: .instancePort)
        }
        if let ipAddressType = ipAddressType {
            try encodeContainer.encode(ipAddressType.rawValue, forKey: .ipAddressType)
        }
        if let loadBalancerName = loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
