// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstanceEntry: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availabilityZone
        case instanceType
        case portInfoSource
        case sourceName
        case userData
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let portInfoSource = portInfoSource {
            try encodeContainer.encode(portInfoSource.rawValue, forKey: .portInfoSource)
        }
        if let sourceName = sourceName {
            try encodeContainer.encode(sourceName, forKey: .sourceName)
        }
        if let userData = userData {
            try encodeContainer.encode(userData, forKey: .userData)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceName)
        sourceName = sourceNameDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let portInfoSourceDecoded = try containerValues.decodeIfPresent(PortInfoSourceType.self, forKey: .portInfoSource)
        portInfoSource = portInfoSourceDecoded
        let userDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userData)
        userData = userDataDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
    }
}
