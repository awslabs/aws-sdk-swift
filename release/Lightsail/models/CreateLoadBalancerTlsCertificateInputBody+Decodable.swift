// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateLoadBalancerTlsCertificateInputBody: Equatable {
    public let loadBalancerName: String?
    public let certificateName: String?
    public let certificateDomainName: String?
    public let certificateAlternativeNames: [String]?
    public let tags: [Tag]?
}

extension CreateLoadBalancerTlsCertificateInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case certificateAlternativeNames
        case certificateDomainName
        case certificateName
        case loadBalancerName
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let certificateNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
        let certificateDomainNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificateDomainName)
        certificateDomainName = certificateDomainNameDecoded
        let certificateAlternativeNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .certificateAlternativeNames)
        var certificateAlternativeNamesDecoded0:[String]? = nil
        if let certificateAlternativeNamesContainer = certificateAlternativeNamesContainer {
            certificateAlternativeNamesDecoded0 = [String]()
            for string0 in certificateAlternativeNamesContainer {
                certificateAlternativeNamesDecoded0?.append(string0)
            }
        }
        certificateAlternativeNames = certificateAlternativeNamesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
