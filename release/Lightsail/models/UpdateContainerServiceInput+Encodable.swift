// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateContainerServiceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case isDisabled
        case power
        case publicDomainNames
        case scale
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let isDisabled = isDisabled {
            try encodeContainer.encode(isDisabled, forKey: .isDisabled)
        }
        if let power = power {
            try encodeContainer.encode(power.rawValue, forKey: .power)
        }
        if let publicDomainNames = publicDomainNames {
            var publicDomainNamesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .publicDomainNames)
            for (dictKey0, containerservicepublicdomains0) in publicDomainNames {
                try publicDomainNamesContainer.encode(containerservicepublicdomains0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let scale = scale {
            try encodeContainer.encode(scale, forKey: .scale)
        }
    }
}
