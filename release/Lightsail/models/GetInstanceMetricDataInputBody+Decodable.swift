// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetInstanceMetricDataInputBody: Equatable {
    public let instanceName: String?
    public let metricName: InstanceMetricName?
    public let period: Int
    public let startTime: Date?
    public let endTime: Date?
    public let unit: MetricUnit?
    public let statistics: [MetricStatistic]?
}

extension GetInstanceMetricDataInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case endTime
        case instanceName
        case metricName
        case period
        case startTime
        case statistics
        case unit
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(InstanceMetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let periodDecoded = try containerValues.decode(Int.self, forKey: .period)
        period = periodDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let unitDecoded = try containerValues.decodeIfPresent(MetricUnit.self, forKey: .unit)
        unit = unitDecoded
        let statisticsContainer = try containerValues.decodeIfPresent([MetricStatistic].self, forKey: .statistics)
        var statisticsDecoded0:[MetricStatistic]? = nil
        if let statisticsContainer = statisticsContainer {
            statisticsDecoded0 = [MetricStatistic]()
            for string0 in statisticsContainer {
                statisticsDecoded0?.append(string0)
            }
        }
        statistics = statisticsDecoded0
    }
}
