// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstanceNetworking: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case monthlyTransfer
        case ports
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let monthlyTransfer = monthlyTransfer {
            try encodeContainer.encode(monthlyTransfer, forKey: .monthlyTransfer)
        }
        if let ports = ports {
            var portsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ports)
            for instanceportinfolist0 in ports {
                try portsContainer.encode(instanceportinfolist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monthlyTransferDecoded = try containerValues.decodeIfPresent(MonthlyTransfer.self, forKey: .monthlyTransfer)
        monthlyTransfer = monthlyTransferDecoded
        let portsContainer = try containerValues.decodeIfPresent([InstancePortInfo].self, forKey: .ports)
        var portsDecoded0:[InstancePortInfo]? = nil
        if let portsContainer = portsContainer {
            portsDecoded0 = [InstancePortInfo]()
            for structure0 in portsContainer {
                portsDecoded0?.append(structure0)
            }
        }
        ports = portsDecoded0
    }
}
