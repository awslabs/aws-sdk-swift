// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetContainerLogInput: Equatable {
    /// <p>The name of the container that is either running or previously ran on the container
    ///       service for which to return a log.</p>
    public let containerName: String?
    /// <p>The end of the time interval for which to get log data.</p>
    ///
    ///          <p>Constraints:</p>
    ///
    ///          <ul>
    ///             <li>
    ///                <p>Specified in Coordinated Universal Time (UTC).</p>
    ///             </li>
    ///             <li>
    ///                <p>Specified in the Unix time format.</p>
    ///
    ///                <p>For example, if you wish to use an end time of October 1, 2018, at 9 PM UTC, specify
    ///             <code>1538427600</code> as the end time.</p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p>You can convert a human-friendly time to Unix time format using a converter like <a href="https://www.epochconverter.com/">Epoch converter</a>.</p>
    public let endTime: Date?
    /// <p>The pattern to use to filter the returned log events to a specific term.</p>
    ///
    ///          <p>The following are a few examples of filter patterns that you can specify:</p>
    ///          <ul>
    ///             <li>
    ///                <p>To return all log events, specify a filter pattern of <code>""</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>To exclude log events that contain the <code>ERROR</code> term, and return all other
    ///           log events, specify a filter pattern of <code>"-ERROR"</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>To return log events that contain the <code>ERROR</code> term, specify a filter
    ///           pattern of <code>"ERROR"</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>To return log events that contain both the <code>ERROR</code> and
    ///             <code>Exception</code> terms, specify a filter pattern of <code>"ERROR
    ///           Exception"</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>To return log events that contain the <code>ERROR</code>
    ///                   <i>or</i> the <code>Exception</code> term, specify a filter pattern of
    ///             <code>"?ERROR ?Exception"</code>.</p>
    ///             </li>
    ///          </ul>
    public let filterPattern: String?
    /// <p>The token to advance to the next page of results from your request.</p>
    ///
    ///          <p>To get a page token, perform an initial <code>GetContainerLog</code> request. If your
    ///       results are paginated, the response will return a next page token that you can specify as the
    ///       page token in a subsequent request.</p>
    public let pageToken: String?
    /// <p>The name of the container service for which to get a container log.</p>
    public let serviceName: String?
    /// <p>The start of the time interval for which to get log data.</p>
    ///
    ///          <p>Constraints:</p>
    ///
    ///          <ul>
    ///             <li>
    ///                <p>Specified in Coordinated Universal Time (UTC).</p>
    ///             </li>
    ///             <li>
    ///                <p>Specified in the Unix time format.</p>
    ///
    ///                <p>For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, specify
    ///             <code>1538424000</code> as the start time.</p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p>You can convert a human-friendly time to Unix time format using a converter like <a href="https://www.epochconverter.com/">Epoch converter</a>.</p>
    public let startTime: Date?

    public init (
        containerName: String? = nil,
        endTime: Date? = nil,
        filterPattern: String? = nil,
        pageToken: String? = nil,
        serviceName: String? = nil,
        startTime: Date? = nil
    )
    {
        self.containerName = containerName
        self.endTime = endTime
        self.filterPattern = filterPattern
        self.pageToken = pageToken
        self.serviceName = serviceName
        self.startTime = startTime
    }
}
