// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDiskInputBody: Equatable {
    public let diskName: String?
    public let availabilityZone: String?
    public let sizeInGb: Int?
    public let tags: [Tag]?
    public let addOns: [AddOnRequest]?
}

extension CreateDiskInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case addOns
        case availabilityZone
        case diskName
        case sizeInGb
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .diskName)
        diskName = diskNameDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let sizeInGbDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .sizeInGb)
        sizeInGb = sizeInGbDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let addOnsContainer = try containerValues.decodeIfPresent([AddOnRequest].self, forKey: .addOns)
        var addOnsDecoded0:[AddOnRequest]? = nil
        if let addOnsContainer = addOnsContainer {
            addOnsDecoded0 = [AddOnRequest]()
            for structure0 in addOnsContainer {
                addOnsDecoded0?.append(structure0)
            }
        }
        addOns = addOnsDecoded0
    }
}
