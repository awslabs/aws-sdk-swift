// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Describes the Lightsail load balancer.</p>
public struct LoadBalancer: Equatable {
    /// <p>The protocol you have enabled for your load balancer. Valid values are below.</p>
    ///          <p>You can't just have <code>HTTP_HTTPS</code>, but you can have just
    ///       <code>HTTP</code>.</p>
    public let `protocol`: LoadBalancerProtocol?
    /// <p>The Amazon Resource Name (ARN) of the load balancer.</p>
    public let arn: String?
    /// <p>A string to string map of the configuration options for your load balancer. Valid values
    ///       are listed below.</p>
    public let configurationOptions: [String:String]?
    /// <p>The date when your load balancer was created.</p>
    public let createdAt: Date?
    /// <p>The DNS name of your Lightsail load balancer.</p>
    public let dnsName: String?
    /// <p>The path you specified to perform your health checks. If no path is specified, the load
    ///       balancer tries to make a request to the default (root) page.</p>
    public let healthCheckPath: String?
    /// <p>An array of InstanceHealthSummary objects describing the health of the load
    ///       balancer.</p>
    public let instanceHealthSummary: [InstanceHealthSummary]?
    /// <p>The port where the load balancer will direct traffic to your Lightsail instances. For
    ///       HTTP traffic, it's port 80. For HTTPS traffic, it's port 443.</p>
    public let instancePort: Int?
    /// <p>The IP address type of the load balancer.</p>
    ///
    ///          <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for
    ///       IPv4 and IPv6.</p>
    public let ipAddressType: IpAddressType?
    /// <p>The AWS Region where your load balancer was created (e.g., <code>us-east-2a</code>).
    ///       Lightsail automatically creates your load balancer across Availability Zones.</p>
    public let location: ResourceLocation?
    /// <p>The name of the load balancer (e.g., <code>my-load-balancer</code>).</p>
    public let name: String?
    /// <p>An array of public port settings for your load balancer. For HTTP, use port 80. For HTTPS,
    ///       use port 443.</p>
    public let publicPorts: [Int]?
    /// <p>The resource type (e.g., <code>LoadBalancer</code>.</p>
    public let resourceType: ResourceType?
    /// <p>The status of your load balancer. Valid values are below.</p>
    public let state: LoadBalancerState?
    /// <p>The support code. Include this code in your email to support when you have questions about
    ///       your Lightsail load balancer. This code enables our support team to look up your Lightsail
    ///       information more easily.</p>
    public let supportCode: String?
    /// <p>The tag keys and optional values for the resource. For more information about tags in
    ///       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Lightsail
    ///         Dev Guide</a>.</p>
    public let tags: [Tag]?
    /// <p>An array of LoadBalancerTlsCertificateSummary objects that provide additional information
    ///       about the SSL/TLS certificates. For example, if <code>true</code>, the certificate is attached
    ///       to the load balancer.</p>
    public let tlsCertificateSummaries: [LoadBalancerTlsCertificateSummary]?

    public init (
        `protocol`: LoadBalancerProtocol? = nil,
        arn: String? = nil,
        configurationOptions: [String:String]? = nil,
        createdAt: Date? = nil,
        dnsName: String? = nil,
        healthCheckPath: String? = nil,
        instanceHealthSummary: [InstanceHealthSummary]? = nil,
        instancePort: Int? = nil,
        ipAddressType: IpAddressType? = nil,
        location: ResourceLocation? = nil,
        name: String? = nil,
        publicPorts: [Int]? = nil,
        resourceType: ResourceType? = nil,
        state: LoadBalancerState? = nil,
        supportCode: String? = nil,
        tags: [Tag]? = nil,
        tlsCertificateSummaries: [LoadBalancerTlsCertificateSummary]? = nil
    )
    {
        self.`protocol` = `protocol`
        self.arn = arn
        self.configurationOptions = configurationOptions
        self.createdAt = createdAt
        self.dnsName = dnsName
        self.healthCheckPath = healthCheckPath
        self.instanceHealthSummary = instanceHealthSummary
        self.instancePort = instancePort
        self.ipAddressType = ipAddressType
        self.location = location
        self.name = name
        self.publicPorts = publicPorts
        self.resourceType = resourceType
        self.state = state
        self.supportCode = supportCode
        self.tags = tags
        self.tlsCertificateSummaries = tlsCertificateSummaries
    }
}
