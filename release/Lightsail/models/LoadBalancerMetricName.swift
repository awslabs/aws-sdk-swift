// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum LoadBalancerMetricName {
    case clienttlsnegotiationerrorcount
    case httpcodeInstance2xxCount
    case httpcodeInstance3xxCount
    case httpcodeInstance4xxCount
    case httpcodeInstance5xxCount
    case httpcodeLb4xxCount
    case httpcodeLb5xxCount
    case healthyhostcount
    case instanceresponsetime
    case rejectedconnectioncount
    case requestcount
    case unhealthyhostcount
    case sdkUnknown(String)
}

extension LoadBalancerMetricName : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [LoadBalancerMetricName] {
        return [
            .clienttlsnegotiationerrorcount,
            .httpcodeInstance2xxCount,
            .httpcodeInstance3xxCount,
            .httpcodeInstance4xxCount,
            .httpcodeInstance5xxCount,
            .httpcodeLb4xxCount,
            .httpcodeLb5xxCount,
            .healthyhostcount,
            .instanceresponsetime,
            .rejectedconnectioncount,
            .requestcount,
            .unhealthyhostcount,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .clienttlsnegotiationerrorcount: return "ClientTLSNegotiationErrorCount"
        case .httpcodeInstance2xxCount: return "HTTPCode_Instance_2XX_Count"
        case .httpcodeInstance3xxCount: return "HTTPCode_Instance_3XX_Count"
        case .httpcodeInstance4xxCount: return "HTTPCode_Instance_4XX_Count"
        case .httpcodeInstance5xxCount: return "HTTPCode_Instance_5XX_Count"
        case .httpcodeLb4xxCount: return "HTTPCode_LB_4XX_Count"
        case .httpcodeLb5xxCount: return "HTTPCode_LB_5XX_Count"
        case .healthyhostcount: return "HealthyHostCount"
        case .instanceresponsetime: return "InstanceResponseTime"
        case .rejectedconnectioncount: return "RejectedConnectionCount"
        case .requestcount: return "RequestCount"
        case .unhealthyhostcount: return "UnhealthyHostCount"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = LoadBalancerMetricName(rawValue: rawValue) ?? LoadBalancerMetricName.sdkUnknown(rawValue)
    }
}
