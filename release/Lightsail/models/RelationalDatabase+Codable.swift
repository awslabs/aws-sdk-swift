// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RelationalDatabase: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case backupRetentionEnabled
        case caCertificateIdentifier
        case createdAt
        case engine
        case engineVersion
        case hardware
        case latestRestorableTime
        case location
        case masterDatabaseName
        case masterEndpoint
        case masterUsername
        case name
        case parameterApplyStatus
        case pendingMaintenanceActions
        case pendingModifiedValues
        case preferredBackupWindow
        case preferredMaintenanceWindow
        case publiclyAccessible
        case relationalDatabaseBlueprintId
        case relationalDatabaseBundleId
        case resourceType
        case secondaryAvailabilityZone
        case state
        case supportCode
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let backupRetentionEnabled = backupRetentionEnabled {
            try encodeContainer.encode(backupRetentionEnabled, forKey: .backupRetentionEnabled)
        }
        if let caCertificateIdentifier = caCertificateIdentifier {
            try encodeContainer.encode(caCertificateIdentifier, forKey: .caCertificateIdentifier)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let engine = engine {
            try encodeContainer.encode(engine, forKey: .engine)
        }
        if let engineVersion = engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let hardware = hardware {
            try encodeContainer.encode(hardware, forKey: .hardware)
        }
        if let latestRestorableTime = latestRestorableTime {
            try encodeContainer.encode(latestRestorableTime.timeIntervalSince1970, forKey: .latestRestorableTime)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let masterDatabaseName = masterDatabaseName {
            try encodeContainer.encode(masterDatabaseName, forKey: .masterDatabaseName)
        }
        if let masterEndpoint = masterEndpoint {
            try encodeContainer.encode(masterEndpoint, forKey: .masterEndpoint)
        }
        if let masterUsername = masterUsername {
            try encodeContainer.encode(masterUsername, forKey: .masterUsername)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let parameterApplyStatus = parameterApplyStatus {
            try encodeContainer.encode(parameterApplyStatus, forKey: .parameterApplyStatus)
        }
        if let pendingMaintenanceActions = pendingMaintenanceActions {
            var pendingMaintenanceActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pendingMaintenanceActions)
            for pendingmaintenanceactionlist0 in pendingMaintenanceActions {
                try pendingMaintenanceActionsContainer.encode(pendingmaintenanceactionlist0)
            }
        }
        if let pendingModifiedValues = pendingModifiedValues {
            try encodeContainer.encode(pendingModifiedValues, forKey: .pendingModifiedValues)
        }
        if let preferredBackupWindow = preferredBackupWindow {
            try encodeContainer.encode(preferredBackupWindow, forKey: .preferredBackupWindow)
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try encodeContainer.encode(preferredMaintenanceWindow, forKey: .preferredMaintenanceWindow)
        }
        if let publiclyAccessible = publiclyAccessible {
            try encodeContainer.encode(publiclyAccessible, forKey: .publiclyAccessible)
        }
        if let relationalDatabaseBlueprintId = relationalDatabaseBlueprintId {
            try encodeContainer.encode(relationalDatabaseBlueprintId, forKey: .relationalDatabaseBlueprintId)
        }
        if let relationalDatabaseBundleId = relationalDatabaseBundleId {
            try encodeContainer.encode(relationalDatabaseBundleId, forKey: .relationalDatabaseBundleId)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let secondaryAvailabilityZone = secondaryAvailabilityZone {
            try encodeContainer.encode(secondaryAvailabilityZone, forKey: .secondaryAvailabilityZone)
        }
        if let state = state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let supportCode = supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let relationalDatabaseBlueprintIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .relationalDatabaseBlueprintId)
        relationalDatabaseBlueprintId = relationalDatabaseBlueprintIdDecoded
        let relationalDatabaseBundleIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .relationalDatabaseBundleId)
        relationalDatabaseBundleId = relationalDatabaseBundleIdDecoded
        let masterDatabaseNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .masterDatabaseName)
        masterDatabaseName = masterDatabaseNameDecoded
        let hardwareDecoded = try containerValues.decodeIfPresent(RelationalDatabaseHardware.self, forKey: .hardware)
        hardware = hardwareDecoded
        let stateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .state)
        state = stateDecoded
        let secondaryAvailabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .secondaryAvailabilityZone)
        secondaryAvailabilityZone = secondaryAvailabilityZoneDecoded
        let backupRetentionEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .backupRetentionEnabled)
        backupRetentionEnabled = backupRetentionEnabledDecoded
        let pendingModifiedValuesDecoded = try containerValues.decodeIfPresent(PendingModifiedRelationalDatabaseValues.self, forKey: .pendingModifiedValues)
        pendingModifiedValues = pendingModifiedValuesDecoded
        let engineDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let latestRestorableTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .latestRestorableTime)
        latestRestorableTime = latestRestorableTimeDecoded
        let masterUsernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .masterUsername)
        masterUsername = masterUsernameDecoded
        let parameterApplyStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parameterApplyStatus)
        parameterApplyStatus = parameterApplyStatusDecoded
        let preferredBackupWindowDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preferredBackupWindow)
        preferredBackupWindow = preferredBackupWindowDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let masterEndpointDecoded = try containerValues.decodeIfPresent(RelationalDatabaseEndpoint.self, forKey: .masterEndpoint)
        masterEndpoint = masterEndpointDecoded
        let pendingMaintenanceActionsContainer = try containerValues.decodeIfPresent([PendingMaintenanceAction].self, forKey: .pendingMaintenanceActions)
        var pendingMaintenanceActionsDecoded0:[PendingMaintenanceAction]? = nil
        if let pendingMaintenanceActionsContainer = pendingMaintenanceActionsContainer {
            pendingMaintenanceActionsDecoded0 = [PendingMaintenanceAction]()
            for structure0 in pendingMaintenanceActionsContainer {
                pendingMaintenanceActionsDecoded0?.append(structure0)
            }
        }
        pendingMaintenanceActions = pendingMaintenanceActionsDecoded0
        let caCertificateIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .caCertificateIdentifier)
        caCertificateIdentifier = caCertificateIdentifierDecoded
    }
}
