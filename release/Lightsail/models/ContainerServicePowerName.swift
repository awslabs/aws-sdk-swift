// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum ContainerServicePowerName {
    case large
    case medium
    case micro
    case nano
    case small
    case xlarge
    case sdkUnknown(String)
}

extension ContainerServicePowerName : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ContainerServicePowerName] {
        return [
            .large,
            .medium,
            .micro,
            .nano,
            .small,
            .xlarge,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .large: return "large"
        case .medium: return "medium"
        case .micro: return "micro"
        case .nano: return "nano"
        case .small: return "small"
        case .xlarge: return "xlarge"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ContainerServicePowerName(rawValue: rawValue) ?? ContainerServicePowerName.sdkUnknown(rawValue)
    }
}
