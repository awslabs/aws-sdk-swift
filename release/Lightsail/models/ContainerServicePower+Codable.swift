// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ContainerServicePower: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cpuCount
        case isActive
        case name
        case powerId
        case price
        case ramSizeInGb
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cpuCount = cpuCount {
            try encodeContainer.encode(cpuCount, forKey: .cpuCount)
        }
        if let isActive = isActive {
            try encodeContainer.encode(isActive, forKey: .isActive)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let powerId = powerId {
            try encodeContainer.encode(powerId, forKey: .powerId)
        }
        if let price = price {
            try encodeContainer.encode(price, forKey: .price)
        }
        if let ramSizeInGb = ramSizeInGb {
            try encodeContainer.encode(ramSizeInGb, forKey: .ramSizeInGb)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let powerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .powerId)
        powerId = powerIdDecoded
        let priceDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .price)
        price = priceDecoded
        let cpuCountDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .cpuCount)
        cpuCount = cpuCountDecoded
        let ramSizeInGbDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .ramSizeInGb)
        ramSizeInGb = ramSizeInGbDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let isActiveDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .isActive)
        isActive = isActiveDecoded
    }
}
