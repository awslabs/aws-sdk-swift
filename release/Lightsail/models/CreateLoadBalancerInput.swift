// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateLoadBalancerInput: Equatable {
    /// <p>The optional alternative domains and subdomains to use with your SSL/TLS certificate
    ///       (e.g., <code>www.example.com</code>, <code>example.com</code>, <code>m.example.com</code>,
    ///         <code>blog.example.com</code>).</p>
    public let certificateAlternativeNames: [String]?
    /// <p>The domain name with which your certificate is associated (e.g.,
    ///       <code>example.com</code>).</p>
    ///          <p>If you specify <code>certificateDomainName</code>, then <code>certificateName</code> is
    ///       required (and vice-versa).</p>
    public let certificateDomainName: String?
    /// <p>The name of the SSL/TLS certificate.</p>
    ///          <p>If you specify <code>certificateName</code>, then <code>certificateDomainName</code> is
    ///       required (and vice-versa).</p>
    public let certificateName: String?
    /// <p>The path you provided to perform the load balancer health check. If you didn't specify a
    ///       health check path, Lightsail uses the root path of your website (e.g.,
    ///       <code>"/"</code>).</p>
    ///          <p>You may want to specify a custom health check path other than the root of your application
    ///       if your home page loads slowly or has a lot of media or scripting on it.</p>
    public let healthCheckPath: String?
    /// <p>The instance port where you're creating your load balancer.</p>
    public let instancePort: Int
    /// <p>The IP address type for the load balancer.</p>
    ///
    ///          <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for
    ///       IPv4 and IPv6.</p>
    ///
    ///          <p>The default value is <code>dualstack</code>.</p>
    public let ipAddressType: IpAddressType?
    /// <p>The name of your load balancer.</p>
    public let loadBalancerName: String?
    /// <p>The tag keys and optional values to add to the resource during create.</p>
    ///          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
    public let tags: [Tag]?

    public init (
        certificateAlternativeNames: [String]? = nil,
        certificateDomainName: String? = nil,
        certificateName: String? = nil,
        healthCheckPath: String? = nil,
        instancePort: Int = 0,
        ipAddressType: IpAddressType? = nil,
        loadBalancerName: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.certificateAlternativeNames = certificateAlternativeNames
        self.certificateDomainName = certificateDomainName
        self.certificateName = certificateName
        self.healthCheckPath = healthCheckPath
        self.instancePort = instancePort
        self.ipAddressType = ipAddressType
        self.loadBalancerName = loadBalancerName
        self.tags = tags
    }
}
