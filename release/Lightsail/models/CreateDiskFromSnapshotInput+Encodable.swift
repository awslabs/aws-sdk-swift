// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateDiskFromSnapshotInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addOns
        case availabilityZone
        case diskName
        case diskSnapshotName
        case restoreDate
        case sizeInGb
        case sourceDiskName
        case tags
        case useLatestRestorableAutoSnapshot
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOns = addOns {
            var addOnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addOns)
            for addonrequestlist0 in addOns {
                try addOnsContainer.encode(addonrequestlist0)
            }
        }
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let diskName = diskName {
            try encodeContainer.encode(diskName, forKey: .diskName)
        }
        if let diskSnapshotName = diskSnapshotName {
            try encodeContainer.encode(diskSnapshotName, forKey: .diskSnapshotName)
        }
        if let restoreDate = restoreDate {
            try encodeContainer.encode(restoreDate, forKey: .restoreDate)
        }
        if let sizeInGb = sizeInGb {
            try encodeContainer.encode(sizeInGb, forKey: .sizeInGb)
        }
        if let sourceDiskName = sourceDiskName {
            try encodeContainer.encode(sourceDiskName, forKey: .sourceDiskName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshot {
            try encodeContainer.encode(useLatestRestorableAutoSnapshot, forKey: .useLatestRestorableAutoSnapshot)
        }
    }
}
