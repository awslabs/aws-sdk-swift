// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateInstancesInputBody: Equatable {
    public let instanceNames: [String]?
    public let availabilityZone: String?
    public let customImageName: String?
    public let blueprintId: String?
    public let bundleId: String?
    public let userData: String?
    public let keyPairName: String?
    public let tags: [Tag]?
    public let addOns: [AddOnRequest]?
    public let ipAddressType: IpAddressType?
}

extension CreateInstancesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case addOns
        case availabilityZone
        case blueprintId
        case bundleId
        case customImageName
        case instanceNames
        case ipAddressType
        case keyPairName
        case tags
        case userData
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNamesContainer = try containerValues.decodeIfPresent([String].self, forKey: .instanceNames)
        var instanceNamesDecoded0:[String]? = nil
        if let instanceNamesContainer = instanceNamesContainer {
            instanceNamesDecoded0 = [String]()
            for string0 in instanceNamesContainer {
                instanceNamesDecoded0?.append(string0)
            }
        }
        instanceNames = instanceNamesDecoded0
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let customImageNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .customImageName)
        customImageName = customImageNameDecoded
        let blueprintIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .blueprintId)
        blueprintId = blueprintIdDecoded
        let bundleIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let userDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userData)
        userData = userDataDecoded
        let keyPairNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyPairName)
        keyPairName = keyPairNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let addOnsContainer = try containerValues.decodeIfPresent([AddOnRequest].self, forKey: .addOns)
        var addOnsDecoded0:[AddOnRequest]? = nil
        if let addOnsContainer = addOnsContainer {
            addOnsDecoded0 = [AddOnRequest]()
            for structure0 in addOnsContainer {
                addOnsDecoded0?.append(structure0)
            }
        }
        addOns = addOnsDecoded0
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
    }
}
