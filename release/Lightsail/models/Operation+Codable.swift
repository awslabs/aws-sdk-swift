// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Operation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createdAt
        case errorCode
        case errorDetails
        case id
        case isTerminal
        case location
        case operationDetails
        case operationType
        case resourceName
        case resourceType
        case status
        case statusChangedAt
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorDetails = errorDetails {
            try encodeContainer.encode(errorDetails, forKey: .errorDetails)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let isTerminal = isTerminal {
            try encodeContainer.encode(isTerminal, forKey: .isTerminal)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let operationDetails = operationDetails {
            try encodeContainer.encode(operationDetails, forKey: .operationDetails)
        }
        if let operationType = operationType {
            try encodeContainer.encode(operationType.rawValue, forKey: .operationType)
        }
        if let resourceName = resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusChangedAt = statusChangedAt {
            try encodeContainer.encode(statusChangedAt.timeIntervalSince1970, forKey: .statusChangedAt)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let isTerminalDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .isTerminal)
        isTerminal = isTerminalDecoded
        let operationDetailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .operationDetails)
        operationDetails = operationDetailsDecoded
        let operationTypeDecoded = try containerValues.decodeIfPresent(OperationType.self, forKey: .operationType)
        operationType = operationTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OperationStatus.self, forKey: .status)
        status = statusDecoded
        let statusChangedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .statusChangedAt)
        statusChangedAt = statusChangedAtDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorDetailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorDetails)
        errorDetails = errorDetailsDecoded
    }
}
