// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes a domain recordset entry.</p>
public struct DomainEntry: Equatable {
    /// <p>The ID of the domain recordset entry.</p>
    public let id: String?
    /// <p>When <code>true</code>, specifies whether the domain entry is an alias used by the
    ///       Lightsail load balancer. You can include an alias (A type) record in your request, which
    ///       points to a load balancer DNS name and routes traffic to your load balancer.</p>
    public let isAlias: Bool?
    /// <p>The name of the domain.</p>
    public let name: String?
    /// <p>(Deprecated) The options for the domain entry.</p>
    ///          <note>
    ///             <p>In releases prior to November 29, 2017, this parameter was not included in the API
    ///         response. It is now deprecated.</p>
    ///          </note>
    @available(*, deprecated)
    public let options: [String:String]?
    /// <p>The target IP address (e.g., <code>192.0.2.0</code>), or AWS name server (e.g.,
    ///         <code>ns-111.awsdns-22.com.</code>).</p>
    ///          <p>For Lightsail load balancers, the value looks like
    ///         <code>ab1234c56789c6b86aba6fb203d443bc-123456789.us-east-2.elb.amazonaws.com</code>. For
    ///       Lightsail distributions, the value looks like <code>exampled1182ne.cloudfront.net</code>.
    ///       For Lightsail container services, the value looks like
    ///         <code>container-service-1.example23scljs.us-west-2.cs.amazonlightsail.com</code>. Be sure to
    ///       also set <code>isAlias</code> to <code>true</code> when setting up an A record for a
    ///       Lightsail load balancer, distribution, or container service.</p>
    public let target: String?
    /// <p>The type of domain entry, such as address for IPv4 (A), address for IPv6 (AAAA), canonical
    ///       name (CNAME), mail exchanger (MX), name server (NS), start of authority (SOA), service locator
    ///       (SRV), or text (TXT).</p>
    ///          <p>The following domain entry types can be used:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>A</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>AAAA</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CNAME</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>MX</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NS</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SOA</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>SRV</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TXT</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let type: String?

    public init (
        id: String? = nil,
        isAlias: Bool? = nil,
        name: String? = nil,
        options: [String:String]? = nil,
        target: String? = nil,
        type: String? = nil
    )
    {
        self.id = id
        self.isAlias = isAlias
        self.name = name
        self.options = options
        self.target = target
        self.type = type
    }
}
