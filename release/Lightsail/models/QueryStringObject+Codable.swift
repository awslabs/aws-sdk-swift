// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension QueryStringObject: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case option
        case queryStringsAllowList
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let option = option {
            try encodeContainer.encode(option, forKey: .option)
        }
        if let queryStringsAllowList = queryStringsAllowList {
            var queryStringsAllowListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .queryStringsAllowList)
            for stringlist0 in queryStringsAllowList {
                try queryStringsAllowListContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .option)
        option = optionDecoded
        let queryStringsAllowListContainer = try containerValues.decodeIfPresent([String].self, forKey: .queryStringsAllowList)
        var queryStringsAllowListDecoded0:[String]? = nil
        if let queryStringsAllowListContainer = queryStringsAllowListContainer {
            queryStringsAllowListDecoded0 = [String]()
            for string0 in queryStringsAllowListContainer {
                queryStringsAllowListDecoded0?.append(string0)
            }
        }
        queryStringsAllowList = queryStringsAllowListDecoded0
    }
}
