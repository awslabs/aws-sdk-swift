// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LoadBalancer: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case configurationOptions
        case createdAt
        case dnsName
        case healthCheckPath
        case instanceHealthSummary
        case instancePort
        case ipAddressType
        case location
        case name
        case `protocol` = "protocol"
        case publicPorts
        case resourceType
        case state
        case supportCode
        case tags
        case tlsCertificateSummaries
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let configurationOptions = configurationOptions {
            var configurationOptionsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .configurationOptions)
            for (dictKey0, loadbalancerconfigurationoptions0) in configurationOptions {
                try configurationOptionsContainer.encode(loadbalancerconfigurationoptions0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let dnsName = dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let healthCheckPath = healthCheckPath {
            try encodeContainer.encode(healthCheckPath, forKey: .healthCheckPath)
        }
        if let instanceHealthSummary = instanceHealthSummary {
            var instanceHealthSummaryContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceHealthSummary)
            for instancehealthsummarylist0 in instanceHealthSummary {
                try instanceHealthSummaryContainer.encode(instancehealthsummarylist0)
            }
        }
        if let instancePort = instancePort {
            try encodeContainer.encode(instancePort, forKey: .instancePort)
        }
        if let ipAddressType = ipAddressType {
            try encodeContainer.encode(ipAddressType.rawValue, forKey: .ipAddressType)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if let publicPorts = publicPorts {
            var publicPortsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .publicPorts)
            for portlist0 in publicPorts {
                try publicPortsContainer.encode(portlist0)
            }
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let supportCode = supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let tlsCertificateSummaries = tlsCertificateSummaries {
            var tlsCertificateSummariesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tlsCertificateSummaries)
            for loadbalancertlscertificatesummarylist0 in tlsCertificateSummaries {
                try tlsCertificateSummariesContainer.encode(loadbalancertlscertificatesummarylist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let dnsNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LoadBalancerState.self, forKey: .state)
        state = stateDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(LoadBalancerProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let publicPortsContainer = try containerValues.decodeIfPresent([Int].self, forKey: .publicPorts)
        var publicPortsDecoded0:[Int]? = nil
        if let publicPortsContainer = publicPortsContainer {
            publicPortsDecoded0 = [Int]()
            for integer0 in publicPortsContainer {
                publicPortsDecoded0?.append(integer0)
            }
        }
        publicPorts = publicPortsDecoded0
        let healthCheckPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .healthCheckPath)
        healthCheckPath = healthCheckPathDecoded
        let instancePortDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .instancePort)
        instancePort = instancePortDecoded
        let instanceHealthSummaryContainer = try containerValues.decodeIfPresent([InstanceHealthSummary].self, forKey: .instanceHealthSummary)
        var instanceHealthSummaryDecoded0:[InstanceHealthSummary]? = nil
        if let instanceHealthSummaryContainer = instanceHealthSummaryContainer {
            instanceHealthSummaryDecoded0 = [InstanceHealthSummary]()
            for structure0 in instanceHealthSummaryContainer {
                instanceHealthSummaryDecoded0?.append(structure0)
            }
        }
        instanceHealthSummary = instanceHealthSummaryDecoded0
        let tlsCertificateSummariesContainer = try containerValues.decodeIfPresent([LoadBalancerTlsCertificateSummary].self, forKey: .tlsCertificateSummaries)
        var tlsCertificateSummariesDecoded0:[LoadBalancerTlsCertificateSummary]? = nil
        if let tlsCertificateSummariesContainer = tlsCertificateSummariesContainer {
            tlsCertificateSummariesDecoded0 = [LoadBalancerTlsCertificateSummary]()
            for structure0 in tlsCertificateSummariesContainer {
                tlsCertificateSummariesDecoded0?.append(structure0)
            }
        }
        tlsCertificateSummaries = tlsCertificateSummariesDecoded0
        let configurationOptionsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .configurationOptions)
        var configurationOptionsDecoded0: [String:String]? = nil
        if let configurationOptionsContainer = configurationOptionsContainer {
            configurationOptionsDecoded0 = [String:String]()
            for (key0, string0) in configurationOptionsContainer {
                configurationOptionsDecoded0?[key0] = string0
            }
        }
        configurationOptions = configurationOptionsDecoded0
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
    }
}
