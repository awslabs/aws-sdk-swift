// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Blueprint: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case blueprintId
        case description
        case group
        case isActive
        case licenseUrl
        case minPower
        case name
        case platform
        case productUrl
        case type
        case version
        case versionCode
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blueprintId = blueprintId {
            try encodeContainer.encode(blueprintId, forKey: .blueprintId)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let group = group {
            try encodeContainer.encode(group, forKey: .group)
        }
        if let isActive = isActive {
            try encodeContainer.encode(isActive, forKey: .isActive)
        }
        if let licenseUrl = licenseUrl {
            try encodeContainer.encode(licenseUrl, forKey: .licenseUrl)
        }
        if let minPower = minPower {
            try encodeContainer.encode(minPower, forKey: .minPower)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let platform = platform {
            try encodeContainer.encode(platform.rawValue, forKey: .platform)
        }
        if let productUrl = productUrl {
            try encodeContainer.encode(productUrl, forKey: .productUrl)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let versionCode = versionCode {
            try encodeContainer.encode(versionCode, forKey: .versionCode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blueprintIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .blueprintId)
        blueprintId = blueprintIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let groupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .group)
        group = groupDecoded
        let typeDecoded = try containerValues.decodeIfPresent(BlueprintType.self, forKey: .type)
        type = typeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let isActiveDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .isActive)
        isActive = isActiveDecoded
        let minPowerDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .minPower)
        minPower = minPowerDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let versionCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .versionCode)
        versionCode = versionCodeDecoded
        let productUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .productUrl)
        productUrl = productUrlDecoded
        let licenseUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .licenseUrl)
        licenseUrl = licenseUrlDecoded
        let platformDecoded = try containerValues.decodeIfPresent(InstancePlatform.self, forKey: .platform)
        platform = platformDecoded
    }
}
