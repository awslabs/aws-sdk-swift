// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ContainerServiceHealthCheckConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case healthyThreshold
        case intervalSeconds
        case path
        case successCodes
        case timeoutSeconds
        case unhealthyThreshold
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let healthyThreshold = healthyThreshold {
            try encodeContainer.encode(healthyThreshold, forKey: .healthyThreshold)
        }
        if let intervalSeconds = intervalSeconds {
            try encodeContainer.encode(intervalSeconds, forKey: .intervalSeconds)
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let successCodes = successCodes {
            try encodeContainer.encode(successCodes, forKey: .successCodes)
        }
        if let timeoutSeconds = timeoutSeconds {
            try encodeContainer.encode(timeoutSeconds, forKey: .timeoutSeconds)
        }
        if let unhealthyThreshold = unhealthyThreshold {
            try encodeContainer.encode(unhealthyThreshold, forKey: .unhealthyThreshold)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let healthyThresholdDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .healthyThreshold)
        healthyThreshold = healthyThresholdDecoded
        let unhealthyThresholdDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .unhealthyThreshold)
        unhealthyThreshold = unhealthyThresholdDecoded
        let timeoutSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .timeoutSeconds)
        timeoutSeconds = timeoutSecondsDecoded
        let intervalSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .intervalSeconds)
        intervalSeconds = intervalSecondsDecoded
        let pathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .path)
        path = pathDecoded
        let successCodesDecoded = try containerValues.decodeIfPresent(String.self, forKey: .successCodes)
        successCodes = successCodesDecoded
    }
}
