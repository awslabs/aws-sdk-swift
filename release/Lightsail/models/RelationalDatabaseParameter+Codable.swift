// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RelationalDatabaseParameter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allowedValues
        case applyMethod
        case applyType
        case dataType
        case description
        case isModifiable
        case parameterName
        case parameterValue
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedValues = allowedValues {
            try encodeContainer.encode(allowedValues, forKey: .allowedValues)
        }
        if let applyMethod = applyMethod {
            try encodeContainer.encode(applyMethod, forKey: .applyMethod)
        }
        if let applyType = applyType {
            try encodeContainer.encode(applyType, forKey: .applyType)
        }
        if let dataType = dataType {
            try encodeContainer.encode(dataType, forKey: .dataType)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let isModifiable = isModifiable {
            try encodeContainer.encode(isModifiable, forKey: .isModifiable)
        }
        if let parameterName = parameterName {
            try encodeContainer.encode(parameterName, forKey: .parameterName)
        }
        if let parameterValue = parameterValue {
            try encodeContainer.encode(parameterValue, forKey: .parameterValue)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowedValuesDecoded = try containerValues.decodeIfPresent(String.self, forKey: .allowedValues)
        allowedValues = allowedValuesDecoded
        let applyMethodDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applyMethod)
        applyMethod = applyMethodDecoded
        let applyTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applyType)
        applyType = applyTypeDecoded
        let dataTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataType)
        dataType = dataTypeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let isModifiableDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .isModifiable)
        isModifiable = isModifiableDecoded
        let parameterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parameterName)
        parameterName = parameterNameDecoded
        let parameterValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parameterValue)
        parameterValue = parameterValueDecoded
    }
}
