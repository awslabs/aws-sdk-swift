// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ContainerServiceRegistryLogin: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case expiresAt
        case password
        case registry
        case username
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expiresAt = expiresAt {
            try encodeContainer.encode(expiresAt.timeIntervalSince1970, forKey: .expiresAt)
        }
        if let password = password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let registry = registry {
            try encodeContainer.encode(registry, forKey: .registry)
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .username)
        username = usernameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .password)
        password = passwordDecoded
        let expiresAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .expiresAt)
        expiresAt = expiresAtDecoded
        let registryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .registry)
        registry = registryDecoded
    }
}
