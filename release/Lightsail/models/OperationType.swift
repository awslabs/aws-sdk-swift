// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum OperationType {
    case allocatestaticip
    case attachcertificatetodistribution
    case attachdisk
    case attachinstancestoloadbalancer
    case attachloadbalancertlscertificate
    case attachstaticip
    case closeinstancepublicports
    case createcertificate
    case createcontactmethod
    case createcontainerservice
    case createcontainerservicedeployment
    case createcontainerserviceregistrylogin
    case createdisk
    case creatediskfromsnapshot
    case createdisksnapshot
    case createdistribution
    case createdomain
    case createinstance
    case createinstancesnapshot
    case createinstancesfromsnapshot
    case createloadbalancer
    case createloadbalancertlscertificate
    case createrelationaldatabase
    case createrelationaldatabasefromsnapshot
    case createrelationaldatabasesnapshot
    case deletealarm
    case deletecertificate
    case deletecontactmethod
    case deletecontainerimage
    case deletecontainerservice
    case deletedisk
    case deletedisksnapshot
    case deletedistribution
    case deletedomain
    case deletedomainentry
    case deleteinstance
    case deleteinstancesnapshot
    case deleteknownhostkeys
    case deleteloadbalancer
    case deleteloadbalancertlscertificate
    case deleterelationaldatabase
    case deleterelationaldatabasesnapshot
    case detachcertificatefromdistribution
    case detachdisk
    case detachinstancesfromloadbalancer
    case detachstaticip
    case disableaddon
    case enableaddon
    case getalarms
    case getcontactmethods
    case openinstancepublicports
    case putalarm
    case putinstancepublicports
    case rebootinstance
    case rebootrelationaldatabase
    case registercontainerimage
    case releasestaticip
    case resetdistributioncache
    case sendcontactmethodverification
    case setipaddresstype
    case startinstance
    case startrelationaldatabase
    case stopinstance
    case stoprelationaldatabase
    case testalarm
    case updatecontainerservice
    case updatedistribution
    case updatedistributionbundle
    case updatedomainentry
    case updateloadbalancerattribute
    case updaterelationaldatabase
    case updaterelationaldatabaseparameters
    case sdkUnknown(String)
}

extension OperationType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [OperationType] {
        return [
            .allocatestaticip,
            .attachcertificatetodistribution,
            .attachdisk,
            .attachinstancestoloadbalancer,
            .attachloadbalancertlscertificate,
            .attachstaticip,
            .closeinstancepublicports,
            .createcertificate,
            .createcontactmethod,
            .createcontainerservice,
            .createcontainerservicedeployment,
            .createcontainerserviceregistrylogin,
            .createdisk,
            .creatediskfromsnapshot,
            .createdisksnapshot,
            .createdistribution,
            .createdomain,
            .createinstance,
            .createinstancesnapshot,
            .createinstancesfromsnapshot,
            .createloadbalancer,
            .createloadbalancertlscertificate,
            .createrelationaldatabase,
            .createrelationaldatabasefromsnapshot,
            .createrelationaldatabasesnapshot,
            .deletealarm,
            .deletecertificate,
            .deletecontactmethod,
            .deletecontainerimage,
            .deletecontainerservice,
            .deletedisk,
            .deletedisksnapshot,
            .deletedistribution,
            .deletedomain,
            .deletedomainentry,
            .deleteinstance,
            .deleteinstancesnapshot,
            .deleteknownhostkeys,
            .deleteloadbalancer,
            .deleteloadbalancertlscertificate,
            .deleterelationaldatabase,
            .deleterelationaldatabasesnapshot,
            .detachcertificatefromdistribution,
            .detachdisk,
            .detachinstancesfromloadbalancer,
            .detachstaticip,
            .disableaddon,
            .enableaddon,
            .getalarms,
            .getcontactmethods,
            .openinstancepublicports,
            .putalarm,
            .putinstancepublicports,
            .rebootinstance,
            .rebootrelationaldatabase,
            .registercontainerimage,
            .releasestaticip,
            .resetdistributioncache,
            .sendcontactmethodverification,
            .setipaddresstype,
            .startinstance,
            .startrelationaldatabase,
            .stopinstance,
            .stoprelationaldatabase,
            .testalarm,
            .updatecontainerservice,
            .updatedistribution,
            .updatedistributionbundle,
            .updatedomainentry,
            .updateloadbalancerattribute,
            .updaterelationaldatabase,
            .updaterelationaldatabaseparameters,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .allocatestaticip: return "AllocateStaticIp"
        case .attachcertificatetodistribution: return "AttachCertificateToDistribution"
        case .attachdisk: return "AttachDisk"
        case .attachinstancestoloadbalancer: return "AttachInstancesToLoadBalancer"
        case .attachloadbalancertlscertificate: return "AttachLoadBalancerTlsCertificate"
        case .attachstaticip: return "AttachStaticIp"
        case .closeinstancepublicports: return "CloseInstancePublicPorts"
        case .createcertificate: return "CreateCertificate"
        case .createcontactmethod: return "CreateContactMethod"
        case .createcontainerservice: return "CreateContainerService"
        case .createcontainerservicedeployment: return "CreateContainerServiceDeployment"
        case .createcontainerserviceregistrylogin: return "CreateContainerServiceRegistryLogin"
        case .createdisk: return "CreateDisk"
        case .creatediskfromsnapshot: return "CreateDiskFromSnapshot"
        case .createdisksnapshot: return "CreateDiskSnapshot"
        case .createdistribution: return "CreateDistribution"
        case .createdomain: return "CreateDomain"
        case .createinstance: return "CreateInstance"
        case .createinstancesnapshot: return "CreateInstanceSnapshot"
        case .createinstancesfromsnapshot: return "CreateInstancesFromSnapshot"
        case .createloadbalancer: return "CreateLoadBalancer"
        case .createloadbalancertlscertificate: return "CreateLoadBalancerTlsCertificate"
        case .createrelationaldatabase: return "CreateRelationalDatabase"
        case .createrelationaldatabasefromsnapshot: return "CreateRelationalDatabaseFromSnapshot"
        case .createrelationaldatabasesnapshot: return "CreateRelationalDatabaseSnapshot"
        case .deletealarm: return "DeleteAlarm"
        case .deletecertificate: return "DeleteCertificate"
        case .deletecontactmethod: return "DeleteContactMethod"
        case .deletecontainerimage: return "DeleteContainerImage"
        case .deletecontainerservice: return "DeleteContainerService"
        case .deletedisk: return "DeleteDisk"
        case .deletedisksnapshot: return "DeleteDiskSnapshot"
        case .deletedistribution: return "DeleteDistribution"
        case .deletedomain: return "DeleteDomain"
        case .deletedomainentry: return "DeleteDomainEntry"
        case .deleteinstance: return "DeleteInstance"
        case .deleteinstancesnapshot: return "DeleteInstanceSnapshot"
        case .deleteknownhostkeys: return "DeleteKnownHostKeys"
        case .deleteloadbalancer: return "DeleteLoadBalancer"
        case .deleteloadbalancertlscertificate: return "DeleteLoadBalancerTlsCertificate"
        case .deleterelationaldatabase: return "DeleteRelationalDatabase"
        case .deleterelationaldatabasesnapshot: return "DeleteRelationalDatabaseSnapshot"
        case .detachcertificatefromdistribution: return "DetachCertificateFromDistribution"
        case .detachdisk: return "DetachDisk"
        case .detachinstancesfromloadbalancer: return "DetachInstancesFromLoadBalancer"
        case .detachstaticip: return "DetachStaticIp"
        case .disableaddon: return "DisableAddOn"
        case .enableaddon: return "EnableAddOn"
        case .getalarms: return "GetAlarms"
        case .getcontactmethods: return "GetContactMethods"
        case .openinstancepublicports: return "OpenInstancePublicPorts"
        case .putalarm: return "PutAlarm"
        case .putinstancepublicports: return "PutInstancePublicPorts"
        case .rebootinstance: return "RebootInstance"
        case .rebootrelationaldatabase: return "RebootRelationalDatabase"
        case .registercontainerimage: return "RegisterContainerImage"
        case .releasestaticip: return "ReleaseStaticIp"
        case .resetdistributioncache: return "ResetDistributionCache"
        case .sendcontactmethodverification: return "SendContactMethodVerification"
        case .setipaddresstype: return "SetIpAddressType"
        case .startinstance: return "StartInstance"
        case .startrelationaldatabase: return "StartRelationalDatabase"
        case .stopinstance: return "StopInstance"
        case .stoprelationaldatabase: return "StopRelationalDatabase"
        case .testalarm: return "TestAlarm"
        case .updatecontainerservice: return "UpdateContainerService"
        case .updatedistribution: return "UpdateDistribution"
        case .updatedistributionbundle: return "UpdateDistributionBundle"
        case .updatedomainentry: return "UpdateDomainEntry"
        case .updateloadbalancerattribute: return "UpdateLoadBalancerAttribute"
        case .updaterelationaldatabase: return "UpdateRelationalDatabase"
        case .updaterelationaldatabaseparameters: return "UpdateRelationalDatabaseParameters"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = OperationType(rawValue: rawValue) ?? OperationType.sdkUnknown(rawValue)
    }
}
