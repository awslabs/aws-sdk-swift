// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RegistryAlias: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case defaultRegistryAlias
        case name
        case primaryRegistryAlias
        case status
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if defaultRegistryAlias != false {
            try encodeContainer.encode(defaultRegistryAlias, forKey: .defaultRegistryAlias)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if primaryRegistryAlias != false {
            try encodeContainer.encode(primaryRegistryAlias, forKey: .primaryRegistryAlias)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RegistryAliasStatus.self, forKey: .status)
        status = statusDecoded
        let primaryRegistryAliasDecoded = try containerValues.decode(Bool.self, forKey: .primaryRegistryAlias)
        primaryRegistryAlias = primaryRegistryAliasDecoded
        let defaultRegistryAliasDecoded = try containerValues.decode(Bool.self, forKey: .defaultRegistryAlias)
        defaultRegistryAlias = defaultRegistryAliasDecoded
    }
}
