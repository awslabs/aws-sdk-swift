// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>An object containing the catalog data for a repository. This data is publicly visible in
///          the Amazon ECR Public Gallery.</p>
public struct RepositoryCatalogDataInput: Equatable {
    /// <p>A detailed description of the contents of the repository. It is publicly visible in the
    ///          Amazon ECR Public Gallery. The text must be in markdown format.</p>
    public let aboutText: String?
    /// <p>The system architecture that the images in the repository are compatible with. On the
    ///          Amazon ECR Public Gallery, the following supported architectures will appear as badges on the
    ///          repository and are used as search filters.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Linux</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Windows</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>If an unsupported tag is added to your repository catalog data, it will be associated
    ///             with the repository and can be retrieved using the API but will not be discoverable in
    ///             the Amazon ECR Public Gallery.</p>
    ///          </note>
    public let architectures: [String]?
    /// <p>A short description of the contents of the repository. This text appears in both the
    ///          image details and also when searching for repositories on the Amazon ECR Public Gallery.</p>
    public let description: String?
    /// <p>The base64-encoded repository logo payload.</p>
    ///          <note>
    ///             <p>The repository logo is only publicly visible in the Amazon ECR Public Gallery for verified
    ///             accounts.</p>
    ///          </note>
    public let logoImageBlob: Data?
    /// <p>The operating systems that the images in the repository are compatible with. On the
    ///          Amazon ECR Public Gallery, the following supported operating systems will appear as badges on
    ///          the repository and are used as search filters.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ARM</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ARM 64</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>x86</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>x86-64</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>If an unsupported tag is added to your repository catalog data, it will be associated
    ///             with the repository and can be retrieved using the API but will not be discoverable in
    ///             the Amazon ECR Public Gallery.</p>
    ///          </note>
    public let operatingSystems: [String]?
    /// <p>Detailed information on how to use the contents of the repository. It is publicly
    ///          visible in the Amazon ECR Public Gallery. The usage text provides context, support information,
    ///          and additional usage details for users of the repository. The text must be in markdown
    ///          format.</p>
    public let usageText: String?

    public init (
        aboutText: String? = nil,
        architectures: [String]? = nil,
        description: String? = nil,
        logoImageBlob: Data? = nil,
        operatingSystems: [String]? = nil,
        usageText: String? = nil
    )
    {
        self.aboutText = aboutText
        self.architectures = architectures
        self.description = description
        self.logoImageBlob = logoImageBlob
        self.operatingSystems = operatingSystems
        self.usageText = usageText
    }
}
