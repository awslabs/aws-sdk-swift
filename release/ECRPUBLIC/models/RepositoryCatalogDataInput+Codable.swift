// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RepositoryCatalogDataInput: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aboutText
        case architectures
        case description
        case logoImageBlob
        case operatingSystems
        case usageText
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aboutText = aboutText {
            try encodeContainer.encode(aboutText, forKey: .aboutText)
        }
        if let architectures = architectures {
            var architecturesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .architectures)
            for architecturelist0 in architectures {
                try architecturesContainer.encode(architecturelist0)
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let logoImageBlob = logoImageBlob {
            try encodeContainer.encode(logoImageBlob.base64EncodedString(), forKey: .logoImageBlob)
        }
        if let operatingSystems = operatingSystems {
            var operatingSystemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .operatingSystems)
            for operatingsystemlist0 in operatingSystems {
                try operatingSystemsContainer.encode(operatingsystemlist0)
            }
        }
        if let usageText = usageText {
            try encodeContainer.encode(usageText, forKey: .usageText)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let architecturesContainer = try containerValues.decodeIfPresent([String].self, forKey: .architectures)
        var architecturesDecoded0:[String]? = nil
        if let architecturesContainer = architecturesContainer {
            architecturesDecoded0 = [String]()
            for string0 in architecturesContainer {
                architecturesDecoded0?.append(string0)
            }
        }
        architectures = architecturesDecoded0
        let operatingSystemsContainer = try containerValues.decodeIfPresent([String].self, forKey: .operatingSystems)
        var operatingSystemsDecoded0:[String]? = nil
        if let operatingSystemsContainer = operatingSystemsContainer {
            operatingSystemsDecoded0 = [String]()
            for string0 in operatingSystemsContainer {
                operatingSystemsDecoded0?.append(string0)
            }
        }
        operatingSystems = operatingSystemsDecoded0
        let logoImageBlobDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .logoImageBlob)
        logoImageBlob = logoImageBlobDecoded
        let aboutTextDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aboutText)
        aboutText = aboutTextDecoded
        let usageTextDecoded = try containerValues.decodeIfPresent(String.self, forKey: .usageText)
        usageText = usageTextDecoded
    }
}
