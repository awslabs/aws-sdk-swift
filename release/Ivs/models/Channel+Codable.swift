// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Channel: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case authorized
        case ingestEndpoint
        case latencyMode
        case name
        case playbackUrl
        case recordingConfigurationArn
        case tags
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if authorized != false {
            try encodeContainer.encode(authorized, forKey: .authorized)
        }
        if let ingestEndpoint = ingestEndpoint {
            try encodeContainer.encode(ingestEndpoint, forKey: .ingestEndpoint)
        }
        if let latencyMode = latencyMode {
            try encodeContainer.encode(latencyMode.rawValue, forKey: .latencyMode)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let playbackUrl = playbackUrl {
            try encodeContainer.encode(playbackUrl, forKey: .playbackUrl)
        }
        if let recordingConfigurationArn = recordingConfigurationArn {
            try encodeContainer.encode(recordingConfigurationArn, forKey: .recordingConfigurationArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let latencyModeDecoded = try containerValues.decodeIfPresent(ChannelLatencyMode.self, forKey: .latencyMode)
        latencyMode = latencyModeDecoded
        let typeDecoded = try containerValues.decodeIfPresent(ChannelType.self, forKey: .type)
        type = typeDecoded
        let recordingConfigurationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recordingConfigurationArn)
        recordingConfigurationArn = recordingConfigurationArnDecoded
        let ingestEndpointDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ingestEndpoint)
        ingestEndpoint = ingestEndpointDecoded
        let playbackUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .playbackUrl)
        playbackUrl = playbackUrlDecoded
        let authorizedDecoded = try containerValues.decode(Bool.self, forKey: .authorized)
        authorized = authorizedDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
