// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListAnomalyGroupSummariesOutputBody: Equatable {
    public let anomalyGroupSummaryList: [AnomalyGroupSummary]?
    public let anomalyGroupStatistics: AnomalyGroupStatistics?
    public let nextToken: String?
}

extension ListAnomalyGroupSummariesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case anomalyGroupStatistics = "AnomalyGroupStatistics"
        case anomalyGroupSummaryList = "AnomalyGroupSummaryList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let anomalyGroupSummaryListContainer = try containerValues.decodeIfPresent([AnomalyGroupSummary].self, forKey: .anomalyGroupSummaryList)
        var anomalyGroupSummaryListDecoded0:[AnomalyGroupSummary]? = nil
        if let anomalyGroupSummaryListContainer = anomalyGroupSummaryListContainer {
            anomalyGroupSummaryListDecoded0 = [AnomalyGroupSummary]()
            for structure0 in anomalyGroupSummaryListContainer {
                anomalyGroupSummaryListDecoded0?.append(structure0)
            }
        }
        anomalyGroupSummaryList = anomalyGroupSummaryListDecoded0
        let anomalyGroupStatisticsDecoded = try containerValues.decodeIfPresent(AnomalyGroupStatistics.self, forKey: .anomalyGroupStatistics)
        anomalyGroupStatistics = anomalyGroupStatisticsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
