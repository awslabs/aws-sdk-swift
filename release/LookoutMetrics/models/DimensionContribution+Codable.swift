// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DimensionContribution: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dimensionName = "DimensionName"
        case dimensionValueContributionList = "DimensionValueContributionList"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensionName = dimensionName {
            try encodeContainer.encode(dimensionName, forKey: .dimensionName)
        }
        if let dimensionValueContributionList = dimensionValueContributionList {
            var dimensionValueContributionListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensionValueContributionList)
            for dimensionvaluecontributionlist0 in dimensionValueContributionList {
                try dimensionValueContributionListContainer.encode(dimensionvaluecontributionlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dimensionName)
        dimensionName = dimensionNameDecoded
        let dimensionValueContributionListContainer = try containerValues.decodeIfPresent([DimensionValueContribution].self, forKey: .dimensionValueContributionList)
        var dimensionValueContributionListDecoded0:[DimensionValueContribution]? = nil
        if let dimensionValueContributionListContainer = dimensionValueContributionListContainer {
            dimensionValueContributionListDecoded0 = [DimensionValueContribution]()
            for structure0 in dimensionValueContributionListContainer {
                dimensionValueContributionListDecoded0?.append(structure0)
            }
        }
        dimensionValueContributionList = dimensionValueContributionListDecoded0
    }
}
