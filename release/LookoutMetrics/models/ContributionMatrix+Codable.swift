// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ContributionMatrix: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dimensionContributionList = "DimensionContributionList"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensionContributionList = dimensionContributionList {
            var dimensionContributionListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensionContributionList)
            for dimensioncontributionlist0 in dimensionContributionList {
                try dimensionContributionListContainer.encode(dimensioncontributionlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionContributionListContainer = try containerValues.decodeIfPresent([DimensionContribution].self, forKey: .dimensionContributionList)
        var dimensionContributionListDecoded0:[DimensionContribution]? = nil
        if let dimensionContributionListContainer = dimensionContributionListContainer {
            dimensionContributionListDecoded0 = [DimensionContribution]()
            for structure0 in dimensionContributionListContainer {
                dimensionContributionListDecoded0?.append(structure0)
            }
        }
        dimensionContributionList = dimensionContributionListDecoded0
    }
}
