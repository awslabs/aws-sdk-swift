// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DimensionValueContribution: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case contributionScore = "ContributionScore"
        case dimensionValue = "DimensionValue"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contributionScore = contributionScore {
            try encodeContainer.encode(contributionScore, forKey: .contributionScore)
        }
        if let dimensionValue = dimensionValue {
            try encodeContainer.encode(dimensionValue, forKey: .dimensionValue)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dimensionValue)
        dimensionValue = dimensionValueDecoded
        let contributionScoreDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .contributionScore)
        contributionScore = contributionScoreDecoded
    }
}
