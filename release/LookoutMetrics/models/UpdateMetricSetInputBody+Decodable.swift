// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateMetricSetInputBody: Equatable {
    public let metricSetArn: String?
    public let metricSetDescription: String?
    public let metricList: [Metric]?
    public let offset: Int
    public let timestampColumn: TimestampColumn?
    public let dimensionList: [String]?
    public let metricSetFrequency: Frequency?
    public let metricSource: MetricSource?
}

extension UpdateMetricSetInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case dimensionList = "DimensionList"
        case metricList = "MetricList"
        case metricSetArn = "MetricSetArn"
        case metricSetDescription = "MetricSetDescription"
        case metricSetFrequency = "MetricSetFrequency"
        case metricSource = "MetricSource"
        case offset = "Offset"
        case timestampColumn = "TimestampColumn"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricSetArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .metricSetArn)
        metricSetArn = metricSetArnDecoded
        let metricSetDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .metricSetDescription)
        metricSetDescription = metricSetDescriptionDecoded
        let metricListContainer = try containerValues.decodeIfPresent([Metric].self, forKey: .metricList)
        var metricListDecoded0:[Metric]? = nil
        if let metricListContainer = metricListContainer {
            metricListDecoded0 = [Metric]()
            for structure0 in metricListContainer {
                metricListDecoded0?.append(structure0)
            }
        }
        metricList = metricListDecoded0
        let offsetDecoded = try containerValues.decode(Int.self, forKey: .offset)
        offset = offsetDecoded
        let timestampColumnDecoded = try containerValues.decodeIfPresent(TimestampColumn.self, forKey: .timestampColumn)
        timestampColumn = timestampColumnDecoded
        let dimensionListContainer = try containerValues.decodeIfPresent([String].self, forKey: .dimensionList)
        var dimensionListDecoded0:[String]? = nil
        if let dimensionListContainer = dimensionListContainer {
            dimensionListDecoded0 = [String]()
            for string0 in dimensionListContainer {
                dimensionListDecoded0?.append(string0)
            }
        }
        dimensionList = dimensionListDecoded0
        let metricSetFrequencyDecoded = try containerValues.decodeIfPresent(Frequency.self, forKey: .metricSetFrequency)
        metricSetFrequency = metricSetFrequencyDecoded
        let metricSourceDecoded = try containerValues.decodeIfPresent(MetricSource.self, forKey: .metricSource)
        metricSource = metricSourceDecoded
    }
}
