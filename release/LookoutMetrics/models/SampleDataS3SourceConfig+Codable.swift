// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SampleDataS3SourceConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fileFormatDescriptor = "FileFormatDescriptor"
        case historicalDataPathList = "HistoricalDataPathList"
        case roleArn = "RoleArn"
        case templatedPathList = "TemplatedPathList"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fileFormatDescriptor = fileFormatDescriptor {
            try encodeContainer.encode(fileFormatDescriptor, forKey: .fileFormatDescriptor)
        }
        if let historicalDataPathList = historicalDataPathList {
            var historicalDataPathListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .historicalDataPathList)
            for historicaldatapathlist0 in historicalDataPathList {
                try historicalDataPathListContainer.encode(historicaldatapathlist0)
            }
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let templatedPathList = templatedPathList {
            var templatedPathListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .templatedPathList)
            for templatedpathlist0 in templatedPathList {
                try templatedPathListContainer.encode(templatedpathlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let templatedPathListContainer = try containerValues.decodeIfPresent([String].self, forKey: .templatedPathList)
        var templatedPathListDecoded0:[String]? = nil
        if let templatedPathListContainer = templatedPathListContainer {
            templatedPathListDecoded0 = [String]()
            for string0 in templatedPathListContainer {
                templatedPathListDecoded0?.append(string0)
            }
        }
        templatedPathList = templatedPathListDecoded0
        let historicalDataPathListContainer = try containerValues.decodeIfPresent([String].self, forKey: .historicalDataPathList)
        var historicalDataPathListDecoded0:[String]? = nil
        if let historicalDataPathListContainer = historicalDataPathListContainer {
            historicalDataPathListDecoded0 = [String]()
            for string0 in historicalDataPathListContainer {
                historicalDataPathListDecoded0?.append(string0)
            }
        }
        historicalDataPathList = historicalDataPathListDecoded0
        let fileFormatDescriptorDecoded = try containerValues.decodeIfPresent(FileFormatDescriptor.self, forKey: .fileFormatDescriptor)
        fileFormatDescriptor = fileFormatDescriptorDecoded
    }
}
