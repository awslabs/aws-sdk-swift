// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EntitlementUsage: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case consumedValue = "ConsumedValue"
        case maxCount = "MaxCount"
        case name = "Name"
        case unit = "Unit"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let consumedValue = consumedValue {
            try encodeContainer.encode(consumedValue, forKey: .consumedValue)
        }
        if let maxCount = maxCount {
            try encodeContainer.encode(maxCount, forKey: .maxCount)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let unit = unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let consumedValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .consumedValue)
        consumedValue = consumedValueDecoded
        let maxCountDecoded = try containerValues.decodeIfPresent(String.self, forKey: .maxCount)
        maxCount = maxCountDecoded
        let unitDecoded = try containerValues.decodeIfPresent(EntitlementDataUnit.self, forKey: .unit)
        unit = unitDecoded
    }
}
