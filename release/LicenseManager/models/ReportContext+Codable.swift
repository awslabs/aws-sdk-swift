// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ReportContext: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case licenseConfigurationArns
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let licenseConfigurationArns = licenseConfigurationArns {
            var licenseConfigurationArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .licenseConfigurationArns)
            for arnlist0 in licenseConfigurationArns {
                try licenseConfigurationArnsContainer.encode(arnlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let licenseConfigurationArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .licenseConfigurationArns)
        var licenseConfigurationArnsDecoded0:[String]? = nil
        if let licenseConfigurationArnsContainer = licenseConfigurationArnsContainer {
            licenseConfigurationArnsDecoded0 = [String]()
            for string0 in licenseConfigurationArnsContainer {
                licenseConfigurationArnsDecoded0?.append(string0)
            }
        }
        licenseConfigurationArns = licenseConfigurationArnsDecoded0
    }
}
