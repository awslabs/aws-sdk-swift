// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CheckoutLicenseInputBody: Equatable {
    public let productSKU: String?
    public let checkoutType: CheckoutType?
    public let keyFingerprint: String?
    public let entitlements: [EntitlementData]?
    public let clientToken: String?
    public let beneficiary: String?
    public let nodeId: String?
}

extension CheckoutLicenseInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case beneficiary = "Beneficiary"
        case checkoutType = "CheckoutType"
        case clientToken = "ClientToken"
        case entitlements = "Entitlements"
        case keyFingerprint = "KeyFingerprint"
        case nodeId = "NodeId"
        case productSKU = "ProductSKU"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let productSKUDecoded = try containerValues.decodeIfPresent(String.self, forKey: .productSKU)
        productSKU = productSKUDecoded
        let checkoutTypeDecoded = try containerValues.decodeIfPresent(CheckoutType.self, forKey: .checkoutType)
        checkoutType = checkoutTypeDecoded
        let keyFingerprintDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyFingerprint)
        keyFingerprint = keyFingerprintDecoded
        let entitlementsContainer = try containerValues.decodeIfPresent([EntitlementData].self, forKey: .entitlements)
        var entitlementsDecoded0:[EntitlementData]? = nil
        if let entitlementsContainer = entitlementsContainer {
            entitlementsDecoded0 = [EntitlementData]()
            for structure0 in entitlementsContainer {
                entitlementsDecoded0?.append(structure0)
            }
        }
        entitlements = entitlementsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let beneficiaryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .beneficiary)
        beneficiary = beneficiaryDecoded
        let nodeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeId)
        nodeId = nodeIdDecoded
    }
}
