// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ListLicenseConfigurationsInput: Equatable {
    /// <p>Filters to scope the results. The following filters and logical operators
    ///         are supported:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>licenseCountingType</code> - The dimension on which licenses are counted.
    ///                Possible values are <code>vCPU</code> | <code>Instance</code> | <code>Core</code> | <code>Socket</code>.
    ///                Logical operators are <code>EQUALS</code> | <code>NOT_EQUALS</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>enforceLicenseCount</code> - A Boolean value that indicates whether hard license enforcement is used.
    ///                Logical operators are <code>EQUALS</code> | <code>NOT_EQUALS</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>usagelimitExceeded</code> - A Boolean value that indicates whether the available licenses have been exceeded.
    ///                Logical operators are <code>EQUALS</code> | <code>NOT_EQUALS</code>.</p>
    ///             </li>
    ///          </ul>
    public let filters: [Filter]?
    /// <p>Amazon Resource Names (ARN) of the license configurations.</p>
    public let licenseConfigurationArns: [String]?
    /// <p>Maximum number of results to return in a single call.</p>
    public let maxResults: Int?
    /// <p>Token for the next set of results.</p>
    public let nextToken: String?

    public init (
        filters: [Filter]? = nil,
        licenseConfigurationArns: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.filters = filters
        self.licenseConfigurationArns = licenseConfigurationArns
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}
