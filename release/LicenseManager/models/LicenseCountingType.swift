// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum LicenseCountingType {
    case core
    case instance
    case socket
    case vcpu
    case sdkUnknown(String)
}

extension LicenseCountingType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [LicenseCountingType] {
        return [
            .core,
            .instance,
            .socket,
            .vcpu,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .core: return "Core"
        case .instance: return "Instance"
        case .socket: return "Socket"
        case .vcpu: return "vCPU"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = LicenseCountingType(rawValue: rawValue) ?? LicenseCountingType.sdkUnknown(rawValue)
    }
}
