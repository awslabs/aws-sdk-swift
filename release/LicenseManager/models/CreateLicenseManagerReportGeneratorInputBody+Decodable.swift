// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateLicenseManagerReportGeneratorInputBody: Equatable {
    public let reportGeneratorName: String?
    public let type: [ReportType]?
    public let reportContext: ReportContext?
    public let reportFrequency: ReportFrequency?
    public let clientToken: String?
    public let description: String?
    public let tags: [Tag]?
}

extension CreateLicenseManagerReportGeneratorInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientToken = "ClientToken"
        case description = "Description"
        case reportContext = "ReportContext"
        case reportFrequency = "ReportFrequency"
        case reportGeneratorName = "ReportGeneratorName"
        case tags = "Tags"
        case type = "Type"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportGeneratorNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reportGeneratorName)
        reportGeneratorName = reportGeneratorNameDecoded
        let typeContainer = try containerValues.decodeIfPresent([ReportType].self, forKey: .type)
        var typeDecoded0:[ReportType]? = nil
        if let typeContainer = typeContainer {
            typeDecoded0 = [ReportType]()
            for string0 in typeContainer {
                typeDecoded0?.append(string0)
            }
        }
        type = typeDecoded0
        let reportContextDecoded = try containerValues.decodeIfPresent(ReportContext.self, forKey: .reportContext)
        reportContext = reportContextDecoded
        let reportFrequencyDecoded = try containerValues.decodeIfPresent(ReportFrequency.self, forKey: .reportFrequency)
        reportFrequency = reportFrequencyDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
