// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLicenseConfigurationsOutputBody: Equatable {
    public let licenseConfigurations: [LicenseConfiguration]?
    public let nextToken: String?
}

extension ListLicenseConfigurationsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case licenseConfigurations = "LicenseConfigurations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let licenseConfigurationsContainer = try containerValues.decodeIfPresent([LicenseConfiguration].self, forKey: .licenseConfigurations)
        var licenseConfigurationsDecoded0:[LicenseConfiguration]? = nil
        if let licenseConfigurationsContainer = licenseConfigurationsContainer {
            licenseConfigurationsDecoded0 = [LicenseConfiguration]()
            for structure0 in licenseConfigurationsContainer {
                licenseConfigurationsDecoded0?.append(structure0)
            }
        }
        licenseConfigurations = licenseConfigurationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
