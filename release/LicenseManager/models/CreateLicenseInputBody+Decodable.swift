// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateLicenseInputBody: Equatable {
    public let licenseName: String?
    public let productName: String?
    public let productSKU: String?
    public let issuer: Issuer?
    public let homeRegion: String?
    public let validity: DatetimeRange?
    public let entitlements: [Entitlement]?
    public let beneficiary: String?
    public let consumptionConfiguration: ConsumptionConfiguration?
    public let licenseMetadata: [Metadata]?
    public let clientToken: String?
}

extension CreateLicenseInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case beneficiary = "Beneficiary"
        case clientToken = "ClientToken"
        case consumptionConfiguration = "ConsumptionConfiguration"
        case entitlements = "Entitlements"
        case homeRegion = "HomeRegion"
        case issuer = "Issuer"
        case licenseMetadata = "LicenseMetadata"
        case licenseName = "LicenseName"
        case productName = "ProductName"
        case productSKU = "ProductSKU"
        case validity = "Validity"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let licenseNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .licenseName)
        licenseName = licenseNameDecoded
        let productNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .productName)
        productName = productNameDecoded
        let productSKUDecoded = try containerValues.decodeIfPresent(String.self, forKey: .productSKU)
        productSKU = productSKUDecoded
        let issuerDecoded = try containerValues.decodeIfPresent(Issuer.self, forKey: .issuer)
        issuer = issuerDecoded
        let homeRegionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .homeRegion)
        homeRegion = homeRegionDecoded
        let validityDecoded = try containerValues.decodeIfPresent(DatetimeRange.self, forKey: .validity)
        validity = validityDecoded
        let entitlementsContainer = try containerValues.decodeIfPresent([Entitlement].self, forKey: .entitlements)
        var entitlementsDecoded0:[Entitlement]? = nil
        if let entitlementsContainer = entitlementsContainer {
            entitlementsDecoded0 = [Entitlement]()
            for structure0 in entitlementsContainer {
                entitlementsDecoded0?.append(structure0)
            }
        }
        entitlements = entitlementsDecoded0
        let beneficiaryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .beneficiary)
        beneficiary = beneficiaryDecoded
        let consumptionConfigurationDecoded = try containerValues.decodeIfPresent(ConsumptionConfiguration.self, forKey: .consumptionConfiguration)
        consumptionConfiguration = consumptionConfigurationDecoded
        let licenseMetadataContainer = try containerValues.decodeIfPresent([Metadata].self, forKey: .licenseMetadata)
        var licenseMetadataDecoded0:[Metadata]? = nil
        if let licenseMetadataContainer = licenseMetadataContainer {
            licenseMetadataDecoded0 = [Metadata]()
            for structure0 in licenseMetadataContainer {
                licenseMetadataDecoded0?.append(structure0)
            }
        }
        licenseMetadata = licenseMetadataDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
