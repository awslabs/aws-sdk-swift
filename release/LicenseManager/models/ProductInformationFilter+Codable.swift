// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProductInformationFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case productInformationFilterComparator = "ProductInformationFilterComparator"
        case productInformationFilterName = "ProductInformationFilterName"
        case productInformationFilterValue = "ProductInformationFilterValue"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let productInformationFilterComparator = productInformationFilterComparator {
            try encodeContainer.encode(productInformationFilterComparator, forKey: .productInformationFilterComparator)
        }
        if let productInformationFilterName = productInformationFilterName {
            try encodeContainer.encode(productInformationFilterName, forKey: .productInformationFilterName)
        }
        if let productInformationFilterValue = productInformationFilterValue {
            var productInformationFilterValueContainer = encodeContainer.nestedUnkeyedContainer(forKey: .productInformationFilterValue)
            for stringlist0 in productInformationFilterValue {
                try productInformationFilterValueContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let productInformationFilterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .productInformationFilterName)
        productInformationFilterName = productInformationFilterNameDecoded
        let productInformationFilterValueContainer = try containerValues.decodeIfPresent([String].self, forKey: .productInformationFilterValue)
        var productInformationFilterValueDecoded0:[String]? = nil
        if let productInformationFilterValueContainer = productInformationFilterValueContainer {
            productInformationFilterValueDecoded0 = [String]()
            for string0 in productInformationFilterValueContainer {
                productInformationFilterValueDecoded0?.append(string0)
            }
        }
        productInformationFilterValue = productInformationFilterValueDecoded0
        let productInformationFilterComparatorDecoded = try containerValues.decodeIfPresent(String.self, forKey: .productInformationFilterComparator)
        productInformationFilterComparator = productInformationFilterComparatorDecoded
    }
}
