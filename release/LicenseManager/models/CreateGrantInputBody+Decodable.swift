// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateGrantInputBody: Equatable {
    public let clientToken: String?
    public let grantName: String?
    public let licenseArn: String?
    public let principals: [String]?
    public let homeRegion: String?
    public let allowedOperations: [AllowedOperation]?
}

extension CreateGrantInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case allowedOperations = "AllowedOperations"
        case clientToken = "ClientToken"
        case grantName = "GrantName"
        case homeRegion = "HomeRegion"
        case licenseArn = "LicenseArn"
        case principals = "Principals"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let grantNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .grantName)
        grantName = grantNameDecoded
        let licenseArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .licenseArn)
        licenseArn = licenseArnDecoded
        let principalsContainer = try containerValues.decodeIfPresent([String].self, forKey: .principals)
        var principalsDecoded0:[String]? = nil
        if let principalsContainer = principalsContainer {
            principalsDecoded0 = [String]()
            for string0 in principalsContainer {
                principalsDecoded0?.append(string0)
            }
        }
        principals = principalsDecoded0
        let homeRegionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .homeRegion)
        homeRegion = homeRegionDecoded
        let allowedOperationsContainer = try containerValues.decodeIfPresent([AllowedOperation].self, forKey: .allowedOperations)
        var allowedOperationsDecoded0:[AllowedOperation]? = nil
        if let allowedOperationsContainer = allowedOperationsContainer {
            allowedOperationsDecoded0 = [AllowedOperation]()
            for string0 in allowedOperationsContainer {
                allowedOperationsDecoded0?.append(string0)
            }
        }
        allowedOperations = allowedOperationsDecoded0
    }
}
