// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ListUsageForLicenseConfigurationInput: Equatable {
    /// <p>Filters to scope the results. The following filters and logical operators
    ///         are supported:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>resourceArn</code> - The ARN of the license configuration resource.
    ///                Logical operators are <code>EQUALS</code> | <code>NOT_EQUALS</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>resourceType</code> - The resource type (<code>EC2_INSTANCE</code> | <code>EC2_HOST</code> | <code>EC2_AMI</code> | <code>SYSTEMS_MANAGER_MANAGED_INSTANCE</code>).
    ///                Logical operators are <code>EQUALS</code> | <code>NOT_EQUALS</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>resourceAccount</code> - The ID of the account that owns the resource.
    ///                Logical operators are <code>EQUALS</code> | <code>NOT_EQUALS</code>.</p>
    ///             </li>
    ///          </ul>
    public let filters: [Filter]?
    /// <p>Amazon Resource Name (ARN) of the license configuration.</p>
    public let licenseConfigurationArn: String?
    /// <p>Maximum number of results to return in a single call.</p>
    public let maxResults: Int?
    /// <p>Token for the next set of results.</p>
    public let nextToken: String?

    public init (
        filters: [Filter]? = nil,
        licenseConfigurationArn: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.filters = filters
        self.licenseConfigurationArn = licenseConfigurationArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}
