// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateGrantVersionInputBody: Equatable {
    public let clientToken: String?
    public let grantArn: String?
    public let grantName: String?
    public let allowedOperations: [AllowedOperation]?
    public let status: GrantStatus?
    public let sourceVersion: String?
}

extension CreateGrantVersionInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case allowedOperations = "AllowedOperations"
        case clientToken = "ClientToken"
        case grantArn = "GrantArn"
        case grantName = "GrantName"
        case sourceVersion = "SourceVersion"
        case status = "Status"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let grantArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .grantArn)
        grantArn = grantArnDecoded
        let grantNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .grantName)
        grantName = grantNameDecoded
        let allowedOperationsContainer = try containerValues.decodeIfPresent([AllowedOperation].self, forKey: .allowedOperations)
        var allowedOperationsDecoded0:[AllowedOperation]? = nil
        if let allowedOperationsContainer = allowedOperationsContainer {
            allowedOperationsDecoded0 = [AllowedOperation]()
            for string0 in allowedOperationsContainer {
                allowedOperationsDecoded0?.append(string0)
            }
        }
        allowedOperations = allowedOperationsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(GrantStatus.self, forKey: .status)
        status = statusDecoded
        let sourceVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceVersion)
        sourceVersion = sourceVersionDecoded
    }
}
