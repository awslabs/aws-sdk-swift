// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLicenseSpecificationsForResourceOutputBody: Equatable {
    public let licenseSpecifications: [LicenseSpecification]?
    public let nextToken: String?
}

extension ListLicenseSpecificationsForResourceOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case licenseSpecifications = "LicenseSpecifications"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let licenseSpecificationsContainer = try containerValues.decodeIfPresent([LicenseSpecification].self, forKey: .licenseSpecifications)
        var licenseSpecificationsDecoded0:[LicenseSpecification]? = nil
        if let licenseSpecificationsContainer = licenseSpecificationsContainer {
            licenseSpecificationsDecoded0 = [LicenseSpecification]()
            for structure0 in licenseSpecificationsContainer {
                licenseSpecificationsDecoded0?.append(structure0)
            }
        }
        licenseSpecifications = licenseSpecificationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
