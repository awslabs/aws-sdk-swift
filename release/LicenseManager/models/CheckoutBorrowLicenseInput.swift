// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CheckoutBorrowLicenseInput: Equatable {
    /// <p>Information about constraints.</p>
    public let checkoutMetadata: [Metadata]?
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    public let clientToken: String?
    /// <p>Digital signature method. The possible value is JSON Web Signature (JWS) algorithm PS384.
    ///          For more information, see <a href="https://tools.ietf.org/html/rfc7518#section-3.5">RFC 7518 Digital Signature with RSASSA-PSS</a>.</p>
    public let digitalSignatureMethod: DigitalSignatureMethod?
    /// <p>License entitlements. Partial checkouts are not supported.</p>
    public let entitlements: [EntitlementData]?
    /// <p>Amazon Resource Name (ARN) of the license. The license must use the borrow consumption configuration.</p>
    public let licenseArn: String?
    /// <p>Node ID.</p>
    public let nodeId: String?

    public init (
        checkoutMetadata: [Metadata]? = nil,
        clientToken: String? = nil,
        digitalSignatureMethod: DigitalSignatureMethod? = nil,
        entitlements: [EntitlementData]? = nil,
        licenseArn: String? = nil,
        nodeId: String? = nil
    )
    {
        self.checkoutMetadata = checkoutMetadata
        self.clientToken = clientToken
        self.digitalSignatureMethod = digitalSignatureMethod
        self.entitlements = entitlements
        self.licenseArn = licenseArn
        self.nodeId = nodeId
    }
}
