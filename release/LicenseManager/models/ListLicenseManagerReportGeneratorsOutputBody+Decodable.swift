// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLicenseManagerReportGeneratorsOutputBody: Equatable {
    public let reportGenerators: [ReportGenerator]?
    public let nextToken: String?
}

extension ListLicenseManagerReportGeneratorsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case reportGenerators = "ReportGenerators"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportGeneratorsContainer = try containerValues.decodeIfPresent([ReportGenerator].self, forKey: .reportGenerators)
        var reportGeneratorsDecoded0:[ReportGenerator]? = nil
        if let reportGeneratorsContainer = reportGeneratorsContainer {
            reportGeneratorsDecoded0 = [ReportGenerator]()
            for structure0 in reportGeneratorsContainer {
                reportGeneratorsDecoded0?.append(structure0)
            }
        }
        reportGenerators = reportGeneratorsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
