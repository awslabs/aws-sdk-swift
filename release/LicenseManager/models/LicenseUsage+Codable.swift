// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LicenseUsage: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case entitlementUsages = "EntitlementUsages"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entitlementUsages = entitlementUsages {
            var entitlementUsagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entitlementUsages)
            for entitlementusagelist0 in entitlementUsages {
                try entitlementUsagesContainer.encode(entitlementusagelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entitlementUsagesContainer = try containerValues.decodeIfPresent([EntitlementUsage].self, forKey: .entitlementUsages)
        var entitlementUsagesDecoded0:[EntitlementUsage]? = nil
        if let entitlementUsagesContainer = entitlementUsagesContainer {
            entitlementUsagesDecoded0 = [EntitlementUsage]()
            for structure0 in entitlementUsagesContainer {
                entitlementUsagesDecoded0?.append(structure0)
            }
        }
        entitlementUsages = entitlementUsagesDecoded0
    }
}
