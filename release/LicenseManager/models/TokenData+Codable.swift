// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TokenData: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case expirationTime = "ExpirationTime"
        case licenseArn = "LicenseArn"
        case roleArns = "RoleArns"
        case status = "Status"
        case tokenId = "TokenId"
        case tokenProperties = "TokenProperties"
        case tokenType = "TokenType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expirationTime = expirationTime {
            try encodeContainer.encode(expirationTime, forKey: .expirationTime)
        }
        if let licenseArn = licenseArn {
            try encodeContainer.encode(licenseArn, forKey: .licenseArn)
        }
        if let roleArns = roleArns {
            var roleArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .roleArns)
            for arnlist0 in roleArns {
                try roleArnsContainer.encode(arnlist0)
            }
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let tokenId = tokenId {
            try encodeContainer.encode(tokenId, forKey: .tokenId)
        }
        if let tokenProperties = tokenProperties {
            var tokenPropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tokenProperties)
            for maxsize3stringlist0 in tokenProperties {
                try tokenPropertiesContainer.encode(maxsize3stringlist0)
            }
        }
        if let tokenType = tokenType {
            try encodeContainer.encode(tokenType, forKey: .tokenType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tokenIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tokenId)
        tokenId = tokenIdDecoded
        let tokenTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tokenType)
        tokenType = tokenTypeDecoded
        let licenseArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .licenseArn)
        licenseArn = licenseArnDecoded
        let expirationTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .expirationTime)
        expirationTime = expirationTimeDecoded
        let tokenPropertiesContainer = try containerValues.decodeIfPresent([String].self, forKey: .tokenProperties)
        var tokenPropertiesDecoded0:[String]? = nil
        if let tokenPropertiesContainer = tokenPropertiesContainer {
            tokenPropertiesDecoded0 = [String]()
            for string0 in tokenPropertiesContainer {
                tokenPropertiesDecoded0?.append(string0)
            }
        }
        tokenProperties = tokenPropertiesDecoded0
        let roleArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .roleArns)
        var roleArnsDecoded0:[String]? = nil
        if let roleArnsContainer = roleArnsContainer {
            roleArnsDecoded0 = [String]()
            for string0 in roleArnsContainer {
                roleArnsDecoded0?.append(string0)
            }
        }
        roleArns = roleArnsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
    }
}
