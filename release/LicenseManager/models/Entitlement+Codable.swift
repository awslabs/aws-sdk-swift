// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Entitlement: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allowCheckIn = "AllowCheckIn"
        case maxCount = "MaxCount"
        case name = "Name"
        case overage = "Overage"
        case unit = "Unit"
        case value = "Value"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowCheckIn = allowCheckIn {
            try encodeContainer.encode(allowCheckIn, forKey: .allowCheckIn)
        }
        if let maxCount = maxCount {
            try encodeContainer.encode(maxCount, forKey: .maxCount)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let overage = overage {
            try encodeContainer.encode(overage, forKey: .overage)
        }
        if let unit = unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
        let maxCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxCount)
        maxCount = maxCountDecoded
        let overageDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .overage)
        overage = overageDecoded
        let unitDecoded = try containerValues.decodeIfPresent(EntitlementUnit.self, forKey: .unit)
        unit = unitDecoded
        let allowCheckInDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .allowCheckIn)
        allowCheckIn = allowCheckInDecoded
    }
}
