// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateLicenseConfigurationInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let licenseCountingType: LicenseCountingType?
    public let licenseCount: Int?
    public let licenseCountHardLimit: Bool?
    public let licenseRules: [String]?
    public let tags: [Tag]?
    public let disassociateWhenNotFound: Bool?
    public let productInformationList: [ProductInformation]?
}

extension CreateLicenseConfigurationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case disassociateWhenNotFound = "DisassociateWhenNotFound"
        case licenseCount = "LicenseCount"
        case licenseCountHardLimit = "LicenseCountHardLimit"
        case licenseCountingType = "LicenseCountingType"
        case licenseRules = "LicenseRules"
        case name = "Name"
        case productInformationList = "ProductInformationList"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let licenseCountingTypeDecoded = try containerValues.decodeIfPresent(LicenseCountingType.self, forKey: .licenseCountingType)
        licenseCountingType = licenseCountingTypeDecoded
        let licenseCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .licenseCount)
        licenseCount = licenseCountDecoded
        let licenseCountHardLimitDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .licenseCountHardLimit)
        licenseCountHardLimit = licenseCountHardLimitDecoded
        let licenseRulesContainer = try containerValues.decodeIfPresent([String].self, forKey: .licenseRules)
        var licenseRulesDecoded0:[String]? = nil
        if let licenseRulesContainer = licenseRulesContainer {
            licenseRulesDecoded0 = [String]()
            for string0 in licenseRulesContainer {
                licenseRulesDecoded0?.append(string0)
            }
        }
        licenseRules = licenseRulesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let disassociateWhenNotFoundDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .disassociateWhenNotFound)
        disassociateWhenNotFound = disassociateWhenNotFoundDecoded
        let productInformationListContainer = try containerValues.decodeIfPresent([ProductInformation].self, forKey: .productInformationList)
        var productInformationListDecoded0:[ProductInformation]? = nil
        if let productInformationListContainer = productInformationListContainer {
            productInformationListDecoded0 = [ProductInformation]()
            for structure0 in productInformationListContainer {
                productInformationListDecoded0?.append(structure0)
            }
        }
        productInformationList = productInformationListDecoded0
    }
}
