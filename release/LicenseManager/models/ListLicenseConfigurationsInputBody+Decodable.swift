// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLicenseConfigurationsInputBody: Equatable {
    public let licenseConfigurationArns: [String]?
    public let maxResults: Int?
    public let nextToken: String?
    public let filters: [Filter]?
}

extension ListLicenseConfigurationsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case filters = "Filters"
        case licenseConfigurationArns = "LicenseConfigurationArns"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let licenseConfigurationArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .licenseConfigurationArns)
        var licenseConfigurationArnsDecoded0:[String]? = nil
        if let licenseConfigurationArnsContainer = licenseConfigurationArnsContainer {
            licenseConfigurationArnsDecoded0 = [String]()
            for string0 in licenseConfigurationArnsContainer {
                licenseConfigurationArnsDecoded0?.append(string0)
            }
        }
        licenseConfigurationArns = licenseConfigurationArnsDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let filtersContainer = try containerValues.decodeIfPresent([Filter].self, forKey: .filters)
        var filtersDecoded0:[Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [Filter]()
            for structure0 in filtersContainer {
                filtersDecoded0?.append(structure0)
            }
        }
        filters = filtersDecoded0
    }
}
