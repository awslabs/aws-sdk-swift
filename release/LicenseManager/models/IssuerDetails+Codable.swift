// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IssuerDetails: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case keyFingerprint = "KeyFingerprint"
        case name = "Name"
        case signKey = "SignKey"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyFingerprint = keyFingerprint {
            try encodeContainer.encode(keyFingerprint, forKey: .keyFingerprint)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let signKey = signKey {
            try encodeContainer.encode(signKey, forKey: .signKey)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let signKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .signKey)
        signKey = signKeyDecoded
        let keyFingerprintDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyFingerprint)
        keyFingerprint = keyFingerprintDecoded
    }
}
