// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListAssociationsForLicenseConfigurationOutputBody: Equatable {
    public let licenseConfigurationAssociations: [LicenseConfigurationAssociation]?
    public let nextToken: String?
}

extension ListAssociationsForLicenseConfigurationOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case licenseConfigurationAssociations = "LicenseConfigurationAssociations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let licenseConfigurationAssociationsContainer = try containerValues.decodeIfPresent([LicenseConfigurationAssociation].self, forKey: .licenseConfigurationAssociations)
        var licenseConfigurationAssociationsDecoded0:[LicenseConfigurationAssociation]? = nil
        if let licenseConfigurationAssociationsContainer = licenseConfigurationAssociationsContainer {
            licenseConfigurationAssociationsDecoded0 = [LicenseConfigurationAssociation]()
            for structure0 in licenseConfigurationAssociationsContainer {
                licenseConfigurationAssociationsDecoded0?.append(structure0)
            }
        }
        licenseConfigurationAssociations = licenseConfigurationAssociationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
