// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateLicenseConfigurationInputBody: Equatable {
    public let licenseConfigurationArn: String?
    public let licenseConfigurationStatus: LicenseConfigurationStatus?
    public let licenseRules: [String]?
    public let licenseCount: Int?
    public let licenseCountHardLimit: Bool?
    public let name: String?
    public let description: String?
    public let productInformationList: [ProductInformation]?
    public let disassociateWhenNotFound: Bool?
}

extension UpdateLicenseConfigurationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case disassociateWhenNotFound = "DisassociateWhenNotFound"
        case licenseConfigurationArn = "LicenseConfigurationArn"
        case licenseConfigurationStatus = "LicenseConfigurationStatus"
        case licenseCount = "LicenseCount"
        case licenseCountHardLimit = "LicenseCountHardLimit"
        case licenseRules = "LicenseRules"
        case name = "Name"
        case productInformationList = "ProductInformationList"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let licenseConfigurationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .licenseConfigurationArn)
        licenseConfigurationArn = licenseConfigurationArnDecoded
        let licenseConfigurationStatusDecoded = try containerValues.decodeIfPresent(LicenseConfigurationStatus.self, forKey: .licenseConfigurationStatus)
        licenseConfigurationStatus = licenseConfigurationStatusDecoded
        let licenseRulesContainer = try containerValues.decodeIfPresent([String].self, forKey: .licenseRules)
        var licenseRulesDecoded0:[String]? = nil
        if let licenseRulesContainer = licenseRulesContainer {
            licenseRulesDecoded0 = [String]()
            for string0 in licenseRulesContainer {
                licenseRulesDecoded0?.append(string0)
            }
        }
        licenseRules = licenseRulesDecoded0
        let licenseCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .licenseCount)
        licenseCount = licenseCountDecoded
        let licenseCountHardLimitDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .licenseCountHardLimit)
        licenseCountHardLimit = licenseCountHardLimitDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let productInformationListContainer = try containerValues.decodeIfPresent([ProductInformation].self, forKey: .productInformationList)
        var productInformationListDecoded0:[ProductInformation]? = nil
        if let productInformationListContainer = productInformationListContainer {
            productInformationListDecoded0 = [ProductInformation]()
            for structure0 in productInformationListContainer {
                productInformationListDecoded0?.append(structure0)
            }
        }
        productInformationList = productInformationListDecoded0
        let disassociateWhenNotFoundDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .disassociateWhenNotFound)
        disassociateWhenNotFound = disassociateWhenNotFoundDecoded
    }
}
