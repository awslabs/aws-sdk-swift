// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateLicenseConfigurationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case disassociateWhenNotFound = "DisassociateWhenNotFound"
        case licenseCount = "LicenseCount"
        case licenseCountHardLimit = "LicenseCountHardLimit"
        case licenseCountingType = "LicenseCountingType"
        case licenseRules = "LicenseRules"
        case name = "Name"
        case productInformationList = "ProductInformationList"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let disassociateWhenNotFound = disassociateWhenNotFound {
            try encodeContainer.encode(disassociateWhenNotFound, forKey: .disassociateWhenNotFound)
        }
        if let licenseCount = licenseCount {
            try encodeContainer.encode(licenseCount, forKey: .licenseCount)
        }
        if let licenseCountHardLimit = licenseCountHardLimit {
            try encodeContainer.encode(licenseCountHardLimit, forKey: .licenseCountHardLimit)
        }
        if let licenseCountingType = licenseCountingType {
            try encodeContainer.encode(licenseCountingType.rawValue, forKey: .licenseCountingType)
        }
        if let licenseRules = licenseRules {
            var licenseRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .licenseRules)
            for stringlist0 in licenseRules {
                try licenseRulesContainer.encode(stringlist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let productInformationList = productInformationList {
            var productInformationListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .productInformationList)
            for productinformationlist0 in productInformationList {
                try productInformationListContainer.encode(productinformationlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
