// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProductInformation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case productInformationFilterList = "ProductInformationFilterList"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let productInformationFilterList = productInformationFilterList {
            var productInformationFilterListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .productInformationFilterList)
            for productinformationfilterlist0 in productInformationFilterList {
                try productInformationFilterListContainer.encode(productinformationfilterlist0)
            }
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let productInformationFilterListContainer = try containerValues.decodeIfPresent([ProductInformationFilter].self, forKey: .productInformationFilterList)
        var productInformationFilterListDecoded0:[ProductInformationFilter]? = nil
        if let productInformationFilterListContainer = productInformationFilterListContainer {
            productInformationFilterListDecoded0 = [ProductInformationFilter]()
            for structure0 in productInformationFilterListContainer {
                productInformationFilterListDecoded0?.append(structure0)
            }
        }
        productInformationFilterList = productInformationFilterListDecoded0
    }
}
