// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListUsageForLicenseConfigurationOutputBody: Equatable {
    public let licenseConfigurationUsageList: [LicenseConfigurationUsage]?
    public let nextToken: String?
}

extension ListUsageForLicenseConfigurationOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case licenseConfigurationUsageList = "LicenseConfigurationUsageList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let licenseConfigurationUsageListContainer = try containerValues.decodeIfPresent([LicenseConfigurationUsage].self, forKey: .licenseConfigurationUsageList)
        var licenseConfigurationUsageListDecoded0:[LicenseConfigurationUsage]? = nil
        if let licenseConfigurationUsageListContainer = licenseConfigurationUsageListContainer {
            licenseConfigurationUsageListDecoded0 = [LicenseConfigurationUsage]()
            for structure0 in licenseConfigurationUsageListContainer {
                licenseConfigurationUsageListDecoded0?.append(structure0)
            }
        }
        licenseConfigurationUsageList = licenseConfigurationUsageListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
