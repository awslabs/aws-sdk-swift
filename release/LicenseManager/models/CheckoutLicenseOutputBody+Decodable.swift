// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CheckoutLicenseOutputBody: Equatable {
    public let checkoutType: CheckoutType?
    public let licenseConsumptionToken: String?
    public let entitlementsAllowed: [EntitlementData]?
    public let signedToken: String?
    public let nodeId: String?
    public let issuedAt: String?
    public let expiration: String?
}

extension CheckoutLicenseOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case checkoutType = "CheckoutType"
        case entitlementsAllowed = "EntitlementsAllowed"
        case expiration = "Expiration"
        case issuedAt = "IssuedAt"
        case licenseConsumptionToken = "LicenseConsumptionToken"
        case nodeId = "NodeId"
        case signedToken = "SignedToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let checkoutTypeDecoded = try containerValues.decodeIfPresent(CheckoutType.self, forKey: .checkoutType)
        checkoutType = checkoutTypeDecoded
        let licenseConsumptionTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .licenseConsumptionToken)
        licenseConsumptionToken = licenseConsumptionTokenDecoded
        let entitlementsAllowedContainer = try containerValues.decodeIfPresent([EntitlementData].self, forKey: .entitlementsAllowed)
        var entitlementsAllowedDecoded0:[EntitlementData]? = nil
        if let entitlementsAllowedContainer = entitlementsAllowedContainer {
            entitlementsAllowedDecoded0 = [EntitlementData]()
            for structure0 in entitlementsAllowedContainer {
                entitlementsAllowedDecoded0?.append(structure0)
            }
        }
        entitlementsAllowed = entitlementsAllowedDecoded0
        let signedTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .signedToken)
        signedToken = signedTokenDecoded
        let nodeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeId)
        nodeId = nodeIdDecoded
        let issuedAtDecoded = try containerValues.decodeIfPresent(String.self, forKey: .issuedAt)
        issuedAt = issuedAtDecoded
        let expirationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .expiration)
        expiration = expirationDecoded
    }
}
