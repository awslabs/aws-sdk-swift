// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum AllowedOperation {
    case checkoutBorrowLicense
    case checkoutLicense
    case checkInLicense
    case createGrant
    case createToken
    case extendConsumptionLicense
    case listPurchasedLicenses
    case sdkUnknown(String)
}

extension AllowedOperation : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [AllowedOperation] {
        return [
            .checkoutBorrowLicense,
            .checkoutLicense,
            .checkInLicense,
            .createGrant,
            .createToken,
            .extendConsumptionLicense,
            .listPurchasedLicenses,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .checkoutBorrowLicense: return "CheckoutBorrowLicense"
        case .checkoutLicense: return "CheckoutLicense"
        case .checkInLicense: return "CheckInLicense"
        case .createGrant: return "CreateGrant"
        case .createToken: return "CreateToken"
        case .extendConsumptionLicense: return "ExtendConsumptionLicense"
        case .listPurchasedLicenses: return "ListPurchasedLicenses"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = AllowedOperation(rawValue: rawValue) ?? AllowedOperation.sdkUnknown(rawValue)
    }
}
