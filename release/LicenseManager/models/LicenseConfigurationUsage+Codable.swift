// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LicenseConfigurationUsage: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case associationTime = "AssociationTime"
        case consumedLicenses = "ConsumedLicenses"
        case resourceArn = "ResourceArn"
        case resourceOwnerId = "ResourceOwnerId"
        case resourceStatus = "ResourceStatus"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationTime = associationTime {
            try encodeContainer.encode(associationTime.timeIntervalSince1970, forKey: .associationTime)
        }
        if let consumedLicenses = consumedLicenses {
            try encodeContainer.encode(consumedLicenses, forKey: .consumedLicenses)
        }
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let resourceOwnerId = resourceOwnerId {
            try encodeContainer.encode(resourceOwnerId, forKey: .resourceOwnerId)
        }
        if let resourceStatus = resourceStatus {
            try encodeContainer.encode(resourceStatus, forKey: .resourceStatus)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceStatus)
        resourceStatus = resourceStatusDecoded
        let resourceOwnerIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceOwnerId)
        resourceOwnerId = resourceOwnerIdDecoded
        let associationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .associationTime)
        associationTime = associationTimeDecoded
        let consumedLicensesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .consumedLicenses)
        consumedLicenses = consumedLicensesDecoded
    }
}
