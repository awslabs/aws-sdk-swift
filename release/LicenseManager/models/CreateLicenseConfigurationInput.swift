// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateLicenseConfigurationInput: Equatable {
    /// <p>Description of the license configuration.</p>
    public let description: String?
    /// <p>When true, disassociates a resource when software is uninstalled.</p>
    public let disassociateWhenNotFound: Bool?
    /// <p>Number of licenses managed by the license configuration.</p>
    public let licenseCount: Int?
    /// <p>Indicates whether hard or soft license enforcement is used. Exceeding a hard limit
    ///          blocks the launch of new instances.</p>
    public let licenseCountHardLimit: Bool?
    /// <p>Dimension used to track the license inventory.</p>
    public let licenseCountingType: LicenseCountingType?
    /// <p>License rules. The syntax is #name=value (for example, #allowedTenancy=EC2-DedicatedHost). The available rules
    ///          vary by dimension, as follows.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Cores</code> dimension: <code>allowedTenancy</code> |
    ///                <code>licenseAffinityToHost</code> |
    ///                <code>maximumCores</code> | <code>minimumCores</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Instances</code> dimension: <code>allowedTenancy</code> |
    ///                <code>maximumCores</code> | <code>minimumCores</code> |
    ///                <code>maximumSockets</code> | <code>minimumSockets</code> |
    ///                <code>maximumVcpus</code> | <code>minimumVcpus</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Sockets</code> dimension: <code>allowedTenancy</code> |
    ///                <code>licenseAffinityToHost</code> |
    ///                <code>maximumSockets</code> | <code>minimumSockets</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>vCPUs</code> dimension: <code>allowedTenancy</code> |
    ///                <code>honorVcpuOptimization</code> |
    ///                <code>maximumVcpus</code> | <code>minimumVcpus</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <p>The unit for <code>licenseAffinityToHost</code> is days and the range is 1 to 180. The possible
    ///          values for <code>allowedTenancy</code> are <code>EC2-Default</code>, <code>EC2-DedicatedHost</code>, and
    ///          <code>EC2-DedicatedInstance</code>. The possible values for <code>honorVcpuOptimization</code> are
    ///          <code>True</code> and <code>False</code>.</p>
    public let licenseRules: [String]?
    /// <p>Name of the license configuration.</p>
    public let name: String?
    /// <p>Product information.</p>
    public let productInformationList: [ProductInformation]?
    /// <p>Tags to add to the license configuration.</p>
    public let tags: [Tag]?

    public init (
        description: String? = nil,
        disassociateWhenNotFound: Bool? = nil,
        licenseCount: Int? = nil,
        licenseCountHardLimit: Bool? = nil,
        licenseCountingType: LicenseCountingType? = nil,
        licenseRules: [String]? = nil,
        name: String? = nil,
        productInformationList: [ProductInformation]? = nil,
        tags: [Tag]? = nil
    )
    {
        self.description = description
        self.disassociateWhenNotFound = disassociateWhenNotFound
        self.licenseCount = licenseCount
        self.licenseCountHardLimit = licenseCountHardLimit
        self.licenseCountingType = licenseCountingType
        self.licenseRules = licenseRules
        self.name = name
        self.productInformationList = productInformationList
        self.tags = tags
    }
}
