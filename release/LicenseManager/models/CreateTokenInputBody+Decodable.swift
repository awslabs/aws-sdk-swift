// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTokenInputBody: Equatable {
    public let licenseArn: String?
    public let roleArns: [String]?
    public let expirationInDays: Int?
    public let tokenProperties: [String]?
    public let clientToken: String?
}

extension CreateTokenInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientToken = "ClientToken"
        case expirationInDays = "ExpirationInDays"
        case licenseArn = "LicenseArn"
        case roleArns = "RoleArns"
        case tokenProperties = "TokenProperties"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let licenseArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .licenseArn)
        licenseArn = licenseArnDecoded
        let roleArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .roleArns)
        var roleArnsDecoded0:[String]? = nil
        if let roleArnsContainer = roleArnsContainer {
            roleArnsDecoded0 = [String]()
            for string0 in roleArnsContainer {
                roleArnsDecoded0?.append(string0)
            }
        }
        roleArns = roleArnsDecoded0
        let expirationInDaysDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .expirationInDays)
        expirationInDays = expirationInDaysDecoded
        let tokenPropertiesContainer = try containerValues.decodeIfPresent([String].self, forKey: .tokenProperties)
        var tokenPropertiesDecoded0:[String]? = nil
        if let tokenPropertiesContainer = tokenPropertiesContainer {
            tokenPropertiesDecoded0 = [String]()
            for string0 in tokenPropertiesContainer {
                tokenPropertiesDecoded0?.append(string0)
            }
        }
        tokenProperties = tokenPropertiesDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
