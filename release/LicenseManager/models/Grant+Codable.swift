// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Grant: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case grantArn = "GrantArn"
        case grantName = "GrantName"
        case grantStatus = "GrantStatus"
        case grantedOperations = "GrantedOperations"
        case granteePrincipalArn = "GranteePrincipalArn"
        case homeRegion = "HomeRegion"
        case licenseArn = "LicenseArn"
        case parentArn = "ParentArn"
        case statusReason = "StatusReason"
        case version = "Version"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let grantArn = grantArn {
            try encodeContainer.encode(grantArn, forKey: .grantArn)
        }
        if let grantName = grantName {
            try encodeContainer.encode(grantName, forKey: .grantName)
        }
        if let grantStatus = grantStatus {
            try encodeContainer.encode(grantStatus.rawValue, forKey: .grantStatus)
        }
        if let grantedOperations = grantedOperations {
            var grantedOperationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .grantedOperations)
            for allowedoperationlist0 in grantedOperations {
                try grantedOperationsContainer.encode(allowedoperationlist0.rawValue)
            }
        }
        if let granteePrincipalArn = granteePrincipalArn {
            try encodeContainer.encode(granteePrincipalArn, forKey: .granteePrincipalArn)
        }
        if let homeRegion = homeRegion {
            try encodeContainer.encode(homeRegion, forKey: .homeRegion)
        }
        if let licenseArn = licenseArn {
            try encodeContainer.encode(licenseArn, forKey: .licenseArn)
        }
        if let parentArn = parentArn {
            try encodeContainer.encode(parentArn, forKey: .parentArn)
        }
        if let statusReason = statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let grantArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .grantArn)
        grantArn = grantArnDecoded
        let grantNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .grantName)
        grantName = grantNameDecoded
        let parentArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parentArn)
        parentArn = parentArnDecoded
        let licenseArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .licenseArn)
        licenseArn = licenseArnDecoded
        let granteePrincipalArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .granteePrincipalArn)
        granteePrincipalArn = granteePrincipalArnDecoded
        let homeRegionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .homeRegion)
        homeRegion = homeRegionDecoded
        let grantStatusDecoded = try containerValues.decodeIfPresent(GrantStatus.self, forKey: .grantStatus)
        grantStatus = grantStatusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let versionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .version)
        version = versionDecoded
        let grantedOperationsContainer = try containerValues.decodeIfPresent([AllowedOperation].self, forKey: .grantedOperations)
        var grantedOperationsDecoded0:[AllowedOperation]? = nil
        if let grantedOperationsContainer = grantedOperationsContainer {
            grantedOperationsDecoded0 = [AllowedOperation]()
            for string0 in grantedOperationsContainer {
                grantedOperationsDecoded0?.append(string0)
            }
        }
        grantedOperations = grantedOperationsDecoded0
    }
}
