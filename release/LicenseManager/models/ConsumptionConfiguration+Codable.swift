// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConsumptionConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case borrowConfiguration = "BorrowConfiguration"
        case provisionalConfiguration = "ProvisionalConfiguration"
        case renewType = "RenewType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let borrowConfiguration = borrowConfiguration {
            try encodeContainer.encode(borrowConfiguration, forKey: .borrowConfiguration)
        }
        if let provisionalConfiguration = provisionalConfiguration {
            try encodeContainer.encode(provisionalConfiguration, forKey: .provisionalConfiguration)
        }
        if let renewType = renewType {
            try encodeContainer.encode(renewType.rawValue, forKey: .renewType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let renewTypeDecoded = try containerValues.decodeIfPresent(RenewType.self, forKey: .renewType)
        renewType = renewTypeDecoded
        let provisionalConfigurationDecoded = try containerValues.decodeIfPresent(ProvisionalConfiguration.self, forKey: .provisionalConfiguration)
        provisionalConfiguration = provisionalConfigurationDecoded
        let borrowConfigurationDecoded = try containerValues.decodeIfPresent(BorrowConfiguration.self, forKey: .borrowConfiguration)
        borrowConfiguration = borrowConfigurationDecoded
    }
}
