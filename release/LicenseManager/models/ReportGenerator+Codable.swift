// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ReportGenerator: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case createTime = "CreateTime"
        case description = "Description"
        case lastReportGenerationTime = "LastReportGenerationTime"
        case lastRunFailureReason = "LastRunFailureReason"
        case lastRunStatus = "LastRunStatus"
        case licenseManagerReportGeneratorArn = "LicenseManagerReportGeneratorArn"
        case reportContext = "ReportContext"
        case reportCreatorAccount = "ReportCreatorAccount"
        case reportFrequency = "ReportFrequency"
        case reportGeneratorName = "ReportGeneratorName"
        case reportType = "ReportType"
        case s3Location = "S3Location"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createTime = createTime {
            try encodeContainer.encode(createTime, forKey: .createTime)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lastReportGenerationTime = lastReportGenerationTime {
            try encodeContainer.encode(lastReportGenerationTime, forKey: .lastReportGenerationTime)
        }
        if let lastRunFailureReason = lastRunFailureReason {
            try encodeContainer.encode(lastRunFailureReason, forKey: .lastRunFailureReason)
        }
        if let lastRunStatus = lastRunStatus {
            try encodeContainer.encode(lastRunStatus, forKey: .lastRunStatus)
        }
        if let licenseManagerReportGeneratorArn = licenseManagerReportGeneratorArn {
            try encodeContainer.encode(licenseManagerReportGeneratorArn, forKey: .licenseManagerReportGeneratorArn)
        }
        if let reportContext = reportContext {
            try encodeContainer.encode(reportContext, forKey: .reportContext)
        }
        if let reportCreatorAccount = reportCreatorAccount {
            try encodeContainer.encode(reportCreatorAccount, forKey: .reportCreatorAccount)
        }
        if let reportFrequency = reportFrequency {
            try encodeContainer.encode(reportFrequency, forKey: .reportFrequency)
        }
        if let reportGeneratorName = reportGeneratorName {
            try encodeContainer.encode(reportGeneratorName, forKey: .reportGeneratorName)
        }
        if let reportType = reportType {
            var reportTypeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .reportType)
            for reporttypelist0 in reportType {
                try reportTypeContainer.encode(reporttypelist0.rawValue)
            }
        }
        if let s3Location = s3Location {
            try encodeContainer.encode(s3Location, forKey: .s3Location)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportGeneratorNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reportGeneratorName)
        reportGeneratorName = reportGeneratorNameDecoded
        let reportTypeContainer = try containerValues.decodeIfPresent([ReportType].self, forKey: .reportType)
        var reportTypeDecoded0:[ReportType]? = nil
        if let reportTypeContainer = reportTypeContainer {
            reportTypeDecoded0 = [ReportType]()
            for string0 in reportTypeContainer {
                reportTypeDecoded0?.append(string0)
            }
        }
        reportType = reportTypeDecoded0
        let reportContextDecoded = try containerValues.decodeIfPresent(ReportContext.self, forKey: .reportContext)
        reportContext = reportContextDecoded
        let reportFrequencyDecoded = try containerValues.decodeIfPresent(ReportFrequency.self, forKey: .reportFrequency)
        reportFrequency = reportFrequencyDecoded
        let licenseManagerReportGeneratorArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .licenseManagerReportGeneratorArn)
        licenseManagerReportGeneratorArn = licenseManagerReportGeneratorArnDecoded
        let lastRunStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastRunStatus)
        lastRunStatus = lastRunStatusDecoded
        let lastRunFailureReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastRunFailureReason)
        lastRunFailureReason = lastRunFailureReasonDecoded
        let lastReportGenerationTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastReportGenerationTime)
        lastReportGenerationTime = lastReportGenerationTimeDecoded
        let reportCreatorAccountDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reportCreatorAccount)
        reportCreatorAccount = reportCreatorAccountDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let s3LocationDecoded = try containerValues.decodeIfPresent(S3Location.self, forKey: .s3Location)
        s3Location = s3LocationDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createTime)
        createTime = createTimeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
