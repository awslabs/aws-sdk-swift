// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <fullname> AWS License Manager </fullname>
///          <p>AWS License Manager makes it easier to manage licenses from software vendors across multiple
///          AWS accounts and on-premises servers.</p>
public protocol LicenseManagerClientProtocol {
    /// <p>Accepts the specified grant.</p>
    func acceptGrant(input: AcceptGrantInput, completion: @escaping (SdkResult<AcceptGrantOutput, AcceptGrantOutputError>) -> Void)
    /// <p>Checks in the specified license. Check in a license when it is no longer in use.</p>
    func checkInLicense(input: CheckInLicenseInput, completion: @escaping (SdkResult<CheckInLicenseOutput, CheckInLicenseOutputError>) -> Void)
    /// <p>Checks out the specified license for offline use.</p>
    func checkoutBorrowLicense(input: CheckoutBorrowLicenseInput, completion: @escaping (SdkResult<CheckoutBorrowLicenseOutput, CheckoutBorrowLicenseOutputError>) -> Void)
    /// <p>Checks out the specified license.</p>
    func checkoutLicense(input: CheckoutLicenseInput, completion: @escaping (SdkResult<CheckoutLicenseOutput, CheckoutLicenseOutputError>) -> Void)
    /// <p>Creates a grant for the specified license. A grant shares the use of license entitlements with specific AWS accounts.</p>
    func createGrant(input: CreateGrantInput, completion: @escaping (SdkResult<CreateGrantOutput, CreateGrantOutputError>) -> Void)
    /// <p>Creates a new version of the specified grant.</p>
    func createGrantVersion(input: CreateGrantVersionInput, completion: @escaping (SdkResult<CreateGrantVersionOutput, CreateGrantVersionOutputError>) -> Void)
    /// <p>Creates a license.</p>
    func createLicense(input: CreateLicenseInput, completion: @escaping (SdkResult<CreateLicenseOutput, CreateLicenseOutputError>) -> Void)
    /// <p>Creates a license configuration.</p>
    ///          <p>A license configuration is an abstraction of a customer license agreement that can be
    ///          consumed and enforced by License Manager. Components include specifications for the license
    ///          type (licensing by instance, socket, CPU, or vCPU), allowed tenancy (shared tenancy,
    ///          Dedicated Instance, Dedicated Host, or all of these), license affinity  to host (how long a
    ///          license must be associated with a host), and the number of licenses purchased and used.</p>
    func createLicenseConfiguration(input: CreateLicenseConfigurationInput, completion: @escaping (SdkResult<CreateLicenseConfigurationOutput, CreateLicenseConfigurationOutputError>) -> Void)
    /// <p>Creates a new report generator.</p>
    func createLicenseManagerReportGenerator(input: CreateLicenseManagerReportGeneratorInput, completion: @escaping (SdkResult<CreateLicenseManagerReportGeneratorOutput, CreateLicenseManagerReportGeneratorOutputError>) -> Void)
    /// <p>Creates a new version of the specified license.</p>
    func createLicenseVersion(input: CreateLicenseVersionInput, completion: @escaping (SdkResult<CreateLicenseVersionOutput, CreateLicenseVersionOutputError>) -> Void)
    /// <p>Creates a long-lived token.</p>
    ///          <p>A refresh token is a JWT token used to get an access token. With an access token,
    ///           you can call AssumeRoleWithWebIdentity to get role credentials that you can use to
    ///           call License Manager to manage the specified license.</p>
    func createToken(input: CreateTokenInput, completion: @escaping (SdkResult<CreateTokenOutput, CreateTokenOutputError>) -> Void)
    /// <p>Deletes the specified grant.</p>
    func deleteGrant(input: DeleteGrantInput, completion: @escaping (SdkResult<DeleteGrantOutput, DeleteGrantOutputError>) -> Void)
    /// <p>Deletes the specified license.</p>
    func deleteLicense(input: DeleteLicenseInput, completion: @escaping (SdkResult<DeleteLicenseOutput, DeleteLicenseOutputError>) -> Void)
    /// <p>Deletes the specified license configuration.</p>
    ///          <p>You cannot delete a license configuration that is in use.</p>
    func deleteLicenseConfiguration(input: DeleteLicenseConfigurationInput, completion: @escaping (SdkResult<DeleteLicenseConfigurationOutput, DeleteLicenseConfigurationOutputError>) -> Void)
    /// <p>Delete an existing report generator.</p>
    ///          <p>This action deletes the report generator, which stops it from generating future reports and cannot be reversed. However, the previous reports from this generator will remain in your S3 bucket.</p>
    func deleteLicenseManagerReportGenerator(input: DeleteLicenseManagerReportGeneratorInput, completion: @escaping (SdkResult<DeleteLicenseManagerReportGeneratorOutput, DeleteLicenseManagerReportGeneratorOutputError>) -> Void)
    /// <p>Deletes the specified token. Must be called in the license home Region.</p>
    func deleteToken(input: DeleteTokenInput, completion: @escaping (SdkResult<DeleteTokenOutput, DeleteTokenOutputError>) -> Void)
    /// <p>Extends the expiration date for license consumption.</p>
    func extendLicenseConsumption(input: ExtendLicenseConsumptionInput, completion: @escaping (SdkResult<ExtendLicenseConsumptionOutput, ExtendLicenseConsumptionOutputError>) -> Void)
    /// <p>Gets a temporary access token to use with AssumeRoleWithWebIdentity. Access tokens
    ///           are valid for one hour.</p>
    func getAccessToken(input: GetAccessTokenInput, completion: @escaping (SdkResult<GetAccessTokenOutput, GetAccessTokenOutputError>) -> Void)
    /// <p>Gets detailed information about the specified grant.</p>
    func getGrant(input: GetGrantInput, completion: @escaping (SdkResult<GetGrantOutput, GetGrantOutputError>) -> Void)
    /// <p>Gets detailed information about the specified license.</p>
    func getLicense(input: GetLicenseInput, completion: @escaping (SdkResult<GetLicenseOutput, GetLicenseOutputError>) -> Void)
    /// <p>Gets detailed information about the specified license configuration.</p>
    func getLicenseConfiguration(input: GetLicenseConfigurationInput, completion: @escaping (SdkResult<GetLicenseConfigurationOutput, GetLicenseConfigurationOutputError>) -> Void)
    /// <p>Gets information on the specified report generator.</p>
    func getLicenseManagerReportGenerator(input: GetLicenseManagerReportGeneratorInput, completion: @escaping (SdkResult<GetLicenseManagerReportGeneratorOutput, GetLicenseManagerReportGeneratorOutputError>) -> Void)
    /// <p>Gets detailed information about the usage of the specified license.</p>
    func getLicenseUsage(input: GetLicenseUsageInput, completion: @escaping (SdkResult<GetLicenseUsageOutput, GetLicenseUsageOutputError>) -> Void)
    /// <p>Gets the License Manager settings for the current Region.</p>
    func getServiceSettings(input: GetServiceSettingsInput, completion: @escaping (SdkResult<GetServiceSettingsOutput, GetServiceSettingsOutputError>) -> Void)
    /// <p>Lists the resource associations for the specified license configuration.</p>
    ///          <p>Resource associations need not consume licenses from a license configuration.
    ///          For example, an AMI or a stopped instance might not consume a license (depending on
    ///          the license rules).</p>
    func listAssociationsForLicenseConfiguration(input: ListAssociationsForLicenseConfigurationInput, completion: @escaping (SdkResult<ListAssociationsForLicenseConfigurationOutput, ListAssociationsForLicenseConfigurationOutputError>) -> Void)
    /// <p>Lists the grants distributed for the specified license.</p>
    func listDistributedGrants(input: ListDistributedGrantsInput, completion: @escaping (SdkResult<ListDistributedGrantsOutput, ListDistributedGrantsOutputError>) -> Void)
    /// <p>Lists the license configuration operations that failed.</p>
    func listFailuresForLicenseConfigurationOperations(input: ListFailuresForLicenseConfigurationOperationsInput, completion: @escaping (SdkResult<ListFailuresForLicenseConfigurationOperationsOutput, ListFailuresForLicenseConfigurationOperationsOutputError>) -> Void)
    /// <p>Lists the license configurations for your account.</p>
    func listLicenseConfigurations(input: ListLicenseConfigurationsInput, completion: @escaping (SdkResult<ListLicenseConfigurationsOutput, ListLicenseConfigurationsOutputError>) -> Void)
    /// <p>Lists the report generators for your account.</p>
    func listLicenseManagerReportGenerators(input: ListLicenseManagerReportGeneratorsInput, completion: @escaping (SdkResult<ListLicenseManagerReportGeneratorsOutput, ListLicenseManagerReportGeneratorsOutputError>) -> Void)
    /// <p>Lists the licenses for your account.</p>
    func listLicenses(input: ListLicensesInput, completion: @escaping (SdkResult<ListLicensesOutput, ListLicensesOutputError>) -> Void)
    /// <p>Describes the license configurations for the specified resource.</p>
    func listLicenseSpecificationsForResource(input: ListLicenseSpecificationsForResourceInput, completion: @escaping (SdkResult<ListLicenseSpecificationsForResourceOutput, ListLicenseSpecificationsForResourceOutputError>) -> Void)
    /// <p>Lists all versions of the specified license.</p>
    func listLicenseVersions(input: ListLicenseVersionsInput, completion: @escaping (SdkResult<ListLicenseVersionsOutput, ListLicenseVersionsOutputError>) -> Void)
    /// <p>Lists grants that are received but not accepted.</p>
    func listReceivedGrants(input: ListReceivedGrantsInput, completion: @escaping (SdkResult<ListReceivedGrantsOutput, ListReceivedGrantsOutputError>) -> Void)
    /// <p>Lists received licenses.</p>
    func listReceivedLicenses(input: ListReceivedLicensesInput, completion: @escaping (SdkResult<ListReceivedLicensesOutput, ListReceivedLicensesOutputError>) -> Void)
    /// <p>Lists resources managed using Systems Manager inventory.</p>
    func listResourceInventory(input: ListResourceInventoryInput, completion: @escaping (SdkResult<ListResourceInventoryOutput, ListResourceInventoryOutputError>) -> Void)
    /// <p>Lists the tags for the specified license configuration.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutput, ListTagsForResourceOutputError>) -> Void)
    /// <p>Lists your tokens.</p>
    func listTokens(input: ListTokensInput, completion: @escaping (SdkResult<ListTokensOutput, ListTokensOutputError>) -> Void)
    /// <p>Lists all license usage records for a license configuration, displaying license
    ///          consumption details by resource at a selected point in time. Use this action to audit the
    ///          current license consumption for any license inventory and configuration.</p>
    func listUsageForLicenseConfiguration(input: ListUsageForLicenseConfigurationInput, completion: @escaping (SdkResult<ListUsageForLicenseConfigurationOutput, ListUsageForLicenseConfigurationOutputError>) -> Void)
    /// <p>Rejects the specified grant.</p>
    func rejectGrant(input: RejectGrantInput, completion: @escaping (SdkResult<RejectGrantOutput, RejectGrantOutputError>) -> Void)
    /// <p>Adds the specified tags to the specified license configuration.</p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutput, TagResourceOutputError>) -> Void)
    /// <p>Removes the specified tags from the specified license configuration.</p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutput, UntagResourceOutputError>) -> Void)
    /// <p>Modifies the attributes of an existing license configuration.</p>
    func updateLicenseConfiguration(input: UpdateLicenseConfigurationInput, completion: @escaping (SdkResult<UpdateLicenseConfigurationOutput, UpdateLicenseConfigurationOutputError>) -> Void)
    /// <p>Updates a report generator.</p>
    ///          <p>After you make changes to a report generator, it will start generating new reports within 60 minutes of being updated.</p>
    func updateLicenseManagerReportGenerator(input: UpdateLicenseManagerReportGeneratorInput, completion: @escaping (SdkResult<UpdateLicenseManagerReportGeneratorOutput, UpdateLicenseManagerReportGeneratorOutputError>) -> Void)
    /// <p>Adds or removes the specified license configurations for the specified AWS resource.</p>
    ///          <p>You can update the license specifications of AMIs, instances, and hosts.
    ///          You cannot update the license specifications for launch templates and AWS CloudFormation templates,
    ///          as they send license configurations to the operation that creates the resource.</p>
    func updateLicenseSpecificationsForResource(input: UpdateLicenseSpecificationsForResourceInput, completion: @escaping (SdkResult<UpdateLicenseSpecificationsForResourceOutput, UpdateLicenseSpecificationsForResourceOutputError>) -> Void)
    /// <p>Updates License Manager settings for the current Region.</p>
    func updateServiceSettings(input: UpdateServiceSettingsInput, completion: @escaping (SdkResult<UpdateServiceSettingsOutput, UpdateServiceSettingsOutputError>) -> Void)
}
