// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListFragmentsInputBody: Equatable {
    public let streamName: String?
    public let streamARN: String?
    public let maxResults: Int?
    public let nextToken: String?
    public let fragmentSelector: FragmentSelector?
}

extension ListFragmentsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fragmentSelector = "FragmentSelector"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let fragmentSelectorDecoded = try containerValues.decodeIfPresent(FragmentSelector.self, forKey: .fragmentSelector)
        fragmentSelector = fragmentSelectorDecoded
    }
}
