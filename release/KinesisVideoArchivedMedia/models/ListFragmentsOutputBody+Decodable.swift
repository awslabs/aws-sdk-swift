// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListFragmentsOutputBody: Equatable {
    public let fragments: [Fragment]?
    public let nextToken: String?
}

extension ListFragmentsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fragments = "Fragments"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fragmentsContainer = try containerValues.decodeIfPresent([Fragment].self, forKey: .fragments)
        var fragmentsDecoded0:[Fragment]? = nil
        if let fragmentsContainer = fragmentsContainer {
            fragmentsDecoded0 = [Fragment]()
            for structure0 in fragmentsContainer {
                fragmentsDecoded0?.append(structure0)
            }
        }
        fragments = fragmentsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
