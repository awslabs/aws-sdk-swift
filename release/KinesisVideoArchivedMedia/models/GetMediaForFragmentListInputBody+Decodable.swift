// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetMediaForFragmentListInputBody: Equatable {
    public let streamName: String?
    public let streamARN: String?
    public let fragments: [String]?
}

extension GetMediaForFragmentListInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case fragments = "Fragments"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
        let fragmentsContainer = try containerValues.decodeIfPresent([String].self, forKey: .fragments)
        var fragmentsDecoded0:[String]? = nil
        if let fragmentsContainer = fragmentsContainer {
            fragmentsDecoded0 = [String]()
            for string0 in fragmentsContainer {
                fragmentsDecoded0?.append(string0)
            }
        }
        fragments = fragmentsDecoded0
    }
}
