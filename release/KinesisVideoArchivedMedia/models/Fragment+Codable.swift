// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Fragment: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fragmentLengthInMilliseconds = "FragmentLengthInMilliseconds"
        case fragmentNumber = "FragmentNumber"
        case fragmentSizeInBytes = "FragmentSizeInBytes"
        case producerTimestamp = "ProducerTimestamp"
        case serverTimestamp = "ServerTimestamp"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if fragmentLengthInMilliseconds != 0 {
            try encodeContainer.encode(fragmentLengthInMilliseconds, forKey: .fragmentLengthInMilliseconds)
        }
        if let fragmentNumber = fragmentNumber {
            try encodeContainer.encode(fragmentNumber, forKey: .fragmentNumber)
        }
        if fragmentSizeInBytes != 0 {
            try encodeContainer.encode(fragmentSizeInBytes, forKey: .fragmentSizeInBytes)
        }
        if let producerTimestamp = producerTimestamp {
            try encodeContainer.encode(producerTimestamp.timeIntervalSince1970, forKey: .producerTimestamp)
        }
        if let serverTimestamp = serverTimestamp {
            try encodeContainer.encode(serverTimestamp.timeIntervalSince1970, forKey: .serverTimestamp)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fragmentNumberDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fragmentNumber)
        fragmentNumber = fragmentNumberDecoded
        let fragmentSizeInBytesDecoded = try containerValues.decode(Int.self, forKey: .fragmentSizeInBytes)
        fragmentSizeInBytes = fragmentSizeInBytesDecoded
        let producerTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .producerTimestamp)
        producerTimestamp = producerTimestampDecoded
        let serverTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .serverTimestamp)
        serverTimestamp = serverTimestampDecoded
        let fragmentLengthInMillisecondsDecoded = try containerValues.decode(Int.self, forKey: .fragmentLengthInMilliseconds)
        fragmentLengthInMilliseconds = fragmentLengthInMillisecondsDecoded
    }
}
