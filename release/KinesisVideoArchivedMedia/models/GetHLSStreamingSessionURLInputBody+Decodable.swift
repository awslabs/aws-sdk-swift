// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetHLSStreamingSessionURLInputBody: Equatable {
    public let streamName: String?
    public let streamARN: String?
    public let playbackMode: HLSPlaybackMode?
    public let hLSFragmentSelector: HLSFragmentSelector?
    public let containerFormat: ContainerFormat?
    public let discontinuityMode: HLSDiscontinuityMode?
    public let displayFragmentTimestamp: HLSDisplayFragmentTimestamp?
    public let expires: Int?
    public let maxMediaPlaylistFragmentResults: Int?
}

extension GetHLSStreamingSessionURLInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case containerFormat = "ContainerFormat"
        case discontinuityMode = "DiscontinuityMode"
        case displayFragmentTimestamp = "DisplayFragmentTimestamp"
        case expires = "Expires"
        case hLSFragmentSelector = "HLSFragmentSelector"
        case maxMediaPlaylistFragmentResults = "MaxMediaPlaylistFragmentResults"
        case playbackMode = "PlaybackMode"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
        let playbackModeDecoded = try containerValues.decodeIfPresent(HLSPlaybackMode.self, forKey: .playbackMode)
        playbackMode = playbackModeDecoded
        let hLSFragmentSelectorDecoded = try containerValues.decodeIfPresent(HLSFragmentSelector.self, forKey: .hLSFragmentSelector)
        hLSFragmentSelector = hLSFragmentSelectorDecoded
        let containerFormatDecoded = try containerValues.decodeIfPresent(ContainerFormat.self, forKey: .containerFormat)
        containerFormat = containerFormatDecoded
        let discontinuityModeDecoded = try containerValues.decodeIfPresent(HLSDiscontinuityMode.self, forKey: .discontinuityMode)
        discontinuityMode = discontinuityModeDecoded
        let displayFragmentTimestampDecoded = try containerValues.decodeIfPresent(HLSDisplayFragmentTimestamp.self, forKey: .displayFragmentTimestamp)
        displayFragmentTimestamp = displayFragmentTimestampDecoded
        let expiresDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .expires)
        expires = expiresDecoded
        let maxMediaPlaylistFragmentResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxMediaPlaylistFragmentResults)
        maxMediaPlaylistFragmentResults = maxMediaPlaylistFragmentResultsDecoded
    }
}
