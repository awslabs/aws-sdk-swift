// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetDASHStreamingSessionURLInputBody: Equatable {
    public let streamName: String?
    public let streamARN: String?
    public let playbackMode: DASHPlaybackMode?
    public let displayFragmentTimestamp: DASHDisplayFragmentTimestamp?
    public let displayFragmentNumber: DASHDisplayFragmentNumber?
    public let dASHFragmentSelector: DASHFragmentSelector?
    public let expires: Int?
    public let maxManifestFragmentResults: Int?
}

extension GetDASHStreamingSessionURLInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case dASHFragmentSelector = "DASHFragmentSelector"
        case displayFragmentNumber = "DisplayFragmentNumber"
        case displayFragmentTimestamp = "DisplayFragmentTimestamp"
        case expires = "Expires"
        case maxManifestFragmentResults = "MaxManifestFragmentResults"
        case playbackMode = "PlaybackMode"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
        let playbackModeDecoded = try containerValues.decodeIfPresent(DASHPlaybackMode.self, forKey: .playbackMode)
        playbackMode = playbackModeDecoded
        let displayFragmentTimestampDecoded = try containerValues.decodeIfPresent(DASHDisplayFragmentTimestamp.self, forKey: .displayFragmentTimestamp)
        displayFragmentTimestamp = displayFragmentTimestampDecoded
        let displayFragmentNumberDecoded = try containerValues.decodeIfPresent(DASHDisplayFragmentNumber.self, forKey: .displayFragmentNumber)
        displayFragmentNumber = displayFragmentNumberDecoded
        let dASHFragmentSelectorDecoded = try containerValues.decodeIfPresent(DASHFragmentSelector.self, forKey: .dASHFragmentSelector)
        dASHFragmentSelector = dASHFragmentSelectorDecoded
        let expiresDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .expires)
        expires = expiresDecoded
        let maxManifestFragmentResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxManifestFragmentResults)
        maxManifestFragmentResults = maxManifestFragmentResultsDecoded
    }
}
