// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateStackInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accessEndpoints = "AccessEndpoints"
        case applicationSettings = "ApplicationSettings"
        case description = "Description"
        case displayName = "DisplayName"
        case embedHostDomains = "EmbedHostDomains"
        case feedbackURL = "FeedbackURL"
        case name = "Name"
        case redirectURL = "RedirectURL"
        case storageConnectors = "StorageConnectors"
        case tags = "Tags"
        case userSettings = "UserSettings"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessEndpoints = accessEndpoints {
            var accessEndpointsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accessEndpoints)
            for accessendpointlist0 in accessEndpoints {
                try accessEndpointsContainer.encode(accessendpointlist0)
            }
        }
        if let applicationSettings = applicationSettings {
            try encodeContainer.encode(applicationSettings, forKey: .applicationSettings)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let embedHostDomains = embedHostDomains {
            var embedHostDomainsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .embedHostDomains)
            for embedhostdomains0 in embedHostDomains {
                try embedHostDomainsContainer.encode(embedhostdomains0)
            }
        }
        if let feedbackURL = feedbackURL {
            try encodeContainer.encode(feedbackURL, forKey: .feedbackURL)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let redirectURL = redirectURL {
            try encodeContainer.encode(redirectURL, forKey: .redirectURL)
        }
        if let storageConnectors = storageConnectors {
            var storageConnectorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .storageConnectors)
            for storageconnectorlist0 in storageConnectors {
                try storageConnectorsContainer.encode(storageconnectorlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let userSettings = userSettings {
            var userSettingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userSettings)
            for usersettinglist0 in userSettings {
                try userSettingsContainer.encode(usersettinglist0)
            }
        }
    }
}
