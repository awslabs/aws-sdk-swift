// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateImageBuilderInput: Equatable {
    /// <p>The list of interface VPC endpoint (interface endpoint) objects. Administrators can connect to the image builder only through the specified endpoints.</p>
    public let accessEndpoints: [AccessEndpoint]?
    /// <p>The version of the AppStream 2.0 agent to use for this image builder. To use the latest version of the AppStream 2.0 agent, specify [LATEST]. </p>
    public let appstreamAgentVersion: String?
    /// <p>The description to display.</p>
    public let description: String?
    /// <p>The image builder name to display.</p>
    public let displayName: String?
    /// <p>The name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. </p>
    public let domainJoinInfo: DomainJoinInfo?
    /// <p>Enables or disables default internet access for the image builder.</p>
    public let enableDefaultInternetAccess: Bool?
    /// <p>The Amazon Resource Name (ARN) of the IAM role to apply to the image builder. To assume a role, the image builder calls the AWS Security Token Service (STS) <code>AssumeRole</code> API operation and passes the ARN of the role to use. The operation creates a new session with temporary credentials. AppStream 2.0 retrieves the temporary credentials and creates the <b>appstream_machine_role</b> credential profile on the instance.</p>
    ///
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/using-iam-roles-to-grant-permissions-to-applications-scripts-streaming-instances.html">Using an IAM Role to Grant Permissions to Applications and Scripts Running on AppStream 2.0 Streaming Instances</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
    public let iamRoleArn: String?
    /// <p>The ARN of the public, private, or shared image to use.</p>
    public let imageArn: String?
    /// <p>The name of the image used to create the image builder.</p>
    public let imageName: String?
    /// <p>The instance type to use when launching the image builder. The following instance types are available:</p>
    ///         <ul>
    ///             <li>
    ///                <p>stream.standard.small</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.standard.medium</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.standard.large</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.compute.large</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.compute.xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.compute.2xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.compute.4xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.compute.8xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.memory.large</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.memory.xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.memory.2xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.memory.4xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.memory.8xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.memory.z1d.large</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.memory.z1d.xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.memory.z1d.2xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.memory.z1d.3xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.memory.z1d.6xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.memory.z1d.12xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.graphics-design.large</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.graphics-design.xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.graphics-design.2xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.graphics-design.4xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.graphics-desktop.2xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.graphics.g4dn.xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.graphics.g4dn.2xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.graphics.g4dn.4xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.graphics.g4dn.8xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.graphics.g4dn.12xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.graphics.g4dn.16xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.graphics-pro.4xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.graphics-pro.8xlarge</p>
    ///             </li>
    ///             <li>
    ///                <p>stream.graphics-pro.16xlarge</p>
    ///             </li>
    ///          </ul>
    public let instanceType: String?
    /// <p>A unique name for the image builder.</p>
    public let name: String?
    /// <p>The tags to associate with the image builder. A tag is a key-value pair, and the value is optional. For example, Environment=Test. If you do not specify a value, Environment=. </p>
    ///
    ///         <p>Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following special characters: </p>
    ///         <p>_ . : / = + \ - @</p>
    ///
    ///         <p>If you do not specify a value, the value is set to an empty string.</p>
    ///
    ///         <p>For more information about tags, see <a href="https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
    public let tags: [String:String]?
    /// <p>The VPC configuration for the image builder. You can specify only one subnet.</p>
    public let vpcConfig: VpcConfig?

    public init (
        accessEndpoints: [AccessEndpoint]? = nil,
        appstreamAgentVersion: String? = nil,
        description: String? = nil,
        displayName: String? = nil,
        domainJoinInfo: DomainJoinInfo? = nil,
        enableDefaultInternetAccess: Bool? = nil,
        iamRoleArn: String? = nil,
        imageArn: String? = nil,
        imageName: String? = nil,
        instanceType: String? = nil,
        name: String? = nil,
        tags: [String:String]? = nil,
        vpcConfig: VpcConfig? = nil
    )
    {
        self.accessEndpoints = accessEndpoints
        self.appstreamAgentVersion = appstreamAgentVersion
        self.description = description
        self.displayName = displayName
        self.domainJoinInfo = domainJoinInfo
        self.enableDefaultInternetAccess = enableDefaultInternetAccess
        self.iamRoleArn = iamRoleArn
        self.imageArn = imageArn
        self.imageName = imageName
        self.instanceType = instanceType
        self.name = name
        self.tags = tags
        self.vpcConfig = vpcConfig
    }
}
