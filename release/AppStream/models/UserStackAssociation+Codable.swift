// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UserStackAssociation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case authenticationType = "AuthenticationType"
        case sendEmailNotification = "SendEmailNotification"
        case stackName = "StackName"
        case userName = "UserName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authenticationType = authenticationType {
            try encodeContainer.encode(authenticationType.rawValue, forKey: .authenticationType)
        }
        if sendEmailNotification != false {
            try encodeContainer.encode(sendEmailNotification, forKey: .sendEmailNotification)
        }
        if let stackName = stackName {
            try encodeContainer.encode(stackName, forKey: .stackName)
        }
        if let userName = userName {
            try encodeContainer.encode(userName, forKey: .userName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userName)
        userName = userNameDecoded
        let authenticationTypeDecoded = try containerValues.decodeIfPresent(AuthenticationType.self, forKey: .authenticationType)
        authenticationType = authenticationTypeDecoded
        let sendEmailNotificationDecoded = try containerValues.decode(Bool.self, forKey: .sendEmailNotification)
        sendEmailNotification = sendEmailNotificationDecoded
    }
}
