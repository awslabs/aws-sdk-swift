// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Describes an image.</p>
public struct Image: Equatable {
    /// <p>The applications associated with the image.</p>
    public let applications: [Application]?
    /// <p>The version of the AppStream 2.0 agent to use for instances that are launched from this image. </p>
    public let appstreamAgentVersion: String?
    /// <p>The ARN of the image.</p>
    public let arn: String?
    /// <p>The ARN of the image from which this image was created.</p>
    public let baseImageArn: String?
    /// <p>The time the image was created.</p>
    public let createdTime: Date?
    /// <p>The description to display.</p>
    public let description: String?
    /// <p>The image name to display.</p>
    public let displayName: String?
    /// <p>The name of the image builder that was used to create the private image. If the image is shared, this value is null.</p>
    public let imageBuilderName: String?
    /// <p>Indicates whether an image builder can be launched from this image.</p>
    public let imageBuilderSupported: Bool
    /// <p>Describes the errors that are returned when a new image can't be created.</p>
    public let imageErrors: [ResourceError]?
    /// <p>The permissions to provide to the destination AWS account for the specified image.</p>
    public let imagePermissions: ImagePermissions?
    /// <p>The name of the image.</p>
    public let name: String?
    /// <p>The operating system platform of the image.</p>
    public let platform: PlatformType?
    /// <p>The release date of the public base image.
    ///             For private images, this date is the release date of the base image from which the image was created.</p>
    public let publicBaseImageReleasedDate: Date?
    /// <p>The image starts in the <code>PENDING</code> state. If image creation succeeds, the
    ///             state is <code>AVAILABLE</code>. If image creation fails, the state is <code>FAILED</code>.</p>
    public let state: ImageState?
    /// <p>The reason why the last state change occurred.</p>
    public let stateChangeReason: ImageStateChangeReason?
    /// <p>Indicates whether the image is public or private.</p>
    public let visibility: VisibilityType?

    public init (
        applications: [Application]? = nil,
        appstreamAgentVersion: String? = nil,
        arn: String? = nil,
        baseImageArn: String? = nil,
        createdTime: Date? = nil,
        description: String? = nil,
        displayName: String? = nil,
        imageBuilderName: String? = nil,
        imageBuilderSupported: Bool = false,
        imageErrors: [ResourceError]? = nil,
        imagePermissions: ImagePermissions? = nil,
        name: String? = nil,
        platform: PlatformType? = nil,
        publicBaseImageReleasedDate: Date? = nil,
        state: ImageState? = nil,
        stateChangeReason: ImageStateChangeReason? = nil,
        visibility: VisibilityType? = nil
    )
    {
        self.applications = applications
        self.appstreamAgentVersion = appstreamAgentVersion
        self.arn = arn
        self.baseImageArn = baseImageArn
        self.createdTime = createdTime
        self.description = description
        self.displayName = displayName
        self.imageBuilderName = imageBuilderName
        self.imageBuilderSupported = imageBuilderSupported
        self.imageErrors = imageErrors
        self.imagePermissions = imagePermissions
        self.name = name
        self.platform = platform
        self.publicBaseImageReleasedDate = publicBaseImageReleasedDate
        self.state = state
        self.stateChangeReason = stateChangeReason
        self.visibility = visibility
    }
}
