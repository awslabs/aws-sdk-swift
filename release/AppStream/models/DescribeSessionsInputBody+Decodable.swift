// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeSessionsInputBody: Equatable {
    public let stackName: String?
    public let fleetName: String?
    public let userId: String?
    public let nextToken: String?
    public let limit: Int?
    public let authenticationType: AuthenticationType?
}

extension DescribeSessionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case authenticationType = "AuthenticationType"
        case fleetName = "FleetName"
        case limit = "Limit"
        case nextToken = "NextToken"
        case stackName = "StackName"
        case userId = "UserId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let fleetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fleetName)
        fleetName = fleetNameDecoded
        let userIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userId)
        userId = userIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
        let authenticationTypeDecoded = try containerValues.decodeIfPresent(AuthenticationType.self, forKey: .authenticationType)
        authenticationType = authenticationTypeDecoded
    }
}
