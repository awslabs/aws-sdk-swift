// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateStackInputBody: Equatable {
    public let displayName: String?
    public let description: String?
    public let name: String?
    public let storageConnectors: [StorageConnector]?
    public let deleteStorageConnectors: Bool
    public let redirectURL: String?
    public let feedbackURL: String?
    public let attributesToDelete: [StackAttribute]?
    public let userSettings: [UserSetting]?
    public let applicationSettings: ApplicationSettings?
    public let accessEndpoints: [AccessEndpoint]?
    public let embedHostDomains: [String]?
}

extension UpdateStackInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accessEndpoints = "AccessEndpoints"
        case applicationSettings = "ApplicationSettings"
        case attributesToDelete = "AttributesToDelete"
        case deleteStorageConnectors = "DeleteStorageConnectors"
        case description = "Description"
        case displayName = "DisplayName"
        case embedHostDomains = "EmbedHostDomains"
        case feedbackURL = "FeedbackURL"
        case name = "Name"
        case redirectURL = "RedirectURL"
        case storageConnectors = "StorageConnectors"
        case userSettings = "UserSettings"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let displayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let storageConnectorsContainer = try containerValues.decodeIfPresent([StorageConnector].self, forKey: .storageConnectors)
        var storageConnectorsDecoded0:[StorageConnector]? = nil
        if let storageConnectorsContainer = storageConnectorsContainer {
            storageConnectorsDecoded0 = [StorageConnector]()
            for structure0 in storageConnectorsContainer {
                storageConnectorsDecoded0?.append(structure0)
            }
        }
        storageConnectors = storageConnectorsDecoded0
        let deleteStorageConnectorsDecoded = try containerValues.decode(Bool.self, forKey: .deleteStorageConnectors)
        deleteStorageConnectors = deleteStorageConnectorsDecoded
        let redirectURLDecoded = try containerValues.decodeIfPresent(String.self, forKey: .redirectURL)
        redirectURL = redirectURLDecoded
        let feedbackURLDecoded = try containerValues.decodeIfPresent(String.self, forKey: .feedbackURL)
        feedbackURL = feedbackURLDecoded
        let attributesToDeleteContainer = try containerValues.decodeIfPresent([StackAttribute].self, forKey: .attributesToDelete)
        var attributesToDeleteDecoded0:[StackAttribute]? = nil
        if let attributesToDeleteContainer = attributesToDeleteContainer {
            attributesToDeleteDecoded0 = [StackAttribute]()
            for string0 in attributesToDeleteContainer {
                attributesToDeleteDecoded0?.append(string0)
            }
        }
        attributesToDelete = attributesToDeleteDecoded0
        let userSettingsContainer = try containerValues.decodeIfPresent([UserSetting].self, forKey: .userSettings)
        var userSettingsDecoded0:[UserSetting]? = nil
        if let userSettingsContainer = userSettingsContainer {
            userSettingsDecoded0 = [UserSetting]()
            for structure0 in userSettingsContainer {
                userSettingsDecoded0?.append(structure0)
            }
        }
        userSettings = userSettingsDecoded0
        let applicationSettingsDecoded = try containerValues.decodeIfPresent(ApplicationSettings.self, forKey: .applicationSettings)
        applicationSettings = applicationSettingsDecoded
        let accessEndpointsContainer = try containerValues.decodeIfPresent([AccessEndpoint].self, forKey: .accessEndpoints)
        var accessEndpointsDecoded0:[AccessEndpoint]? = nil
        if let accessEndpointsContainer = accessEndpointsContainer {
            accessEndpointsDecoded0 = [AccessEndpoint]()
            for structure0 in accessEndpointsContainer {
                accessEndpointsDecoded0?.append(structure0)
            }
        }
        accessEndpoints = accessEndpointsDecoded0
        let embedHostDomainsContainer = try containerValues.decodeIfPresent([String].self, forKey: .embedHostDomains)
        var embedHostDomainsDecoded0:[String]? = nil
        if let embedHostDomainsContainer = embedHostDomainsContainer {
            embedHostDomainsDecoded0 = [String]()
            for string0 in embedHostDomainsContainer {
                embedHostDomainsDecoded0?.append(string0)
            }
        }
        embedHostDomains = embedHostDomainsDecoded0
    }
}
