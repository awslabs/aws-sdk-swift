// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum FleetErrorCode {
    case domainJoinErrorAccessDenied
    case domainJoinErrorDsMachineAccountQuotaExceeded
    case domainJoinErrorFileNotFound
    case domainJoinErrorInvalidParameter
    case domainJoinErrorLogonFailure
    case domainJoinErrorMoreData
    case domainJoinErrorNotSupported
    case domainJoinErrorNoSuchDomain
    case domainJoinInternalServiceError
    case domainJoinNerrInvalidWorkgroupName
    case domainJoinNerrPasswordExpired
    case domainJoinNerrWorkstationNotStarted
    case fleetInstanceProvisioningFailure
    case fleetStopped
    case iamServiceRoleIsMissing
    case iamServiceRoleMissingDescribeSecurityGroupsAction
    case iamServiceRoleMissingDescribeSubnetAction
    case iamServiceRoleMissingEniCreateAction
    case iamServiceRoleMissingEniDeleteAction
    case iamServiceRoleMissingEniDescribeAction
    case igwNotAttached
    case imageNotFound
    case internalServiceError
    case invalidSubnetConfiguration
    case machineRoleIsMissing
    case networkInterfaceLimitExceeded
    case securityGroupsNotFound
    case stsDisabledInRegion
    case subnetHasInsufficientIpAddresses
    case subnetNotFound
    case sdkUnknown(String)
}

extension FleetErrorCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [FleetErrorCode] {
        return [
            .domainJoinErrorAccessDenied,
            .domainJoinErrorDsMachineAccountQuotaExceeded,
            .domainJoinErrorFileNotFound,
            .domainJoinErrorInvalidParameter,
            .domainJoinErrorLogonFailure,
            .domainJoinErrorMoreData,
            .domainJoinErrorNotSupported,
            .domainJoinErrorNoSuchDomain,
            .domainJoinInternalServiceError,
            .domainJoinNerrInvalidWorkgroupName,
            .domainJoinNerrPasswordExpired,
            .domainJoinNerrWorkstationNotStarted,
            .fleetInstanceProvisioningFailure,
            .fleetStopped,
            .iamServiceRoleIsMissing,
            .iamServiceRoleMissingDescribeSecurityGroupsAction,
            .iamServiceRoleMissingDescribeSubnetAction,
            .iamServiceRoleMissingEniCreateAction,
            .iamServiceRoleMissingEniDeleteAction,
            .iamServiceRoleMissingEniDescribeAction,
            .igwNotAttached,
            .imageNotFound,
            .internalServiceError,
            .invalidSubnetConfiguration,
            .machineRoleIsMissing,
            .networkInterfaceLimitExceeded,
            .securityGroupsNotFound,
            .stsDisabledInRegion,
            .subnetHasInsufficientIpAddresses,
            .subnetNotFound,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .domainJoinErrorAccessDenied: return "DOMAIN_JOIN_ERROR_ACCESS_DENIED"
        case .domainJoinErrorDsMachineAccountQuotaExceeded: return "DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED"
        case .domainJoinErrorFileNotFound: return "DOMAIN_JOIN_ERROR_FILE_NOT_FOUND"
        case .domainJoinErrorInvalidParameter: return "DOMAIN_JOIN_ERROR_INVALID_PARAMETER"
        case .domainJoinErrorLogonFailure: return "DOMAIN_JOIN_ERROR_LOGON_FAILURE"
        case .domainJoinErrorMoreData: return "DOMAIN_JOIN_ERROR_MORE_DATA"
        case .domainJoinErrorNotSupported: return "DOMAIN_JOIN_ERROR_NOT_SUPPORTED"
        case .domainJoinErrorNoSuchDomain: return "DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN"
        case .domainJoinInternalServiceError: return "DOMAIN_JOIN_INTERNAL_SERVICE_ERROR"
        case .domainJoinNerrInvalidWorkgroupName: return "DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME"
        case .domainJoinNerrPasswordExpired: return "DOMAIN_JOIN_NERR_PASSWORD_EXPIRED"
        case .domainJoinNerrWorkstationNotStarted: return "DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED"
        case .fleetInstanceProvisioningFailure: return "FLEET_INSTANCE_PROVISIONING_FAILURE"
        case .fleetStopped: return "FLEET_STOPPED"
        case .iamServiceRoleIsMissing: return "IAM_SERVICE_ROLE_IS_MISSING"
        case .iamServiceRoleMissingDescribeSecurityGroupsAction: return "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION"
        case .iamServiceRoleMissingDescribeSubnetAction: return "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION"
        case .iamServiceRoleMissingEniCreateAction: return "IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION"
        case .iamServiceRoleMissingEniDeleteAction: return "IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION"
        case .iamServiceRoleMissingEniDescribeAction: return "IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION"
        case .igwNotAttached: return "IGW_NOT_ATTACHED"
        case .imageNotFound: return "IMAGE_NOT_FOUND"
        case .internalServiceError: return "INTERNAL_SERVICE_ERROR"
        case .invalidSubnetConfiguration: return "INVALID_SUBNET_CONFIGURATION"
        case .machineRoleIsMissing: return "MACHINE_ROLE_IS_MISSING"
        case .networkInterfaceLimitExceeded: return "NETWORK_INTERFACE_LIMIT_EXCEEDED"
        case .securityGroupsNotFound: return "SECURITY_GROUPS_NOT_FOUND"
        case .stsDisabledInRegion: return "STS_DISABLED_IN_REGION"
        case .subnetHasInsufficientIpAddresses: return "SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES"
        case .subnetNotFound: return "SUBNET_NOT_FOUND"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = FleetErrorCode(rawValue: rawValue) ?? FleetErrorCode.sdkUnknown(rawValue)
    }
}
