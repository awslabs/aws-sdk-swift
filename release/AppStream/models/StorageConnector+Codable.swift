// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StorageConnector: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case connectorType = "ConnectorType"
        case domains = "Domains"
        case resourceIdentifier = "ResourceIdentifier"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectorType = connectorType {
            try encodeContainer.encode(connectorType.rawValue, forKey: .connectorType)
        }
        if let domains = domains {
            var domainsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domains)
            for domainlist0 in domains {
                try domainsContainer.encode(domainlist0)
            }
        }
        if let resourceIdentifier = resourceIdentifier {
            try encodeContainer.encode(resourceIdentifier, forKey: .resourceIdentifier)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectorTypeDecoded = try containerValues.decodeIfPresent(StorageConnectorType.self, forKey: .connectorType)
        connectorType = connectorTypeDecoded
        let resourceIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceIdentifier)
        resourceIdentifier = resourceIdentifierDecoded
        let domainsContainer = try containerValues.decodeIfPresent([String].self, forKey: .domains)
        var domainsDecoded0:[String]? = nil
        if let domainsContainer = domainsContainer {
            domainsDecoded0 = [String]()
            for string0 in domainsContainer {
                domainsDecoded0?.append(string0)
            }
        }
        domains = domainsDecoded0
    }
}
