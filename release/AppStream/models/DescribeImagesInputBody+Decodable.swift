// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeImagesInputBody: Equatable {
    public let names: [String]?
    public let arns: [String]?
    public let type: VisibilityType?
    public let nextToken: String?
    public let maxResults: Int?
}

extension DescribeImagesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arns = "Arns"
        case maxResults = "MaxResults"
        case names = "Names"
        case nextToken = "NextToken"
        case type = "Type"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namesContainer = try containerValues.decodeIfPresent([String].self, forKey: .names)
        var namesDecoded0:[String]? = nil
        if let namesContainer = namesContainer {
            namesDecoded0 = [String]()
            for string0 in namesContainer {
                namesDecoded0?.append(string0)
            }
        }
        names = namesDecoded0
        let arnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .arns)
        var arnsDecoded0:[String]? = nil
        if let arnsContainer = arnsContainer {
            arnsDecoded0 = [String]()
            for string0 in arnsContainer {
                arnsDecoded0?.append(string0)
            }
        }
        arns = arnsDecoded0
        let typeDecoded = try containerValues.decodeIfPresent(VisibilityType.self, forKey: .type)
        type = typeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
