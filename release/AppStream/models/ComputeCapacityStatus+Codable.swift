// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ComputeCapacityStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case available = "Available"
        case desired = "Desired"
        case inUse = "InUse"
        case running = "Running"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let available = available {
            try encodeContainer.encode(available, forKey: .available)
        }
        if let desired = desired {
            try encodeContainer.encode(desired, forKey: .desired)
        }
        if let inUse = inUse {
            try encodeContainer.encode(inUse, forKey: .inUse)
        }
        if let running = running {
            try encodeContainer.encode(running, forKey: .running)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let desiredDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .desired)
        desired = desiredDecoded
        let runningDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .running)
        running = runningDecoded
        let inUseDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .inUse)
        inUse = inUseDecoded
        let availableDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .available)
        available = availableDecoded
    }
}
