// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListArchivesInputBody: Equatable {
    public let namePrefix: String?
    public let eventSourceArn: String?
    public let state: ArchiveState?
    public let nextToken: String?
    public let limit: Int?
}

extension ListArchivesInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case eventSourceArn = "EventSourceArn"
        case limit = "Limit"
        case namePrefix = "NamePrefix"
        case nextToken = "NextToken"
        case state = "State"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namePrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .namePrefix)
        namePrefix = namePrefixDecoded
        let eventSourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventSourceArn)
        eventSourceArn = eventSourceArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ArchiveState.self, forKey: .state)
        state = stateDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
    }
}
