// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeReplayOutputBody: Equatable {
    public let replayName: String?
    public let replayArn: String?
    public let description: String?
    public let state: ReplayState?
    public let stateReason: String?
    public let eventSourceArn: String?
    public let destination: ReplayDestination?
    public let eventStartTime: Date?
    public let eventEndTime: Date?
    public let eventLastReplayedTime: Date?
    public let replayStartTime: Date?
    public let replayEndTime: Date?
}

extension DescribeReplayOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case destination = "Destination"
        case eventEndTime = "EventEndTime"
        case eventLastReplayedTime = "EventLastReplayedTime"
        case eventSourceArn = "EventSourceArn"
        case eventStartTime = "EventStartTime"
        case replayArn = "ReplayArn"
        case replayEndTime = "ReplayEndTime"
        case replayName = "ReplayName"
        case replayStartTime = "ReplayStartTime"
        case state = "State"
        case stateReason = "StateReason"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replayName)
        replayName = replayNameDecoded
        let replayArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replayArn)
        replayArn = replayArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ReplayState.self, forKey: .state)
        state = stateDecoded
        let stateReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stateReason)
        stateReason = stateReasonDecoded
        let eventSourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventSourceArn)
        eventSourceArn = eventSourceArnDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(ReplayDestination.self, forKey: .destination)
        destination = destinationDecoded
        let eventStartTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .eventStartTime)
        eventStartTime = eventStartTimeDecoded
        let eventEndTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .eventEndTime)
        eventEndTime = eventEndTimeDecoded
        let eventLastReplayedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .eventLastReplayedTime)
        eventLastReplayedTime = eventLastReplayedTimeDecoded
        let replayStartTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .replayStartTime)
        replayStartTime = replayStartTimeDecoded
        let replayEndTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .replayEndTime)
        replayEndTime = replayEndTimeDecoded
    }
}
