// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Replay: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case eventEndTime = "EventEndTime"
        case eventLastReplayedTime = "EventLastReplayedTime"
        case eventSourceArn = "EventSourceArn"
        case eventStartTime = "EventStartTime"
        case replayEndTime = "ReplayEndTime"
        case replayName = "ReplayName"
        case replayStartTime = "ReplayStartTime"
        case state = "State"
        case stateReason = "StateReason"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventEndTime = eventEndTime {
            try encodeContainer.encode(eventEndTime.timeIntervalSince1970, forKey: .eventEndTime)
        }
        if let eventLastReplayedTime = eventLastReplayedTime {
            try encodeContainer.encode(eventLastReplayedTime.timeIntervalSince1970, forKey: .eventLastReplayedTime)
        }
        if let eventSourceArn = eventSourceArn {
            try encodeContainer.encode(eventSourceArn, forKey: .eventSourceArn)
        }
        if let eventStartTime = eventStartTime {
            try encodeContainer.encode(eventStartTime.timeIntervalSince1970, forKey: .eventStartTime)
        }
        if let replayEndTime = replayEndTime {
            try encodeContainer.encode(replayEndTime.timeIntervalSince1970, forKey: .replayEndTime)
        }
        if let replayName = replayName {
            try encodeContainer.encode(replayName, forKey: .replayName)
        }
        if let replayStartTime = replayStartTime {
            try encodeContainer.encode(replayStartTime.timeIntervalSince1970, forKey: .replayStartTime)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateReason = stateReason {
            try encodeContainer.encode(stateReason, forKey: .stateReason)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replayName)
        replayName = replayNameDecoded
        let eventSourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventSourceArn)
        eventSourceArn = eventSourceArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ReplayState.self, forKey: .state)
        state = stateDecoded
        let stateReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stateReason)
        stateReason = stateReasonDecoded
        let eventStartTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .eventStartTime)
        eventStartTime = eventStartTimeDecoded
        let eventEndTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .eventEndTime)
        eventEndTime = eventEndTimeDecoded
        let eventLastReplayedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .eventLastReplayedTime)
        eventLastReplayedTime = eventLastReplayedTimeDecoded
        let replayStartTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .replayStartTime)
        replayStartTime = replayStartTimeDecoded
        let replayEndTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .replayEndTime)
        replayEndTime = replayEndTimeDecoded
    }
}
