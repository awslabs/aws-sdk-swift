// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeArchiveOutputBody: Equatable {
    public let archiveArn: String?
    public let archiveName: String?
    public let eventSourceArn: String?
    public let description: String?
    public let eventPattern: String?
    public let state: ArchiveState?
    public let stateReason: String?
    public let retentionDays: Int?
    public let sizeBytes: Int
    public let eventCount: Int
    public let creationTime: Date?
}

extension DescribeArchiveOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case archiveArn = "ArchiveArn"
        case archiveName = "ArchiveName"
        case creationTime = "CreationTime"
        case description = "Description"
        case eventCount = "EventCount"
        case eventPattern = "EventPattern"
        case eventSourceArn = "EventSourceArn"
        case retentionDays = "RetentionDays"
        case sizeBytes = "SizeBytes"
        case state = "State"
        case stateReason = "StateReason"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let archiveArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .archiveArn)
        archiveArn = archiveArnDecoded
        let archiveNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .archiveName)
        archiveName = archiveNameDecoded
        let eventSourceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventSourceArn)
        eventSourceArn = eventSourceArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let eventPatternDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventPattern)
        eventPattern = eventPatternDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ArchiveState.self, forKey: .state)
        state = stateDecoded
        let stateReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stateReason)
        stateReason = stateReasonDecoded
        let retentionDaysDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .retentionDays)
        retentionDays = retentionDaysDecoded
        let sizeBytesDecoded = try containerValues.decode(Int.self, forKey: .sizeBytes)
        sizeBytes = sizeBytesDecoded
        let eventCountDecoded = try containerValues.decode(Int.self, forKey: .eventCount)
        eventCount = eventCountDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}
