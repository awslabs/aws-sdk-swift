// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Target: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case batchParameters = "BatchParameters"
        case deadLetterConfig = "DeadLetterConfig"
        case ecsParameters = "EcsParameters"
        case httpParameters = "HttpParameters"
        case id = "Id"
        case input = "Input"
        case inputPath = "InputPath"
        case inputTransformer = "InputTransformer"
        case kinesisParameters = "KinesisParameters"
        case redshiftDataParameters = "RedshiftDataParameters"
        case retryPolicy = "RetryPolicy"
        case roleArn = "RoleArn"
        case runCommandParameters = "RunCommandParameters"
        case sageMakerPipelineParameters = "SageMakerPipelineParameters"
        case sqsParameters = "SqsParameters"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let batchParameters = batchParameters {
            try encodeContainer.encode(batchParameters, forKey: .batchParameters)
        }
        if let deadLetterConfig = deadLetterConfig {
            try encodeContainer.encode(deadLetterConfig, forKey: .deadLetterConfig)
        }
        if let ecsParameters = ecsParameters {
            try encodeContainer.encode(ecsParameters, forKey: .ecsParameters)
        }
        if let httpParameters = httpParameters {
            try encodeContainer.encode(httpParameters, forKey: .httpParameters)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let input = input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let inputPath = inputPath {
            try encodeContainer.encode(inputPath, forKey: .inputPath)
        }
        if let inputTransformer = inputTransformer {
            try encodeContainer.encode(inputTransformer, forKey: .inputTransformer)
        }
        if let kinesisParameters = kinesisParameters {
            try encodeContainer.encode(kinesisParameters, forKey: .kinesisParameters)
        }
        if let redshiftDataParameters = redshiftDataParameters {
            try encodeContainer.encode(redshiftDataParameters, forKey: .redshiftDataParameters)
        }
        if let retryPolicy = retryPolicy {
            try encodeContainer.encode(retryPolicy, forKey: .retryPolicy)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let runCommandParameters = runCommandParameters {
            try encodeContainer.encode(runCommandParameters, forKey: .runCommandParameters)
        }
        if let sageMakerPipelineParameters = sageMakerPipelineParameters {
            try encodeContainer.encode(sageMakerPipelineParameters, forKey: .sageMakerPipelineParameters)
        }
        if let sqsParameters = sqsParameters {
            try encodeContainer.encode(sqsParameters, forKey: .sqsParameters)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let inputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .input)
        input = inputDecoded
        let inputPathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inputPath)
        inputPath = inputPathDecoded
        let inputTransformerDecoded = try containerValues.decodeIfPresent(InputTransformer.self, forKey: .inputTransformer)
        inputTransformer = inputTransformerDecoded
        let kinesisParametersDecoded = try containerValues.decodeIfPresent(KinesisParameters.self, forKey: .kinesisParameters)
        kinesisParameters = kinesisParametersDecoded
        let runCommandParametersDecoded = try containerValues.decodeIfPresent(RunCommandParameters.self, forKey: .runCommandParameters)
        runCommandParameters = runCommandParametersDecoded
        let ecsParametersDecoded = try containerValues.decodeIfPresent(EcsParameters.self, forKey: .ecsParameters)
        ecsParameters = ecsParametersDecoded
        let batchParametersDecoded = try containerValues.decodeIfPresent(BatchParameters.self, forKey: .batchParameters)
        batchParameters = batchParametersDecoded
        let sqsParametersDecoded = try containerValues.decodeIfPresent(SqsParameters.self, forKey: .sqsParameters)
        sqsParameters = sqsParametersDecoded
        let httpParametersDecoded = try containerValues.decodeIfPresent(HttpParameters.self, forKey: .httpParameters)
        httpParameters = httpParametersDecoded
        let redshiftDataParametersDecoded = try containerValues.decodeIfPresent(RedshiftDataParameters.self, forKey: .redshiftDataParameters)
        redshiftDataParameters = redshiftDataParametersDecoded
        let sageMakerPipelineParametersDecoded = try containerValues.decodeIfPresent(SageMakerPipelineParameters.self, forKey: .sageMakerPipelineParameters)
        sageMakerPipelineParameters = sageMakerPipelineParametersDecoded
        let deadLetterConfigDecoded = try containerValues.decodeIfPresent(DeadLetterConfig.self, forKey: .deadLetterConfig)
        deadLetterConfig = deadLetterConfigDecoded
        let retryPolicyDecoded = try containerValues.decodeIfPresent(RetryPolicy.self, forKey: .retryPolicy)
        retryPolicy = retryPolicyDecoded
    }
}
