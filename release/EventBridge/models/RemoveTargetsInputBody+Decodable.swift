// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RemoveTargetsInputBody: Equatable {
    public let rule: String?
    public let eventBusName: String?
    public let ids: [String]?
    public let force: Bool
}

extension RemoveTargetsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case eventBusName = "EventBusName"
        case force = "Force"
        case ids = "Ids"
        case rule = "Rule"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .rule)
        rule = ruleDecoded
        let eventBusNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventBusName)
        eventBusName = eventBusNameDecoded
        let idsContainer = try containerValues.decodeIfPresent([String].self, forKey: .ids)
        var idsDecoded0:[String]? = nil
        if let idsContainer = idsContainer {
            idsDecoded0 = [String]()
            for string0 in idsContainer {
                idsDecoded0?.append(string0)
            }
        }
        ids = idsDecoded0
        let forceDecoded = try containerValues.decode(Bool.self, forKey: .force)
        force = forceDecoded
    }
}
