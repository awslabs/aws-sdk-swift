// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTargetsByRuleInputBody: Equatable {
    public let rule: String?
    public let eventBusName: String?
    public let nextToken: String?
    public let limit: Int?
}

extension ListTargetsByRuleInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case eventBusName = "EventBusName"
        case limit = "Limit"
        case nextToken = "NextToken"
        case rule = "Rule"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .rule)
        rule = ruleDecoded
        let eventBusNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventBusName)
        eventBusName = eventBusNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
    }
}
