// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Connection: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case authorizationType = "AuthorizationType"
        case connectionArn = "ConnectionArn"
        case connectionState = "ConnectionState"
        case creationTime = "CreationTime"
        case lastAuthorizedTime = "LastAuthorizedTime"
        case lastModifiedTime = "LastModifiedTime"
        case name = "Name"
        case stateReason = "StateReason"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authorizationType = authorizationType {
            try encodeContainer.encode(authorizationType.rawValue, forKey: .authorizationType)
        }
        if let connectionArn = connectionArn {
            try encodeContainer.encode(connectionArn, forKey: .connectionArn)
        }
        if let connectionState = connectionState {
            try encodeContainer.encode(connectionState.rawValue, forKey: .connectionState)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let lastAuthorizedTime = lastAuthorizedTime {
            try encodeContainer.encode(lastAuthorizedTime.timeIntervalSince1970, forKey: .lastAuthorizedTime)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let stateReason = stateReason {
            try encodeContainer.encode(stateReason, forKey: .stateReason)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .connectionArn)
        connectionArn = connectionArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let connectionStateDecoded = try containerValues.decodeIfPresent(ConnectionState.self, forKey: .connectionState)
        connectionState = connectionStateDecoded
        let stateReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stateReason)
        stateReason = stateReasonDecoded
        let authorizationTypeDecoded = try containerValues.decodeIfPresent(ConnectionAuthorizationType.self, forKey: .authorizationType)
        authorizationType = authorizationTypeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastAuthorizedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastAuthorizedTime)
        lastAuthorizedTime = lastAuthorizedTimeDecoded
    }
}
