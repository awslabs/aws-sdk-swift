// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PutPartnerEventsRequestEntry: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case detail = "Detail"
        case detailType = "DetailType"
        case resources = "Resources"
        case source = "Source"
        case time = "Time"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let detail = detail {
            try encodeContainer.encode(detail, forKey: .detail)
        }
        if let detailType = detailType {
            try encodeContainer.encode(detailType, forKey: .detailType)
        }
        if let resources = resources {
            var resourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resources)
            for eventresourcelist0 in resources {
                try resourcesContainer.encode(eventresourcelist0)
            }
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let time = time {
            try encodeContainer.encode(time.timeIntervalSince1970, forKey: .time)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .time)
        time = timeDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .source)
        source = sourceDecoded
        let resourcesContainer = try containerValues.decodeIfPresent([String].self, forKey: .resources)
        var resourcesDecoded0:[String]? = nil
        if let resourcesContainer = resourcesContainer {
            resourcesDecoded0 = [String]()
            for string0 in resourcesContainer {
                resourcesDecoded0?.append(string0)
            }
        }
        resources = resourcesDecoded0
        let detailTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .detailType)
        detailType = detailTypeDecoded
        let detailDecoded = try containerValues.decodeIfPresent(String.self, forKey: .detail)
        detail = detailDecoded
    }
}
