// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InputTransformer: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case inputPathsMap = "InputPathsMap"
        case inputTemplate = "InputTemplate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputPathsMap = inputPathsMap {
            var inputPathsMapContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .inputPathsMap)
            for (dictKey0, transformerpaths0) in inputPathsMap {
                try inputPathsMapContainer.encode(transformerpaths0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let inputTemplate = inputTemplate {
            try encodeContainer.encode(inputTemplate, forKey: .inputTemplate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputPathsMapContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .inputPathsMap)
        var inputPathsMapDecoded0: [String:String]? = nil
        if let inputPathsMapContainer = inputPathsMapContainer {
            inputPathsMapDecoded0 = [String:String]()
            for (key0, targetinputpath0) in inputPathsMapContainer {
                inputPathsMapDecoded0?[key0] = targetinputpath0
            }
        }
        inputPathsMap = inputPathsMapDecoded0
        let inputTemplateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inputTemplate)
        inputTemplate = inputTemplateDecoded
    }
}
