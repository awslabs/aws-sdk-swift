// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeRuleOutputBody: Equatable {
    public let name: String?
    public let arn: String?
    public let eventPattern: String?
    public let scheduleExpression: String?
    public let state: RuleState?
    public let description: String?
    public let roleArn: String?
    public let managedBy: String?
    public let eventBusName: String?
    public let createdBy: String?
}

extension DescribeRuleOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case createdBy = "CreatedBy"
        case description = "Description"
        case eventBusName = "EventBusName"
        case eventPattern = "EventPattern"
        case managedBy = "ManagedBy"
        case name = "Name"
        case roleArn = "RoleArn"
        case scheduleExpression = "ScheduleExpression"
        case state = "State"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let eventPatternDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventPattern)
        eventPattern = eventPatternDecoded
        let scheduleExpressionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scheduleExpression)
        scheduleExpression = scheduleExpressionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(RuleState.self, forKey: .state)
        state = stateDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let managedByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .managedBy)
        managedBy = managedByDecoded
        let eventBusNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eventBusName)
        eventBusName = eventBusNameDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdBy)
        createdBy = createdByDecoded
    }
}
