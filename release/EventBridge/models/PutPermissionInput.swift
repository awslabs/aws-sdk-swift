// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct PutPermissionInput: Equatable {
    /// <p>The action that you are enabling the other account to perform. Currently, this must be
    ///         <code>events:PutEvents</code>.</p>
    public let action: String?
    /// <p>This parameter enables you to limit the permission to accounts that fulfill a certain
    ///       condition, such as being a member of a certain AWS organization. For more information about
    ///       AWS Organizations, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_introduction.html">What Is AWS
    ///         Organizations</a> in the <i>AWS Organizations User Guide</i>.</p>
    ///          <p>If you specify <code>Condition</code> with an AWS organization ID, and specify "*" as the
    ///       value for <code>Principal</code>, you grant permission to all the accounts in the named
    ///       organization.</p>
    ///
    ///          <p>The <code>Condition</code> is a JSON string which must contain <code>Type</code>,
    ///         <code>Key</code>, and <code>Value</code> fields.</p>
    public let condition: Condition?
    /// <p>The name of the event bus associated with the rule. If you omit this, the default event
    ///       bus is used.</p>
    public let eventBusName: String?
    /// <p>A JSON string that describes the permission policy statement. You can include a
    ///         <code>Policy</code> parameter in the request instead of using the <code>StatementId</code>,
    ///         <code>Action</code>, <code>Principal</code>, or <code>Condition</code> parameters.</p>
    public let policy: String?
    /// <p>The 12-digit AWS account ID that you are permitting to put events to your default event
    ///       bus. Specify "*" to permit any account to put events to your default event bus.</p>
    ///
    ///          <p>If you specify "*" without specifying <code>Condition</code>, avoid creating rules that
    ///       may match undesirable events. To create more secure rules, make sure that the event pattern
    ///       for each rule contains an <code>account</code> field with a specific account ID from which to
    ///       receive events. Rules with an account field do not match any events sent from other
    ///       accounts.</p>
    public let principal: String?
    /// <p>An identifier string for the external account that you are granting permissions to. If you
    ///       later want to revoke the permission for this external account, specify this
    ///         <code>StatementId</code> when you run <a>RemovePermission</a>.</p>
    public let statementId: String?

    public init (
        action: String? = nil,
        condition: Condition? = nil,
        eventBusName: String? = nil,
        policy: String? = nil,
        principal: String? = nil,
        statementId: String? = nil
    )
    {
        self.action = action
        self.condition = condition
        self.eventBusName = eventBusName
        self.policy = policy
        self.principal = principal
        self.statementId = statementId
    }
}
