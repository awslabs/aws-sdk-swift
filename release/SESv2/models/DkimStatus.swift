// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The DKIM authentication status of the identity. The status can be one of the
///             following:</p>
///         <ul>
///             <li>
///                 <p>
///                   <code>PENDING</code> – The verification process was initiated, but Amazon SES
///                     hasn't yet detected the DKIM records in the DNS configuration for the
///                     domain.</p>
///             </li>
///             <li>
///                 <p>
///                   <code>SUCCESS</code> – The verification process completed
///                     successfully.</p>
///             </li>
///             <li>
///                 <p>
///                   <code>FAILED</code> – The verification process failed. This typically
///                     occurs when Amazon SES fails to find the DKIM records in the DNS configuration of the
///                     domain.</p>
///             </li>
///             <li>
///                 <p>
///                   <code>TEMPORARY_FAILURE</code> – A temporary issue is preventing Amazon SES
///                     from determining the DKIM authentication status of the domain.</p>
///             </li>
///             <li>
///                 <p>
///                   <code>NOT_STARTED</code> – The DKIM verification process hasn't been
///                     initiated for the domain.</p>
///             </li>
///          </ul>
public enum DkimStatus {
    case failed
    case notStarted
    case pending
    case success
    case temporaryFailure
    case sdkUnknown(String)
}

extension DkimStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DkimStatus] {
        return [
            .failed,
            .notStarted,
            .pending,
            .success,
            .temporaryFailure,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .failed: return "FAILED"
        case .notStarted: return "NOT_STARTED"
        case .pending: return "PENDING"
        case .success: return "SUCCESS"
        case .temporaryFailure: return "TEMPORARY_FAILURE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DkimStatus(rawValue: rawValue) ?? DkimStatus.sdkUnknown(rawValue)
    }
}
