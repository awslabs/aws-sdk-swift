// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BulkEmailEntry: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destination = "Destination"
        case replacementEmailContent = "ReplacementEmailContent"
        case replacementTags = "ReplacementTags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let replacementEmailContent = replacementEmailContent {
            try encodeContainer.encode(replacementEmailContent, forKey: .replacementEmailContent)
        }
        if let replacementTags = replacementTags {
            var replacementTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replacementTags)
            for messagetaglist0 in replacementTags {
                try replacementTagsContainer.encode(messagetaglist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(Destination.self, forKey: .destination)
        destination = destinationDecoded
        let replacementTagsContainer = try containerValues.decodeIfPresent([MessageTag].self, forKey: .replacementTags)
        var replacementTagsDecoded0:[MessageTag]? = nil
        if let replacementTagsContainer = replacementTagsContainer {
            replacementTagsDecoded0 = [MessageTag]()
            for structure0 in replacementTagsContainer {
                replacementTagsDecoded0?.append(structure0)
            }
        }
        replacementTags = replacementTagsDecoded0
        let replacementEmailContentDecoded = try containerValues.decodeIfPresent(ReplacementEmailContent.self, forKey: .replacementEmailContent)
        replacementEmailContent = replacementEmailContentDecoded
    }
}
