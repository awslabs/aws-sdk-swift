// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SuppressionAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case suppressedReasons = "SuppressedReasons"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let suppressedReasons = suppressedReasons {
            var suppressedReasonsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .suppressedReasons)
            for suppressionlistreasons0 in suppressedReasons {
                try suppressedReasonsContainer.encode(suppressionlistreasons0.rawValue)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let suppressedReasonsContainer = try containerValues.decodeIfPresent([SuppressionListReason].self, forKey: .suppressedReasons)
        var suppressedReasonsDecoded0:[SuppressionListReason]? = nil
        if let suppressedReasonsContainer = suppressedReasonsContainer {
            suppressedReasonsDecoded0 = [SuppressionListReason]()
            for string0 in suppressedReasonsContainer {
                suppressedReasonsDecoded0?.append(string0)
            }
        }
        suppressedReasons = suppressedReasonsDecoded0
    }
}
