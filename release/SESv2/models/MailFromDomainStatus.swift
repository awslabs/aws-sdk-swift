// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The status of the MAIL FROM domain. This status can have the following values:</p>
///         <ul>
///             <li>
///                 <p>
///                   <code>PENDING</code> – Amazon SES hasn't started searching for the MX record
///                     yet.</p>
///             </li>
///             <li>
///                 <p>
///                   <code>SUCCESS</code> – Amazon SES detected the required MX record for the
///                     MAIL FROM domain.</p>
///             </li>
///             <li>
///                 <p>
///                   <code>FAILED</code> – Amazon SES can't find the required MX record, or the
///                     record no longer exists.</p>
///             </li>
///             <li>
///                 <p>
///                   <code>TEMPORARY_FAILURE</code> – A temporary issue occurred, which
///                     prevented Amazon SES from determining the status of the MAIL FROM domain.</p>
///             </li>
///          </ul>
public enum MailFromDomainStatus {
    case failed
    case pending
    case success
    case temporaryFailure
    case sdkUnknown(String)
}

extension MailFromDomainStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MailFromDomainStatus] {
        return [
            .failed,
            .pending,
            .success,
            .temporaryFailure,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .failed: return "FAILED"
        case .pending: return "PENDING"
        case .success: return "SUCCESS"
        case .temporaryFailure: return "TEMPORARY_FAILURE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MailFromDomainStatus(rawValue: rawValue) ?? MailFromDomainStatus.sdkUnknown(rawValue)
    }
}
