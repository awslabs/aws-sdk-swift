// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutAccountDetailsInputBody: Equatable {
    public let mailType: MailType?
    public let websiteURL: String?
    public let contactLanguage: ContactLanguage?
    public let useCaseDescription: String?
    public let additionalContactEmailAddresses: [String]?
    public let productionAccessEnabled: Bool?
}

extension PutAccountDetailsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case additionalContactEmailAddresses = "AdditionalContactEmailAddresses"
        case contactLanguage = "ContactLanguage"
        case mailType = "MailType"
        case productionAccessEnabled = "ProductionAccessEnabled"
        case useCaseDescription = "UseCaseDescription"
        case websiteURL = "WebsiteURL"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mailTypeDecoded = try containerValues.decodeIfPresent(MailType.self, forKey: .mailType)
        mailType = mailTypeDecoded
        let websiteURLDecoded = try containerValues.decodeIfPresent(String.self, forKey: .websiteURL)
        websiteURL = websiteURLDecoded
        let contactLanguageDecoded = try containerValues.decodeIfPresent(ContactLanguage.self, forKey: .contactLanguage)
        contactLanguage = contactLanguageDecoded
        let useCaseDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .useCaseDescription)
        useCaseDescription = useCaseDescriptionDecoded
        let additionalContactEmailAddressesContainer = try containerValues.decodeIfPresent([String].self, forKey: .additionalContactEmailAddresses)
        var additionalContactEmailAddressesDecoded0:[String]? = nil
        if let additionalContactEmailAddressesContainer = additionalContactEmailAddressesContainer {
            additionalContactEmailAddressesDecoded0 = [String]()
            for string0 in additionalContactEmailAddressesContainer {
                additionalContactEmailAddressesDecoded0?.append(string0)
            }
        }
        additionalContactEmailAddresses = additionalContactEmailAddressesDecoded0
        let productionAccessEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .productionAccessEnabled)
        productionAccessEnabled = productionAccessEnabledDecoded
    }
}
