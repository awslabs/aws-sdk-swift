// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SendEmailInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case content = "Content"
        case destination = "Destination"
        case emailTags = "EmailTags"
        case feedbackForwardingEmailAddress = "FeedbackForwardingEmailAddress"
        case feedbackForwardingEmailAddressIdentityArn = "FeedbackForwardingEmailAddressIdentityArn"
        case fromEmailAddress = "FromEmailAddress"
        case fromEmailAddressIdentityArn = "FromEmailAddressIdentityArn"
        case listManagementOptions = "ListManagementOptions"
        case replyToAddresses = "ReplyToAddresses"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationSetName = configurationSetName {
            try encodeContainer.encode(configurationSetName, forKey: .configurationSetName)
        }
        if let content = content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let emailTags = emailTags {
            var emailTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .emailTags)
            for messagetaglist0 in emailTags {
                try emailTagsContainer.encode(messagetaglist0)
            }
        }
        if let feedbackForwardingEmailAddress = feedbackForwardingEmailAddress {
            try encodeContainer.encode(feedbackForwardingEmailAddress, forKey: .feedbackForwardingEmailAddress)
        }
        if let feedbackForwardingEmailAddressIdentityArn = feedbackForwardingEmailAddressIdentityArn {
            try encodeContainer.encode(feedbackForwardingEmailAddressIdentityArn, forKey: .feedbackForwardingEmailAddressIdentityArn)
        }
        if let fromEmailAddress = fromEmailAddress {
            try encodeContainer.encode(fromEmailAddress, forKey: .fromEmailAddress)
        }
        if let fromEmailAddressIdentityArn = fromEmailAddressIdentityArn {
            try encodeContainer.encode(fromEmailAddressIdentityArn, forKey: .fromEmailAddressIdentityArn)
        }
        if let listManagementOptions = listManagementOptions {
            try encodeContainer.encode(listManagementOptions, forKey: .listManagementOptions)
        }
        if let replyToAddresses = replyToAddresses {
            var replyToAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replyToAddresses)
            for emailaddresslist0 in replyToAddresses {
                try replyToAddressesContainer.encode(emailaddresslist0)
            }
        }
    }
}
