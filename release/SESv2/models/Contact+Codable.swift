// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Contact: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case emailAddress = "EmailAddress"
        case lastUpdatedTimestamp = "LastUpdatedTimestamp"
        case topicDefaultPreferences = "TopicDefaultPreferences"
        case topicPreferences = "TopicPreferences"
        case unsubscribeAll = "UnsubscribeAll"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let emailAddress = emailAddress {
            try encodeContainer.encode(emailAddress, forKey: .emailAddress)
        }
        if let lastUpdatedTimestamp = lastUpdatedTimestamp {
            try encodeContainer.encode(lastUpdatedTimestamp.timeIntervalSince1970, forKey: .lastUpdatedTimestamp)
        }
        if let topicDefaultPreferences = topicDefaultPreferences {
            var topicDefaultPreferencesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .topicDefaultPreferences)
            for topicpreferencelist0 in topicDefaultPreferences {
                try topicDefaultPreferencesContainer.encode(topicpreferencelist0)
            }
        }
        if let topicPreferences = topicPreferences {
            var topicPreferencesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .topicPreferences)
            for topicpreferencelist0 in topicPreferences {
                try topicPreferencesContainer.encode(topicpreferencelist0)
            }
        }
        if unsubscribeAll != false {
            try encodeContainer.encode(unsubscribeAll, forKey: .unsubscribeAll)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let topicPreferencesContainer = try containerValues.decodeIfPresent([TopicPreference].self, forKey: .topicPreferences)
        var topicPreferencesDecoded0:[TopicPreference]? = nil
        if let topicPreferencesContainer = topicPreferencesContainer {
            topicPreferencesDecoded0 = [TopicPreference]()
            for structure0 in topicPreferencesContainer {
                topicPreferencesDecoded0?.append(structure0)
            }
        }
        topicPreferences = topicPreferencesDecoded0
        let topicDefaultPreferencesContainer = try containerValues.decodeIfPresent([TopicPreference].self, forKey: .topicDefaultPreferences)
        var topicDefaultPreferencesDecoded0:[TopicPreference]? = nil
        if let topicDefaultPreferencesContainer = topicDefaultPreferencesContainer {
            topicDefaultPreferencesDecoded0 = [TopicPreference]()
            for structure0 in topicDefaultPreferencesContainer {
                topicDefaultPreferencesDecoded0?.append(structure0)
            }
        }
        topicDefaultPreferences = topicDefaultPreferencesDecoded0
        let unsubscribeAllDecoded = try containerValues.decode(Bool.self, forKey: .unsubscribeAll)
        unsubscribeAll = unsubscribeAllDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedTimestamp)
        lastUpdatedTimestamp = lastUpdatedTimestampDecoded
    }
}
