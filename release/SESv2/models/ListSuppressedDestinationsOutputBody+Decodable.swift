// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListSuppressedDestinationsOutputBody: Equatable {
    public let suppressedDestinationSummaries: [SuppressedDestinationSummary]?
    public let nextToken: String?
}

extension ListSuppressedDestinationsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case suppressedDestinationSummaries = "SuppressedDestinationSummaries"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let suppressedDestinationSummariesContainer = try containerValues.decodeIfPresent([SuppressedDestinationSummary].self, forKey: .suppressedDestinationSummaries)
        var suppressedDestinationSummariesDecoded0:[SuppressedDestinationSummary]? = nil
        if let suppressedDestinationSummariesContainer = suppressedDestinationSummariesContainer {
            suppressedDestinationSummariesDecoded0 = [SuppressedDestinationSummary]()
            for structure0 in suppressedDestinationSummariesContainer {
                suppressedDestinationSummariesDecoded0?.append(structure0)
            }
        }
        suppressedDestinationSummaries = suppressedDestinationSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
