// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Topic: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case defaultSubscriptionStatus = "DefaultSubscriptionStatus"
        case description = "Description"
        case displayName = "DisplayName"
        case topicName = "TopicName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultSubscriptionStatus = defaultSubscriptionStatus {
            try encodeContainer.encode(defaultSubscriptionStatus.rawValue, forKey: .defaultSubscriptionStatus)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let displayName = displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let topicName = topicName {
            try encodeContainer.encode(topicName, forKey: .topicName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .topicName)
        topicName = topicNameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let defaultSubscriptionStatusDecoded = try containerValues.decodeIfPresent(SubscriptionStatus.self, forKey: .defaultSubscriptionStatus)
        defaultSubscriptionStatus = defaultSubscriptionStatusDecoded
    }
}
