// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SendBulkEmailInputBody: Equatable {
    public let fromEmailAddress: String?
    public let fromEmailAddressIdentityArn: String?
    public let replyToAddresses: [String]?
    public let feedbackForwardingEmailAddress: String?
    public let feedbackForwardingEmailAddressIdentityArn: String?
    public let defaultEmailTags: [MessageTag]?
    public let defaultContent: BulkEmailContent?
    public let bulkEmailEntries: [BulkEmailEntry]?
    public let configurationSetName: String?
}

extension SendBulkEmailInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case bulkEmailEntries = "BulkEmailEntries"
        case configurationSetName = "ConfigurationSetName"
        case defaultContent = "DefaultContent"
        case defaultEmailTags = "DefaultEmailTags"
        case feedbackForwardingEmailAddress = "FeedbackForwardingEmailAddress"
        case feedbackForwardingEmailAddressIdentityArn = "FeedbackForwardingEmailAddressIdentityArn"
        case fromEmailAddress = "FromEmailAddress"
        case fromEmailAddressIdentityArn = "FromEmailAddressIdentityArn"
        case replyToAddresses = "ReplyToAddresses"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let fromEmailAddressIdentityArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fromEmailAddressIdentityArn)
        fromEmailAddressIdentityArn = fromEmailAddressIdentityArnDecoded
        let replyToAddressesContainer = try containerValues.decodeIfPresent([String].self, forKey: .replyToAddresses)
        var replyToAddressesDecoded0:[String]? = nil
        if let replyToAddressesContainer = replyToAddressesContainer {
            replyToAddressesDecoded0 = [String]()
            for string0 in replyToAddressesContainer {
                replyToAddressesDecoded0?.append(string0)
            }
        }
        replyToAddresses = replyToAddressesDecoded0
        let feedbackForwardingEmailAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .feedbackForwardingEmailAddress)
        feedbackForwardingEmailAddress = feedbackForwardingEmailAddressDecoded
        let feedbackForwardingEmailAddressIdentityArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .feedbackForwardingEmailAddressIdentityArn)
        feedbackForwardingEmailAddressIdentityArn = feedbackForwardingEmailAddressIdentityArnDecoded
        let defaultEmailTagsContainer = try containerValues.decodeIfPresent([MessageTag].self, forKey: .defaultEmailTags)
        var defaultEmailTagsDecoded0:[MessageTag]? = nil
        if let defaultEmailTagsContainer = defaultEmailTagsContainer {
            defaultEmailTagsDecoded0 = [MessageTag]()
            for structure0 in defaultEmailTagsContainer {
                defaultEmailTagsDecoded0?.append(structure0)
            }
        }
        defaultEmailTags = defaultEmailTagsDecoded0
        let defaultContentDecoded = try containerValues.decodeIfPresent(BulkEmailContent.self, forKey: .defaultContent)
        defaultContent = defaultContentDecoded
        let bulkEmailEntriesContainer = try containerValues.decodeIfPresent([BulkEmailEntry].self, forKey: .bulkEmailEntries)
        var bulkEmailEntriesDecoded0:[BulkEmailEntry]? = nil
        if let bulkEmailEntriesContainer = bulkEmailEntriesContainer {
            bulkEmailEntriesDecoded0 = [BulkEmailEntry]()
            for structure0 in bulkEmailEntriesContainer {
                bulkEmailEntriesDecoded0?.append(structure0)
            }
        }
        bulkEmailEntries = bulkEmailEntriesDecoded0
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
    }
}
