// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetEmailIdentityOutputBody: Equatable {
    public let identityType: IdentityType?
    public let feedbackForwardingStatus: Bool
    public let verifiedForSendingStatus: Bool
    public let dkimAttributes: DkimAttributes?
    public let mailFromAttributes: MailFromAttributes?
    public let policies: [String:String]?
    public let tags: [Tag]?
    public let configurationSetName: String?
}

extension GetEmailIdentityOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case dkimAttributes = "DkimAttributes"
        case feedbackForwardingStatus = "FeedbackForwardingStatus"
        case identityType = "IdentityType"
        case mailFromAttributes = "MailFromAttributes"
        case policies = "Policies"
        case tags = "Tags"
        case verifiedForSendingStatus = "VerifiedForSendingStatus"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityTypeDecoded = try containerValues.decodeIfPresent(IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
        let feedbackForwardingStatusDecoded = try containerValues.decode(Bool.self, forKey: .feedbackForwardingStatus)
        feedbackForwardingStatus = feedbackForwardingStatusDecoded
        let verifiedForSendingStatusDecoded = try containerValues.decode(Bool.self, forKey: .verifiedForSendingStatus)
        verifiedForSendingStatus = verifiedForSendingStatusDecoded
        let dkimAttributesDecoded = try containerValues.decodeIfPresent(DkimAttributes.self, forKey: .dkimAttributes)
        dkimAttributes = dkimAttributesDecoded
        let mailFromAttributesDecoded = try containerValues.decodeIfPresent(MailFromAttributes.self, forKey: .mailFromAttributes)
        mailFromAttributes = mailFromAttributesDecoded
        let policiesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .policies)
        var policiesDecoded0: [String:String]? = nil
        if let policiesContainer = policiesContainer {
            policiesDecoded0 = [String:String]()
            for (key0, policy0) in policiesContainer {
                policiesDecoded0?[key0] = policy0
            }
        }
        policies = policiesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
    }
}
