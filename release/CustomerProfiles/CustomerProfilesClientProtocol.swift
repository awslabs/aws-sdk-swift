// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <fullname>Amazon Connect Customer Profiles</fullname>
///          <p>Welcome to the Amazon Connect Customer Profiles API Reference. This guide provides information
///          about the Amazon Connect Customer Profiles API, including supported operations, data types,
///          parameters, and schemas.</p>
///          <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has
///          pre-built connectors powered by AppFlow that make it easy to combine customer information
///          from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your
///          enterprise resource planning (ERP), with contact history from your Amazon Connect contact
///          center.</p>
///          <p>If you're new to Amazon Connect , you might find it helpful to also review the <a href="https://docs.aws.amazon.com/connect/latest/adminguide/what-is-amazon-connect.html">Amazon Connect Administrator Guide</a>.</p>
public protocol CustomerProfilesClientProtocol {
    /// <p>Associates a new key value with a specific profile, such as a Contact Trace Record (CTR)
    ///          ContactId.</p>
    ///          <p>A profile object can have a single unique key and any number of additional keys that can
    ///          be used to identify the profile that it belongs to.</p>
    func addProfileKey(input: AddProfileKeyInput, completion: @escaping (SdkResult<AddProfileKeyOutputResponse, AddProfileKeyOutputError>) -> Void)
    /// <p>Creates a domain, which is a container for all customer data, such as customer profile
    ///          attributes, object types, profile keys, and encryption keys. You can create multiple
    ///          domains, and each domain can have multiple third-party integrations.</p>
    ///          <p>Each Amazon Connect instance can be associated with only one domain. Multiple Amazon Connect instances can
    ///          be associated with one domain.</p>
    func createDomain(input: CreateDomainInput, completion: @escaping (SdkResult<CreateDomainOutputResponse, CreateDomainOutputError>) -> Void)
    /// <p>Creates a standard profile.</p>
    ///          <p>A standard profile represents the following attributes for a customer profile in a
    ///          domain.</p>
    func createProfile(input: CreateProfileInput, completion: @escaping (SdkResult<CreateProfileOutputResponse, CreateProfileOutputError>) -> Void)
    /// <p>Deletes a specific domain and all of its customer data, such as customer profile
    ///          attributes and their related objects.</p>
    func deleteDomain(input: DeleteDomainInput, completion: @escaping (SdkResult<DeleteDomainOutputResponse, DeleteDomainOutputError>) -> Void)
    /// <p>Removes an integration from a specific domain.</p>
    func deleteIntegration(input: DeleteIntegrationInput, completion: @escaping (SdkResult<DeleteIntegrationOutputResponse, DeleteIntegrationOutputError>) -> Void)
    /// <p>Deletes the standard customer profile and all data pertaining to the profile.</p>
    func deleteProfile(input: DeleteProfileInput, completion: @escaping (SdkResult<DeleteProfileOutputResponse, DeleteProfileOutputError>) -> Void)
    /// <p>Removes a searchable key from a customer profile.</p>
    func deleteProfileKey(input: DeleteProfileKeyInput, completion: @escaping (SdkResult<DeleteProfileKeyOutputResponse, DeleteProfileKeyOutputError>) -> Void)
    /// <p>Removes an object associated with a profile of a given ProfileObjectType.</p>
    func deleteProfileObject(input: DeleteProfileObjectInput, completion: @escaping (SdkResult<DeleteProfileObjectOutputResponse, DeleteProfileObjectOutputError>) -> Void)
    /// <p>Removes a ProfileObjectType from a specific domain as well as removes all the
    ///          ProfileObjects of that type. It also disables integrations from this specific
    ///          ProfileObjectType. In addition, it scrubs all of the fields of the standard profile that
    ///          were populated from this ProfileObjectType.</p>
    func deleteProfileObjectType(input: DeleteProfileObjectTypeInput, completion: @escaping (SdkResult<DeleteProfileObjectTypeOutputResponse, DeleteProfileObjectTypeOutputError>) -> Void)
    /// <p>Returns information about a specific domain.</p>
    func getDomain(input: GetDomainInput, completion: @escaping (SdkResult<GetDomainOutputResponse, GetDomainOutputError>) -> Void)
    /// <p>Returns an integration for a domain.</p>
    func getIntegration(input: GetIntegrationInput, completion: @escaping (SdkResult<GetIntegrationOutputResponse, GetIntegrationOutputError>) -> Void)
    /// <p>This API is in preview release for Amazon Connect and subject to change.</p>
    ///          <p>Before calling this API, use <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_CreateDomain.html">CreateDomain</a> or
    ///             <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UpdateDomain.html">UpdateDomain</a> to
    ///          enable identity resolution: set <code>Matching</code> to true.</p>
    ///          <p>GetMatches returns potentially matching profiles, based on the results of the latest run
    ///          of a machine learning process. </p>
    ///          <important>
    ///             <p>Amazon Connect runs a batch process every Saturday at 12AM UTC to identify matching profiles.
    ///             The results are returned up to seven days after the Saturday run.</p>
    ///          </important>
    ///
    ///          <p>Amazon Connect uses the following profile attributes to identify matches:</p>
    ///          <ul>
    ///             <li>
    ///                <p>PhoneNumber</p>
    ///             </li>
    ///             <li>
    ///                <p>HomePhoneNumber</p>
    ///             </li>
    ///             <li>
    ///                <p>BusinessPhoneNumber</p>
    ///             </li>
    ///             <li>
    ///                <p>MobilePhoneNumber</p>
    ///             </li>
    ///             <li>
    ///                <p>EmailAddress</p>
    ///             </li>
    ///             <li>
    ///                <p>PersonalEmailAddress</p>
    ///             </li>
    ///             <li>
    ///                <p>BusinessEmailAddress</p>
    ///             </li>
    ///             <li>
    ///                <p>FullName</p>
    ///             </li>
    ///             <li>
    ///                <p>BusinessName</p>
    ///             </li>
    ///          </ul>
    func getMatches(input: GetMatchesInput, completion: @escaping (SdkResult<GetMatchesOutputResponse, GetMatchesOutputError>) -> Void)
    /// <p>Returns the object types for a specific domain.</p>
    func getProfileObjectType(input: GetProfileObjectTypeInput, completion: @escaping (SdkResult<GetProfileObjectTypeOutputResponse, GetProfileObjectTypeOutputError>) -> Void)
    /// <p>Returns the template information for a specific object type.</p>
    ///          <p>A template is a predefined ProfileObjectType, such as “Salesforce-Account” or
    ///          “Salesforce-Contact.” When a user sends a ProfileObject, using the PutProfileObject API,
    ///          with an ObjectTypeName that matches one of the TemplateIds, it uses the mappings from the
    ///          template.</p>
    func getProfileObjectTypeTemplate(input: GetProfileObjectTypeTemplateInput, completion: @escaping (SdkResult<GetProfileObjectTypeTemplateOutputResponse, GetProfileObjectTypeTemplateOutputError>) -> Void)
    /// <p>Lists all of the integrations associated to a specific URI in the AWS account.</p>
    func listAccountIntegrations(input: ListAccountIntegrationsInput, completion: @escaping (SdkResult<ListAccountIntegrationsOutputResponse, ListAccountIntegrationsOutputError>) -> Void)
    /// <p>Returns a list of all the domains for an AWS account that have been created.</p>
    func listDomains(input: ListDomainsInput, completion: @escaping (SdkResult<ListDomainsOutputResponse, ListDomainsOutputError>) -> Void)
    /// <p>Lists all of the integrations in your domain.</p>
    func listIntegrations(input: ListIntegrationsInput, completion: @escaping (SdkResult<ListIntegrationsOutputResponse, ListIntegrationsOutputError>) -> Void)
    /// <p>Returns a list of objects associated with a profile of a given ProfileObjectType.</p>
    func listProfileObjects(input: ListProfileObjectsInput, completion: @escaping (SdkResult<ListProfileObjectsOutputResponse, ListProfileObjectsOutputError>) -> Void)
    /// <p>Lists all of the templates available within the service.</p>
    func listProfileObjectTypes(input: ListProfileObjectTypesInput, completion: @escaping (SdkResult<ListProfileObjectTypesOutputResponse, ListProfileObjectTypesOutputError>) -> Void)
    /// <p>Lists all of the template information for object types.</p>
    func listProfileObjectTypeTemplates(input: ListProfileObjectTypeTemplatesInput, completion: @escaping (SdkResult<ListProfileObjectTypeTemplatesOutputResponse, ListProfileObjectTypeTemplatesOutputError>) -> Void)
    /// <p>Displays the tags associated with an Amazon Connect Customer Profiles resource. In Connect
    ///          Customer Profiles, domains, profile object types, and integrations can be tagged.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p>This API is in preview release for Amazon Connect and subject to change.</p>
    ///          <p>Runs an AWS Lambda job that does the following:</p>
    ///          <ol>
    ///             <li>
    ///                <p>All the profileKeys in the <code>ProfileToBeMerged</code> will be moved to the
    ///                main profile.</p>
    ///             </li>
    ///             <li>
    ///                <p>All the objects in the <code>ProfileToBeMerged</code> will be moved to the main
    ///                profile.</p>
    ///             </li>
    ///             <li>
    ///                <p>All the <code>ProfileToBeMerged</code> will be deleted at the end.</p>
    ///             </li>
    ///             <li>
    ///                <p>All the profileKeys in the <code>ProfileIdsToBeMerged</code> will be moved to the
    ///                main profile.</p>
    ///             </li>
    ///             <li>
    ///                <p>Standard fields are merged as follows:</p>
    ///                <ol>
    ///                   <li>
    ///                      <p>Fields are always "union"-ed if there are no conflicts in standard fields or
    ///                      attributeKeys.</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>When there are conflicting fields:</p>
    ///
    ///                      <ol>
    ///                         <li>
    ///                            <p>If no <code>SourceProfileIds</code> entry is specified, the main
    ///                            Profile value is always taken. </p>
    ///                         </li>
    ///                         <li>
    ///                            <p>If a <code>SourceProfileIds</code> entry is specified, the specified
    ///                            profileId is always taken, even if it is a NULL value.</p>
    ///                         </li>
    ///                      </ol>
    ///                   </li>
    ///                </ol>
    ///             </li>
    ///          </ol>
    ///          <p>You can use MergeProfiles together with <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html">GetMatches</a>, which
    ///          returns potentially matching profiles, or use it with the results of another matching
    ///          system. After profiles have been merged, they cannot be separated (unmerged).</p>
    func mergeProfiles(input: MergeProfilesInput, completion: @escaping (SdkResult<MergeProfilesOutputResponse, MergeProfilesOutputError>) -> Void)
    /// <p>Adds an integration between the service and a third-party service, which includes
    ///          Amazon AppFlow and Amazon Connect.</p>
    ///          <p>An integration can belong to only one domain.</p>
    func putIntegration(input: PutIntegrationInput, completion: @escaping (SdkResult<PutIntegrationOutputResponse, PutIntegrationOutputError>) -> Void)
    /// <p>Adds additional objects to customer profiles of a given ObjectType.</p>
    ///          <p>When adding a specific profile object, like a Contact Trace Record (CTR), an inferred
    ///          profile can get created if it is not mapped to an existing profile. The resulting profile
    ///          will only have a phone number populated in the standard ProfileObject. Any additional CTRs
    ///          with the same phone number will be mapped to the same inferred profile.</p>
    ///          <p>When a ProfileObject is created and if a ProfileObjectType already exists for the
    ///          ProfileObject, it will provide data to a standard profile depending on the
    ///          ProfileObjectType definition.</p>
    ///          <p>PutProfileObject needs an ObjectType, which can be created using
    ///          PutProfileObjectType.</p>
    func putProfileObject(input: PutProfileObjectInput, completion: @escaping (SdkResult<PutProfileObjectOutputResponse, PutProfileObjectOutputError>) -> Void)
    /// <p>Defines a ProfileObjectType.</p>
    func putProfileObjectType(input: PutProfileObjectTypeInput, completion: @escaping (SdkResult<PutProfileObjectTypeOutputResponse, PutProfileObjectTypeOutputError>) -> Void)
    /// <p>Searches for profiles within a specific domain name using name, phone number, email
    ///          address, account number, or a custom defined index.</p>
    func searchProfiles(input: SearchProfilesInput, completion: @escaping (SdkResult<SearchProfilesOutputResponse, SearchProfilesOutputError>) -> Void)
    /// <p>Assigns one or more tags (key-value pairs) to the specified Amazon Connect Customer Profiles
    ///          resource. Tags can help you organize and categorize your resources. You can also use them
    ///          to scope user permissions by granting a user permission to access or change only resources
    ///          with certain tag values. In Connect Customer Profiles, domains, profile object types, and
    ///          integrations can be tagged.</p>
    ///          <p>Tags don't have any semantic meaning to AWS and are interpreted strictly as strings of
    ///          characters.</p>
    ///          <p>You can use the TagResource action with a resource that already has tags. If you specify
    ///          a new tag key, this tag is appended to the list of tags associated with the resource. If
    ///          you specify a tag key that is already associated with the resource, the new tag value that
    ///          you specify replaces the previous value for that tag.</p>
    ///          <p>You can associate as many as 50 tags with a resource.</p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p>Removes one or more tags from the specified Amazon Connect Customer Profiles resource. In Connect
    ///          Customer Profiles, domains, profile object types, and integrations can be tagged.</p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// <p>Updates the properties of a domain, including creating or selecting a dead letter queue
    ///          or an encryption key.</p>
    ///          <p>After a domain is created, the name can’t be changed.</p>
    func updateDomain(input: UpdateDomainInput, completion: @escaping (SdkResult<UpdateDomainOutputResponse, UpdateDomainOutputError>) -> Void)
    /// <p>Updates the properties of a profile. The ProfileId is required for updating a customer
    ///          profile.</p>
    ///          <p>When calling the UpdateProfile API, specifying an empty string value means that any
    ///          existing value will be removed. Not specifying a string value means that any value already
    ///          there will be kept.</p>
    func updateProfile(input: UpdateProfileInput, completion: @escaping (SdkResult<UpdateProfileOutputResponse, UpdateProfileOutputError>) -> Void)
}
