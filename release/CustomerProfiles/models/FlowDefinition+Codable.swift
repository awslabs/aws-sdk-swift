// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FlowDefinition: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case flowName = "FlowName"
        case kmsArn = "KmsArn"
        case sourceFlowConfig = "SourceFlowConfig"
        case tasks = "Tasks"
        case triggerConfig = "TriggerConfig"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let flowName = flowName {
            try encodeContainer.encode(flowName, forKey: .flowName)
        }
        if let kmsArn = kmsArn {
            try encodeContainer.encode(kmsArn, forKey: .kmsArn)
        }
        if let sourceFlowConfig = sourceFlowConfig {
            try encodeContainer.encode(sourceFlowConfig, forKey: .sourceFlowConfig)
        }
        if let tasks = tasks {
            var tasksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tasks)
            for tasks0 in tasks {
                try tasksContainer.encode(tasks0)
            }
        }
        if let triggerConfig = triggerConfig {
            try encodeContainer.encode(triggerConfig, forKey: .triggerConfig)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let flowNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .flowName)
        flowName = flowNameDecoded
        let kmsArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsArn)
        kmsArn = kmsArnDecoded
        let sourceFlowConfigDecoded = try containerValues.decodeIfPresent(SourceFlowConfig.self, forKey: .sourceFlowConfig)
        sourceFlowConfig = sourceFlowConfigDecoded
        let tasksContainer = try containerValues.decodeIfPresent([Task].self, forKey: .tasks)
        var tasksDecoded0:[Task]? = nil
        if let tasksContainer = tasksContainer {
            tasksDecoded0 = [Task]()
            for structure0 in tasksContainer {
                tasksDecoded0?.append(structure0)
            }
        }
        tasks = tasksDecoded0
        let triggerConfigDecoded = try containerValues.decodeIfPresent(TriggerConfig.self, forKey: .triggerConfig)
        triggerConfig = triggerConfigDecoded
    }
}
