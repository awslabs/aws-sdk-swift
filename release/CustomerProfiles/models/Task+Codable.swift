// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Task: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case connectorOperator = "ConnectorOperator"
        case destinationField = "DestinationField"
        case sourceFields = "SourceFields"
        case taskProperties = "TaskProperties"
        case taskType = "TaskType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectorOperator = connectorOperator {
            try encodeContainer.encode(connectorOperator, forKey: .connectorOperator)
        }
        if let destinationField = destinationField {
            try encodeContainer.encode(destinationField, forKey: .destinationField)
        }
        if let sourceFields = sourceFields {
            var sourceFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sourceFields)
            for sourcefields0 in sourceFields {
                try sourceFieldsContainer.encode(sourcefields0)
            }
        }
        if let taskProperties = taskProperties {
            var taskPropertiesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .taskProperties)
            for (dictKey0, taskpropertiesmap0) in taskProperties {
                try taskPropertiesContainer.encode(taskpropertiesmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let taskType = taskType {
            try encodeContainer.encode(taskType.rawValue, forKey: .taskType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectorOperatorDecoded = try containerValues.decodeIfPresent(ConnectorOperator.self, forKey: .connectorOperator)
        connectorOperator = connectorOperatorDecoded
        let destinationFieldDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationField)
        destinationField = destinationFieldDecoded
        let sourceFieldsContainer = try containerValues.decodeIfPresent([String].self, forKey: .sourceFields)
        var sourceFieldsDecoded0:[String]? = nil
        if let sourceFieldsContainer = sourceFieldsContainer {
            sourceFieldsDecoded0 = [String]()
            for string0 in sourceFieldsContainer {
                sourceFieldsDecoded0?.append(string0)
            }
        }
        sourceFields = sourceFieldsDecoded0
        let taskPropertiesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .taskProperties)
        var taskPropertiesDecoded0: [String:String]? = nil
        if let taskPropertiesContainer = taskPropertiesContainer {
            taskPropertiesDecoded0 = [String:String]()
            for (key0, property0) in taskPropertiesContainer {
                taskPropertiesDecoded0?[key0] = property0
            }
        }
        taskProperties = taskPropertiesDecoded0
        let taskTypeDecoded = try containerValues.decodeIfPresent(TaskType.self, forKey: .taskType)
        taskType = taskTypeDecoded
    }
}
