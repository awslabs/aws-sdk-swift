// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetProfileObjectTypeTemplateOutputBody: Equatable {
    public let templateId: String?
    public let sourceName: String?
    public let sourceObject: String?
    public let allowProfileCreation: Bool
    public let fields: [String:ObjectTypeField]?
    public let keys: [String:[ObjectTypeKey]?]?
}

extension GetProfileObjectTypeTemplateOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case allowProfileCreation = "AllowProfileCreation"
        case fields = "Fields"
        case keys = "Keys"
        case sourceName = "SourceName"
        case sourceObject = "SourceObject"
        case templateId = "TemplateId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .templateId)
        templateId = templateIdDecoded
        let sourceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceName)
        sourceName = sourceNameDecoded
        let sourceObjectDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceObject)
        sourceObject = sourceObjectDecoded
        let allowProfileCreationDecoded = try containerValues.decode(Bool.self, forKey: .allowProfileCreation)
        allowProfileCreation = allowProfileCreationDecoded
        let fieldsContainer = try containerValues.decodeIfPresent([String:ObjectTypeField].self, forKey: .fields)
        var fieldsDecoded0: [String:ObjectTypeField]? = nil
        if let fieldsContainer = fieldsContainer {
            fieldsDecoded0 = [String:ObjectTypeField]()
            for (key0, objecttypefield0) in fieldsContainer {
                fieldsDecoded0?[key0] = objecttypefield0
            }
        }
        fields = fieldsDecoded0
        let keysContainer = try containerValues.decodeIfPresent([String:[ObjectTypeKey]?].self, forKey: .keys)
        var keysDecoded0: [String:[ObjectTypeKey]?]? = nil
        if let keysContainer = keysContainer {
            keysDecoded0 = [String:[ObjectTypeKey]?]()
            for (key0, objecttypekeylist0) in keysContainer {
                var objecttypekeylist0Decoded0 = [ObjectTypeKey]()
                if let objecttypekeylist0 = objecttypekeylist0 {
                    for structure1 in objecttypekeylist0 {
                        objecttypekeylist0Decoded0.append(structure1)
                    }
                }
                keysDecoded0?[key0] = objecttypekeylist0Decoded0
            }
        }
        keys = keysDecoded0
    }
}
