// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateDomainInputBody: Equatable {
    public let defaultExpirationDays: Int?
    public let defaultEncryptionKey: String?
    public let deadLetterQueueUrl: String?
    public let matching: MatchingRequest?
    public let tags: [String:String]?
}

extension UpdateDomainInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deadLetterQueueUrl = "DeadLetterQueueUrl"
        case defaultEncryptionKey = "DefaultEncryptionKey"
        case defaultExpirationDays = "DefaultExpirationDays"
        case matching = "Matching"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultExpirationDaysDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .defaultExpirationDays)
        defaultExpirationDays = defaultExpirationDaysDecoded
        let defaultEncryptionKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultEncryptionKey)
        defaultEncryptionKey = defaultEncryptionKeyDecoded
        let deadLetterQueueUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deadLetterQueueUrl)
        deadLetterQueueUrl = deadLetterQueueUrlDecoded
        let matchingDecoded = try containerValues.decodeIfPresent(MatchingRequest.self, forKey: .matching)
        matching = matchingDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
