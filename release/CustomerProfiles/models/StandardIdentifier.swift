// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum StandardIdentifier {
    case lookupOnly
    case newOnly
    case profile
    case secondary
    case unique
    case sdkUnknown(String)
}

extension StandardIdentifier : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [StandardIdentifier] {
        return [
            .lookupOnly,
            .newOnly,
            .profile,
            .secondary,
            .unique,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .lookupOnly: return "LOOKUP_ONLY"
        case .newOnly: return "NEW_ONLY"
        case .profile: return "PROFILE"
        case .secondary: return "SECONDARY"
        case .unique: return "UNIQUE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = StandardIdentifier(rawValue: rawValue) ?? StandardIdentifier.sdkUnknown(rawValue)
    }
}
