// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum OperatorPropertiesKeys {
    case concatFormat
    case dataType
    case destinationDataType
    case lowerBound
    case maskLength
    case maskValue
    case mathOperationFieldsOrder
    case sourceDataType
    case subfieldCategoryMap
    case truncateLength
    case upperBound
    case validationAction
    case value
    case values
    case sdkUnknown(String)
}

extension OperatorPropertiesKeys : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [OperatorPropertiesKeys] {
        return [
            .concatFormat,
            .dataType,
            .destinationDataType,
            .lowerBound,
            .maskLength,
            .maskValue,
            .mathOperationFieldsOrder,
            .sourceDataType,
            .subfieldCategoryMap,
            .truncateLength,
            .upperBound,
            .validationAction,
            .value,
            .values,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .concatFormat: return "CONCAT_FORMAT"
        case .dataType: return "DATA_TYPE"
        case .destinationDataType: return "DESTINATION_DATA_TYPE"
        case .lowerBound: return "LOWER_BOUND"
        case .maskLength: return "MASK_LENGTH"
        case .maskValue: return "MASK_VALUE"
        case .mathOperationFieldsOrder: return "MATH_OPERATION_FIELDS_ORDER"
        case .sourceDataType: return "SOURCE_DATA_TYPE"
        case .subfieldCategoryMap: return "SUBFIELD_CATEGORY_MAP"
        case .truncateLength: return "TRUNCATE_LENGTH"
        case .upperBound: return "UPPER_BOUND"
        case .validationAction: return "VALIDATION_ACTION"
        case .value: return "VALUE"
        case .values: return "VALUES"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = OperatorPropertiesKeys(rawValue: rawValue) ?? OperatorPropertiesKeys.sdkUnknown(rawValue)
    }
}
