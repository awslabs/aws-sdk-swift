// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetDomainOutputBody: Equatable {
    public let domainName: String?
    public let defaultExpirationDays: Int?
    public let defaultEncryptionKey: String?
    public let deadLetterQueueUrl: String?
    public let stats: DomainStats?
    public let matching: MatchingResponse?
    public let createdAt: Date?
    public let lastUpdatedAt: Date?
    public let tags: [String:String]?
}

extension GetDomainOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case createdAt = "CreatedAt"
        case deadLetterQueueUrl = "DeadLetterQueueUrl"
        case defaultEncryptionKey = "DefaultEncryptionKey"
        case defaultExpirationDays = "DefaultExpirationDays"
        case domainName = "DomainName"
        case lastUpdatedAt = "LastUpdatedAt"
        case matching = "Matching"
        case stats = "Stats"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let defaultExpirationDaysDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .defaultExpirationDays)
        defaultExpirationDays = defaultExpirationDaysDecoded
        let defaultEncryptionKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultEncryptionKey)
        defaultEncryptionKey = defaultEncryptionKeyDecoded
        let deadLetterQueueUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deadLetterQueueUrl)
        deadLetterQueueUrl = deadLetterQueueUrlDecoded
        let statsDecoded = try containerValues.decodeIfPresent(DomainStats.self, forKey: .stats)
        stats = statsDecoded
        let matchingDecoded = try containerValues.decodeIfPresent(MatchingResponse.self, forKey: .matching)
        matching = matchingDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
