// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutProfileObjectTypeOutputBody: Equatable {
    public let objectTypeName: String?
    public let description: String?
    public let templateId: String?
    public let expirationDays: Int?
    public let encryptionKey: String?
    public let allowProfileCreation: Bool
    public let fields: [String:ObjectTypeField]?
    public let keys: [String:[ObjectTypeKey]?]?
    public let createdAt: Date?
    public let lastUpdatedAt: Date?
    public let tags: [String:String]?
}

extension PutProfileObjectTypeOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case allowProfileCreation = "AllowProfileCreation"
        case createdAt = "CreatedAt"
        case description = "Description"
        case encryptionKey = "EncryptionKey"
        case expirationDays = "ExpirationDays"
        case fields = "Fields"
        case keys = "Keys"
        case lastUpdatedAt = "LastUpdatedAt"
        case objectTypeName = "ObjectTypeName"
        case tags = "Tags"
        case templateId = "TemplateId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let objectTypeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .objectTypeName)
        objectTypeName = objectTypeNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let templateIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .templateId)
        templateId = templateIdDecoded
        let expirationDaysDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .expirationDays)
        expirationDays = expirationDaysDecoded
        let encryptionKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .encryptionKey)
        encryptionKey = encryptionKeyDecoded
        let allowProfileCreationDecoded = try containerValues.decode(Bool.self, forKey: .allowProfileCreation)
        allowProfileCreation = allowProfileCreationDecoded
        let fieldsContainer = try containerValues.decodeIfPresent([String:ObjectTypeField].self, forKey: .fields)
        var fieldsDecoded0: [String:ObjectTypeField]? = nil
        if let fieldsContainer = fieldsContainer {
            fieldsDecoded0 = [String:ObjectTypeField]()
            for (key0, objecttypefield0) in fieldsContainer {
                fieldsDecoded0?[key0] = objecttypefield0
            }
        }
        fields = fieldsDecoded0
        let keysContainer = try containerValues.decodeIfPresent([String:[ObjectTypeKey]?].self, forKey: .keys)
        var keysDecoded0: [String:[ObjectTypeKey]?]? = nil
        if let keysContainer = keysContainer {
            keysDecoded0 = [String:[ObjectTypeKey]?]()
            for (key0, objecttypekeylist0) in keysContainer {
                var objecttypekeylist0Decoded0 = [ObjectTypeKey]()
                if let objecttypekeylist0 = objecttypekeylist0 {
                    for structure1 in objecttypekeylist0 {
                        objecttypekeylist0Decoded0.append(structure1)
                    }
                }
                keysDecoded0?[key0] = objecttypekeylist0Decoded0
            }
        }
        keys = keysDecoded0
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
