// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UnlinkIdentityInputBody: Equatable {
    public let identityId: String?
    public let logins: [String:String]?
    public let loginsToRemove: [String]?
}

extension UnlinkIdentityInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case identityId = "IdentityId"
        case logins = "Logins"
        case loginsToRemove = "LoginsToRemove"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identityId)
        identityId = identityIdDecoded
        let loginsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .logins)
        var loginsDecoded0: [String:String]? = nil
        if let loginsContainer = loginsContainer {
            loginsDecoded0 = [String:String]()
            for (key0, identityprovidertoken0) in loginsContainer {
                loginsDecoded0?[key0] = identityprovidertoken0
            }
        }
        logins = loginsDecoded0
        let loginsToRemoveContainer = try containerValues.decodeIfPresent([String].self, forKey: .loginsToRemove)
        var loginsToRemoveDecoded0:[String]? = nil
        if let loginsToRemoveContainer = loginsToRemoveContainer {
            loginsToRemoveDecoded0 = [String]()
            for string0 in loginsToRemoveContainer {
                loginsToRemoveDecoded0?.append(string0)
            }
        }
        loginsToRemove = loginsToRemoveDecoded0
    }
}
