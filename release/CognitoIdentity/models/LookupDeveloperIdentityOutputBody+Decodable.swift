// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct LookupDeveloperIdentityOutputBody: Equatable {
    public let identityId: String?
    public let developerUserIdentifierList: [String]?
    public let nextToken: String?
}

extension LookupDeveloperIdentityOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case developerUserIdentifierList = "DeveloperUserIdentifierList"
        case identityId = "IdentityId"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identityId)
        identityId = identityIdDecoded
        let developerUserIdentifierListContainer = try containerValues.decodeIfPresent([String].self, forKey: .developerUserIdentifierList)
        var developerUserIdentifierListDecoded0:[String]? = nil
        if let developerUserIdentifierListContainer = developerUserIdentifierListContainer {
            developerUserIdentifierListDecoded0 = [String]()
            for string0 in developerUserIdentifierListContainer {
                developerUserIdentifierListDecoded0?.append(string0)
            }
        }
        developerUserIdentifierList = developerUserIdentifierListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
