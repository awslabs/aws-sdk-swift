// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MetricPolicy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case containerLevelMetrics = "ContainerLevelMetrics"
        case metricPolicyRules = "MetricPolicyRules"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerLevelMetrics = containerLevelMetrics {
            try encodeContainer.encode(containerLevelMetrics.rawValue, forKey: .containerLevelMetrics)
        }
        if let metricPolicyRules = metricPolicyRules {
            var metricPolicyRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricPolicyRules)
            for metricpolicyrules0 in metricPolicyRules {
                try metricPolicyRulesContainer.encode(metricpolicyrules0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerLevelMetricsDecoded = try containerValues.decodeIfPresent(ContainerLevelMetrics.self, forKey: .containerLevelMetrics)
        containerLevelMetrics = containerLevelMetricsDecoded
        let metricPolicyRulesContainer = try containerValues.decodeIfPresent([MetricPolicyRule].self, forKey: .metricPolicyRules)
        var metricPolicyRulesDecoded0:[MetricPolicyRule]? = nil
        if let metricPolicyRulesContainer = metricPolicyRulesContainer {
            metricPolicyRulesDecoded0 = [MetricPolicyRule]()
            for structure0 in metricPolicyRulesContainer {
                metricPolicyRulesDecoded0?.append(structure0)
            }
        }
        metricPolicyRules = metricPolicyRulesDecoded0
    }
}
