// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CorsRule: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allowedHeaders = "AllowedHeaders"
        case allowedMethods = "AllowedMethods"
        case allowedOrigins = "AllowedOrigins"
        case exposeHeaders = "ExposeHeaders"
        case maxAgeSeconds = "MaxAgeSeconds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedHeaders = allowedHeaders {
            var allowedHeadersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedHeaders)
            for allowedheaders0 in allowedHeaders {
                try allowedHeadersContainer.encode(allowedheaders0)
            }
        }
        if let allowedMethods = allowedMethods {
            var allowedMethodsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedMethods)
            for allowedmethods0 in allowedMethods {
                try allowedMethodsContainer.encode(allowedmethods0.rawValue)
            }
        }
        if let allowedOrigins = allowedOrigins {
            var allowedOriginsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedOrigins)
            for allowedorigins0 in allowedOrigins {
                try allowedOriginsContainer.encode(allowedorigins0)
            }
        }
        if let exposeHeaders = exposeHeaders {
            var exposeHeadersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exposeHeaders)
            for exposeheaders0 in exposeHeaders {
                try exposeHeadersContainer.encode(exposeheaders0)
            }
        }
        if maxAgeSeconds != 0 {
            try encodeContainer.encode(maxAgeSeconds, forKey: .maxAgeSeconds)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowedOriginsContainer = try containerValues.decodeIfPresent([String].self, forKey: .allowedOrigins)
        var allowedOriginsDecoded0:[String]? = nil
        if let allowedOriginsContainer = allowedOriginsContainer {
            allowedOriginsDecoded0 = [String]()
            for string0 in allowedOriginsContainer {
                allowedOriginsDecoded0?.append(string0)
            }
        }
        allowedOrigins = allowedOriginsDecoded0
        let allowedMethodsContainer = try containerValues.decodeIfPresent([MethodName].self, forKey: .allowedMethods)
        var allowedMethodsDecoded0:[MethodName]? = nil
        if let allowedMethodsContainer = allowedMethodsContainer {
            allowedMethodsDecoded0 = [MethodName]()
            for string0 in allowedMethodsContainer {
                allowedMethodsDecoded0?.append(string0)
            }
        }
        allowedMethods = allowedMethodsDecoded0
        let allowedHeadersContainer = try containerValues.decodeIfPresent([String].self, forKey: .allowedHeaders)
        var allowedHeadersDecoded0:[String]? = nil
        if let allowedHeadersContainer = allowedHeadersContainer {
            allowedHeadersDecoded0 = [String]()
            for string0 in allowedHeadersContainer {
                allowedHeadersDecoded0?.append(string0)
            }
        }
        allowedHeaders = allowedHeadersDecoded0
        let maxAgeSecondsDecoded = try containerValues.decode(Int.self, forKey: .maxAgeSeconds)
        maxAgeSeconds = maxAgeSecondsDecoded
        let exposeHeadersContainer = try containerValues.decodeIfPresent([String].self, forKey: .exposeHeaders)
        var exposeHeadersDecoded0:[String]? = nil
        if let exposeHeadersContainer = exposeHeadersContainer {
            exposeHeadersDecoded0 = [String]()
            for string0 in exposeHeadersContainer {
                exposeHeadersDecoded0?.append(string0)
            }
        }
        exposeHeaders = exposeHeadersDecoded0
    }
}
