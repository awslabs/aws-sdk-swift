// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetDataSourceOutputBody: Equatable {
    public let dataSourceId: String?
    public let dataLocationS3: String?
    public let dataRearrangement: String?
    public let createdByIamUser: String?
    public let createdAt: Date?
    public let lastUpdatedAt: Date?
    public let dataSizeInBytes: Int?
    public let numberOfFiles: Int?
    public let name: String?
    public let status: EntityStatus?
    public let logUri: String?
    public let message: String?
    public let redshiftMetadata: RedshiftMetadata?
    public let rDSMetadata: RDSMetadata?
    public let roleARN: String?
    public let computeStatistics: Bool
    public let computeTime: Int?
    public let finishedAt: Date?
    public let startedAt: Date?
    public let dataSourceSchema: String?
}

extension GetDataSourceOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case computeStatistics = "ComputeStatistics"
        case computeTime = "ComputeTime"
        case createdAt = "CreatedAt"
        case createdByIamUser = "CreatedByIamUser"
        case dataLocationS3 = "DataLocationS3"
        case dataRearrangement = "DataRearrangement"
        case dataSizeInBytes = "DataSizeInBytes"
        case dataSourceId = "DataSourceId"
        case dataSourceSchema = "DataSourceSchema"
        case finishedAt = "FinishedAt"
        case lastUpdatedAt = "LastUpdatedAt"
        case logUri = "LogUri"
        case message = "Message"
        case name = "Name"
        case numberOfFiles = "NumberOfFiles"
        case rDSMetadata = "RDSMetadata"
        case redshiftMetadata = "RedshiftMetadata"
        case roleARN = "RoleARN"
        case startedAt = "StartedAt"
        case status = "Status"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let dataLocationS3Decoded = try containerValues.decodeIfPresent(String.self, forKey: .dataLocationS3)
        dataLocationS3 = dataLocationS3Decoded
        let dataRearrangementDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataRearrangement)
        dataRearrangement = dataRearrangementDecoded
        let createdByIamUserDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdByIamUser)
        createdByIamUser = createdByIamUserDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let dataSizeInBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .dataSizeInBytes)
        dataSizeInBytes = dataSizeInBytesDecoded
        let numberOfFilesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .numberOfFiles)
        numberOfFiles = numberOfFilesDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EntityStatus.self, forKey: .status)
        status = statusDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logUri)
        logUri = logUriDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let redshiftMetadataDecoded = try containerValues.decodeIfPresent(RedshiftMetadata.self, forKey: .redshiftMetadata)
        redshiftMetadata = redshiftMetadataDecoded
        let rDSMetadataDecoded = try containerValues.decodeIfPresent(RDSMetadata.self, forKey: .rDSMetadata)
        rDSMetadata = rDSMetadataDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let computeStatisticsDecoded = try containerValues.decode(Bool.self, forKey: .computeStatistics)
        computeStatistics = computeStatisticsDecoded
        let computeTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .computeTime)
        computeTime = computeTimeDecoded
        let finishedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .finishedAt)
        finishedAt = finishedAtDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let dataSourceSchemaDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataSourceSchema)
        dataSourceSchema = dataSourceSchemaDecoded
    }
}
