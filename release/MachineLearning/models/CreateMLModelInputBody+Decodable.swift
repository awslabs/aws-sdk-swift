// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateMLModelInputBody: Equatable {
    public let mLModelId: String?
    public let mLModelName: String?
    public let mLModelType: MLModelType?
    public let parameters: [String:String]?
    public let trainingDataSourceId: String?
    public let recipe: String?
    public let recipeUri: String?
}

extension CreateMLModelInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case mLModelId = "MLModelId"
        case mLModelName = "MLModelName"
        case mLModelType = "MLModelType"
        case parameters = "Parameters"
        case recipe = "Recipe"
        case recipeUri = "RecipeUri"
        case trainingDataSourceId = "TrainingDataSourceId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mLModelIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
        let mLModelNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mLModelName)
        mLModelName = mLModelNameDecoded
        let mLModelTypeDecoded = try containerValues.decodeIfPresent(MLModelType.self, forKey: .mLModelType)
        mLModelType = mLModelTypeDecoded
        let parametersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .parameters)
        var parametersDecoded0: [String:String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [String:String]()
            for (key0, stringtype0) in parametersContainer {
                parametersDecoded0?[key0] = stringtype0
            }
        }
        parameters = parametersDecoded0
        let trainingDataSourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trainingDataSourceId)
        trainingDataSourceId = trainingDataSourceIdDecoded
        let recipeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recipe)
        recipe = recipeDecoded
        let recipeUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recipeUri)
        recipeUri = recipeUriDecoded
    }
}
