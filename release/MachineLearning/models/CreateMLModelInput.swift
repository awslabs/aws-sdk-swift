// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateMLModelInput: Equatable {
    /// <p>A user-supplied ID that uniquely identifies the <code>MLModel</code>.</p>
    public let mLModelId: String?
    /// <p>A user-supplied name or description of the <code>MLModel</code>.</p>
    public let mLModelName: String?
    /// <p>The category of supervised learning that this <code>MLModel</code> will address. Choose from the following types:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Choose <code>REGRESSION</code> if the <code>MLModel</code> will be used to predict a numeric value.</p>
    ///             </li>
    ///             <li>
    ///                <p>Choose <code>BINARY</code> if the <code>MLModel</code> result has two possible values.</p>
    ///             </li>
    ///             <li>
    ///                <p>Choose <code>MULTICLASS</code> if the <code>MLModel</code> result has a limited number of values.</p>
    ///             </li>
    ///          </ul>
    ///         <p> For more information, see the <a href="https://docs.aws.amazon.com/machine-learning/latest/dg">Amazon Machine Learning Developer Guide</a>.</p>
    public let mLModelType: MLModelType?
    /// <p>A list of the training parameters in the <code>MLModel</code>. The list is implemented as
    ///             a map of key-value pairs.</p>
    ///         <p>The following is the current set of training parameters:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>sgd.maxMLModelSizeInBytes</code> - The maximum allowed size of the model. Depending on the
    ///                     input data, the size of the model might affect its performance.</p>
    ///                 <p> The value is an integer that ranges from <code>100000</code> to <code>2147483648</code>. The default value is <code>33554432</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sgd.maxPasses</code> - The number of times that the training process traverses the
    ///                     observations to build the <code>MLModel</code>. The value is an integer that
    ///                     ranges from <code>1</code> to <code>10000</code>. The default value is
    ///                         <code>10</code>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>sgd.shuffleType</code> - Whether Amazon ML shuffles the training data. Shuffling
    ///                     the data improves a model's ability to find the optimal solution for a variety
    ///                     of data types. The valid values are <code>auto</code> and <code>none</code>. The
    ///                     default value is <code>none</code>. We strongly recommend that you shuffle your data.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sgd.l1RegularizationAmount</code> - The coefficient regularization L1 norm. It controls
    ///                     overfitting the data by penalizing large coefficients. This tends to drive
    ///                     coefficients to zero, resulting in a sparse feature set. If you use this
    ///                     parameter, start by specifying a small value, such as <code>1.0E-08</code>.</p>
    ///                 <p>The value is a double that ranges from <code>0</code> to <code>MAX_DOUBLE</code>.
    ///                     The default is to not use L1 normalization. This parameter can't be used when
    ///                         <code>L2</code> is specified. Use this parameter sparingly.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sgd.l2RegularizationAmount</code> - The coefficient regularization L2 norm. It controls
    ///                     overfitting the data by penalizing large coefficients. This tends to drive
    ///                     coefficients to small, nonzero values. If you use this parameter, start by
    ///                     specifying a small value, such as <code>1.0E-08</code>.</p>
    ///                 <p>The value is a double that ranges from <code>0</code> to <code>MAX_DOUBLE</code>.
    ///                     The default is to not use L2 normalization. This parameter can't be used when
    ///                         <code>L1</code> is specified. Use this parameter sparingly.</p>
    ///             </li>
    ///          </ul>
    public let parameters: [String:String]?
    /// <p>The data recipe for creating the <code>MLModel</code>. You must specify either the recipe
    ///             or its URI. If you don't specify a recipe or its URI, Amazon ML creates a default.</p>
    public let recipe: String?
    /// <p>The Amazon Simple Storage Service (Amazon S3) location and file name that contains the <code>MLModel</code> recipe. You must specify either the recipe or its URI. If you don't specify a recipe or its URI, Amazon ML creates a default.</p>
    public let recipeUri: String?
    /// <p>The <code>DataSource</code> that points to the training data.</p>
    public let trainingDataSourceId: String?

    public init (
        mLModelId: String? = nil,
        mLModelName: String? = nil,
        mLModelType: MLModelType? = nil,
        parameters: [String:String]? = nil,
        recipe: String? = nil,
        recipeUri: String? = nil,
        trainingDataSourceId: String? = nil
    )
    {
        self.mLModelId = mLModelId
        self.mLModelName = mLModelName
        self.mLModelType = mLModelType
        self.parameters = parameters
        self.recipe = recipe
        self.recipeUri = recipeUri
        self.trainingDataSourceId = trainingDataSourceId
    }
}
