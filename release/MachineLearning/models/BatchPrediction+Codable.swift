// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchPrediction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case batchPredictionDataSourceId = "BatchPredictionDataSourceId"
        case batchPredictionId = "BatchPredictionId"
        case computeTime = "ComputeTime"
        case createdAt = "CreatedAt"
        case createdByIamUser = "CreatedByIamUser"
        case finishedAt = "FinishedAt"
        case inputDataLocationS3 = "InputDataLocationS3"
        case invalidRecordCount = "InvalidRecordCount"
        case lastUpdatedAt = "LastUpdatedAt"
        case mLModelId = "MLModelId"
        case message = "Message"
        case name = "Name"
        case outputUri = "OutputUri"
        case startedAt = "StartedAt"
        case status = "Status"
        case totalRecordCount = "TotalRecordCount"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchPredictionDataSourceId = batchPredictionDataSourceId {
            try encodeContainer.encode(batchPredictionDataSourceId, forKey: .batchPredictionDataSourceId)
        }
        if let batchPredictionId = batchPredictionId {
            try encodeContainer.encode(batchPredictionId, forKey: .batchPredictionId)
        }
        if let computeTime = computeTime {
            try encodeContainer.encode(computeTime, forKey: .computeTime)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let createdByIamUser = createdByIamUser {
            try encodeContainer.encode(createdByIamUser, forKey: .createdByIamUser)
        }
        if let finishedAt = finishedAt {
            try encodeContainer.encode(finishedAt.timeIntervalSince1970, forKey: .finishedAt)
        }
        if let inputDataLocationS3 = inputDataLocationS3 {
            try encodeContainer.encode(inputDataLocationS3, forKey: .inputDataLocationS3)
        }
        if let invalidRecordCount = invalidRecordCount {
            try encodeContainer.encode(invalidRecordCount, forKey: .invalidRecordCount)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let mLModelId = mLModelId {
            try encodeContainer.encode(mLModelId, forKey: .mLModelId)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outputUri = outputUri {
            try encodeContainer.encode(outputUri, forKey: .outputUri)
        }
        if let startedAt = startedAt {
            try encodeContainer.encode(startedAt.timeIntervalSince1970, forKey: .startedAt)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let totalRecordCount = totalRecordCount {
            try encodeContainer.encode(totalRecordCount, forKey: .totalRecordCount)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchPredictionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .batchPredictionId)
        batchPredictionId = batchPredictionIdDecoded
        let mLModelIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
        let batchPredictionDataSourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .batchPredictionDataSourceId)
        batchPredictionDataSourceId = batchPredictionDataSourceIdDecoded
        let inputDataLocationS3Decoded = try containerValues.decodeIfPresent(String.self, forKey: .inputDataLocationS3)
        inputDataLocationS3 = inputDataLocationS3Decoded
        let createdByIamUserDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdByIamUser)
        createdByIamUser = createdByIamUserDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EntityStatus.self, forKey: .status)
        status = statusDecoded
        let outputUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .outputUri)
        outputUri = outputUriDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let computeTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .computeTime)
        computeTime = computeTimeDecoded
        let finishedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .finishedAt)
        finishedAt = finishedAtDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let totalRecordCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .totalRecordCount)
        totalRecordCount = totalRecordCountDecoded
        let invalidRecordCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .invalidRecordCount)
        invalidRecordCount = invalidRecordCountDecoded
    }
}
