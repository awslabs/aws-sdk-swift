// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeBatchPredictionsInputBody: Equatable {
    public let filterVariable: BatchPredictionFilterVariable?
    public let eQ: String?
    public let gT: String?
    public let lT: String?
    public let gE: String?
    public let lE: String?
    public let nE: String?
    public let prefix: String?
    public let sortOrder: SortOrder?
    public let nextToken: String?
    public let limit: Int?
}

extension DescribeBatchPredictionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case eQ = "EQ"
        case filterVariable = "FilterVariable"
        case gE = "GE"
        case gT = "GT"
        case lE = "LE"
        case lT = "LT"
        case limit = "Limit"
        case nE = "NE"
        case nextToken = "NextToken"
        case prefix = "Prefix"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterVariableDecoded = try containerValues.decodeIfPresent(BatchPredictionFilterVariable.self, forKey: .filterVariable)
        filterVariable = filterVariableDecoded
        let eQDecoded = try containerValues.decodeIfPresent(String.self, forKey: .eQ)
        eQ = eQDecoded
        let gTDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gT)
        gT = gTDecoded
        let lTDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lT)
        lT = lTDecoded
        let gEDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gE)
        gE = gEDecoded
        let lEDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lE)
        lE = lEDecoded
        let nEDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nE)
        nE = nEDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .prefix)
        prefix = prefixDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .limit)
        limit = limitDecoded
    }
}
