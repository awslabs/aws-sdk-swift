// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DescribeEvaluationsInput: Equatable {
    /// <p>The equal to operator. The <code>Evaluation</code> results will have
    ///             <code>FilterVariable</code> values that exactly match the value specified with <code>EQ</code>.</p>
    public let eQ: String?
    /// <p>Use one of the following variable to filter a list of <code>Evaluation</code> objects:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CreatedAt</code> - Sets the search criteria to the <code>Evaluation</code> creation date.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Status</code> - Sets the search criteria to the <code>Evaluation</code> status.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Name</code> - Sets the search criteria to the contents of <code>Evaluation</code>
    ///                   <b> </b>
    ///                   <code>Name</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>IAMUser</code> - Sets the search criteria to the user account that invoked an <code>Evaluation</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>MLModelId</code> - Sets the search criteria to the <code>MLModel</code> that was evaluated.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DataSourceId</code> - Sets the search criteria to the <code>DataSource</code> used in <code>Evaluation</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DataUri</code> - Sets the search criteria to the data file(s) used in <code>Evaluation</code>. The URL can identify either a file or an Amazon Simple Storage Solution (Amazon S3) bucket or directory.</p>
    ///             </li>
    ///          </ul>
    public let filterVariable: EvaluationFilterVariable?
    /// <p>The greater than or equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that are greater than or equal to the value specified with <code>GE</code>.
    ///         </p>
    public let gE: String?
    /// <p>The greater than operator. The <code>Evaluation</code> results will
    ///             have <code>FilterVariable</code> values that are greater than the value specified with <code>GT</code>.</p>
    public let gT: String?
    /// <p>The less than or equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that are less than or equal to the value specified with <code>LE</code>.</p>
    public let lE: String?
    /// <p>The less than operator. The <code>Evaluation</code> results will
    ///             have <code>FilterVariable</code> values that are less than the value specified with <code>LT</code>.</p>
    public let lT: String?
    /// <p> The maximum number of <code>Evaluation</code> to include in the result.</p>
    public let limit: Int?
    /// <p>The not equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values not equal to the value specified with <code>NE</code>.</p>
    public let nE: String?
    /// <p>The ID of the page in the paginated results.</p>
    public let nextToken: String?
    /// <p>A string that is found at the beginning of a variable, such as <code>Name</code> or <code>Id</code>.</p>
    ///         <p>For example, an <code>Evaluation</code> could have the <code>Name</code>
    ///             <code>2014-09-09-HolidayGiftMailer</code>. To search for
    ///             this <code>Evaluation</code>, select <code>Name</code> for the <code>FilterVariable</code> and any of the following strings for the
    ///             <code>Prefix</code>:
    ///         </p>
    ///
    ///         <ul>
    ///             <li>
    ///                <p>2014-09</p>
    ///             </li>
    ///             <li>
    ///                <p>2014-09-09</p>
    ///             </li>
    ///             <li>
    ///                <p>2014-09-09-Holiday</p>
    ///             </li>
    ///          </ul>
    public let prefix: String?
    /// <p>A two-value parameter that determines the sequence of the resulting list of <code>Evaluation</code>.</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>asc</code> - Arranges the list in ascending order (A-Z, 0-9).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>dsc</code> - Arranges the list in descending order (Z-A, 9-0).</p>
    ///             </li>
    ///          </ul>
    ///         <p>Results are sorted by <code>FilterVariable</code>.</p>
    public let sortOrder: SortOrder?

    public init (
        eQ: String? = nil,
        filterVariable: EvaluationFilterVariable? = nil,
        gE: String? = nil,
        gT: String? = nil,
        lE: String? = nil,
        lT: String? = nil,
        limit: Int? = nil,
        nE: String? = nil,
        nextToken: String? = nil,
        prefix: String? = nil,
        sortOrder: SortOrder? = nil
    )
    {
        self.eQ = eQ
        self.filterVariable = filterVariable
        self.gE = gE
        self.gT = gT
        self.lE = lE
        self.lT = lT
        self.limit = limit
        self.nE = nE
        self.nextToken = nextToken
        self.prefix = prefix
        self.sortOrder = sortOrder
    }
}
