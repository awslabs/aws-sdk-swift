// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MLModel: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case algorithm = "Algorithm"
        case computeTime = "ComputeTime"
        case createdAt = "CreatedAt"
        case createdByIamUser = "CreatedByIamUser"
        case endpointInfo = "EndpointInfo"
        case finishedAt = "FinishedAt"
        case inputDataLocationS3 = "InputDataLocationS3"
        case lastUpdatedAt = "LastUpdatedAt"
        case mLModelId = "MLModelId"
        case mLModelType = "MLModelType"
        case message = "Message"
        case name = "Name"
        case scoreThreshold = "ScoreThreshold"
        case scoreThresholdLastUpdatedAt = "ScoreThresholdLastUpdatedAt"
        case sizeInBytes = "SizeInBytes"
        case startedAt = "StartedAt"
        case status = "Status"
        case trainingDataSourceId = "TrainingDataSourceId"
        case trainingParameters = "TrainingParameters"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithm = algorithm {
            try encodeContainer.encode(algorithm.rawValue, forKey: .algorithm)
        }
        if let computeTime = computeTime {
            try encodeContainer.encode(computeTime, forKey: .computeTime)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let createdByIamUser = createdByIamUser {
            try encodeContainer.encode(createdByIamUser, forKey: .createdByIamUser)
        }
        if let endpointInfo = endpointInfo {
            try encodeContainer.encode(endpointInfo, forKey: .endpointInfo)
        }
        if let finishedAt = finishedAt {
            try encodeContainer.encode(finishedAt.timeIntervalSince1970, forKey: .finishedAt)
        }
        if let inputDataLocationS3 = inputDataLocationS3 {
            try encodeContainer.encode(inputDataLocationS3, forKey: .inputDataLocationS3)
        }
        if let lastUpdatedAt = lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let mLModelId = mLModelId {
            try encodeContainer.encode(mLModelId, forKey: .mLModelId)
        }
        if let mLModelType = mLModelType {
            try encodeContainer.encode(mLModelType.rawValue, forKey: .mLModelType)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scoreThreshold = scoreThreshold {
            try encodeContainer.encode(scoreThreshold, forKey: .scoreThreshold)
        }
        if let scoreThresholdLastUpdatedAt = scoreThresholdLastUpdatedAt {
            try encodeContainer.encode(scoreThresholdLastUpdatedAt.timeIntervalSince1970, forKey: .scoreThresholdLastUpdatedAt)
        }
        if let sizeInBytes = sizeInBytes {
            try encodeContainer.encode(sizeInBytes, forKey: .sizeInBytes)
        }
        if let startedAt = startedAt {
            try encodeContainer.encode(startedAt.timeIntervalSince1970, forKey: .startedAt)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let trainingDataSourceId = trainingDataSourceId {
            try encodeContainer.encode(trainingDataSourceId, forKey: .trainingDataSourceId)
        }
        if let trainingParameters = trainingParameters {
            var trainingParametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .trainingParameters)
            for (dictKey0, trainingparameters0) in trainingParameters {
                try trainingParametersContainer.encode(trainingparameters0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mLModelIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
        let trainingDataSourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trainingDataSourceId)
        trainingDataSourceId = trainingDataSourceIdDecoded
        let createdByIamUserDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdByIamUser)
        createdByIamUser = createdByIamUserDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EntityStatus.self, forKey: .status)
        status = statusDecoded
        let sizeInBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .sizeInBytes)
        sizeInBytes = sizeInBytesDecoded
        let endpointInfoDecoded = try containerValues.decodeIfPresent(RealtimeEndpointInfo.self, forKey: .endpointInfo)
        endpointInfo = endpointInfoDecoded
        let trainingParametersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .trainingParameters)
        var trainingParametersDecoded0: [String:String]? = nil
        if let trainingParametersContainer = trainingParametersContainer {
            trainingParametersDecoded0 = [String:String]()
            for (key0, stringtype0) in trainingParametersContainer {
                trainingParametersDecoded0?[key0] = stringtype0
            }
        }
        trainingParameters = trainingParametersDecoded0
        let inputDataLocationS3Decoded = try containerValues.decodeIfPresent(String.self, forKey: .inputDataLocationS3)
        inputDataLocationS3 = inputDataLocationS3Decoded
        let algorithmDecoded = try containerValues.decodeIfPresent(Algorithm.self, forKey: .algorithm)
        algorithm = algorithmDecoded
        let mLModelTypeDecoded = try containerValues.decodeIfPresent(MLModelType.self, forKey: .mLModelType)
        mLModelType = mLModelTypeDecoded
        let scoreThresholdDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .scoreThreshold)
        scoreThreshold = scoreThresholdDecoded
        let scoreThresholdLastUpdatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .scoreThresholdLastUpdatedAt)
        scoreThresholdLastUpdatedAt = scoreThresholdLastUpdatedAtDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let computeTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .computeTime)
        computeTime = computeTimeDecoded
        let finishedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .finishedAt)
        finishedAt = finishedAtDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startedAt)
        startedAt = startedAtDecoded
    }
}
