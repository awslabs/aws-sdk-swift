// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Represents the output of a <code>GetMLModel</code> operation, and provides detailed information about a <code>MLModel</code>.</p>
public struct GetMLModelOutput: Equatable {
    /// <p>The approximate CPU time in milliseconds that Amazon Machine Learning spent processing the <code>MLModel</code>, normalized and scaled on computation resources. <code>ComputeTime</code> is only available if the <code>MLModel</code> is in the <code>COMPLETED</code> state.</p>
    public let computeTime: Int?
    /// <p>The time that the <code>MLModel</code> was created. The time is expressed in epoch time.</p>
    public let createdAt: Date?
    /// <p>The AWS user account from which the <code>MLModel</code> was created. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.</p>
    public let createdByIamUser: String?
    /// <p>The current endpoint of the <code>MLModel</code>
    ///          </p>
    public let endpointInfo: RealtimeEndpointInfo?
    /// <p>The epoch time when Amazon Machine Learning marked the <code>MLModel</code> as <code>COMPLETED</code> or <code>FAILED</code>. <code>FinishedAt</code> is only available when the <code>MLModel</code> is in the <code>COMPLETED</code> or <code>FAILED</code> state.</p>
    public let finishedAt: Date?
    /// <p>The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).</p>
    public let inputDataLocationS3: String?
    /// <p>The time of the most recent edit to the <code>MLModel</code>. The time is expressed in epoch time.</p>
    public let lastUpdatedAt: Date?
    /// <p>A link to the file that contains logs of the <code>CreateMLModel</code> operation.</p>
    public let logUri: String?
    /// <p>The MLModel ID,
    ///             which is same as the <code>MLModelId</code> in the request.</p>
    public let mLModelId: String?
    /// <p>Identifies the <code>MLModel</code> category. The following are the available types: </p>
    ///         <ul>
    ///             <li>
    ///                <p>REGRESSION -- Produces a numeric result. For example, "What price should a house be listed at?"</p>
    ///             </li>
    ///             <li>
    ///                <p>BINARY -- Produces one of two possible results. For example, "Is this an e-commerce website?"</p>
    ///             </li>
    ///             <li>
    ///                <p>MULTICLASS -- Produces one of several possible results. For example, "Is this a HIGH, LOW or MEDIUM risk trade?"</p>
    ///             </li>
    ///          </ul>
    public let mLModelType: MLModelType?
    /// <p>A description of the most recent details about accessing the <code>MLModel</code>.</p>
    public let message: String?
    /// <p>A user-supplied name or description of the <code>MLModel</code>.</p>
    public let name: String?
    /// <p>The recipe to use when training the <code>MLModel</code>. The <code>Recipe</code>
    ///             provides detailed information about the observation data to use during training, and
    ///             manipulations to perform on the observation data during training.</p>
    ///         <p>
    ///             <b>Note:</b> This parameter is provided as part of the verbose format.</p>
    public let recipe: String?
    /// <p>The schema used by all of the data files referenced by the <code>DataSource</code>.</p>
    ///         <p>
    ///             <b>Note:</b> This parameter is provided as part of the verbose format.</p>
    public let schema: String?
    /// <p>The scoring threshold is used in binary classification <code>MLModel</code>
    ///             models. It marks the boundary between a positive prediction and a
    ///             negative prediction.</p>
    ///         <p>Output values greater than or equal to the threshold receive a positive result from the MLModel, such as
    ///             <code>true</code>. Output values less than the threshold receive a negative response from the MLModel,
    ///             such as <code>false</code>.</p>
    public let scoreThreshold: Float?
    /// <p>The time of the most recent edit to the <code>ScoreThreshold</code>. The time is expressed in epoch time.</p>
    public let scoreThresholdLastUpdatedAt: Date?
    /// <p>Long integer type that is a 64-bit signed number.</p>
    public let sizeInBytes: Int?
    /// <p>The epoch time when Amazon Machine Learning marked the <code>MLModel</code> as <code>INPROGRESS</code>. <code>StartedAt</code> isn't available if the <code>MLModel</code> is in the <code>PENDING</code> state.</p>
    public let startedAt: Date?
    /// <p>The current status of the <code>MLModel</code>. This element can have one of the following values:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>PENDING</code> - Amazon Machine Learning (Amazon ML) submitted a request to describe a <code>MLModel</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>INPROGRESS</code> - The request is processing.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FAILED</code> - The request did not run to completion. The ML model isn't
    ///                 usable.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>COMPLETED</code> - The request completed successfully.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DELETED</code> - The <code>MLModel</code> is marked as deleted. It isn't
    ///                 usable.</p>
    ///             </li>
    ///          </ul>
    public let status: EntityStatus?
    /// <p>The ID of the training <code>DataSource</code>.</p>
    public let trainingDataSourceId: String?
    /// <p>A list of the training parameters in the <code>MLModel</code>. The list is implemented as
    ///             a map of key-value pairs.</p>
    ///         <p>The following is the current set of training parameters:</p>
    ///         <ul>
    ///             <li>
    ///                <p>
    ///                   <code>sgd.maxMLModelSizeInBytes</code> - The maximum allowed size of the model. Depending on the
    ///                     input data, the size of the model might affect its performance.</p>
    ///                 <p> The value is an integer that ranges from <code>100000</code> to <code>2147483648</code>. The default value is <code>33554432</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sgd.maxPasses</code> - The number of times that the training process traverses the
    ///                     observations to build the <code>MLModel</code>. The value is an integer that
    ///                     ranges from <code>1</code> to <code>10000</code>. The default value is
    ///                         <code>10</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sgd.shuffleType</code> - Whether Amazon ML shuffles the training data. Shuffling data improves a
    ///                     model's ability to find the optimal solution for a variety of data types. The
    ///                     valid values are <code>auto</code> and <code>none</code>. The default value is
    ///                         <code>none</code>. We strongly recommend that you shuffle your data.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sgd.l1RegularizationAmount</code> - The coefficient regularization L1 norm. It controls
    ///                     overfitting the data by penalizing large coefficients. This tends to drive
    ///                     coefficients to zero, resulting in a sparse feature set. If you use this
    ///                     parameter, start by specifying a small value, such as <code>1.0E-08</code>.</p>
    ///                 <p>The value is a double that ranges from <code>0</code> to <code>MAX_DOUBLE</code>.
    ///                     The default is to not use L1 normalization. This parameter can't be used when
    ///                         <code>L2</code> is specified. Use this parameter sparingly.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>sgd.l2RegularizationAmount</code> - The coefficient regularization L2 norm. It controls
    ///                     overfitting the data by penalizing large coefficients. This tends to drive
    ///                     coefficients to small, nonzero values. If you use this parameter, start by
    ///                     specifying a small value, such as <code>1.0E-08</code>.</p>
    ///                 <p>The value is a double that ranges from <code>0</code> to <code>MAX_DOUBLE</code>.
    ///                     The default is to not use L2 normalization. This parameter can't be used when
    ///                         <code>L1</code> is specified. Use this parameter sparingly.</p>
    ///             </li>
    ///          </ul>
    public let trainingParameters: [String:String]?

    public init (
        computeTime: Int? = nil,
        createdAt: Date? = nil,
        createdByIamUser: String? = nil,
        endpointInfo: RealtimeEndpointInfo? = nil,
        finishedAt: Date? = nil,
        inputDataLocationS3: String? = nil,
        lastUpdatedAt: Date? = nil,
        logUri: String? = nil,
        mLModelId: String? = nil,
        mLModelType: MLModelType? = nil,
        message: String? = nil,
        name: String? = nil,
        recipe: String? = nil,
        schema: String? = nil,
        scoreThreshold: Float? = nil,
        scoreThresholdLastUpdatedAt: Date? = nil,
        sizeInBytes: Int? = nil,
        startedAt: Date? = nil,
        status: EntityStatus? = nil,
        trainingDataSourceId: String? = nil,
        trainingParameters: [String:String]? = nil
    )
    {
        self.computeTime = computeTime
        self.createdAt = createdAt
        self.createdByIamUser = createdByIamUser
        self.endpointInfo = endpointInfo
        self.finishedAt = finishedAt
        self.inputDataLocationS3 = inputDataLocationS3
        self.lastUpdatedAt = lastUpdatedAt
        self.logUri = logUri
        self.mLModelId = mLModelId
        self.mLModelType = mLModelType
        self.message = message
        self.name = name
        self.recipe = recipe
        self.schema = schema
        self.scoreThreshold = scoreThreshold
        self.scoreThresholdLastUpdatedAt = scoreThresholdLastUpdatedAt
        self.sizeInBytes = sizeInBytes
        self.startedAt = startedAt
        self.status = status
        self.trainingDataSourceId = trainingDataSourceId
        self.trainingParameters = trainingParameters
    }
}
