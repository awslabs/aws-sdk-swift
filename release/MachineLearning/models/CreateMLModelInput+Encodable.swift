// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateMLModelInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case mLModelId = "MLModelId"
        case mLModelName = "MLModelName"
        case mLModelType = "MLModelType"
        case parameters = "Parameters"
        case recipe = "Recipe"
        case recipeUri = "RecipeUri"
        case trainingDataSourceId = "TrainingDataSourceId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mLModelId = mLModelId {
            try encodeContainer.encode(mLModelId, forKey: .mLModelId)
        }
        if let mLModelName = mLModelName {
            try encodeContainer.encode(mLModelName, forKey: .mLModelName)
        }
        if let mLModelType = mLModelType {
            try encodeContainer.encode(mLModelType.rawValue, forKey: .mLModelType)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .parameters)
            for (dictKey0, trainingparameters0) in parameters {
                try parametersContainer.encode(trainingparameters0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let recipe = recipe {
            try encodeContainer.encode(recipe, forKey: .recipe)
        }
        if let recipeUri = recipeUri {
            try encodeContainer.encode(recipeUri, forKey: .recipeUri)
        }
        if let trainingDataSourceId = trainingDataSourceId {
            try encodeContainer.encode(trainingDataSourceId, forKey: .trainingDataSourceId)
        }
    }
}
