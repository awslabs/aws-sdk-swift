// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RDSDataSpec: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dataRearrangement = "DataRearrangement"
        case dataSchema = "DataSchema"
        case dataSchemaUri = "DataSchemaUri"
        case databaseCredentials = "DatabaseCredentials"
        case databaseInformation = "DatabaseInformation"
        case resourceRole = "ResourceRole"
        case s3StagingLocation = "S3StagingLocation"
        case securityGroupIds = "SecurityGroupIds"
        case selectSqlQuery = "SelectSqlQuery"
        case serviceRole = "ServiceRole"
        case subnetId = "SubnetId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataRearrangement = dataRearrangement {
            try encodeContainer.encode(dataRearrangement, forKey: .dataRearrangement)
        }
        if let dataSchema = dataSchema {
            try encodeContainer.encode(dataSchema, forKey: .dataSchema)
        }
        if let dataSchemaUri = dataSchemaUri {
            try encodeContainer.encode(dataSchemaUri, forKey: .dataSchemaUri)
        }
        if let databaseCredentials = databaseCredentials {
            try encodeContainer.encode(databaseCredentials, forKey: .databaseCredentials)
        }
        if let databaseInformation = databaseInformation {
            try encodeContainer.encode(databaseInformation, forKey: .databaseInformation)
        }
        if let resourceRole = resourceRole {
            try encodeContainer.encode(resourceRole, forKey: .resourceRole)
        }
        if let s3StagingLocation = s3StagingLocation {
            try encodeContainer.encode(s3StagingLocation, forKey: .s3StagingLocation)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for edpsecuritygroupids0 in securityGroupIds {
                try securityGroupIdsContainer.encode(edpsecuritygroupids0)
            }
        }
        if let selectSqlQuery = selectSqlQuery {
            try encodeContainer.encode(selectSqlQuery, forKey: .selectSqlQuery)
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let subnetId = subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseInformationDecoded = try containerValues.decodeIfPresent(RDSDatabase.self, forKey: .databaseInformation)
        databaseInformation = databaseInformationDecoded
        let selectSqlQueryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .selectSqlQuery)
        selectSqlQuery = selectSqlQueryDecoded
        let databaseCredentialsDecoded = try containerValues.decodeIfPresent(RDSDatabaseCredentials.self, forKey: .databaseCredentials)
        databaseCredentials = databaseCredentialsDecoded
        let s3StagingLocationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3StagingLocation)
        s3StagingLocation = s3StagingLocationDecoded
        let dataRearrangementDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataRearrangement)
        dataRearrangement = dataRearrangementDecoded
        let dataSchemaDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataSchema)
        dataSchema = dataSchemaDecoded
        let dataSchemaUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataSchemaUri)
        dataSchemaUri = dataSchemaUriDecoded
        let resourceRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceRole)
        resourceRole = resourceRoleDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let subnetIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [String]()
            for string0 in securityGroupIdsContainer {
                securityGroupIdsDecoded0?.append(string0)
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
    }
}
