// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetMLModelOutputBody: Equatable {
    public let mLModelId: String?
    public let trainingDataSourceId: String?
    public let createdByIamUser: String?
    public let createdAt: Date?
    public let lastUpdatedAt: Date?
    public let name: String?
    public let status: EntityStatus?
    public let sizeInBytes: Int?
    public let endpointInfo: RealtimeEndpointInfo?
    public let trainingParameters: [String:String]?
    public let inputDataLocationS3: String?
    public let mLModelType: MLModelType?
    public let scoreThreshold: Float?
    public let scoreThresholdLastUpdatedAt: Date?
    public let logUri: String?
    public let message: String?
    public let computeTime: Int?
    public let finishedAt: Date?
    public let startedAt: Date?
    public let recipe: String?
    public let schema: String?
}

extension GetMLModelOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case computeTime = "ComputeTime"
        case createdAt = "CreatedAt"
        case createdByIamUser = "CreatedByIamUser"
        case endpointInfo = "EndpointInfo"
        case finishedAt = "FinishedAt"
        case inputDataLocationS3 = "InputDataLocationS3"
        case lastUpdatedAt = "LastUpdatedAt"
        case logUri = "LogUri"
        case mLModelId = "MLModelId"
        case mLModelType = "MLModelType"
        case message = "Message"
        case name = "Name"
        case recipe = "Recipe"
        case schema = "Schema"
        case scoreThreshold = "ScoreThreshold"
        case scoreThresholdLastUpdatedAt = "ScoreThresholdLastUpdatedAt"
        case sizeInBytes = "SizeInBytes"
        case startedAt = "StartedAt"
        case status = "Status"
        case trainingDataSourceId = "TrainingDataSourceId"
        case trainingParameters = "TrainingParameters"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mLModelIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
        let trainingDataSourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trainingDataSourceId)
        trainingDataSourceId = trainingDataSourceIdDecoded
        let createdByIamUserDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdByIamUser)
        createdByIamUser = createdByIamUserDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EntityStatus.self, forKey: .status)
        status = statusDecoded
        let sizeInBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .sizeInBytes)
        sizeInBytes = sizeInBytesDecoded
        let endpointInfoDecoded = try containerValues.decodeIfPresent(RealtimeEndpointInfo.self, forKey: .endpointInfo)
        endpointInfo = endpointInfoDecoded
        let trainingParametersContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .trainingParameters)
        var trainingParametersDecoded0: [String:String]? = nil
        if let trainingParametersContainer = trainingParametersContainer {
            trainingParametersDecoded0 = [String:String]()
            for (key0, stringtype0) in trainingParametersContainer {
                trainingParametersDecoded0?[key0] = stringtype0
            }
        }
        trainingParameters = trainingParametersDecoded0
        let inputDataLocationS3Decoded = try containerValues.decodeIfPresent(String.self, forKey: .inputDataLocationS3)
        inputDataLocationS3 = inputDataLocationS3Decoded
        let mLModelTypeDecoded = try containerValues.decodeIfPresent(MLModelType.self, forKey: .mLModelType)
        mLModelType = mLModelTypeDecoded
        let scoreThresholdDecoded = try containerValues.decodeIfPresent(Float.self, forKey: .scoreThreshold)
        scoreThreshold = scoreThresholdDecoded
        let scoreThresholdLastUpdatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .scoreThresholdLastUpdatedAt)
        scoreThresholdLastUpdatedAt = scoreThresholdLastUpdatedAtDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .logUri)
        logUri = logUriDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let computeTimeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .computeTime)
        computeTime = computeTimeDecoded
        let finishedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .finishedAt)
        finishedAt = finishedAtDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let recipeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recipe)
        recipe = recipeDecoded
        let schemaDecoded = try containerValues.decodeIfPresent(String.self, forKey: .schema)
        schema = schemaDecoded
    }
}
