// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PerformanceMetrics: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case properties = "Properties"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .properties)
            for (dictKey0, performancemetricsproperties0) in properties {
                try propertiesContainer.encode(performancemetricsproperties0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let propertiesContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .properties)
        var propertiesDecoded0: [String:String]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [String:String]()
            for (key0, performancemetricspropertyvalue0) in propertiesContainer {
                propertiesDecoded0?[key0] = performancemetricspropertyvalue0
            }
        }
        properties = propertiesDecoded0
    }
}
