// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>A list of the variables to use in searching or filtering <code>DataSource</code>.</p>
///         <ul>
///             <li>
///                <p>
///                   <code>CreatedAt</code> - Sets the search criteria to <code>DataSource</code> creation date.</p>
///             </li>
///             <li>
///                <p>
///                   <code>Status</code> - Sets the search criteria to <code>DataSource</code> status.</p>
///             </li>
///             <li>
///                <p>
///                   <code>Name</code> - Sets the search criteria to the contents of <code>DataSource</code>
///                   <code>Name</code>.</p>
///             </li>
///             <li>
///                <p>
///                   <code>DataUri</code> - Sets the search criteria to the URI of data files used to create the <code>DataSource</code>. The URI can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.</p>
///             </li>
///             <li>
///                <p>
///                   <code>IAMUser</code> - Sets the search criteria to the user account that invoked the <code>DataSource</code> creation.</p>
///             </li>
///          </ul>
///
///         <p>
///             <b>Note:</b>
///             The variable names should match the variable names in the <code>DataSource</code>.</p>
public enum DataSourceFilterVariable {
    case createdAt
    case dataUri
    case iamUser
    case lastUpdatedAt
    case name
    case status
    case sdkUnknown(String)
}

extension DataSourceFilterVariable : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DataSourceFilterVariable] {
        return [
            .createdAt,
            .dataUri,
            .iamUser,
            .lastUpdatedAt,
            .name,
            .status,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .createdAt: return "CreatedAt"
        case .dataUri: return "DataLocationS3"
        case .iamUser: return "IAMUser"
        case .lastUpdatedAt: return "LastUpdatedAt"
        case .name: return "Name"
        case .status: return "Status"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DataSourceFilterVariable(rawValue: rawValue) ?? DataSourceFilterVariable.sdkUnknown(rawValue)
    }
}
