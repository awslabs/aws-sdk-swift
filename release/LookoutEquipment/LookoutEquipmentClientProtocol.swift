// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Amazon Lookout for Equipment is a machine learning service that uses advanced analytics to identify
///          anomalies in machines from sensor data for use in predictive maintenance. </p>
public protocol LookoutEquipmentClientProtocol {
    /// <p>Creates a container for a collection of data being ingested for analysis. The dataset
    ///          contains the metadata describing where the data is and what the data actually looks like.
    ///          In other words, it contains the location of the data source, the data schema, and other
    ///          information. A dataset also contains any tags associated with the ingested data. </p>
    func createDataset(input: CreateDatasetInput, completion: @escaping (SdkResult<CreateDatasetOutputResponse, CreateDatasetOutputError>) -> Void)
    /// <p> Creates a scheduled inference. Scheduling an inference is setting up a continuous
    ///          real-time inference plan to analyze new measurement data. When setting up the schedule, you
    ///          provide an S3 bucket location for the input data, assign it a delimiter between separate
    ///          entries in the data, set an offset delay if desired, and set the frequency of inferencing.
    ///          You must also provide an S3 bucket location for the output data. </p>
    func createInferenceScheduler(input: CreateInferenceSchedulerInput, completion: @escaping (SdkResult<CreateInferenceSchedulerOutputResponse, CreateInferenceSchedulerOutputError>) -> Void)
    /// <p>Creates an ML model for data inference. </p>
    ///          <p>A machine-learning (ML) model is a mathematical model that finds patterns in your data.
    ///          In Amazon Lookout for Equipment, the model learns the patterns of normal behavior and detects abnormal
    ///          behavior that could be potential equipment failure (or maintenance events). The models are
    ///          made by analyzing normal data and abnormalities in machine behavior that have already
    ///          occurred.</p>
    ///          <p>Your model is trained using a portion of the data from your dataset and uses that data
    ///          to learn patterns of normal behavior and abnormal patterns that lead to equipment failure.
    ///          Another portion of the data is used to evaluate the model's accuracy. </p>
    func createModel(input: CreateModelInput, completion: @escaping (SdkResult<CreateModelOutputResponse, CreateModelOutputError>) -> Void)
    /// <p> Deletes a dataset and associated artifacts. The operation will check to see if any
    ///          inference scheduler or data ingestion job is currently using the dataset, and if there
    ///          isn't, the dataset, its metadata, and any associated data stored in S3 will be deleted.
    ///          This does not affect any models that used this dataset for training and evaluation, but
    ///          does prevent it from being used in the future. </p>
    func deleteDataset(input: DeleteDatasetInput, completion: @escaping (SdkResult<DeleteDatasetOutputResponse, DeleteDatasetOutputError>) -> Void)
    /// <p>Deletes an inference scheduler that has been set up. Already processed output results
    ///          are not affected. </p>
    func deleteInferenceScheduler(input: DeleteInferenceSchedulerInput, completion: @escaping (SdkResult<DeleteInferenceSchedulerOutputResponse, DeleteInferenceSchedulerOutputError>) -> Void)
    /// <p>Deletes an ML model currently available for Amazon Lookout for Equipment. This will prevent it from
    ///          being used with an inference scheduler, even one that is already set up. </p>
    func deleteModel(input: DeleteModelInput, completion: @escaping (SdkResult<DeleteModelOutputResponse, DeleteModelOutputError>) -> Void)
    /// <p>Provides information on a specific data ingestion job such as creation time, dataset
    ///          ARN, status, and so on. </p>
    func describeDataIngestionJob(input: DescribeDataIngestionJobInput, completion: @escaping (SdkResult<DescribeDataIngestionJobOutputResponse, DescribeDataIngestionJobOutputError>) -> Void)
    /// <p>Provides information on a specified dataset such as the schema location, status, and so
    ///          on.</p>
    func describeDataset(input: DescribeDatasetInput, completion: @escaping (SdkResult<DescribeDatasetOutputResponse, DescribeDatasetOutputError>) -> Void)
    /// <p> Specifies information about the inference scheduler being used, including name, model,
    ///          status, and associated metadata </p>
    func describeInferenceScheduler(input: DescribeInferenceSchedulerInput, completion: @escaping (SdkResult<DescribeInferenceSchedulerOutputResponse, DescribeInferenceSchedulerOutputError>) -> Void)
    /// <p>Provides overall information about a specific ML model, including model name and ARN,
    ///          dataset, training and evaluation information, status, and so on. </p>
    func describeModel(input: DescribeModelInput, completion: @escaping (SdkResult<DescribeModelOutputResponse, DescribeModelOutputError>) -> Void)
    /// <p>Provides a list of all data ingestion jobs, including dataset name and ARN, S3 location
    ///          of the input data, status, and so on. </p>
    func listDataIngestionJobs(input: ListDataIngestionJobsInput, completion: @escaping (SdkResult<ListDataIngestionJobsOutputResponse, ListDataIngestionJobsOutputError>) -> Void)
    /// <p>Lists all datasets currently available in your account, filtering on the dataset name.
    ///       </p>
    func listDatasets(input: ListDatasetsInput, completion: @escaping (SdkResult<ListDatasetsOutputResponse, ListDatasetsOutputError>) -> Void)
    /// <p> Lists all inference executions that have been performed by the specified inference
    ///          scheduler. </p>
    func listInferenceExecutions(input: ListInferenceExecutionsInput, completion: @escaping (SdkResult<ListInferenceExecutionsOutputResponse, ListInferenceExecutionsOutputError>) -> Void)
    /// <p>Retrieves a list of all inference schedulers currently available for your account.
    ///       </p>
    func listInferenceSchedulers(input: ListInferenceSchedulersInput, completion: @escaping (SdkResult<ListInferenceSchedulersOutputResponse, ListInferenceSchedulersOutputError>) -> Void)
    /// <p>Generates a list of all models in the account, including model name and ARN, dataset,
    ///          and status. </p>
    func listModels(input: ListModelsInput, completion: @escaping (SdkResult<ListModelsOutputResponse, ListModelsOutputError>) -> Void)
    /// <p>Lists all the tags for a specified resource, including key and value. </p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p>Starts a data ingestion job. Amazon Lookout for Equipment returns the job status. </p>
    func startDataIngestionJob(input: StartDataIngestionJobInput, completion: @escaping (SdkResult<StartDataIngestionJobOutputResponse, StartDataIngestionJobOutputError>) -> Void)
    /// <p>Starts an inference scheduler. </p>
    func startInferenceScheduler(input: StartInferenceSchedulerInput, completion: @escaping (SdkResult<StartInferenceSchedulerOutputResponse, StartInferenceSchedulerOutputError>) -> Void)
    /// <p>Stops an inference scheduler. </p>
    func stopInferenceScheduler(input: StopInferenceSchedulerInput, completion: @escaping (SdkResult<StopInferenceSchedulerOutputResponse, StopInferenceSchedulerOutputError>) -> Void)
    /// <p>Associates a given tag to a resource in your account. A tag is a key-value pair which
    ///          can be added to an Amazon Lookout for Equipment resource as metadata. Tags can be used for organizing your
    ///          resources as well as helping you to search and filter by tag. Multiple tags can be added to
    ///          a resource, either when you create it, or later. Up to 50 tags can be associated with each
    ///          resource. </p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p>Removes a specific tag from a given resource. The tag is specified by its key. </p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// <p>Updates an inference scheduler. </p>
    func updateInferenceScheduler(input: UpdateInferenceSchedulerInput, completion: @escaping (SdkResult<UpdateInferenceSchedulerOutputResponse, UpdateInferenceSchedulerOutputError>) -> Void)
}
