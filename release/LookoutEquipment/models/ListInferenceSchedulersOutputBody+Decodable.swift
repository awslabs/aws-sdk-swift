// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListInferenceSchedulersOutputBody: Equatable {
    public let nextToken: String?
    public let inferenceSchedulerSummaries: [InferenceSchedulerSummary]?
}

extension ListInferenceSchedulersOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case inferenceSchedulerSummaries = "InferenceSchedulerSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let inferenceSchedulerSummariesContainer = try containerValues.decodeIfPresent([InferenceSchedulerSummary].self, forKey: .inferenceSchedulerSummaries)
        var inferenceSchedulerSummariesDecoded0:[InferenceSchedulerSummary]? = nil
        if let inferenceSchedulerSummariesContainer = inferenceSchedulerSummariesContainer {
            inferenceSchedulerSummariesDecoded0 = [InferenceSchedulerSummary]()
            for structure0 in inferenceSchedulerSummariesContainer {
                inferenceSchedulerSummariesDecoded0?.append(structure0)
            }
        }
        inferenceSchedulerSummaries = inferenceSchedulerSummariesDecoded0
    }
}
