// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateModelInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientToken = "ClientToken"
        case dataPreProcessingConfiguration = "DataPreProcessingConfiguration"
        case datasetName = "DatasetName"
        case datasetSchema = "DatasetSchema"
        case evaluationDataEndTime = "EvaluationDataEndTime"
        case evaluationDataStartTime = "EvaluationDataStartTime"
        case labelsInputConfiguration = "LabelsInputConfiguration"
        case modelName = "ModelName"
        case roleArn = "RoleArn"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case tags = "Tags"
        case trainingDataEndTime = "TrainingDataEndTime"
        case trainingDataStartTime = "TrainingDataStartTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let dataPreProcessingConfiguration = dataPreProcessingConfiguration {
            try encodeContainer.encode(dataPreProcessingConfiguration, forKey: .dataPreProcessingConfiguration)
        }
        if let datasetName = datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let datasetSchema = datasetSchema {
            try encodeContainer.encode(datasetSchema, forKey: .datasetSchema)
        }
        if let evaluationDataEndTime = evaluationDataEndTime {
            try encodeContainer.encode(evaluationDataEndTime.timeIntervalSince1970, forKey: .evaluationDataEndTime)
        }
        if let evaluationDataStartTime = evaluationDataStartTime {
            try encodeContainer.encode(evaluationDataStartTime.timeIntervalSince1970, forKey: .evaluationDataStartTime)
        }
        if let labelsInputConfiguration = labelsInputConfiguration {
            try encodeContainer.encode(labelsInputConfiguration, forKey: .labelsInputConfiguration)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let serverSideKmsKeyId = serverSideKmsKeyId {
            try encodeContainer.encode(serverSideKmsKeyId, forKey: .serverSideKmsKeyId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let trainingDataEndTime = trainingDataEndTime {
            try encodeContainer.encode(trainingDataEndTime.timeIntervalSince1970, forKey: .trainingDataEndTime)
        }
        if let trainingDataStartTime = trainingDataStartTime {
            try encodeContainer.encode(trainingDataStartTime.timeIntervalSince1970, forKey: .trainingDataStartTime)
        }
    }
}
