// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InferenceInputConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case inferenceInputNameConfiguration = "InferenceInputNameConfiguration"
        case inputTimeZoneOffset = "InputTimeZoneOffset"
        case s3InputConfiguration = "S3InputConfiguration"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inferenceInputNameConfiguration = inferenceInputNameConfiguration {
            try encodeContainer.encode(inferenceInputNameConfiguration, forKey: .inferenceInputNameConfiguration)
        }
        if let inputTimeZoneOffset = inputTimeZoneOffset {
            try encodeContainer.encode(inputTimeZoneOffset, forKey: .inputTimeZoneOffset)
        }
        if let s3InputConfiguration = s3InputConfiguration {
            try encodeContainer.encode(s3InputConfiguration, forKey: .s3InputConfiguration)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3InputConfigurationDecoded = try containerValues.decodeIfPresent(InferenceS3InputConfiguration.self, forKey: .s3InputConfiguration)
        s3InputConfiguration = s3InputConfigurationDecoded
        let inputTimeZoneOffsetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inputTimeZoneOffset)
        inputTimeZoneOffset = inputTimeZoneOffsetDecoded
        let inferenceInputNameConfigurationDecoded = try containerValues.decodeIfPresent(InferenceInputNameConfiguration.self, forKey: .inferenceInputNameConfiguration)
        inferenceInputNameConfiguration = inferenceInputNameConfigurationDecoded
    }
}
