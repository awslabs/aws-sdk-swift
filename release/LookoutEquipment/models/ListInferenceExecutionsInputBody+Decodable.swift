// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListInferenceExecutionsInputBody: Equatable {
    public let nextToken: String?
    public let maxResults: Int?
    public let inferenceSchedulerName: String?
    public let dataStartTimeAfter: Date?
    public let dataEndTimeBefore: Date?
    public let status: InferenceExecutionStatus?
}

extension ListInferenceExecutionsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case dataEndTimeBefore = "DataEndTimeBefore"
        case dataStartTimeAfter = "DataStartTimeAfter"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let dataStartTimeAfterDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .dataStartTimeAfter)
        dataStartTimeAfter = dataStartTimeAfterDecoded
        let dataEndTimeBeforeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .dataEndTimeBefore)
        dataEndTimeBefore = dataEndTimeBeforeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(InferenceExecutionStatus.self, forKey: .status)
        status = statusDecoded
    }
}
