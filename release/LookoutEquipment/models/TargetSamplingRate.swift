// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum TargetSamplingRate {
    case pt10m
    case pt10s
    case pt15m
    case pt15s
    case pt1h
    case pt1m
    case pt1s
    case pt30m
    case pt30s
    case pt5m
    case pt5s
    case sdkUnknown(String)
}

extension TargetSamplingRate : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [TargetSamplingRate] {
        return [
            .pt10m,
            .pt10s,
            .pt15m,
            .pt15s,
            .pt1h,
            .pt1m,
            .pt1s,
            .pt30m,
            .pt30s,
            .pt5m,
            .pt5s,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .pt10m: return "PT10M"
        case .pt10s: return "PT10S"
        case .pt15m: return "PT15M"
        case .pt15s: return "PT15S"
        case .pt1h: return "PT1H"
        case .pt1m: return "PT1M"
        case .pt1s: return "PT1S"
        case .pt30m: return "PT30M"
        case .pt30s: return "PT30S"
        case .pt5m: return "PT5M"
        case .pt5s: return "PT5S"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = TargetSamplingRate(rawValue: rawValue) ?? TargetSamplingRate.sdkUnknown(rawValue)
    }
}
