// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Contains information about the specific inference scheduler, including data delay
///          offset, model name and ARN, status, and so on. </p>
public struct InferenceSchedulerSummary: Equatable {
    /// <p>> A period of time (in minutes) by which inference on the data is delayed after the data
    ///          starts. For instance, if an offset delay time of five minutes was selected, inference will
    ///          not begin on the data until the first data measurement after the five minute mark. For example, if
    ///          five minutes is selected, the inference scheduler will wake up at the configured frequency with the
    ///          additional five minute delay time to check the customer S3 bucket. The customer can upload data at
    ///          the same frequency and they don't need to stop and restart the scheduler when uploading new data.
    ///       </p>
    public let dataDelayOffsetInMinutes: Int?
    /// <p>How often data is uploaded to the source S3 bucket for the input data. This value is the
    ///          length of time between data uploads. For instance, if you select 5 minutes, Amazon Lookout for Equipment
    ///          will upload the real-time data to the source bucket once every 5 minutes. This frequency also
    ///          determines how often Amazon Lookout for Equipment starts a scheduled inference on your data. In this
    ///          example, it starts once every 5 minutes. </p>
    public let dataUploadFrequency: DataUploadFrequency?
    /// <p> The Amazon Resource Name (ARN) of the inference scheduler. </p>
    public let inferenceSchedulerArn: String?
    /// <p>The name of the inference scheduler. </p>
    public let inferenceSchedulerName: String?
    /// <p> The Amazon Resource Name (ARN) of the ML model used by the inference scheduler. </p>
    public let modelArn: String?
    /// <p>The name of the ML model used for the inference scheduler. </p>
    public let modelName: String?
    /// <p>Indicates the status of the inference scheduler. </p>
    public let status: InferenceSchedulerStatus?

    public init (
        dataDelayOffsetInMinutes: Int? = nil,
        dataUploadFrequency: DataUploadFrequency? = nil,
        inferenceSchedulerArn: String? = nil,
        inferenceSchedulerName: String? = nil,
        modelArn: String? = nil,
        modelName: String? = nil,
        status: InferenceSchedulerStatus? = nil
    )
    {
        self.dataDelayOffsetInMinutes = dataDelayOffsetInMinutes
        self.dataUploadFrequency = dataUploadFrequency
        self.inferenceSchedulerArn = inferenceSchedulerArn
        self.inferenceSchedulerName = inferenceSchedulerName
        self.modelArn = modelArn
        self.modelName = modelName
        self.status = status
    }
}
