// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDataIngestionJobsOutputBody: Equatable {
    public let nextToken: String?
    public let dataIngestionJobSummaries: [DataIngestionJobSummary]?
}

extension ListDataIngestionJobsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case dataIngestionJobSummaries = "DataIngestionJobSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let dataIngestionJobSummariesContainer = try containerValues.decodeIfPresent([DataIngestionJobSummary].self, forKey: .dataIngestionJobSummaries)
        var dataIngestionJobSummariesDecoded0:[DataIngestionJobSummary]? = nil
        if let dataIngestionJobSummariesContainer = dataIngestionJobSummariesContainer {
            dataIngestionJobSummariesDecoded0 = [DataIngestionJobSummary]()
            for structure0 in dataIngestionJobSummariesContainer {
                dataIngestionJobSummariesDecoded0?.append(structure0)
            }
        }
        dataIngestionJobSummaries = dataIngestionJobSummariesDecoded0
    }
}
