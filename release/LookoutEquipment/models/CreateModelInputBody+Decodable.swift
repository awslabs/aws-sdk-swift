// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateModelInputBody: Equatable {
    public let modelName: String?
    public let datasetName: String?
    public let datasetSchema: DatasetSchema?
    public let labelsInputConfiguration: LabelsInputConfiguration?
    public let clientToken: String?
    public let trainingDataStartTime: Date?
    public let trainingDataEndTime: Date?
    public let evaluationDataStartTime: Date?
    public let evaluationDataEndTime: Date?
    public let roleArn: String?
    public let dataPreProcessingConfiguration: DataPreProcessingConfiguration?
    public let serverSideKmsKeyId: String?
    public let tags: [Tag]?
}

extension CreateModelInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientToken = "ClientToken"
        case dataPreProcessingConfiguration = "DataPreProcessingConfiguration"
        case datasetName = "DatasetName"
        case datasetSchema = "DatasetSchema"
        case evaluationDataEndTime = "EvaluationDataEndTime"
        case evaluationDataStartTime = "EvaluationDataStartTime"
        case labelsInputConfiguration = "LabelsInputConfiguration"
        case modelName = "ModelName"
        case roleArn = "RoleArn"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case tags = "Tags"
        case trainingDataEndTime = "TrainingDataEndTime"
        case trainingDataStartTime = "TrainingDataStartTime"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let datasetNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetSchemaDecoded = try containerValues.decodeIfPresent(DatasetSchema.self, forKey: .datasetSchema)
        datasetSchema = datasetSchemaDecoded
        let labelsInputConfigurationDecoded = try containerValues.decodeIfPresent(LabelsInputConfiguration.self, forKey: .labelsInputConfiguration)
        labelsInputConfiguration = labelsInputConfigurationDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let trainingDataStartTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .trainingDataStartTime)
        trainingDataStartTime = trainingDataStartTimeDecoded
        let trainingDataEndTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .trainingDataEndTime)
        trainingDataEndTime = trainingDataEndTimeDecoded
        let evaluationDataStartTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .evaluationDataStartTime)
        evaluationDataStartTime = evaluationDataStartTimeDecoded
        let evaluationDataEndTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .evaluationDataEndTime)
        evaluationDataEndTime = evaluationDataEndTimeDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let dataPreProcessingConfigurationDecoded = try containerValues.decodeIfPresent(DataPreProcessingConfiguration.self, forKey: .dataPreProcessingConfiguration)
        dataPreProcessingConfiguration = dataPreProcessingConfigurationDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
