// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct UpdateInferenceSchedulerInput: Equatable {
    /// <p>> A period of time (in minutes) by which inference on the data is delayed after the data
    ///          starts. For instance, if you select an offset delay time of five minutes, inference will
    ///          not begin on the data until the first data measurement after the five minute mark. For example, if
    ///          five minutes is selected, the inference scheduler will wake up at the configured frequency with the
    ///          additional five minute delay time to check the customer S3 bucket. The customer can upload data at
    ///          the same frequency and they don't need to stop and restart the scheduler when uploading new data.</p>
    public let dataDelayOffsetInMinutes: Int?
    /// <p> Specifies information for the input data for the inference scheduler, including
    ///          delimiter, format, and dataset location. </p>
    public let dataInputConfiguration: InferenceInputConfiguration?
    /// <p> Specifies information for the output results from the inference scheduler, including the output S3 location. </p>
    public let dataOutputConfiguration: InferenceOutputConfiguration?
    /// <p>How often data is uploaded to the source S3 bucket for the input data. The value chosen
    ///          is the length of time between data uploads. For instance, if you select 5 minutes, Amazon
    ///          Lookout for Equipment will upload the real-time data to the source bucket once every 5 minutes. This frequency
    ///          also determines how often Amazon Lookout for Equipment starts a scheduled inference on your data. In this
    ///          example, it starts once every 5 minutes. </p>
    public let dataUploadFrequency: DataUploadFrequency?
    /// <p>The name of the inference scheduler to be updated. </p>
    public let inferenceSchedulerName: String?
    /// <p> The Amazon Resource Name (ARN) of a role with permission to access the data source for
    ///          the inference scheduler. </p>
    public let roleArn: String?

    public init (
        dataDelayOffsetInMinutes: Int? = nil,
        dataInputConfiguration: InferenceInputConfiguration? = nil,
        dataOutputConfiguration: InferenceOutputConfiguration? = nil,
        dataUploadFrequency: DataUploadFrequency? = nil,
        inferenceSchedulerName: String? = nil,
        roleArn: String? = nil
    )
    {
        self.dataDelayOffsetInMinutes = dataDelayOffsetInMinutes
        self.dataInputConfiguration = dataInputConfiguration
        self.dataOutputConfiguration = dataOutputConfiguration
        self.dataUploadFrequency = dataUploadFrequency
        self.inferenceSchedulerName = inferenceSchedulerName
        self.roleArn = roleArn
    }
}
