// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InferenceExecutionSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case customerResultObject = "CustomerResultObject"
        case dataEndTime = "DataEndTime"
        case dataInputConfiguration = "DataInputConfiguration"
        case dataOutputConfiguration = "DataOutputConfiguration"
        case dataStartTime = "DataStartTime"
        case failedReason = "FailedReason"
        case inferenceSchedulerArn = "InferenceSchedulerArn"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case scheduledStartTime = "ScheduledStartTime"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customerResultObject = customerResultObject {
            try encodeContainer.encode(customerResultObject, forKey: .customerResultObject)
        }
        if let dataEndTime = dataEndTime {
            try encodeContainer.encode(dataEndTime.timeIntervalSince1970, forKey: .dataEndTime)
        }
        if let dataInputConfiguration = dataInputConfiguration {
            try encodeContainer.encode(dataInputConfiguration, forKey: .dataInputConfiguration)
        }
        if let dataOutputConfiguration = dataOutputConfiguration {
            try encodeContainer.encode(dataOutputConfiguration, forKey: .dataOutputConfiguration)
        }
        if let dataStartTime = dataStartTime {
            try encodeContainer.encode(dataStartTime.timeIntervalSince1970, forKey: .dataStartTime)
        }
        if let failedReason = failedReason {
            try encodeContainer.encode(failedReason, forKey: .failedReason)
        }
        if let inferenceSchedulerArn = inferenceSchedulerArn {
            try encodeContainer.encode(inferenceSchedulerArn, forKey: .inferenceSchedulerArn)
        }
        if let inferenceSchedulerName = inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
        if let modelArn = modelArn {
            try encodeContainer.encode(modelArn, forKey: .modelArn)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let scheduledStartTime = scheduledStartTime {
            try encodeContainer.encode(scheduledStartTime.timeIntervalSince1970, forKey: .scheduledStartTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let inferenceSchedulerArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inferenceSchedulerArn)
        inferenceSchedulerArn = inferenceSchedulerArnDecoded
        let scheduledStartTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .scheduledStartTime)
        scheduledStartTime = scheduledStartTimeDecoded
        let dataStartTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .dataStartTime)
        dataStartTime = dataStartTimeDecoded
        let dataEndTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .dataEndTime)
        dataEndTime = dataEndTimeDecoded
        let dataInputConfigurationDecoded = try containerValues.decodeIfPresent(InferenceInputConfiguration.self, forKey: .dataInputConfiguration)
        dataInputConfiguration = dataInputConfigurationDecoded
        let dataOutputConfigurationDecoded = try containerValues.decodeIfPresent(InferenceOutputConfiguration.self, forKey: .dataOutputConfiguration)
        dataOutputConfiguration = dataOutputConfigurationDecoded
        let customerResultObjectDecoded = try containerValues.decodeIfPresent(S3Object.self, forKey: .customerResultObject)
        customerResultObject = customerResultObjectDecoded
        let statusDecoded = try containerValues.decodeIfPresent(InferenceExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let failedReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .failedReason)
        failedReason = failedReasonDecoded
    }
}
