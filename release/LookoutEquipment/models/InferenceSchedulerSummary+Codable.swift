// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InferenceSchedulerSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dataDelayOffsetInMinutes = "DataDelayOffsetInMinutes"
        case dataUploadFrequency = "DataUploadFrequency"
        case inferenceSchedulerArn = "InferenceSchedulerArn"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataDelayOffsetInMinutes = dataDelayOffsetInMinutes {
            try encodeContainer.encode(dataDelayOffsetInMinutes, forKey: .dataDelayOffsetInMinutes)
        }
        if let dataUploadFrequency = dataUploadFrequency {
            try encodeContainer.encode(dataUploadFrequency.rawValue, forKey: .dataUploadFrequency)
        }
        if let inferenceSchedulerArn = inferenceSchedulerArn {
            try encodeContainer.encode(inferenceSchedulerArn, forKey: .inferenceSchedulerArn)
        }
        if let inferenceSchedulerName = inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
        if let modelArn = modelArn {
            try encodeContainer.encode(modelArn, forKey: .modelArn)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let inferenceSchedulerArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inferenceSchedulerArn)
        inferenceSchedulerArn = inferenceSchedulerArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(InferenceSchedulerStatus.self, forKey: .status)
        status = statusDecoded
        let dataDelayOffsetInMinutesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .dataDelayOffsetInMinutes)
        dataDelayOffsetInMinutes = dataDelayOffsetInMinutesDecoded
        let dataUploadFrequencyDecoded = try containerValues.decodeIfPresent(DataUploadFrequency.self, forKey: .dataUploadFrequency)
        dataUploadFrequency = dataUploadFrequencyDecoded
    }
}
