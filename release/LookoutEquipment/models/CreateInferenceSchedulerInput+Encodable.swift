// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateInferenceSchedulerInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientToken = "ClientToken"
        case dataDelayOffsetInMinutes = "DataDelayOffsetInMinutes"
        case dataInputConfiguration = "DataInputConfiguration"
        case dataOutputConfiguration = "DataOutputConfiguration"
        case dataUploadFrequency = "DataUploadFrequency"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case modelName = "ModelName"
        case roleArn = "RoleArn"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let dataDelayOffsetInMinutes = dataDelayOffsetInMinutes {
            try encodeContainer.encode(dataDelayOffsetInMinutes, forKey: .dataDelayOffsetInMinutes)
        }
        if let dataInputConfiguration = dataInputConfiguration {
            try encodeContainer.encode(dataInputConfiguration, forKey: .dataInputConfiguration)
        }
        if let dataOutputConfiguration = dataOutputConfiguration {
            try encodeContainer.encode(dataOutputConfiguration, forKey: .dataOutputConfiguration)
        }
        if let dataUploadFrequency = dataUploadFrequency {
            try encodeContainer.encode(dataUploadFrequency.rawValue, forKey: .dataUploadFrequency)
        }
        if let inferenceSchedulerName = inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let serverSideKmsKeyId = serverSideKmsKeyId {
            try encodeContainer.encode(serverSideKmsKeyId, forKey: .serverSideKmsKeyId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
