// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListInferenceExecutionsOutputBody: Equatable {
    public let nextToken: String?
    public let inferenceExecutionSummaries: [InferenceExecutionSummary]?
}

extension ListInferenceExecutionsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case inferenceExecutionSummaries = "InferenceExecutionSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let inferenceExecutionSummariesContainer = try containerValues.decodeIfPresent([InferenceExecutionSummary].self, forKey: .inferenceExecutionSummaries)
        var inferenceExecutionSummariesDecoded0:[InferenceExecutionSummary]? = nil
        if let inferenceExecutionSummariesContainer = inferenceExecutionSummariesContainer {
            inferenceExecutionSummariesDecoded0 = [InferenceExecutionSummary]()
            for structure0 in inferenceExecutionSummariesContainer {
                inferenceExecutionSummariesDecoded0?.append(structure0)
            }
        }
        inferenceExecutionSummaries = inferenceExecutionSummariesDecoded0
    }
}
