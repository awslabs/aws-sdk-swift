// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetEBSVolumeRecommendationsInputBody: Equatable {
    public let volumeArns: [String]?
    public let nextToken: String?
    public let maxResults: Int?
    public let filters: [EBSFilter]?
    public let accountIds: [String]?
}

extension GetEBSVolumeRecommendationsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accountIds
        case filters
        case maxResults
        case nextToken
        case volumeArns
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .volumeArns)
        var volumeArnsDecoded0:[String]? = nil
        if let volumeArnsContainer = volumeArnsContainer {
            volumeArnsDecoded0 = [String]()
            for string0 in volumeArnsContainer {
                volumeArnsDecoded0?.append(string0)
            }
        }
        volumeArns = volumeArnsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let filtersContainer = try containerValues.decodeIfPresent([EBSFilter].self, forKey: .filters)
        var filtersDecoded0:[EBSFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [EBSFilter]()
            for structure0 in filtersContainer {
                filtersDecoded0?.append(structure0)
            }
        }
        filters = filtersDecoded0
        let accountIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .accountIds)
        var accountIdsDecoded0:[String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [String]()
            for string0 in accountIdsContainer {
                accountIdsDecoded0?.append(string0)
            }
        }
        accountIds = accountIdsDecoded0
    }
}
