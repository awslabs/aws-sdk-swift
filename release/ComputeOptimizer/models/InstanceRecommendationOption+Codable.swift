// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstanceRecommendationOption: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instanceType
        case performanceRisk
        case platformDifferences
        case projectedUtilizationMetrics
        case rank
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if performanceRisk != 0.0 {
            try encodeContainer.encode(performanceRisk, forKey: .performanceRisk)
        }
        if let platformDifferences = platformDifferences {
            var platformDifferencesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .platformDifferences)
            for platformdifferences0 in platformDifferences {
                try platformDifferencesContainer.encode(platformdifferences0.rawValue)
            }
        }
        if let projectedUtilizationMetrics = projectedUtilizationMetrics {
            var projectedUtilizationMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .projectedUtilizationMetrics)
            for projectedutilizationmetrics0 in projectedUtilizationMetrics {
                try projectedUtilizationMetricsContainer.encode(projectedutilizationmetrics0)
            }
        }
        if rank != 0 {
            try encodeContainer.encode(rank, forKey: .rank)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let projectedUtilizationMetricsContainer = try containerValues.decodeIfPresent([UtilizationMetric].self, forKey: .projectedUtilizationMetrics)
        var projectedUtilizationMetricsDecoded0:[UtilizationMetric]? = nil
        if let projectedUtilizationMetricsContainer = projectedUtilizationMetricsContainer {
            projectedUtilizationMetricsDecoded0 = [UtilizationMetric]()
            for structure0 in projectedUtilizationMetricsContainer {
                projectedUtilizationMetricsDecoded0?.append(structure0)
            }
        }
        projectedUtilizationMetrics = projectedUtilizationMetricsDecoded0
        let platformDifferencesContainer = try containerValues.decodeIfPresent([PlatformDifference].self, forKey: .platformDifferences)
        var platformDifferencesDecoded0:[PlatformDifference]? = nil
        if let platformDifferencesContainer = platformDifferencesContainer {
            platformDifferencesDecoded0 = [PlatformDifference]()
            for string0 in platformDifferencesContainer {
                platformDifferencesDecoded0?.append(string0)
            }
        }
        platformDifferences = platformDifferencesDecoded0
        let performanceRiskDecoded = try containerValues.decode(Double.self, forKey: .performanceRisk)
        performanceRisk = performanceRiskDecoded
        let rankDecoded = try containerValues.decode(Int.self, forKey: .rank)
        rank = rankDecoded
    }
}
