// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum ExportableLambdaFunctionField {
    case accountId
    case currentConfigurationMemorySize
    case currentConfigurationTimeout
    case currentCostAverage
    case currentCostTotal
    case finding
    case findingReasonCodes
    case functionArn
    case functionVersion
    case lastRefreshTimestamp
    case lookbackPeriodInDays
    case numberOfInvocations
    case recommendationOptionsConfigurationMemorySize
    case recommendationOptionsCostHigh
    case recommendationOptionsCostLow
    case recommendationOptionsProjectedUtilizationMetricsDurationExpected
    case recommendationOptionsProjectedUtilizationMetricsDurationLowerBound
    case recommendationOptionsProjectedUtilizationMetricsDurationUpperBound
    case utilizationMetricsDurationAverage
    case utilizationMetricsDurationMaximum
    case utilizationMetricsMemoryAverage
    case utilizationMetricsMemoryMaximum
    case sdkUnknown(String)
}

extension ExportableLambdaFunctionField : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ExportableLambdaFunctionField] {
        return [
            .accountId,
            .currentConfigurationMemorySize,
            .currentConfigurationTimeout,
            .currentCostAverage,
            .currentCostTotal,
            .finding,
            .findingReasonCodes,
            .functionArn,
            .functionVersion,
            .lastRefreshTimestamp,
            .lookbackPeriodInDays,
            .numberOfInvocations,
            .recommendationOptionsConfigurationMemorySize,
            .recommendationOptionsCostHigh,
            .recommendationOptionsCostLow,
            .recommendationOptionsProjectedUtilizationMetricsDurationExpected,
            .recommendationOptionsProjectedUtilizationMetricsDurationLowerBound,
            .recommendationOptionsProjectedUtilizationMetricsDurationUpperBound,
            .utilizationMetricsDurationAverage,
            .utilizationMetricsDurationMaximum,
            .utilizationMetricsMemoryAverage,
            .utilizationMetricsMemoryMaximum,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accountId: return "AccountId"
        case .currentConfigurationMemorySize: return "CurrentConfigurationMemorySize"
        case .currentConfigurationTimeout: return "CurrentConfigurationTimeout"
        case .currentCostAverage: return "CurrentCostAverage"
        case .currentCostTotal: return "CurrentCostTotal"
        case .finding: return "Finding"
        case .findingReasonCodes: return "FindingReasonCodes"
        case .functionArn: return "FunctionArn"
        case .functionVersion: return "FunctionVersion"
        case .lastRefreshTimestamp: return "LastRefreshTimestamp"
        case .lookbackPeriodInDays: return "LookbackPeriodInDays"
        case .numberOfInvocations: return "NumberOfInvocations"
        case .recommendationOptionsConfigurationMemorySize: return "RecommendationOptionsConfigurationMemorySize"
        case .recommendationOptionsCostHigh: return "RecommendationOptionsCostHigh"
        case .recommendationOptionsCostLow: return "RecommendationOptionsCostLow"
        case .recommendationOptionsProjectedUtilizationMetricsDurationExpected: return "RecommendationOptionsProjectedUtilizationMetricsDurationExpected"
        case .recommendationOptionsProjectedUtilizationMetricsDurationLowerBound: return "RecommendationOptionsProjectedUtilizationMetricsDurationLowerBound"
        case .recommendationOptionsProjectedUtilizationMetricsDurationUpperBound: return "RecommendationOptionsProjectedUtilizationMetricsDurationUpperBound"
        case .utilizationMetricsDurationAverage: return "UtilizationMetricsDurationAverage"
        case .utilizationMetricsDurationMaximum: return "UtilizationMetricsDurationMaximum"
        case .utilizationMetricsMemoryAverage: return "UtilizationMetricsMemoryAverage"
        case .utilizationMetricsMemoryMaximum: return "UtilizationMetricsMemoryMaximum"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ExportableLambdaFunctionField(rawValue: rawValue) ?? ExportableLambdaFunctionField.sdkUnknown(rawValue)
    }
}
