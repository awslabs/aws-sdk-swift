// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UtilizationMetric: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name
        case statistic
        case value
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let statistic = statistic {
            try encodeContainer.encode(statistic.rawValue, forKey: .statistic)
        }
        if value != 0.0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(MetricName.self, forKey: .name)
        name = nameDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(MetricStatistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let valueDecoded = try containerValues.decode(Double.self, forKey: .value)
        value = valueDecoded
    }
}
