// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes a filter that returns a more specific list of AWS Lambda function
///             recommendations. Use this filter with the <code>GetLambdaFunctionRecommendations</code>
///             action.</p>
///
///
///
///         <p>You can use <code>EBSFilter</code> with the <code>GetEBSVolumeRecommendations</code>
///             action, <code>JobFilter</code> with the <code>DescribeRecommendationExportJobs</code>
///             action, and <code>Filter</code> with the <code>GetAutoScalingGroupRecommendations</code>
///             and <code>GetEC2InstanceRecommendations</code> actions.</p>
public struct LambdaFunctionRecommendationFilter: Equatable {
    /// <p>The name of the filter.</p>
    ///
    ///         <p>Specify <code>Finding</code> to return recommendations with a specific finding
    ///             classification (e.g., <code>NotOptimized</code>).</p>
    ///
    ///         <p>Specify <code>FindingReasonCode</code> to return recommendations with a specific
    ///             finding reason code (e.g., <code>MemoryUnderprovisioned</code>).</p>
    public let name: LambdaFunctionRecommendationFilterName?
    /// <p>The value of the filter.</p>
    ///
    ///         <p>The valid values for this parameter are as follows, depending on what you specify for
    ///             the <code>name</code> parameter:</p>
    ///
    ///         <ul>
    ///             <li>
    ///                 <p>Specify <code>Optimized</code>, <code>NotOptimized</code>, or
    ///                         <code>Unavailable</code> if you specify the <code>name</code> parameter as
    ///                         <code>Finding</code>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Specify <code>MemoryOverprovisioned</code>,
    ///                         <code>MemoryUnderprovisioned</code>, <code>InsufficientData</code>, or
    ///                         <code>Inconclusive</code> if you specify the <code>name</code> parameter as
    ///                         <code>FindingReasonCode</code>.</p>
    ///             </li>
    ///          </ul>
    public let values: [String]?

    public init (
        name: LambdaFunctionRecommendationFilterName? = nil,
        values: [String]? = nil
    )
    {
        self.name = name
        self.values = values
    }
}
