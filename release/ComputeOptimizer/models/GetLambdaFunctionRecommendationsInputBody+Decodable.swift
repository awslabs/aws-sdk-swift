// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetLambdaFunctionRecommendationsInputBody: Equatable {
    public let functionArns: [String]?
    public let accountIds: [String]?
    public let filters: [LambdaFunctionRecommendationFilter]?
    public let nextToken: String?
    public let maxResults: Int?
}

extension GetLambdaFunctionRecommendationsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accountIds
        case filters
        case functionArns
        case maxResults
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let functionArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .functionArns)
        var functionArnsDecoded0:[String]? = nil
        if let functionArnsContainer = functionArnsContainer {
            functionArnsDecoded0 = [String]()
            for string0 in functionArnsContainer {
                functionArnsDecoded0?.append(string0)
            }
        }
        functionArns = functionArnsDecoded0
        let accountIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .accountIds)
        var accountIdsDecoded0:[String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [String]()
            for string0 in accountIdsContainer {
                accountIdsDecoded0?.append(string0)
            }
        }
        accountIds = accountIdsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([LambdaFunctionRecommendationFilter].self, forKey: .filters)
        var filtersDecoded0:[LambdaFunctionRecommendationFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [LambdaFunctionRecommendationFilter]()
            for structure0 in filtersContainer {
                filtersDecoded0?.append(structure0)
            }
        }
        filters = filtersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
