// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AutoScalingGroupConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case desiredCapacity
        case instanceType
        case maxSize
        case minSize
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if desiredCapacity != 0 {
            try encodeContainer.encode(desiredCapacity, forKey: .desiredCapacity)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if maxSize != 0 {
            try encodeContainer.encode(maxSize, forKey: .maxSize)
        }
        if minSize != 0 {
            try encodeContainer.encode(minSize, forKey: .minSize)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let desiredCapacityDecoded = try containerValues.decode(Int.self, forKey: .desiredCapacity)
        desiredCapacity = desiredCapacityDecoded
        let minSizeDecoded = try containerValues.decode(Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decode(Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
    }
}
