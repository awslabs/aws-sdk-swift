// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum LambdaFunctionRecommendationFindingReasonCode {
    case inconclusive
    case insufficientData
    case memoryOverProvisioned
    case memoryUnderProvisioned
    case sdkUnknown(String)
}

extension LambdaFunctionRecommendationFindingReasonCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [LambdaFunctionRecommendationFindingReasonCode] {
        return [
            .inconclusive,
            .insufficientData,
            .memoryOverProvisioned,
            .memoryUnderProvisioned,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .inconclusive: return "Inconclusive"
        case .insufficientData: return "InsufficientData"
        case .memoryOverProvisioned: return "MemoryOverprovisioned"
        case .memoryUnderProvisioned: return "MemoryUnderprovisioned"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = LambdaFunctionRecommendationFindingReasonCode(rawValue: rawValue) ?? LambdaFunctionRecommendationFindingReasonCode.sdkUnknown(rawValue)
    }
}
