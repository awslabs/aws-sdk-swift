// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum PlatformDifference {
    case hypervisor
    case instanceStoreAvailability
    case networkInterface
    case storageInterface
    case virtualizationType
    case sdkUnknown(String)
}

extension PlatformDifference : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [PlatformDifference] {
        return [
            .hypervisor,
            .instanceStoreAvailability,
            .networkInterface,
            .storageInterface,
            .virtualizationType,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .hypervisor: return "Hypervisor"
        case .instanceStoreAvailability: return "InstanceStoreAvailability"
        case .networkInterface: return "NetworkInterface"
        case .storageInterface: return "StorageInterface"
        case .virtualizationType: return "VirtualizationType"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = PlatformDifference(rawValue: rawValue) ?? PlatformDifference.sdkUnknown(rawValue)
    }
}
