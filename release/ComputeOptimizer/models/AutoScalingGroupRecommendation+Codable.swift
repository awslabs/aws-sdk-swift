// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AutoScalingGroupRecommendation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountId
        case autoScalingGroupArn
        case autoScalingGroupName
        case currentConfiguration
        case finding
        case lastRefreshTimestamp
        case lookBackPeriodInDays
        case recommendationOptions
        case utilizationMetrics
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let autoScalingGroupArn = autoScalingGroupArn {
            try encodeContainer.encode(autoScalingGroupArn, forKey: .autoScalingGroupArn)
        }
        if let autoScalingGroupName = autoScalingGroupName {
            try encodeContainer.encode(autoScalingGroupName, forKey: .autoScalingGroupName)
        }
        if let currentConfiguration = currentConfiguration {
            try encodeContainer.encode(currentConfiguration, forKey: .currentConfiguration)
        }
        if let finding = finding {
            try encodeContainer.encode(finding.rawValue, forKey: .finding)
        }
        if let lastRefreshTimestamp = lastRefreshTimestamp {
            try encodeContainer.encode(lastRefreshTimestamp.timeIntervalSince1970, forKey: .lastRefreshTimestamp)
        }
        if lookBackPeriodInDays != 0.0 {
            try encodeContainer.encode(lookBackPeriodInDays, forKey: .lookBackPeriodInDays)
        }
        if let recommendationOptions = recommendationOptions {
            var recommendationOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recommendationOptions)
            for autoscalinggrouprecommendationoptions0 in recommendationOptions {
                try recommendationOptionsContainer.encode(autoscalinggrouprecommendationoptions0)
            }
        }
        if let utilizationMetrics = utilizationMetrics {
            var utilizationMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .utilizationMetrics)
            for utilizationmetrics0 in utilizationMetrics {
                try utilizationMetricsContainer.encode(utilizationmetrics0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let autoScalingGroupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingGroupArn)
        autoScalingGroupArn = autoScalingGroupArnDecoded
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let findingDecoded = try containerValues.decodeIfPresent(Finding.self, forKey: .finding)
        finding = findingDecoded
        let utilizationMetricsContainer = try containerValues.decodeIfPresent([UtilizationMetric].self, forKey: .utilizationMetrics)
        var utilizationMetricsDecoded0:[UtilizationMetric]? = nil
        if let utilizationMetricsContainer = utilizationMetricsContainer {
            utilizationMetricsDecoded0 = [UtilizationMetric]()
            for structure0 in utilizationMetricsContainer {
                utilizationMetricsDecoded0?.append(structure0)
            }
        }
        utilizationMetrics = utilizationMetricsDecoded0
        let lookBackPeriodInDaysDecoded = try containerValues.decode(Double.self, forKey: .lookBackPeriodInDays)
        lookBackPeriodInDays = lookBackPeriodInDaysDecoded
        let currentConfigurationDecoded = try containerValues.decodeIfPresent(AutoScalingGroupConfiguration.self, forKey: .currentConfiguration)
        currentConfiguration = currentConfigurationDecoded
        let recommendationOptionsContainer = try containerValues.decodeIfPresent([AutoScalingGroupRecommendationOption].self, forKey: .recommendationOptions)
        var recommendationOptionsDecoded0:[AutoScalingGroupRecommendationOption]? = nil
        if let recommendationOptionsContainer = recommendationOptionsContainer {
            recommendationOptionsDecoded0 = [AutoScalingGroupRecommendationOption]()
            for structure0 in recommendationOptionsContainer {
                recommendationOptionsDecoded0?.append(structure0)
            }
        }
        recommendationOptions = recommendationOptionsDecoded0
        let lastRefreshTimestampDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastRefreshTimestamp)
        lastRefreshTimestamp = lastRefreshTimestampDecoded
    }
}
