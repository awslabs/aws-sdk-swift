// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListReusableDelegationSetsOutputBody: Equatable {
    public let delegationSets: [DelegationSet]?
    public let marker: String?
    public let isTruncated: Bool
    public let nextMarker: String?
    public let maxItems: Int?
}

extension ListReusableDelegationSetsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case delegationSets = "DelegationSets"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case maxItems = "MaxItems"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.delegationSets) {
            struct KeyVal0{struct DelegationSet{}}
            let delegationSetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.DelegationSet>.CodingKeys.self, forKey: .delegationSets)
            if let delegationSetsWrappedContainer = delegationSetsWrappedContainer {
                let delegationSetsContainer = try delegationSetsWrappedContainer.decodeIfPresent([DelegationSet].self, forKey: .member)
                var delegationSetsBuffer:[DelegationSet]? = nil
                if let delegationSetsContainer = delegationSetsContainer {
                    delegationSetsBuffer = [DelegationSet]()
                    for structureContainer0 in delegationSetsContainer {
                        delegationSetsBuffer?.append(structureContainer0)
                    }
                }
                delegationSets = delegationSetsBuffer
            } else {
                delegationSets = []
            }
        } else {
            delegationSets = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        let isTruncatedDecoded = try containerValues.decode(Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}
