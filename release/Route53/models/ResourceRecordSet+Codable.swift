// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResourceRecordSet: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aliasTarget = "AliasTarget"
        case failover = "Failover"
        case geoLocation = "GeoLocation"
        case healthCheckId = "HealthCheckId"
        case multiValueAnswer = "MultiValueAnswer"
        case name = "Name"
        case region = "Region"
        case resourceRecords = "ResourceRecords"
        case setIdentifier = "SetIdentifier"
        case tTL = "TTL"
        case trafficPolicyInstanceId = "TrafficPolicyInstanceId"
        case type = "Type"
        case weight = "Weight"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: Key("xmlns"))
        }
        if let aliasTarget = aliasTarget {
            try container.encode(aliasTarget, forKey: Key("aliasTarget"))
        }
        if let failover = failover {
            try container.encode(failover, forKey: Key("failover"))
        }
        if let geoLocation = geoLocation {
            try container.encode(geoLocation, forKey: Key("geoLocation"))
        }
        if let healthCheckId = healthCheckId {
            try container.encode(healthCheckId, forKey: Key("healthCheckId"))
        }
        if let multiValueAnswer = multiValueAnswer {
            try container.encode(multiValueAnswer, forKey: Key("multiValueAnswer"))
        }
        if let name = name {
            try container.encode(name, forKey: Key("name"))
        }
        if let region = region {
            try container.encode(region, forKey: Key("region"))
        }
        if let resourceRecords = resourceRecords {
            var resourceRecordsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("resourceRecords"))
            for resourcerecord0 in resourceRecords {
                try resourceRecordsContainer.encode(resourcerecord0, forKey: Key("ResourceRecord"))
            }
        }
        if let setIdentifier = setIdentifier {
            try container.encode(setIdentifier, forKey: Key("setIdentifier"))
        }
        if let tTL = tTL {
            try container.encode(tTL, forKey: Key("tTL"))
        }
        if let trafficPolicyInstanceId = trafficPolicyInstanceId {
            try container.encode(trafficPolicyInstanceId, forKey: Key("trafficPolicyInstanceId"))
        }
        if let type = type {
            try container.encode(type, forKey: Key("type"))
        }
        if let weight = weight {
            try container.encode(weight, forKey: Key("weight"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(RRType.self, forKey: .type)
        type = typeDecoded
        let setIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .setIdentifier)
        setIdentifier = setIdentifierDecoded
        let weightDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .weight)
        weight = weightDecoded
        let regionDecoded = try containerValues.decodeIfPresent(ResourceRecordSetRegion.self, forKey: .region)
        region = regionDecoded
        let geoLocationDecoded = try containerValues.decodeIfPresent(GeoLocation.self, forKey: .geoLocation)
        geoLocation = geoLocationDecoded
        let failoverDecoded = try containerValues.decodeIfPresent(ResourceRecordSetFailover.self, forKey: .failover)
        failover = failoverDecoded
        let multiValueAnswerDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .multiValueAnswer)
        multiValueAnswer = multiValueAnswerDecoded
        let tTLDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .tTL)
        tTL = tTLDecoded
        if containerValues.contains(.resourceRecords) {
            struct KeyVal0{struct ResourceRecord{}}
            let resourceRecordsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ResourceRecord>.CodingKeys.self, forKey: .resourceRecords)
            if let resourceRecordsWrappedContainer = resourceRecordsWrappedContainer {
                let resourceRecordsContainer = try resourceRecordsWrappedContainer.decodeIfPresent([ResourceRecord].self, forKey: .member)
                var resourceRecordsBuffer:[ResourceRecord]? = nil
                if let resourceRecordsContainer = resourceRecordsContainer {
                    resourceRecordsBuffer = [ResourceRecord]()
                    for structureContainer0 in resourceRecordsContainer {
                        resourceRecordsBuffer?.append(structureContainer0)
                    }
                }
                resourceRecords = resourceRecordsBuffer
            } else {
                resourceRecords = []
            }
        } else {
            resourceRecords = nil
        }
        let aliasTargetDecoded = try containerValues.decodeIfPresent(AliasTarget.self, forKey: .aliasTarget)
        aliasTarget = aliasTargetDecoded
        let healthCheckIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .healthCheckId)
        healthCheckId = healthCheckIdDecoded
        let trafficPolicyInstanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trafficPolicyInstanceId)
        trafficPolicyInstanceId = trafficPolicyInstanceIdDecoded
    }
}
