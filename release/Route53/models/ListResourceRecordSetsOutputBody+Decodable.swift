// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListResourceRecordSetsOutputBody: Equatable {
    public let resourceRecordSets: [ResourceRecordSet]?
    public let isTruncated: Bool
    public let nextRecordName: String?
    public let nextRecordType: RRType?
    public let nextRecordIdentifier: String?
    public let maxItems: Int?
}

extension ListResourceRecordSetsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case isTruncated = "IsTruncated"
        case maxItems = "MaxItems"
        case nextRecordIdentifier = "NextRecordIdentifier"
        case nextRecordName = "NextRecordName"
        case nextRecordType = "NextRecordType"
        case resourceRecordSets = "ResourceRecordSets"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.resourceRecordSets) {
            struct KeyVal0{struct ResourceRecordSet{}}
            let resourceRecordSetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ResourceRecordSet>.CodingKeys.self, forKey: .resourceRecordSets)
            if let resourceRecordSetsWrappedContainer = resourceRecordSetsWrappedContainer {
                let resourceRecordSetsContainer = try resourceRecordSetsWrappedContainer.decodeIfPresent([ResourceRecordSet].self, forKey: .member)
                var resourceRecordSetsBuffer:[ResourceRecordSet]? = nil
                if let resourceRecordSetsContainer = resourceRecordSetsContainer {
                    resourceRecordSetsBuffer = [ResourceRecordSet]()
                    for structureContainer0 in resourceRecordSetsContainer {
                        resourceRecordSetsBuffer?.append(structureContainer0)
                    }
                }
                resourceRecordSets = resourceRecordSetsBuffer
            } else {
                resourceRecordSets = []
            }
        } else {
            resourceRecordSets = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let nextRecordNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextRecordName)
        nextRecordName = nextRecordNameDecoded
        let nextRecordTypeDecoded = try containerValues.decodeIfPresent(RRType.self, forKey: .nextRecordType)
        nextRecordType = nextRecordTypeDecoded
        let nextRecordIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextRecordIdentifier)
        nextRecordIdentifier = nextRecordIdentifierDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}
