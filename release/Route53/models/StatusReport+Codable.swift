// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StatusReport: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case checkedTime = "CheckedTime"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: Key("xmlns"))
        }
        if let checkedTime = checkedTime {
            try container.encode(TimestampWrapper(checkedTime, format: .dateTime), forKey: Key("checkedTime"))
        }
        if let status = status {
            try container.encode(status, forKey: Key("status"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let checkedTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .checkedTime)
        var checkedTimeBuffer:Date? = nil
        if let checkedTimeDecoded = checkedTimeDecoded {
            checkedTimeBuffer = try TimestampWrapperDecoder.parseDateStringValue(checkedTimeDecoded, format: .dateTime)
        }
        checkedTime = checkedTimeBuffer
    }
}
