// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTrafficPolicyInstancesOutputBody: Equatable {
    public let trafficPolicyInstances: [TrafficPolicyInstance]?
    public let hostedZoneIdMarker: String?
    public let trafficPolicyInstanceNameMarker: String?
    public let trafficPolicyInstanceTypeMarker: RRType?
    public let isTruncated: Bool
    public let maxItems: Int?
}

extension ListTrafficPolicyInstancesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case hostedZoneIdMarker = "HostedZoneIdMarker"
        case isTruncated = "IsTruncated"
        case maxItems = "MaxItems"
        case trafficPolicyInstanceNameMarker = "TrafficPolicyInstanceNameMarker"
        case trafficPolicyInstanceTypeMarker = "TrafficPolicyInstanceTypeMarker"
        case trafficPolicyInstances = "TrafficPolicyInstances"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.trafficPolicyInstances) {
            struct KeyVal0{struct TrafficPolicyInstance{}}
            let trafficPolicyInstancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TrafficPolicyInstance>.CodingKeys.self, forKey: .trafficPolicyInstances)
            if let trafficPolicyInstancesWrappedContainer = trafficPolicyInstancesWrappedContainer {
                let trafficPolicyInstancesContainer = try trafficPolicyInstancesWrappedContainer.decodeIfPresent([TrafficPolicyInstance].self, forKey: .member)
                var trafficPolicyInstancesBuffer:[TrafficPolicyInstance]? = nil
                if let trafficPolicyInstancesContainer = trafficPolicyInstancesContainer {
                    trafficPolicyInstancesBuffer = [TrafficPolicyInstance]()
                    for structureContainer0 in trafficPolicyInstancesContainer {
                        trafficPolicyInstancesBuffer?.append(structureContainer0)
                    }
                }
                trafficPolicyInstances = trafficPolicyInstancesBuffer
            } else {
                trafficPolicyInstances = []
            }
        } else {
            trafficPolicyInstances = nil
        }
        let hostedZoneIdMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hostedZoneIdMarker)
        hostedZoneIdMarker = hostedZoneIdMarkerDecoded
        let trafficPolicyInstanceNameMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trafficPolicyInstanceNameMarker)
        trafficPolicyInstanceNameMarker = trafficPolicyInstanceNameMarkerDecoded
        let trafficPolicyInstanceTypeMarkerDecoded = try containerValues.decodeIfPresent(RRType.self, forKey: .trafficPolicyInstanceTypeMarker)
        trafficPolicyInstanceTypeMarker = trafficPolicyInstanceTypeMarkerDecoded
        let isTruncatedDecoded = try containerValues.decode(Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}
