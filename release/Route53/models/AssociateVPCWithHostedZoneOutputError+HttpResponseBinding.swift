// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime

extension AssociateVPCWithHostedZoneOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AssociateVPCWithHostedZoneOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ConflictingDomainExists" : self = .conflictingDomainExists(try ConflictingDomainExists(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidVPCId" : self = .invalidVPCId(try InvalidVPCId(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitsExceeded" : self = .limitsExceeded(try LimitsExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PriorRequestNotComplete" : self = .priorRequestNotComplete(try PriorRequestNotComplete(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PublicZoneVPCAssociation" : self = .publicZoneVPCAssociation(try PublicZoneVPCAssociation(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}
