// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TrafficPolicyInstance: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case hostedZoneId = "HostedZoneId"
        case id = "Id"
        case message = "Message"
        case name = "Name"
        case state = "State"
        case tTL = "TTL"
        case trafficPolicyId = "TrafficPolicyId"
        case trafficPolicyType = "TrafficPolicyType"
        case trafficPolicyVersion = "TrafficPolicyVersion"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: Key("xmlns"))
        }
        if let hostedZoneId = hostedZoneId {
            try container.encode(hostedZoneId, forKey: Key("hostedZoneId"))
        }
        if let id = id {
            try container.encode(id, forKey: Key("id"))
        }
        if let message = message {
            try container.encode(message, forKey: Key("message"))
        }
        if let name = name {
            try container.encode(name, forKey: Key("name"))
        }
        if let state = state {
            try container.encode(state, forKey: Key("state"))
        }
        if let tTL = tTL {
            try container.encode(tTL, forKey: Key("tTL"))
        }
        if let trafficPolicyId = trafficPolicyId {
            try container.encode(trafficPolicyId, forKey: Key("trafficPolicyId"))
        }
        if let trafficPolicyType = trafficPolicyType {
            try container.encode(trafficPolicyType, forKey: Key("trafficPolicyType"))
        }
        if let trafficPolicyVersion = trafficPolicyVersion {
            try container.encode(trafficPolicyVersion, forKey: Key("trafficPolicyVersion"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let hostedZoneIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hostedZoneId)
        hostedZoneId = hostedZoneIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let tTLDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .tTL)
        tTL = tTLDecoded
        let stateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .state)
        state = stateDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let trafficPolicyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trafficPolicyId)
        trafficPolicyId = trafficPolicyIdDecoded
        let trafficPolicyVersionDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .trafficPolicyVersion)
        trafficPolicyVersion = trafficPolicyVersionDecoded
        let trafficPolicyTypeDecoded = try containerValues.decodeIfPresent(RRType.self, forKey: .trafficPolicyType)
        trafficPolicyType = trafficPolicyTypeDecoded
    }
}
