// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTrafficPolicyVersionsOutputBody: Equatable {
    public let trafficPolicies: [TrafficPolicy]?
    public let isTruncated: Bool
    public let trafficPolicyVersionMarker: String?
    public let maxItems: Int?
}

extension ListTrafficPolicyVersionsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case isTruncated = "IsTruncated"
        case maxItems = "MaxItems"
        case trafficPolicies = "TrafficPolicies"
        case trafficPolicyVersionMarker = "TrafficPolicyVersionMarker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.trafficPolicies) {
            struct KeyVal0{struct TrafficPolicy{}}
            let trafficPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TrafficPolicy>.CodingKeys.self, forKey: .trafficPolicies)
            if let trafficPoliciesWrappedContainer = trafficPoliciesWrappedContainer {
                let trafficPoliciesContainer = try trafficPoliciesWrappedContainer.decodeIfPresent([TrafficPolicy].self, forKey: .member)
                var trafficPoliciesBuffer:[TrafficPolicy]? = nil
                if let trafficPoliciesContainer = trafficPoliciesContainer {
                    trafficPoliciesBuffer = [TrafficPolicy]()
                    for structureContainer0 in trafficPoliciesContainer {
                        trafficPoliciesBuffer?.append(structureContainer0)
                    }
                }
                trafficPolicies = trafficPoliciesBuffer
            } else {
                trafficPolicies = []
            }
        } else {
            trafficPolicies = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let trafficPolicyVersionMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .trafficPolicyVersionMarker)
        trafficPolicyVersionMarker = trafficPolicyVersionMarkerDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}
