// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TrafficPolicySummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case id = "Id"
        case latestVersion = "LatestVersion"
        case name = "Name"
        case trafficPolicyCount = "TrafficPolicyCount"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: Key("xmlns"))
        }
        if let id = id {
            try container.encode(id, forKey: Key("id"))
        }
        if let latestVersion = latestVersion {
            try container.encode(latestVersion, forKey: Key("latestVersion"))
        }
        if let name = name {
            try container.encode(name, forKey: Key("name"))
        }
        if let trafficPolicyCount = trafficPolicyCount {
            try container.encode(trafficPolicyCount, forKey: Key("trafficPolicyCount"))
        }
        if let type = type {
            try container.encode(type, forKey: Key("type"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(RRType.self, forKey: .type)
        type = typeDecoded
        let latestVersionDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .latestVersion)
        latestVersion = latestVersionDecoded
        let trafficPolicyCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .trafficPolicyCount)
        trafficPolicyCount = trafficPolicyCountDecoded
    }
}
