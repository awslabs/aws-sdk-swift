// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>A key-signing key (KSK) is a complex type that represents a public/private key pair. The private key is used to generate
/// 		a digital signature for the zone signing key (ZSK). The public key is stored in the DNS and is used to authenticate the ZSK.
/// 		A KSK is always associated with a hosted zone; it cannot exist by itself.</p>
public struct KeySigningKey: Equatable {
    /// <p>The date when the key-signing key (KSK) was created.</p>
    public let createdDate: Date?
    /// <p>A string that represents a DNSKEY record.</p>
    public let dNSKEYRecord: String?
    /// <p>A string that represents a delegation signer (DS) record.</p>
    public let dSRecord: String?
    /// <p>A string used to represent the delegation signer digest algorithm. This value must follow the guidelines provided by
    /// 			<a href="https://tools.ietf.org/html/rfc8624#section-3.3">RFC-8624 Section 3.3</a>.
    /// 		</p>
    public let digestAlgorithmMnemonic: String?
    /// <p>An integer used to represent the delegation signer digest algorithm. This value must follow the guidelines provided by
    /// 			<a href="https://tools.ietf.org/html/rfc8624#section-3.3">RFC-8624 Section 3.3</a>.</p>
    public let digestAlgorithmType: Int
    /// <p>A cryptographic digest of a DNSKEY resource record (RR). DNSKEY records are used to publish the public key that resolvers
    /// 			can use to verify DNSSEC signatures that are used to secure certain kinds of information provided by the DNS system.</p>
    public let digestValue: String?
    /// <p>An integer that specifies how the key is used. For key-signing key (KSK), this value is always 257.</p>
    public let flag: Int
    /// <p>An integer used to identify the DNSSEC record for the domain name. The process used to calculate the value is described in
    /// 			<a href="https://tools.ietf.org/rfc/rfc4034.txt">RFC-4034 Appendix B</a>.</p>
    public let keyTag: Int
    /// <p>The Amazon resource name (ARN) used to identify the customer managed customer master key (CMK) in AWS Key Management Service (AWS KMS).
    /// 			The <code>KmsArn</code> must be unique for each key-signing key (KSK) in a single hosted zone.</p>
    /// 		       <p>You must configure the CMK as follows:</p>
    /// 		       <dl>
    ///             <dt>Status</dt>
    ///             <dd>
    ///                <p>Enabled</p>
    ///             </dd>
    ///             <dt>Key spec</dt>
    ///             <dd>
    ///                <p>ECC_NIST_P256</p>
    ///             </dd>
    ///             <dt>Key usage</dt>
    ///             <dd>
    ///                <p>Sign and verify</p>
    ///             </dd>
    ///             <dt>Key policy</dt>
    ///             <dd>
    ///                <p>The key policy must give permission for the following actions:</p>
    /// 				           <ul>
    ///                   <li>
    ///                      <p>DescribeKey</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>GetPublicKey</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>Sign</p>
    ///                   </li>
    ///                </ul>
    /// 					          <p>The key policy must also include the Amazon Route 53 service in the principal for your account.
    /// 						Specify the following:</p>
    /// 					          <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>"Service": "api-service.dnssec.route53.aws.internal"</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    /// 				        </dd>
    ///          </dl>
    /// 		       <p>For more information about working with the customer managed CMK in AWS KMS, see
    /// 			<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html">AWS Key Management Service concepts</a>.</p>
    public let kmsArn: String?
    /// <p>The last time that the key-signing key (KSK) was changed.</p>
    public let lastModifiedDate: Date?
    /// <p>A string used to identify a key-signing key (KSK). <code>Name</code> can include numbers, letters,  and underscores (_). <code>Name</code> must be unique for each key-signing key in the same
    /// 			hosted zone.</p>
    public let name: String?
    /// <p>The public key, represented as a Base64 encoding, as required by <a href="https://tools.ietf.org/rfc/rfc4034.txt">
    /// 			RFC-4034 Page 5</a>.</p>
    public let publicKey: String?
    /// <p>A string used to represent the signing algorithm. This value must follow the guidelines provided by
    /// 			<a href="https://tools.ietf.org/html/rfc8624#section-3.1">RFC-8624 Section 3.1</a>.
    /// 		</p>
    public let signingAlgorithmMnemonic: String?
    /// <p>An integer used to represent the signing algorithm. This value must follow the guidelines provided by
    /// 			<a href="https://tools.ietf.org/html/rfc8624#section-3.1">RFC-8624 Section 3.1</a>.
    /// 		</p>
    public let signingAlgorithmType: Int
    /// <p>A string that represents the current key-signing key (KSK) status.</p>
    /// 		       <p>Status can have one of the following values:</p>
    /// 		       <dl>
    ///             <dt>ACTIVE</dt>
    ///             <dd>
    ///                <p>The KSK is being used for signing.</p>
    ///             </dd>
    ///             <dt>INACTIVE</dt>
    ///             <dd>
    ///                <p>The KSK is not being used for signing.</p>
    ///             </dd>
    ///             <dt>DELETING</dt>
    ///             <dd>
    ///                <p>The KSK is in the process of being deleted.</p>
    ///             </dd>
    ///             <dt>ACTION_NEEDED</dt>
    ///             <dd>
    ///                <p>There is a problem with the KSK that requires you to take action to resolve.
    /// 				For example, the customer managed customer master key (CMK) might have been deleted, or the
    /// 				permissions for the customer managed CMK might have been changed.</p>
    ///             </dd>
    ///             <dt>INTERNAL_FAILURE</dt>
    ///             <dd>
    ///                <p>There was an error during a request. Before you can continue to work with DNSSEC
    /// 					signing, including actions that involve this KSK, you must correct the problem. For example,
    /// 					you may need to activate or deactivate the KSK.</p>
    ///             </dd>
    ///          </dl>
    public let status: String?
    /// <p>The status message provided for the following key-signing key (KSK) statuses: <code>ACTION_NEEDED</code> or
    /// 			<code>INTERNAL_FAILURE</code>. The status message includes information about what the problem might be and steps
    /// 			that you can take to correct the issue.</p>
    public let statusMessage: String?

    public init (
        createdDate: Date? = nil,
        dNSKEYRecord: String? = nil,
        dSRecord: String? = nil,
        digestAlgorithmMnemonic: String? = nil,
        digestAlgorithmType: Int = 0,
        digestValue: String? = nil,
        flag: Int = 0,
        keyTag: Int = 0,
        kmsArn: String? = nil,
        lastModifiedDate: Date? = nil,
        name: String? = nil,
        publicKey: String? = nil,
        signingAlgorithmMnemonic: String? = nil,
        signingAlgorithmType: Int = 0,
        status: String? = nil,
        statusMessage: String? = nil
    )
    {
        self.createdDate = createdDate
        self.dNSKEYRecord = dNSKEYRecord
        self.dSRecord = dSRecord
        self.digestAlgorithmMnemonic = digestAlgorithmMnemonic
        self.digestAlgorithmType = digestAlgorithmType
        self.digestValue = digestValue
        self.flag = flag
        self.keyTag = keyTag
        self.kmsArn = kmsArn
        self.lastModifiedDate = lastModifiedDate
        self.name = name
        self.publicKey = publicKey
        self.signingAlgorithmMnemonic = signingAlgorithmMnemonic
        self.signingAlgorithmType = signingAlgorithmType
        self.status = status
        self.statusMessage = statusMessage
    }
}
