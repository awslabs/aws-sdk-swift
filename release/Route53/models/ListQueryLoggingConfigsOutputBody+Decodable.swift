// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListQueryLoggingConfigsOutputBody: Equatable {
    public let queryLoggingConfigs: [QueryLoggingConfig]?
    public let nextToken: String?
}

extension ListQueryLoggingConfigsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case queryLoggingConfigs = "QueryLoggingConfigs"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.queryLoggingConfigs) {
            struct KeyVal0{struct QueryLoggingConfig{}}
            let queryLoggingConfigsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.QueryLoggingConfig>.CodingKeys.self, forKey: .queryLoggingConfigs)
            if let queryLoggingConfigsWrappedContainer = queryLoggingConfigsWrappedContainer {
                let queryLoggingConfigsContainer = try queryLoggingConfigsWrappedContainer.decodeIfPresent([QueryLoggingConfig].self, forKey: .member)
                var queryLoggingConfigsBuffer:[QueryLoggingConfig]? = nil
                if let queryLoggingConfigsContainer = queryLoggingConfigsContainer {
                    queryLoggingConfigsBuffer = [QueryLoggingConfig]()
                    for structureContainer0 in queryLoggingConfigsContainer {
                        queryLoggingConfigsBuffer?.append(structureContainer0)
                    }
                }
                queryLoggingConfigs = queryLoggingConfigsBuffer
            } else {
                queryLoggingConfigs = []
            }
        } else {
            queryLoggingConfigs = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
