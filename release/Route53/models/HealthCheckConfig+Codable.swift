// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HealthCheckConfig: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case alarmIdentifier = "AlarmIdentifier"
        case childHealthChecks = "ChildHealthChecks"
        case disabled = "Disabled"
        case enableSNI = "EnableSNI"
        case failureThreshold = "FailureThreshold"
        case fullyQualifiedDomainName = "FullyQualifiedDomainName"
        case healthThreshold = "HealthThreshold"
        case iPAddress = "IPAddress"
        case insufficientDataHealthStatus = "InsufficientDataHealthStatus"
        case inverted = "Inverted"
        case measureLatency = "MeasureLatency"
        case port = "Port"
        case regions = "Regions"
        case requestInterval = "RequestInterval"
        case resourcePath = "ResourcePath"
        case searchString = "SearchString"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: Key("xmlns"))
        }
        if let alarmIdentifier = alarmIdentifier {
            try container.encode(alarmIdentifier, forKey: Key("alarmIdentifier"))
        }
        if let childHealthChecks = childHealthChecks {
            var childHealthChecksContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("childHealthChecks"))
            for healthcheckid0 in childHealthChecks {
                try childHealthChecksContainer.encode(healthcheckid0, forKey: Key("ChildHealthCheck"))
            }
        }
        if let disabled = disabled {
            try container.encode(disabled, forKey: Key("disabled"))
        }
        if let enableSNI = enableSNI {
            try container.encode(enableSNI, forKey: Key("enableSNI"))
        }
        if let failureThreshold = failureThreshold {
            try container.encode(failureThreshold, forKey: Key("failureThreshold"))
        }
        if let fullyQualifiedDomainName = fullyQualifiedDomainName {
            try container.encode(fullyQualifiedDomainName, forKey: Key("fullyQualifiedDomainName"))
        }
        if let healthThreshold = healthThreshold {
            try container.encode(healthThreshold, forKey: Key("healthThreshold"))
        }
        if let iPAddress = iPAddress {
            try container.encode(iPAddress, forKey: Key("iPAddress"))
        }
        if let insufficientDataHealthStatus = insufficientDataHealthStatus {
            try container.encode(insufficientDataHealthStatus, forKey: Key("insufficientDataHealthStatus"))
        }
        if let inverted = inverted {
            try container.encode(inverted, forKey: Key("inverted"))
        }
        if let measureLatency = measureLatency {
            try container.encode(measureLatency, forKey: Key("measureLatency"))
        }
        if let port = port {
            try container.encode(port, forKey: Key("port"))
        }
        if let regions = regions {
            var regionsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("regions"))
            for healthcheckregion0 in regions {
                try regionsContainer.encode(healthcheckregion0, forKey: Key("Region"))
            }
        }
        if let requestInterval = requestInterval {
            try container.encode(requestInterval, forKey: Key("requestInterval"))
        }
        if let resourcePath = resourcePath {
            try container.encode(resourcePath, forKey: Key("resourcePath"))
        }
        if let searchString = searchString {
            try container.encode(searchString, forKey: Key("searchString"))
        }
        if let type = type {
            try container.encode(type, forKey: Key("type"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let iPAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iPAddress)
        iPAddress = iPAddressDecoded
        let portDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .port)
        port = portDecoded
        let typeDecoded = try containerValues.decodeIfPresent(HealthCheckType.self, forKey: .type)
        type = typeDecoded
        let resourcePathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourcePath)
        resourcePath = resourcePathDecoded
        let fullyQualifiedDomainNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fullyQualifiedDomainName)
        fullyQualifiedDomainName = fullyQualifiedDomainNameDecoded
        let searchStringDecoded = try containerValues.decodeIfPresent(String.self, forKey: .searchString)
        searchString = searchStringDecoded
        let requestIntervalDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .requestInterval)
        requestInterval = requestIntervalDecoded
        let failureThresholdDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .failureThreshold)
        failureThreshold = failureThresholdDecoded
        let measureLatencyDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .measureLatency)
        measureLatency = measureLatencyDecoded
        let invertedDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .inverted)
        inverted = invertedDecoded
        let disabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .disabled)
        disabled = disabledDecoded
        let healthThresholdDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .healthThreshold)
        healthThreshold = healthThresholdDecoded
        if containerValues.contains(.childHealthChecks) {
            struct KeyVal0{struct ChildHealthCheck{}}
            let childHealthChecksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ChildHealthCheck>.CodingKeys.self, forKey: .childHealthChecks)
            if let childHealthChecksWrappedContainer = childHealthChecksWrappedContainer {
                let childHealthChecksContainer = try childHealthChecksWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var childHealthChecksBuffer:[String]? = nil
                if let childHealthChecksContainer = childHealthChecksContainer {
                    childHealthChecksBuffer = [String]()
                    for stringContainer0 in childHealthChecksContainer {
                        childHealthChecksBuffer?.append(stringContainer0)
                    }
                }
                childHealthChecks = childHealthChecksBuffer
            } else {
                childHealthChecks = []
            }
        } else {
            childHealthChecks = nil
        }
        let enableSNIDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enableSNI)
        enableSNI = enableSNIDecoded
        if containerValues.contains(.regions) {
            struct KeyVal0{struct Region{}}
            let regionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Region>.CodingKeys.self, forKey: .regions)
            if let regionsWrappedContainer = regionsWrappedContainer {
                let regionsContainer = try regionsWrappedContainer.decodeIfPresent([HealthCheckRegion].self, forKey: .member)
                var regionsBuffer:[HealthCheckRegion]? = nil
                if let regionsContainer = regionsContainer {
                    regionsBuffer = [HealthCheckRegion]()
                    for stringContainer0 in regionsContainer {
                        regionsBuffer?.append(stringContainer0)
                    }
                }
                regions = regionsBuffer
            } else {
                regions = []
            }
        } else {
            regions = nil
        }
        let alarmIdentifierDecoded = try containerValues.decodeIfPresent(AlarmIdentifier.self, forKey: .alarmIdentifier)
        alarmIdentifier = alarmIdentifierDecoded
        let insufficientDataHealthStatusDecoded = try containerValues.decodeIfPresent(InsufficientDataHealthStatus.self, forKey: .insufficientDataHealthStatus)
        insufficientDataHealthStatus = insufficientDataHealthStatusDecoded
    }
}
