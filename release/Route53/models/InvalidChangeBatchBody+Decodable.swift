// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct InvalidChangeBatchBody: Equatable {
    public let messages: [String]?
    public let message: String?
}

extension InvalidChangeBatchBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message
        case messages
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.messages) {
            struct KeyVal0{struct Message{}}
            let messagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Message>.CodingKeys.self, forKey: .messages)
            if let messagesWrappedContainer = messagesWrappedContainer {
                let messagesContainer = try messagesWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var messagesBuffer:[String]? = nil
                if let messagesContainer = messagesContainer {
                    messagesBuffer = [String]()
                    for stringContainer0 in messagesContainer {
                        messagesBuffer?.append(stringContainer0)
                    }
                }
                messages = messagesBuffer
            } else {
                messages = []
            }
        } else {
            messages = nil
        }
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}
