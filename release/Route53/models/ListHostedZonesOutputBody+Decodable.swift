// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListHostedZonesOutputBody: Equatable {
    public let hostedZones: [HostedZone]?
    public let marker: String?
    public let isTruncated: Bool
    public let nextMarker: String?
    public let maxItems: Int?
}

extension ListHostedZonesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case hostedZones = "HostedZones"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case maxItems = "MaxItems"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.hostedZones) {
            struct KeyVal0{struct HostedZone{}}
            let hostedZonesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.HostedZone>.CodingKeys.self, forKey: .hostedZones)
            if let hostedZonesWrappedContainer = hostedZonesWrappedContainer {
                let hostedZonesContainer = try hostedZonesWrappedContainer.decodeIfPresent([HostedZone].self, forKey: .member)
                var hostedZonesBuffer:[HostedZone]? = nil
                if let hostedZonesContainer = hostedZonesContainer {
                    hostedZonesBuffer = [HostedZone]()
                    for structureContainer0 in hostedZonesContainer {
                        hostedZonesBuffer?.append(structureContainer0)
                    }
                }
                hostedZones = hostedZonesBuffer
            } else {
                hostedZones = []
            }
        } else {
            hostedZones = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        let isTruncatedDecoded = try containerValues.decode(Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}
