// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListGeoLocationsOutputBody: Equatable {
    public let geoLocationDetailsList: [GeoLocationDetails]?
    public let isTruncated: Bool
    public let nextContinentCode: String?
    public let nextCountryCode: String?
    public let nextSubdivisionCode: String?
    public let maxItems: Int?
}

extension ListGeoLocationsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case geoLocationDetailsList = "GeoLocationDetailsList"
        case isTruncated = "IsTruncated"
        case maxItems = "MaxItems"
        case nextContinentCode = "NextContinentCode"
        case nextCountryCode = "NextCountryCode"
        case nextSubdivisionCode = "NextSubdivisionCode"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.geoLocationDetailsList) {
            struct KeyVal0{struct GeoLocationDetails{}}
            let geoLocationDetailsListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.GeoLocationDetails>.CodingKeys.self, forKey: .geoLocationDetailsList)
            if let geoLocationDetailsListWrappedContainer = geoLocationDetailsListWrappedContainer {
                let geoLocationDetailsListContainer = try geoLocationDetailsListWrappedContainer.decodeIfPresent([GeoLocationDetails].self, forKey: .member)
                var geoLocationDetailsListBuffer:[GeoLocationDetails]? = nil
                if let geoLocationDetailsListContainer = geoLocationDetailsListContainer {
                    geoLocationDetailsListBuffer = [GeoLocationDetails]()
                    for structureContainer0 in geoLocationDetailsListContainer {
                        geoLocationDetailsListBuffer?.append(structureContainer0)
                    }
                }
                geoLocationDetailsList = geoLocationDetailsListBuffer
            } else {
                geoLocationDetailsList = []
            }
        } else {
            geoLocationDetailsList = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let nextContinentCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextContinentCode)
        nextContinentCode = nextContinentCodeDecoded
        let nextCountryCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextCountryCode)
        nextCountryCode = nextCountryCodeDecoded
        let nextSubdivisionCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextSubdivisionCode)
        nextSubdivisionCode = nextSubdivisionCodeDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}
