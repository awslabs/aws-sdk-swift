// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum HealthCheckType {
    case calculated
    case cloudwatchMetric
    case http
    case https
    case httpsStrMatch
    case httpStrMatch
    case tcp
    case sdkUnknown(String)
}

extension HealthCheckType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [HealthCheckType] {
        return [
            .calculated,
            .cloudwatchMetric,
            .http,
            .https,
            .httpsStrMatch,
            .httpStrMatch,
            .tcp,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .calculated: return "CALCULATED"
        case .cloudwatchMetric: return "CLOUDWATCH_METRIC"
        case .http: return "HTTP"
        case .https: return "HTTPS"
        case .httpsStrMatch: return "HTTPS_STR_MATCH"
        case .httpStrMatch: return "HTTP_STR_MATCH"
        case .tcp: return "TCP"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = HealthCheckType(rawValue: rawValue) ?? HealthCheckType.sdkUnknown(rawValue)
    }
}
