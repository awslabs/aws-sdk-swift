// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ChangeTagsForResourceInputBody: Equatable {
    public let addTags: [Tag]?
    public let removeTagKeys: [String]?
}

extension ChangeTagsForResourceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case addTags = "AddTags"
        case removeTagKeys = "RemoveTagKeys"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.addTags) {
            struct KeyVal0{struct Tag{}}
            let addTagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .addTags)
            if let addTagsWrappedContainer = addTagsWrappedContainer {
                let addTagsContainer = try addTagsWrappedContainer.decodeIfPresent([Tag].self, forKey: .member)
                var addTagsBuffer:[Tag]? = nil
                if let addTagsContainer = addTagsContainer {
                    addTagsBuffer = [Tag]()
                    for structureContainer0 in addTagsContainer {
                        addTagsBuffer?.append(structureContainer0)
                    }
                }
                addTags = addTagsBuffer
            } else {
                addTags = []
            }
        } else {
            addTags = nil
        }
        if containerValues.contains(.removeTagKeys) {
            struct KeyVal0{struct Key{}}
            let removeTagKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Key>.CodingKeys.self, forKey: .removeTagKeys)
            if let removeTagKeysWrappedContainer = removeTagKeysWrappedContainer {
                let removeTagKeysContainer = try removeTagKeysWrappedContainer.decodeIfPresent([String].self, forKey: .member)
                var removeTagKeysBuffer:[String]? = nil
                if let removeTagKeysContainer = removeTagKeysContainer {
                    removeTagKeysBuffer = [String]()
                    for stringContainer0 in removeTagKeysContainer {
                        removeTagKeysBuffer?.append(stringContainer0)
                    }
                }
                removeTagKeys = removeTagKeysBuffer
            } else {
                removeTagKeys = []
            }
        } else {
            removeTagKeys = nil
        }
    }
}
