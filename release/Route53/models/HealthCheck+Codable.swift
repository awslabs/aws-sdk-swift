// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HealthCheck: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case callerReference = "CallerReference"
        case cloudWatchAlarmConfiguration = "CloudWatchAlarmConfiguration"
        case healthCheckConfig = "HealthCheckConfig"
        case healthCheckVersion = "HealthCheckVersion"
        case id = "Id"
        case linkedService = "LinkedService"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: Key("xmlns"))
        }
        if let callerReference = callerReference {
            try container.encode(callerReference, forKey: Key("callerReference"))
        }
        if let cloudWatchAlarmConfiguration = cloudWatchAlarmConfiguration {
            try container.encode(cloudWatchAlarmConfiguration, forKey: Key("cloudWatchAlarmConfiguration"))
        }
        if let healthCheckConfig = healthCheckConfig {
            try container.encode(healthCheckConfig, forKey: Key("healthCheckConfig"))
        }
        if let healthCheckVersion = healthCheckVersion {
            try container.encode(healthCheckVersion, forKey: Key("healthCheckVersion"))
        }
        if let id = id {
            try container.encode(id, forKey: Key("id"))
        }
        if let linkedService = linkedService {
            try container.encode(linkedService, forKey: Key("linkedService"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let callerReferenceDecoded = try containerValues.decodeIfPresent(String.self, forKey: .callerReference)
        callerReference = callerReferenceDecoded
        let linkedServiceDecoded = try containerValues.decodeIfPresent(LinkedService.self, forKey: .linkedService)
        linkedService = linkedServiceDecoded
        let healthCheckConfigDecoded = try containerValues.decodeIfPresent(HealthCheckConfig.self, forKey: .healthCheckConfig)
        healthCheckConfig = healthCheckConfigDecoded
        let healthCheckVersionDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .healthCheckVersion)
        healthCheckVersion = healthCheckVersionDecoded
        let cloudWatchAlarmConfigurationDecoded = try containerValues.decodeIfPresent(CloudWatchAlarmConfiguration.self, forKey: .cloudWatchAlarmConfiguration)
        cloudWatchAlarmConfiguration = cloudWatchAlarmConfigurationDecoded
    }
}
