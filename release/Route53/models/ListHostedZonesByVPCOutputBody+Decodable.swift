// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListHostedZonesByVPCOutputBody: Equatable {
    public let hostedZoneSummaries: [HostedZoneSummary]?
    public let maxItems: Int?
    public let nextToken: String?
}

extension ListHostedZonesByVPCOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case hostedZoneSummaries = "HostedZoneSummaries"
        case maxItems = "MaxItems"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.hostedZoneSummaries) {
            struct KeyVal0{struct HostedZoneSummary{}}
            let hostedZoneSummariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.HostedZoneSummary>.CodingKeys.self, forKey: .hostedZoneSummaries)
            if let hostedZoneSummariesWrappedContainer = hostedZoneSummariesWrappedContainer {
                let hostedZoneSummariesContainer = try hostedZoneSummariesWrappedContainer.decodeIfPresent([HostedZoneSummary].self, forKey: .member)
                var hostedZoneSummariesBuffer:[HostedZoneSummary]? = nil
                if let hostedZoneSummariesContainer = hostedZoneSummariesContainer {
                    hostedZoneSummariesBuffer = [HostedZoneSummary]()
                    for structureContainer0 in hostedZoneSummariesContainer {
                        hostedZoneSummariesBuffer?.append(structureContainer0)
                    }
                }
                hostedZoneSummaries = hostedZoneSummariesBuffer
            } else {
                hostedZoneSummaries = []
            }
        } else {
            hostedZoneSummaries = nil
        }
        let maxItemsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
