// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation

public class WellArchitectedClient {
    let client: SdkHttpClient
    let config: WellArchitectedClientConfiguration
    let serviceName = "WellArchitected"
    let encoder: RequestEncoder
    let decoder: ResponseDecoder

    public init(config: WellArchitectedClientConfiguration) {
        client = SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        self.encoder = config.encoder ?? encoder
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public class WellArchitectedClientConfiguration: ClientRuntime.Configuration, AWSClientConfiguration {

        public var region: String
        public var credentialsProvider: AWSCredentialsProvider
        public var signingRegion: String
        public var endpointResolver: EndpointResolver

        public init (
            credentialsProvider: AWSCredentialsProvider,
            endpointResolver: EndpointResolver,
            region: String,
            signingRegion: String
        ) throws
        {
            self.credentialsProvider = credentialsProvider
            self.endpointResolver = endpointResolver
            self.region = region
            self.signingRegion = signingRegion
        }

        public convenience init(credentialsProvider: AWSCredentialsProvider) throws {
            let region = "us-east-1"
            let signingRegion = "us-east-1"
            let endpointResolver = DefaultEndpointResolver()
            try self.init(
                credentialsProvider: credentialsProvider,
                endpointResolver: endpointResolver,
                region: region,
                signingRegion: signingRegion
            )
        }

        public static func `default`() throws -> WellArchitectedClientConfiguration {
            let awsCredsProvider = try AWSCredentialsProvider.fromEnv()
            return try WellArchitectedClientConfiguration(credentialsProvider: awsCredsProvider)
        }
    }
}

extension WellArchitectedClient: WellArchitectedClientProtocol {
    /// <p>Associate a lens to a workload.</p>
    public func associateLenses(input: AssociateLensesInput, completion: @escaping (SdkResult<AssociateLensesOutput, AssociateLensesOutputError>) -> Void)
    {
        guard let workloadId = input.workloadId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component workloadId unexpectedly nil"))))
            return
        }
        let urlPath = "/workloads/\(workloadId)/associateLenses"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .patch)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "associateLenses")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AssociateLensesInput, AssociateLensesOutput, AssociateLensesOutputError>(id: "associateLenses")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AssociateLensesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AssociateLensesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AssociateLensesInput, AssociateLensesOutput, AssociateLensesOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: AssociateLensesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Create a milestone for an existing workload.</p>
    public func createMilestone(input: CreateMilestoneInput, completion: @escaping (SdkResult<CreateMilestoneOutput, CreateMilestoneOutputError>) -> Void)
    {
        guard let workloadId = input.workloadId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component workloadId unexpectedly nil"))))
            return
        }
        let urlPath = "/workloads/\(workloadId)/milestones"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createMilestone")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateMilestoneInput, CreateMilestoneOutput, CreateMilestoneOutputError>(id: "createMilestone")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<CreateMilestoneOutput>, SdkError<CreateMilestoneOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientRequestToken == nil {
                copiedInput.clientRequestToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: CreateMilestoneInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateMilestoneInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateMilestoneInput, CreateMilestoneOutput, CreateMilestoneOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateMilestoneInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Create a new workload.</p>
    ///         <p>The owner of a workload can share the workload with other AWS accounts and IAM users
    ///             in the same AWS Region. Only the owner of a workload can delete it.</p>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/wellarchitected/latest/userguide/define-workload.html">Defining a Workload</a> in the
    ///                 <i>AWS Well-Architected Tool User Guide</i>.</p>
    public func createWorkload(input: CreateWorkloadInput, completion: @escaping (SdkResult<CreateWorkloadOutput, CreateWorkloadOutputError>) -> Void)
    {
        let urlPath = "/workloads"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createWorkload")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateWorkloadInput, CreateWorkloadOutput, CreateWorkloadOutputError>(id: "createWorkload")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<CreateWorkloadOutput>, SdkError<CreateWorkloadOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientRequestToken == nil {
                copiedInput.clientRequestToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: CreateWorkloadInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateWorkloadInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateWorkloadInput, CreateWorkloadOutput, CreateWorkloadOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateWorkloadInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Create a workload share.</p>
    ///         <p>The owner of a workload can share it with other AWS accounts and IAM users in the same
    ///             AWS Region. Shared access to a workload is not removed until the workload invitation is
    ///             deleted.</p>
    ///         <p>For more information, see <a href="https://docs.aws.amazon.com/wellarchitected/latest/userguide/workloads-sharing.html">Sharing a Workload</a> in the
    ///                 <i>AWS Well-Architected Tool User Guide</i>.</p>
    public func createWorkloadShare(input: CreateWorkloadShareInput, completion: @escaping (SdkResult<CreateWorkloadShareOutput, CreateWorkloadShareOutputError>) -> Void)
    {
        guard let workloadId = input.workloadId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component workloadId unexpectedly nil"))))
            return
        }
        let urlPath = "/workloads/\(workloadId)/shares"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createWorkloadShare")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateWorkloadShareInput, CreateWorkloadShareOutput, CreateWorkloadShareOutputError>(id: "createWorkloadShare")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<CreateWorkloadShareOutput>, SdkError<CreateWorkloadShareOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientRequestToken == nil {
                copiedInput.clientRequestToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: CreateWorkloadShareInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateWorkloadShareInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateWorkloadShareInput, CreateWorkloadShareOutput, CreateWorkloadShareOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateWorkloadShareInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Delete an existing workload.</p>
    public func deleteWorkload(input: DeleteWorkloadInput, completion: @escaping (SdkResult<DeleteWorkloadOutput, DeleteWorkloadOutputError>) -> Void)
    {
        guard let workloadId = input.workloadId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component workloadId unexpectedly nil"))))
            return
        }
        let urlPath = "/workloads/\(workloadId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteWorkload")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteWorkloadInput, DeleteWorkloadOutput, DeleteWorkloadOutputError>(id: "deleteWorkload")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<DeleteWorkloadOutput>, SdkError<DeleteWorkloadOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientRequestToken == nil {
                copiedInput.clientRequestToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: DeleteWorkloadInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteWorkloadInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteWorkloadInput, DeleteWorkloadOutput, DeleteWorkloadOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Delete a workload share.</p>
    public func deleteWorkloadShare(input: DeleteWorkloadShareInput, completion: @escaping (SdkResult<DeleteWorkloadShareOutput, DeleteWorkloadShareOutputError>) -> Void)
    {
        guard let workloadId = input.workloadId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component workloadId unexpectedly nil"))))
            return
        }
        guard let shareId = input.shareId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component shareId unexpectedly nil"))))
            return
        }
        let urlPath = "/workloads/\(workloadId)/shares/\(shareId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteWorkloadShare")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteWorkloadShareInput, DeleteWorkloadShareOutput, DeleteWorkloadShareOutputError>(id: "deleteWorkloadShare")
        operation.addDefaultOperationMiddlewares()
        operation.initializeStep.intercept(position: .before, id: "IdempotencyTokenMiddleware") { (context, input, next) -> Result<OperationOutput<DeleteWorkloadShareOutput>, SdkError<DeleteWorkloadShareOutputError>> in
            let idempotencyTokenGenerator = context.getIdempotencyTokenGenerator()
            var copiedInput = input
            if input.clientRequestToken == nil {
                copiedInput.clientRequestToken = idempotencyTokenGenerator.generateToken()
            }
            return next.handle(context: context, input: copiedInput)
        }
        operation.serializeStep.intercept(position: .before, middleware: DeleteWorkloadShareInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteWorkloadShareInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteWorkloadShareInput, DeleteWorkloadShareOutput, DeleteWorkloadShareOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Disassociate a lens from a workload.</p>
    ///         <note>
    ///             <p>The AWS Well-Architected Framework lens (<code>wellarchitected</code>) cannot be
    ///                 removed from a workload.</p>
    ///         </note>
    public func disassociateLenses(input: DisassociateLensesInput, completion: @escaping (SdkResult<DisassociateLensesOutput, DisassociateLensesOutputError>) -> Void)
    {
        guard let workloadId = input.workloadId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component workloadId unexpectedly nil"))))
            return
        }
        let urlPath = "/workloads/\(workloadId)/disassociateLenses"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .patch)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disassociateLenses")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisassociateLensesInput, DisassociateLensesOutput, DisassociateLensesOutputError>(id: "disassociateLenses")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisassociateLensesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisassociateLensesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisassociateLensesInput, DisassociateLensesOutput, DisassociateLensesOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: DisassociateLensesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Get lens review.</p>
    public func getAnswer(input: GetAnswerInput, completion: @escaping (SdkResult<GetAnswerOutput, GetAnswerOutputError>) -> Void)
    {
        guard let workloadId = input.workloadId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component workloadId unexpectedly nil"))))
            return
        }
        guard let lensAlias = input.lensAlias else {
            completion(.failure(.client(ClientError.serializationFailed("uri component lensAlias unexpectedly nil"))))
            return
        }
        guard let questionId = input.questionId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component questionId unexpectedly nil"))))
            return
        }
        let urlPath = "/workloads/\(workloadId)/lensReviews/\(lensAlias)/answers/\(questionId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getAnswer")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetAnswerInput, GetAnswerOutput, GetAnswerOutputError>(id: "getAnswer")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetAnswerInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetAnswerInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetAnswerInput, GetAnswerOutput, GetAnswerOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Get lens review.</p>
    public func getLensReview(input: GetLensReviewInput, completion: @escaping (SdkResult<GetLensReviewOutput, GetLensReviewOutputError>) -> Void)
    {
        guard let workloadId = input.workloadId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component workloadId unexpectedly nil"))))
            return
        }
        guard let lensAlias = input.lensAlias else {
            completion(.failure(.client(ClientError.serializationFailed("uri component lensAlias unexpectedly nil"))))
            return
        }
        let urlPath = "/workloads/\(workloadId)/lensReviews/\(lensAlias)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getLensReview")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetLensReviewInput, GetLensReviewOutput, GetLensReviewOutputError>(id: "getLensReview")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetLensReviewInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetLensReviewInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetLensReviewInput, GetLensReviewOutput, GetLensReviewOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Get lens review report.</p>
    public func getLensReviewReport(input: GetLensReviewReportInput, completion: @escaping (SdkResult<GetLensReviewReportOutput, GetLensReviewReportOutputError>) -> Void)
    {
        guard let workloadId = input.workloadId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component workloadId unexpectedly nil"))))
            return
        }
        guard let lensAlias = input.lensAlias else {
            completion(.failure(.client(ClientError.serializationFailed("uri component lensAlias unexpectedly nil"))))
            return
        }
        let urlPath = "/workloads/\(workloadId)/lensReviews/\(lensAlias)/report"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getLensReviewReport")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetLensReviewReportInput, GetLensReviewReportOutput, GetLensReviewReportOutputError>(id: "getLensReviewReport")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetLensReviewReportInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetLensReviewReportInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetLensReviewReportInput, GetLensReviewReportOutput, GetLensReviewReportOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Get lens version differences.</p>
    public func getLensVersionDifference(input: GetLensVersionDifferenceInput, completion: @escaping (SdkResult<GetLensVersionDifferenceOutput, GetLensVersionDifferenceOutputError>) -> Void)
    {
        guard let lensAlias = input.lensAlias else {
            completion(.failure(.client(ClientError.serializationFailed("uri component lensAlias unexpectedly nil"))))
            return
        }
        let urlPath = "/lenses/\(lensAlias)/versionDifference"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getLensVersionDifference")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetLensVersionDifferenceInput, GetLensVersionDifferenceOutput, GetLensVersionDifferenceOutputError>(id: "getLensVersionDifference")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetLensVersionDifferenceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetLensVersionDifferenceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetLensVersionDifferenceInput, GetLensVersionDifferenceOutput, GetLensVersionDifferenceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Get a milestone for an existing workload.</p>
    public func getMilestone(input: GetMilestoneInput, completion: @escaping (SdkResult<GetMilestoneOutput, GetMilestoneOutputError>) -> Void)
    {
        guard let workloadId = input.workloadId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component workloadId unexpectedly nil"))))
            return
        }
        let milestoneNumber = input.milestoneNumber
        let urlPath = "/workloads/\(workloadId)/milestones/\(milestoneNumber)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getMilestone")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetMilestoneInput, GetMilestoneOutput, GetMilestoneOutputError>(id: "getMilestone")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetMilestoneInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetMilestoneInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetMilestoneInput, GetMilestoneOutput, GetMilestoneOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Get an existing workload.</p>
    public func getWorkload(input: GetWorkloadInput, completion: @escaping (SdkResult<GetWorkloadOutput, GetWorkloadOutputError>) -> Void)
    {
        guard let workloadId = input.workloadId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component workloadId unexpectedly nil"))))
            return
        }
        let urlPath = "/workloads/\(workloadId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getWorkload")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetWorkloadInput, GetWorkloadOutput, GetWorkloadOutputError>(id: "getWorkload")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetWorkloadInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetWorkloadInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetWorkloadInput, GetWorkloadOutput, GetWorkloadOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>List of answers.</p>
    public func listAnswers(input: ListAnswersInput, completion: @escaping (SdkResult<ListAnswersOutput, ListAnswersOutputError>) -> Void)
    {
        guard let workloadId = input.workloadId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component workloadId unexpectedly nil"))))
            return
        }
        guard let lensAlias = input.lensAlias else {
            completion(.failure(.client(ClientError.serializationFailed("uri component lensAlias unexpectedly nil"))))
            return
        }
        let urlPath = "/workloads/\(workloadId)/lensReviews/\(lensAlias)/answers"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listAnswers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListAnswersInput, ListAnswersOutput, ListAnswersOutputError>(id: "listAnswers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListAnswersInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListAnswersInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListAnswersInput, ListAnswersOutput, ListAnswersOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>List lens review improvements.</p>
    public func listLensReviewImprovements(input: ListLensReviewImprovementsInput, completion: @escaping (SdkResult<ListLensReviewImprovementsOutput, ListLensReviewImprovementsOutputError>) -> Void)
    {
        guard let workloadId = input.workloadId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component workloadId unexpectedly nil"))))
            return
        }
        guard let lensAlias = input.lensAlias else {
            completion(.failure(.client(ClientError.serializationFailed("uri component lensAlias unexpectedly nil"))))
            return
        }
        let urlPath = "/workloads/\(workloadId)/lensReviews/\(lensAlias)/improvements"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listLensReviewImprovements")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListLensReviewImprovementsInput, ListLensReviewImprovementsOutput, ListLensReviewImprovementsOutputError>(id: "listLensReviewImprovements")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListLensReviewImprovementsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListLensReviewImprovementsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListLensReviewImprovementsInput, ListLensReviewImprovementsOutput, ListLensReviewImprovementsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>List lens reviews.</p>
    public func listLensReviews(input: ListLensReviewsInput, completion: @escaping (SdkResult<ListLensReviewsOutput, ListLensReviewsOutputError>) -> Void)
    {
        guard let workloadId = input.workloadId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component workloadId unexpectedly nil"))))
            return
        }
        let urlPath = "/workloads/\(workloadId)/lensReviews"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listLensReviews")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListLensReviewsInput, ListLensReviewsOutput, ListLensReviewsOutputError>(id: "listLensReviews")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListLensReviewsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListLensReviewsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListLensReviewsInput, ListLensReviewsOutput, ListLensReviewsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>List the available lenses.</p>
    public func listLenses(input: ListLensesInput, completion: @escaping (SdkResult<ListLensesOutput, ListLensesOutputError>) -> Void)
    {
        let urlPath = "/lenses"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listLenses")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListLensesInput, ListLensesOutput, ListLensesOutputError>(id: "listLenses")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListLensesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListLensesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListLensesInput, ListLensesOutput, ListLensesOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>List all milestones for an existing workload.</p>
    public func listMilestones(input: ListMilestonesInput, completion: @escaping (SdkResult<ListMilestonesOutput, ListMilestonesOutputError>) -> Void)
    {
        guard let workloadId = input.workloadId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component workloadId unexpectedly nil"))))
            return
        }
        let urlPath = "/workloads/\(workloadId)/milestonesSummaries"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listMilestones")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListMilestonesInput, ListMilestonesOutput, ListMilestonesOutputError>(id: "listMilestones")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListMilestonesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListMilestonesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListMilestonesInput, ListMilestonesOutput, ListMilestonesOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: ListMilestonesInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>List lens notifications.</p>
    public func listNotifications(input: ListNotificationsInput, completion: @escaping (SdkResult<ListNotificationsOutput, ListNotificationsOutputError>) -> Void)
    {
        let urlPath = "/notifications"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listNotifications")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListNotificationsInput, ListNotificationsOutput, ListNotificationsOutputError>(id: "listNotifications")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListNotificationsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListNotificationsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListNotificationsInput, ListNotificationsOutput, ListNotificationsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: ListNotificationsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>List  the workload invitations.</p>
    public func listShareInvitations(input: ListShareInvitationsInput, completion: @escaping (SdkResult<ListShareInvitationsOutput, ListShareInvitationsOutputError>) -> Void)
    {
        let urlPath = "/shareInvitations"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listShareInvitations")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListShareInvitationsInput, ListShareInvitationsOutput, ListShareInvitationsOutputError>(id: "listShareInvitations")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListShareInvitationsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListShareInvitationsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListShareInvitationsInput, ListShareInvitationsOutput, ListShareInvitationsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>List the tags for a resource.</p>
    public func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutput, ListTagsForResourceOutputError>) -> Void)
    {
        guard let workloadArn = input.workloadArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component workloadArn unexpectedly nil"))))
            return
        }
        let urlPath = "/tags/\(workloadArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listTagsForResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListTagsForResourceInput, ListTagsForResourceOutput, ListTagsForResourceOutputError>(id: "listTagsForResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListTagsForResourceInput, ListTagsForResourceOutput, ListTagsForResourceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>List the workload shares associated with the workload.</p>
    public func listWorkloadShares(input: ListWorkloadSharesInput, completion: @escaping (SdkResult<ListWorkloadSharesOutput, ListWorkloadSharesOutputError>) -> Void)
    {
        guard let workloadId = input.workloadId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component workloadId unexpectedly nil"))))
            return
        }
        let urlPath = "/workloads/\(workloadId)/shares"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listWorkloadShares")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListWorkloadSharesInput, ListWorkloadSharesOutput, ListWorkloadSharesOutputError>(id: "listWorkloadShares")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListWorkloadSharesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListWorkloadSharesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListWorkloadSharesInput, ListWorkloadSharesOutput, ListWorkloadSharesOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>List workloads. Paginated.</p>
    public func listWorkloads(input: ListWorkloadsInput, completion: @escaping (SdkResult<ListWorkloadsOutput, ListWorkloadsOutputError>) -> Void)
    {
        let urlPath = "/workloadsSummaries"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listWorkloads")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListWorkloadsInput, ListWorkloadsOutput, ListWorkloadsOutputError>(id: "listWorkloads")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListWorkloadsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListWorkloadsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListWorkloadsInput, ListWorkloadsOutput, ListWorkloadsOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: ListWorkloadsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Adds one or more tags to the specified resource.</p>
    public func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutput, TagResourceOutputError>) -> Void)
    {
        guard let workloadArn = input.workloadArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component workloadArn unexpectedly nil"))))
            return
        }
        let urlPath = "/tags/\(workloadArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "tagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<TagResourceInput, TagResourceOutput, TagResourceOutputError>(id: "tagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<TagResourceInput, TagResourceOutput, TagResourceOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes specified tags from a resource.</p>
    public func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutput, UntagResourceOutputError>) -> Void)
    {
        guard let workloadArn = input.workloadArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component workloadArn unexpectedly nil"))))
            return
        }
        let urlPath = "/tags/\(workloadArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "untagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UntagResourceInput, UntagResourceOutput, UntagResourceOutputError>(id: "untagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UntagResourceInput, UntagResourceOutput, UntagResourceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Update the answer to a specific question in a workload review.</p>
    public func updateAnswer(input: UpdateAnswerInput, completion: @escaping (SdkResult<UpdateAnswerOutput, UpdateAnswerOutputError>) -> Void)
    {
        guard let workloadId = input.workloadId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component workloadId unexpectedly nil"))))
            return
        }
        guard let lensAlias = input.lensAlias else {
            completion(.failure(.client(ClientError.serializationFailed("uri component lensAlias unexpectedly nil"))))
            return
        }
        guard let questionId = input.questionId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component questionId unexpectedly nil"))))
            return
        }
        let urlPath = "/workloads/\(workloadId)/lensReviews/\(lensAlias)/answers/\(questionId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .patch)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateAnswer")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateAnswerInput, UpdateAnswerOutput, UpdateAnswerOutputError>(id: "updateAnswer")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateAnswerInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateAnswerInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateAnswerInput, UpdateAnswerOutput, UpdateAnswerOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateAnswerInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Update lens review.</p>
    public func updateLensReview(input: UpdateLensReviewInput, completion: @escaping (SdkResult<UpdateLensReviewOutput, UpdateLensReviewOutputError>) -> Void)
    {
        guard let workloadId = input.workloadId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component workloadId unexpectedly nil"))))
            return
        }
        guard let lensAlias = input.lensAlias else {
            completion(.failure(.client(ClientError.serializationFailed("uri component lensAlias unexpectedly nil"))))
            return
        }
        let urlPath = "/workloads/\(workloadId)/lensReviews/\(lensAlias)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .patch)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateLensReview")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateLensReviewInput, UpdateLensReviewOutput, UpdateLensReviewOutputError>(id: "updateLensReview")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateLensReviewInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateLensReviewInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateLensReviewInput, UpdateLensReviewOutput, UpdateLensReviewOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateLensReviewInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Update a workload invitation.</p>
    public func updateShareInvitation(input: UpdateShareInvitationInput, completion: @escaping (SdkResult<UpdateShareInvitationOutput, UpdateShareInvitationOutputError>) -> Void)
    {
        guard let shareInvitationId = input.shareInvitationId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component shareInvitationId unexpectedly nil"))))
            return
        }
        let urlPath = "/shareInvitations/\(shareInvitationId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .patch)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateShareInvitation")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateShareInvitationInput, UpdateShareInvitationOutput, UpdateShareInvitationOutputError>(id: "updateShareInvitation")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateShareInvitationInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateShareInvitationInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateShareInvitationInput, UpdateShareInvitationOutput, UpdateShareInvitationOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateShareInvitationInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Update an existing workload.</p>
    public func updateWorkload(input: UpdateWorkloadInput, completion: @escaping (SdkResult<UpdateWorkloadOutput, UpdateWorkloadOutputError>) -> Void)
    {
        guard let workloadId = input.workloadId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component workloadId unexpectedly nil"))))
            return
        }
        let urlPath = "/workloads/\(workloadId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .patch)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateWorkload")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateWorkloadInput, UpdateWorkloadOutput, UpdateWorkloadOutputError>(id: "updateWorkload")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateWorkloadInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateWorkloadInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateWorkloadInput, UpdateWorkloadOutput, UpdateWorkloadOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateWorkloadInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Update a workload share.</p>
    public func updateWorkloadShare(input: UpdateWorkloadShareInput, completion: @escaping (SdkResult<UpdateWorkloadShareOutput, UpdateWorkloadShareOutputError>) -> Void)
    {
        guard let workloadId = input.workloadId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component workloadId unexpectedly nil"))))
            return
        }
        guard let shareId = input.shareId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component shareId unexpectedly nil"))))
            return
        }
        let urlPath = "/workloads/\(workloadId)/shares/\(shareId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .patch)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateWorkloadShare")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateWorkloadShareInput, UpdateWorkloadShareOutput, UpdateWorkloadShareOutputError>(id: "updateWorkloadShare")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateWorkloadShareInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateWorkloadShareInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateWorkloadShareInput, UpdateWorkloadShareOutput, UpdateWorkloadShareOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateWorkloadShareInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Upgrade lens review.</p>
    public func upgradeLensReview(input: UpgradeLensReviewInput, completion: @escaping (SdkResult<UpgradeLensReviewOutput, UpgradeLensReviewOutputError>) -> Void)
    {
        guard let workloadId = input.workloadId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component workloadId unexpectedly nil"))))
            return
        }
        guard let lensAlias = input.lensAlias else {
            completion(.failure(.client(ClientError.serializationFailed("uri component lensAlias unexpectedly nil"))))
            return
        }
        let urlPath = "/workloads/\(workloadId)/lensReviews/\(lensAlias)/upgrade"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .put)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "upgradeLensReview")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "wellarchitected.\(config.region).amazonaws.com")
                      .withSigningName(value: "wellarchitected")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpgradeLensReviewInput, UpgradeLensReviewOutput, UpgradeLensReviewOutputError>(id: "upgradeLensReview")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpgradeLensReviewInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpgradeLensReviewInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpgradeLensReviewInput, UpgradeLensReviewOutput, UpgradeLensReviewOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpgradeLensReviewInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
