// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateWorkloadInputBody: Equatable {
    public let workloadName: String?
    public let description: String?
    public let environment: WorkloadEnvironment?
    public let accountIds: [String]?
    public let awsRegions: [String]?
    public let nonAwsRegions: [String]?
    public let pillarPriorities: [String]?
    public let architecturalDesign: String?
    public let reviewOwner: String?
    public let isReviewOwnerUpdateAcknowledged: Bool
    public let industryType: String?
    public let industry: String?
    public let notes: String?
    public let improvementStatus: WorkloadImprovementStatus?
}

extension UpdateWorkloadInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accountIds = "AccountIds"
        case architecturalDesign = "ArchitecturalDesign"
        case awsRegions = "AwsRegions"
        case description = "Description"
        case environment = "Environment"
        case improvementStatus = "ImprovementStatus"
        case industry = "Industry"
        case industryType = "IndustryType"
        case isReviewOwnerUpdateAcknowledged = "IsReviewOwnerUpdateAcknowledged"
        case nonAwsRegions = "NonAwsRegions"
        case notes = "Notes"
        case pillarPriorities = "PillarPriorities"
        case reviewOwner = "ReviewOwner"
        case workloadName = "WorkloadName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workloadNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workloadName)
        workloadName = workloadNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let environmentDecoded = try containerValues.decodeIfPresent(WorkloadEnvironment.self, forKey: .environment)
        environment = environmentDecoded
        let accountIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .accountIds)
        var accountIdsDecoded0:[String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [String]()
            for string0 in accountIdsContainer {
                accountIdsDecoded0?.append(string0)
            }
        }
        accountIds = accountIdsDecoded0
        let awsRegionsContainer = try containerValues.decodeIfPresent([String].self, forKey: .awsRegions)
        var awsRegionsDecoded0:[String]? = nil
        if let awsRegionsContainer = awsRegionsContainer {
            awsRegionsDecoded0 = [String]()
            for string0 in awsRegionsContainer {
                awsRegionsDecoded0?.append(string0)
            }
        }
        awsRegions = awsRegionsDecoded0
        let nonAwsRegionsContainer = try containerValues.decodeIfPresent([String].self, forKey: .nonAwsRegions)
        var nonAwsRegionsDecoded0:[String]? = nil
        if let nonAwsRegionsContainer = nonAwsRegionsContainer {
            nonAwsRegionsDecoded0 = [String]()
            for string0 in nonAwsRegionsContainer {
                nonAwsRegionsDecoded0?.append(string0)
            }
        }
        nonAwsRegions = nonAwsRegionsDecoded0
        let pillarPrioritiesContainer = try containerValues.decodeIfPresent([String].self, forKey: .pillarPriorities)
        var pillarPrioritiesDecoded0:[String]? = nil
        if let pillarPrioritiesContainer = pillarPrioritiesContainer {
            pillarPrioritiesDecoded0 = [String]()
            for string0 in pillarPrioritiesContainer {
                pillarPrioritiesDecoded0?.append(string0)
            }
        }
        pillarPriorities = pillarPrioritiesDecoded0
        let architecturalDesignDecoded = try containerValues.decodeIfPresent(String.self, forKey: .architecturalDesign)
        architecturalDesign = architecturalDesignDecoded
        let reviewOwnerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reviewOwner)
        reviewOwner = reviewOwnerDecoded
        let isReviewOwnerUpdateAcknowledgedDecoded = try containerValues.decode(Bool.self, forKey: .isReviewOwnerUpdateAcknowledged)
        isReviewOwnerUpdateAcknowledged = isReviewOwnerUpdateAcknowledgedDecoded
        let industryTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .industryType)
        industryType = industryTypeDecoded
        let industryDecoded = try containerValues.decodeIfPresent(String.self, forKey: .industry)
        industry = industryDecoded
        let notesDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notes)
        notes = notesDecoded
        let improvementStatusDecoded = try containerValues.decodeIfPresent(WorkloadImprovementStatus.self, forKey: .improvementStatus)
        improvementStatus = improvementStatusDecoded
    }
}
