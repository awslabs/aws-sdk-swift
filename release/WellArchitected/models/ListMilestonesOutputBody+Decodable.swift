// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListMilestonesOutputBody: Equatable {
    public let workloadId: String?
    public let milestoneSummaries: [MilestoneSummary]?
    public let nextToken: String?
}

extension ListMilestonesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case milestoneSummaries = "MilestoneSummaries"
        case nextToken = "NextToken"
        case workloadId = "WorkloadId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workloadIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workloadId)
        workloadId = workloadIdDecoded
        let milestoneSummariesContainer = try containerValues.decodeIfPresent([MilestoneSummary].self, forKey: .milestoneSummaries)
        var milestoneSummariesDecoded0:[MilestoneSummary]? = nil
        if let milestoneSummariesContainer = milestoneSummariesContainer {
            milestoneSummariesDecoded0 = [MilestoneSummary]()
            for structure0 in milestoneSummariesContainer {
                milestoneSummariesDecoded0?.append(structure0)
            }
        }
        milestoneSummaries = milestoneSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
