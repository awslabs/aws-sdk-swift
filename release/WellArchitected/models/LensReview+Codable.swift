// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LensReview: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case lensAlias = "LensAlias"
        case lensName = "LensName"
        case lensStatus = "LensStatus"
        case lensVersion = "LensVersion"
        case nextToken = "NextToken"
        case notes = "Notes"
        case pillarReviewSummaries = "PillarReviewSummaries"
        case riskCounts = "RiskCounts"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lensAlias = lensAlias {
            try encodeContainer.encode(lensAlias, forKey: .lensAlias)
        }
        if let lensName = lensName {
            try encodeContainer.encode(lensName, forKey: .lensName)
        }
        if let lensStatus = lensStatus {
            try encodeContainer.encode(lensStatus.rawValue, forKey: .lensStatus)
        }
        if let lensVersion = lensVersion {
            try encodeContainer.encode(lensVersion, forKey: .lensVersion)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let notes = notes {
            try encodeContainer.encode(notes, forKey: .notes)
        }
        if let pillarReviewSummaries = pillarReviewSummaries {
            var pillarReviewSummariesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pillarReviewSummaries)
            for pillarreviewsummaries0 in pillarReviewSummaries {
                try pillarReviewSummariesContainer.encode(pillarreviewsummaries0)
            }
        }
        if let riskCounts = riskCounts {
            var riskCountsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .riskCounts)
            for (dictKey0, riskcounts0) in riskCounts {
                try riskCountsContainer.encode(riskcounts0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let updatedAt = updatedAt {
            try encodeContainer.encode(updatedAt.timeIntervalSince1970, forKey: .updatedAt)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lensAliasDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lensAlias)
        lensAlias = lensAliasDecoded
        let lensVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lensVersion)
        lensVersion = lensVersionDecoded
        let lensNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lensName)
        lensName = lensNameDecoded
        let lensStatusDecoded = try containerValues.decodeIfPresent(LensStatus.self, forKey: .lensStatus)
        lensStatus = lensStatusDecoded
        let pillarReviewSummariesContainer = try containerValues.decodeIfPresent([PillarReviewSummary].self, forKey: .pillarReviewSummaries)
        var pillarReviewSummariesDecoded0:[PillarReviewSummary]? = nil
        if let pillarReviewSummariesContainer = pillarReviewSummariesContainer {
            pillarReviewSummariesDecoded0 = [PillarReviewSummary]()
            for structure0 in pillarReviewSummariesContainer {
                pillarReviewSummariesDecoded0?.append(structure0)
            }
        }
        pillarReviewSummaries = pillarReviewSummariesDecoded0
        let updatedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let notesDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notes)
        notes = notesDecoded
        let riskCountsContainer = try containerValues.decodeIfPresent([String:Int].self, forKey: .riskCounts)
        var riskCountsDecoded0: [String:Int]? = nil
        if let riskCountsContainer = riskCountsContainer {
            riskCountsDecoded0 = [String:Int]()
            for (key0, count0) in riskCountsContainer {
                riskCountsDecoded0?[key0] = count0
            }
        }
        riskCounts = riskCountsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
