// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LensReviewReport: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case base64String = "Base64String"
        case lensAlias = "LensAlias"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let base64String = base64String {
            try encodeContainer.encode(base64String, forKey: .base64String)
        }
        if let lensAlias = lensAlias {
            try encodeContainer.encode(lensAlias, forKey: .lensAlias)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lensAliasDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lensAlias)
        lensAlias = lensAliasDecoded
        let base64StringDecoded = try containerValues.decodeIfPresent(String.self, forKey: .base64String)
        base64String = base64StringDecoded
    }
}
