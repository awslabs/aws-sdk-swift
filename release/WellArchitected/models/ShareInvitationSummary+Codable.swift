// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ShareInvitationSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case permissionType = "PermissionType"
        case shareInvitationId = "ShareInvitationId"
        case sharedBy = "SharedBy"
        case sharedWith = "SharedWith"
        case workloadId = "WorkloadId"
        case workloadName = "WorkloadName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let permissionType = permissionType {
            try encodeContainer.encode(permissionType.rawValue, forKey: .permissionType)
        }
        if let shareInvitationId = shareInvitationId {
            try encodeContainer.encode(shareInvitationId, forKey: .shareInvitationId)
        }
        if let sharedBy = sharedBy {
            try encodeContainer.encode(sharedBy, forKey: .sharedBy)
        }
        if let sharedWith = sharedWith {
            try encodeContainer.encode(sharedWith, forKey: .sharedWith)
        }
        if let workloadId = workloadId {
            try encodeContainer.encode(workloadId, forKey: .workloadId)
        }
        if let workloadName = workloadName {
            try encodeContainer.encode(workloadName, forKey: .workloadName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let shareInvitationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .shareInvitationId)
        shareInvitationId = shareInvitationIdDecoded
        let sharedByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sharedBy)
        sharedBy = sharedByDecoded
        let sharedWithDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sharedWith)
        sharedWith = sharedWithDecoded
        let permissionTypeDecoded = try containerValues.decodeIfPresent(PermissionType.self, forKey: .permissionType)
        permissionType = permissionTypeDecoded
        let workloadNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workloadName)
        workloadName = workloadNameDecoded
        let workloadIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workloadId)
        workloadId = workloadIdDecoded
    }
}
