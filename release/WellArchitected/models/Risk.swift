// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The risk for a given workload, lens review, pillar, or question.</p>
public enum Risk {
    case high
    case medium
    case `none`
    case notApplicable
    case unanswered
    case sdkUnknown(String)
}

extension Risk : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Risk] {
        return [
            .high,
            .medium,
            .none,
            .notApplicable,
            .unanswered,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .high: return "HIGH"
        case .medium: return "MEDIUM"
        case .none: return "NONE"
        case .notApplicable: return "NOT_APPLICABLE"
        case .unanswered: return "UNANSWERED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Risk(rawValue: rawValue) ?? Risk.sdkUnknown(rawValue)
    }
}
