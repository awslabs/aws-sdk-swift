// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLensesOutputBody: Equatable {
    public let lensSummaries: [LensSummary]?
    public let nextToken: String?
}

extension ListLensesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case lensSummaries = "LensSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lensSummariesContainer = try containerValues.decodeIfPresent([LensSummary].self, forKey: .lensSummaries)
        var lensSummariesDecoded0:[LensSummary]? = nil
        if let lensSummariesContainer = lensSummariesContainer {
            lensSummariesDecoded0 = [LensSummary]()
            for structure0 in lensSummariesContainer {
                lensSummariesDecoded0?.append(structure0)
            }
        }
        lensSummaries = lensSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
