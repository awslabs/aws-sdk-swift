// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LensSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case lensAlias = "LensAlias"
        case lensName = "LensName"
        case lensVersion = "LensVersion"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lensAlias = lensAlias {
            try encodeContainer.encode(lensAlias, forKey: .lensAlias)
        }
        if let lensName = lensName {
            try encodeContainer.encode(lensName, forKey: .lensName)
        }
        if let lensVersion = lensVersion {
            try encodeContainer.encode(lensVersion, forKey: .lensVersion)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lensAliasDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lensAlias)
        lensAlias = lensAliasDecoded
        let lensVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lensVersion)
        lensVersion = lensVersionDecoded
        let lensNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lensName)
        lensName = lensNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
    }
}
