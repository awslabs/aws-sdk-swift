// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Choice: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case choiceId = "ChoiceId"
        case description = "Description"
        case title = "Title"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let choiceId = choiceId {
            try encodeContainer.encode(choiceId, forKey: .choiceId)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let title = title {
            try encodeContainer.encode(title, forKey: .title)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let choiceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .choiceId)
        choiceId = choiceIdDecoded
        let titleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .title)
        title = titleDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
    }
}
