// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLensReviewImprovementsOutputBody: Equatable {
    public let workloadId: String?
    public let milestoneNumber: Int
    public let lensAlias: String?
    public let improvementSummaries: [ImprovementSummary]?
    public let nextToken: String?
}

extension ListLensReviewImprovementsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case improvementSummaries = "ImprovementSummaries"
        case lensAlias = "LensAlias"
        case milestoneNumber = "MilestoneNumber"
        case nextToken = "NextToken"
        case workloadId = "WorkloadId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workloadIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workloadId)
        workloadId = workloadIdDecoded
        let milestoneNumberDecoded = try containerValues.decode(Int.self, forKey: .milestoneNumber)
        milestoneNumber = milestoneNumberDecoded
        let lensAliasDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lensAlias)
        lensAlias = lensAliasDecoded
        let improvementSummariesContainer = try containerValues.decodeIfPresent([ImprovementSummary].self, forKey: .improvementSummaries)
        var improvementSummariesDecoded0:[ImprovementSummary]? = nil
        if let improvementSummariesContainer = improvementSummariesContainer {
            improvementSummariesDecoded0 = [ImprovementSummary]()
            for structure0 in improvementSummariesContainer {
                improvementSummariesDecoded0?.append(structure0)
            }
        }
        improvementSummaries = improvementSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
