// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLensReviewsOutputBody: Equatable {
    public let workloadId: String?
    public let milestoneNumber: Int
    public let lensReviewSummaries: [LensReviewSummary]?
    public let nextToken: String?
}

extension ListLensReviewsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case lensReviewSummaries = "LensReviewSummaries"
        case milestoneNumber = "MilestoneNumber"
        case nextToken = "NextToken"
        case workloadId = "WorkloadId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workloadIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workloadId)
        workloadId = workloadIdDecoded
        let milestoneNumberDecoded = try containerValues.decode(Int.self, forKey: .milestoneNumber)
        milestoneNumber = milestoneNumberDecoded
        let lensReviewSummariesContainer = try containerValues.decodeIfPresent([LensReviewSummary].self, forKey: .lensReviewSummaries)
        var lensReviewSummariesDecoded0:[LensReviewSummary]? = nil
        if let lensReviewSummariesContainer = lensReviewSummariesContainer {
            lensReviewSummariesDecoded0 = [LensReviewSummary]()
            for structure0 in lensReviewSummariesContainer {
                lensReviewSummariesDecoded0?.append(structure0)
            }
        }
        lensReviewSummaries = lensReviewSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
