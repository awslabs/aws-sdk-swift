// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateWorkloadInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountIds = "AccountIds"
        case architecturalDesign = "ArchitecturalDesign"
        case awsRegions = "AwsRegions"
        case description = "Description"
        case environment = "Environment"
        case improvementStatus = "ImprovementStatus"
        case industry = "Industry"
        case industryType = "IndustryType"
        case isReviewOwnerUpdateAcknowledged = "IsReviewOwnerUpdateAcknowledged"
        case nonAwsRegions = "NonAwsRegions"
        case notes = "Notes"
        case pillarPriorities = "PillarPriorities"
        case reviewOwner = "ReviewOwner"
        case workloadName = "WorkloadName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for workloadaccountids0 in accountIds {
                try accountIdsContainer.encode(workloadaccountids0)
            }
        }
        if let architecturalDesign = architecturalDesign {
            try encodeContainer.encode(architecturalDesign, forKey: .architecturalDesign)
        }
        if let awsRegions = awsRegions {
            var awsRegionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .awsRegions)
            for workloadawsregions0 in awsRegions {
                try awsRegionsContainer.encode(workloadawsregions0)
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let environment = environment {
            try encodeContainer.encode(environment.rawValue, forKey: .environment)
        }
        if let improvementStatus = improvementStatus {
            try encodeContainer.encode(improvementStatus.rawValue, forKey: .improvementStatus)
        }
        if let industry = industry {
            try encodeContainer.encode(industry, forKey: .industry)
        }
        if let industryType = industryType {
            try encodeContainer.encode(industryType, forKey: .industryType)
        }
        if isReviewOwnerUpdateAcknowledged != false {
            try encodeContainer.encode(isReviewOwnerUpdateAcknowledged, forKey: .isReviewOwnerUpdateAcknowledged)
        }
        if let nonAwsRegions = nonAwsRegions {
            var nonAwsRegionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nonAwsRegions)
            for workloadnonawsregions0 in nonAwsRegions {
                try nonAwsRegionsContainer.encode(workloadnonawsregions0)
            }
        }
        if let notes = notes {
            try encodeContainer.encode(notes, forKey: .notes)
        }
        if let pillarPriorities = pillarPriorities {
            var pillarPrioritiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pillarPriorities)
            for workloadpillarpriorities0 in pillarPriorities {
                try pillarPrioritiesContainer.encode(workloadpillarpriorities0)
            }
        }
        if let reviewOwner = reviewOwner {
            try encodeContainer.encode(reviewOwner, forKey: .reviewOwner)
        }
        if let workloadName = workloadName {
            try encodeContainer.encode(workloadName, forKey: .workloadName)
        }
    }
}
