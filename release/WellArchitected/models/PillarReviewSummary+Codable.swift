// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PillarReviewSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case notes = "Notes"
        case pillarId = "PillarId"
        case pillarName = "PillarName"
        case riskCounts = "RiskCounts"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let notes = notes {
            try encodeContainer.encode(notes, forKey: .notes)
        }
        if let pillarId = pillarId {
            try encodeContainer.encode(pillarId, forKey: .pillarId)
        }
        if let pillarName = pillarName {
            try encodeContainer.encode(pillarName, forKey: .pillarName)
        }
        if let riskCounts = riskCounts {
            var riskCountsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .riskCounts)
            for (dictKey0, riskcounts0) in riskCounts {
                try riskCountsContainer.encode(riskcounts0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pillarIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pillarId)
        pillarId = pillarIdDecoded
        let pillarNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pillarName)
        pillarName = pillarNameDecoded
        let notesDecoded = try containerValues.decodeIfPresent(String.self, forKey: .notes)
        notes = notesDecoded
        let riskCountsContainer = try containerValues.decodeIfPresent([String:Int].self, forKey: .riskCounts)
        var riskCountsDecoded0: [String:Int]? = nil
        if let riskCountsContainer = riskCountsContainer {
            riskCountsDecoded0 = [String:Int]()
            for (key0, count0) in riskCountsContainer {
                riskCountsDecoded0?[key0] = count0
            }
        }
        riskCounts = riskCountsDecoded0
    }
}
