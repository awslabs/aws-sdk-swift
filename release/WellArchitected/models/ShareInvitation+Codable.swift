// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ShareInvitation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case shareInvitationId = "ShareInvitationId"
        case workloadId = "WorkloadId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let shareInvitationId = shareInvitationId {
            try encodeContainer.encode(shareInvitationId, forKey: .shareInvitationId)
        }
        if let workloadId = workloadId {
            try encodeContainer.encode(workloadId, forKey: .workloadId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let shareInvitationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .shareInvitationId)
        shareInvitationId = shareInvitationIdDecoded
        let workloadIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .workloadId)
        workloadId = workloadIdDecoded
    }
}
