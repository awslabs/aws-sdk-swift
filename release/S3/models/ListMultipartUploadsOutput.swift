// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ListMultipartUploadsOutput: Equatable {
    /// <p>The name of the bucket to which the multipart upload was initiated.</p>
    public let bucket: String?
    /// <p>If you specify a delimiter in the request, then the result returns each distinct key
    ///          prefix containing the delimiter in a <code>CommonPrefixes</code> element. The distinct key
    ///          prefixes are returned in the <code>Prefix</code> child element.</p>
    public let commonPrefixes: [CommonPrefix]?
    /// <p>Contains the delimiter you specified in the request. If you don't specify a delimiter in
    ///          your request, this element is absent from the response.</p>
    public let delimiter: String?
    /// <p>Encoding type used by Amazon S3 to encode object keys in the response.</p>
    ///          <p>If you specify <code>encoding-type</code> request parameter, Amazon S3 includes this element
    ///          in the response, and returns encoded key name values in the following response
    ///          elements:</p>
    ///
    ///          <p>
    ///             <code>Delimiter</code>, <code>KeyMarker</code>, <code>Prefix</code>,
    ///             <code>NextKeyMarker</code>, <code>Key</code>.</p>
    public let encodingType: EncodingType?
    /// <p>Indicates whether the returned list of multipart uploads is truncated. A value of true
    ///          indicates that the list was truncated. The list can be truncated if the number of multipart
    ///          uploads exceeds the limit allowed or specified by max uploads.</p>
    public let isTruncated: Bool
    /// <p>The key at or after which the listing began.</p>
    public let keyMarker: String?
    /// <p>Maximum number of multipart uploads that could have been included in the
    ///          response.</p>
    public let maxUploads: Int
    /// <p>When a list is truncated, this element specifies the value that should be used for the
    ///          key-marker request parameter in a subsequent request.</p>
    public let nextKeyMarker: String?
    /// <p>When a list is truncated, this element specifies the value that should be used for the
    ///             <code>upload-id-marker</code> request parameter in a subsequent request.</p>
    public let nextUploadIdMarker: String?
    /// <p>When a prefix is provided in the request, this field contains the specified prefix. The
    ///          result contains only keys starting with the specified prefix.</p>
    public let prefix: String?
    /// <p>Upload ID after which listing began.</p>
    public let uploadIdMarker: String?
    /// <p>Container for elements related to a particular multipart upload. A response can contain
    ///          zero or more <code>Upload</code> elements.</p>
    public let uploads: [MultipartUpload]?

    public init (
        bucket: String? = nil,
        commonPrefixes: [CommonPrefix]? = nil,
        delimiter: String? = nil,
        encodingType: EncodingType? = nil,
        isTruncated: Bool = false,
        keyMarker: String? = nil,
        maxUploads: Int = 0,
        nextKeyMarker: String? = nil,
        nextUploadIdMarker: String? = nil,
        prefix: String? = nil,
        uploadIdMarker: String? = nil,
        uploads: [MultipartUpload]? = nil
    )
    {
        self.bucket = bucket
        self.commonPrefixes = commonPrefixes
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.isTruncated = isTruncated
        self.keyMarker = keyMarker
        self.maxUploads = maxUploads
        self.nextKeyMarker = nextKeyMarker
        self.nextUploadIdMarker = nextUploadIdMarker
        self.prefix = prefix
        self.uploadIdMarker = uploadIdMarker
        self.uploads = uploads
    }
}
