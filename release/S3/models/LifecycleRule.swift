// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>A lifecycle rule for individual objects in an Amazon S3 bucket.</p>
public struct LifecycleRule: Equatable {
    /// <p>Specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will
    ///          wait before permanently removing all parts of the upload. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config">
    ///             Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy</a> in the
    ///             <i>Amazon S3 User Guide</i>.</p>
    public let abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload?
    /// <p>Specifies the expiration for the lifecycle of the object in the form of date, days and,
    ///          whether the object has a delete marker.</p>
    public let expiration: LifecycleExpiration?
    /// <p>The <code>Filter</code> is used to identify objects that a Lifecycle Rule applies to. A
    ///          <code>Filter</code> must have exactly one of <code>Prefix</code>, <code>Tag</code>, or
    ///          <code>And</code> specified. <code>Filter</code> is required if the <code>LifecycleRule</code>
    ///          does not containt a <code>Prefix</code> element.</p>
    public let filter: LifecycleRuleFilter?
    /// <p>Unique identifier for the rule. The value cannot be longer than 255 characters.</p>
    public let iD: String?
    /// <p>Specifies when noncurrent object versions expire. Upon expiration, Amazon S3 permanently
    ///          deletes the noncurrent object versions. You set this lifecycle configuration action on a
    ///          bucket that has versioning enabled (or suspended) to request that Amazon S3 delete noncurrent
    ///          object versions at a specific period in the object's lifetime.</p>
    public let noncurrentVersionExpiration: NoncurrentVersionExpiration?
    /// <p> Specifies the transition rule for the lifecycle rule that describes when noncurrent
    ///          objects transition to a specific storage class. If your bucket is versioning-enabled (or
    ///          versioning is suspended), you can set this action to request that Amazon S3 transition
    ///          noncurrent object versions to a specific storage class at a set period in the object's
    ///          lifetime. </p>
    public let noncurrentVersionTransitions: [NoncurrentVersionTransition]?
    /// <p>Prefix identifying one or more objects to which the rule applies. This is
    ///          no longer used; use <code>Filter</code> instead.</p>
    ///          <important>
    ///             <p>Replacement must be made for object keys containing special characters (such as carriage returns) when using
    ///          XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints">
    ///             XML related object key constraints</a>.</p>
    ///          </important>
    @available(*, deprecated)
    public let prefix: String?
    /// <p>If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not
    ///          currently being applied.</p>
    public let status: ExpirationStatus?
    /// <p>Specifies when an Amazon S3 object transitions to a specified storage class.</p>
    public let transitions: [Transition]?

    public init (
        abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload? = nil,
        expiration: LifecycleExpiration? = nil,
        filter: LifecycleRuleFilter? = nil,
        iD: String? = nil,
        noncurrentVersionExpiration: NoncurrentVersionExpiration? = nil,
        noncurrentVersionTransitions: [NoncurrentVersionTransition]? = nil,
        prefix: String? = nil,
        status: ExpirationStatus? = nil,
        transitions: [Transition]? = nil
    )
    {
        self.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload
        self.expiration = expiration
        self.filter = filter
        self.iD = iD
        self.noncurrentVersionExpiration = noncurrentVersionExpiration
        self.noncurrentVersionTransitions = noncurrentVersionTransitions
        self.prefix = prefix
        self.status = status
        self.transitions = transitions
    }
}
