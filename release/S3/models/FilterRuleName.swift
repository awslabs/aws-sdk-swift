// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum FilterRuleName {
    case prefix
    case suffix
    case sdkUnknown(String)
}

extension FilterRuleName : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [FilterRuleName] {
        return [
            .prefix,
            .suffix,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .prefix: return "prefix"
        case .suffix: return "suffix"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = FilterRuleName(rawValue: rawValue) ?? FilterRuleName.sdkUnknown(rawValue)
    }
}
