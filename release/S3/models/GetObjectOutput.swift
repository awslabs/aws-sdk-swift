// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetObjectOutput: Equatable {
    /// <p>Indicates that a range of bytes was specified.</p>
    public let acceptRanges: String?
    /// <p>Object data.</p>
    public let body: Data?
    /// <p>Indicates whether the object uses an S3 Bucket Key for server-side encryption with AWS KMS (SSE-KMS).</p>
    public let bucketKeyEnabled: Bool
    /// <p>Specifies caching behavior along the request/reply chain.</p>
    public let cacheControl: String?
    /// <p>Specifies presentational information for the object.</p>
    public let contentDisposition: String?
    /// <p>Specifies what content encodings have been applied to the object and thus what decoding
    ///          mechanisms must be applied to obtain the media-type referenced by the Content-Type header
    ///          field.</p>
    public let contentEncoding: String?
    /// <p>The language the content is in.</p>
    public let contentLanguage: String?
    /// <p>Size of the body in bytes.</p>
    public let contentLength: Int
    /// <p>The portion of the object returned in the response.</p>
    public let contentRange: String?
    /// <p>A standard MIME type describing the format of the object data.</p>
    public let contentType: String?
    /// <p>Specifies whether the object retrieved was (true) or was not (false) a Delete Marker. If
    ///          false, this response header does not appear in the response.</p>
    public let deleteMarker: Bool
    /// <p>An ETag is an opaque identifier assigned by a web server to a specific version of a
    ///          resource found at a URL.</p>
    public let eTag: String?
    /// <p>If the object expiration is configured (see PUT Bucket lifecycle), the response includes
    ///          this header. It includes the expiry-date and rule-id key-value pairs providing object
    ///          expiration information. The value of the rule-id is URL encoded.</p>
    public let expiration: String?
    /// <p>The date and time at which the object is no longer cacheable.</p>
    public let expires: Date?
    /// <p>Creation date of the object.</p>
    public let lastModified: Date?
    /// <p>A map of metadata to store with the object in S3.</p>
    public let metadata: [String:String]?
    /// <p>This is set to the number of metadata entries not returned in <code>x-amz-meta</code>
    ///          headers. This can happen if you create metadata using an API like SOAP that supports more
    ///          flexible metadata than the REST API. For example, using SOAP, you can create metadata whose
    ///          values are not legal HTTP headers.</p>
    public let missingMeta: Int
    /// <p>Indicates whether this object has an active legal hold. This field is only returned if
    ///          you have permission to view an object's legal hold status. </p>
    public let objectLockLegalHoldStatus: ObjectLockLegalHoldStatus?
    /// <p>The Object Lock mode currently in place for this object.</p>
    public let objectLockMode: ObjectLockMode?
    /// <p>The date and time when this object's Object Lock will expire.</p>
    public let objectLockRetainUntilDate: Date?
    /// <p>The count of parts this object has.</p>
    public let partsCount: Int
    /// <p>Amazon S3 can return this if your request involves a bucket that is either a source or
    ///          destination in a replication rule.</p>
    public let replicationStatus: ReplicationStatus?
    /// <p>If present, indicates that the requester was successfully charged for the
    ///          request.</p>
    public let requestCharged: RequestCharged?
    /// <p>Provides information about object restoration action and expiration time of the
    ///          restored object copy.</p>
    public let restore: String?
    /// <p>If server-side encryption with a customer-provided encryption key was requested, the
    ///          response will include this header confirming the encryption algorithm used.</p>
    public let sSECustomerAlgorithm: String?
    /// <p>If server-side encryption with a customer-provided encryption key was requested, the
    ///          response will include this header to provide round-trip message integrity verification of
    ///          the customer-provided encryption key.</p>
    public let sSECustomerKeyMD5: String?
    /// <p>If present, specifies the ID of the AWS Key Management Service (AWS KMS) symmetric
    ///          customer managed customer master key (CMK) that was used for the object.</p>
    public let sSEKMSKeyId: String?
    /// <p>The server-side encryption algorithm used when storing this object in Amazon S3 (for example,
    ///          AES256, aws:kms).</p>
    public let serverSideEncryption: ServerSideEncryption?
    /// <p>Provides storage class information of the object. Amazon S3 returns this header for all
    ///          objects except for S3 Standard storage class objects.</p>
    public let storageClass: StorageClass?
    /// <p>The number of tags, if any, on the object.</p>
    public let tagCount: Int
    /// <p>Version of the object.</p>
    public let versionId: String?
    /// <p>If the bucket is configured as a website, redirects requests for this object to another
    ///          object in the same bucket or to an external URL. Amazon S3 stores the value of this header in
    ///          the object metadata.</p>
    public let websiteRedirectLocation: String?

    public init (
        acceptRanges: String? = nil,
        body: Data? = nil,
        bucketKeyEnabled: Bool = false,
        cacheControl: String? = nil,
        contentDisposition: String? = nil,
        contentEncoding: String? = nil,
        contentLanguage: String? = nil,
        contentLength: Int = 0,
        contentRange: String? = nil,
        contentType: String? = nil,
        deleteMarker: Bool = false,
        eTag: String? = nil,
        expiration: String? = nil,
        expires: Date? = nil,
        lastModified: Date? = nil,
        metadata: [String:String]? = nil,
        missingMeta: Int = 0,
        objectLockLegalHoldStatus: ObjectLockLegalHoldStatus? = nil,
        objectLockMode: ObjectLockMode? = nil,
        objectLockRetainUntilDate: Date? = nil,
        partsCount: Int = 0,
        replicationStatus: ReplicationStatus? = nil,
        requestCharged: RequestCharged? = nil,
        restore: String? = nil,
        sSECustomerAlgorithm: String? = nil,
        sSECustomerKeyMD5: String? = nil,
        sSEKMSKeyId: String? = nil,
        serverSideEncryption: ServerSideEncryption? = nil,
        storageClass: StorageClass? = nil,
        tagCount: Int = 0,
        versionId: String? = nil,
        websiteRedirectLocation: String? = nil
    )
    {
        self.acceptRanges = acceptRanges
        self.body = body
        self.bucketKeyEnabled = bucketKeyEnabled
        self.cacheControl = cacheControl
        self.contentDisposition = contentDisposition
        self.contentEncoding = contentEncoding
        self.contentLanguage = contentLanguage
        self.contentLength = contentLength
        self.contentRange = contentRange
        self.contentType = contentType
        self.deleteMarker = deleteMarker
        self.eTag = eTag
        self.expiration = expiration
        self.expires = expires
        self.lastModified = lastModified
        self.metadata = metadata
        self.missingMeta = missingMeta
        self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
        self.objectLockMode = objectLockMode
        self.objectLockRetainUntilDate = objectLockRetainUntilDate
        self.partsCount = partsCount
        self.replicationStatus = replicationStatus
        self.requestCharged = requestCharged
        self.restore = restore
        self.sSECustomerAlgorithm = sSECustomerAlgorithm
        self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        self.sSEKMSKeyId = sSEKMSKeyId
        self.serverSideEncryption = serverSideEncryption
        self.storageClass = storageClass
        self.tagCount = tagCount
        self.versionId = versionId
        self.websiteRedirectLocation = websiteRedirectLocation
    }
}
