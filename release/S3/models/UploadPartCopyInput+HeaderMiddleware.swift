// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UploadPartCopyInputHeadersMiddleware: Middleware {
    public let id: String = "UploadPartCopyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UploadPartCopyInput>,
                  next: H) -> Swift.Result<OperationOutput<UploadPartCopyOutput>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let copySource = input.operationInput.copySource {
            input.builder.withHeader(name: "x-amz-copy-source", value: String(copySource))
        }
        if let copySourceIfMatch = input.operationInput.copySourceIfMatch {
            input.builder.withHeader(name: "x-amz-copy-source-if-match", value: String(copySourceIfMatch))
        }
        if let copySourceIfModifiedSince = input.operationInput.copySourceIfModifiedSince {
            input.builder.withHeader(name: "x-amz-copy-source-if-modified-since", value: String(copySourceIfModifiedSince.rfc5322()))
        }
        if let copySourceIfNoneMatch = input.operationInput.copySourceIfNoneMatch {
            input.builder.withHeader(name: "x-amz-copy-source-if-none-match", value: String(copySourceIfNoneMatch))
        }
        if let copySourceIfUnmodifiedSince = input.operationInput.copySourceIfUnmodifiedSince {
            input.builder.withHeader(name: "x-amz-copy-source-if-unmodified-since", value: String(copySourceIfUnmodifiedSince.rfc5322()))
        }
        if let copySourceRange = input.operationInput.copySourceRange {
            input.builder.withHeader(name: "x-amz-copy-source-range", value: String(copySourceRange))
        }
        if let copySourceSSECustomerAlgorithm = input.operationInput.copySourceSSECustomerAlgorithm {
            input.builder.withHeader(name: "x-amz-copy-source-server-side-encryption-customer-algorithm", value: String(copySourceSSECustomerAlgorithm))
        }
        if let copySourceSSECustomerKey = input.operationInput.copySourceSSECustomerKey {
            input.builder.withHeader(name: "x-amz-copy-source-server-side-encryption-customer-key", value: String(copySourceSSECustomerKey))
        }
        if let copySourceSSECustomerKeyMD5 = input.operationInput.copySourceSSECustomerKeyMD5 {
            input.builder.withHeader(name: "x-amz-copy-source-server-side-encryption-customer-key-MD5", value: String(copySourceSSECustomerKeyMD5))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: String(expectedBucketOwner))
        }
        if let expectedSourceBucketOwner = input.operationInput.expectedSourceBucketOwner {
            input.builder.withHeader(name: "x-amz-source-expected-bucket-owner", value: String(expectedSourceBucketOwner))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: String(requestPayer.rawValue))
        }
        if let sSECustomerAlgorithm = input.operationInput.sSECustomerAlgorithm {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-algorithm", value: String(sSECustomerAlgorithm))
        }
        if let sSECustomerKey = input.operationInput.sSECustomerKey {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-key", value: String(sSECustomerKey))
        }
        if let sSECustomerKeyMD5 = input.operationInput.sSECustomerKeyMD5 {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-key-MD5", value: String(sSECustomerKeyMD5))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UploadPartCopyInput>
    public typealias MOutput = OperationOutput<UploadPartCopyOutput>
    public typealias Context = HttpContext
    public typealias MError = SdkError<UploadPartCopyOutputError>
}
