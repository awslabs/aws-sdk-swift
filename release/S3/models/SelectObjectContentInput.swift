// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Request to filter the contents of an Amazon S3 object based on a simple Structured Query
///          Language (SQL) statement. In the request, along with the SQL expression, you must specify a
///          data serialization format (JSON or CSV) of the object. Amazon S3 uses this to parse object data
///          into records. It returns only records that match the specified SQL expression. You must
///          also specify the data serialization format for the response. For more information, see
///             <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectSELECTContent.html">S3Select API Documentation</a>.</p>
public struct SelectObjectContentInput: Equatable {
    /// <p>The S3 bucket.</p>
    public let bucket: String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: String?
    /// <p>The expression that is used to query the object.</p>
    public let expression: String?
    /// <p>The type of the provided expression (for example, SQL).</p>
    public let expressionType: ExpressionType?
    /// <p>Describes the format of the data in the object that is being queried.</p>
    public let inputSerialization: InputSerialization?
    /// <p>The object key.</p>
    public let key: String?
    /// <p>Describes the format of the data that you want Amazon S3 to return in response.</p>
    public let outputSerialization: OutputSerialization?
    /// <p>Specifies if periodic request progress information should be enabled.</p>
    public let requestProgress: RequestProgress?
    /// <p>The SSE Algorithm used to encrypt the object. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server-Side Encryption (Using Customer-Provided Encryption Keys</a>. </p>
    public let sSECustomerAlgorithm: String?
    /// <p>The SSE Customer Key. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server-Side Encryption
    ///             (Using Customer-Provided Encryption Keys</a>. </p>
    public let sSECustomerKey: String?
    /// <p>The SSE Customer Key MD5. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server-Side Encryption
    ///             (Using Customer-Provided Encryption Keys</a>. </p>
    public let sSECustomerKeyMD5: String?
    /// <p>Specifies the byte range of the object to get the records from. A record is processed
    ///          when its first byte is contained by the range. This parameter is optional, but when
    ///          specified, it must not be empty. See RFC 2616, Section 14.35.1 about how to specify the
    ///          start and end of the range.</p>
    ///          <p>
    ///             <code>ScanRange</code>may be used in the following ways:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code><scanrange><start>50</start><end>100</end></scanrange></code>
    ///                - process only the records starting between the bytes 50 and 100 (inclusive, counting
    ///                from zero)</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code><scanrange><start>50</start></scanrange></code> -
    ///                process only the records starting after the byte 50</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code><scanrange><end>50</end></scanrange></code> -
    ///                process only the records within the last 50 bytes of the file.</p>
    ///             </li>
    ///          </ul>
    public let scanRange: ScanRange?

    public init (
        bucket: String? = nil,
        expectedBucketOwner: String? = nil,
        expression: String? = nil,
        expressionType: ExpressionType? = nil,
        inputSerialization: InputSerialization? = nil,
        key: String? = nil,
        outputSerialization: OutputSerialization? = nil,
        requestProgress: RequestProgress? = nil,
        sSECustomerAlgorithm: String? = nil,
        sSECustomerKey: String? = nil,
        sSECustomerKeyMD5: String? = nil,
        scanRange: ScanRange? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.expression = expression
        self.expressionType = expressionType
        self.inputSerialization = inputSerialization
        self.key = key
        self.outputSerialization = outputSerialization
        self.requestProgress = requestProgress
        self.sSECustomerAlgorithm = sSECustomerAlgorithm
        self.sSECustomerKey = sSECustomerKey
        self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        self.scanRange = scanRange
    }
}
