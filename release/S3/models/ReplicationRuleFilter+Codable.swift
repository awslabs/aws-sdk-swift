// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ReplicationRuleFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case and = "And"
        case prefix = "Prefix"
        case tag = "Tag"
        case sdkUnknown
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        switch self {
            case let .and(and):
                if let and = and {
                    try container.encode(and, forKey: Key("and"))
                }
            case let .prefix(prefix):
                if let prefix = prefix {
                    try container.encode(prefix, forKey: Key("prefix"))
                }
            case let .tag(tag):
                if let tag = tag {
                    try container.encode(tag, forKey: Key("tag"))
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: Key("sdkUnknown"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .prefix)
        if let prefix = prefixDecoded {
            self = .prefix(prefix)
            return
        }
        let tagDecoded = try containerValues.decodeIfPresent(Tag.self, forKey: .tag)
        if let tag = tagDecoded {
            self = .tag(tag)
            return
        }
        let andDecoded = try containerValues.decodeIfPresent(ReplicationRuleAndOperator.self, forKey: .and)
        if let and = andDecoded {
            self = .and(and)
            return
        }
        self = .sdkUnknown("")
    }
}
