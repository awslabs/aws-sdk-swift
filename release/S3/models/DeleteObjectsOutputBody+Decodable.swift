// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DeleteObjectsOutputBody: Equatable {
    public let deleted: [DeletedObject]?
    public let errors: [Error]?
}

extension DeleteObjectsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deleted = "Deleted"
        case errors = "Error"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.deleted) {
            let deletedWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .deleted)
            if deletedWrappedContainer != nil {
                let deletedContainer = try containerValues.decodeIfPresent([DeletedObject].self, forKey: .deleted)
                var deletedBuffer:[DeletedObject]? = nil
                if let deletedContainer = deletedContainer {
                    deletedBuffer = [DeletedObject]()
                    for structureContainer0 in deletedContainer {
                        deletedBuffer?.append(structureContainer0)
                    }
                }
                deleted = deletedBuffer
            } else {
                deleted = []
            }
        } else {
            deleted = nil
        }
        if containerValues.contains(.errors) {
            let errorsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .errors)
            if errorsWrappedContainer != nil {
                let errorsContainer = try containerValues.decodeIfPresent([Error].self, forKey: .errors)
                var errorsBuffer:[Error]? = nil
                if let errorsContainer = errorsContainer {
                    errorsBuffer = [Error]()
                    for structureContainer0 in errorsContainer {
                        errorsBuffer?.append(structureContainer0)
                    }
                }
                errors = errorsBuffer
            } else {
                errors = []
            }
        } else {
            errors = nil
        }
    }
}
