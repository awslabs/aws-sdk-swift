// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct HeadObjectInput: Equatable {
    /// <p>The name of the bucket containing the object.</p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: String?
    /// <p>Return the object only if its entity tag (ETag) is the same as the one specified,
    ///          otherwise return a 412 (precondition failed).</p>
    public let ifMatch: String?
    /// <p>Return the object only if it has been modified since the specified time, otherwise
    ///          return a 304 (not modified).</p>
    public let ifModifiedSince: Date?
    /// <p>Return the object only if its entity tag (ETag) is different from the one specified,
    ///          otherwise return a 304 (not modified).</p>
    public let ifNoneMatch: String?
    /// <p>Return the object only if it has not been modified since the specified time, otherwise
    ///          return a 412 (precondition failed).</p>
    public let ifUnmodifiedSince: Date?
    /// <p>The object key.</p>
    public let key: String?
    /// <p>Part number of the object being read. This is a positive integer between 1 and 10,000.
    ///          Effectively performs a 'ranged' HEAD request for the part specified. Useful querying about
    ///          the size of the part and the number of parts in this object.</p>
    public let partNumber: Int
    /// <p>Downloads the specified range bytes of an object. For more information about the HTTP
    ///          Range header, see <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35</a>.</p>
    ///          <note>
    ///             <p>Amazon S3 doesn't support retrieving multiple ranges of data per <code>GET</code>
    ///             request.</p>
    ///          </note>
    public let range: String?
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: RequestPayer?
    /// <p>Specifies the algorithm to use to when encrypting the object (for example,
    ///          AES256).</p>
    public let sSECustomerAlgorithm: String?
    /// <p>Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This
    ///          value is used to store the object and then it is discarded; Amazon S3 does not store the
    ///          encryption key. The key must be appropriate for use with the algorithm specified in the
    ///             <code>x-amz-server-side-encryption-customer-algorithm</code> header.</p>
    public let sSECustomerKey: String?
    /// <p>Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
    ///          this header for a message integrity check to ensure that the encryption key was transmitted
    ///          without error.</p>
    public let sSECustomerKeyMD5: String?
    /// <p>VersionId used to reference a specific version of the object.</p>
    public let versionId: String?

    public init (
        bucket: String? = nil,
        expectedBucketOwner: String? = nil,
        ifMatch: String? = nil,
        ifModifiedSince: Date? = nil,
        ifNoneMatch: String? = nil,
        ifUnmodifiedSince: Date? = nil,
        key: String? = nil,
        partNumber: Int = 0,
        range: String? = nil,
        requestPayer: RequestPayer? = nil,
        sSECustomerAlgorithm: String? = nil,
        sSECustomerKey: String? = nil,
        sSECustomerKeyMD5: String? = nil,
        versionId: String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.ifMatch = ifMatch
        self.ifModifiedSince = ifModifiedSince
        self.ifNoneMatch = ifNoneMatch
        self.ifUnmodifiedSince = ifUnmodifiedSince
        self.key = key
        self.partNumber = partNumber
        self.range = range
        self.requestPayer = requestPayer
        self.sSECustomerAlgorithm = sSECustomerAlgorithm
        self.sSECustomerKey = sSECustomerKey
        self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        self.versionId = versionId
    }
}
