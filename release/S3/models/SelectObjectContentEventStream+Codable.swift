// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SelectObjectContentEventStream: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cont = "Cont"
        case end = "End"
        case progress = "Progress"
        case records = "Records"
        case stats = "Stats"
        case sdkUnknown
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        switch self {
            case let .cont(cont):
                if let cont = cont {
                    try container.encode(cont, forKey: Key("cont"))
                }
            case let .end(end):
                if let end = end {
                    try container.encode(end, forKey: Key("end"))
                }
            case let .progress(progress):
                if let progress = progress {
                    try container.encode(progress, forKey: Key("progress"))
                }
            case let .records(records):
                if let records = records {
                    try container.encode(records, forKey: Key("records"))
                }
            case let .stats(stats):
                if let stats = stats {
                    try container.encode(stats, forKey: Key("stats"))
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: Key("sdkUnknown"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recordsDecoded = try containerValues.decodeIfPresent(RecordsEvent.self, forKey: .records)
        if let records = recordsDecoded {
            self = .records(records)
            return
        }
        let statsDecoded = try containerValues.decodeIfPresent(StatsEvent.self, forKey: .stats)
        if let stats = statsDecoded {
            self = .stats(stats)
            return
        }
        let progressDecoded = try containerValues.decodeIfPresent(ProgressEvent.self, forKey: .progress)
        if let progress = progressDecoded {
            self = .progress(progress)
            return
        }
        let contDecoded = try containerValues.decodeIfPresent(ContinuationEvent.self, forKey: .cont)
        if let cont = contDecoded {
            self = .cont(cont)
            return
        }
        let endDecoded = try containerValues.decodeIfPresent(EndEvent.self, forKey: .end)
        if let end = endDecoded {
            self = .end(end)
            return
        }
        self = .sdkUnknown("")
    }
}
