// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct HeadObjectOutput: Equatable {
    /// <p>Indicates that a range of bytes was specified.</p>
    public let acceptRanges: String?
    /// <p>The archive state of the head object.</p>
    public let archiveStatus: ArchiveStatus?
    /// <p>Indicates whether the object uses an S3 Bucket Key for server-side encryption with AWS KMS (SSE-KMS).</p>
    public let bucketKeyEnabled: Bool
    /// <p>Specifies caching behavior along the request/reply chain.</p>
    public let cacheControl: String?
    /// <p>Specifies presentational information for the object.</p>
    public let contentDisposition: String?
    /// <p>Specifies what content encodings have been applied to the object and thus what decoding
    ///          mechanisms must be applied to obtain the media-type referenced by the Content-Type header
    ///          field.</p>
    public let contentEncoding: String?
    /// <p>The language the content is in.</p>
    public let contentLanguage: String?
    /// <p>Size of the body in bytes.</p>
    public let contentLength: Int
    /// <p>A standard MIME type describing the format of the object data.</p>
    public let contentType: String?
    /// <p>Specifies whether the object retrieved was (true) or was not (false) a Delete Marker. If
    ///          false, this response header does not appear in the response.</p>
    public let deleteMarker: Bool
    /// <p>An ETag is an opaque identifier assigned by a web server to a specific version of a
    ///          resource found at a URL.</p>
    public let eTag: String?
    /// <p>If the object expiration is configured (see PUT Bucket lifecycle), the response includes
    ///          this header. It includes the expiry-date and rule-id key-value pairs providing object
    ///          expiration information. The value of the rule-id is URL encoded.</p>
    public let expiration: String?
    /// <p>The date and time at which the object is no longer cacheable.</p>
    public let expires: Date?
    /// <p>Creation date of the object.</p>
    public let lastModified: Date?
    /// <p>A map of metadata to store with the object in S3.</p>
    public let metadata: [String:String]?
    /// <p>This is set to the number of metadata entries not returned in <code>x-amz-meta</code>
    ///          headers. This can happen if you create metadata using an API like SOAP that supports more
    ///          flexible metadata than the REST API. For example, using SOAP, you can create metadata whose
    ///          values are not legal HTTP headers.</p>
    public let missingMeta: Int
    /// <p>Specifies whether a legal hold is in effect for this object. This header is only
    ///          returned if the requester has the <code>s3:GetObjectLegalHold</code> permission. This
    ///          header is not returned if the specified version of this object has never had a legal hold
    ///          applied. For more information about S3 Object Lock, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html">Object Lock</a>.</p>
    public let objectLockLegalHoldStatus: ObjectLockLegalHoldStatus?
    /// <p>The Object Lock mode, if any, that's in effect for this object. This header is only
    ///          returned if the requester has the <code>s3:GetObjectRetention</code> permission. For more
    ///          information about S3 Object Lock, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html">Object
    ///             Lock</a>. </p>
    public let objectLockMode: ObjectLockMode?
    /// <p>The date and time when the Object Lock retention period expires. This header is only
    ///          returned if the requester has the <code>s3:GetObjectRetention</code> permission.</p>
    public let objectLockRetainUntilDate: Date?
    /// <p>The count of parts this object has.</p>
    public let partsCount: Int
    /// <p>Amazon S3 can return this header if your request involves a bucket that is either a source or
    ///          a destination in a replication rule.</p>
    ///
    ///          <p>In replication, you have a source bucket on which you configure replication and
    ///          destination bucket or buckets where Amazon S3 stores object replicas. When you request an object
    ///             (<code>GetObject</code>) or object metadata (<code>HeadObject</code>) from these
    ///          buckets, Amazon S3 will return the <code>x-amz-replication-status</code> header in the response
    ///          as follows:</p>
    ///          <ul>
    ///             <li>
    ///                <p>If requesting an object from the source bucket — Amazon S3 will return the
    ///                   <code>x-amz-replication-status</code> header if the object in your request is
    ///                eligible for replication.</p>
    ///                <p> For example, suppose that in your replication configuration, you specify object
    ///                prefix <code>TaxDocs</code> requesting Amazon S3 to replicate objects with key prefix
    ///                   <code>TaxDocs</code>. Any objects you upload with this key name prefix, for
    ///                example <code>TaxDocs/document1.pdf</code>, are eligible for replication. For any
    ///                object request with this key name prefix, Amazon S3 will return the
    ///                   <code>x-amz-replication-status</code> header with value PENDING, COMPLETED or
    ///                FAILED indicating object replication status.</p>
    ///             </li>
    ///             <li>
    ///                <p>If requesting an object from a destination bucket — Amazon S3 will return the
    ///                   <code>x-amz-replication-status</code> header with value REPLICA if the object in
    ///                your request is a replica that Amazon S3 created and there is no replica modification
    ///                replication in progress.</p>
    ///             </li>
    ///             <li>
    ///                <p>When replicating objects to multiple destination buckets the
    ///                   <code>x-amz-replication-status</code> header acts differently. The header of the
    ///                source object will only return a value of COMPLETED when replication is successful to
    ///                all destinations. The header will remain at value PENDING until replication has
    ///                completed for all destinations. If one or more destinations fails replication the
    ///                header will return FAILED. </p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Replication</a>.</p>
    public let replicationStatus: ReplicationStatus?
    /// <p>If present, indicates that the requester was successfully charged for the
    ///          request.</p>
    public let requestCharged: RequestCharged?
    /// <p>If the object is an archived object (an object whose storage class is GLACIER), the
    ///          response includes this header if either the archive restoration is in progress (see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_RestoreObject.html">RestoreObject</a> or an archive copy is already restored.</p>
    ///
    ///          <p> If an archive copy is already restored, the header value indicates when Amazon S3 is
    ///          scheduled to delete the object copy. For example:</p>
    ///
    ///          <p>
    ///             <code>x-amz-restore: ongoing-request="false", expiry-date="Fri, 21 Dec 2012 00:00:00
    ///             GMT"</code>
    ///          </p>
    ///
    ///          <p>If the object restoration is in progress, the header returns the value
    ///             <code>ongoing-request="true"</code>.</p>
    ///
    ///          <p>For more information about archiving objects, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html#lifecycle-transition-general-considerations">Transitioning Objects: General Considerations</a>.</p>
    public let restore: String?
    /// <p>If server-side encryption with a customer-provided encryption key was requested, the
    ///          response will include this header confirming the encryption algorithm used.</p>
    public let sSECustomerAlgorithm: String?
    /// <p>If server-side encryption with a customer-provided encryption key was requested, the
    ///          response will include this header to provide round-trip message integrity verification of
    ///          the customer-provided encryption key.</p>
    public let sSECustomerKeyMD5: String?
    /// <p>If present, specifies the ID of the AWS Key Management Service (AWS KMS) symmetric
    ///          customer managed customer master key (CMK) that was used for the object.</p>
    public let sSEKMSKeyId: String?
    /// <p>If the object is stored using server-side encryption either with an AWS KMS customer
    ///          master key (CMK) or an Amazon S3-managed encryption key, the response includes this header with
    ///          the value of the server-side encryption algorithm used when storing this object in Amazon
    ///          S3 (for example, AES256, aws:kms).</p>
    public let serverSideEncryption: ServerSideEncryption?
    /// <p>Provides storage class information of the object. Amazon S3 returns this header for all
    ///          objects except for S3 Standard storage class objects.</p>
    ///
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html">Storage
    ///             Classes</a>.</p>
    public let storageClass: StorageClass?
    /// <p>Version of the object.</p>
    public let versionId: String?
    /// <p>If the bucket is configured as a website, redirects requests for this object to another
    ///          object in the same bucket or to an external URL. Amazon S3 stores the value of this header in
    ///          the object metadata.</p>
    public let websiteRedirectLocation: String?

    public init (
        acceptRanges: String? = nil,
        archiveStatus: ArchiveStatus? = nil,
        bucketKeyEnabled: Bool = false,
        cacheControl: String? = nil,
        contentDisposition: String? = nil,
        contentEncoding: String? = nil,
        contentLanguage: String? = nil,
        contentLength: Int = 0,
        contentType: String? = nil,
        deleteMarker: Bool = false,
        eTag: String? = nil,
        expiration: String? = nil,
        expires: Date? = nil,
        lastModified: Date? = nil,
        metadata: [String:String]? = nil,
        missingMeta: Int = 0,
        objectLockLegalHoldStatus: ObjectLockLegalHoldStatus? = nil,
        objectLockMode: ObjectLockMode? = nil,
        objectLockRetainUntilDate: Date? = nil,
        partsCount: Int = 0,
        replicationStatus: ReplicationStatus? = nil,
        requestCharged: RequestCharged? = nil,
        restore: String? = nil,
        sSECustomerAlgorithm: String? = nil,
        sSECustomerKeyMD5: String? = nil,
        sSEKMSKeyId: String? = nil,
        serverSideEncryption: ServerSideEncryption? = nil,
        storageClass: StorageClass? = nil,
        versionId: String? = nil,
        websiteRedirectLocation: String? = nil
    )
    {
        self.acceptRanges = acceptRanges
        self.archiveStatus = archiveStatus
        self.bucketKeyEnabled = bucketKeyEnabled
        self.cacheControl = cacheControl
        self.contentDisposition = contentDisposition
        self.contentEncoding = contentEncoding
        self.contentLanguage = contentLanguage
        self.contentLength = contentLength
        self.contentType = contentType
        self.deleteMarker = deleteMarker
        self.eTag = eTag
        self.expiration = expiration
        self.expires = expires
        self.lastModified = lastModified
        self.metadata = metadata
        self.missingMeta = missingMeta
        self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
        self.objectLockMode = objectLockMode
        self.objectLockRetainUntilDate = objectLockRetainUntilDate
        self.partsCount = partsCount
        self.replicationStatus = replicationStatus
        self.requestCharged = requestCharged
        self.restore = restore
        self.sSECustomerAlgorithm = sSECustomerAlgorithm
        self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        self.sSEKMSKeyId = sSEKMSKeyId
        self.serverSideEncryption = serverSideEncryption
        self.storageClass = storageClass
        self.versionId = versionId
        self.websiteRedirectLocation = websiteRedirectLocation
    }
}
