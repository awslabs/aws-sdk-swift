// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Describes how an uncompressed comma-separated values (CSV)-formatted input object is
///          formatted.</p>
public struct CSVInput: Equatable {
    /// <p>Specifies that CSV field values may contain quoted record delimiters and such records
    ///          should be allowed. Default value is FALSE. Setting this value to TRUE may lower
    ///          performance.</p>
    public let allowQuotedRecordDelimiter: Bool
    /// <p>A single character used to indicate that a row should be ignored when the character is
    ///          present at the start of that row. You can specify any character to indicate a comment
    ///          line.</p>
    public let comments: String?
    /// <p>A single character used to separate individual fields in a record. You can specify an
    ///          arbitrary delimiter.</p>
    public let fieldDelimiter: String?
    /// <p>Describes the first line of input. Valid values are:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>NONE</code>: First line is not a header.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>IGNORE</code>: First line is a header, but you can't use the header values
    ///                to indicate the column in an expression. You can use column position (such as _1, _2,
    ///                â€¦) to indicate the column (<code>SELECT s._1 FROM OBJECT s</code>).</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Use</code>: First line is a header, and you can use the header value to
    ///                identify a column in an expression (<code>SELECT "name" FROM OBJECT</code>). </p>
    ///             </li>
    ///          </ul>
    public let fileHeaderInfo: FileHeaderInfo?
    /// <p>A single character used for escaping when the field delimiter is part of the value. For
    ///          example, if the value is <code>a, b</code>, Amazon S3 wraps this field value in quotation marks,
    ///          as follows: <code>" a , b "</code>.</p>
    ///          <p>Type: String</p>
    ///          <p>Default: <code>"</code>
    ///          </p>
    ///          <p>Ancestors: <code>CSV</code>
    ///          </p>
    public let quoteCharacter: String?
    /// <p>A single character used for escaping the quotation mark character inside an already
    ///          escaped value. For example, the value """ a , b """ is parsed as " a , b ".</p>
    public let quoteEscapeCharacter: String?
    /// <p>A single character used to separate individual records in the input. Instead of the
    ///          default value, you can specify an arbitrary delimiter.</p>
    public let recordDelimiter: String?

    public init (
        allowQuotedRecordDelimiter: Bool = false,
        comments: String? = nil,
        fieldDelimiter: String? = nil,
        fileHeaderInfo: FileHeaderInfo? = nil,
        quoteCharacter: String? = nil,
        quoteEscapeCharacter: String? = nil,
        recordDelimiter: String? = nil
    )
    {
        self.allowQuotedRecordDelimiter = allowQuotedRecordDelimiter
        self.comments = comments
        self.fieldDelimiter = fieldDelimiter
        self.fileHeaderInfo = fileHeaderInfo
        self.quoteCharacter = quoteCharacter
        self.quoteEscapeCharacter = quoteEscapeCharacter
        self.recordDelimiter = recordDelimiter
    }
}
