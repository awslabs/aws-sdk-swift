// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Delete: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case objects = "Object"
        case quiet = "Quiet"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: Key("xmlns"))
        }
        if let objects = objects {
            if objects.isEmpty {
                var objectsContainer = container.nestedUnkeyedContainer(forKey: Key("Object"))
                try objectsContainer.encodeNil()
            } else {
                for objectidentifier0 in objects {
                    var objectsContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Object"))
                    try objectsContainer0.encode(objectidentifier0, forKey: Key(""))
                }
            }
        }
        if quiet != false {
            try container.encode(quiet, forKey: Key("quiet"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.objects) {
            let objectsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .objects)
            if objectsWrappedContainer != nil {
                let objectsContainer = try containerValues.decodeIfPresent([ObjectIdentifier].self, forKey: .objects)
                var objectsBuffer:[ObjectIdentifier]? = nil
                if let objectsContainer = objectsContainer {
                    objectsBuffer = [ObjectIdentifier]()
                    for structureContainer0 in objectsContainer {
                        objectsBuffer?.append(structureContainer0)
                    }
                }
                objects = objectsBuffer
            } else {
                objects = []
            }
        } else {
            objects = nil
        }
        let quietDecoded = try containerValues.decode(Bool.self, forKey: .quiet)
        quiet = quietDecoded
    }
}
