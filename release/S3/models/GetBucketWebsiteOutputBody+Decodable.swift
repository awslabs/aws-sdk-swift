// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetBucketWebsiteOutputBody: Equatable {
    public let redirectAllRequestsTo: RedirectAllRequestsTo?
    public let indexDocument: IndexDocument?
    public let errorDocument: ErrorDocument?
    public let routingRules: [RoutingRule]?
}

extension GetBucketWebsiteOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case errorDocument = "ErrorDocument"
        case indexDocument = "IndexDocument"
        case redirectAllRequestsTo = "RedirectAllRequestsTo"
        case routingRules = "RoutingRules"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let redirectAllRequestsToDecoded = try containerValues.decodeIfPresent(RedirectAllRequestsTo.self, forKey: .redirectAllRequestsTo)
        redirectAllRequestsTo = redirectAllRequestsToDecoded
        let indexDocumentDecoded = try containerValues.decodeIfPresent(IndexDocument.self, forKey: .indexDocument)
        indexDocument = indexDocumentDecoded
        let errorDocumentDecoded = try containerValues.decodeIfPresent(ErrorDocument.self, forKey: .errorDocument)
        errorDocument = errorDocumentDecoded
        if containerValues.contains(.routingRules) {
            struct KeyVal0{struct RoutingRule{}}
            let routingRulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.RoutingRule>.CodingKeys.self, forKey: .routingRules)
            if let routingRulesWrappedContainer = routingRulesWrappedContainer {
                let routingRulesContainer = try routingRulesWrappedContainer.decodeIfPresent([RoutingRule].self, forKey: .member)
                var routingRulesBuffer:[RoutingRule]? = nil
                if let routingRulesContainer = routingRulesContainer {
                    routingRulesBuffer = [RoutingRule]()
                    for structureContainer0 in routingRulesContainer {
                        routingRulesBuffer?.append(structureContainer0)
                    }
                }
                routingRules = routingRulesBuffer
            } else {
                routingRules = []
            }
        } else {
            routingRules = nil
        }
    }
}
