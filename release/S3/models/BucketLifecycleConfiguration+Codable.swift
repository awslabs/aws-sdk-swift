// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BucketLifecycleConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case rules = "Rule"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: Key("xmlns"))
        }
        if let rules = rules {
            if rules.isEmpty {
                var rulesContainer = container.nestedUnkeyedContainer(forKey: Key("Rule"))
                try rulesContainer.encodeNil()
            } else {
                for lifecyclerule0 in rules {
                    var rulesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Rule"))
                    try rulesContainer0.encode(lifecyclerule0, forKey: Key(""))
                }
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.rules) {
            let rulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .rules)
            if rulesWrappedContainer != nil {
                let rulesContainer = try containerValues.decodeIfPresent([LifecycleRule].self, forKey: .rules)
                var rulesBuffer:[LifecycleRule]? = nil
                if let rulesContainer = rulesContainer {
                    rulesBuffer = [LifecycleRule]()
                    for structureContainer0 in rulesContainer {
                        rulesBuffer?.append(structureContainer0)
                    }
                }
                rules = rulesBuffer
            } else {
                rules = []
            }
        } else {
            rules = nil
        }
    }
}
