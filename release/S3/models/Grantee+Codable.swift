// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Grantee: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case displayName = "DisplayName"
        case emailAddress = "EmailAddress"
        case iD = "ID"
        case type = "xsi:type"
        case uRI = "URI"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: Key("xmlns"))
        }
        if let displayName = displayName {
            try container.encode(displayName, forKey: Key("displayName"))
        }
        if let emailAddress = emailAddress {
            try container.encode(emailAddress, forKey: Key("emailAddress"))
        }
        if let iD = iD {
            try container.encode(iD, forKey: Key("iD"))
        }
        if let type = type {
            try container.encode(type, forKey: Key("xsi:type"))
        }
        if let uRI = uRI {
            try container.encode(uRI, forKey: Key("uRI"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let displayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let emailAddressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let iDDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iD)
        iD = iDDecoded
        let uRIDecoded = try containerValues.decodeIfPresent(String.self, forKey: .uRI)
        uRI = uRIDecoded
        let typeDecoded = try containerValues.decodeIfPresent(`Type`.self, forKey: .type)
        type = typeDecoded
    }
}
