// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateMultipartUploadInputHeadersMiddleware: Middleware {
    public let id: String = "CreateMultipartUploadInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMultipartUploadInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMultipartUploadOutput>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let aCL = input.operationInput.aCL {
            input.builder.withHeader(name: "x-amz-acl", value: String(aCL.rawValue))
        }
        input.builder.withHeader(name: "x-amz-server-side-encryption-bucket-key-enabled", value: String(input.operationInput.bucketKeyEnabled))
        if let cacheControl = input.operationInput.cacheControl {
            input.builder.withHeader(name: "Cache-Control", value: String(cacheControl))
        }
        if let contentDisposition = input.operationInput.contentDisposition {
            input.builder.withHeader(name: "Content-Disposition", value: String(contentDisposition))
        }
        if let contentEncoding = input.operationInput.contentEncoding {
            input.builder.withHeader(name: "Content-Encoding", value: String(contentEncoding))
        }
        if let contentLanguage = input.operationInput.contentLanguage {
            input.builder.withHeader(name: "Content-Language", value: String(contentLanguage))
        }
        if let contentType = input.operationInput.contentType {
            input.builder.withHeader(name: "Content-Type", value: String(contentType))
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: String(expectedBucketOwner))
        }
        if let expires = input.operationInput.expires {
            input.builder.withHeader(name: "Expires", value: String(expires.rfc5322()))
        }
        if let grantFullControl = input.operationInput.grantFullControl {
            input.builder.withHeader(name: "x-amz-grant-full-control", value: String(grantFullControl))
        }
        if let grantRead = input.operationInput.grantRead {
            input.builder.withHeader(name: "x-amz-grant-read", value: String(grantRead))
        }
        if let grantReadACP = input.operationInput.grantReadACP {
            input.builder.withHeader(name: "x-amz-grant-read-acp", value: String(grantReadACP))
        }
        if let grantWriteACP = input.operationInput.grantWriteACP {
            input.builder.withHeader(name: "x-amz-grant-write-acp", value: String(grantWriteACP))
        }
        if let objectLockLegalHoldStatus = input.operationInput.objectLockLegalHoldStatus {
            input.builder.withHeader(name: "x-amz-object-lock-legal-hold", value: String(objectLockLegalHoldStatus.rawValue))
        }
        if let objectLockMode = input.operationInput.objectLockMode {
            input.builder.withHeader(name: "x-amz-object-lock-mode", value: String(objectLockMode.rawValue))
        }
        if let objectLockRetainUntilDate = input.operationInput.objectLockRetainUntilDate {
            input.builder.withHeader(name: "x-amz-object-lock-retain-until-date", value: String(objectLockRetainUntilDate.iso8601WithoutFractionalSeconds()))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: String(requestPayer.rawValue))
        }
        if let sSECustomerAlgorithm = input.operationInput.sSECustomerAlgorithm {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-algorithm", value: String(sSECustomerAlgorithm))
        }
        if let sSECustomerKey = input.operationInput.sSECustomerKey {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-key", value: String(sSECustomerKey))
        }
        if let sSECustomerKeyMD5 = input.operationInput.sSECustomerKeyMD5 {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-key-MD5", value: String(sSECustomerKeyMD5))
        }
        if let sSEKMSEncryptionContext = input.operationInput.sSEKMSEncryptionContext {
            input.builder.withHeader(name: "x-amz-server-side-encryption-context", value: String(sSEKMSEncryptionContext))
        }
        if let sSEKMSKeyId = input.operationInput.sSEKMSKeyId {
            input.builder.withHeader(name: "x-amz-server-side-encryption-aws-kms-key-id", value: String(sSEKMSKeyId))
        }
        if let serverSideEncryption = input.operationInput.serverSideEncryption {
            input.builder.withHeader(name: "x-amz-server-side-encryption", value: String(serverSideEncryption.rawValue))
        }
        if let storageClass = input.operationInput.storageClass {
            input.builder.withHeader(name: "x-amz-storage-class", value: String(storageClass.rawValue))
        }
        if let tagging = input.operationInput.tagging {
            input.builder.withHeader(name: "x-amz-tagging", value: String(tagging))
        }
        if let websiteRedirectLocation = input.operationInput.websiteRedirectLocation {
            input.builder.withHeader(name: "x-amz-website-redirect-location", value: String(websiteRedirectLocation))
        }
        if let metadata = input.operationInput.metadata {
            for (prefixHeaderMapKey, prefixHeaderMapValue) in metadata {
                input.builder.withHeader(name: "x-amz-meta-\(prefixHeaderMapKey)", value: String(prefixHeaderMapValue))
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMultipartUploadInput>
    public typealias MOutput = OperationOutput<CreateMultipartUploadOutput>
    public typealias Context = HttpContext
    public typealias MError = SdkError<CreateMultipartUploadOutputError>
}
