// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MultipartUpload: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case initiated = "Initiated"
        case initiator = "Initiator"
        case key = "Key"
        case owner = "Owner"
        case storageClass = "StorageClass"
        case uploadId = "UploadId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: Key("xmlns"))
        }
        if let initiated = initiated {
            try container.encode(TimestampWrapper(initiated, format: .dateTime), forKey: Key("initiated"))
        }
        if let initiator = initiator {
            try container.encode(initiator, forKey: Key("initiator"))
        }
        if let key = key {
            try container.encode(key, forKey: Key("key"))
        }
        if let owner = owner {
            try container.encode(owner, forKey: Key("owner"))
        }
        if let storageClass = storageClass {
            try container.encode(storageClass, forKey: Key("storageClass"))
        }
        if let uploadId = uploadId {
            try container.encode(uploadId, forKey: Key("uploadId"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let uploadIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .uploadId)
        uploadId = uploadIdDecoded
        let keyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .key)
        key = keyDecoded
        let initiatedDecoded = try containerValues.decodeIfPresent(String.self, forKey: .initiated)
        var initiatedBuffer:Date? = nil
        if let initiatedDecoded = initiatedDecoded {
            initiatedBuffer = try TimestampWrapperDecoder.parseDateStringValue(initiatedDecoded, format: .dateTime)
        }
        initiated = initiatedBuffer
        let storageClassDecoded = try containerValues.decodeIfPresent(StorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(Owner.self, forKey: .owner)
        owner = ownerDecoded
        let initiatorDecoded = try containerValues.decodeIfPresent(Initiator.self, forKey: .initiator)
        initiator = initiatorDecoded
    }
}
