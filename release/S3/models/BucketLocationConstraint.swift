// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum BucketLocationConstraint {
    case eu
    case afSouth1
    case apEast1
    case apNortheast1
    case apNortheast2
    case apNortheast3
    case apSouth1
    case apSoutheast1
    case apSoutheast2
    case caCentral1
    case cnNorth1
    case cnNorthwest1
    case euCentral1
    case euNorth1
    case euSouth1
    case euWest1
    case euWest2
    case euWest3
    case meSouth1
    case saEast1
    case usEast2
    case usGovEast1
    case usGovWest1
    case usWest1
    case usWest2
    case sdkUnknown(String)
}

extension BucketLocationConstraint : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [BucketLocationConstraint] {
        return [
            .eu,
            .afSouth1,
            .apEast1,
            .apNortheast1,
            .apNortheast2,
            .apNortheast3,
            .apSouth1,
            .apSoutheast1,
            .apSoutheast2,
            .caCentral1,
            .cnNorth1,
            .cnNorthwest1,
            .euCentral1,
            .euNorth1,
            .euSouth1,
            .euWest1,
            .euWest2,
            .euWest3,
            .meSouth1,
            .saEast1,
            .usEast2,
            .usGovEast1,
            .usGovWest1,
            .usWest1,
            .usWest2,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .eu: return "EU"
        case .afSouth1: return "af-south-1"
        case .apEast1: return "ap-east-1"
        case .apNortheast1: return "ap-northeast-1"
        case .apNortheast2: return "ap-northeast-2"
        case .apNortheast3: return "ap-northeast-3"
        case .apSouth1: return "ap-south-1"
        case .apSoutheast1: return "ap-southeast-1"
        case .apSoutheast2: return "ap-southeast-2"
        case .caCentral1: return "ca-central-1"
        case .cnNorth1: return "cn-north-1"
        case .cnNorthwest1: return "cn-northwest-1"
        case .euCentral1: return "eu-central-1"
        case .euNorth1: return "eu-north-1"
        case .euSouth1: return "eu-south-1"
        case .euWest1: return "eu-west-1"
        case .euWest2: return "eu-west-2"
        case .euWest3: return "eu-west-3"
        case .meSouth1: return "me-south-1"
        case .saEast1: return "sa-east-1"
        case .usEast2: return "us-east-2"
        case .usGovEast1: return "us-gov-east-1"
        case .usGovWest1: return "us-gov-west-1"
        case .usWest1: return "us-west-1"
        case .usWest2: return "us-west-2"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = BucketLocationConstraint(rawValue: rawValue) ?? BucketLocationConstraint.sdkUnknown(rawValue)
    }
}
