// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListBucketIntelligentTieringConfigurationsOutputBody: Equatable {
    public let isTruncated: Bool
    public let continuationToken: String?
    public let nextContinuationToken: String?
    public let intelligentTieringConfigurationList: [IntelligentTieringConfiguration]?
}

extension ListBucketIntelligentTieringConfigurationsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case continuationToken = "ContinuationToken"
        case intelligentTieringConfigurationList = "IntelligentTieringConfiguration"
        case isTruncated = "IsTruncated"
        case nextContinuationToken = "NextContinuationToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isTruncatedDecoded = try containerValues.decode(Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let continuationTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .continuationToken)
        continuationToken = continuationTokenDecoded
        let nextContinuationTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextContinuationToken)
        nextContinuationToken = nextContinuationTokenDecoded
        if containerValues.contains(.intelligentTieringConfigurationList) {
            let intelligentTieringConfigurationListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .intelligentTieringConfigurationList)
            if intelligentTieringConfigurationListWrappedContainer != nil {
                let intelligentTieringConfigurationListContainer = try containerValues.decodeIfPresent([IntelligentTieringConfiguration].self, forKey: .intelligentTieringConfigurationList)
                var intelligentTieringConfigurationListBuffer:[IntelligentTieringConfiguration]? = nil
                if let intelligentTieringConfigurationListContainer = intelligentTieringConfigurationListContainer {
                    intelligentTieringConfigurationListBuffer = [IntelligentTieringConfiguration]()
                    for structureContainer0 in intelligentTieringConfigurationListContainer {
                        intelligentTieringConfigurationListBuffer?.append(structureContainer0)
                    }
                }
                intelligentTieringConfigurationList = intelligentTieringConfigurationListBuffer
            } else {
                intelligentTieringConfigurationList = []
            }
        } else {
            intelligentTieringConfigurationList = nil
        }
    }
}
