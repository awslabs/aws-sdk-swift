// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ListObjectVersionsOutput: Equatable {
    /// <p>All of the keys rolled up into a common prefix count as a single return when calculating
    ///          the number of returns.</p>
    public let commonPrefixes: [CommonPrefix]?
    /// <p>Container for an object that is a delete marker.</p>
    public let deleteMarkers: [DeleteMarkerEntry]?
    /// <p>The delimiter grouping the included keys. A delimiter is a character that you specify to
    ///          group keys. All keys that contain the same string between the prefix and the first
    ///          occurrence of the delimiter are grouped under a single result element in
    ///             <code>CommonPrefixes</code>. These groups are counted as one result against the max-keys
    ///          limitation. These keys are not returned elsewhere in the response.</p>
    public let delimiter: String?
    /// <p> Encoding type used by Amazon S3 to encode object key names in the XML response.</p>
    ///
    ///          <p>If you specify encoding-type request parameter, Amazon S3 includes this element in the
    ///          response, and returns encoded key name values in the following response elements:</p>
    ///
    ///          <p>
    ///             <code>KeyMarker, NextKeyMarker, Prefix, Key</code>, and <code>Delimiter</code>.</p>
    public let encodingType: EncodingType?
    /// <p>A flag that indicates whether Amazon S3 returned all of the results that satisfied the search
    ///          criteria. If your results were truncated, you can make a follow-up paginated request using
    ///          the NextKeyMarker and NextVersionIdMarker response parameters as a starting place in
    ///          another request to return the rest of the results.</p>
    public let isTruncated: Bool
    /// <p>Marks the last key returned in a truncated response.</p>
    public let keyMarker: String?
    /// <p>Specifies the maximum number of objects to return.</p>
    public let maxKeys: Int
    /// <p>The bucket name.</p>
    public let name: String?
    /// <p>When the number of responses exceeds the value of <code>MaxKeys</code>,
    ///             <code>NextKeyMarker</code> specifies the first key not returned that satisfies the
    ///          search criteria. Use this value for the key-marker request parameter in a subsequent
    ///          request.</p>
    public let nextKeyMarker: String?
    /// <p>When the number of responses exceeds the value of <code>MaxKeys</code>,
    ///             <code>NextVersionIdMarker</code> specifies the first object version not returned that
    ///          satisfies the search criteria. Use this value for the version-id-marker request parameter
    ///          in a subsequent request.</p>
    public let nextVersionIdMarker: String?
    /// <p>Selects objects that start with the value supplied by this parameter.</p>
    public let prefix: String?
    /// <p>Marks the last version of the key returned in a truncated response.</p>
    public let versionIdMarker: String?
    /// <p>Container for version information.</p>
    public let versions: [ObjectVersion]?

    public init (
        commonPrefixes: [CommonPrefix]? = nil,
        deleteMarkers: [DeleteMarkerEntry]? = nil,
        delimiter: String? = nil,
        encodingType: EncodingType? = nil,
        isTruncated: Bool = false,
        keyMarker: String? = nil,
        maxKeys: Int = 0,
        name: String? = nil,
        nextKeyMarker: String? = nil,
        nextVersionIdMarker: String? = nil,
        prefix: String? = nil,
        versionIdMarker: String? = nil,
        versions: [ObjectVersion]? = nil
    )
    {
        self.commonPrefixes = commonPrefixes
        self.deleteMarkers = deleteMarkers
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.isTruncated = isTruncated
        self.keyMarker = keyMarker
        self.maxKeys = maxKeys
        self.name = name
        self.nextKeyMarker = nextKeyMarker
        self.nextVersionIdMarker = nextVersionIdMarker
        self.prefix = prefix
        self.versionIdMarker = versionIdMarker
        self.versions = versions
    }
}
