// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InputSerialization: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cSV = "CSV"
        case compressionType = "CompressionType"
        case jSON = "JSON"
        case parquet = "Parquet"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: Key("xmlns"))
        }
        if let cSV = cSV {
            try container.encode(cSV, forKey: Key("cSV"))
        }
        if let compressionType = compressionType {
            try container.encode(compressionType, forKey: Key("compressionType"))
        }
        if let jSON = jSON {
            try container.encode(jSON, forKey: Key("jSON"))
        }
        if let parquet = parquet {
            try container.encode(parquet, forKey: Key("parquet"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cSVDecoded = try containerValues.decodeIfPresent(CSVInput.self, forKey: .cSV)
        cSV = cSVDecoded
        let compressionTypeDecoded = try containerValues.decodeIfPresent(CompressionType.self, forKey: .compressionType)
        compressionType = compressionTypeDecoded
        let jSONDecoded = try containerValues.decodeIfPresent(JSONInput.self, forKey: .jSON)
        jSON = jSONDecoded
        let parquetDecoded = try containerValues.decodeIfPresent(ParquetInput.self, forKey: .parquet)
        parquet = parquetDecoded
    }
}
