// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Tiering: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accessTier = "AccessTier"
        case days = "Days"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: Key("xmlns"))
        }
        if let accessTier = accessTier {
            try container.encode(accessTier, forKey: Key("accessTier"))
        }
        if days != 0 {
            try container.encode(days, forKey: Key("days"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let daysDecoded = try containerValues.decode(Int.self, forKey: .days)
        days = daysDecoded
        let accessTierDecoded = try containerValues.decodeIfPresent(IntelligentTieringAccessTier.self, forKey: .accessTier)
        accessTier = accessTierDecoded
    }
}
