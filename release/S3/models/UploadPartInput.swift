// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UploadPartInput: Equatable {
    /// <p>Object data.</p>
    public let body: Data?
    /// <p>The name of the bucket to which the multipart upload was initiated.</p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: String?
    /// <p>Size of the body in bytes. This parameter is useful when the size of the body cannot be
    ///          determined automatically.</p>
    public let contentLength: Int
    /// <p>The base64-encoded 128-bit MD5 digest of the part data. This parameter is auto-populated
    ///          when using the command from the CLI. This parameter is required if object lock parameters
    ///          are specified.</p>
    public let contentMD5: String?
    /// <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: String?
    /// <p>Object key for which the multipart upload was initiated.</p>
    public let key: String?
    /// <p>Part number of part being uploaded. This is a positive integer between 1 and
    ///          10,000.</p>
    public let partNumber: Int
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: RequestPayer?
    /// <p>Specifies the algorithm to use to when encrypting the object (for example,
    ///          AES256).</p>
    public let sSECustomerAlgorithm: String?
    /// <p>Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This
    ///          value is used to store the object and then it is discarded; Amazon S3 does not store the
    ///          encryption key. The key must be appropriate for use with the algorithm specified in the
    ///             <code>x-amz-server-side-encryption-customer-algorithm header</code>. This must be the
    ///          same encryption key specified in the initiate multipart upload request.</p>
    public let sSECustomerKey: String?
    /// <p>Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
    ///          this header for a message integrity check to ensure that the encryption key was transmitted
    ///          without error.</p>
    public let sSECustomerKeyMD5: String?
    /// <p>Upload ID identifying the multipart upload whose part is being uploaded.</p>
    public let uploadId: String?

    public init (
        body: Data? = nil,
        bucket: String? = nil,
        contentLength: Int = 0,
        contentMD5: String? = nil,
        expectedBucketOwner: String? = nil,
        key: String? = nil,
        partNumber: Int = 0,
        requestPayer: RequestPayer? = nil,
        sSECustomerAlgorithm: String? = nil,
        sSECustomerKey: String? = nil,
        sSECustomerKeyMD5: String? = nil,
        uploadId: String? = nil
    )
    {
        self.body = body
        self.bucket = bucket
        self.contentLength = contentLength
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.partNumber = partNumber
        self.requestPayer = requestPayer
        self.sSECustomerAlgorithm = sSECustomerAlgorithm
        self.sSECustomerKey = sSECustomerKey
        self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        self.uploadId = uploadId
    }
}
