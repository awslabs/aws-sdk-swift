// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UploadPartCopyInput: Equatable {
    /// <p>The bucket name.</p>
    ///          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
    ///          <p>When using this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com. When using this action using S3 on Outposts through the AWS SDKs, you provide the Outposts bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">Using S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let bucket: String?
    /// <p>Specifies the source object for the copy operation. You specify the value in one of two
    ///          formats, depending on whether you want to access the source object through an <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points.html">access point</a>:</p>
    ///          <ul>
    ///             <li>
    ///                <p>For objects not accessed through an access point, specify the name of the source
    ///                bucket and key of the source object, separated by a slash (/). For example, to copy
    ///                the object <code>reports/january.pdf</code> from the bucket
    ///                   <code>awsexamplebucket</code>, use
    ///                   <code>awsexamplebucket/reports/january.pdf</code>. The value must be URL
    ///                encoded.</p>
    ///             </li>
    ///             <li>
    ///                <p>For objects accessed through access points, specify the Amazon Resource Name (ARN) of the object as accessed through the access point, in the format <code>arn:aws:s3:<Region>:<account-id>:accesspoint/<access-point-name>/object/<key></code>. For example, to copy the object <code>reports/january.pdf</code> through access point <code>my-access-point</code> owned by account <code>123456789012</code> in Region <code>us-west-2</code>, use the URL encoding of <code>arn:aws:s3:us-west-2:123456789012:accesspoint/my-access-point/object/reports/january.pdf</code>. The value must be URL encoded.</p>
    ///                <note>
    ///                   <p>Amazon S3 supports copy operations using access points only when the source and destination buckets are in the same AWS Region.</p>
    ///                </note>
    ///                <p>Alternatively, for objects accessed through Amazon S3 on Outposts, specify the ARN of the object as accessed in the format <code>arn:aws:s3-outposts:<Region>:<account-id>:outpost/<outpost-id>/object/<key></code>. For example, to copy the object <code>reports/january.pdf</code> through outpost <code>my-outpost</code> owned by account <code>123456789012</code> in Region <code>us-west-2</code>, use the URL encoding of <code>arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/object/reports/january.pdf</code>. The value must be URL encoded.  </p>
    ///             </li>
    ///          </ul>
    ///          <p>To copy a specific version of an object, append <code>?versionId=<version-id></code>
    ///          to the value (for example,
    ///             <code>awsexamplebucket/reports/january.pdf?versionId=QUpfdndhfd8438MNFDN93jdnJFkdmqnh893</code>).
    ///          If you don't specify a version ID, Amazon S3 copies the latest version of the source
    ///          object.</p>
    public let copySource: String?
    /// <p>Copies the object if its entity tag (ETag) matches the specified tag.</p>
    public let copySourceIfMatch: String?
    /// <p>Copies the object if it has been modified since the specified time.</p>
    public let copySourceIfModifiedSince: Date?
    /// <p>Copies the object if its entity tag (ETag) is different than the specified ETag.</p>
    public let copySourceIfNoneMatch: String?
    /// <p>Copies the object if it hasn't been modified since the specified time.</p>
    public let copySourceIfUnmodifiedSince: Date?
    /// <p>The range of bytes to copy from the source object. The range value must use the form
    ///          bytes=first-last, where the first and last are the zero-based byte offsets to copy. For
    ///          example, bytes=0-9 indicates that you want to copy the first 10 bytes of the source. You
    ///          can copy a range only if the source object is greater than 5 MB.</p>
    public let copySourceRange: String?
    /// <p>Specifies the algorithm to use when decrypting the source object (for example,
    ///          AES256).</p>
    public let copySourceSSECustomerAlgorithm: String?
    /// <p>Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source
    ///          object. The encryption key provided in this header must be one that was used when the
    ///          source object was created.</p>
    public let copySourceSSECustomerKey: String?
    /// <p>Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
    ///          this header for a message integrity check to ensure that the encryption key was transmitted
    ///          without error.</p>
    public let copySourceSSECustomerKeyMD5: String?
    /// <p>The account ID of the expected destination bucket owner. If the destination bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedBucketOwner: String?
    /// <p>The account ID of the expected source bucket owner. If the source bucket is owned by a different account, the request will fail with an HTTP <code>403 (Access Denied)</code> error.</p>
    public let expectedSourceBucketOwner: String?
    /// <p>Object key for which the multipart upload was initiated.</p>
    public let key: String?
    /// <p>Part number of part being copied. This is a positive integer between 1 and
    ///          10,000.</p>
    public let partNumber: Int
    /// <p>Confirms that the requester knows that they will be charged for the request. Bucket
    ///          owners need not specify this parameter in their requests. For information about downloading
    ///          objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
    ///             Requestor Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
    public let requestPayer: RequestPayer?
    /// <p>Specifies the algorithm to use to when encrypting the object (for example,
    ///          AES256).</p>
    public let sSECustomerAlgorithm: String?
    /// <p>Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This
    ///          value is used to store the object and then it is discarded; Amazon S3 does not store the
    ///          encryption key. The key must be appropriate for use with the algorithm specified in the
    ///             <code>x-amz-server-side-encryption-customer-algorithm</code> header. This must be the
    ///          same encryption key specified in the initiate multipart upload request.</p>
    public let sSECustomerKey: String?
    /// <p>Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
    ///          this header for a message integrity check to ensure that the encryption key was transmitted
    ///          without error.</p>
    public let sSECustomerKeyMD5: String?
    /// <p>Upload ID identifying the multipart upload whose part is being copied.</p>
    public let uploadId: String?

    public init (
        bucket: String? = nil,
        copySource: String? = nil,
        copySourceIfMatch: String? = nil,
        copySourceIfModifiedSince: Date? = nil,
        copySourceIfNoneMatch: String? = nil,
        copySourceIfUnmodifiedSince: Date? = nil,
        copySourceRange: String? = nil,
        copySourceSSECustomerAlgorithm: String? = nil,
        copySourceSSECustomerKey: String? = nil,
        copySourceSSECustomerKeyMD5: String? = nil,
        expectedBucketOwner: String? = nil,
        expectedSourceBucketOwner: String? = nil,
        key: String? = nil,
        partNumber: Int = 0,
        requestPayer: RequestPayer? = nil,
        sSECustomerAlgorithm: String? = nil,
        sSECustomerKey: String? = nil,
        sSECustomerKeyMD5: String? = nil,
        uploadId: String? = nil
    )
    {
        self.bucket = bucket
        self.copySource = copySource
        self.copySourceIfMatch = copySourceIfMatch
        self.copySourceIfModifiedSince = copySourceIfModifiedSince
        self.copySourceIfNoneMatch = copySourceIfNoneMatch
        self.copySourceIfUnmodifiedSince = copySourceIfUnmodifiedSince
        self.copySourceRange = copySourceRange
        self.copySourceSSECustomerAlgorithm = copySourceSSECustomerAlgorithm
        self.copySourceSSECustomerKey = copySourceSSECustomerKey
        self.copySourceSSECustomerKeyMD5 = copySourceSSECustomerKeyMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.expectedSourceBucketOwner = expectedSourceBucketOwner
        self.key = key
        self.partNumber = partNumber
        self.requestPayer = requestPayer
        self.sSECustomerAlgorithm = sSECustomerAlgorithm
        self.sSECustomerKey = sSECustomerKey
        self.sSECustomerKeyMD5 = sSECustomerKeyMD5
        self.uploadId = uploadId
    }
}
