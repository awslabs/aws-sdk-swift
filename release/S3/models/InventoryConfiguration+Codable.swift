// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InventoryConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destination = "Destination"
        case filter = "Filter"
        case id = "Id"
        case includedObjectVersions = "IncludedObjectVersions"
        case isEnabled = "IsEnabled"
        case optionalFields = "OptionalFields"
        case schedule = "Schedule"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: Key("xmlns"))
        }
        if let destination = destination {
            try container.encode(destination, forKey: Key("destination"))
        }
        if let filter = filter {
            try container.encode(filter, forKey: Key("filter"))
        }
        if let id = id {
            try container.encode(id, forKey: Key("id"))
        }
        if let includedObjectVersions = includedObjectVersions {
            try container.encode(includedObjectVersions, forKey: Key("includedObjectVersions"))
        }
        if isEnabled != false {
            try container.encode(isEnabled, forKey: Key("isEnabled"))
        }
        if let optionalFields = optionalFields {
            var optionalFieldsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("optionalFields"))
            for inventoryoptionalfield0 in optionalFields {
                try optionalFieldsContainer.encode(inventoryoptionalfield0, forKey: Key("Field"))
            }
        }
        if let schedule = schedule {
            try container.encode(schedule, forKey: Key("schedule"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(InventoryDestination.self, forKey: .destination)
        destination = destinationDecoded
        let isEnabledDecoded = try containerValues.decode(Bool.self, forKey: .isEnabled)
        isEnabled = isEnabledDecoded
        let filterDecoded = try containerValues.decodeIfPresent(InventoryFilter.self, forKey: .filter)
        filter = filterDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let includedObjectVersionsDecoded = try containerValues.decodeIfPresent(InventoryIncludedObjectVersions.self, forKey: .includedObjectVersions)
        includedObjectVersions = includedObjectVersionsDecoded
        if containerValues.contains(.optionalFields) {
            struct KeyVal0{struct Field{}}
            let optionalFieldsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Field>.CodingKeys.self, forKey: .optionalFields)
            if let optionalFieldsWrappedContainer = optionalFieldsWrappedContainer {
                let optionalFieldsContainer = try optionalFieldsWrappedContainer.decodeIfPresent([InventoryOptionalField].self, forKey: .member)
                var optionalFieldsBuffer:[InventoryOptionalField]? = nil
                if let optionalFieldsContainer = optionalFieldsContainer {
                    optionalFieldsBuffer = [InventoryOptionalField]()
                    for stringContainer0 in optionalFieldsContainer {
                        optionalFieldsBuffer?.append(stringContainer0)
                    }
                }
                optionalFields = optionalFieldsBuffer
            } else {
                optionalFields = []
            }
        } else {
            optionalFields = nil
        }
        let scheduleDecoded = try containerValues.decodeIfPresent(InventorySchedule.self, forKey: .schedule)
        schedule = scheduleDecoded
    }
}
