// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetBucketNotificationConfigurationOutputBody: Equatable {
    public let topicConfigurations: [TopicConfiguration]?
    public let queueConfigurations: [QueueConfiguration]?
    public let lambdaFunctionConfigurations: [LambdaFunctionConfiguration]?
}

extension GetBucketNotificationConfigurationOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case lambdaFunctionConfigurations = "CloudFunctionConfiguration"
        case queueConfigurations = "QueueConfiguration"
        case topicConfigurations = "TopicConfiguration"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.topicConfigurations) {
            let topicConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .topicConfigurations)
            if topicConfigurationsWrappedContainer != nil {
                let topicConfigurationsContainer = try containerValues.decodeIfPresent([TopicConfiguration].self, forKey: .topicConfigurations)
                var topicConfigurationsBuffer:[TopicConfiguration]? = nil
                if let topicConfigurationsContainer = topicConfigurationsContainer {
                    topicConfigurationsBuffer = [TopicConfiguration]()
                    for structureContainer0 in topicConfigurationsContainer {
                        topicConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                topicConfigurations = topicConfigurationsBuffer
            } else {
                topicConfigurations = []
            }
        } else {
            topicConfigurations = nil
        }
        if containerValues.contains(.queueConfigurations) {
            let queueConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .queueConfigurations)
            if queueConfigurationsWrappedContainer != nil {
                let queueConfigurationsContainer = try containerValues.decodeIfPresent([QueueConfiguration].self, forKey: .queueConfigurations)
                var queueConfigurationsBuffer:[QueueConfiguration]? = nil
                if let queueConfigurationsContainer = queueConfigurationsContainer {
                    queueConfigurationsBuffer = [QueueConfiguration]()
                    for structureContainer0 in queueConfigurationsContainer {
                        queueConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                queueConfigurations = queueConfigurationsBuffer
            } else {
                queueConfigurations = []
            }
        } else {
            queueConfigurations = nil
        }
        if containerValues.contains(.lambdaFunctionConfigurations) {
            let lambdaFunctionConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .lambdaFunctionConfigurations)
            if lambdaFunctionConfigurationsWrappedContainer != nil {
                let lambdaFunctionConfigurationsContainer = try containerValues.decodeIfPresent([LambdaFunctionConfiguration].self, forKey: .lambdaFunctionConfigurations)
                var lambdaFunctionConfigurationsBuffer:[LambdaFunctionConfiguration]? = nil
                if let lambdaFunctionConfigurationsContainer = lambdaFunctionConfigurationsContainer {
                    lambdaFunctionConfigurationsBuffer = [LambdaFunctionConfiguration]()
                    for structureContainer0 in lambdaFunctionConfigurationsContainer {
                        lambdaFunctionConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                lambdaFunctionConfigurations = lambdaFunctionConfigurationsBuffer
            } else {
                lambdaFunctionConfigurations = []
            }
        } else {
            lambdaFunctionConfigurations = nil
        }
    }
}
