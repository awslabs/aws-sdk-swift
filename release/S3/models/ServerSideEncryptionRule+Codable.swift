// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ServerSideEncryptionRule: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case applyServerSideEncryptionByDefault = "ApplyServerSideEncryptionByDefault"
        case bucketKeyEnabled = "BucketKeyEnabled"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: Key("xmlns"))
        }
        if let applyServerSideEncryptionByDefault = applyServerSideEncryptionByDefault {
            try container.encode(applyServerSideEncryptionByDefault, forKey: Key("applyServerSideEncryptionByDefault"))
        }
        if bucketKeyEnabled != false {
            try container.encode(bucketKeyEnabled, forKey: Key("bucketKeyEnabled"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applyServerSideEncryptionByDefaultDecoded = try containerValues.decodeIfPresent(ServerSideEncryptionByDefault.self, forKey: .applyServerSideEncryptionByDefault)
        applyServerSideEncryptionByDefault = applyServerSideEncryptionByDefaultDecoded
        let bucketKeyEnabledDecoded = try containerValues.decode(Bool.self, forKey: .bucketKeyEnabled)
        bucketKeyEnabled = bucketKeyEnabledDecoded
    }
}
