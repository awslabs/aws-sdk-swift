// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Grant: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case grantee = "Grantee"
        case permission = "Permission"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: Key("xmlns"))
        }
        if let grantee = grantee {
            var granteeContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("grantee"))
            try granteeContainer.encode(grantee, forKey: Key(""))
            try granteeContainer.encode("http://www.w3.org/2001/XMLSchema-instance", forKey: Key("xmlns:xsi"))
        }
        if let permission = permission {
            try container.encode(permission, forKey: Key("permission"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let granteeDecoded = try containerValues.decodeIfPresent(Grantee.self, forKey: .grantee)
        grantee = granteeDecoded
        let permissionDecoded = try containerValues.decodeIfPresent(Permission.self, forKey: .permission)
        permission = permissionDecoded
    }
}
