// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum InventoryOptionalField {
    case bucketkeystatus
    case etag
    case encryptionstatus
    case intelligenttieringaccesstier
    case ismultipartuploaded
    case lastmodifieddate
    case objectlocklegalholdstatus
    case objectlockmode
    case objectlockretainuntildate
    case replicationstatus
    case size
    case storageclass
    case sdkUnknown(String)
}

extension InventoryOptionalField : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InventoryOptionalField] {
        return [
            .bucketkeystatus,
            .etag,
            .encryptionstatus,
            .intelligenttieringaccesstier,
            .ismultipartuploaded,
            .lastmodifieddate,
            .objectlocklegalholdstatus,
            .objectlockmode,
            .objectlockretainuntildate,
            .replicationstatus,
            .size,
            .storageclass,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .bucketkeystatus: return "BucketKeyStatus"
        case .etag: return "ETag"
        case .encryptionstatus: return "EncryptionStatus"
        case .intelligenttieringaccesstier: return "IntelligentTieringAccessTier"
        case .ismultipartuploaded: return "IsMultipartUploaded"
        case .lastmodifieddate: return "LastModifiedDate"
        case .objectlocklegalholdstatus: return "ObjectLockLegalHoldStatus"
        case .objectlockmode: return "ObjectLockMode"
        case .objectlockretainuntildate: return "ObjectLockRetainUntilDate"
        case .replicationstatus: return "ReplicationStatus"
        case .size: return "Size"
        case .storageclass: return "StorageClass"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InventoryOptionalField(rawValue: rawValue) ?? InventoryOptionalField.sdkUnknown(rawValue)
    }
}
