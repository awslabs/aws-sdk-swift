// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DashPackage: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adTriggers = "adTriggers"
        case adsOnDeliveryRestrictions = "adsOnDeliveryRestrictions"
        case encryption = "encryption"
        case manifestLayout = "manifestLayout"
        case manifestWindowSeconds = "manifestWindowSeconds"
        case minBufferTimeSeconds = "minBufferTimeSeconds"
        case minUpdatePeriodSeconds = "minUpdatePeriodSeconds"
        case periodTriggers = "periodTriggers"
        case profile = "profile"
        case segmentDurationSeconds = "segmentDurationSeconds"
        case segmentTemplateFormat = "segmentTemplateFormat"
        case streamSelection = "streamSelection"
        case suggestedPresentationDelaySeconds = "suggestedPresentationDelaySeconds"
        case utcTiming = "utcTiming"
        case utcTimingUri = "utcTimingUri"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adTriggers = adTriggers {
            var adTriggersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .adTriggers)
            for adtriggers0 in adTriggers {
                try adTriggersContainer.encode(adtriggers0.rawValue)
            }
        }
        if let adsOnDeliveryRestrictions = adsOnDeliveryRestrictions {
            try encodeContainer.encode(adsOnDeliveryRestrictions.rawValue, forKey: .adsOnDeliveryRestrictions)
        }
        if let encryption = encryption {
            try encodeContainer.encode(encryption, forKey: .encryption)
        }
        if let manifestLayout = manifestLayout {
            try encodeContainer.encode(manifestLayout.rawValue, forKey: .manifestLayout)
        }
        if manifestWindowSeconds != 0 {
            try encodeContainer.encode(manifestWindowSeconds, forKey: .manifestWindowSeconds)
        }
        if minBufferTimeSeconds != 0 {
            try encodeContainer.encode(minBufferTimeSeconds, forKey: .minBufferTimeSeconds)
        }
        if minUpdatePeriodSeconds != 0 {
            try encodeContainer.encode(minUpdatePeriodSeconds, forKey: .minUpdatePeriodSeconds)
        }
        if let periodTriggers = periodTriggers {
            var periodTriggersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .periodTriggers)
            for __listof__periodtriggerselement0 in periodTriggers {
                try periodTriggersContainer.encode(__listof__periodtriggerselement0.rawValue)
            }
        }
        if let profile = profile {
            try encodeContainer.encode(profile.rawValue, forKey: .profile)
        }
        if segmentDurationSeconds != 0 {
            try encodeContainer.encode(segmentDurationSeconds, forKey: .segmentDurationSeconds)
        }
        if let segmentTemplateFormat = segmentTemplateFormat {
            try encodeContainer.encode(segmentTemplateFormat.rawValue, forKey: .segmentTemplateFormat)
        }
        if let streamSelection = streamSelection {
            try encodeContainer.encode(streamSelection, forKey: .streamSelection)
        }
        if suggestedPresentationDelaySeconds != 0 {
            try encodeContainer.encode(suggestedPresentationDelaySeconds, forKey: .suggestedPresentationDelaySeconds)
        }
        if let utcTiming = utcTiming {
            try encodeContainer.encode(utcTiming.rawValue, forKey: .utcTiming)
        }
        if let utcTimingUri = utcTimingUri {
            try encodeContainer.encode(utcTimingUri, forKey: .utcTimingUri)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adTriggersContainer = try containerValues.decodeIfPresent([__AdTriggersElement].self, forKey: .adTriggers)
        var adTriggersDecoded0:[__AdTriggersElement]? = nil
        if let adTriggersContainer = adTriggersContainer {
            adTriggersDecoded0 = [__AdTriggersElement]()
            for string0 in adTriggersContainer {
                adTriggersDecoded0?.append(string0)
            }
        }
        adTriggers = adTriggersDecoded0
        let adsOnDeliveryRestrictionsDecoded = try containerValues.decodeIfPresent(AdsOnDeliveryRestrictions.self, forKey: .adsOnDeliveryRestrictions)
        adsOnDeliveryRestrictions = adsOnDeliveryRestrictionsDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(DashEncryption.self, forKey: .encryption)
        encryption = encryptionDecoded
        let manifestLayoutDecoded = try containerValues.decodeIfPresent(ManifestLayout.self, forKey: .manifestLayout)
        manifestLayout = manifestLayoutDecoded
        let manifestWindowSecondsDecoded = try containerValues.decode(Int.self, forKey: .manifestWindowSeconds)
        manifestWindowSeconds = manifestWindowSecondsDecoded
        let minBufferTimeSecondsDecoded = try containerValues.decode(Int.self, forKey: .minBufferTimeSeconds)
        minBufferTimeSeconds = minBufferTimeSecondsDecoded
        let minUpdatePeriodSecondsDecoded = try containerValues.decode(Int.self, forKey: .minUpdatePeriodSeconds)
        minUpdatePeriodSeconds = minUpdatePeriodSecondsDecoded
        let periodTriggersContainer = try containerValues.decodeIfPresent([__PeriodTriggersElement].self, forKey: .periodTriggers)
        var periodTriggersDecoded0:[__PeriodTriggersElement]? = nil
        if let periodTriggersContainer = periodTriggersContainer {
            periodTriggersDecoded0 = [__PeriodTriggersElement]()
            for string0 in periodTriggersContainer {
                periodTriggersDecoded0?.append(string0)
            }
        }
        periodTriggers = periodTriggersDecoded0
        let profileDecoded = try containerValues.decodeIfPresent(Profile.self, forKey: .profile)
        profile = profileDecoded
        let segmentDurationSecondsDecoded = try containerValues.decode(Int.self, forKey: .segmentDurationSeconds)
        segmentDurationSeconds = segmentDurationSecondsDecoded
        let segmentTemplateFormatDecoded = try containerValues.decodeIfPresent(SegmentTemplateFormat.self, forKey: .segmentTemplateFormat)
        segmentTemplateFormat = segmentTemplateFormatDecoded
        let streamSelectionDecoded = try containerValues.decodeIfPresent(StreamSelection.self, forKey: .streamSelection)
        streamSelection = streamSelectionDecoded
        let suggestedPresentationDelaySecondsDecoded = try containerValues.decode(Int.self, forKey: .suggestedPresentationDelaySeconds)
        suggestedPresentationDelaySeconds = suggestedPresentationDelaySecondsDecoded
        let utcTimingDecoded = try containerValues.decodeIfPresent(UtcTiming.self, forKey: .utcTiming)
        utcTiming = utcTimingDecoded
        let utcTimingUriDecoded = try containerValues.decodeIfPresent(String.self, forKey: .utcTimingUri)
        utcTimingUri = utcTimingUriDecoded
    }
}
