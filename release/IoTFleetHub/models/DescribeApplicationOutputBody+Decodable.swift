// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeApplicationOutputBody: Equatable {
    public let applicationId: String?
    public let applicationArn: String?
    public let applicationName: String?
    public let applicationDescription: String?
    public let applicationUrl: String?
    public let applicationState: ApplicationState?
    public let applicationCreationDate: Int
    public let applicationLastUpdateDate: Int
    public let roleArn: String?
    public let ssoClientId: String?
    public let errorMessage: String?
    public let tags: [String:String]?
}

extension DescribeApplicationOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case applicationArn
        case applicationCreationDate
        case applicationDescription
        case applicationId
        case applicationLastUpdateDate
        case applicationName
        case applicationState
        case applicationUrl
        case errorMessage
        case roleArn
        case ssoClientId
        case tags
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let applicationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationArn)
        applicationArn = applicationArnDecoded
        let applicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let applicationDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationDescription)
        applicationDescription = applicationDescriptionDecoded
        let applicationUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .applicationUrl)
        applicationUrl = applicationUrlDecoded
        let applicationStateDecoded = try containerValues.decodeIfPresent(ApplicationState.self, forKey: .applicationState)
        applicationState = applicationStateDecoded
        let applicationCreationDateDecoded = try containerValues.decode(Int.self, forKey: .applicationCreationDate)
        applicationCreationDate = applicationCreationDateDecoded
        let applicationLastUpdateDateDecoded = try containerValues.decode(Int.self, forKey: .applicationLastUpdateDate)
        applicationLastUpdateDate = applicationLastUpdateDateDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let ssoClientIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ssoClientId)
        ssoClientId = ssoClientIdDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
