// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum KmsGrantOperation {
    case createGrant
    case decrypt
    case describeKey
    case encrypt
    case generateDataKey
    case generateDataKeyPair
    case generateDataKeyPairWithoutPlaintext
    case generateDataKeyWithoutPlaintext
    case getPublicKey
    case reencryptFrom
    case reencryptTo
    case retireGrant
    case sign
    case verify
    case sdkUnknown(String)
}

extension KmsGrantOperation : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [KmsGrantOperation] {
        return [
            .createGrant,
            .decrypt,
            .describeKey,
            .encrypt,
            .generateDataKey,
            .generateDataKeyPair,
            .generateDataKeyPairWithoutPlaintext,
            .generateDataKeyWithoutPlaintext,
            .getPublicKey,
            .reencryptFrom,
            .reencryptTo,
            .retireGrant,
            .sign,
            .verify,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .createGrant: return "CreateGrant"
        case .decrypt: return "Decrypt"
        case .describeKey: return "DescribeKey"
        case .encrypt: return "Encrypt"
        case .generateDataKey: return "GenerateDataKey"
        case .generateDataKeyPair: return "GenerateDataKeyPair"
        case .generateDataKeyPairWithoutPlaintext: return "GenerateDataKeyPairWithoutPlaintext"
        case .generateDataKeyWithoutPlaintext: return "GenerateDataKeyWithoutPlaintext"
        case .getPublicKey: return "GetPublicKey"
        case .reencryptFrom: return "ReEncryptFrom"
        case .reencryptTo: return "ReEncryptTo"
        case .retireGrant: return "RetireGrant"
        case .sign: return "Sign"
        case .verify: return "Verify"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = KmsGrantOperation(rawValue: rawValue) ?? KmsGrantOperation.sdkUnknown(rawValue)
    }
}
