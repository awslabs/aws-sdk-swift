// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum Locale {
    case de
    case en
    case es
    case fr
    case it
    case ja
    case ko
    case ptBr
    case zhCn
    case zhTw
    case sdkUnknown(String)
}

extension Locale : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Locale] {
        return [
            .de,
            .en,
            .es,
            .fr,
            .it,
            .ja,
            .ko,
            .ptBr,
            .zhCn,
            .zhTw,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .de: return "DE"
        case .en: return "EN"
        case .es: return "ES"
        case .fr: return "FR"
        case .it: return "IT"
        case .ja: return "JA"
        case .ko: return "KO"
        case .ptBr: return "PT_BR"
        case .zhCn: return "ZH_CN"
        case .zhTw: return "ZH_TW"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Locale(rawValue: rawValue) ?? Locale.sdkUnknown(rawValue)
    }
}
