// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListFindingsInputBody: Equatable {
    public let analyzerArn: String?
    public let filter: [String:Criterion]?
    public let sort: SortCriteria?
    public let nextToken: String?
    public let maxResults: Int?
}

extension ListFindingsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case analyzerArn
        case filter
        case maxResults
        case nextToken
        case sort
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let analyzerArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .analyzerArn)
        analyzerArn = analyzerArnDecoded
        let filterContainer = try containerValues.decodeIfPresent([String:Criterion].self, forKey: .filter)
        var filterDecoded0: [String:Criterion]? = nil
        if let filterContainer = filterContainer {
            filterDecoded0 = [String:Criterion]()
            for (key0, criterion0) in filterContainer {
                filterDecoded0?[key0] = criterion0
            }
        }
        filter = filterDecoded0
        let sortDecoded = try containerValues.decodeIfPresent(SortCriteria.self, forKey: .sort)
        sort = sortDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
