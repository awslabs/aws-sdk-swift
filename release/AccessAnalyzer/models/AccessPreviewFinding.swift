// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>An access preview finding generated by the access preview.</p>
public struct AccessPreviewFinding: Equatable {
    /// <p>The action in the analyzed policy statement that an external principal has permission to
    ///          perform.</p>
    public let action: [String]?
    /// <p>Provides context on how the access preview finding compares to existing access
    ///          identified in Access Analyzer.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>New</code> - The finding is for newly-introduced access.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Unchanged</code> - The preview finding is an existing finding that would
    ///                remain unchanged.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Changed</code> - The preview finding is an existing finding with a change in
    ///                status.</p>
    ///             </li>
    ///          </ul>
    ///          <p>For example, a <code>Changed</code> finding with preview status <code>Resolved</code>
    ///          and existing status <code>Active</code> indicates the existing <code>Active</code> finding
    ///          would become <code>Resolved</code> as a result of the proposed permissions change.</p>
    public let changeType: FindingChangeType?
    /// <p>The condition in the analyzed policy statement that resulted in a finding.</p>
    public let condition: [String:String]?
    /// <p>The time at which the access preview finding was created.</p>
    public let createdAt: Date?
    /// <p>An error.</p>
    public let error: String?
    /// <p>The existing ID of the finding in Access Analyzer, provided only for existing findings.</p>
    public let existingFindingId: String?
    /// <p>The existing status of the finding, provided only for existing findings.</p>
    public let existingFindingStatus: FindingStatus?
    /// <p>The ID of the access preview finding. This ID uniquely identifies the element in the
    ///          list of access preview findings and is not related to the finding ID in Access
    ///          Analyzer.</p>
    public let id: String?
    /// <p>Indicates whether the policy that generated the finding allows public access to the
    ///          resource.</p>
    public let isPublic: Bool?
    /// <p>The external principal that has access to a resource within the zone of trust.</p>
    public let principal: [String:String]?
    /// <p>The resource that an external principal has access to. This is the resource associated
    ///          with the access preview.</p>
    public let resource: String?
    /// <p>The AWS account ID that owns the resource. For most AWS resources, the owning
    ///          account is the account in which the resource was created.</p>
    public let resourceOwnerAccount: String?
    /// <p>The type of the resource that can be accessed in the finding.</p>
    public let resourceType: ResourceType?
    /// <p>The sources of the finding. This indicates how the access that generated the finding is
    ///          granted. It is populated for Amazon S3 bucket findings.</p>
    public let sources: [FindingSource]?
    /// <p>The preview status of the finding. This is what the status of the finding would be after
    ///          permissions deployment. For example, a <code>Changed</code> finding with preview status
    ///             <code>Resolved</code> and existing status <code>Active</code> indicates the existing
    ///             <code>Active</code> finding would become <code>Resolved</code> as a result of the
    ///          proposed permissions change.</p>
    public let status: FindingStatus?

    public init (
        action: [String]? = nil,
        changeType: FindingChangeType? = nil,
        condition: [String:String]? = nil,
        createdAt: Date? = nil,
        error: String? = nil,
        existingFindingId: String? = nil,
        existingFindingStatus: FindingStatus? = nil,
        id: String? = nil,
        isPublic: Bool? = nil,
        principal: [String:String]? = nil,
        resource: String? = nil,
        resourceOwnerAccount: String? = nil,
        resourceType: ResourceType? = nil,
        sources: [FindingSource]? = nil,
        status: FindingStatus? = nil
    )
    {
        self.action = action
        self.changeType = changeType
        self.condition = condition
        self.createdAt = createdAt
        self.error = error
        self.existingFindingId = existingFindingId
        self.existingFindingStatus = existingFindingStatus
        self.id = id
        self.isPublic = isPublic
        self.principal = principal
        self.resource = resource
        self.resourceOwnerAccount = resourceOwnerAccount
        self.resourceType = resourceType
        self.sources = sources
        self.status = status
    }
}
