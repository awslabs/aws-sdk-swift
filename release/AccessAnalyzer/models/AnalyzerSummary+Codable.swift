// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AnalyzerSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case createdAt
        case lastResourceAnalyzed
        case lastResourceAnalyzedAt
        case name
        case status
        case statusReason
        case tags
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let lastResourceAnalyzed = lastResourceAnalyzed {
            try encodeContainer.encode(lastResourceAnalyzed, forKey: .lastResourceAnalyzed)
        }
        if let lastResourceAnalyzedAt = lastResourceAnalyzedAt {
            try encodeContainer.encode(lastResourceAnalyzedAt.timeIntervalSince1970, forKey: .lastResourceAnalyzedAt)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(`Type`.self, forKey: .type)
        type = typeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastResourceAnalyzedDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastResourceAnalyzed)
        lastResourceAnalyzed = lastResourceAnalyzedDecoded
        let lastResourceAnalyzedAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastResourceAnalyzedAt)
        lastResourceAnalyzedAt = lastResourceAnalyzedAtDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, string0) in tagsContainer {
                tagsDecoded0?[key0] = string0
            }
        }
        tags = tagsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(AnalyzerStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(StatusReason.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
    }
}
