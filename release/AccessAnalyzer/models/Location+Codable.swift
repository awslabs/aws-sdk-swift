// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Location: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case path
        case span
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let path = path {
            var pathContainer = encodeContainer.nestedUnkeyedContainer(forKey: .path)
            for pathelementlist0 in path {
                try pathContainer.encode(pathelementlist0)
            }
        }
        if let span = span {
            try encodeContainer.encode(span, forKey: .span)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathContainer = try containerValues.decodeIfPresent([PathElement].self, forKey: .path)
        var pathDecoded0:[PathElement]? = nil
        if let pathContainer = pathContainer {
            pathDecoded0 = [PathElement]()
            for union0 in pathContainer {
                pathDecoded0?.append(union0)
            }
        }
        path = pathDecoded0
        let spanDecoded = try containerValues.decodeIfPresent(Span.self, forKey: .span)
        span = spanDecoded
    }
}
