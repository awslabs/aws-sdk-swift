// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AccessPreview: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case analyzerArn
        case configurations
        case createdAt
        case id
        case status
        case statusReason
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analyzerArn = analyzerArn {
            try encodeContainer.encode(analyzerArn, forKey: .analyzerArn)
        }
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .configurations)
            for (dictKey0, configurationsmap0) in configurations {
                try configurationsContainer.encode(configurationsmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let analyzerArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .analyzerArn)
        analyzerArn = analyzerArnDecoded
        let configurationsContainer = try containerValues.decodeIfPresent([String:Configuration].self, forKey: .configurations)
        var configurationsDecoded0: [String:Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [String:Configuration]()
            for (key0, configuration0) in configurationsContainer {
                configurationsDecoded0?[key0] = configuration0
            }
        }
        configurations = configurationsDecoded0
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AccessPreviewStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(AccessPreviewStatusReason.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
    }
}
