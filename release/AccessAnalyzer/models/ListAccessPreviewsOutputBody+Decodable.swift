// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListAccessPreviewsOutputBody: Equatable {
    public let accessPreviews: [AccessPreviewSummary]?
    public let nextToken: String?
}

extension ListAccessPreviewsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case accessPreviews
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessPreviewsContainer = try containerValues.decodeIfPresent([AccessPreviewSummary].self, forKey: .accessPreviews)
        var accessPreviewsDecoded0:[AccessPreviewSummary]? = nil
        if let accessPreviewsContainer = accessPreviewsContainer {
            accessPreviewsDecoded0 = [AccessPreviewSummary]()
            for structure0 in accessPreviewsContainer {
                accessPreviewsDecoded0?.append(structure0)
            }
        }
        accessPreviews = accessPreviewsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
