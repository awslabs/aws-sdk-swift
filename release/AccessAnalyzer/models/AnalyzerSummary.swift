// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Contains information about the analyzer.</p>
public struct AnalyzerSummary: Equatable {
    /// <p>The ARN of the analyzer.</p>
    public let arn: String?
    /// <p>A timestamp for the time at which the analyzer was created.</p>
    public let createdAt: Date?
    /// <p>The resource that was most recently analyzed by the analyzer.</p>
    public let lastResourceAnalyzed: String?
    /// <p>The time at which the most recently analyzed resource was analyzed.</p>
    public let lastResourceAnalyzedAt: Date?
    /// <p>The name of the analyzer.</p>
    public let name: String?
    /// <p>The status of the analyzer. An <code>Active</code> analyzer successfully monitors
    ///          supported resources and generates new findings. The analyzer is <code>Disabled</code> when
    ///          a user action, such as removing trusted access for AWS IAM Access Analyzer from AWS Organizations,
    ///          causes the analyzer to stop generating new findings. The status is <code>Creating</code>
    ///          when the analyzer creation is in progress and <code>Failed</code> when the analyzer
    ///          creation has failed. </p>
    public let status: AnalyzerStatus?
    /// <p>The <code>statusReason</code> provides more details about the current status of the
    ///          analyzer. For example, if the creation for the analyzer fails, a <code>Failed</code> status
    ///          is returned. For an analyzer with organization as the type, this failure can be due to an
    ///          issue with creating the service-linked roles required in the member accounts of the AWS
    ///          organization.</p>
    public let statusReason: StatusReason?
    /// <p>The tags added to the analyzer.</p>
    public let tags: [String:String]?
    /// <p>The type of analyzer, which corresponds to the zone of trust chosen for the
    ///          analyzer.</p>
    public let type: `Type`?

    public init (
        arn: String? = nil,
        createdAt: Date? = nil,
        lastResourceAnalyzed: String? = nil,
        lastResourceAnalyzedAt: Date? = nil,
        name: String? = nil,
        status: AnalyzerStatus? = nil,
        statusReason: StatusReason? = nil,
        tags: [String:String]? = nil,
        type: `Type`? = nil
    )
    {
        self.arn = arn
        self.createdAt = createdAt
        self.lastResourceAnalyzed = lastResourceAnalyzed
        self.lastResourceAnalyzedAt = lastResourceAnalyzedAt
        self.name = name
        self.status = status
        self.statusReason = statusReason
        self.tags = tags
        self.type = type
    }
}
