// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Configuration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case iamRole
        case kmsKey
        case s3Bucket
        case sdkUnknown
        case secretsManagerSecret
        case sqsQueue
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .iamRole(iamRole):
                if let iamRole = iamRole {
                    try container.encode(iamRole, forKey: .iamRole)
                }
            case let .kmsKey(kmsKey):
                if let kmsKey = kmsKey {
                    try container.encode(kmsKey, forKey: .kmsKey)
                }
            case let .s3Bucket(s3Bucket):
                if let s3Bucket = s3Bucket {
                    try container.encode(s3Bucket, forKey: .s3Bucket)
                }
            case let .secretsManagerSecret(secretsManagerSecret):
                if let secretsManagerSecret = secretsManagerSecret {
                    try container.encode(secretsManagerSecret, forKey: .secretsManagerSecret)
                }
            case let .sqsQueue(sqsQueue):
                if let sqsQueue = sqsQueue {
                    try container.encode(sqsQueue, forKey: .sqsQueue)
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let iamRoleDecoded = try values.decodeIfPresent(IamRoleConfiguration.self, forKey: .iamRole)
        if let iamRole = iamRoleDecoded {
            self = .iamRole(iamRole)
            return
        }
        let kmsKeyDecoded = try values.decodeIfPresent(KmsKeyConfiguration.self, forKey: .kmsKey)
        if let kmsKey = kmsKeyDecoded {
            self = .kmsKey(kmsKey)
            return
        }
        let secretsManagerSecretDecoded = try values.decodeIfPresent(SecretsManagerSecretConfiguration.self, forKey: .secretsManagerSecret)
        if let secretsManagerSecret = secretsManagerSecretDecoded {
            self = .secretsManagerSecret(secretsManagerSecret)
            return
        }
        let s3BucketDecoded = try values.decodeIfPresent(S3BucketConfiguration.self, forKey: .s3Bucket)
        if let s3Bucket = s3BucketDecoded {
            self = .s3Bucket(s3Bucket)
            return
        }
        let sqsQueueDecoded = try values.decodeIfPresent(SqsQueueConfiguration.self, forKey: .sqsQueue)
        if let sqsQueue = sqsQueueDecoded {
            self = .sqsQueue(sqsQueue)
            return
        }
        self = .sdkUnknown("")
    }
}
