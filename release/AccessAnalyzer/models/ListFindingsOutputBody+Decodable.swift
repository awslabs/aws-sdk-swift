// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListFindingsOutputBody: Equatable {
    public let findings: [FindingSummary]?
    public let nextToken: String?
}

extension ListFindingsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case findings
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let findingsContainer = try containerValues.decodeIfPresent([FindingSummary].self, forKey: .findings)
        var findingsDecoded0:[FindingSummary]? = nil
        if let findingsContainer = findingsContainer {
            findingsDecoded0 = [FindingSummary]()
            for structure0 in findingsContainer {
                findingsDecoded0?.append(structure0)
            }
        }
        findings = findingsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
