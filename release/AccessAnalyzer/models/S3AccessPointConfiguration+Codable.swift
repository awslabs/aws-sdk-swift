// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension S3AccessPointConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accessPointPolicy
        case networkOrigin
        case publicAccessBlock
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPointPolicy = accessPointPolicy {
            try encodeContainer.encode(accessPointPolicy, forKey: .accessPointPolicy)
        }
        if let networkOrigin = networkOrigin {
            try encodeContainer.encode(networkOrigin, forKey: .networkOrigin)
        }
        if let publicAccessBlock = publicAccessBlock {
            try encodeContainer.encode(publicAccessBlock, forKey: .publicAccessBlock)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessPointPolicyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accessPointPolicy)
        accessPointPolicy = accessPointPolicyDecoded
        let publicAccessBlockDecoded = try containerValues.decodeIfPresent(S3PublicAccessBlockConfiguration.self, forKey: .publicAccessBlock)
        publicAccessBlock = publicAccessBlockDecoded
        let networkOriginDecoded = try containerValues.decodeIfPresent(NetworkOriginConfiguration.self, forKey: .networkOrigin)
        networkOrigin = networkOriginDecoded
    }
}
