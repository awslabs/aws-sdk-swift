// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Trail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allRegions
        case cloudTrailArn
        case regions
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allRegions = allRegions {
            try encodeContainer.encode(allRegions, forKey: .allRegions)
        }
        if let cloudTrailArn = cloudTrailArn {
            try encodeContainer.encode(cloudTrailArn, forKey: .cloudTrailArn)
        }
        if let regions = regions {
            var regionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regions)
            for regionlist0 in regions {
                try regionsContainer.encode(regionlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudTrailArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cloudTrailArn)
        cloudTrailArn = cloudTrailArnDecoded
        let regionsContainer = try containerValues.decodeIfPresent([String].self, forKey: .regions)
        var regionsDecoded0:[String]? = nil
        if let regionsContainer = regionsContainer {
            regionsDecoded0 = [String]()
            for string0 in regionsContainer {
                regionsDecoded0?.append(string0)
            }
        }
        regions = regionsDecoded0
        let allRegionsDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .allRegions)
        allRegions = allRegionsDecoded
    }
}
