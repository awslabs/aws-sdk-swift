// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ValidatePolicyFinding: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case findingDetails
        case findingType
        case issueCode
        case learnMoreLink
        case locations
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let findingDetails = findingDetails {
            try encodeContainer.encode(findingDetails, forKey: .findingDetails)
        }
        if let findingType = findingType {
            try encodeContainer.encode(findingType.rawValue, forKey: .findingType)
        }
        if let issueCode = issueCode {
            try encodeContainer.encode(issueCode, forKey: .issueCode)
        }
        if let learnMoreLink = learnMoreLink {
            try encodeContainer.encode(learnMoreLink, forKey: .learnMoreLink)
        }
        if let locations = locations {
            var locationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .locations)
            for locationlist0 in locations {
                try locationsContainer.encode(locationlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let findingDetailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .findingDetails)
        findingDetails = findingDetailsDecoded
        let findingTypeDecoded = try containerValues.decodeIfPresent(ValidatePolicyFindingType.self, forKey: .findingType)
        findingType = findingTypeDecoded
        let issueCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .issueCode)
        issueCode = issueCodeDecoded
        let learnMoreLinkDecoded = try containerValues.decodeIfPresent(String.self, forKey: .learnMoreLink)
        learnMoreLink = learnMoreLinkDecoded
        let locationsContainer = try containerValues.decodeIfPresent([Location].self, forKey: .locations)
        var locationsDecoded0:[Location]? = nil
        if let locationsContainer = locationsContainer {
            locationsDecoded0 = [Location]()
            for structure0 in locationsContainer {
                locationsDecoded0?.append(structure0)
            }
        }
        locations = locationsDecoded0
    }
}
