// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateAnalyzerInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case analyzerName
        case archiveRules
        case clientToken
        case tags
        case type
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analyzerName = analyzerName {
            try encodeContainer.encode(analyzerName, forKey: .analyzerName)
        }
        if let archiveRules = archiveRules {
            var archiveRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .archiveRules)
            for inlinearchiveruleslist0 in archiveRules {
                try archiveRulesContainer.encode(inlinearchiveruleslist0)
            }
        }
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}
