// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateAnalyzerInputBody: Equatable {
    public let analyzerName: String?
    public let type: `Type`?
    public let archiveRules: [InlineArchiveRule]?
    public let tags: [String:String]?
    public let clientToken: String?
}

extension CreateAnalyzerInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case analyzerName
        case archiveRules
        case clientToken
        case tags
        case type
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let analyzerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .analyzerName)
        analyzerName = analyzerNameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(`Type`.self, forKey: .type)
        type = typeDecoded
        let archiveRulesContainer = try containerValues.decodeIfPresent([InlineArchiveRule].self, forKey: .archiveRules)
        var archiveRulesDecoded0:[InlineArchiveRule]? = nil
        if let archiveRulesContainer = archiveRulesContainer {
            archiveRulesDecoded0 = [InlineArchiveRule]()
            for structure0 in archiveRulesContainer {
                archiveRulesDecoded0?.append(structure0)
            }
        }
        archiveRules = archiveRulesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, string0) in tagsContainer {
                tagsDecoded0?[key0] = string0
            }
        }
        tags = tagsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
