// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents the input to <a>RestoreDBClusterFromSnapshot</a>.</p>
public struct RestoreDBClusterFromSnapshotInput: Equatable {
    /// <p>Provides the list of Amazon EC2 Availability Zones that instances in the restored DB
    ///             cluster can be created in.</p>
    public let availabilityZones: [String]?
    /// <p>The name of the cluster to create from the snapshot or cluster snapshot. This
    ///             parameter isn't case sensitive.</p>
    ///         <p>Constraints:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
    ///             </li>
    ///             <li>
    ///                 <p>The first character must be a letter.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Cannot end with a hyphen or contain two consecutive hyphens.</p>
    ///             </li>
    ///          </ul>
    ///         <p>Example: <code>my-snapshot-id</code>
    ///         </p>
    public let dBClusterIdentifier: String?
    /// <p>The name of the subnet group to use for the new cluster.</p>
    ///         <p>Constraints: If provided, must match the name of an existing
    ///                 <code>DBSubnetGroup</code>.</p>
    ///         <p>Example: <code>mySubnetgroup</code>
    ///         </p>
    public let dBSubnetGroupName: String?
    /// <p>Specifies whether this cluster can be deleted. If <code>DeletionProtection</code> is enabled, the cluster cannot be deleted unless it is modified and <code>DeletionProtection</code> is disabled. <code>DeletionProtection</code> protects clusters from being accidentally deleted.</p>
    public let deletionProtection: Bool?
    /// <p>A list of log types that must be enabled for exporting to Amazon CloudWatch Logs.</p>
    public let enableCloudwatchLogsExports: [String]?
    /// <p>The database engine to use for the new cluster.</p>
    ///         <p>Default: The same as source.</p>
    ///         <p>Constraint: Must be compatible with the engine of the source.</p>
    public let engine: String?
    /// <p>The version of the database engine to use for the new cluster.</p>
    public let engineVersion: String?
    /// <p>The AWS KMS key identifier to use when restoring an encrypted cluster from a DB snapshot or cluster snapshot.</p>
    ///         <p>The AWS KMS key identifier is the Amazon Resource Name (ARN) for the AWS KMS encryption key. If you are restoring a cluster with the same AWS account that owns the AWS KMS encryption key used to encrypt the new cluster, then you can use the AWS KMS key alias instead of the ARN for the AWS KMS encryption key.</p>
    ///         <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the
    ///             following occurs:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>If the snapshot or cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored cluster is encrypted using the AWS KMS key that was used to encrypt the snapshot or the cluster snapshot.</p>
    ///             </li>
    ///             <li>
    ///                 <p>If the snapshot or the cluster snapshot in
    ///                         <code>SnapshotIdentifier</code> is not encrypted, then the restored DB
    ///                     cluster is not encrypted.</p>
    ///             </li>
    ///          </ul>
    public let kmsKeyId: String?
    /// <p>The port number on which the new cluster accepts connections.</p>
    ///         <p>Constraints: Must be a value from <code>1150</code> to <code>65535</code>.</p>
    ///         <p>Default: The same port as the original cluster.</p>
    public let port: Int?
    /// <p>The identifier for the snapshot or cluster snapshot to restore from.</p>
    ///         <p>You can use either the name or the Amazon Resource Name (ARN) to specify a cluster
    ///             snapshot. However, you can use only the ARN to specify a snapshot.</p>
    ///         <p>Constraints:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Must match the identifier of an existing snapshot.</p>
    ///             </li>
    ///          </ul>
    public let snapshotIdentifier: String?
    /// <p>The tags to be assigned to the restored cluster.</p>
    public let tags: [Tag]?
    /// <p>A list of virtual private cloud (VPC) security groups that the new cluster will
    ///             belong to.</p>
    public let vpcSecurityGroupIds: [String]?

    public init (
        availabilityZones: [String]? = nil,
        dBClusterIdentifier: String? = nil,
        dBSubnetGroupName: String? = nil,
        deletionProtection: Bool? = nil,
        enableCloudwatchLogsExports: [String]? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        kmsKeyId: String? = nil,
        port: Int? = nil,
        snapshotIdentifier: String? = nil,
        tags: [Tag]? = nil,
        vpcSecurityGroupIds: [String]? = nil
    )
    {
        self.availabilityZones = availabilityZones
        self.dBClusterIdentifier = dBClusterIdentifier
        self.dBSubnetGroupName = dBSubnetGroupName
        self.deletionProtection = deletionProtection
        self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
        self.engine = engine
        self.engineVersion = engineVersion
        self.kmsKeyId = kmsKeyId
        self.port = port
        self.snapshotIdentifier = snapshotIdentifier
        self.tags = tags
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}
