// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeGlobalClustersOutputBody: Equatable {
    public let marker: String?
    public let globalClusters: [GlobalCluster]?
}

extension DescribeGlobalClustersOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case globalClusters = "GlobalClusters"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: Key("DescribeGlobalClustersResult"))
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.globalClusters) {
            struct KeyVal0{struct GlobalClusterMember{}}
            let globalClustersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.GlobalClusterMember>.CodingKeys.self, forKey: .globalClusters)
            if let globalClustersWrappedContainer = globalClustersWrappedContainer {
                let globalClustersContainer = try globalClustersWrappedContainer.decodeIfPresent([GlobalCluster].self, forKey: .member)
                var globalClustersBuffer:[GlobalCluster]? = nil
                if let globalClustersContainer = globalClustersContainer {
                    globalClustersBuffer = [GlobalCluster]()
                    for structureContainer0 in globalClustersContainer {
                        globalClustersBuffer?.append(structureContainer0)
                    }
                }
                globalClusters = globalClustersBuffer
            } else {
                globalClusters = []
            }
        } else {
            globalClusters = nil
        }
    }
}
