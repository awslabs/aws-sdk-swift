// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p> Detailed information about an engine version. </p>
public struct DBEngineVersion: Equatable {
    /// <p>The description of the database engine.</p>
    public let dBEngineDescription: String?
    /// <p>The description of the database engine version.</p>
    public let dBEngineVersionDescription: String?
    /// <p>The name of the parameter group family for the database engine.</p>
    public let dBParameterGroupFamily: String?
    /// <p>The name of the database engine.</p>
    public let engine: String?
    /// <p>The version number of the database engine.</p>
    public let engineVersion: String?
    /// <p>The types of logs that the database engine has available for export to Amazon
    ///             CloudWatch Logs.</p>
    public let exportableLogTypes: [String]?
    /// <p>A value that indicates whether the engine version supports exporting the log types
    ///             specified by <code>ExportableLogTypes</code> to CloudWatch Logs.</p>
    public let supportsLogExportsToCloudwatchLogs: Bool
    /// <p>A list of engine versions that this database engine version can be upgraded to.</p>
    public let validUpgradeTarget: [UpgradeTarget]?

    public init (
        dBEngineDescription: String? = nil,
        dBEngineVersionDescription: String? = nil,
        dBParameterGroupFamily: String? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        exportableLogTypes: [String]? = nil,
        supportsLogExportsToCloudwatchLogs: Bool = false,
        validUpgradeTarget: [UpgradeTarget]? = nil
    )
    {
        self.dBEngineDescription = dBEngineDescription
        self.dBEngineVersionDescription = dBEngineVersionDescription
        self.dBParameterGroupFamily = dBParameterGroupFamily
        self.engine = engine
        self.engineVersion = engineVersion
        self.exportableLogTypes = exportableLogTypes
        self.supportsLogExportsToCloudwatchLogs = supportsLogExportsToCloudwatchLogs
        self.validUpgradeTarget = validUpgradeTarget
    }
}
