// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Detailed information about a cluster snapshot. </p>
public struct DBClusterSnapshot: Equatable {
    /// <p>Provides the list of Amazon EC2 Availability Zones that instances in the cluster
    ///             snapshot can be restored in.</p>
    public let availabilityZones: [String]?
    /// <p>Specifies the time when the cluster was created, in Universal Coordinated Time
    ///             (UTC).</p>
    public let clusterCreateTime: Date?
    /// <p>Specifies the cluster identifier of the cluster that this cluster snapshot
    ///             was created from.</p>
    public let dBClusterIdentifier: String?
    /// <p>The Amazon Resource Name (ARN) for the cluster snapshot.</p>
    public let dBClusterSnapshotArn: String?
    /// <p>Specifies the identifier for the cluster snapshot.</p>
    public let dBClusterSnapshotIdentifier: String?
    /// <p>Specifies the name of the database engine.</p>
    public let engine: String?
    /// <p>Provides the version of the database engine for this cluster snapshot.</p>
    public let engineVersion: String?
    /// <p>If <code>StorageEncrypted</code> is <code>true</code>, the AWS KMS key identifier for
    ///             the encrypted cluster snapshot.</p>
    public let kmsKeyId: String?
    /// <p>Provides the master user name for the cluster snapshot.</p>
    public let masterUsername: String?
    /// <p>Specifies the percentage of the estimated data that has been transferred.</p>
    public let percentProgress: Int
    /// <p>Specifies the port that the cluster was listening on at the time of the
    ///             snapshot.</p>
    public let port: Int
    /// <p>Provides the time when the snapshot was taken, in UTC.</p>
    public let snapshotCreateTime: Date?
    /// <p>Provides the type of the cluster snapshot.</p>
    public let snapshotType: String?
    /// <p>If the cluster snapshot was copied from a source cluster snapshot, the ARN for
    ///             the source cluster snapshot; otherwise, a null value.</p>
    public let sourceDBClusterSnapshotArn: String?
    /// <p>Specifies the status of this cluster snapshot.</p>
    public let status: String?
    /// <p>Specifies whether the cluster snapshot is encrypted.</p>
    public let storageEncrypted: Bool
    /// <p>Provides the virtual private cloud (VPC) ID that is associated with the cluster
    ///             snapshot.</p>
    public let vpcId: String?

    public init (
        availabilityZones: [String]? = nil,
        clusterCreateTime: Date? = nil,
        dBClusterIdentifier: String? = nil,
        dBClusterSnapshotArn: String? = nil,
        dBClusterSnapshotIdentifier: String? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        kmsKeyId: String? = nil,
        masterUsername: String? = nil,
        percentProgress: Int = 0,
        port: Int = 0,
        snapshotCreateTime: Date? = nil,
        snapshotType: String? = nil,
        sourceDBClusterSnapshotArn: String? = nil,
        status: String? = nil,
        storageEncrypted: Bool = false,
        vpcId: String? = nil
    )
    {
        self.availabilityZones = availabilityZones
        self.clusterCreateTime = clusterCreateTime
        self.dBClusterIdentifier = dBClusterIdentifier
        self.dBClusterSnapshotArn = dBClusterSnapshotArn
        self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
        self.engine = engine
        self.engineVersion = engineVersion
        self.kmsKeyId = kmsKeyId
        self.masterUsername = masterUsername
        self.percentProgress = percentProgress
        self.port = port
        self.snapshotCreateTime = snapshotCreateTime
        self.snapshotType = snapshotType
        self.sourceDBClusterSnapshotArn = sourceDBClusterSnapshotArn
        self.status = status
        self.storageEncrypted = storageEncrypted
        self.vpcId = vpcId
    }
}
