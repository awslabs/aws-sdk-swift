// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents the input to <a>CreateDBCluster</a>.
///         </p>
public struct CreateDBClusterInput: Equatable {
    /// <p>A list of Amazon EC2 Availability Zones that instances in the
    ///             cluster can be created in.</p>
    public let availabilityZones: [String]?
    /// <p>The number of days for which automated backups are retained. You
    ///             must specify a minimum value of 1.</p>
    ///         <p>Default: 1</p>
    ///         <p>Constraints:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Must be a value from 1 to 35.</p>
    ///             </li>
    ///          </ul>
    public let backupRetentionPeriod: Int?
    /// <p>The cluster identifier. This parameter is stored as a lowercase
    ///             string.</p>
    ///         <p>Constraints:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Must contain from 1 to 63 letters, numbers, or hyphens.
    ///                     </p>
    ///             </li>
    ///             <li>
    ///                 <p>The first character must be a letter.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Cannot end with a hyphen or contain two consecutive hyphens.
    ///                     </p>
    ///             </li>
    ///          </ul>
    ///         <p>Example: <code>my-cluster</code>
    ///         </p>
    public let dBClusterIdentifier: String?
    /// <p>The name of the cluster parameter group to associate with this
    ///             cluster.</p>
    public let dBClusterParameterGroupName: String?
    /// <p>A subnet group to associate with this cluster.</p>
    ///         <p>Constraints: Must match the name of an existing
    ///             <code>DBSubnetGroup</code>. Must not be default.</p>
    ///         <p>Example: <code>mySubnetgroup</code>
    ///         </p>
    public let dBSubnetGroupName: String?
    /// <p>Specifies whether this cluster can be deleted. If
    ///             <code>DeletionProtection</code> is enabled, the cluster cannot be
    ///             deleted unless it is modified and <code>DeletionProtection</code> is
    ///             disabled. <code>DeletionProtection</code> protects clusters from
    ///             being accidentally deleted.</p>
    public let deletionProtection: Bool?
    /// <p>A list of log types that need to be enabled for exporting to Amazon
    ///             CloudWatch Logs. You can enable audit logs or profiler logs. For more
    ///             information, see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/event-auditing.html">
    ///                 Auditing Amazon DocumentDB Events</a>
    ///             and <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/profiling.html">
    ///                 Profiling Amazon DocumentDB Operations</a>.
    ///         </p>
    public let enableCloudwatchLogsExports: [String]?
    /// <p>The name of the database engine to be used for this cluster.</p>
    ///         <p>Valid values: <code>docdb</code>
    ///         </p>
    public let engine: String?
    /// <p>The version number of the database engine to use. The --engine-version will default to the latest major engine version. For production workloads, we recommend explicitly declaring this parameter with the intended major engine version.</p>
    public let engineVersion: String?
    /// <p>The cluster identifier of the new global cluster.</p>
    public let globalClusterIdentifier: String?
    /// <p>The AWS KMS key identifier for an encrypted cluster.</p>
    ///         <p>The AWS KMS key identifier is the Amazon Resource Name (ARN) for
    ///             the AWS KMS encryption key. If you are creating a cluster using the
    ///             same AWS account that owns the AWS KMS encryption key that is used
    ///             to encrypt the new cluster, you can use the AWS KMS key alias
    ///             instead of the ARN for the AWS KMS encryption key.</p>
    ///         <p>If an encryption key is not specified in <code>KmsKeyId</code>:
    ///             </p>
    ///         <ul>
    ///             <li>
    ///                 <p>If the <code>StorageEncrypted</code> parameter is
    ///                     <code>true</code>, Amazon DocumentDB uses your default encryption key.
    ///                     </p>
    ///             </li>
    ///          </ul>
    ///         <p>AWS KMS creates the default encryption key for your AWS account.
    ///             Your AWS account has a different default encryption key for each AWS
    ///             Region.</p>
    public let kmsKeyId: String?
    /// <p>The password for the master database user. This password can
    ///             contain any printable ASCII character except forward slash (/),
    ///             double quote ("), or the "at" symbol (@).</p>
    ///         <p>Constraints: Must contain from 8 to 100 characters.</p>
    public let masterUserPassword: String?
    /// <p>The name of the master user for the cluster.</p>
    ///         <p>Constraints:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Must be from 1 to 63 letters or numbers.</p>
    ///             </li>
    ///             <li>
    ///                 <p>The first character must be a letter.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Cannot be a reserved word for the chosen database engine.
    ///                     </p>
    ///             </li>
    ///          </ul>
    public let masterUsername: String?
    /// <p>The port number on which the instances in the cluster accept
    ///             connections.</p>
    public let port: Int?
    /// <p>Not currently supported.
    ///             </p>
    public let preSignedUrl: String?
    /// <p>The daily time range during which automated backups are created if
    ///             automated backups are enabled using the
    ///             <code>BackupRetentionPeriod</code> parameter. </p>
    ///         <p>The default is a 30-minute window selected at random from an 8-hour
    ///             block of time for each AWS Region. </p>
    ///         <p>Constraints:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Must be in Universal Coordinated Time (UTC).</p>
    ///             </li>
    ///             <li>
    ///                 <p>Must not conflict with the preferred maintenance window.
    ///                     </p>
    ///             </li>
    ///             <li>
    ///                 <p>Must be at least 30 minutes.</p>
    ///             </li>
    ///          </ul>
    public let preferredBackupWindow: String?
    /// <p>The weekly time range during which system maintenance can occur,
    ///             in Universal Coordinated Time (UTC).</p>
    ///         <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code>
    ///         </p>
    ///         <p>The default is a 30-minute window selected at random from an 8-hour
    ///             block of time for each AWS Region, occurring on a random day of the
    ///             week.</p>
    ///         <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p>
    ///         <p>Constraints: Minimum 30-minute window.</p>
    public let preferredMaintenanceWindow: String?
    /// <p>Specifies whether the cluster is encrypted.</p>
    public let storageEncrypted: Bool?
    /// <p>The tags to be assigned to the cluster.</p>
    public let tags: [Tag]?
    /// <p>A list of EC2 VPC security groups to associate with this cluster.
    ///             </p>
    public let vpcSecurityGroupIds: [String]?

    public init (
        availabilityZones: [String]? = nil,
        backupRetentionPeriod: Int? = nil,
        dBClusterIdentifier: String? = nil,
        dBClusterParameterGroupName: String? = nil,
        dBSubnetGroupName: String? = nil,
        deletionProtection: Bool? = nil,
        enableCloudwatchLogsExports: [String]? = nil,
        engine: String? = nil,
        engineVersion: String? = nil,
        globalClusterIdentifier: String? = nil,
        kmsKeyId: String? = nil,
        masterUserPassword: String? = nil,
        masterUsername: String? = nil,
        port: Int? = nil,
        preSignedUrl: String? = nil,
        preferredBackupWindow: String? = nil,
        preferredMaintenanceWindow: String? = nil,
        storageEncrypted: Bool? = nil,
        tags: [Tag]? = nil,
        vpcSecurityGroupIds: [String]? = nil
    )
    {
        self.availabilityZones = availabilityZones
        self.backupRetentionPeriod = backupRetentionPeriod
        self.dBClusterIdentifier = dBClusterIdentifier
        self.dBClusterParameterGroupName = dBClusterParameterGroupName
        self.dBSubnetGroupName = dBSubnetGroupName
        self.deletionProtection = deletionProtection
        self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
        self.engine = engine
        self.engineVersion = engineVersion
        self.globalClusterIdentifier = globalClusterIdentifier
        self.kmsKeyId = kmsKeyId
        self.masterUserPassword = masterUserPassword
        self.masterUsername = masterUsername
        self.port = port
        self.preSignedUrl = preSignedUrl
        self.preferredBackupWindow = preferredBackupWindow
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.storageEncrypted = storageEncrypted
        self.tags = tags
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}
