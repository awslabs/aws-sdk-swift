// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Certificate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case certificateArn = "CertificateArn"
        case certificateIdentifier = "CertificateIdentifier"
        case certificateType = "CertificateType"
        case thumbprint = "Thumbprint"
        case validFrom = "ValidFrom"
        case validTill = "ValidTill"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let certificateArn = certificateArn {
            try container.encode(certificateArn, forKey: Key("CertificateArn"))
        }
        if let certificateIdentifier = certificateIdentifier {
            try container.encode(certificateIdentifier, forKey: Key("CertificateIdentifier"))
        }
        if let certificateType = certificateType {
            try container.encode(certificateType, forKey: Key("CertificateType"))
        }
        if let thumbprint = thumbprint {
            try container.encode(thumbprint, forKey: Key("Thumbprint"))
        }
        if let validFrom = validFrom {
            try container.encode(TimestampWrapper(validFrom, format: .dateTime), forKey: Key("validFrom"))
        }
        if let validTill = validTill {
            try container.encode(TimestampWrapper(validTill, format: .dateTime), forKey: Key("validTill"))
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificateIdentifier)
        certificateIdentifier = certificateIdentifierDecoded
        let certificateTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificateType)
        certificateType = certificateTypeDecoded
        let thumbprintDecoded = try containerValues.decodeIfPresent(String.self, forKey: .thumbprint)
        thumbprint = thumbprintDecoded
        let validFromDecoded = try containerValues.decodeIfPresent(String.self, forKey: .validFrom)
        var validFromBuffer:Date? = nil
        if let validFromDecoded = validFromDecoded {
            validFromBuffer = try TimestampWrapperDecoder.parseDateStringValue(validFromDecoded, format: .dateTime)
        }
        validFrom = validFromBuffer
        let validTillDecoded = try containerValues.decodeIfPresent(String.self, forKey: .validTill)
        var validTillBuffer:Date? = nil
        if let validTillDecoded = validTillDecoded {
            validTillBuffer = try TimestampWrapperDecoder.parseDateStringValue(validTillDecoded, format: .dateTime)
        }
        validTill = validTillBuffer
        let certificateArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
    }
}
