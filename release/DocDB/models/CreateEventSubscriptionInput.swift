// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Represents the input to <a>CreateEventSubscription</a>.</p>
public struct CreateEventSubscriptionInput: Equatable {
    /// <p> A Boolean value; set to <code>true</code> to activate the subscription, set to <code>false</code> to create the subscription but not active it. </p>
    public let enabled: Bool?
    /// <p> A list of event categories for a <code>SourceType</code> that you want to subscribe to. </p>
    public let eventCategories: [String]?
    /// <p>The Amazon Resource Name (ARN) of the SNS topic created for event notification. Amazon SNS creates the ARN when you create a topic and subscribe to it.</p>
    public let snsTopicArn: String?
    /// <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a
    ///             hyphen or contain two consecutive hyphens.</p>
    ///         <p>Constraints:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>If <code>SourceIds</code> are provided, <code>SourceType</code> must also be
    ///                     provided.</p>
    ///             </li>
    ///             <li>
    ///                 <p>If the source type is an instance, a <code>DBInstanceIdentifier</code> must
    ///                     be provided.</p>
    ///             </li>
    ///             <li>
    ///                 <p>If the source type is a security group, a <code>DBSecurityGroupName</code>
    ///                     must be provided.</p>
    ///             </li>
    ///             <li>
    ///                 <p>If the source type is a parameter group, a
    ///                         <code>DBParameterGroupName</code> must be provided.</p>
    ///             </li>
    ///             <li>
    ///                 <p>If the source type is a snapshot, a <code>DBSnapshotIdentifier</code> must
    ///                     be provided.</p>
    ///             </li>
    ///          </ul>
    public let sourceIds: [String]?
    /// <p>The type of source that is generating the events. For example, if you want to be notified of events generated by an instance, you would set this parameter to <code>db-instance</code>. If this value is not specified, all events are returned.</p>
    ///         <p>Valid values: <code>db-instance</code>, <code>db-cluster</code>,
    ///                 <code>db-parameter-group</code>, <code>db-security-group</code>,
    ///                 <code>db-snapshot</code>, <code>db-cluster-snapshot</code>
    ///         </p>
    public let sourceType: String?
    /// <p>The name of the subscription.</p>
    ///         <p>Constraints: The name must be fewer than 255 characters.</p>
    public let subscriptionName: String?
    /// <p>The tags to be assigned to the event subscription.</p>
    public let tags: [Tag]?

    public init (
        enabled: Bool? = nil,
        eventCategories: [String]? = nil,
        snsTopicArn: String? = nil,
        sourceIds: [String]? = nil,
        sourceType: String? = nil,
        subscriptionName: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.enabled = enabled
        self.eventCategories = eventCategories
        self.snsTopicArn = snsTopicArn
        self.sourceIds = sourceIds
        self.sourceType = sourceType
        self.subscriptionName = subscriptionName
        self.tags = tags
    }
}
