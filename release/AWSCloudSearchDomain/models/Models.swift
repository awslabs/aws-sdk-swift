// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension CloudSearchDomainClientTypes.Bucket: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if count != 0 {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count) ?? 0
        count = countDecoded
    }
}

extension CloudSearchDomainClientTypes {
    /// A container for facet information.
    public struct Bucket: Swift.Equatable {
        /// The number of hits that contain the facet value in the specified facet field.
        public var count: Swift.Int
        /// The facet value being counted.
        public var value: Swift.String?

        public init (
            count: Swift.Int = 0,
            value: Swift.String? = nil
        )
        {
            self.count = count
            self.value = value
        }
    }

}

extension CloudSearchDomainClientTypes.BucketInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case buckets
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let buckets = buckets {
            var bucketsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .buckets)
            for bucket0 in buckets {
                try bucketsContainer.encode(bucket0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketsContainer = try containerValues.decodeIfPresent([CloudSearchDomainClientTypes.Bucket?].self, forKey: .buckets)
        var bucketsDecoded0:[CloudSearchDomainClientTypes.Bucket]? = nil
        if let bucketsContainer = bucketsContainer {
            bucketsDecoded0 = [CloudSearchDomainClientTypes.Bucket]()
            for structure0 in bucketsContainer {
                if let structure0 = structure0 {
                    bucketsDecoded0?.append(structure0)
                }
            }
        }
        buckets = bucketsDecoded0
    }
}

extension CloudSearchDomainClientTypes {
    /// A container for the calculated facet values and counts.
    public struct BucketInfo: Swift.Equatable {
        /// A list of the calculated facet values and counts.
        public var buckets: [CloudSearchDomainClientTypes.Bucket]?

        public init (
            buckets: [CloudSearchDomainClientTypes.Bucket]? = nil
        )
        {
            self.buckets = buckets
        }
    }

}

extension CloudSearchDomainClientTypes {
    public enum ContentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case applicationJson
        case applicationXml
        case sdkUnknown(Swift.String)

        public static var allCases: [ContentType] {
            return [
                .applicationJson,
                .applicationXml,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .applicationJson: return "application/json"
            case .applicationXml: return "application/xml"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContentType(rawValue: rawValue) ?? ContentType.sdkUnknown(rawValue)
        }
    }
}

extension DocumentServiceException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DocumentServiceExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.status = output.status
        } else {
            self.message = nil
            self.status = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Information about any problems encountered while processing an upload request.
public struct DocumentServiceException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The description of the errors returned by the document service.
    public var message: Swift.String?
    /// The return status of a document upload request, error or success.
    public var status: Swift.String?

    public init (
        message: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.message = message
        self.status = status
    }
}

struct DocumentServiceExceptionBody: Swift.Equatable {
    let status: Swift.String?
    let message: Swift.String?
}

extension DocumentServiceExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case status
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudSearchDomainClientTypes.DocumentServiceWarning: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudSearchDomainClientTypes {
    /// A warning returned by the document service when an issue is discovered while processing an upload request.
    public struct DocumentServiceWarning: Swift.Equatable {
        /// The description for a warning returned by the document service.
        public var message: Swift.String?

        public init (
            message: Swift.String? = nil
        )
        {
            self.message = message
        }
    }

}

extension CloudSearchDomainClientTypes.FieldStats: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count
        case max
        case mean
        case min
        case missing
        case stddev
        case sum
        case sumOfSquares
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if count != 0 {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let max = self.max {
            try encodeContainer.encode(max, forKey: .max)
        }
        if let mean = self.mean {
            try encodeContainer.encode(mean, forKey: .mean)
        }
        if let min = self.min {
            try encodeContainer.encode(min, forKey: .min)
        }
        if missing != 0 {
            try encodeContainer.encode(missing, forKey: .missing)
        }
        if stddev != 0.0 {
            try encodeContainer.encode(stddev, forKey: .stddev)
        }
        if sum != 0.0 {
            try encodeContainer.encode(sum, forKey: .sum)
        }
        if sumOfSquares != 0.0 {
            try encodeContainer.encode(sumOfSquares, forKey: .sumOfSquares)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .min)
        min = minDecoded
        let maxDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .max)
        max = maxDecoded
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count) ?? 0
        count = countDecoded
        let missingDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .missing) ?? 0
        missing = missingDecoded
        let sumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sum) ?? 0.0
        sum = sumDecoded
        let sumOfSquaresDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sumOfSquares) ?? 0.0
        sumOfSquares = sumOfSquaresDecoded
        let meanDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mean)
        mean = meanDecoded
        let stddevDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .stddev) ?? 0.0
        stddev = stddevDecoded
    }
}

extension CloudSearchDomainClientTypes {
    /// The statistics for a field calculated in the request.
    public struct FieldStats: Swift.Equatable {
        /// The number of documents that contain a value in the specified field in the result set.
        public var count: Swift.Int
        /// The maximum value found in the specified field in the result set. If the field is numeric (int, int-array, double, or double-array), max is the string representation of a double-precision 64-bit floating point value. If the field is date or date-array, max is the string representation of a date with the format specified in [IETF RFC3339](http://tools.ietf.org/html/rfc3339): yyyy-mm-ddTHH:mm:ss.SSSZ.
        public var max: Swift.String?
        /// The average of the values found in the specified field in the result set. If the field is numeric (int, int-array, double, or double-array), mean is the string representation of a double-precision 64-bit floating point value. If the field is date or date-array, mean is the string representation of a date with the format specified in [IETF RFC3339](http://tools.ietf.org/html/rfc3339): yyyy-mm-ddTHH:mm:ss.SSSZ.
        public var mean: Swift.String?
        /// The minimum value found in the specified field in the result set. If the field is numeric (int, int-array, double, or double-array), min is the string representation of a double-precision 64-bit floating point value. If the field is date or date-array, min is the string representation of a date with the format specified in [IETF RFC3339](http://tools.ietf.org/html/rfc3339): yyyy-mm-ddTHH:mm:ss.SSSZ.
        public var min: Swift.String?
        /// The number of documents that do not contain a value in the specified field in the result set.
        public var missing: Swift.Int
        /// The standard deviation of the values in the specified field in the result set.
        public var stddev: Swift.Double
        /// The sum of the field values across the documents in the result set. null for date fields.
        public var sum: Swift.Double
        /// The sum of all field values in the result set squared.
        public var sumOfSquares: Swift.Double

        public init (
            count: Swift.Int = 0,
            max: Swift.String? = nil,
            mean: Swift.String? = nil,
            min: Swift.String? = nil,
            missing: Swift.Int = 0,
            stddev: Swift.Double = 0.0,
            sum: Swift.Double = 0.0,
            sumOfSquares: Swift.Double = 0.0
        )
        {
            self.count = count
            self.max = max
            self.mean = mean
            self.min = min
            self.missing = missing
            self.stddev = stddev
            self.sum = sum
            self.sumOfSquares = sumOfSquares
        }
    }

}

extension CloudSearchDomainClientTypes.Hit: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exprs
        case fields
        case highlights
        case id
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exprs = exprs {
            var exprsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .exprs)
            for (dictKey0, exprs0) in exprs {
                try exprsContainer.encode(exprs0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let fields = fields {
            var fieldsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .fields)
            for (dictKey0, fields0) in fields {
                var fields0Container = fieldsContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for string1 in fields0 {
                    try fields0Container.encode(string1)
                }
            }
        }
        if let highlights = highlights {
            var highlightsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .highlights)
            for (dictKey0, highlights0) in highlights {
                try highlightsContainer.encode(highlights0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let fieldsContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .fields)
        var fieldsDecoded0: [Swift.String:[Swift.String]]? = nil
        if let fieldsContainer = fieldsContainer {
            fieldsDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, fieldvalue0) in fieldsContainer {
                var fieldvalue0Decoded0: [Swift.String]? = nil
                if let fieldvalue0 = fieldvalue0 {
                    fieldvalue0Decoded0 = [Swift.String]()
                    for string1 in fieldvalue0 {
                        if let string1 = string1 {
                            fieldvalue0Decoded0?.append(string1)
                        }
                    }
                }
                fieldsDecoded0?[key0] = fieldvalue0Decoded0
            }
        }
        fields = fieldsDecoded0
        let exprsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .exprs)
        var exprsDecoded0: [Swift.String:Swift.String]? = nil
        if let exprsContainer = exprsContainer {
            exprsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in exprsContainer {
                if let string0 = string0 {
                    exprsDecoded0?[key0] = string0
                }
            }
        }
        exprs = exprsDecoded0
        let highlightsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .highlights)
        var highlightsDecoded0: [Swift.String:Swift.String]? = nil
        if let highlightsContainer = highlightsContainer {
            highlightsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in highlightsContainer {
                if let string0 = string0 {
                    highlightsDecoded0?[key0] = string0
                }
            }
        }
        highlights = highlightsDecoded0
    }
}

extension CloudSearchDomainClientTypes {
    /// Information about a document that matches the search request.
    public struct Hit: Swift.Equatable {
        /// The expressions returned from a document that matches the search request.
        public var exprs: [Swift.String:Swift.String]?
        /// The fields returned from a document that matches the search request.
        public var fields: [Swift.String:[Swift.String]]?
        /// The highlights returned from a document that matches the search request.
        public var highlights: [Swift.String:Swift.String]?
        /// The document ID of a document that matches the search request.
        public var id: Swift.String?

        public init (
            exprs: [Swift.String:Swift.String]? = nil,
            fields: [Swift.String:[Swift.String]]? = nil,
            highlights: [Swift.String:Swift.String]? = nil,
            id: Swift.String? = nil
        )
        {
            self.exprs = exprs
            self.fields = fields
            self.highlights = highlights
            self.id = id
        }
    }

}

extension CloudSearchDomainClientTypes.Hits: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cursor
        case found
        case hit
        case start
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cursor = self.cursor {
            try encodeContainer.encode(cursor, forKey: .cursor)
        }
        if found != 0 {
            try encodeContainer.encode(found, forKey: .found)
        }
        if let hit = hit {
            var hitContainer = encodeContainer.nestedUnkeyedContainer(forKey: .hit)
            for hit0 in hit {
                try hitContainer.encode(hit0)
            }
        }
        if start != 0 {
            try encodeContainer.encode(start, forKey: .start)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let foundDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .found) ?? 0
        found = foundDecoded
        let startDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .start) ?? 0
        start = startDecoded
        let cursorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cursor)
        cursor = cursorDecoded
        let hitContainer = try containerValues.decodeIfPresent([CloudSearchDomainClientTypes.Hit?].self, forKey: .hit)
        var hitDecoded0:[CloudSearchDomainClientTypes.Hit]? = nil
        if let hitContainer = hitContainer {
            hitDecoded0 = [CloudSearchDomainClientTypes.Hit]()
            for structure0 in hitContainer {
                if let structure0 = structure0 {
                    hitDecoded0?.append(structure0)
                }
            }
        }
        hit = hitDecoded0
    }
}

extension CloudSearchDomainClientTypes {
    /// The collection of documents that match the search request.
    public struct Hits: Swift.Equatable {
        /// A cursor that can be used to retrieve the next set of matching documents when you want to page through a large result set.
        public var cursor: Swift.String?
        /// The total number of documents that match the search request.
        public var found: Swift.Int
        /// A document that matches the search request.
        public var hit: [CloudSearchDomainClientTypes.Hit]?
        /// The index of the first matching document.
        public var start: Swift.Int

        public init (
            cursor: Swift.String? = nil,
            found: Swift.Int = 0,
            hit: [CloudSearchDomainClientTypes.Hit]? = nil,
            start: Swift.Int = 0
        )
        {
            self.cursor = cursor
            self.found = found
            self.hit = hit
            self.start = start
        }
    }

}

extension CloudSearchDomainClientTypes {
    public enum QueryParser: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case dismax
        case lucene
        case simple
        case structured
        case sdkUnknown(Swift.String)

        public static var allCases: [QueryParser] {
            return [
                .dismax,
                .lucene,
                .simple,
                .structured,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dismax: return "dismax"
            case .lucene: return "lucene"
            case .simple: return "simple"
            case .structured: return "structured"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = QueryParser(rawValue: rawValue) ?? QueryParser.sdkUnknown(rawValue)
        }
    }
}

extension SearchException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SearchExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Information about any problems encountered while processing a search request.
public struct SearchException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// A description of the error returned by the search service.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct SearchExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension SearchExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SearchInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "format", value: "sdk"))
            items.append(ClientRuntime.URLQueryItem(name: "pretty", value: "true"))
            if let cursor = cursor {
                let cursorQueryItem = ClientRuntime.URLQueryItem(name: "cursor".urlPercentEncoding(), value: Swift.String(cursor).urlPercentEncoding())
                items.append(cursorQueryItem)
            }
            if let queryOptions = queryOptions {
                let queryOptionsQueryItem = ClientRuntime.URLQueryItem(name: "q.options".urlPercentEncoding(), value: Swift.String(queryOptions).urlPercentEncoding())
                items.append(queryOptionsQueryItem)
            }
            guard let query = query else {
                let message = "Creating a URL Query Item failed. query is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let queryQueryItem = ClientRuntime.URLQueryItem(name: "q".urlPercentEncoding(), value: Swift.String(query).urlPercentEncoding())
            items.append(queryQueryItem)
            if start != 0 {
                let startQueryItem = ClientRuntime.URLQueryItem(name: "start".urlPercentEncoding(), value: Swift.String(start).urlPercentEncoding())
                items.append(startQueryItem)
            }
            if let sort = sort {
                let sortQueryItem = ClientRuntime.URLQueryItem(name: "sort".urlPercentEncoding(), value: Swift.String(sort).urlPercentEncoding())
                items.append(sortQueryItem)
            }
            if let queryParser = queryParser {
                let queryParserQueryItem = ClientRuntime.URLQueryItem(name: "q.parser".urlPercentEncoding(), value: Swift.String(queryParser.rawValue).urlPercentEncoding())
                items.append(queryParserQueryItem)
            }
            if let highlight = highlight {
                let highlightQueryItem = ClientRuntime.URLQueryItem(name: "highlight".urlPercentEncoding(), value: Swift.String(highlight).urlPercentEncoding())
                items.append(highlightQueryItem)
            }
            if size != 0 {
                let sizeQueryItem = ClientRuntime.URLQueryItem(name: "size".urlPercentEncoding(), value: Swift.String(size).urlPercentEncoding())
                items.append(sizeQueryItem)
            }
            if let stats = stats {
                let statsQueryItem = ClientRuntime.URLQueryItem(name: "stats".urlPercentEncoding(), value: Swift.String(stats).urlPercentEncoding())
                items.append(statsQueryItem)
            }
            if let expr = expr {
                let exprQueryItem = ClientRuntime.URLQueryItem(name: "expr".urlPercentEncoding(), value: Swift.String(expr).urlPercentEncoding())
                items.append(exprQueryItem)
            }
            if let facet = facet {
                let facetQueryItem = ClientRuntime.URLQueryItem(name: "facet".urlPercentEncoding(), value: Swift.String(facet).urlPercentEncoding())
                items.append(facetQueryItem)
            }
            if partial != false {
                let partialQueryItem = ClientRuntime.URLQueryItem(name: "partial".urlPercentEncoding(), value: Swift.String(partial).urlPercentEncoding())
                items.append(partialQueryItem)
            }
            if let `return` = `return` {
                let returnQueryItem = ClientRuntime.URLQueryItem(name: "return".urlPercentEncoding(), value: Swift.String(`return`).urlPercentEncoding())
                items.append(returnQueryItem)
            }
            if let filterQuery = filterQuery {
                let filterQueryQueryItem = ClientRuntime.URLQueryItem(name: "fq".urlPercentEncoding(), value: Swift.String(filterQuery).urlPercentEncoding())
                items.append(filterQueryQueryItem)
            }
            return items
        }
    }
}

extension SearchInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2013-01-01/search"
    }
}

/// Container for the parameters to the Search request.
public struct SearchInput: Swift.Equatable {
    /// Retrieves a cursor value you can use to page through large result sets. Use the size parameter to control the number of hits to include in each response. You can specify either the cursor or start parameter in a request; they are mutually exclusive. To get the first cursor, set the cursor value to initial. In subsequent requests, specify the cursor value returned in the hits section of the response. For more information, see [Paginating Results](http://docs.aws.amazon.com/cloudsearch/latest/developerguide/paginating-results.html) in the Amazon CloudSearch Developer Guide.
    public var cursor: Swift.String?
    /// Defines one or more numeric expressions that can be used to sort results or specify search or filter criteria. You can also specify expressions as return fields. You specify the expressions in JSON using the form {"EXPRESSIONNAME":"EXPRESSION"}. You can define and use multiple expressions in a search request. For example:  {"expression1":"_score*rating", "expression2":"(1/rank)*year"}  For information about the variables, operators, and functions you can use in expressions, see [Writing Expressions](http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-expressions.html#writing-expressions) in the Amazon CloudSearch Developer Guide.
    public var expr: Swift.String?
    /// Specifies one or more fields for which to get facet information, and options that control how the facet information is returned. Each specified field must be facet-enabled in the domain configuration. The fields and options are specified in JSON using the form {"FIELD":{"OPTION":VALUE,"OPTION:"STRING"},"FIELD":{"OPTION":VALUE,"OPTION":"STRING"}}. You can specify the following faceting options:
    ///
    /// * buckets specifies an array of the facet values or ranges to count. Ranges are specified using the same syntax that you use to search for a range of values. For more information, see [ Searching for a Range of Values](http://docs.aws.amazon.com/cloudsearch/latest/developerguide/searching-ranges.html) in the Amazon CloudSearch Developer Guide. Buckets are returned in the order they are specified in the request. The sort and size options are not valid if you specify buckets.
    ///
    /// * size specifies the maximum number of facets to include in the results. By default, Amazon CloudSearch returns counts for the top 10. The size parameter is only valid when you specify the sort option; it cannot be used in conjunction with buckets.
    ///
    /// * sort specifies how you want to sort the facets in the results: bucket or count. Specify bucket to sort alphabetically or numerically by facet value (in ascending order). Specify count to sort by the facet counts computed for each facet value (in descending order). To retrieve facet counts for particular values or ranges of values, use the buckets option instead of sort.
    ///
    ///
    /// If no facet options are specified, facet counts are computed for all field values, the facets are sorted by facet count, and the top 10 facets are returned in the results. To count particular buckets of values, use the buckets option. For example, the following request uses the buckets option to calculate and return facet counts by decade.  {"year":{"buckets":["[1970,1979]","[1980,1989]","[1990,1999]","[2000,2009]","[2010,}"]}}  To sort facets by facet count, use the count option. For example, the following request sets the sort option to count to sort the facet values by facet count, with the facet values that have the most matching documents listed first. Setting the size option to 3 returns only the top three facet values.  {"year":{"sort":"count","size":3}}  To sort the facets by value, use the bucket option. For example, the following request sets the sort option to bucket to sort the facet values numerically by year, with earliest year listed first.  {"year":{"sort":"bucket"}}  For more information, see [Getting and Using Facet Information](http://docs.aws.amazon.com/cloudsearch/latest/developerguide/faceting.html) in the Amazon CloudSearch Developer Guide.
    public var facet: Swift.String?
    /// Specifies a structured query that filters the results of a search without affecting how the results are scored and sorted. You use filterQuery in conjunction with the query parameter to filter the documents that match the constraints specified in the query parameter. Specifying a filter controls only which matching documents are included in the results, it has no effect on how they are scored and sorted. The filterQuery parameter supports the full structured query syntax. For more information about using filters, see [Filtering Matching Documents](http://docs.aws.amazon.com/cloudsearch/latest/developerguide/filtering-results.html) in the Amazon CloudSearch Developer Guide.
    public var filterQuery: Swift.String?
    /// Retrieves highlights for matches in the specified text or text-array fields. Each specified field must be highlight enabled in the domain configuration. The fields and options are specified in JSON using the form {"FIELD":{"OPTION":VALUE,"OPTION:"STRING"},"FIELD":{"OPTION":VALUE,"OPTION":"STRING"}}. You can specify the following highlight options:
    ///
    /// * format: specifies the format of the data in the text field: text or html. When data is returned as HTML, all non-alphanumeric characters are encoded. The default is html.
    ///
    /// * max_phrases: specifies the maximum number of occurrences of the search term(s) you want to highlight. By default, the first occurrence is highlighted.
    ///
    /// * pre_tag: specifies the string to prepend to an occurrence of a search term. The default for HTML highlights is <em>. The default for text highlights is *.
    ///
    /// * post_tag: specifies the string to append to an occurrence of a search term. The default for HTML highlights is </em>. The default for text highlights is *.
    ///
    ///
    /// If no highlight options are specified for a field, the returned field text is treated as HTML and the first match is highlighted with emphasis tags: <em>search-term</em>. For example, the following request retrieves highlights for the actors and title fields. { "actors": {}, "title": {"format": "text","max_phrases": 2,"pre_tag": "","post_tag": ""} }
    public var highlight: Swift.String?
    /// Enables partial results to be returned if one or more index partitions are unavailable. When your search index is partitioned across multiple search instances, by default Amazon CloudSearch only returns results if every partition can be queried. This means that the failure of a single search instance can result in 5xx (internal server) errors. When you enable partial results, Amazon CloudSearch returns whatever results are available and includes the percentage of documents searched in the search results (percent-searched). This enables you to more gracefully degrade your users' search experience. For example, rather than displaying no results, you could display the partial results and a message indicating that the results might be incomplete due to a temporary system outage.
    public var partial: Swift.Bool
    /// Specifies the search criteria for the request. How you specify the search criteria depends on the query parser used for the request and the parser options specified in the queryOptions parameter. By default, the simple query parser is used to process requests. To use the structured, lucene, or dismax query parser, you must also specify the queryParser parameter. For more information about specifying search criteria, see [Searching Your Data](http://docs.aws.amazon.com/cloudsearch/latest/developerguide/searching.html) in the Amazon CloudSearch Developer Guide.
    /// This member is required.
    public var query: Swift.String?
    /// Configures options for the query parser specified in the queryParser parameter. You specify the options in JSON using the following form {"OPTION1":"VALUE1","OPTION2":VALUE2"..."OPTIONN":"VALUEN"}. The options you can configure vary according to which parser you use:
    ///
    /// * defaultOperator: The default operator used to combine individual terms in the search string. For example: defaultOperator: 'or'. For the dismax parser, you specify a percentage that represents the percentage of terms in the search string (rounded down) that must match, rather than a default operator. A value of 0% is the equivalent to OR, and a value of 100% is equivalent to AND. The percentage must be specified as a value in the range 0-100 followed by the percent (%) symbol. For example, defaultOperator: 50%. Valid values: and, or, a percentage in the range 0%-100% (dismax). Default: and (simple, structured, lucene) or 100 (dismax). Valid for: simple, structured, lucene, and dismax.
    ///
    /// * fields: An array of the fields to search when no fields are specified in a search. If no fields are specified in a search and this option is not specified, all text and text-array fields are searched. You can specify a weight for each field to control the relative importance of each field when Amazon CloudSearch calculates relevance scores. To specify a field weight, append a caret (^) symbol and the weight to the field name. For example, to boost the importance of the title field over the description field you could specify: "fields":["title^5","description"]. Valid values: The name of any configured field and an optional numeric value greater than zero. Default: All text and text-array fields. Valid for: simple, structured, lucene, and dismax.
    ///
    /// * operators: An array of the operators or special characters you want to disable for the simple query parser. If you disable the and, or, or not operators, the corresponding operators (+, |, -) have no special meaning and are dropped from the search string. Similarly, disabling prefix disables the wildcard operator (*) and disabling phrase disables the ability to search for phrases by enclosing phrases in double quotes. Disabling precedence disables the ability to control order of precedence using parentheses. Disabling near disables the ability to use the ~ operator to perform a sloppy phrase search. Disabling the fuzzy operator disables the ability to use the ~ operator to perform a fuzzy search. escape disables the ability to use a backslash (</code>) to escape special characters within the search string. Disabling whitespace is an advanced option that prevents the parser from tokenizing on whitespace, which can be useful for Vietnamese. (It prevents Vietnamese words from being split incorrectly.) For example, you could disable all operators other than the phrase operator to support just simple term and phrase queries: "operators":["and","not","or", "prefix"]. Valid values: and, escape, fuzzy, near, not, or, phrase, precedence, prefix, whitespace. Default: All operators and special characters are enabled. Valid for: simple.
    ///
    /// * phraseFields: An array of the text or text-array fields you want to use for phrase searches. When the terms in the search string appear in close proximity within a field, the field scores higher. You can specify a weight for each field to boost that score. The phraseSlop option controls how much the matches can deviate from the search string and still be boosted. To specify a field weight, append a caret (^) symbol and the weight to the field name. For example, to boost phrase matches in the title field over the abstract field, you could specify: "phraseFields":["title^3", "plot"] Valid values: The name of any text or text-array field and an optional numeric value greater than zero. Default: No fields. If you don't specify any fields with phraseFields, proximity scoring is disabled even if phraseSlop is specified. Valid for: dismax.
    ///
    /// * phraseSlop: An integer value that specifies how much matches can deviate from the search phrase and still be boosted according to the weights specified in the phraseFields option; for example, phraseSlop: 2. You must also specify phraseFields to enable proximity scoring. Valid values: positive integers. Default: 0. Valid for: dismax.
    ///
    /// * explicitPhraseSlop: An integer value that specifies how much a match can deviate from the search phrase when the phrase is enclosed in double quotes in the search string. (Phrases that exceed this proximity distance are not considered a match.) For example, to specify a slop of three for dismax phrase queries, you would specify "explicitPhraseSlop":3. Valid values: positive integers. Default: 0. Valid for: dismax.
    ///
    /// * tieBreaker: When a term in the search string is found in a document's field, a score is calculated for that field based on how common the word is in that field compared to other documents. If the term occurs in multiple fields within a document, by default only the highest scoring field contributes to the document's overall score. You can specify a tieBreaker value to enable the matches in lower-scoring fields to contribute to the document's score. That way, if two documents have the same max field score for a particular term, the score for the document that has matches in more fields will be higher. The formula for calculating the score with a tieBreaker is (max field score) + (tieBreaker) * (sum of the scores for the rest of the matching fields). Set tieBreaker to 0 to disregard all but the highest scoring field (pure max): "tieBreaker":0. Set to 1 to sum the scores from all fields (pure sum): "tieBreaker":1. Valid values: 0.0 to 1.0. Default: 0.0. Valid for: dismax.
    public var queryOptions: Swift.String?
    /// Specifies which query parser to use to process the request. If queryParser is not specified, Amazon CloudSearch uses the simple query parser. Amazon CloudSearch supports four query parsers:
    ///
    /// * simple: perform simple searches of text and text-array fields. By default, the simple query parser searches all text and text-array fields. You can specify which fields to search by with the queryOptions parameter. If you prefix a search term with a plus sign (+) documents must contain the term to be considered a match. (This is the default, unless you configure the default operator with the queryOptions parameter.) You can use the - (NOT), | (OR), and * (wildcard) operators to exclude particular terms, find results that match any of the specified terms, or search for a prefix. To search for a phrase rather than individual terms, enclose the phrase in double quotes. For more information, see [Searching for Text](http://docs.aws.amazon.com/cloudsearch/latest/developerguide/searching-text.html) in the Amazon CloudSearch Developer Guide.
    ///
    /// * structured: perform advanced searches by combining multiple expressions to define the search criteria. You can also search within particular fields, search for values and ranges of values, and use advanced options such as term boosting, matchall, and near. For more information, see [Constructing Compound Queries](http://docs.aws.amazon.com/cloudsearch/latest/developerguide/searching-compound-queries.html) in the Amazon CloudSearch Developer Guide.
    ///
    /// * lucene: search using the Apache Lucene query parser syntax. For more information, see [Apache Lucene Query Parser Syntax](http://lucene.apache.org/core/4_6_0/queryparser/org/apache/lucene/queryparser/classic/package-summary.html#package_description).
    ///
    /// * dismax: search using the simplified subset of the Apache Lucene query parser syntax defined by the DisMax query parser. For more information, see [DisMax Query Parser Syntax](http://wiki.apache.org/solr/DisMaxQParserPlugin#Query_Syntax).
    public var queryParser: CloudSearchDomainClientTypes.QueryParser?
    /// Specifies the field and expression values to include in the response. Multiple fields or expressions are specified as a comma-separated list. By default, a search response includes all return enabled fields (_all_fields). To return only the document IDs for the matching documents, specify _no_fields. To retrieve the relevance score calculated for each document, specify _score.
    public var `return`: Swift.String?
    /// Specifies the maximum number of search hits to include in the response.
    public var size: Swift.Int
    /// Specifies the fields or custom expressions to use to sort the search results. Multiple fields or expressions are specified as a comma-separated list. You must specify the sort direction (asc or desc) for each field; for example, year desc,title asc. To use a field to sort results, the field must be sort-enabled in the domain configuration. Array type fields cannot be used for sorting. If no sort parameter is specified, results are sorted by their default relevance scores in descending order: _score desc. You can also sort by document ID (_id asc) and version (_version desc). For more information, see [Sorting Results](http://docs.aws.amazon.com/cloudsearch/latest/developerguide/sorting-results.html) in the Amazon CloudSearch Developer Guide.
    public var sort: Swift.String?
    /// Specifies the offset of the first search hit you want to return. Note that the result set is zero-based; the first result is at index 0. You can specify either the start or cursor parameter in a request, they are mutually exclusive. For more information, see [Paginating Results](http://docs.aws.amazon.com/cloudsearch/latest/developerguide/paginating-results.html) in the Amazon CloudSearch Developer Guide.
    public var start: Swift.Int
    /// Specifies one or more fields for which to get statistics information. Each specified field must be facet-enabled in the domain configuration. The fields are specified in JSON using the form: {"FIELD-A":{},"FIELD-B":{}} There are currently no options supported for statistics.
    public var stats: Swift.String?

    public init (
        cursor: Swift.String? = nil,
        expr: Swift.String? = nil,
        facet: Swift.String? = nil,
        filterQuery: Swift.String? = nil,
        highlight: Swift.String? = nil,
        partial: Swift.Bool = false,
        query: Swift.String? = nil,
        queryOptions: Swift.String? = nil,
        queryParser: CloudSearchDomainClientTypes.QueryParser? = nil,
        `return`: Swift.String? = nil,
        size: Swift.Int = 0,
        sort: Swift.String? = nil,
        start: Swift.Int = 0,
        stats: Swift.String? = nil
    )
    {
        self.cursor = cursor
        self.expr = expr
        self.facet = facet
        self.filterQuery = filterQuery
        self.highlight = highlight
        self.partial = partial
        self.query = query
        self.queryOptions = queryOptions
        self.queryParser = queryParser
        self.`return` = `return`
        self.size = size
        self.sort = sort
        self.start = start
        self.stats = stats
    }
}

struct SearchInputBody: Swift.Equatable {
}

extension SearchInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension SearchOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SearchOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "SearchException" : self = .searchException(try SearchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SearchOutputError: Swift.Error, Swift.Equatable {
    case searchException(SearchException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SearchOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SearchOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.facets = output.facets
            self.hits = output.hits
            self.stats = output.stats
            self.status = output.status
        } else {
            self.facets = nil
            self.hits = nil
            self.stats = nil
            self.status = nil
        }
    }
}

/// The result of a Search request. Contains the documents that match the specified search criteria and any requested fields, highlights, and facet information.
public struct SearchOutputResponse: Swift.Equatable {
    /// The requested facet information.
    public var facets: [Swift.String:CloudSearchDomainClientTypes.BucketInfo]?
    /// The documents that match the search criteria.
    public var hits: CloudSearchDomainClientTypes.Hits?
    /// The requested field statistics information.
    public var stats: [Swift.String:CloudSearchDomainClientTypes.FieldStats]?
    /// The status information returned for the search request.
    public var status: CloudSearchDomainClientTypes.SearchStatus?

    public init (
        facets: [Swift.String:CloudSearchDomainClientTypes.BucketInfo]? = nil,
        hits: CloudSearchDomainClientTypes.Hits? = nil,
        stats: [Swift.String:CloudSearchDomainClientTypes.FieldStats]? = nil,
        status: CloudSearchDomainClientTypes.SearchStatus? = nil
    )
    {
        self.facets = facets
        self.hits = hits
        self.stats = stats
        self.status = status
    }
}

struct SearchOutputResponseBody: Swift.Equatable {
    let status: CloudSearchDomainClientTypes.SearchStatus?
    let hits: CloudSearchDomainClientTypes.Hits?
    let facets: [Swift.String:CloudSearchDomainClientTypes.BucketInfo]?
    let stats: [Swift.String:CloudSearchDomainClientTypes.FieldStats]?
}

extension SearchOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case facets
        case hits
        case stats
        case status
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(CloudSearchDomainClientTypes.SearchStatus.self, forKey: .status)
        status = statusDecoded
        let hitsDecoded = try containerValues.decodeIfPresent(CloudSearchDomainClientTypes.Hits.self, forKey: .hits)
        hits = hitsDecoded
        let facetsContainer = try containerValues.decodeIfPresent([Swift.String: CloudSearchDomainClientTypes.BucketInfo?].self, forKey: .facets)
        var facetsDecoded0: [Swift.String:CloudSearchDomainClientTypes.BucketInfo]? = nil
        if let facetsContainer = facetsContainer {
            facetsDecoded0 = [Swift.String:CloudSearchDomainClientTypes.BucketInfo]()
            for (key0, bucketinfo0) in facetsContainer {
                if let bucketinfo0 = bucketinfo0 {
                    facetsDecoded0?[key0] = bucketinfo0
                }
            }
        }
        facets = facetsDecoded0
        let statsContainer = try containerValues.decodeIfPresent([Swift.String: CloudSearchDomainClientTypes.FieldStats?].self, forKey: .stats)
        var statsDecoded0: [Swift.String:CloudSearchDomainClientTypes.FieldStats]? = nil
        if let statsContainer = statsContainer {
            statsDecoded0 = [Swift.String:CloudSearchDomainClientTypes.FieldStats]()
            for (key0, fieldstats0) in statsContainer {
                if let fieldstats0 = fieldstats0 {
                    statsDecoded0?[key0] = fieldstats0
                }
            }
        }
        stats = statsDecoded0
    }
}

extension CloudSearchDomainClientTypes.SearchStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rid
        case timems
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let rid = self.rid {
            try encodeContainer.encode(rid, forKey: .rid)
        }
        if timems != 0 {
            try encodeContainer.encode(timems, forKey: .timems)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timems) ?? 0
        timems = timemsDecoded
        let ridDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rid)
        rid = ridDecoded
    }
}

extension CloudSearchDomainClientTypes {
    /// Contains the resource id (rid) and the time it took to process the request (timems).
    public struct SearchStatus: Swift.Equatable {
        /// The encrypted resource ID for the request.
        public var rid: Swift.String?
        /// How long it took to process the request, in milliseconds.
        public var timems: Swift.Int

        public init (
            rid: Swift.String? = nil,
            timems: Swift.Int = 0
        )
        {
            self.rid = rid
            self.timems = timems
        }
    }

}

extension SuggestInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "format", value: "sdk"))
            items.append(ClientRuntime.URLQueryItem(name: "pretty", value: "true"))
            guard let suggester = suggester else {
                let message = "Creating a URL Query Item failed. suggester is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let suggesterQueryItem = ClientRuntime.URLQueryItem(name: "suggester".urlPercentEncoding(), value: Swift.String(suggester).urlPercentEncoding())
            items.append(suggesterQueryItem)
            if size != 0 {
                let sizeQueryItem = ClientRuntime.URLQueryItem(name: "size".urlPercentEncoding(), value: Swift.String(size).urlPercentEncoding())
                items.append(sizeQueryItem)
            }
            guard let query = query else {
                let message = "Creating a URL Query Item failed. query is required and must not be nil."
                throw ClientRuntime.ClientError.queryItemCreationFailed(message)
            }
            let queryQueryItem = ClientRuntime.URLQueryItem(name: "q".urlPercentEncoding(), value: Swift.String(query).urlPercentEncoding())
            items.append(queryQueryItem)
            return items
        }
    }
}

extension SuggestInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2013-01-01/suggest"
    }
}

/// Container for the parameters to the Suggest request.
public struct SuggestInput: Swift.Equatable {
    /// Specifies the string for which you want to get suggestions.
    /// This member is required.
    public var query: Swift.String?
    /// Specifies the maximum number of suggestions to return.
    public var size: Swift.Int
    /// Specifies the name of the suggester to use to find suggested matches.
    /// This member is required.
    public var suggester: Swift.String?

    public init (
        query: Swift.String? = nil,
        size: Swift.Int = 0,
        suggester: Swift.String? = nil
    )
    {
        self.query = query
        self.size = size
        self.suggester = suggester
    }
}

struct SuggestInputBody: Swift.Equatable {
}

extension SuggestInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CloudSearchDomainClientTypes.SuggestModel: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case found
        case query
        case suggestions
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if found != 0 {
            try encodeContainer.encode(found, forKey: .found)
        }
        if let query = self.query {
            try encodeContainer.encode(query, forKey: .query)
        }
        if let suggestions = suggestions {
            var suggestionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .suggestions)
            for suggestionmatch0 in suggestions {
                try suggestionsContainer.encode(suggestionmatch0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .query)
        query = queryDecoded
        let foundDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .found) ?? 0
        found = foundDecoded
        let suggestionsContainer = try containerValues.decodeIfPresent([CloudSearchDomainClientTypes.SuggestionMatch?].self, forKey: .suggestions)
        var suggestionsDecoded0:[CloudSearchDomainClientTypes.SuggestionMatch]? = nil
        if let suggestionsContainer = suggestionsContainer {
            suggestionsDecoded0 = [CloudSearchDomainClientTypes.SuggestionMatch]()
            for structure0 in suggestionsContainer {
                if let structure0 = structure0 {
                    suggestionsDecoded0?.append(structure0)
                }
            }
        }
        suggestions = suggestionsDecoded0
    }
}

extension CloudSearchDomainClientTypes {
    /// Container for the suggestion information returned in a SuggestResponse.
    public struct SuggestModel: Swift.Equatable {
        /// The number of documents that were found to match the query string.
        public var found: Swift.Int
        /// The query string specified in the suggest request.
        public var query: Swift.String?
        /// The documents that match the query string.
        public var suggestions: [CloudSearchDomainClientTypes.SuggestionMatch]?

        public init (
            found: Swift.Int = 0,
            query: Swift.String? = nil,
            suggestions: [CloudSearchDomainClientTypes.SuggestionMatch]? = nil
        )
        {
            self.found = found
            self.query = query
            self.suggestions = suggestions
        }
    }

}

extension SuggestOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SuggestOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "SearchException" : self = .searchException(try SearchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SuggestOutputError: Swift.Error, Swift.Equatable {
    case searchException(SearchException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SuggestOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SuggestOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.status = output.status
            self.suggest = output.suggest
        } else {
            self.status = nil
            self.suggest = nil
        }
    }
}

/// Contains the response to a Suggest request.
public struct SuggestOutputResponse: Swift.Equatable {
    /// The status of a SuggestRequest. Contains the resource ID (rid) and how long it took to process the request (timems).
    public var status: CloudSearchDomainClientTypes.SuggestStatus?
    /// Container for the matching search suggestion information.
    public var suggest: CloudSearchDomainClientTypes.SuggestModel?

    public init (
        status: CloudSearchDomainClientTypes.SuggestStatus? = nil,
        suggest: CloudSearchDomainClientTypes.SuggestModel? = nil
    )
    {
        self.status = status
        self.suggest = suggest
    }
}

struct SuggestOutputResponseBody: Swift.Equatable {
    let status: CloudSearchDomainClientTypes.SuggestStatus?
    let suggest: CloudSearchDomainClientTypes.SuggestModel?
}

extension SuggestOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status
        case suggest
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(CloudSearchDomainClientTypes.SuggestStatus.self, forKey: .status)
        status = statusDecoded
        let suggestDecoded = try containerValues.decodeIfPresent(CloudSearchDomainClientTypes.SuggestModel.self, forKey: .suggest)
        suggest = suggestDecoded
    }
}

extension CloudSearchDomainClientTypes.SuggestStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rid
        case timems
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let rid = self.rid {
            try encodeContainer.encode(rid, forKey: .rid)
        }
        if timems != 0 {
            try encodeContainer.encode(timems, forKey: .timems)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timems) ?? 0
        timems = timemsDecoded
        let ridDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rid)
        rid = ridDecoded
    }
}

extension CloudSearchDomainClientTypes {
    /// Contains the resource id (rid) and the time it took to process the request (timems).
    public struct SuggestStatus: Swift.Equatable {
        /// The encrypted resource ID for the request.
        public var rid: Swift.String?
        /// How long it took to process the request, in milliseconds.
        public var timems: Swift.Int

        public init (
            rid: Swift.String? = nil,
            timems: Swift.Int = 0
        )
        {
            self.rid = rid
            self.timems = timems
        }
    }

}

extension CloudSearchDomainClientTypes.SuggestionMatch: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
        case score
        case suggestion
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if score != 0 {
            try encodeContainer.encode(score, forKey: .score)
        }
        if let suggestion = self.suggestion {
            try encodeContainer.encode(suggestion, forKey: .suggestion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let suggestionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .suggestion)
        suggestion = suggestionDecoded
        let scoreDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .score) ?? 0
        score = scoreDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension CloudSearchDomainClientTypes {
    /// An autocomplete suggestion that matches the query string specified in a SuggestRequest.
    public struct SuggestionMatch: Swift.Equatable {
        /// The document ID of the suggested document.
        public var id: Swift.String?
        /// The relevance score of a suggested match.
        public var score: Swift.Int
        /// The string that matches the query string specified in the SuggestRequest.
        public var suggestion: Swift.String?

        public init (
            id: Swift.String? = nil,
            score: Swift.Int = 0,
            suggestion: Swift.String? = nil
        )
        {
            self.id = id
            self.score = score
            self.suggestion = suggestion
        }
    }

}

public struct UploadDocumentsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UploadDocumentsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UploadDocumentsInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<UploadDocumentsOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        if let documents = input.operationInput.documents {
            let documentsdata = documents
            let documentsbody = ClientRuntime.HttpBody.stream(documentsdata)
            input.builder.withBody(documentsbody)
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UploadDocumentsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UploadDocumentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}

extension UploadDocumentsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documents
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documents = self.documents {
            try encodeContainer.encode(documents.toBytes().getData(), forKey: .documents)
        }
    }
}

extension UploadDocumentsInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let contentType = contentType {
            items.add(Header(name: "Content-Type", value: Swift.String(contentType.rawValue)))
        }
        return items
    }
}

extension UploadDocumentsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            items.append(ClientRuntime.URLQueryItem(name: "format", value: "sdk"))
            return items
        }
    }
}

extension UploadDocumentsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/2013-01-01/documents/batch"
    }
}

/// Container for the parameters to the UploadDocuments request.
public struct UploadDocumentsInput: Swift.Equatable {
    /// The format of the batch you are uploading. Amazon CloudSearch supports two document batch formats:
    ///
    /// * application/json
    ///
    /// * application/xml
    /// This member is required.
    public var contentType: CloudSearchDomainClientTypes.ContentType?
    /// A batch of documents formatted in JSON or HTML.
    /// This member is required.
    public var documents: ClientRuntime.ByteStream?

    public init (
        contentType: CloudSearchDomainClientTypes.ContentType? = nil,
        documents: ClientRuntime.ByteStream? = nil
    )
    {
        self.contentType = contentType
        self.documents = documents
    }
}

struct UploadDocumentsInputBody: Swift.Equatable {
    let documents: ClientRuntime.ByteStream?
}

extension UploadDocumentsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documents
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentsDecoded = try containerValues.decodeIfPresent(ClientRuntime.ByteStream.self, forKey: .documents)
        documents = documentsDecoded
    }
}

extension UploadDocumentsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UploadDocumentsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DocumentServiceException" : self = .documentServiceException(try DocumentServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UploadDocumentsOutputError: Swift.Error, Swift.Equatable {
    case documentServiceException(DocumentServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UploadDocumentsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UploadDocumentsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.adds = output.adds
            self.deletes = output.deletes
            self.status = output.status
            self.warnings = output.warnings
        } else {
            self.adds = 0
            self.deletes = 0
            self.status = nil
            self.warnings = nil
        }
    }
}

/// Contains the response to an UploadDocuments request.
public struct UploadDocumentsOutputResponse: Swift.Equatable {
    /// The number of documents that were added to the search domain.
    public var adds: Swift.Int
    /// The number of documents that were deleted from the search domain.
    public var deletes: Swift.Int
    /// The status of an UploadDocumentsRequest.
    public var status: Swift.String?
    /// Any warnings returned by the document service about the documents being uploaded.
    public var warnings: [CloudSearchDomainClientTypes.DocumentServiceWarning]?

    public init (
        adds: Swift.Int = 0,
        deletes: Swift.Int = 0,
        status: Swift.String? = nil,
        warnings: [CloudSearchDomainClientTypes.DocumentServiceWarning]? = nil
    )
    {
        self.adds = adds
        self.deletes = deletes
        self.status = status
        self.warnings = warnings
    }
}

struct UploadDocumentsOutputResponseBody: Swift.Equatable {
    let status: Swift.String?
    let adds: Swift.Int
    let deletes: Swift.Int
    let warnings: [CloudSearchDomainClientTypes.DocumentServiceWarning]?
}

extension UploadDocumentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adds
        case deletes
        case status
        case warnings
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let addsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .adds) ?? 0
        adds = addsDecoded
        let deletesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .deletes) ?? 0
        deletes = deletesDecoded
        let warningsContainer = try containerValues.decodeIfPresent([CloudSearchDomainClientTypes.DocumentServiceWarning?].self, forKey: .warnings)
        var warningsDecoded0:[CloudSearchDomainClientTypes.DocumentServiceWarning]? = nil
        if let warningsContainer = warningsContainer {
            warningsDecoded0 = [CloudSearchDomainClientTypes.DocumentServiceWarning]()
            for structure0 in warningsContainer {
                if let structure0 = structure0 {
                    warningsDecoded0?.append(structure0)
                }
            }
        }
        warnings = warningsDecoded0
    }
}
