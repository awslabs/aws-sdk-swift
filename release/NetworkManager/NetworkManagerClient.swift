// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation

public class NetworkManagerClient {
    let client: SdkHttpClient
    let config: NetworkManagerClientConfiguration
    let serviceName = "NetworkManager"
    let encoder: RequestEncoder
    let decoder: ResponseDecoder

    public init(config: NetworkManagerClientConfiguration) {
        client = SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        self.encoder = config.encoder ?? encoder
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public class NetworkManagerClientConfiguration: ClientRuntime.Configuration, AWSClientConfiguration {

        public var region: String
        public var credentialsProvider: AWSCredentialsProvider
        public var signingRegion: String
        public var endpointResolver: EndpointResolver

        public init (
            credentialsProvider: AWSCredentialsProvider,
            endpointResolver: EndpointResolver,
            region: String,
            signingRegion: String
        ) throws
        {
            self.credentialsProvider = credentialsProvider
            self.endpointResolver = endpointResolver
            self.region = region
            self.signingRegion = signingRegion
        }

        public convenience init(credentialsProvider: AWSCredentialsProvider) throws {
            let region = "us-east-1"
            let signingRegion = "us-east-1"
            let endpointResolver = DefaultEndpointResolver()
            try self.init(
                credentialsProvider: credentialsProvider,
                endpointResolver: endpointResolver,
                region: region,
                signingRegion: signingRegion
            )
        }

        public static func `default`() throws -> NetworkManagerClientConfiguration {
            let awsCredsProvider = try AWSCredentialsProvider.fromEnv()
            return try NetworkManagerClientConfiguration(credentialsProvider: awsCredsProvider)
        }
    }
}

extension NetworkManagerClient: NetworkManagerClientProtocol {
    /// <p>Associates a customer gateway with a device and optionally, with a link. If you
    ///             specify a link, it must be associated with the specified device. </p>
    ///         <p>You can only associate customer gateways that are connected to a VPN attachment on a
    ///             transit gateway. The transit gateway must be registered in your global network. When
    ///             you register a transit gateway, customer gateways that are connected to the transit
    ///             gateway are automatically included in the global network. To list customer gateways
    ///             that are connected to a transit gateway, use the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpnConnections.html">DescribeVpnConnections</a> EC2 API and filter by
    ///                 <code>transit-gateway-id</code>.</p>
    ///         <p>You cannot associate a customer gateway with more than one device and link. </p>
    public func associateCustomerGateway(input: AssociateCustomerGatewayInput, completion: @escaping (SdkResult<AssociateCustomerGatewayOutput, AssociateCustomerGatewayOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/customer-gateway-associations"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "associateCustomerGateway")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AssociateCustomerGatewayInput, AssociateCustomerGatewayOutput, AssociateCustomerGatewayOutputError>(id: "associateCustomerGateway")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AssociateCustomerGatewayInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AssociateCustomerGatewayInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AssociateCustomerGatewayInput, AssociateCustomerGatewayOutput, AssociateCustomerGatewayOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: AssociateCustomerGatewayInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Associates a link to a device. A device can be associated to multiple links and a link can be associated to multiple devices. The device and link must be in the same global network and the same site.</p>
    public func associateLink(input: AssociateLinkInput, completion: @escaping (SdkResult<AssociateLinkOutput, AssociateLinkOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/link-associations"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "associateLink")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AssociateLinkInput, AssociateLinkOutput, AssociateLinkOutputError>(id: "associateLink")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AssociateLinkInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AssociateLinkInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AssociateLinkInput, AssociateLinkOutput, AssociateLinkOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: AssociateLinkInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Associates a transit gateway Connect peer with a device, and optionally, with a link. If you
    ///             specify a link, it must be associated with the specified device. </p>
    ///         <p>You can only associate transit gateway Connect peers that have been created on a
    ///             transit gateway that's registered in your global network.</p>
    ///         <p>You cannot associate a transit gateway Connect peer with more than one device and link. </p>
    public func associateTransitGatewayConnectPeer(input: AssociateTransitGatewayConnectPeerInput, completion: @escaping (SdkResult<AssociateTransitGatewayConnectPeerOutput, AssociateTransitGatewayConnectPeerOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/transit-gateway-connect-peer-associations"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "associateTransitGatewayConnectPeer")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AssociateTransitGatewayConnectPeerInput, AssociateTransitGatewayConnectPeerOutput, AssociateTransitGatewayConnectPeerOutputError>(id: "associateTransitGatewayConnectPeer")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AssociateTransitGatewayConnectPeerInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AssociateTransitGatewayConnectPeerInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AssociateTransitGatewayConnectPeerInput, AssociateTransitGatewayConnectPeerOutput, AssociateTransitGatewayConnectPeerOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: AssociateTransitGatewayConnectPeerInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a connection between two devices. The devices can be a physical or virtual appliance that connects to a third-party appliance in a VPC, or a physical appliance that connects to another physical appliance in an on-premises network.</p>
    public func createConnection(input: CreateConnectionInput, completion: @escaping (SdkResult<CreateConnectionOutput, CreateConnectionOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/connections"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createConnection")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateConnectionInput, CreateConnectionOutput, CreateConnectionOutputError>(id: "createConnection")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateConnectionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateConnectionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateConnectionInput, CreateConnectionOutput, CreateConnectionOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateConnectionInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a new device in a global network. If you specify both a site ID and a
    ///             location, the location of the site is used for visualization in the Network Manager console.</p>
    public func createDevice(input: CreateDeviceInput, completion: @escaping (SdkResult<CreateDeviceOutput, CreateDeviceOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/devices"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createDevice")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateDeviceInput, CreateDeviceOutput, CreateDeviceOutputError>(id: "createDevice")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateDeviceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateDeviceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateDeviceInput, CreateDeviceOutput, CreateDeviceOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateDeviceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a new, empty global network.</p>
    public func createGlobalNetwork(input: CreateGlobalNetworkInput, completion: @escaping (SdkResult<CreateGlobalNetworkOutput, CreateGlobalNetworkOutputError>) -> Void)
    {
        let urlPath = "/global-networks"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createGlobalNetwork")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateGlobalNetworkInput, CreateGlobalNetworkOutput, CreateGlobalNetworkOutputError>(id: "createGlobalNetwork")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateGlobalNetworkInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateGlobalNetworkInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateGlobalNetworkInput, CreateGlobalNetworkOutput, CreateGlobalNetworkOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateGlobalNetworkInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a new link for a specified site.</p>
    public func createLink(input: CreateLinkInput, completion: @escaping (SdkResult<CreateLinkOutput, CreateLinkOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/links"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createLink")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateLinkInput, CreateLinkOutput, CreateLinkOutputError>(id: "createLink")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateLinkInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateLinkInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateLinkInput, CreateLinkOutput, CreateLinkOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateLinkInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Creates a new site in a global network.</p>
    public func createSite(input: CreateSiteInput, completion: @escaping (SdkResult<CreateSiteOutput, CreateSiteOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/sites"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createSite")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateSiteInput, CreateSiteOutput, CreateSiteOutputError>(id: "createSite")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateSiteInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateSiteInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateSiteInput, CreateSiteOutput, CreateSiteOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: CreateSiteInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes the specified connection in your global network.</p>
    public func deleteConnection(input: DeleteConnectionInput, completion: @escaping (SdkResult<DeleteConnectionOutput, DeleteConnectionOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        guard let connectionId = input.connectionId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component connectionId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/connections/\(connectionId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteConnection")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteConnectionInput, DeleteConnectionOutput, DeleteConnectionOutputError>(id: "deleteConnection")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteConnectionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteConnectionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteConnectionInput, DeleteConnectionOutput, DeleteConnectionOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes an existing device. You must first disassociate the device from any links and
    ///             customer gateways.</p>
    public func deleteDevice(input: DeleteDeviceInput, completion: @escaping (SdkResult<DeleteDeviceOutput, DeleteDeviceOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        guard let deviceId = input.deviceId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component deviceId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/devices/\(deviceId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteDevice")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteDeviceInput, DeleteDeviceOutput, DeleteDeviceOutputError>(id: "deleteDevice")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteDeviceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteDeviceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteDeviceInput, DeleteDeviceOutput, DeleteDeviceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes an existing global network. You must first delete all global network objects
    ///             (devices, links, and sites) and deregister all transit gateways.</p>
    public func deleteGlobalNetwork(input: DeleteGlobalNetworkInput, completion: @escaping (SdkResult<DeleteGlobalNetworkOutput, DeleteGlobalNetworkOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteGlobalNetwork")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteGlobalNetworkInput, DeleteGlobalNetworkOutput, DeleteGlobalNetworkOutputError>(id: "deleteGlobalNetwork")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteGlobalNetworkInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteGlobalNetworkInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteGlobalNetworkInput, DeleteGlobalNetworkOutput, DeleteGlobalNetworkOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes an existing link. You must first disassociate the link from any devices and
    ///             customer gateways.</p>
    public func deleteLink(input: DeleteLinkInput, completion: @escaping (SdkResult<DeleteLinkOutput, DeleteLinkOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        guard let linkId = input.linkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component linkId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/links/\(linkId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteLink")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteLinkInput, DeleteLinkOutput, DeleteLinkOutputError>(id: "deleteLink")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteLinkInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteLinkInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteLinkInput, DeleteLinkOutput, DeleteLinkOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deletes an existing site. The site cannot be associated with any device or link.</p>
    public func deleteSite(input: DeleteSiteInput, completion: @escaping (SdkResult<DeleteSiteOutput, DeleteSiteOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        guard let siteId = input.siteId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component siteId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/sites/\(siteId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteSite")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteSiteInput, DeleteSiteOutput, DeleteSiteOutputError>(id: "deleteSite")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteSiteInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteSiteInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteSiteInput, DeleteSiteOutput, DeleteSiteOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Deregisters a transit gateway from your global network. This action does not delete
    ///             your transit gateway, or modify any of its attachments. This action removes any customer gateway associations.</p>
    public func deregisterTransitGateway(input: DeregisterTransitGatewayInput, completion: @escaping (SdkResult<DeregisterTransitGatewayOutput, DeregisterTransitGatewayOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        guard let transitGatewayArn = input.transitGatewayArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component transitGatewayArn unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/transit-gateway-registrations/\(transitGatewayArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deregisterTransitGateway")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeregisterTransitGatewayInput, DeregisterTransitGatewayOutput, DeregisterTransitGatewayOutputError>(id: "deregisterTransitGateway")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeregisterTransitGatewayInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeregisterTransitGatewayInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeregisterTransitGatewayInput, DeregisterTransitGatewayOutput, DeregisterTransitGatewayOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Describes one or more global networks. By default, all global networks are
    ///             described. To describe the objects in your global network, you must use the appropriate
    ///                 <code>Get*</code> action. For example, to list the transit gateways in your global
    ///             network, use <a>GetTransitGatewayRegistrations</a>.</p>
    public func describeGlobalNetworks(input: DescribeGlobalNetworksInput, completion: @escaping (SdkResult<DescribeGlobalNetworksOutput, DescribeGlobalNetworksOutputError>) -> Void)
    {
        let urlPath = "/global-networks"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeGlobalNetworks")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeGlobalNetworksInput, DescribeGlobalNetworksOutput, DescribeGlobalNetworksOutputError>(id: "describeGlobalNetworks")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeGlobalNetworksInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeGlobalNetworksInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeGlobalNetworksInput, DescribeGlobalNetworksOutput, DescribeGlobalNetworksOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Disassociates a customer gateway from a device and a link.</p>
    public func disassociateCustomerGateway(input: DisassociateCustomerGatewayInput, completion: @escaping (SdkResult<DisassociateCustomerGatewayOutput, DisassociateCustomerGatewayOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        guard let customerGatewayArn = input.customerGatewayArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component customerGatewayArn unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/customer-gateway-associations/\(customerGatewayArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disassociateCustomerGateway")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisassociateCustomerGatewayInput, DisassociateCustomerGatewayOutput, DisassociateCustomerGatewayOutputError>(id: "disassociateCustomerGateway")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisassociateCustomerGatewayInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisassociateCustomerGatewayInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisassociateCustomerGatewayInput, DisassociateCustomerGatewayOutput, DisassociateCustomerGatewayOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Disassociates an existing device from a link. You must first disassociate any customer
    ///             gateways that are associated with the link.</p>
    public func disassociateLink(input: DisassociateLinkInput, completion: @escaping (SdkResult<DisassociateLinkOutput, DisassociateLinkOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/link-associations"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disassociateLink")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisassociateLinkInput, DisassociateLinkOutput, DisassociateLinkOutputError>(id: "disassociateLink")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisassociateLinkInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisassociateLinkInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisassociateLinkInput, DisassociateLinkOutput, DisassociateLinkOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Disassociates a transit gateway Connect peer from a device and link.</p>
    public func disassociateTransitGatewayConnectPeer(input: DisassociateTransitGatewayConnectPeerInput, completion: @escaping (SdkResult<DisassociateTransitGatewayConnectPeerOutput, DisassociateTransitGatewayConnectPeerOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        guard let transitGatewayConnectPeerArn = input.transitGatewayConnectPeerArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component transitGatewayConnectPeerArn unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/transit-gateway-connect-peer-associations/\(transitGatewayConnectPeerArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disassociateTransitGatewayConnectPeer")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisassociateTransitGatewayConnectPeerInput, DisassociateTransitGatewayConnectPeerOutput, DisassociateTransitGatewayConnectPeerOutputError>(id: "disassociateTransitGatewayConnectPeer")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisassociateTransitGatewayConnectPeerInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisassociateTransitGatewayConnectPeerInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisassociateTransitGatewayConnectPeerInput, DisassociateTransitGatewayConnectPeerOutput, DisassociateTransitGatewayConnectPeerOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets information about one or more of your connections in a global network.</p>
    public func getConnections(input: GetConnectionsInput, completion: @escaping (SdkResult<GetConnectionsOutput, GetConnectionsOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/connections"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getConnections")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetConnectionsInput, GetConnectionsOutput, GetConnectionsOutputError>(id: "getConnections")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetConnectionsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetConnectionsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetConnectionsInput, GetConnectionsOutput, GetConnectionsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets the association information for customer gateways that are associated with
    ///             devices and links in your global network.</p>
    public func getCustomerGatewayAssociations(input: GetCustomerGatewayAssociationsInput, completion: @escaping (SdkResult<GetCustomerGatewayAssociationsOutput, GetCustomerGatewayAssociationsOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/customer-gateway-associations"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getCustomerGatewayAssociations")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetCustomerGatewayAssociationsInput, GetCustomerGatewayAssociationsOutput, GetCustomerGatewayAssociationsOutputError>(id: "getCustomerGatewayAssociations")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetCustomerGatewayAssociationsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetCustomerGatewayAssociationsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetCustomerGatewayAssociationsInput, GetCustomerGatewayAssociationsOutput, GetCustomerGatewayAssociationsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets information about one or more of your devices in a global network.</p>
    public func getDevices(input: GetDevicesInput, completion: @escaping (SdkResult<GetDevicesOutput, GetDevicesOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/devices"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getDevices")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetDevicesInput, GetDevicesOutput, GetDevicesOutputError>(id: "getDevices")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetDevicesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetDevicesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetDevicesInput, GetDevicesOutput, GetDevicesOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets the link associations for a device or a link. Either the device ID or the link ID
    ///             must be specified.</p>
    public func getLinkAssociations(input: GetLinkAssociationsInput, completion: @escaping (SdkResult<GetLinkAssociationsOutput, GetLinkAssociationsOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/link-associations"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getLinkAssociations")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetLinkAssociationsInput, GetLinkAssociationsOutput, GetLinkAssociationsOutputError>(id: "getLinkAssociations")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetLinkAssociationsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetLinkAssociationsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetLinkAssociationsInput, GetLinkAssociationsOutput, GetLinkAssociationsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets information about one or more links in a specified global network.</p>
    ///         <p>If you specify the site ID, you cannot specify the type or provider in the same request. You can specify the type and provider in the same request.</p>
    public func getLinks(input: GetLinksInput, completion: @escaping (SdkResult<GetLinksOutput, GetLinksOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/links"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getLinks")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetLinksInput, GetLinksOutput, GetLinksOutputError>(id: "getLinks")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetLinksInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetLinksInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetLinksInput, GetLinksOutput, GetLinksOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets information about one or more of your sites in a global network.</p>
    public func getSites(input: GetSitesInput, completion: @escaping (SdkResult<GetSitesOutput, GetSitesOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/sites"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getSites")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetSitesInput, GetSitesOutput, GetSitesOutputError>(id: "getSites")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetSitesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetSitesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetSitesInput, GetSitesOutput, GetSitesOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets information about one or more of your transit gateway Connect peer associations in a global network.</p>
    public func getTransitGatewayConnectPeerAssociations(input: GetTransitGatewayConnectPeerAssociationsInput, completion: @escaping (SdkResult<GetTransitGatewayConnectPeerAssociationsOutput, GetTransitGatewayConnectPeerAssociationsOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/transit-gateway-connect-peer-associations"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getTransitGatewayConnectPeerAssociations")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetTransitGatewayConnectPeerAssociationsInput, GetTransitGatewayConnectPeerAssociationsOutput, GetTransitGatewayConnectPeerAssociationsOutputError>(id: "getTransitGatewayConnectPeerAssociations")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetTransitGatewayConnectPeerAssociationsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetTransitGatewayConnectPeerAssociationsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetTransitGatewayConnectPeerAssociationsInput, GetTransitGatewayConnectPeerAssociationsOutput, GetTransitGatewayConnectPeerAssociationsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Gets information about the transit gateway registrations in a specified
    ///             global network.</p>
    public func getTransitGatewayRegistrations(input: GetTransitGatewayRegistrationsInput, completion: @escaping (SdkResult<GetTransitGatewayRegistrationsOutput, GetTransitGatewayRegistrationsOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/transit-gateway-registrations"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getTransitGatewayRegistrations")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetTransitGatewayRegistrationsInput, GetTransitGatewayRegistrationsOutput, GetTransitGatewayRegistrationsOutputError>(id: "getTransitGatewayRegistrations")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetTransitGatewayRegistrationsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetTransitGatewayRegistrationsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetTransitGatewayRegistrationsInput, GetTransitGatewayRegistrationsOutput, GetTransitGatewayRegistrationsOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Lists the tags for a specified resource.</p>
    public func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutput, ListTagsForResourceOutputError>) -> Void)
    {
        guard let resourceArn = input.resourceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component resourceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/tags/\(resourceArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .get)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listTagsForResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListTagsForResourceInput, ListTagsForResourceOutput, ListTagsForResourceOutputError>(id: "listTagsForResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListTagsForResourceInput, ListTagsForResourceOutput, ListTagsForResourceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Registers a transit gateway in your global network. The transit gateway can be in any
    ///             AWS Region, but it must be owned by the same AWS account that owns the global network.
    ///             You cannot register a transit gateway in more than one global network.</p>
    public func registerTransitGateway(input: RegisterTransitGatewayInput, completion: @escaping (SdkResult<RegisterTransitGatewayOutput, RegisterTransitGatewayOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/transit-gateway-registrations"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "registerTransitGateway")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RegisterTransitGatewayInput, RegisterTransitGatewayOutput, RegisterTransitGatewayOutputError>(id: "registerTransitGateway")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RegisterTransitGatewayInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RegisterTransitGatewayInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RegisterTransitGatewayInput, RegisterTransitGatewayOutput, RegisterTransitGatewayOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: RegisterTransitGatewayInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Tags a specified resource.</p>
    public func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutput, TagResourceOutputError>) -> Void)
    {
        guard let resourceArn = input.resourceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component resourceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/tags/\(resourceArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "tagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<TagResourceInput, TagResourceOutput, TagResourceOutputError>(id: "tagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<TagResourceInput, TagResourceOutput, TagResourceOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Removes tags from a specified resource.</p>
    public func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutput, UntagResourceOutputError>) -> Void)
    {
        guard let resourceArn = input.resourceArn else {
            completion(.failure(.client(ClientError.serializationFailed("uri component resourceArn unexpectedly nil"))))
            return
        }
        let urlPath = "/tags/\(resourceArn)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .delete)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "untagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UntagResourceInput, UntagResourceOutput, UntagResourceOutputError>(id: "untagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UntagResourceInput, UntagResourceOutput, UntagResourceOutputError>(contentType: "application/json"))
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the information for an existing connection. To remove information for any of the parameters,
    ///             specify an empty string.</p>
    public func updateConnection(input: UpdateConnectionInput, completion: @escaping (SdkResult<UpdateConnectionOutput, UpdateConnectionOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        guard let connectionId = input.connectionId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component connectionId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/connections/\(connectionId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .patch)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateConnection")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateConnectionInput, UpdateConnectionOutput, UpdateConnectionOutputError>(id: "updateConnection")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateConnectionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateConnectionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateConnectionInput, UpdateConnectionOutput, UpdateConnectionOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateConnectionInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the details for an existing device. To remove information for any of the
    ///             parameters, specify an empty string.</p>
    public func updateDevice(input: UpdateDeviceInput, completion: @escaping (SdkResult<UpdateDeviceOutput, UpdateDeviceOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        guard let deviceId = input.deviceId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component deviceId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/devices/\(deviceId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .patch)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateDevice")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateDeviceInput, UpdateDeviceOutput, UpdateDeviceOutputError>(id: "updateDevice")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateDeviceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateDeviceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateDeviceInput, UpdateDeviceOutput, UpdateDeviceOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateDeviceInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates an existing global network. To remove information for any of the parameters,
    ///             specify an empty string.</p>
    public func updateGlobalNetwork(input: UpdateGlobalNetworkInput, completion: @escaping (SdkResult<UpdateGlobalNetworkOutput, UpdateGlobalNetworkOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .patch)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateGlobalNetwork")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateGlobalNetworkInput, UpdateGlobalNetworkOutput, UpdateGlobalNetworkOutputError>(id: "updateGlobalNetwork")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateGlobalNetworkInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateGlobalNetworkInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateGlobalNetworkInput, UpdateGlobalNetworkOutput, UpdateGlobalNetworkOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateGlobalNetworkInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the details for an existing link. To remove information for any of the
    ///             parameters, specify an empty string.</p>
    public func updateLink(input: UpdateLinkInput, completion: @escaping (SdkResult<UpdateLinkOutput, UpdateLinkOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        guard let linkId = input.linkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component linkId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/links/\(linkId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .patch)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateLink")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateLinkInput, UpdateLinkOutput, UpdateLinkOutputError>(id: "updateLink")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateLinkInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateLinkInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateLinkInput, UpdateLinkOutput, UpdateLinkOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateLinkInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Updates the information for an existing site. To remove information for any of the
    ///             parameters, specify an empty string.</p>
    public func updateSite(input: UpdateSiteInput, completion: @escaping (SdkResult<UpdateSiteOutput, UpdateSiteOutputError>) -> Void)
    {
        guard let globalNetworkId = input.globalNetworkId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component globalNetworkId unexpectedly nil"))))
            return
        }
        guard let siteId = input.siteId else {
            completion(.failure(.client(ClientError.serializationFailed("uri component siteId unexpectedly nil"))))
            return
        }
        let urlPath = "/global-networks/\(globalNetworkId)/sites/\(siteId)"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .patch)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateSite")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "networkmanager.\(config.region).amazonaws.com")
                      .withSigningName(value: "networkmanager")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateSiteInput, UpdateSiteOutput, UpdateSiteOutputError>(id: "updateSite")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateSiteInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateSiteInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateSiteInput, UpdateSiteOutput, UpdateSiteOutputError>(contentType: "application/json"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateSiteInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
