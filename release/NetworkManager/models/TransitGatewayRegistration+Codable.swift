// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TransitGatewayRegistration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case globalNetworkId = "GlobalNetworkId"
        case state = "State"
        case transitGatewayArn = "TransitGatewayArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalNetworkId = globalNetworkId {
            try encodeContainer.encode(globalNetworkId, forKey: .globalNetworkId)
        }
        if let state = state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let transitGatewayArn = transitGatewayArn {
            try encodeContainer.encode(transitGatewayArn, forKey: .transitGatewayArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalNetworkIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .globalNetworkId)
        globalNetworkId = globalNetworkIdDecoded
        let transitGatewayArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .transitGatewayArn)
        transitGatewayArn = transitGatewayArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(TransitGatewayRegistrationStateReason.self, forKey: .state)
        state = stateDecoded
    }
}
