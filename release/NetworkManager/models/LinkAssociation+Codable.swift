// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LinkAssociation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deviceId = "DeviceId"
        case globalNetworkId = "GlobalNetworkId"
        case linkAssociationState = "LinkAssociationState"
        case linkId = "LinkId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deviceId = deviceId {
            try encodeContainer.encode(deviceId, forKey: .deviceId)
        }
        if let globalNetworkId = globalNetworkId {
            try encodeContainer.encode(globalNetworkId, forKey: .globalNetworkId)
        }
        if let linkAssociationState = linkAssociationState {
            try encodeContainer.encode(linkAssociationState.rawValue, forKey: .linkAssociationState)
        }
        if let linkId = linkId {
            try encodeContainer.encode(linkId, forKey: .linkId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalNetworkIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .globalNetworkId)
        globalNetworkId = globalNetworkIdDecoded
        let deviceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deviceId)
        deviceId = deviceIdDecoded
        let linkIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .linkId)
        linkId = linkIdDecoded
        let linkAssociationStateDecoded = try containerValues.decodeIfPresent(LinkAssociationState.self, forKey: .linkAssociationState)
        linkAssociationState = linkAssociationStateDecoded
    }
}
