// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Connection: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case connectedDeviceId = "ConnectedDeviceId"
        case connectedLinkId = "ConnectedLinkId"
        case connectionArn = "ConnectionArn"
        case connectionId = "ConnectionId"
        case createdAt = "CreatedAt"
        case description = "Description"
        case deviceId = "DeviceId"
        case globalNetworkId = "GlobalNetworkId"
        case linkId = "LinkId"
        case state = "State"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectedDeviceId = connectedDeviceId {
            try encodeContainer.encode(connectedDeviceId, forKey: .connectedDeviceId)
        }
        if let connectedLinkId = connectedLinkId {
            try encodeContainer.encode(connectedLinkId, forKey: .connectedLinkId)
        }
        if let connectionArn = connectionArn {
            try encodeContainer.encode(connectionArn, forKey: .connectionArn)
        }
        if let connectionId = connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let deviceId = deviceId {
            try encodeContainer.encode(deviceId, forKey: .deviceId)
        }
        if let globalNetworkId = globalNetworkId {
            try encodeContainer.encode(globalNetworkId, forKey: .globalNetworkId)
        }
        if let linkId = linkId {
            try encodeContainer.encode(linkId, forKey: .linkId)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let connectionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .connectionArn)
        connectionArn = connectionArnDecoded
        let globalNetworkIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .globalNetworkId)
        globalNetworkId = globalNetworkIdDecoded
        let deviceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deviceId)
        deviceId = deviceIdDecoded
        let connectedDeviceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .connectedDeviceId)
        connectedDeviceId = connectedDeviceIdDecoded
        let linkIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .linkId)
        linkId = linkIdDecoded
        let connectedLinkIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .connectedLinkId)
        connectedLinkId = connectedLinkIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ConnectionState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
