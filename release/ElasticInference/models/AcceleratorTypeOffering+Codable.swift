// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AcceleratorTypeOffering: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case acceleratorType
        case location
        case locationType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceleratorType = acceleratorType {
            try encodeContainer.encode(acceleratorType, forKey: .acceleratorType)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let locationType = locationType {
            try encodeContainer.encode(locationType.rawValue, forKey: .locationType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let acceleratorTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .acceleratorType)
        acceleratorType = acceleratorTypeDecoded
        let locationTypeDecoded = try containerValues.decodeIfPresent(LocationType.self, forKey: .locationType)
        locationType = locationTypeDecoded
        let locationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .location)
        location = locationDecoded
    }
}
