// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <fullname>AWS CodeCommit</fullname>
///         <p>This is the <i>AWS CodeCommit API Reference</i>. This reference provides descriptions of the operations and data types for
///             AWS CodeCommit API along with usage examples.</p>
///         <p>You can use the AWS CodeCommit API to work with the following objects:</p>
///
///             <p>Repositories, by calling the following:</p>
///           <ul>
///             <li>
///                   <p>
///                   <a>BatchGetRepositories</a>, which returns information about one or more repositories associated with your AWS account.</p>
///             </li>
///             <li>
///                   <p>
///                   <a>CreateRepository</a>, which creates an AWS CodeCommit repository.</p>
///             </li>
///             <li>
///                   <p>
///                   <a>DeleteRepository</a>, which deletes an AWS CodeCommit repository.</p>
///             </li>
///             <li>
///                   <p>
///                   <a>GetRepository</a>, which returns information about a specified repository.</p>
///             </li>
///             <li>
///                   <p>
///                   <a>ListRepositories</a>, which lists all AWS CodeCommit repositories associated with your AWS account.</p>
///             </li>
///             <li>
///                   <p>
///                   <a>UpdateRepositoryDescription</a>, which sets or updates the description of the repository.</p>
///               </li>
///             <li>
///                   <p>
///                   <a>UpdateRepositoryName</a>, which changes the name of the
///                     repository. If you change the name of a repository, no other users of that
///                     repository can access it until you send them the new HTTPS or SSH URL to
///                     use.</p>
///             </li>
///          </ul>
///
///             <p>Branches, by calling the following:</p>
///             <ul>
///             <li>
///                     <p>
///                   <a>CreateBranch</a>, which creates a branch in a specified
///                     repository.</p>
///             </li>
///             <li>
///                     <p>
///                   <a>DeleteBranch</a>, which deletes the specified branch in a repository unless it is the default branch.</p>
///                 </li>
///             <li>
///                     <p>
///                   <a>GetBranch</a>, which returns information about a specified branch.</p>
///             </li>
///             <li>
///                     <p>
///                   <a>ListBranches</a>, which lists all branches for a specified repository.</p>
///             </li>
///             <li>
///                     <p>
///                   <a>UpdateDefaultBranch</a>, which changes the default branch for a repository.</p>
///             </li>
///          </ul>
///
///         <p>Files, by calling the following:</p>
///         <ul>
///             <li>
///                <p>
///                   <a>DeleteFile</a>, which deletes the content of a specified file from a specified branch.</p>
///             </li>
///             <li>
///                 <p>
///                   <a>GetBlob</a>, which returns the base-64 encoded content of an
///                     individual Git blob object in a repository.</p>
///             </li>
///             <li>
///                <p>
///                   <a>GetFile</a>, which returns the base-64 encoded content of a specified file.</p>
///             </li>
///             <li>
///                <p>
///                   <a>GetFolder</a>, which returns the contents of a specified folder or directory.</p>
///             </li>
///             <li>
///                <p>
///                   <a>PutFile</a>, which adds or modifies a single file in a specified repository and branch.</p>
///             </li>
///          </ul>
///
///
///             <p>Commits, by calling the following:</p>
///               <ul>
///             <li>
///                       <p>
///                   <a>BatchGetCommits</a>, which returns information about one or more commits in a repository.</p>
///                   </li>
///             <li>
///                <p>
///                   <a>CreateCommit</a>, which creates a commit for changes to a repository.</p>
///             </li>
///             <li>
///                       <p>
///                   <a>GetCommit</a>, which returns information about  a commit, including commit
///                           messages and author and committer information.</p>
///                   </li>
///             <li>
///                       <p>
///                   <a>GetDifferences</a>, which returns information about the
///                     differences in a valid commit specifier (such as a branch, tag, HEAD, commit ID,
///                     or other fully qualified reference).</p>
///                   </li>
///          </ul>
///
///
///         <p>Merges, by calling the following:</p>
///         <ul>
///             <li>
///                 <p>
///                   <a>BatchDescribeMergeConflicts</a>, which returns information about conflicts in a merge between commits in a repository.</p>
///             </li>
///             <li>
///                 <p>
///                   <a>CreateUnreferencedMergeCommit</a>, which creates an unreferenced commit between two branches or commits for the
///                     purpose of comparing them and identifying any potential conflicts.</p>
///             </li>
///             <li>
///                 <p>
///                   <a>DescribeMergeConflicts</a>, which returns information about merge conflicts between the base, source, and destination versions
///                     of a file in a potential merge.</p>
///             </li>
///             <li>
///                 <p>
///                   <a>GetMergeCommit</a>, which returns information about the merge between a source and destination commit. </p>
///
///             </li>
///             <li>
///                 <p>
///                   <a>GetMergeConflicts</a>, which returns information about merge conflicts
///                     between the source and destination branch in a pull request.</p>
///             </li>
///             <li>
///
///                 <p>
///                   <a>GetMergeOptions</a>, which returns information about the available merge options between two branches or commit specifiers.</p>
///             </li>
///             <li>
///                 <p>
///                   <a>MergeBranchesByFastForward</a>, which merges two branches using the fast-forward merge option.</p>
///             </li>
///             <li>
///                 <p>
///                   <a>MergeBranchesBySquash</a>, which merges two branches using the squash merge option.</p>
///             </li>
///             <li>
///                 <p>
///                   <a>MergeBranchesByThreeWay</a>, which merges two branches using the three-way merge option.</p>
///             </li>
///          </ul>
///
///
///         <p>Pull requests, by calling the following:</p>
///         <ul>
///             <li>
///                 <p>
///                   <a>CreatePullRequest</a>, which creates a pull request in a specified repository.</p>
///             </li>
///             <li>
///                <p>
///                   <a>CreatePullRequestApprovalRule</a>, which creates an approval rule for a specified pull request.</p>
///             </li>
///             <li>
///                <p>
///                   <a>DeletePullRequestApprovalRule</a>, which deletes an approval rule for a specified pull request.</p>
///             </li>
///             <li>
///                 <p>
///                   <a>DescribePullRequestEvents</a>, which returns information about one or more pull request events.</p>
///             </li>
///             <li>
///                <p>
///                   <a>EvaluatePullRequestApprovalRules</a>, which evaluates whether a pull request has met all the conditions specified in its associated approval rules.</p>
///             </li>
///             <li>
///                 <p>
///                   <a>GetCommentsForPullRequest</a>, which returns information about comments on a specified pull request.</p>
///             </li>
///             <li>
///
///                 <p>
///                   <a>GetPullRequest</a>, which returns information about a specified pull request.</p>
///             </li>
///             <li>
///                <p>
///                   <a>GetPullRequestApprovalStates</a>, which returns information about the approval states for a specified pull request.</p>
///             </li>
///             <li>
///                <p>
///                   <a>GetPullRequestOverrideState</a>, which returns information about whether approval rules have been set aside (overriden) for a
///             pull request, and if so, the Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.</p>
///             </li>
///             <li>
///                 <p>
///                   <a>ListPullRequests</a>, which lists all pull requests for a repository.</p>
///             </li>
///             <li>
///                 <p>
///                   <a>MergePullRequestByFastForward</a>, which merges the source destination branch of a pull request into the specified destination
///                     branch for that pull request using the fast-forward merge option.</p>
///             </li>
///             <li>
///                 <p>
///                   <a>MergePullRequestBySquash</a>, which merges the source destination branch of a pull request into the specified destination
///                 branch for that pull request using the squash merge option.</p>
///             </li>
///             <li>
///                 <p>
///                   <a>MergePullRequestByThreeWay</a>. which merges the source destination branch of a pull request into the specified destination
///                 branch for that pull request using the three-way merge option.</p>
///             </li>
///             <li>
///                <p>
///                   <a>OverridePullRequestApprovalRules</a>, which sets aside all approval rule requirements for a pull request.</p>
///             </li>
///             <li>
///                 <p>
///                   <a>PostCommentForPullRequest</a>, which posts a comment to a pull request at the specified line, file, or request.</p>
///             </li>
///             <li>
///                <p>
///                   <a>UpdatePullRequestApprovalRuleContent</a>, which updates the structure of an approval rule for a pull request.</p>
///             </li>
///             <li>
///                <p>
///                   <a>UpdatePullRequestApprovalState</a>, which updates the state of an approval on a pull request.</p>
///             </li>
///             <li>
///                 <p>
///                   <a>UpdatePullRequestDescription</a>, which updates the description of a pull request.</p>
///             </li>
///             <li>
///                 <p>
///                   <a>UpdatePullRequestStatus</a>, which updates the status of a pull request.</p>
///             </li>
///             <li>
///                 <p>
///                   <a>UpdatePullRequestTitle</a>, which updates the title of a pull request.</p>
///             </li>
///          </ul>
///
///         <p>Approval rule templates, by calling the following:</p>
///         <ul>
///             <li>
///                <p>
///                   <a>AssociateApprovalRuleTemplateWithRepository</a>, which associates a template
///                     with a specified repository. After the template is associated with a repository,
///                     AWS CodeCommit creates approval rules that match the template conditions on
///                     every pull request created in the specified repository.</p>
///             </li>
///             <li>
///                <p>
///                   <a>BatchAssociateApprovalRuleTemplateWithRepositories</a>, which associates a
///                     template with one or more specified repositories. After the template is
///                     associated with a repository, AWS CodeCommit creates approval rules that match
///                     the template conditions on every pull request created in the specified
///                     repositories.</p>
///             </li>
///             <li>
///                <p>
///                   <a>BatchDisassociateApprovalRuleTemplateFromRepositories</a>, which removes the
///                     association between a template and specified repositories so that approval rules
///                     based on the template are not automatically created when pull requests are
///                     created in those repositories.</p>
///             </li>
///             <li>
///                <p>
///                   <a>CreateApprovalRuleTemplate</a>, which creates a template for approval rules that can then be associated with one or more repositories
///              in your AWS account.</p>
///             </li>
///             <li>
///                <p>
///                   <a>DeleteApprovalRuleTemplate</a>, which deletes the specified template. It does not remove approval rules on pull requests already created with the template.</p>
///             </li>
///             <li>
///                <p>
///                   <a>DisassociateApprovalRuleTemplateFromRepository</a>, which removes the
///                     association between a template and a repository so that approval rules based on
///                     the template are not automatically created when pull requests are created in the
///                     specified repository.</p>
///             </li>
///             <li>
///                <p>
///                   <a>GetApprovalRuleTemplate</a>, which returns information about an approval rule template.</p>
///             </li>
///             <li>
///                <p>
///                   <a>ListApprovalRuleTemplates</a>, which lists all approval rule templates in the AWS Region in your AWS account.</p>
///             </li>
///             <li>
///                <p>
///                   <a>ListAssociatedApprovalRuleTemplatesForRepository</a>, which lists all approval rule templates that are associated with a specified repository.</p>
///             </li>
///             <li>
///                <p>
///                   <a>ListRepositoriesForApprovalRuleTemplate</a>, which lists all repositories associated with the specified approval rule template.</p>
///             </li>
///             <li>
///                <p>
///                   <a>UpdateApprovalRuleTemplateDescription</a>, which updates the description of an
///                     approval rule template.</p>
///             </li>
///             <li>
///                <p>
///                   <a>UpdateApprovalRuleTemplateName</a>, which updates the name of an approval rule template.</p>
///             </li>
///             <li>
///                <p>
///                   <a>UpdateApprovalRuleTemplateContent</a>, which updates the content of an approval rule template.</p>
///             </li>
///          </ul>
///
///         <p>Comments in a repository, by calling the following:</p>
///         <ul>
///             <li>
///                 <p>
///                   <a>DeleteCommentContent</a>, which deletes the content of a comment on a commit in a repository.</p>
///             </li>
///             <li>
///                 <p>
///                   <a>GetComment</a>, which returns information about a comment on a commit.</p>
///             </li>
///             <li>
///                 <p>
///                   <a>GetCommentReactions</a>, which returns information about emoji reactions to comments.</p>
///             </li>
///             <li>
///                 <p>
///                   <a>GetCommentsForComparedCommit</a>, which returns information about comments on the comparison between two commit specifiers
///                     in a repository.</p>
///             </li>
///             <li>
///                 <p>
///                   <a>PostCommentForComparedCommit</a>, which creates a comment on the comparison between two commit specifiers in a repository.</p>
///             </li>
///             <li>
///                 <p>
///                   <a>PostCommentReply</a>, which creates a reply to a comment.</p>
///             </li>
///             <li>
///                <p>
///                   <a>PutCommentReaction</a>, which creates or updates an emoji reaction to a comment.</p>
///             </li>
///             <li>
///                 <p>
///                   <a>UpdateComment</a>, which updates the content of a comment on a commit in a repository.</p>
///             </li>
///          </ul>
///
///         <p>Tags used to tag resources in AWS CodeCommit (not Git tags), by calling the following:</p>
///         <ul>
///             <li>
///                <p>
///                   <a>ListTagsForResource</a>, which gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS CodeCommit.</p>
///             </li>
///             <li>
///                <p>
///                   <a>TagResource</a>, which adds or updates tags for a resource in AWS CodeCommit.</p>
///             </li>
///             <li>
///                <p>
///                   <a>UntagResource</a>, which removes tags for a resource in AWS CodeCommit.</p>
///             </li>
///          </ul>
///
///             <p>Triggers, by calling the following:</p>
///                 <ul>
///             <li>
///                         <p>
///                   <a>GetRepositoryTriggers</a>, which returns information about triggers configured
///                             for a repository.</p>
///             </li>
///             <li>
///                         <p>
///                   <a>PutRepositoryTriggers</a>, which replaces all triggers for a repository and can
///                             be used to create or delete triggers.</p>
///             </li>
///             <li>
///                         <p>
///                   <a>TestRepositoryTriggers</a>, which tests the functionality of a repository trigger
///                             by sending data to the trigger target.</p>
///             </li>
///          </ul>
///
///
///
///
///         <p>For information about how to use AWS CodeCommit, see the <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">AWS CodeCommit User Guide</a>.</p>
public protocol CodeCommitClientProtocol {
    /// <p>Creates an association between an approval rule template and a specified repository.
    ///             Then, the next time a pull request is created in the repository where the destination
    ///             reference (if specified) matches the destination reference (branch) for the pull
    ///             request, an approval rule that matches the template conditions is automatically created
    ///             for that pull request. If no destination references are specified in the template, an
    ///             approval rule that matches the template contents is created for all pull requests in
    ///             that repository.</p>
    func associateApprovalRuleTemplateWithRepository(input: AssociateApprovalRuleTemplateWithRepositoryInput, completion: @escaping (SdkResult<AssociateApprovalRuleTemplateWithRepositoryOutputResponse, AssociateApprovalRuleTemplateWithRepositoryOutputError>) -> Void)
    /// <p>Creates an association between an approval rule template and one or more specified repositories. </p>
    func batchAssociateApprovalRuleTemplateWithRepositories(input: BatchAssociateApprovalRuleTemplateWithRepositoriesInput, completion: @escaping (SdkResult<BatchAssociateApprovalRuleTemplateWithRepositoriesOutputResponse, BatchAssociateApprovalRuleTemplateWithRepositoriesOutputError>) -> Void)
    /// <p>Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy.</p>
    func batchDescribeMergeConflicts(input: BatchDescribeMergeConflictsInput, completion: @escaping (SdkResult<BatchDescribeMergeConflictsOutputResponse, BatchDescribeMergeConflictsOutputError>) -> Void)
    /// <p>Removes the association between an approval rule template and one or more specified repositories. </p>
    func batchDisassociateApprovalRuleTemplateFromRepositories(input: BatchDisassociateApprovalRuleTemplateFromRepositoriesInput, completion: @escaping (SdkResult<BatchDisassociateApprovalRuleTemplateFromRepositoriesOutputResponse, BatchDisassociateApprovalRuleTemplateFromRepositoriesOutputError>) -> Void)
    /// <p>Returns information about the contents of one or more commits in a repository.</p>
    func batchGetCommits(input: BatchGetCommitsInput, completion: @escaping (SdkResult<BatchGetCommitsOutputResponse, BatchGetCommitsOutputError>) -> Void)
    /// <p>Returns information about one or more repositories.</p>
    ///         <note>
    ///             <p>The description field for a repository accepts all HTML characters and all valid
    ///                 Unicode characters. Applications that do not HTML-encode the description and display
    ///                 it in a webpage can expose users to potentially malicious code. Make sure that you
    ///                 HTML-encode the description field in any application that uses this API to display
    ///                 the repository description on a webpage.</p>
    ///          </note>
    func batchGetRepositories(input: BatchGetRepositoriesInput, completion: @escaping (SdkResult<BatchGetRepositoriesOutputResponse, BatchGetRepositoriesOutputError>) -> Void)
    /// <p>Creates a template for approval rules that can then be associated with one or more
    ///             repositories in your AWS account. When you associate a template with a repository, AWS
    ///             CodeCommit creates an approval rule that matches the conditions of the template for all
    ///             pull requests that meet the conditions of the template. For more information, see
    ///             <a>AssociateApprovalRuleTemplateWithRepository</a>.</p>
    func createApprovalRuleTemplate(input: CreateApprovalRuleTemplateInput, completion: @escaping (SdkResult<CreateApprovalRuleTemplateOutputResponse, CreateApprovalRuleTemplateOutputError>) -> Void)
    /// <p>Creates a branch in a repository and points the branch to a commit.</p>
    ///         <note>
    ///             <p>Calling the create branch operation does not set a repository's default branch. To do this, call the update default branch operation.</p>
    ///          </note>
    func createBranch(input: CreateBranchInput, completion: @escaping (SdkResult<CreateBranchOutputResponse, CreateBranchOutputError>) -> Void)
    /// <p>Creates a commit for a repository on the tip of a specified branch.</p>
    func createCommit(input: CreateCommitInput, completion: @escaping (SdkResult<CreateCommitOutputResponse, CreateCommitOutputError>) -> Void)
    /// <p>Creates a pull request in the specified repository.</p>
    func createPullRequest(input: CreatePullRequestInput, completion: @escaping (SdkResult<CreatePullRequestOutputResponse, CreatePullRequestOutputError>) -> Void)
    /// <p>Creates an approval rule for a pull request.</p>
    func createPullRequestApprovalRule(input: CreatePullRequestApprovalRuleInput, completion: @escaping (SdkResult<CreatePullRequestApprovalRuleOutputResponse, CreatePullRequestApprovalRuleOutputError>) -> Void)
    /// <p>Creates a new, empty repository.</p>
    func createRepository(input: CreateRepositoryInput, completion: @escaping (SdkResult<CreateRepositoryOutputResponse, CreateRepositoryOutputError>) -> Void)
    /// <p>Creates an unreferenced commit that represents the result of merging two branches
    ///             using a specified merge strategy. This can help you determine the outcome of a potential
    ///             merge. This API cannot be used with the fast-forward merge strategy because that
    ///             strategy does not create a merge commit.</p>
    ///         <note>
    ///             <p>This unreferenced merge commit
    ///         can only be accessed using the GetCommit API or through git commands such as git fetch. To retrieve this commit, you must specify its commit ID or otherwise reference it.</p>
    ///          </note>
    func createUnreferencedMergeCommit(input: CreateUnreferencedMergeCommitInput, completion: @escaping (SdkResult<CreateUnreferencedMergeCommitOutputResponse, CreateUnreferencedMergeCommitOutputError>) -> Void)
    /// <p>Deletes a specified approval rule template. Deleting a template does not remove approval rules on pull requests already created with the template.</p>
    func deleteApprovalRuleTemplate(input: DeleteApprovalRuleTemplateInput, completion: @escaping (SdkResult<DeleteApprovalRuleTemplateOutputResponse, DeleteApprovalRuleTemplateOutputError>) -> Void)
    /// <p>Deletes a branch from a repository, unless that branch is the default branch for the repository. </p>
    func deleteBranch(input: DeleteBranchInput, completion: @escaping (SdkResult<DeleteBranchOutputResponse, DeleteBranchOutputError>) -> Void)
    /// <p>Deletes the content of a comment made on a change, file, or commit in a repository.</p>
    func deleteCommentContent(input: DeleteCommentContentInput, completion: @escaping (SdkResult<DeleteCommentContentOutputResponse, DeleteCommentContentOutputError>) -> Void)
    /// <p>Deletes a specified file from a specified branch. A commit is created on the branch
    ///             that contains the revision. The file still exists in the commits earlier to the commit
    ///             that contains the deletion.</p>
    func deleteFile(input: DeleteFileInput, completion: @escaping (SdkResult<DeleteFileOutputResponse, DeleteFileOutputError>) -> Void)
    /// <p>Deletes an approval rule from a specified pull request. Approval rules can be deleted from a pull request only if the pull request is open, and if the
    ///             approval rule was created specifically for a pull request and not generated from an approval rule template associated with the repository where the
    ///             pull request was created. You cannot delete an approval rule from a merged or closed pull request.</p>
    func deletePullRequestApprovalRule(input: DeletePullRequestApprovalRuleInput, completion: @escaping (SdkResult<DeletePullRequestApprovalRuleOutputResponse, DeletePullRequestApprovalRuleOutputError>) -> Void)
    /// <p>Deletes a repository. If a specified repository was already deleted, a null repository
    ///             ID is returned.</p>
    ///         <important>
    ///             <p>Deleting a repository also deletes all associated objects and metadata. After a repository is
    ///                 deleted, all future push calls to the deleted repository fail.</p>
    ///          </important>
    func deleteRepository(input: DeleteRepositoryInput, completion: @escaping (SdkResult<DeleteRepositoryOutputResponse, DeleteRepositoryOutputError>) -> Void)
    /// <p>Returns information about one or more merge conflicts in the attempted merge of two
    ///             commit specifiers using the squash or three-way merge strategy. If the merge option for
    ///             the attempted merge is specified as FAST_FORWARD_MERGE, an exception is thrown.</p>
    func describeMergeConflicts(input: DescribeMergeConflictsInput, completion: @escaping (SdkResult<DescribeMergeConflictsOutputResponse, DescribeMergeConflictsOutputError>) -> Void)
    /// <p>Returns information about one or more pull request events.</p>
    func describePullRequestEvents(input: DescribePullRequestEventsInput, completion: @escaping (SdkResult<DescribePullRequestEventsOutputResponse, DescribePullRequestEventsOutputError>) -> Void)
    /// <p>Removes the association between a template and a repository so that approval rules
    ///             based on the template are not automatically created when pull requests are created in
    ///             the specified repository. This does not delete any approval rules previously created for
    ///             pull requests through the template association.</p>
    func disassociateApprovalRuleTemplateFromRepository(input: DisassociateApprovalRuleTemplateFromRepositoryInput, completion: @escaping (SdkResult<DisassociateApprovalRuleTemplateFromRepositoryOutputResponse, DisassociateApprovalRuleTemplateFromRepositoryOutputError>) -> Void)
    /// <p>Evaluates whether a pull request has met all the conditions specified in its associated approval rules.</p>
    func evaluatePullRequestApprovalRules(input: EvaluatePullRequestApprovalRulesInput, completion: @escaping (SdkResult<EvaluatePullRequestApprovalRulesOutputResponse, EvaluatePullRequestApprovalRulesOutputError>) -> Void)
    /// <p>Returns information about a specified approval rule template.</p>
    func getApprovalRuleTemplate(input: GetApprovalRuleTemplateInput, completion: @escaping (SdkResult<GetApprovalRuleTemplateOutputResponse, GetApprovalRuleTemplateOutputError>) -> Void)
    /// <p>Returns the base-64 encoded content of an individual blob in a repository.</p>
    func getBlob(input: GetBlobInput, completion: @escaping (SdkResult<GetBlobOutputResponse, GetBlobOutputError>) -> Void)
    /// <p>Returns information about a repository branch, including its name and the last commit ID.</p>
    func getBranch(input: GetBranchInput, completion: @escaping (SdkResult<GetBranchOutputResponse, GetBranchOutputError>) -> Void)
    /// <p>Returns the content of a comment made on a change, file, or commit in a repository. </p>
    ///             <note>
    ///             <p>Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of
    ///         reactions from active identities, use GetCommentReactions.</p>
    ///          </note>
    func getComment(input: GetCommentInput, completion: @escaping (SdkResult<GetCommentOutputResponse, GetCommentOutputError>) -> Void)
    /// <p>Returns information about reactions to a specified comment ID. Reactions from users who have been deleted will not be included in the count.</p>
    func getCommentReactions(input: GetCommentReactionsInput, completion: @escaping (SdkResult<GetCommentReactionsOutputResponse, GetCommentReactionsOutputError>) -> Void)
    /// <p>Returns information about comments made on the comparison between two commits.</p>
    ///         <note>
    ///             <p>Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of
    ///             reactions from active identities, use GetCommentReactions.</p>
    ///          </note>
    func getCommentsForComparedCommit(input: GetCommentsForComparedCommitInput, completion: @escaping (SdkResult<GetCommentsForComparedCommitOutputResponse, GetCommentsForComparedCommitOutputError>) -> Void)
    /// <p>Returns comments made on a pull request.</p>
    ///         <note>
    ///             <p>Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of
    ///             reactions from active identities, use GetCommentReactions.</p>
    ///          </note>
    func getCommentsForPullRequest(input: GetCommentsForPullRequestInput, completion: @escaping (SdkResult<GetCommentsForPullRequestOutputResponse, GetCommentsForPullRequestOutputError>) -> Void)
    /// <p>Returns information about a commit, including commit message and committer information.</p>
    func getCommit(input: GetCommitInput, completion: @escaping (SdkResult<GetCommitOutputResponse, GetCommitOutputError>) -> Void)
    /// <p>Returns information about the differences in a valid commit specifier (such as a
    ///             branch, tag, HEAD, commit ID, or other fully qualified reference). Results can be
    ///             limited to a specified path.</p>
    func getDifferences(input: GetDifferencesInput, completion: @escaping (SdkResult<GetDifferencesOutputResponse, GetDifferencesOutputError>) -> Void)
    /// <p>Returns the base-64 encoded contents of a specified file and its metadata.</p>
    func getFile(input: GetFileInput, completion: @escaping (SdkResult<GetFileOutputResponse, GetFileOutputError>) -> Void)
    /// <p>Returns the contents of a specified folder in a repository.</p>
    func getFolder(input: GetFolderInput, completion: @escaping (SdkResult<GetFolderOutputResponse, GetFolderOutputError>) -> Void)
    /// <p>Returns information about a specified merge commit.</p>
    func getMergeCommit(input: GetMergeCommitInput, completion: @escaping (SdkResult<GetMergeCommitOutputResponse, GetMergeCommitOutputError>) -> Void)
    /// <p>Returns information about merge conflicts between the before and after commit IDs for a pull request in a repository.</p>
    func getMergeConflicts(input: GetMergeConflictsInput, completion: @escaping (SdkResult<GetMergeConflictsOutputResponse, GetMergeConflictsOutputError>) -> Void)
    /// <p>Returns information about the merge options available for merging two specified
    ///             branches. For details about why a merge option is not available, use GetMergeConflicts
    ///             or DescribeMergeConflicts.</p>
    func getMergeOptions(input: GetMergeOptionsInput, completion: @escaping (SdkResult<GetMergeOptionsOutputResponse, GetMergeOptionsOutputError>) -> Void)
    /// <p>Gets information about a pull request in a specified repository.</p>
    func getPullRequest(input: GetPullRequestInput, completion: @escaping (SdkResult<GetPullRequestOutputResponse, GetPullRequestOutputError>) -> Void)
    /// <p>Gets information about the approval states for a specified pull request. Approval states only apply to pull requests that have one or more
    ///         approval rules applied to them.</p>
    func getPullRequestApprovalStates(input: GetPullRequestApprovalStatesInput, completion: @escaping (SdkResult<GetPullRequestApprovalStatesOutputResponse, GetPullRequestApprovalStatesOutputError>) -> Void)
    /// <p>Returns information about whether approval rules have been set aside (overridden) for a
    ///             pull request, and if so, the Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.</p>
    func getPullRequestOverrideState(input: GetPullRequestOverrideStateInput, completion: @escaping (SdkResult<GetPullRequestOverrideStateOutputResponse, GetPullRequestOverrideStateOutputError>) -> Void)
    /// <p>Returns information about a repository.</p>
    ///
    ///         <note>
    ///             <p>The description field for a repository accepts all HTML characters and all valid
    ///                 Unicode characters. Applications that do not HTML-encode the description and display
    ///                 it in a webpage can expose users to potentially malicious code. Make sure that you
    ///                 HTML-encode the description field in any application that uses this API to display
    ///                 the repository description on a webpage.</p>
    ///          </note>
    func getRepository(input: GetRepositoryInput, completion: @escaping (SdkResult<GetRepositoryOutputResponse, GetRepositoryOutputError>) -> Void)
    /// <p>Gets information about triggers configured for a repository.</p>
    func getRepositoryTriggers(input: GetRepositoryTriggersInput, completion: @escaping (SdkResult<GetRepositoryTriggersOutputResponse, GetRepositoryTriggersOutputError>) -> Void)
    /// <p>Lists all approval rule templates in the specified AWS Region in your AWS account. If
    ///             an AWS Region is not specified, the AWS Region where you are signed in is used.</p>
    func listApprovalRuleTemplates(input: ListApprovalRuleTemplatesInput, completion: @escaping (SdkResult<ListApprovalRuleTemplatesOutputResponse, ListApprovalRuleTemplatesOutputError>) -> Void)
    /// <p>Lists all approval rule templates that are associated with a specified repository.</p>
    func listAssociatedApprovalRuleTemplatesForRepository(input: ListAssociatedApprovalRuleTemplatesForRepositoryInput, completion: @escaping (SdkResult<ListAssociatedApprovalRuleTemplatesForRepositoryOutputResponse, ListAssociatedApprovalRuleTemplatesForRepositoryOutputError>) -> Void)
    /// <p>Gets information about one or more branches in a repository.</p>
    func listBranches(input: ListBranchesInput, completion: @escaping (SdkResult<ListBranchesOutputResponse, ListBranchesOutputError>) -> Void)
    /// <p>Returns a list of pull requests for a specified repository. The return list can be refined by pull request
    ///         status or pull request author ARN.</p>
    func listPullRequests(input: ListPullRequestsInput, completion: @escaping (SdkResult<ListPullRequestsOutputResponse, ListPullRequestsOutputError>) -> Void)
    /// <p>Gets information about one or more repositories.</p>
    func listRepositories(input: ListRepositoriesInput, completion: @escaping (SdkResult<ListRepositoriesOutputResponse, ListRepositoriesOutputError>) -> Void)
    /// <p>Lists all repositories associated with the specified approval rule template.</p>
    func listRepositoriesForApprovalRuleTemplate(input: ListRepositoriesForApprovalRuleTemplateInput, completion: @escaping (SdkResult<ListRepositoriesForApprovalRuleTemplateOutputResponse, ListRepositoriesForApprovalRuleTemplateOutputError>) -> Void)
    /// <p>Gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS
    ///             CodeCommit. For a list of valid resources in AWS CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a> in the<i> AWS CodeCommit User
    ///                 Guide</i>.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p>Merges two branches using the fast-forward merge strategy.</p>
    func mergeBranchesByFastForward(input: MergeBranchesByFastForwardInput, completion: @escaping (SdkResult<MergeBranchesByFastForwardOutputResponse, MergeBranchesByFastForwardOutputError>) -> Void)
    /// <p>Merges two branches using the squash merge strategy.</p>
    func mergeBranchesBySquash(input: MergeBranchesBySquashInput, completion: @escaping (SdkResult<MergeBranchesBySquashOutputResponse, MergeBranchesBySquashOutputError>) -> Void)
    /// <p>Merges two specified branches using the three-way merge strategy.</p>
    func mergeBranchesByThreeWay(input: MergeBranchesByThreeWayInput, completion: @escaping (SdkResult<MergeBranchesByThreeWayOutputResponse, MergeBranchesByThreeWayOutputError>) -> Void)
    /// <p>Attempts to merge the source commit of a pull request into the specified destination
    ///             branch for that pull request at the specified commit using the fast-forward merge strategy. If the merge is successful, it closes the pull request.</p>
    func mergePullRequestByFastForward(input: MergePullRequestByFastForwardInput, completion: @escaping (SdkResult<MergePullRequestByFastForwardOutputResponse, MergePullRequestByFastForwardOutputError>) -> Void)
    /// <p>Attempts to merge the source commit of a pull request into the specified destination
    ///             branch for that pull request at the specified commit using the squash merge strategy. If the merge is successful, it closes the pull request.</p>
    func mergePullRequestBySquash(input: MergePullRequestBySquashInput, completion: @escaping (SdkResult<MergePullRequestBySquashOutputResponse, MergePullRequestBySquashOutputError>) -> Void)
    /// <p>Attempts to merge the source commit of a pull request into the specified destination
    ///             branch for that pull request at the specified commit using the three-way merge strategy. If the merge is successful, it closes the pull request.</p>
    func mergePullRequestByThreeWay(input: MergePullRequestByThreeWayInput, completion: @escaping (SdkResult<MergePullRequestByThreeWayOutputResponse, MergePullRequestByThreeWayOutputError>) -> Void)
    /// <p>Sets aside (overrides) all approval rule requirements for a specified pull request.</p>
    func overridePullRequestApprovalRules(input: OverridePullRequestApprovalRulesInput, completion: @escaping (SdkResult<OverridePullRequestApprovalRulesOutputResponse, OverridePullRequestApprovalRulesOutputError>) -> Void)
    /// <p>Posts a comment on the comparison between two commits.</p>
    func postCommentForComparedCommit(input: PostCommentForComparedCommitInput, completion: @escaping (SdkResult<PostCommentForComparedCommitOutputResponse, PostCommentForComparedCommitOutputError>) -> Void)
    /// <p>Posts a comment on a pull request.</p>
    func postCommentForPullRequest(input: PostCommentForPullRequestInput, completion: @escaping (SdkResult<PostCommentForPullRequestOutputResponse, PostCommentForPullRequestOutputError>) -> Void)
    /// <p>Posts a comment in reply to an existing comment on a comparison between commits or a pull request.</p>
    func postCommentReply(input: PostCommentReplyInput, completion: @escaping (SdkResult<PostCommentReplyOutputResponse, PostCommentReplyOutputError>) -> Void)
    /// <p>Adds or updates a reaction to a specified comment for the user whose identity is used to make the request. You can only add or
    ///         update a reaction for yourself. You cannot add, modify, or delete a reaction for another user.</p>
    func putCommentReaction(input: PutCommentReactionInput, completion: @escaping (SdkResult<PutCommentReactionOutputResponse, PutCommentReactionOutputError>) -> Void)
    /// <p>Adds or updates a file in a branch in an AWS CodeCommit repository, and generates a commit for the addition in the specified branch.</p>
    func putFile(input: PutFileInput, completion: @escaping (SdkResult<PutFileOutputResponse, PutFileOutputError>) -> Void)
    /// <p>Replaces all triggers for a repository. Used to create or delete triggers.</p>
    func putRepositoryTriggers(input: PutRepositoryTriggersInput, completion: @escaping (SdkResult<PutRepositoryTriggersOutputResponse, PutRepositoryTriggersOutputError>) -> Void)
    /// <p>Adds or updates tags for a resource in AWS CodeCommit. For a list of valid resources
    ///             in AWS CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a> in the <i>AWS CodeCommit User
    ///                 Guide</i>.</p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p>Tests the functionality of repository triggers by sending information to the trigger
    ///             target. If real data is available in the repository, the test sends data from the last
    ///             commit. If no data is available, sample data is generated.</p>
    func testRepositoryTriggers(input: TestRepositoryTriggersInput, completion: @escaping (SdkResult<TestRepositoryTriggersOutputResponse, TestRepositoryTriggersOutputError>) -> Void)
    /// <p>Removes tags for a resource in AWS CodeCommit. For a list of valid resources in AWS
    ///             CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a> in the <i>AWS CodeCommit User
    ///                 Guide</i>.</p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// <p>Updates the content of an approval rule template. You can change the number of
    ///             required approvals, the membership of the approval rule, and whether an approval pool is
    ///             defined.</p>
    func updateApprovalRuleTemplateContent(input: UpdateApprovalRuleTemplateContentInput, completion: @escaping (SdkResult<UpdateApprovalRuleTemplateContentOutputResponse, UpdateApprovalRuleTemplateContentOutputError>) -> Void)
    /// <p>Updates the description for a specified approval rule template.</p>
    func updateApprovalRuleTemplateDescription(input: UpdateApprovalRuleTemplateDescriptionInput, completion: @escaping (SdkResult<UpdateApprovalRuleTemplateDescriptionOutputResponse, UpdateApprovalRuleTemplateDescriptionOutputError>) -> Void)
    /// <p>Updates the name of a specified approval rule template.</p>
    func updateApprovalRuleTemplateName(input: UpdateApprovalRuleTemplateNameInput, completion: @escaping (SdkResult<UpdateApprovalRuleTemplateNameOutputResponse, UpdateApprovalRuleTemplateNameOutputError>) -> Void)
    /// <p>Replaces the contents of a comment.</p>
    func updateComment(input: UpdateCommentInput, completion: @escaping (SdkResult<UpdateCommentOutputResponse, UpdateCommentOutputError>) -> Void)
    /// <p>Sets or changes the default branch name for the specified repository.</p>
    ///         <note>
    ///             <p>If you use this operation to change the default branch name to the current default branch name, a success message is returned even though the default branch did not change.</p>
    ///          </note>
    func updateDefaultBranch(input: UpdateDefaultBranchInput, completion: @escaping (SdkResult<UpdateDefaultBranchOutputResponse, UpdateDefaultBranchOutputError>) -> Void)
    /// <p>Updates the structure of an approval rule created specifically for a pull request. For example, you can change the number of required approvers and
    ///             the approval pool for approvers. </p>
    func updatePullRequestApprovalRuleContent(input: UpdatePullRequestApprovalRuleContentInput, completion: @escaping (SdkResult<UpdatePullRequestApprovalRuleContentOutputResponse, UpdatePullRequestApprovalRuleContentOutputError>) -> Void)
    /// <p>Updates the state of a user's approval on a pull request. The user is derived from the signed-in account when the request is made.</p>
    func updatePullRequestApprovalState(input: UpdatePullRequestApprovalStateInput, completion: @escaping (SdkResult<UpdatePullRequestApprovalStateOutputResponse, UpdatePullRequestApprovalStateOutputError>) -> Void)
    /// <p>Replaces the contents of the description of a pull request.</p>
    func updatePullRequestDescription(input: UpdatePullRequestDescriptionInput, completion: @escaping (SdkResult<UpdatePullRequestDescriptionOutputResponse, UpdatePullRequestDescriptionOutputError>) -> Void)
    /// <p>Updates the status of a pull request. </p>
    func updatePullRequestStatus(input: UpdatePullRequestStatusInput, completion: @escaping (SdkResult<UpdatePullRequestStatusOutputResponse, UpdatePullRequestStatusOutputError>) -> Void)
    /// <p>Replaces the title of a pull request.</p>
    func updatePullRequestTitle(input: UpdatePullRequestTitleInput, completion: @escaping (SdkResult<UpdatePullRequestTitleOutputResponse, UpdatePullRequestTitleOutputError>) -> Void)
    /// <p>Sets or changes the comment or description for a repository.</p>
    ///         <note>
    ///             <p>The description field for a repository accepts all HTML characters and all valid
    ///                 Unicode characters. Applications that do not HTML-encode the description and display
    ///                 it in a webpage can expose users to potentially malicious code. Make sure that you
    ///                 HTML-encode the description field in any application that uses this API to display
    ///                 the repository description on a webpage.</p>
    ///          </note>
    func updateRepositoryDescription(input: UpdateRepositoryDescriptionInput, completion: @escaping (SdkResult<UpdateRepositoryDescriptionOutputResponse, UpdateRepositoryDescriptionOutputError>) -> Void)
    /// <p>Renames a repository. The repository name must be unique across the calling AWS
    ///             account. Repository names are limited to 100 alphanumeric, dash, and underscore
    ///             characters, and cannot include certain characters. The suffix .git is prohibited. For
    ///             more information about the limits on repository names, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html">Limits</a> in the AWS CodeCommit
    ///             User Guide.</p>
    func updateRepositoryName(input: UpdateRepositoryNameInput, completion: @escaping (SdkResult<UpdateRepositoryNameOutputResponse, UpdateRepositoryNameOutputError>) -> Void)
}
