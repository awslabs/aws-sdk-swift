// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime

extension BatchDescribeMergeConflictsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchDescribeMergeConflictsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CommitDoesNotExistException" : self = .commitDoesNotExistException(try CommitDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CommitRequiredException" : self = .commitRequiredException(try CommitRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionIntegrityChecksFailedException" : self = .encryptionIntegrityChecksFailedException(try EncryptionIntegrityChecksFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionKeyAccessDeniedException" : self = .encryptionKeyAccessDeniedException(try EncryptionKeyAccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionKeyDisabledException" : self = .encryptionKeyDisabledException(try EncryptionKeyDisabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionKeyNotFoundException" : self = .encryptionKeyNotFoundException(try EncryptionKeyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionKeyUnavailableException" : self = .encryptionKeyUnavailableException(try EncryptionKeyUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCommitException" : self = .invalidCommitException(try InvalidCommitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidConflictDetailLevelException" : self = .invalidConflictDetailLevelException(try InvalidConflictDetailLevelException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidConflictResolutionStrategyException" : self = .invalidConflictResolutionStrategyException(try InvalidConflictResolutionStrategyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidContinuationTokenException" : self = .invalidContinuationTokenException(try InvalidContinuationTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidMaxConflictFilesException" : self = .invalidMaxConflictFilesException(try InvalidMaxConflictFilesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidMaxMergeHunksException" : self = .invalidMaxMergeHunksException(try InvalidMaxMergeHunksException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidMergeOptionException" : self = .invalidMergeOptionException(try InvalidMergeOptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRepositoryNameException" : self = .invalidRepositoryNameException(try InvalidRepositoryNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MaximumFileContentToLoadExceededException" : self = .maximumFileContentToLoadExceededException(try MaximumFileContentToLoadExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MaximumItemsToCompareExceededException" : self = .maximumItemsToCompareExceededException(try MaximumItemsToCompareExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MergeOptionRequiredException" : self = .mergeOptionRequiredException(try MergeOptionRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RepositoryDoesNotExistException" : self = .repositoryDoesNotExistException(try RepositoryDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RepositoryNameRequiredException" : self = .repositoryNameRequiredException(try RepositoryNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TipsDivergenceExceededException" : self = .tipsDivergenceExceededException(try TipsDivergenceExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}
