// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct MergeBranchesBySquashInput: Equatable {
    /// <p>The name of the author who created the commit. This information is used as both the
    ///             author and committer for the commit.</p>
    public let authorName: String?
    /// <p>The commit message for the merge.</p>
    public let commitMessage: String?
    /// <p>The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used,
    ///             which returns a not-mergeable result if the same file has differences in both branches.
    ///             If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in
    ///             both branches has differences on the same line.</p>
    public let conflictDetailLevel: ConflictDetailLevelTypeEnum?
    /// <p>If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when
    ///             resolving conflicts during a merge.</p>
    public let conflictResolution: ConflictResolution?
    /// <p>Specifies which branch to use when resolving conflicts, or whether to attempt
    ///             automatically merging two versions of a file. The default is NONE, which requires any
    ///             conflicts to be resolved manually before the merge operation is successful.</p>
    public let conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum?
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit
    ///             (for example, a branch name or a full commit ID).</p>
    public let destinationCommitSpecifier: String?
    /// <p>The email address of the person merging the branches. This information is used in the
    ///             commit information for the merge.</p>
    public let email: String?
    /// <p>If the commit contains deletions, whether to keep a folder or folder structure if the
    ///             changes leave the folders empty. If this is specified as true, a .gitkeep file is
    ///             created for empty folders. The default is false.</p>
    public let keepEmptyFolders: Bool
    /// <p>The name of the repository where you want to merge two branches.</p>
    public let repositoryName: String?
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit
    ///             (for example, a branch name or a full commit ID).</p>
    public let sourceCommitSpecifier: String?
    /// <p>The branch where the merge is applied. </p>
    public let targetBranch: String?

    public init (
        authorName: String? = nil,
        commitMessage: String? = nil,
        conflictDetailLevel: ConflictDetailLevelTypeEnum? = nil,
        conflictResolution: ConflictResolution? = nil,
        conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum? = nil,
        destinationCommitSpecifier: String? = nil,
        email: String? = nil,
        keepEmptyFolders: Bool = false,
        repositoryName: String? = nil,
        sourceCommitSpecifier: String? = nil,
        targetBranch: String? = nil
    )
    {
        self.authorName = authorName
        self.commitMessage = commitMessage
        self.conflictDetailLevel = conflictDetailLevel
        self.conflictResolution = conflictResolution
        self.conflictResolutionStrategy = conflictResolutionStrategy
        self.destinationCommitSpecifier = destinationCommitSpecifier
        self.email = email
        self.keepEmptyFolders = keepEmptyFolders
        self.repositoryName = repositoryName
        self.sourceCommitSpecifier = sourceCommitSpecifier
        self.targetBranch = targetBranch
    }
}
