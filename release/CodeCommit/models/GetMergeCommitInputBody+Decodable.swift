// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetMergeCommitInputBody: Equatable {
    public let repositoryName: String?
    public let sourceCommitSpecifier: String?
    public let destinationCommitSpecifier: String?
    public let conflictDetailLevel: ConflictDetailLevelTypeEnum?
    public let conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum?
}

extension GetMergeCommitInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case conflictDetailLevel
        case conflictResolutionStrategy
        case destinationCommitSpecifier
        case repositoryName
        case sourceCommitSpecifier
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .repositoryName)
        repositoryName = repositoryNameDecoded
        let sourceCommitSpecifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceCommitSpecifier)
        sourceCommitSpecifier = sourceCommitSpecifierDecoded
        let destinationCommitSpecifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationCommitSpecifier)
        destinationCommitSpecifier = destinationCommitSpecifierDecoded
        let conflictDetailLevelDecoded = try containerValues.decodeIfPresent(ConflictDetailLevelTypeEnum.self, forKey: .conflictDetailLevel)
        conflictDetailLevel = conflictDetailLevelDecoded
        let conflictResolutionStrategyDecoded = try containerValues.decodeIfPresent(ConflictResolutionStrategyTypeEnum.self, forKey: .conflictResolutionStrategy)
        conflictResolutionStrategy = conflictResolutionStrategyDecoded
    }
}
