// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ApprovalRuleEventMetadata: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case approvalRuleContent
        case approvalRuleId
        case approvalRuleName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let approvalRuleContent = approvalRuleContent {
            try encodeContainer.encode(approvalRuleContent, forKey: .approvalRuleContent)
        }
        if let approvalRuleId = approvalRuleId {
            try encodeContainer.encode(approvalRuleId, forKey: .approvalRuleId)
        }
        if let approvalRuleName = approvalRuleName {
            try encodeContainer.encode(approvalRuleName, forKey: .approvalRuleName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let approvalRuleNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .approvalRuleName)
        approvalRuleName = approvalRuleNameDecoded
        let approvalRuleIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .approvalRuleId)
        approvalRuleId = approvalRuleIdDecoded
        let approvalRuleContentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .approvalRuleContent)
        approvalRuleContent = approvalRuleContentDecoded
    }
}
