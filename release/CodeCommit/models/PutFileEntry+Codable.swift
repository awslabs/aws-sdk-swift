// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PutFileEntry: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fileContent
        case fileMode
        case filePath
        case sourceFile
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fileContent = fileContent {
            try encodeContainer.encode(fileContent.base64EncodedString(), forKey: .fileContent)
        }
        if let fileMode = fileMode {
            try encodeContainer.encode(fileMode.rawValue, forKey: .fileMode)
        }
        if let filePath = filePath {
            try encodeContainer.encode(filePath, forKey: .filePath)
        }
        if let sourceFile = sourceFile {
            try encodeContainer.encode(sourceFile, forKey: .sourceFile)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filePathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filePath)
        filePath = filePathDecoded
        let fileModeDecoded = try containerValues.decodeIfPresent(FileModeTypeEnum.self, forKey: .fileMode)
        fileMode = fileModeDecoded
        let fileContentDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .fileContent)
        fileContent = fileContentDecoded
        let sourceFileDecoded = try containerValues.decodeIfPresent(SourceFileSpecifier.self, forKey: .sourceFile)
        sourceFile = sourceFileDecoded
    }
}
