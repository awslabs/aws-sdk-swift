// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetMergeOptionsOutputBody: Equatable {
    public let mergeOptions: [MergeOptionTypeEnum]?
    public let sourceCommitId: String?
    public let destinationCommitId: String?
    public let baseCommitId: String?
}

extension GetMergeOptionsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case baseCommitId
        case destinationCommitId
        case mergeOptions
        case sourceCommitId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mergeOptionsContainer = try containerValues.decodeIfPresent([MergeOptionTypeEnum].self, forKey: .mergeOptions)
        var mergeOptionsDecoded0:[MergeOptionTypeEnum]? = nil
        if let mergeOptionsContainer = mergeOptionsContainer {
            mergeOptionsDecoded0 = [MergeOptionTypeEnum]()
            for string0 in mergeOptionsContainer {
                mergeOptionsDecoded0?.append(string0)
            }
        }
        mergeOptions = mergeOptionsDecoded0
        let sourceCommitIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceCommitId)
        sourceCommitId = sourceCommitIdDecoded
        let destinationCommitIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationCommitId)
        destinationCommitId = destinationCommitIdDecoded
        let baseCommitIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .baseCommitId)
        baseCommitId = baseCommitIdDecoded
    }
}
