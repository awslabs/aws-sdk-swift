// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime

extension PostCommentForComparedCommitOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PostCommentForComparedCommitOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BeforeCommitIdAndAfterCommitIdAreSameException" : self = .beforeCommitIdAndAfterCommitIdAreSameException(try BeforeCommitIdAndAfterCommitIdAreSameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ClientRequestTokenRequiredException" : self = .clientRequestTokenRequiredException(try ClientRequestTokenRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CommentContentRequiredException" : self = .commentContentRequiredException(try CommentContentRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CommentContentSizeLimitExceededException" : self = .commentContentSizeLimitExceededException(try CommentContentSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CommitDoesNotExistException" : self = .commitDoesNotExistException(try CommitDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CommitIdRequiredException" : self = .commitIdRequiredException(try CommitIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionIntegrityChecksFailedException" : self = .encryptionIntegrityChecksFailedException(try EncryptionIntegrityChecksFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionKeyAccessDeniedException" : self = .encryptionKeyAccessDeniedException(try EncryptionKeyAccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionKeyDisabledException" : self = .encryptionKeyDisabledException(try EncryptionKeyDisabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionKeyNotFoundException" : self = .encryptionKeyNotFoundException(try EncryptionKeyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionKeyUnavailableException" : self = .encryptionKeyUnavailableException(try EncryptionKeyUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IdempotencyParameterMismatchException" : self = .idempotencyParameterMismatchException(try IdempotencyParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidClientRequestTokenException" : self = .invalidClientRequestTokenException(try InvalidClientRequestTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCommitIdException" : self = .invalidCommitIdException(try InvalidCommitIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFileLocationException" : self = .invalidFileLocationException(try InvalidFileLocationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFilePositionException" : self = .invalidFilePositionException(try InvalidFilePositionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPathException" : self = .invalidPathException(try InvalidPathException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRelativeFileVersionEnumException" : self = .invalidRelativeFileVersionEnumException(try InvalidRelativeFileVersionEnumException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRepositoryNameException" : self = .invalidRepositoryNameException(try InvalidRepositoryNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PathDoesNotExistException" : self = .pathDoesNotExistException(try PathDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PathRequiredException" : self = .pathRequiredException(try PathRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RepositoryDoesNotExistException" : self = .repositoryDoesNotExistException(try RepositoryDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RepositoryNameRequiredException" : self = .repositoryNameRequiredException(try RepositoryNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}
