// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutFileInputBody: Equatable {
    public let repositoryName: String?
    public let branchName: String?
    public let fileContent: Data?
    public let filePath: String?
    public let fileMode: FileModeTypeEnum?
    public let parentCommitId: String?
    public let commitMessage: String?
    public let name: String?
    public let email: String?
}

extension PutFileInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case branchName
        case commitMessage
        case email
        case fileContent
        case fileMode
        case filePath
        case name
        case parentCommitId
        case repositoryName
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .repositoryName)
        repositoryName = repositoryNameDecoded
        let branchNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .branchName)
        branchName = branchNameDecoded
        let fileContentDecoded = try containerValues.decodeIfPresent(Data.self, forKey: .fileContent)
        fileContent = fileContentDecoded
        let filePathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filePath)
        filePath = filePathDecoded
        let fileModeDecoded = try containerValues.decodeIfPresent(FileModeTypeEnum.self, forKey: .fileMode)
        fileMode = fileModeDecoded
        let parentCommitIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .parentCommitId)
        parentCommitId = parentCommitIdDecoded
        let commitMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .commitMessage)
        commitMessage = commitMessageDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let emailDecoded = try containerValues.decodeIfPresent(String.self, forKey: .email)
        email = emailDecoded
    }
}
