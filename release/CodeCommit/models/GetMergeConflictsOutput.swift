// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetMergeConflictsOutput: Equatable {
    /// <p>The commit ID of the merge base.</p>
    public let baseCommitId: String?
    /// <p>A list of metadata for any conflicting files. If the specified merge strategy is
    ///             FAST_FORWARD_MERGE, this list is always empty.</p>
    public let conflictMetadataList: [ConflictMetadata]?
    /// <p>The commit ID of the destination commit specifier that was used in the merge evaluation.</p>
    public let destinationCommitId: String?
    /// <p>A Boolean value that indicates whether the code is mergeable by the specified merge option.</p>
    public let mergeable: Bool
    /// <p>An enumeration token that can be used in a request to return the next batch of the results.</p>
    public let nextToken: String?
    /// <p>The commit ID of the source commit specifier that was used in the merge evaluation.</p>
    public let sourceCommitId: String?

    public init (
        baseCommitId: String? = nil,
        conflictMetadataList: [ConflictMetadata]? = nil,
        destinationCommitId: String? = nil,
        mergeable: Bool = false,
        nextToken: String? = nil,
        sourceCommitId: String? = nil
    )
    {
        self.baseCommitId = baseCommitId
        self.conflictMetadataList = conflictMetadataList
        self.destinationCommitId = destinationCommitId
        self.mergeable = mergeable
        self.nextToken = nextToken
        self.sourceCommitId = sourceCommitId
    }
}
