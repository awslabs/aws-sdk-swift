// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConflictMetadata: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case contentConflict
        case fileModeConflict
        case fileModes
        case filePath
        case fileSizes
        case isBinaryFile
        case mergeOperations
        case numberOfConflicts
        case objectTypeConflict
        case objectTypes
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if contentConflict != false {
            try encodeContainer.encode(contentConflict, forKey: .contentConflict)
        }
        if fileModeConflict != false {
            try encodeContainer.encode(fileModeConflict, forKey: .fileModeConflict)
        }
        if let fileModes = fileModes {
            try encodeContainer.encode(fileModes, forKey: .fileModes)
        }
        if let filePath = filePath {
            try encodeContainer.encode(filePath, forKey: .filePath)
        }
        if let fileSizes = fileSizes {
            try encodeContainer.encode(fileSizes, forKey: .fileSizes)
        }
        if let isBinaryFile = isBinaryFile {
            try encodeContainer.encode(isBinaryFile, forKey: .isBinaryFile)
        }
        if let mergeOperations = mergeOperations {
            try encodeContainer.encode(mergeOperations, forKey: .mergeOperations)
        }
        if numberOfConflicts != 0 {
            try encodeContainer.encode(numberOfConflicts, forKey: .numberOfConflicts)
        }
        if objectTypeConflict != false {
            try encodeContainer.encode(objectTypeConflict, forKey: .objectTypeConflict)
        }
        if let objectTypes = objectTypes {
            try encodeContainer.encode(objectTypes, forKey: .objectTypes)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filePathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .filePath)
        filePath = filePathDecoded
        let fileSizesDecoded = try containerValues.decodeIfPresent(FileSizes.self, forKey: .fileSizes)
        fileSizes = fileSizesDecoded
        let fileModesDecoded = try containerValues.decodeIfPresent(FileModes.self, forKey: .fileModes)
        fileModes = fileModesDecoded
        let objectTypesDecoded = try containerValues.decodeIfPresent(ObjectTypes.self, forKey: .objectTypes)
        objectTypes = objectTypesDecoded
        let numberOfConflictsDecoded = try containerValues.decode(Int.self, forKey: .numberOfConflicts)
        numberOfConflicts = numberOfConflictsDecoded
        let isBinaryFileDecoded = try containerValues.decodeIfPresent(IsBinaryFile.self, forKey: .isBinaryFile)
        isBinaryFile = isBinaryFileDecoded
        let contentConflictDecoded = try containerValues.decode(Bool.self, forKey: .contentConflict)
        contentConflict = contentConflictDecoded
        let fileModeConflictDecoded = try containerValues.decode(Bool.self, forKey: .fileModeConflict)
        fileModeConflict = fileModeConflictDecoded
        let objectTypeConflictDecoded = try containerValues.decode(Bool.self, forKey: .objectTypeConflict)
        objectTypeConflict = objectTypeConflictDecoded
        let mergeOperationsDecoded = try containerValues.decodeIfPresent(MergeOperations.self, forKey: .mergeOperations)
        mergeOperations = mergeOperationsDecoded
    }
}
