// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ReactionForComment: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case reaction
        case reactionUsers
        case reactionsFromDeletedUsersCount
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let reaction = reaction {
            try encodeContainer.encode(reaction, forKey: .reaction)
        }
        if let reactionUsers = reactionUsers {
            var reactionUsersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .reactionUsers)
            for reactionuserslist0 in reactionUsers {
                try reactionUsersContainer.encode(reactionuserslist0)
            }
        }
        if let reactionsFromDeletedUsersCount = reactionsFromDeletedUsersCount {
            try encodeContainer.encode(reactionsFromDeletedUsersCount, forKey: .reactionsFromDeletedUsersCount)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reactionDecoded = try containerValues.decodeIfPresent(ReactionValueFormats.self, forKey: .reaction)
        reaction = reactionDecoded
        let reactionUsersContainer = try containerValues.decodeIfPresent([String].self, forKey: .reactionUsers)
        var reactionUsersDecoded0:[String]? = nil
        if let reactionUsersContainer = reactionUsersContainer {
            reactionUsersDecoded0 = [String]()
            for string0 in reactionUsersContainer {
                reactionUsersDecoded0?.append(string0)
            }
        }
        reactionUsers = reactionUsersDecoded0
        let reactionsFromDeletedUsersCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .reactionsFromDeletedUsersCount)
        reactionsFromDeletedUsersCount = reactionsFromDeletedUsersCountDecoded
    }
}
