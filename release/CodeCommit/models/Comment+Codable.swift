// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Comment: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case authorArn
        case callerReactions
        case clientRequestToken
        case commentId
        case content
        case creationDate
        case deleted
        case inReplyTo
        case lastModifiedDate
        case reactionCounts
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authorArn = authorArn {
            try encodeContainer.encode(authorArn, forKey: .authorArn)
        }
        if let callerReactions = callerReactions {
            var callerReactionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .callerReactions)
            for callerreactions0 in callerReactions {
                try callerReactionsContainer.encode(callerreactions0)
            }
        }
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let commentId = commentId {
            try encodeContainer.encode(commentId, forKey: .commentId)
        }
        if let content = content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if deleted != false {
            try encodeContainer.encode(deleted, forKey: .deleted)
        }
        if let inReplyTo = inReplyTo {
            try encodeContainer.encode(inReplyTo, forKey: .inReplyTo)
        }
        if let lastModifiedDate = lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate.timeIntervalSince1970, forKey: .lastModifiedDate)
        }
        if let reactionCounts = reactionCounts {
            var reactionCountsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .reactionCounts)
            for (dictKey0, reactioncountsmap0) in reactionCounts {
                try reactionCountsContainer.encode(reactioncountsmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commentIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .commentId)
        commentId = commentIdDecoded
        let contentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .content)
        content = contentDecoded
        let inReplyToDecoded = try containerValues.decodeIfPresent(String.self, forKey: .inReplyTo)
        inReplyTo = inReplyToDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let authorArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .authorArn)
        authorArn = authorArnDecoded
        let deletedDecoded = try containerValues.decode(Bool.self, forKey: .deleted)
        deleted = deletedDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let callerReactionsContainer = try containerValues.decodeIfPresent([String].self, forKey: .callerReactions)
        var callerReactionsDecoded0:[String]? = nil
        if let callerReactionsContainer = callerReactionsContainer {
            callerReactionsDecoded0 = [String]()
            for string0 in callerReactionsContainer {
                callerReactionsDecoded0?.append(string0)
            }
        }
        callerReactions = callerReactionsDecoded0
        let reactionCountsContainer = try containerValues.decodeIfPresent([String:Int].self, forKey: .reactionCounts)
        var reactionCountsDecoded0: [String:Int]? = nil
        if let reactionCountsContainer = reactionCountsContainer {
            reactionCountsDecoded0 = [String:Int]()
            for (key0, count0) in reactionCountsContainer {
                reactionCountsDecoded0?[key0] = count0
            }
        }
        reactionCounts = reactionCountsDecoded0
    }
}
