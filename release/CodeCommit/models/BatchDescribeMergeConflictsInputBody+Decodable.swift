// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct BatchDescribeMergeConflictsInputBody: Equatable {
    public let repositoryName: String?
    public let destinationCommitSpecifier: String?
    public let sourceCommitSpecifier: String?
    public let mergeOption: MergeOptionTypeEnum?
    public let maxMergeHunks: Int?
    public let maxConflictFiles: Int?
    public let filePaths: [String]?
    public let conflictDetailLevel: ConflictDetailLevelTypeEnum?
    public let conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum?
    public let nextToken: String?
}

extension BatchDescribeMergeConflictsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case conflictDetailLevel
        case conflictResolutionStrategy
        case destinationCommitSpecifier
        case filePaths
        case maxConflictFiles
        case maxMergeHunks
        case mergeOption
        case nextToken
        case repositoryName
        case sourceCommitSpecifier
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .repositoryName)
        repositoryName = repositoryNameDecoded
        let destinationCommitSpecifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationCommitSpecifier)
        destinationCommitSpecifier = destinationCommitSpecifierDecoded
        let sourceCommitSpecifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceCommitSpecifier)
        sourceCommitSpecifier = sourceCommitSpecifierDecoded
        let mergeOptionDecoded = try containerValues.decodeIfPresent(MergeOptionTypeEnum.self, forKey: .mergeOption)
        mergeOption = mergeOptionDecoded
        let maxMergeHunksDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxMergeHunks)
        maxMergeHunks = maxMergeHunksDecoded
        let maxConflictFilesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxConflictFiles)
        maxConflictFiles = maxConflictFilesDecoded
        let filePathsContainer = try containerValues.decodeIfPresent([String].self, forKey: .filePaths)
        var filePathsDecoded0:[String]? = nil
        if let filePathsContainer = filePathsContainer {
            filePathsDecoded0 = [String]()
            for string0 in filePathsContainer {
                filePathsDecoded0?.append(string0)
            }
        }
        filePaths = filePathsDecoded0
        let conflictDetailLevelDecoded = try containerValues.decodeIfPresent(ConflictDetailLevelTypeEnum.self, forKey: .conflictDetailLevel)
        conflictDetailLevel = conflictDetailLevelDecoded
        let conflictResolutionStrategyDecoded = try containerValues.decodeIfPresent(ConflictResolutionStrategyTypeEnum.self, forKey: .conflictResolutionStrategy)
        conflictResolutionStrategy = conflictResolutionStrategyDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
