// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetMergeConflictsInput: Equatable {
    /// <p>The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used,
    ///             which returns a not-mergeable result if the same file has differences in both branches.
    ///             If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in
    ///             both branches has differences on the same line.</p>
    public let conflictDetailLevel: ConflictDetailLevelTypeEnum?
    /// <p>Specifies which branch to use when resolving conflicts, or whether to attempt
    ///             automatically merging two versions of a file. The default is NONE, which requires any
    ///             conflicts to be resolved manually before the merge operation is successful.</p>
    public let conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum?
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit
    ///             (for example, a branch name or a full commit ID).</p>
    public let destinationCommitSpecifier: String?
    /// <p>The maximum number of files to include in the output.</p>
    public let maxConflictFiles: Int?
    /// <p>The merge option or strategy you want to use to merge the code.  </p>
    public let mergeOption: MergeOptionTypeEnum?
    /// <p>An enumeration token that, when provided in a request, returns the next batch of the
    ///             results.</p>
    public let nextToken: String?
    /// <p>The name of the repository where the pull request was created.</p>
    public let repositoryName: String?
    /// <p>The branch, tag, HEAD, or other fully qualified reference used to identify a commit
    ///             (for example, a branch name or a full commit ID).</p>
    public let sourceCommitSpecifier: String?

    public init (
        conflictDetailLevel: ConflictDetailLevelTypeEnum? = nil,
        conflictResolutionStrategy: ConflictResolutionStrategyTypeEnum? = nil,
        destinationCommitSpecifier: String? = nil,
        maxConflictFiles: Int? = nil,
        mergeOption: MergeOptionTypeEnum? = nil,
        nextToken: String? = nil,
        repositoryName: String? = nil,
        sourceCommitSpecifier: String? = nil
    )
    {
        self.conflictDetailLevel = conflictDetailLevel
        self.conflictResolutionStrategy = conflictResolutionStrategy
        self.destinationCommitSpecifier = destinationCommitSpecifier
        self.maxConflictFiles = maxConflictFiles
        self.mergeOption = mergeOption
        self.nextToken = nextToken
        self.repositoryName = repositoryName
        self.sourceCommitSpecifier = sourceCommitSpecifier
    }
}
