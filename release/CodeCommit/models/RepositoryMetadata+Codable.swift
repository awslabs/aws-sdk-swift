// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RepositoryMetadata: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case accountId
        case cloneUrlHttp
        case cloneUrlSsh
        case creationDate
        case defaultBranch
        case lastModifiedDate
        case repositoryDescription
        case repositoryId
        case repositoryName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let cloneUrlHttp = cloneUrlHttp {
            try encodeContainer.encode(cloneUrlHttp, forKey: .cloneUrlHttp)
        }
        if let cloneUrlSsh = cloneUrlSsh {
            try encodeContainer.encode(cloneUrlSsh, forKey: .cloneUrlSsh)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let defaultBranch = defaultBranch {
            try encodeContainer.encode(defaultBranch, forKey: .defaultBranch)
        }
        if let lastModifiedDate = lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate.timeIntervalSince1970, forKey: .lastModifiedDate)
        }
        if let repositoryDescription = repositoryDescription {
            try encodeContainer.encode(repositoryDescription, forKey: .repositoryDescription)
        }
        if let repositoryId = repositoryId {
            try encodeContainer.encode(repositoryId, forKey: .repositoryId)
        }
        if let repositoryName = repositoryName {
            try encodeContainer.encode(repositoryName, forKey: .repositoryName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let repositoryIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .repositoryId)
        repositoryId = repositoryIdDecoded
        let repositoryNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .repositoryName)
        repositoryName = repositoryNameDecoded
        let repositoryDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .repositoryDescription)
        repositoryDescription = repositoryDescriptionDecoded
        let defaultBranchDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultBranch)
        defaultBranch = defaultBranchDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let cloneUrlHttpDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cloneUrlHttp)
        cloneUrlHttp = cloneUrlHttpDecoded
        let cloneUrlSshDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cloneUrlSsh)
        cloneUrlSsh = cloneUrlSshDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
    }
}
