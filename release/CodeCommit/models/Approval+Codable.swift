// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Approval: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case approvalState
        case userArn
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let approvalState = approvalState {
            try encodeContainer.encode(approvalState.rawValue, forKey: .approvalState)
        }
        if let userArn = userArn {
            try encodeContainer.encode(userArn, forKey: .userArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userArn)
        userArn = userArnDecoded
        let approvalStateDecoded = try containerValues.decodeIfPresent(ApprovalState.self, forKey: .approvalState)
        approvalState = approvalStateDecoded
    }
}
