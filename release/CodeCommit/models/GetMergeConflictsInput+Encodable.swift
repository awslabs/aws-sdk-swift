// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GetMergeConflictsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case conflictDetailLevel
        case conflictResolutionStrategy
        case destinationCommitSpecifier
        case maxConflictFiles
        case mergeOption
        case nextToken
        case repositoryName
        case sourceCommitSpecifier
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conflictDetailLevel = conflictDetailLevel {
            try encodeContainer.encode(conflictDetailLevel.rawValue, forKey: .conflictDetailLevel)
        }
        if let conflictResolutionStrategy = conflictResolutionStrategy {
            try encodeContainer.encode(conflictResolutionStrategy.rawValue, forKey: .conflictResolutionStrategy)
        }
        if let destinationCommitSpecifier = destinationCommitSpecifier {
            try encodeContainer.encode(destinationCommitSpecifier, forKey: .destinationCommitSpecifier)
        }
        if let maxConflictFiles = maxConflictFiles {
            try encodeContainer.encode(maxConflictFiles, forKey: .maxConflictFiles)
        }
        if let mergeOption = mergeOption {
            try encodeContainer.encode(mergeOption.rawValue, forKey: .mergeOption)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let repositoryName = repositoryName {
            try encodeContainer.encode(repositoryName, forKey: .repositoryName)
        }
        if let sourceCommitSpecifier = sourceCommitSpecifier {
            try encodeContainer.encode(sourceCommitSpecifier, forKey: .sourceCommitSpecifier)
        }
    }
}
