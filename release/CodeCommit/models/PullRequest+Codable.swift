// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PullRequest: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case approvalRules
        case authorArn
        case clientRequestToken
        case creationDate
        case description
        case lastActivityDate
        case pullRequestId
        case pullRequestStatus
        case pullRequestTargets
        case revisionId
        case title
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let approvalRules = approvalRules {
            var approvalRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .approvalRules)
            for approvalruleslist0 in approvalRules {
                try approvalRulesContainer.encode(approvalruleslist0)
            }
        }
        if let authorArn = authorArn {
            try encodeContainer.encode(authorArn, forKey: .authorArn)
        }
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lastActivityDate = lastActivityDate {
            try encodeContainer.encode(lastActivityDate.timeIntervalSince1970, forKey: .lastActivityDate)
        }
        if let pullRequestId = pullRequestId {
            try encodeContainer.encode(pullRequestId, forKey: .pullRequestId)
        }
        if let pullRequestStatus = pullRequestStatus {
            try encodeContainer.encode(pullRequestStatus.rawValue, forKey: .pullRequestStatus)
        }
        if let pullRequestTargets = pullRequestTargets {
            var pullRequestTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pullRequestTargets)
            for pullrequesttargetlist0 in pullRequestTargets {
                try pullRequestTargetsContainer.encode(pullrequesttargetlist0)
            }
        }
        if let revisionId = revisionId {
            try encodeContainer.encode(revisionId, forKey: .revisionId)
        }
        if let title = title {
            try encodeContainer.encode(title, forKey: .title)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pullRequestIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .pullRequestId)
        pullRequestId = pullRequestIdDecoded
        let titleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .title)
        title = titleDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let lastActivityDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastActivityDate)
        lastActivityDate = lastActivityDateDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let pullRequestStatusDecoded = try containerValues.decodeIfPresent(PullRequestStatusEnum.self, forKey: .pullRequestStatus)
        pullRequestStatus = pullRequestStatusDecoded
        let authorArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .authorArn)
        authorArn = authorArnDecoded
        let pullRequestTargetsContainer = try containerValues.decodeIfPresent([PullRequestTarget].self, forKey: .pullRequestTargets)
        var pullRequestTargetsDecoded0:[PullRequestTarget]? = nil
        if let pullRequestTargetsContainer = pullRequestTargetsContainer {
            pullRequestTargetsDecoded0 = [PullRequestTarget]()
            for structure0 in pullRequestTargetsContainer {
                pullRequestTargetsDecoded0?.append(structure0)
            }
        }
        pullRequestTargets = pullRequestTargetsDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let revisionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .revisionId)
        revisionId = revisionIdDecoded
        let approvalRulesContainer = try containerValues.decodeIfPresent([ApprovalRule].self, forKey: .approvalRules)
        var approvalRulesDecoded0:[ApprovalRule]? = nil
        if let approvalRulesContainer = approvalRulesContainer {
            approvalRulesDecoded0 = [ApprovalRule]()
            for structure0 in approvalRulesContainer {
                approvalRulesDecoded0?.append(structure0)
            }
        }
        approvalRules = approvalRulesDecoded0
    }
}
