// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime

extension CreatePullRequestOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePullRequestOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ClientRequestTokenRequiredException" : self = .clientRequestTokenRequiredException(try ClientRequestTokenRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionIntegrityChecksFailedException" : self = .encryptionIntegrityChecksFailedException(try EncryptionIntegrityChecksFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionKeyAccessDeniedException" : self = .encryptionKeyAccessDeniedException(try EncryptionKeyAccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionKeyDisabledException" : self = .encryptionKeyDisabledException(try EncryptionKeyDisabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionKeyNotFoundException" : self = .encryptionKeyNotFoundException(try EncryptionKeyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionKeyUnavailableException" : self = .encryptionKeyUnavailableException(try EncryptionKeyUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IdempotencyParameterMismatchException" : self = .idempotencyParameterMismatchException(try IdempotencyParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidClientRequestTokenException" : self = .invalidClientRequestTokenException(try InvalidClientRequestTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDescriptionException" : self = .invalidDescriptionException(try InvalidDescriptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidReferenceNameException" : self = .invalidReferenceNameException(try InvalidReferenceNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRepositoryNameException" : self = .invalidRepositoryNameException(try InvalidRepositoryNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTargetException" : self = .invalidTargetException(try InvalidTargetException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTargetsException" : self = .invalidTargetsException(try InvalidTargetsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTitleException" : self = .invalidTitleException(try InvalidTitleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MaximumOpenPullRequestsExceededException" : self = .maximumOpenPullRequestsExceededException(try MaximumOpenPullRequestsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MultipleRepositoriesInPullRequestException" : self = .multipleRepositoriesInPullRequestException(try MultipleRepositoriesInPullRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReferenceDoesNotExistException" : self = .referenceDoesNotExistException(try ReferenceDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReferenceNameRequiredException" : self = .referenceNameRequiredException(try ReferenceNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ReferenceTypeNotSupportedException" : self = .referenceTypeNotSupportedException(try ReferenceTypeNotSupportedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RepositoryDoesNotExistException" : self = .repositoryDoesNotExistException(try RepositoryDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RepositoryNameRequiredException" : self = .repositoryNameRequiredException(try RepositoryNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SourceAndDestinationAreSameException" : self = .sourceAndDestinationAreSameException(try SourceAndDestinationAreSameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TargetRequiredException" : self = .targetRequiredException(try TargetRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TargetsRequiredException" : self = .targetsRequiredException(try TargetsRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TitleRequiredException" : self = .titleRequiredException(try TitleRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}
