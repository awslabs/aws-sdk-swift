// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PullRequestCreatedEventMetadata: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destinationCommitId
        case mergeBase
        case repositoryName
        case sourceCommitId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationCommitId = destinationCommitId {
            try encodeContainer.encode(destinationCommitId, forKey: .destinationCommitId)
        }
        if let mergeBase = mergeBase {
            try encodeContainer.encode(mergeBase, forKey: .mergeBase)
        }
        if let repositoryName = repositoryName {
            try encodeContainer.encode(repositoryName, forKey: .repositoryName)
        }
        if let sourceCommitId = sourceCommitId {
            try encodeContainer.encode(sourceCommitId, forKey: .sourceCommitId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .repositoryName)
        repositoryName = repositoryNameDecoded
        let sourceCommitIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceCommitId)
        sourceCommitId = sourceCommitIdDecoded
        let destinationCommitIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationCommitId)
        destinationCommitId = destinationCommitIdDecoded
        let mergeBaseDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mergeBase)
        mergeBase = mergeBaseDecoded
    }
}
