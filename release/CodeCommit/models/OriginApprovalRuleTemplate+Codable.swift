// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OriginApprovalRuleTemplate: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case approvalRuleTemplateId
        case approvalRuleTemplateName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let approvalRuleTemplateId = approvalRuleTemplateId {
            try encodeContainer.encode(approvalRuleTemplateId, forKey: .approvalRuleTemplateId)
        }
        if let approvalRuleTemplateName = approvalRuleTemplateName {
            try encodeContainer.encode(approvalRuleTemplateName, forKey: .approvalRuleTemplateName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let approvalRuleTemplateIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .approvalRuleTemplateId)
        approvalRuleTemplateId = approvalRuleTemplateIdDecoded
        let approvalRuleTemplateNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .approvalRuleTemplateName)
        approvalRuleTemplateName = approvalRuleTemplateNameDecoded
    }
}
