// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime

extension UpdatePullRequestApprovalStateOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdatePullRequestApprovalStateOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "ApprovalStateRequiredException" : self = .approvalStateRequiredException(try ApprovalStateRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionIntegrityChecksFailedException" : self = .encryptionIntegrityChecksFailedException(try EncryptionIntegrityChecksFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionKeyAccessDeniedException" : self = .encryptionKeyAccessDeniedException(try EncryptionKeyAccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionKeyDisabledException" : self = .encryptionKeyDisabledException(try EncryptionKeyDisabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionKeyNotFoundException" : self = .encryptionKeyNotFoundException(try EncryptionKeyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionKeyUnavailableException" : self = .encryptionKeyUnavailableException(try EncryptionKeyUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApprovalStateException" : self = .invalidApprovalStateException(try InvalidApprovalStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPullRequestIdException" : self = .invalidPullRequestIdException(try InvalidPullRequestIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRevisionIdException" : self = .invalidRevisionIdException(try InvalidRevisionIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MaximumNumberOfApprovalsExceededException" : self = .maximumNumberOfApprovalsExceededException(try MaximumNumberOfApprovalsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PullRequestAlreadyClosedException" : self = .pullRequestAlreadyClosedException(try PullRequestAlreadyClosedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PullRequestCannotBeApprovedByAuthorException" : self = .pullRequestCannotBeApprovedByAuthorException(try PullRequestCannotBeApprovedByAuthorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PullRequestDoesNotExistException" : self = .pullRequestDoesNotExistException(try PullRequestDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PullRequestIdRequiredException" : self = .pullRequestIdRequiredException(try PullRequestIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RevisionIdRequiredException" : self = .revisionIdRequiredException(try RevisionIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RevisionNotCurrentException" : self = .revisionNotCurrentException(try RevisionNotCurrentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}
