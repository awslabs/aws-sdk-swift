// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BlobMetadata: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case blobId
        case mode
        case path
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blobId = blobId {
            try encodeContainer.encode(blobId, forKey: .blobId)
        }
        if let mode = mode {
            try encodeContainer.encode(mode, forKey: .mode)
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blobIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .blobId)
        blobId = blobIdDecoded
        let pathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .path)
        path = pathDecoded
        let modeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mode)
        mode = modeDecoded
    }
}
