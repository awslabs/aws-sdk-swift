// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ReactionValueFormats: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case emoji
        case shortCode
        case unicode
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let emoji = emoji {
            try encodeContainer.encode(emoji, forKey: .emoji)
        }
        if let shortCode = shortCode {
            try encodeContainer.encode(shortCode, forKey: .shortCode)
        }
        if let unicode = unicode {
            try encodeContainer.encode(unicode, forKey: .unicode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emojiDecoded = try containerValues.decodeIfPresent(String.self, forKey: .emoji)
        emoji = emojiDecoded
        let shortCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .shortCode)
        shortCode = shortCodeDecoded
        let unicodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .unicode)
        unicode = unicodeDecoded
    }
}
