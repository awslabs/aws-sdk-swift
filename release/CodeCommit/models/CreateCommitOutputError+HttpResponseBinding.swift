// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime

extension CreateCommitOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateCommitOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "BranchDoesNotExistException" : self = .branchDoesNotExistException(try BranchDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BranchNameIsTagNameException" : self = .branchNameIsTagNameException(try BranchNameIsTagNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BranchNameRequiredException" : self = .branchNameRequiredException(try BranchNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CommitMessageLengthExceededException" : self = .commitMessageLengthExceededException(try CommitMessageLengthExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryNameConflictsWithFileNameException" : self = .directoryNameConflictsWithFileNameException(try DirectoryNameConflictsWithFileNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionIntegrityChecksFailedException" : self = .encryptionIntegrityChecksFailedException(try EncryptionIntegrityChecksFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionKeyAccessDeniedException" : self = .encryptionKeyAccessDeniedException(try EncryptionKeyAccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionKeyDisabledException" : self = .encryptionKeyDisabledException(try EncryptionKeyDisabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionKeyNotFoundException" : self = .encryptionKeyNotFoundException(try EncryptionKeyNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EncryptionKeyUnavailableException" : self = .encryptionKeyUnavailableException(try EncryptionKeyUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileContentAndSourceFileSpecifiedException" : self = .fileContentAndSourceFileSpecifiedException(try FileContentAndSourceFileSpecifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileContentSizeLimitExceededException" : self = .fileContentSizeLimitExceededException(try FileContentSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileDoesNotExistException" : self = .fileDoesNotExistException(try FileDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileEntryRequiredException" : self = .fileEntryRequiredException(try FileEntryRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileModeRequiredException" : self = .fileModeRequiredException(try FileModeRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FileNameConflictsWithDirectoryNameException" : self = .fileNameConflictsWithDirectoryNameException(try FileNameConflictsWithDirectoryNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FilePathConflictsWithSubmodulePathException" : self = .filePathConflictsWithSubmodulePathException(try FilePathConflictsWithSubmodulePathException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FolderContentSizeLimitExceededException" : self = .folderContentSizeLimitExceededException(try FolderContentSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidBranchNameException" : self = .invalidBranchNameException(try InvalidBranchNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeletionParameterException" : self = .invalidDeletionParameterException(try InvalidDeletionParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEmailException" : self = .invalidEmailException(try InvalidEmailException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFileModeException" : self = .invalidFileModeException(try InvalidFileModeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParentCommitIdException" : self = .invalidParentCommitIdException(try InvalidParentCommitIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPathException" : self = .invalidPathException(try InvalidPathException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRepositoryNameException" : self = .invalidRepositoryNameException(try InvalidRepositoryNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MaximumFileEntriesExceededException" : self = .maximumFileEntriesExceededException(try MaximumFileEntriesExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NameLengthExceededException" : self = .nameLengthExceededException(try NameLengthExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoChangeException" : self = .noChangeException(try NoChangeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ParentCommitDoesNotExistException" : self = .parentCommitDoesNotExistException(try ParentCommitDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ParentCommitIdOutdatedException" : self = .parentCommitIdOutdatedException(try ParentCommitIdOutdatedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ParentCommitIdRequiredException" : self = .parentCommitIdRequiredException(try ParentCommitIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PathRequiredException" : self = .pathRequiredException(try PathRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PutFileEntryConflictException" : self = .putFileEntryConflictException(try PutFileEntryConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RepositoryDoesNotExistException" : self = .repositoryDoesNotExistException(try RepositoryDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RepositoryNameRequiredException" : self = .repositoryNameRequiredException(try RepositoryNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RestrictedSourceFileException" : self = .restrictedSourceFileException(try RestrictedSourceFileException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SamePathRequestException" : self = .samePathRequestException(try SamePathRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SourceFileOrContentRequiredException" : self = .sourceFileOrContentRequiredException(try SourceFileOrContentRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}
