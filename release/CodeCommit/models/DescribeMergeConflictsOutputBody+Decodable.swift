// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeMergeConflictsOutputBody: Equatable {
    public let conflictMetadata: ConflictMetadata?
    public let mergeHunks: [MergeHunk]?
    public let nextToken: String?
    public let destinationCommitId: String?
    public let sourceCommitId: String?
    public let baseCommitId: String?
}

extension DescribeMergeConflictsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case baseCommitId
        case conflictMetadata
        case destinationCommitId
        case mergeHunks
        case nextToken
        case sourceCommitId
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conflictMetadataDecoded = try containerValues.decodeIfPresent(ConflictMetadata.self, forKey: .conflictMetadata)
        conflictMetadata = conflictMetadataDecoded
        let mergeHunksContainer = try containerValues.decodeIfPresent([MergeHunk].self, forKey: .mergeHunks)
        var mergeHunksDecoded0:[MergeHunk]? = nil
        if let mergeHunksContainer = mergeHunksContainer {
            mergeHunksDecoded0 = [MergeHunk]()
            for structure0 in mergeHunksContainer {
                mergeHunksDecoded0?.append(structure0)
            }
        }
        mergeHunks = mergeHunksDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let destinationCommitIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .destinationCommitId)
        destinationCommitId = destinationCommitIdDecoded
        let sourceCommitIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceCommitId)
        sourceCommitId = sourceCommitIdDecoded
        let baseCommitIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .baseCommitId)
        baseCommitId = baseCommitIdDecoded
    }
}
