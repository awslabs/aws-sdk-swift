// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MergeMetadata: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case isMerged
        case mergeCommitId
        case mergeOption
        case mergedBy
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if isMerged != false {
            try encodeContainer.encode(isMerged, forKey: .isMerged)
        }
        if let mergeCommitId = mergeCommitId {
            try encodeContainer.encode(mergeCommitId, forKey: .mergeCommitId)
        }
        if let mergeOption = mergeOption {
            try encodeContainer.encode(mergeOption.rawValue, forKey: .mergeOption)
        }
        if let mergedBy = mergedBy {
            try encodeContainer.encode(mergedBy, forKey: .mergedBy)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isMergedDecoded = try containerValues.decode(Bool.self, forKey: .isMerged)
        isMerged = isMergedDecoded
        let mergedByDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mergedBy)
        mergedBy = mergedByDecoded
        let mergeCommitIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .mergeCommitId)
        mergeCommitId = mergeCommitIdDecoded
        let mergeOptionDecoded = try containerValues.decodeIfPresent(MergeOptionTypeEnum.self, forKey: .mergeOption)
        mergeOption = mergeOptionDecoded
    }
}
