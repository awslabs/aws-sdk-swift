// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>The current metric names.</p>
public enum CurrentMetricName {
    case agentsAfterContactWork
    case agentsAvailable
    case agentsError
    case agentsNonProductive
    case agentsOnline
    case agentsOnCall
    case agentsOnContact
    case agentsStaffed
    case contactsInQueue
    case contactsScheduled
    case oldestContactAge
    case slotsActive
    case slotsAvailable
    case sdkUnknown(String)
}

extension CurrentMetricName : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [CurrentMetricName] {
        return [
            .agentsAfterContactWork,
            .agentsAvailable,
            .agentsError,
            .agentsNonProductive,
            .agentsOnline,
            .agentsOnCall,
            .agentsOnContact,
            .agentsStaffed,
            .contactsInQueue,
            .contactsScheduled,
            .oldestContactAge,
            .slotsActive,
            .slotsAvailable,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .agentsAfterContactWork: return "AGENTS_AFTER_CONTACT_WORK"
        case .agentsAvailable: return "AGENTS_AVAILABLE"
        case .agentsError: return "AGENTS_ERROR"
        case .agentsNonProductive: return "AGENTS_NON_PRODUCTIVE"
        case .agentsOnline: return "AGENTS_ONLINE"
        case .agentsOnCall: return "AGENTS_ON_CALL"
        case .agentsOnContact: return "AGENTS_ON_CONTACT"
        case .agentsStaffed: return "AGENTS_STAFFED"
        case .contactsInQueue: return "CONTACTS_IN_QUEUE"
        case .contactsScheduled: return "CONTACTS_SCHEDULED"
        case .oldestContactAge: return "OLDEST_CONTACT_AGE"
        case .slotsActive: return "SLOTS_ACTIVE"
        case .slotsAvailable: return "SLOTS_AVAILABLE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = CurrentMetricName(rawValue: rawValue) ?? CurrentMetricName.sdkUnknown(rawValue)
    }
}
