// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Queue: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case hoursOfOperationId = "HoursOfOperationId"
        case maxContacts = "MaxContacts"
        case name = "Name"
        case outboundCallerConfig = "OutboundCallerConfig"
        case queueArn = "QueueArn"
        case queueId = "QueueId"
        case status = "Status"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let hoursOfOperationId = hoursOfOperationId {
            try encodeContainer.encode(hoursOfOperationId, forKey: .hoursOfOperationId)
        }
        if maxContacts != 0 {
            try encodeContainer.encode(maxContacts, forKey: .maxContacts)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outboundCallerConfig = outboundCallerConfig {
            try encodeContainer.encode(outboundCallerConfig, forKey: .outboundCallerConfig)
        }
        if let queueArn = queueArn {
            try encodeContainer.encode(queueArn, forKey: .queueArn)
        }
        if let queueId = queueId {
            try encodeContainer.encode(queueId, forKey: .queueId)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let queueArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queueArn)
        queueArn = queueArnDecoded
        let queueIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queueId)
        queueId = queueIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let outboundCallerConfigDecoded = try containerValues.decodeIfPresent(OutboundCallerConfig.self, forKey: .outboundCallerConfig)
        outboundCallerConfig = outboundCallerConfigDecoded
        let hoursOfOperationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hoursOfOperationId)
        hoursOfOperationId = hoursOfOperationIdDecoded
        let maxContactsDecoded = try containerValues.decode(Int.self, forKey: .maxContacts)
        maxContacts = maxContactsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(QueueStatus.self, forKey: .status)
        status = statusDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
