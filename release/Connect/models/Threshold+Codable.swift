// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Threshold: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case comparison = "Comparison"
        case thresholdValue = "ThresholdValue"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparison = comparison {
            try encodeContainer.encode(comparison.rawValue, forKey: .comparison)
        }
        if let thresholdValue = thresholdValue {
            try encodeContainer.encode(thresholdValue, forKey: .thresholdValue)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let comparisonDecoded = try containerValues.decodeIfPresent(Comparison.self, forKey: .comparison)
        comparison = comparisonDecoded
        let thresholdValueDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .thresholdValue)
        thresholdValue = thresholdValueDecoded
    }
}
