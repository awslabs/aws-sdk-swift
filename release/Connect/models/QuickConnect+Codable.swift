// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension QuickConnect: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case name = "Name"
        case quickConnectARN = "QuickConnectARN"
        case quickConnectConfig = "QuickConnectConfig"
        case quickConnectId = "QuickConnectId"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let quickConnectARN = quickConnectARN {
            try encodeContainer.encode(quickConnectARN, forKey: .quickConnectARN)
        }
        if let quickConnectConfig = quickConnectConfig {
            try encodeContainer.encode(quickConnectConfig, forKey: .quickConnectConfig)
        }
        if let quickConnectId = quickConnectId {
            try encodeContainer.encode(quickConnectId, forKey: .quickConnectId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let quickConnectARNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .quickConnectARN)
        quickConnectARN = quickConnectARNDecoded
        let quickConnectIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .quickConnectId)
        quickConnectId = quickConnectIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let quickConnectConfigDecoded = try containerValues.decodeIfPresent(QuickConnectConfig.self, forKey: .quickConnectConfig)
        quickConnectConfig = quickConnectConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
