// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLambdaFunctionsOutputBody: Equatable {
    public let lambdaFunctions: [String]?
    public let nextToken: String?
}

extension ListLambdaFunctionsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case lambdaFunctions = "LambdaFunctions"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lambdaFunctionsContainer = try containerValues.decodeIfPresent([String].self, forKey: .lambdaFunctions)
        var lambdaFunctionsDecoded0:[String]? = nil
        if let lambdaFunctionsContainer = lambdaFunctionsContainer {
            lambdaFunctionsDecoded0 = [String]()
            for string0 in lambdaFunctionsContainer {
                lambdaFunctionsDecoded0?.append(string0)
            }
        }
        lambdaFunctions = lambdaFunctionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
