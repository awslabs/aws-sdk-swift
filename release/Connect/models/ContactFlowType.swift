// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum ContactFlowType {
    case agentHold
    case agentTransfer
    case agentWhisper
    case contactFlow
    case customerHold
    case customerQueue
    case customerWhisper
    case outboundWhisper
    case queueTransfer
    case sdkUnknown(String)
}

extension ContactFlowType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ContactFlowType] {
        return [
            .agentHold,
            .agentTransfer,
            .agentWhisper,
            .contactFlow,
            .customerHold,
            .customerQueue,
            .customerWhisper,
            .outboundWhisper,
            .queueTransfer,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .agentHold: return "AGENT_HOLD"
        case .agentTransfer: return "AGENT_TRANSFER"
        case .agentWhisper: return "AGENT_WHISPER"
        case .contactFlow: return "CONTACT_FLOW"
        case .customerHold: return "CUSTOMER_HOLD"
        case .customerQueue: return "CUSTOMER_QUEUE"
        case .customerWhisper: return "CUSTOMER_WHISPER"
        case .outboundWhisper: return "OUTBOUND_WHISPER"
        case .queueTransfer: return "QUEUE_TRANSFER"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ContactFlowType(rawValue: rawValue) ?? ContactFlowType.sdkUnknown(rawValue)
    }
}
