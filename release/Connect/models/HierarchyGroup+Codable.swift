// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HierarchyGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case hierarchyPath = "HierarchyPath"
        case id = "Id"
        case levelId = "LevelId"
        case name = "Name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let hierarchyPath = hierarchyPath {
            try encodeContainer.encode(hierarchyPath, forKey: .hierarchyPath)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let levelId = levelId {
            try encodeContainer.encode(levelId, forKey: .levelId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let levelIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .levelId)
        levelId = levelIdDecoded
        let hierarchyPathDecoded = try containerValues.decodeIfPresent(HierarchyPath.self, forKey: .hierarchyPath)
        hierarchyPath = hierarchyPathDecoded
    }
}
