// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListQueuesOutputBody: Equatable {
    public let queueSummaryList: [QueueSummary]?
    public let nextToken: String?
}

extension ListQueuesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case queueSummaryList = "QueueSummaryList"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueSummaryListContainer = try containerValues.decodeIfPresent([QueueSummary].self, forKey: .queueSummaryList)
        var queueSummaryListDecoded0:[QueueSummary]? = nil
        if let queueSummaryListContainer = queueSummaryListContainer {
            queueSummaryListDecoded0 = [QueueSummary]()
            for structure0 in queueSummaryListContainer {
                queueSummaryListDecoded0?.append(structure0)
            }
        }
        queueSummaryList = queueSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
