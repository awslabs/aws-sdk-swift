// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RoutingProfileQueueConfigSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case channel = "Channel"
        case delay = "Delay"
        case priority = "Priority"
        case queueArn = "QueueArn"
        case queueId = "QueueId"
        case queueName = "QueueName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channel = channel {
            try encodeContainer.encode(channel.rawValue, forKey: .channel)
        }
        if delay != 0 {
            try encodeContainer.encode(delay, forKey: .delay)
        }
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let queueArn = queueArn {
            try encodeContainer.encode(queueArn, forKey: .queueArn)
        }
        if let queueId = queueId {
            try encodeContainer.encode(queueId, forKey: .queueId)
        }
        if let queueName = queueName {
            try encodeContainer.encode(queueName, forKey: .queueName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queueIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queueId)
        queueId = queueIdDecoded
        let queueArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queueArn)
        queueArn = queueArnDecoded
        let queueNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .queueName)
        queueName = queueNameDecoded
        let priorityDecoded = try containerValues.decode(Int.self, forKey: .priority)
        priority = priorityDecoded
        let delayDecoded = try containerValues.decode(Int.self, forKey: .delay)
        delay = delayDecoded
        let channelDecoded = try containerValues.decodeIfPresent(Channel.self, forKey: .channel)
        channel = channelDecoded
    }
}
