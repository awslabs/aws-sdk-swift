// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstanceSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case createdTime = "CreatedTime"
        case id = "Id"
        case identityManagementType = "IdentityManagementType"
        case inboundCallsEnabled = "InboundCallsEnabled"
        case instanceAlias = "InstanceAlias"
        case instanceStatus = "InstanceStatus"
        case outboundCallsEnabled = "OutboundCallsEnabled"
        case serviceRole = "ServiceRole"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdTime = createdTime {
            try encodeContainer.encode(createdTime.timeIntervalSince1970, forKey: .createdTime)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let identityManagementType = identityManagementType {
            try encodeContainer.encode(identityManagementType.rawValue, forKey: .identityManagementType)
        }
        if let inboundCallsEnabled = inboundCallsEnabled {
            try encodeContainer.encode(inboundCallsEnabled, forKey: .inboundCallsEnabled)
        }
        if let instanceAlias = instanceAlias {
            try encodeContainer.encode(instanceAlias, forKey: .instanceAlias)
        }
        if let instanceStatus = instanceStatus {
            try encodeContainer.encode(instanceStatus.rawValue, forKey: .instanceStatus)
        }
        if let outboundCallsEnabled = outboundCallsEnabled {
            try encodeContainer.encode(outboundCallsEnabled, forKey: .outboundCallsEnabled)
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let identityManagementTypeDecoded = try containerValues.decodeIfPresent(DirectoryType.self, forKey: .identityManagementType)
        identityManagementType = identityManagementTypeDecoded
        let instanceAliasDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceAlias)
        instanceAlias = instanceAliasDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let instanceStatusDecoded = try containerValues.decodeIfPresent(InstanceStatus.self, forKey: .instanceStatus)
        instanceStatus = instanceStatusDecoded
        let inboundCallsEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .inboundCallsEnabled)
        inboundCallsEnabled = inboundCallsEnabledDecoded
        let outboundCallsEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .outboundCallsEnabled)
        outboundCallsEnabled = outboundCallsEnabledDecoded
    }
}
