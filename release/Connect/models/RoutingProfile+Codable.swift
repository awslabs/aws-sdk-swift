// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RoutingProfile: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case defaultOutboundQueueId = "DefaultOutboundQueueId"
        case description = "Description"
        case instanceId = "InstanceId"
        case mediaConcurrencies = "MediaConcurrencies"
        case name = "Name"
        case routingProfileArn = "RoutingProfileArn"
        case routingProfileId = "RoutingProfileId"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultOutboundQueueId = defaultOutboundQueueId {
            try encodeContainer.encode(defaultOutboundQueueId, forKey: .defaultOutboundQueueId)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let mediaConcurrencies = mediaConcurrencies {
            var mediaConcurrenciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mediaConcurrencies)
            for mediaconcurrencies0 in mediaConcurrencies {
                try mediaConcurrenciesContainer.encode(mediaconcurrencies0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let routingProfileArn = routingProfileArn {
            try encodeContainer.encode(routingProfileArn, forKey: .routingProfileArn)
        }
        if let routingProfileId = routingProfileId {
            try encodeContainer.encode(routingProfileId, forKey: .routingProfileId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let routingProfileArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .routingProfileArn)
        routingProfileArn = routingProfileArnDecoded
        let routingProfileIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .routingProfileId)
        routingProfileId = routingProfileIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let mediaConcurrenciesContainer = try containerValues.decodeIfPresent([MediaConcurrency].self, forKey: .mediaConcurrencies)
        var mediaConcurrenciesDecoded0:[MediaConcurrency]? = nil
        if let mediaConcurrenciesContainer = mediaConcurrenciesContainer {
            mediaConcurrenciesDecoded0 = [MediaConcurrency]()
            for structure0 in mediaConcurrenciesContainer {
                mediaConcurrenciesDecoded0?.append(structure0)
            }
        }
        mediaConcurrencies = mediaConcurrenciesDecoded0
        let defaultOutboundQueueIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultOutboundQueueId)
        defaultOutboundQueueId = defaultOutboundQueueIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
