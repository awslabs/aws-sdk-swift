// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListUseCasesOutputBody: Equatable {
    public let useCaseSummaryList: [UseCase]?
    public let nextToken: String?
}

extension ListUseCasesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case useCaseSummaryList = "UseCaseSummaryList"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let useCaseSummaryListContainer = try containerValues.decodeIfPresent([UseCase].self, forKey: .useCaseSummaryList)
        var useCaseSummaryListDecoded0:[UseCase]? = nil
        if let useCaseSummaryListContainer = useCaseSummaryListContainer {
            useCaseSummaryListDecoded0 = [UseCase]()
            for structure0 in useCaseSummaryListContainer {
                useCaseSummaryListDecoded0?.append(structure0)
            }
        }
        useCaseSummaryList = useCaseSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
