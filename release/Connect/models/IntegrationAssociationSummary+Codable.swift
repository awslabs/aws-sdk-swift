// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IntegrationAssociationSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case instanceId = "InstanceId"
        case integrationArn = "IntegrationArn"
        case integrationAssociationArn = "IntegrationAssociationArn"
        case integrationAssociationId = "IntegrationAssociationId"
        case integrationType = "IntegrationType"
        case sourceApplicationName = "SourceApplicationName"
        case sourceApplicationUrl = "SourceApplicationUrl"
        case sourceType = "SourceType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let integrationArn = integrationArn {
            try encodeContainer.encode(integrationArn, forKey: .integrationArn)
        }
        if let integrationAssociationArn = integrationAssociationArn {
            try encodeContainer.encode(integrationAssociationArn, forKey: .integrationAssociationArn)
        }
        if let integrationAssociationId = integrationAssociationId {
            try encodeContainer.encode(integrationAssociationId, forKey: .integrationAssociationId)
        }
        if let integrationType = integrationType {
            try encodeContainer.encode(integrationType.rawValue, forKey: .integrationType)
        }
        if let sourceApplicationName = sourceApplicationName {
            try encodeContainer.encode(sourceApplicationName, forKey: .sourceApplicationName)
        }
        if let sourceApplicationUrl = sourceApplicationUrl {
            try encodeContainer.encode(sourceApplicationUrl, forKey: .sourceApplicationUrl)
        }
        if let sourceType = sourceType {
            try encodeContainer.encode(sourceType.rawValue, forKey: .sourceType)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let integrationAssociationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .integrationAssociationId)
        integrationAssociationId = integrationAssociationIdDecoded
        let integrationAssociationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .integrationAssociationArn)
        integrationAssociationArn = integrationAssociationArnDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let integrationTypeDecoded = try containerValues.decodeIfPresent(IntegrationType.self, forKey: .integrationType)
        integrationType = integrationTypeDecoded
        let integrationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .integrationArn)
        integrationArn = integrationArnDecoded
        let sourceApplicationUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceApplicationUrl)
        sourceApplicationUrl = sourceApplicationUrlDecoded
        let sourceApplicationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceApplicationName)
        sourceApplicationName = sourceApplicationNameDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(SourceType.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
    }
}
