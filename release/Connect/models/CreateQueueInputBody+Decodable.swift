// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateQueueInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let outboundCallerConfig: OutboundCallerConfig?
    public let hoursOfOperationId: String?
    public let maxContacts: Int
    public let quickConnectIds: [String]?
    public let tags: [String:String]?
}

extension CreateQueueInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case hoursOfOperationId = "HoursOfOperationId"
        case maxContacts = "MaxContacts"
        case name = "Name"
        case outboundCallerConfig = "OutboundCallerConfig"
        case quickConnectIds = "QuickConnectIds"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let outboundCallerConfigDecoded = try containerValues.decodeIfPresent(OutboundCallerConfig.self, forKey: .outboundCallerConfig)
        outboundCallerConfig = outboundCallerConfigDecoded
        let hoursOfOperationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hoursOfOperationId)
        hoursOfOperationId = hoursOfOperationIdDecoded
        let maxContactsDecoded = try containerValues.decode(Int.self, forKey: .maxContacts)
        maxContacts = maxContactsDecoded
        let quickConnectIdsContainer = try containerValues.decodeIfPresent([String].self, forKey: .quickConnectIds)
        var quickConnectIdsDecoded0:[String]? = nil
        if let quickConnectIdsContainer = quickConnectIdsContainer {
            quickConnectIdsDecoded0 = [String]()
            for string0 in quickConnectIdsContainer {
                quickConnectIdsDecoded0?.append(string0)
            }
        }
        quickConnectIds = quickConnectIdsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
