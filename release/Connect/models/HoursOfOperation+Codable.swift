// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HoursOfOperation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case config = "Config"
        case description = "Description"
        case hoursOfOperationArn = "HoursOfOperationArn"
        case hoursOfOperationId = "HoursOfOperationId"
        case name = "Name"
        case tags = "Tags"
        case timeZone = "TimeZone"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let config = config {
            var configContainer = encodeContainer.nestedUnkeyedContainer(forKey: .config)
            for hoursofoperationconfiglist0 in config {
                try configContainer.encode(hoursofoperationconfiglist0)
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let hoursOfOperationArn = hoursOfOperationArn {
            try encodeContainer.encode(hoursOfOperationArn, forKey: .hoursOfOperationArn)
        }
        if let hoursOfOperationId = hoursOfOperationId {
            try encodeContainer.encode(hoursOfOperationId, forKey: .hoursOfOperationId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let timeZone = timeZone {
            try encodeContainer.encode(timeZone, forKey: .timeZone)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hoursOfOperationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hoursOfOperationId)
        hoursOfOperationId = hoursOfOperationIdDecoded
        let hoursOfOperationArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .hoursOfOperationArn)
        hoursOfOperationArn = hoursOfOperationArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let timeZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .timeZone)
        timeZone = timeZoneDecoded
        let configContainer = try containerValues.decodeIfPresent([HoursOfOperationConfig].self, forKey: .config)
        var configDecoded0:[HoursOfOperationConfig]? = nil
        if let configContainer = configContainer {
            configDecoded0 = [HoursOfOperationConfig]()
            for structure0 in configContainer {
                configDecoded0?.append(structure0)
            }
        }
        config = configDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
