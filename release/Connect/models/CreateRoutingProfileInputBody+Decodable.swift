// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateRoutingProfileInputBody: Equatable {
    public let name: String?
    public let description: String?
    public let defaultOutboundQueueId: String?
    public let queueConfigs: [RoutingProfileQueueConfig]?
    public let mediaConcurrencies: [MediaConcurrency]?
    public let tags: [String:String]?
}

extension CreateRoutingProfileInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case defaultOutboundQueueId = "DefaultOutboundQueueId"
        case description = "Description"
        case mediaConcurrencies = "MediaConcurrencies"
        case name = "Name"
        case queueConfigs = "QueueConfigs"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let defaultOutboundQueueIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultOutboundQueueId)
        defaultOutboundQueueId = defaultOutboundQueueIdDecoded
        let queueConfigsContainer = try containerValues.decodeIfPresent([RoutingProfileQueueConfig].self, forKey: .queueConfigs)
        var queueConfigsDecoded0:[RoutingProfileQueueConfig]? = nil
        if let queueConfigsContainer = queueConfigsContainer {
            queueConfigsDecoded0 = [RoutingProfileQueueConfig]()
            for structure0 in queueConfigsContainer {
                queueConfigsDecoded0?.append(structure0)
            }
        }
        queueConfigs = queueConfigsDecoded0
        let mediaConcurrenciesContainer = try containerValues.decodeIfPresent([MediaConcurrency].self, forKey: .mediaConcurrencies)
        var mediaConcurrenciesDecoded0:[MediaConcurrency]? = nil
        if let mediaConcurrenciesContainer = mediaConcurrenciesContainer {
            mediaConcurrenciesDecoded0 = [MediaConcurrency]()
            for structure0 in mediaConcurrenciesContainer {
                mediaConcurrenciesDecoded0?.append(structure0)
            }
        }
        mediaConcurrencies = mediaConcurrenciesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
