// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CurrentMetricResult: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case collections = "Collections"
        case dimensions = "Dimensions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collections = collections {
            var collectionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .collections)
            for currentmetricdatacollections0 in collections {
                try collectionsContainer.encode(currentmetricdatacollections0)
            }
        }
        if let dimensions = dimensions {
            try encodeContainer.encode(dimensions, forKey: .dimensions)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionsDecoded = try containerValues.decodeIfPresent(Dimensions.self, forKey: .dimensions)
        dimensions = dimensionsDecoded
        let collectionsContainer = try containerValues.decodeIfPresent([CurrentMetricData].self, forKey: .collections)
        var collectionsDecoded0:[CurrentMetricData]? = nil
        if let collectionsContainer = collectionsContainer {
            collectionsDecoded0 = [CurrentMetricData]()
            for structure0 in collectionsContainer {
                collectionsDecoded0?.append(structure0)
            }
        }
        collections = collectionsDecoded0
    }
}
