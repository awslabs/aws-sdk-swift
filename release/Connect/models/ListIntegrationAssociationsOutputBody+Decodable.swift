// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListIntegrationAssociationsOutputBody: Equatable {
    public let integrationAssociationSummaryList: [IntegrationAssociationSummary]?
    public let nextToken: String?
}

extension ListIntegrationAssociationsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case integrationAssociationSummaryList = "IntegrationAssociationSummaryList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let integrationAssociationSummaryListContainer = try containerValues.decodeIfPresent([IntegrationAssociationSummary].self, forKey: .integrationAssociationSummaryList)
        var integrationAssociationSummaryListDecoded0:[IntegrationAssociationSummary]? = nil
        if let integrationAssociationSummaryListContainer = integrationAssociationSummaryListContainer {
            integrationAssociationSummaryListDecoded0 = [IntegrationAssociationSummary]()
            for structure0 in integrationAssociationSummaryListContainer {
                integrationAssociationSummaryListDecoded0?.append(structure0)
            }
        }
        integrationAssociationSummaryList = integrationAssociationSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
