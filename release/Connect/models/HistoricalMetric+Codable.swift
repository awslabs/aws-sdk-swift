// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HistoricalMetric: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case statistic = "Statistic"
        case threshold = "Threshold"
        case unit = "Unit"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let statistic = statistic {
            try encodeContainer.encode(statistic.rawValue, forKey: .statistic)
        }
        if let threshold = threshold {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
        if let unit = unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(HistoricalMetricName.self, forKey: .name)
        name = nameDecoded
        let thresholdDecoded = try containerValues.decodeIfPresent(Threshold.self, forKey: .threshold)
        threshold = thresholdDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(Statistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let unitDecoded = try containerValues.decodeIfPresent(Unit.self, forKey: .unit)
        unit = unitDecoded
    }
}
