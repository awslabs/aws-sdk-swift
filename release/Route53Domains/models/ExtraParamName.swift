// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum ExtraParamName {
    case auIdNumber
    case auIdType
    case birthCity
    case birthCountry
    case birthDateInYyyyMmDd
    case birthDepartment
    case brandNumber
    case caBusinessEntityType
    case caLegalRepresentative
    case caLegalRepresentativeCapacity
    case caLegalType
    case documentNumber
    case dunsNumber
    case esIdentification
    case esIdentificationType
    case esLegalForm
    case fiBusinessNumber
    case fiNationality
    case fiOrganizationType
    case itNationality
    case itPin
    case itRegistrantEntityType
    case onwerFiIdNumber
    case ruPassportData
    case seIdNumber
    case sgIdNumber
    case ukCompanyNumber
    case ukContactType
    case vatNumber
    case sdkUnknown(String)
}

extension ExtraParamName : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ExtraParamName] {
        return [
            .auIdNumber,
            .auIdType,
            .birthCity,
            .birthCountry,
            .birthDateInYyyyMmDd,
            .birthDepartment,
            .brandNumber,
            .caBusinessEntityType,
            .caLegalRepresentative,
            .caLegalRepresentativeCapacity,
            .caLegalType,
            .documentNumber,
            .dunsNumber,
            .esIdentification,
            .esIdentificationType,
            .esLegalForm,
            .fiBusinessNumber,
            .fiNationality,
            .fiOrganizationType,
            .itNationality,
            .itPin,
            .itRegistrantEntityType,
            .onwerFiIdNumber,
            .ruPassportData,
            .seIdNumber,
            .sgIdNumber,
            .ukCompanyNumber,
            .ukContactType,
            .vatNumber,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .auIdNumber: return "AU_ID_NUMBER"
        case .auIdType: return "AU_ID_TYPE"
        case .birthCity: return "BIRTH_CITY"
        case .birthCountry: return "BIRTH_COUNTRY"
        case .birthDateInYyyyMmDd: return "BIRTH_DATE_IN_YYYY_MM_DD"
        case .birthDepartment: return "BIRTH_DEPARTMENT"
        case .brandNumber: return "BRAND_NUMBER"
        case .caBusinessEntityType: return "CA_BUSINESS_ENTITY_TYPE"
        case .caLegalRepresentative: return "CA_LEGAL_REPRESENTATIVE"
        case .caLegalRepresentativeCapacity: return "CA_LEGAL_REPRESENTATIVE_CAPACITY"
        case .caLegalType: return "CA_LEGAL_TYPE"
        case .documentNumber: return "DOCUMENT_NUMBER"
        case .dunsNumber: return "DUNS_NUMBER"
        case .esIdentification: return "ES_IDENTIFICATION"
        case .esIdentificationType: return "ES_IDENTIFICATION_TYPE"
        case .esLegalForm: return "ES_LEGAL_FORM"
        case .fiBusinessNumber: return "FI_BUSINESS_NUMBER"
        case .fiNationality: return "FI_NATIONALITY"
        case .fiOrganizationType: return "FI_ORGANIZATION_TYPE"
        case .itNationality: return "IT_NATIONALITY"
        case .itPin: return "IT_PIN"
        case .itRegistrantEntityType: return "IT_REGISTRANT_ENTITY_TYPE"
        case .onwerFiIdNumber: return "FI_ID_NUMBER"
        case .ruPassportData: return "RU_PASSPORT_DATA"
        case .seIdNumber: return "SE_ID_NUMBER"
        case .sgIdNumber: return "SG_ID_NUMBER"
        case .ukCompanyNumber: return "UK_COMPANY_NUMBER"
        case .ukContactType: return "UK_CONTACT_TYPE"
        case .vatNumber: return "VAT_NUMBER"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ExtraParamName(rawValue: rawValue) ?? ExtraParamName.sdkUnknown(rawValue)
    }
}
