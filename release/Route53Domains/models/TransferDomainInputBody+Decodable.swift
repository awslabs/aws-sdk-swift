// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct TransferDomainInputBody: Equatable {
    public let domainName: String?
    public let idnLangCode: String?
    public let durationInYears: Int?
    public let nameservers: [Nameserver]?
    public let authCode: String?
    public let autoRenew: Bool?
    public let adminContact: ContactDetail?
    public let registrantContact: ContactDetail?
    public let techContact: ContactDetail?
    public let privacyProtectAdminContact: Bool?
    public let privacyProtectRegistrantContact: Bool?
    public let privacyProtectTechContact: Bool?
}

extension TransferDomainInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case adminContact = "AdminContact"
        case authCode = "AuthCode"
        case autoRenew = "AutoRenew"
        case domainName = "DomainName"
        case durationInYears = "DurationInYears"
        case idnLangCode = "IdnLangCode"
        case nameservers = "Nameservers"
        case privacyProtectAdminContact = "PrivacyProtectAdminContact"
        case privacyProtectRegistrantContact = "PrivacyProtectRegistrantContact"
        case privacyProtectTechContact = "PrivacyProtectTechContact"
        case registrantContact = "RegistrantContact"
        case techContact = "TechContact"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let idnLangCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .idnLangCode)
        idnLangCode = idnLangCodeDecoded
        let durationInYearsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .durationInYears)
        durationInYears = durationInYearsDecoded
        let nameserversContainer = try containerValues.decodeIfPresent([Nameserver].self, forKey: .nameservers)
        var nameserversDecoded0:[Nameserver]? = nil
        if let nameserversContainer = nameserversContainer {
            nameserversDecoded0 = [Nameserver]()
            for structure0 in nameserversContainer {
                nameserversDecoded0?.append(structure0)
            }
        }
        nameservers = nameserversDecoded0
        let authCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .authCode)
        authCode = authCodeDecoded
        let autoRenewDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .autoRenew)
        autoRenew = autoRenewDecoded
        let adminContactDecoded = try containerValues.decodeIfPresent(ContactDetail.self, forKey: .adminContact)
        adminContact = adminContactDecoded
        let registrantContactDecoded = try containerValues.decodeIfPresent(ContactDetail.self, forKey: .registrantContact)
        registrantContact = registrantContactDecoded
        let techContactDecoded = try containerValues.decodeIfPresent(ContactDetail.self, forKey: .techContact)
        techContact = techContactDecoded
        let privacyProtectAdminContactDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .privacyProtectAdminContact)
        privacyProtectAdminContact = privacyProtectAdminContactDecoded
        let privacyProtectRegistrantContactDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .privacyProtectRegistrantContact)
        privacyProtectRegistrantContact = privacyProtectRegistrantContactDecoded
        let privacyProtectTechContactDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .privacyProtectTechContact)
        privacyProtectTechContact = privacyProtectTechContactDecoded
    }
}
