// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>The GetDomainDetail response includes the following elements.</p>
public struct GetDomainDetailOutput: Equatable {
    /// <p>Email address to contact to report incorrect contact information for a domain, to report that the domain
    /// 			is being used to send spam, to report that someone is cybersquatting on a domain name, or report some other type of abuse.</p>
    public let abuseContactEmail: String?
    /// <p>Phone number for reporting abuse.</p>
    public let abuseContactPhone: String?
    /// <p>Provides details about the domain administrative contact.</p>
    public let adminContact: ContactDetail?
    /// <p>Specifies whether contact information is concealed from WHOIS queries. If the value is <code>true</code>,
    /// 			WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains)
    /// 			or for our registrar associate, Gandi (for all other TLDs). If the value is <code>false</code>,
    /// 			WHOIS queries return the information that you entered for the admin contact.</p>
    public let adminPrivacy: Bool?
    /// <p>Specifies whether the domain registration is set to renew automatically.</p>
    public let autoRenew: Bool?
    /// <p>The date when the domain was created as found in the response to a WHOIS query. The date and time is in
    /// 			Unix time format and Coordinated Universal time (UTC).</p>
    public let creationDate: Date?
    /// <p>Reserved for future use.</p>
    public let dnsSec: String?
    /// <p>The name of a domain.</p>
    public let domainName: String?
    /// <p>The date when the registration for the domain is set to expire. The date and time is in
    /// 			Unix time format and Coordinated Universal time (UTC).</p>
    public let expirationDate: Date?
    /// <p>The name of the domain.</p>
    public let nameservers: [Nameserver]?
    /// <p>Provides details about the domain registrant.</p>
    public let registrantContact: ContactDetail?
    /// <p>Specifies whether contact information is concealed from WHOIS queries. If the value is <code>true</code>,
    /// 			WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains)
    /// 			or for our registrar associate, Gandi (for all other TLDs). If the value is <code>false</code>,
    /// 			WHOIS queries return the information that you entered for the registrant contact (domain owner).</p>
    public let registrantPrivacy: Bool?
    /// <p>Name of the registrar of the domain as identified in the registry. Domains with a .com, .net, or .org TLD are registered by
    /// 			Amazon Registrar. All other domains are registered by our registrar associate, Gandi. The value for domains that are registered by
    /// 			Gandi is <code>"GANDI SAS"</code>. </p>
    public let registrarName: String?
    /// <p>Web address of the registrar.</p>
    public let registrarUrl: String?
    /// <p>Reserved for future use.</p>
    public let registryDomainId: String?
    /// <p>Reseller of the domain. Domains registered or transferred using Route 53 domains will have <code>"Amazon"</code>
    /// 			as the reseller. </p>
    public let reseller: String?
    /// <p>An array of domain name status codes, also known as Extensible Provisioning Protocol (EPP) status codes.</p>
    /// 		       <p>ICANN, the organization that maintains a central database of domain names, has developed a set of domain name
    /// 			status codes that tell you the status of a variety of operations on a domain name, for example, registering a domain name,
    /// 			transferring a domain name to another registrar, renewing the registration for a domain name, and so on. All registrars
    /// 			use this same set of status codes.</p>
    /// 		       <p>For a current list of domain name status codes and an explanation of what each code means, go to the
    /// 			<a href="https://www.icann.org/">ICANN website</a> and search for <code>epp status codes</code>.
    /// 			(Search on the ICANN website; web searches sometimes return an old version of the document.)</p>
    public let statusList: [String]?
    /// <p>Provides details about the domain technical contact.</p>
    public let techContact: ContactDetail?
    /// <p>Specifies whether contact information is concealed from WHOIS queries. If the value is <code>true</code>,
    /// 			WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains)
    /// 			or for our registrar associate, Gandi (for all other TLDs). If the value is <code>false</code>,
    /// 			WHOIS queries return the information that you entered for the technical contact.</p>
    public let techPrivacy: Bool?
    /// <p>The last updated date of the domain as found in the response to a WHOIS query. The date and time is in
    /// 			Unix time format and Coordinated Universal time (UTC).</p>
    public let updatedDate: Date?
    /// <p>The fully qualified name of the WHOIS server that can answer the WHOIS query for the domain.</p>
    public let whoIsServer: String?

    public init (
        abuseContactEmail: String? = nil,
        abuseContactPhone: String? = nil,
        adminContact: ContactDetail? = nil,
        adminPrivacy: Bool? = nil,
        autoRenew: Bool? = nil,
        creationDate: Date? = nil,
        dnsSec: String? = nil,
        domainName: String? = nil,
        expirationDate: Date? = nil,
        nameservers: [Nameserver]? = nil,
        registrantContact: ContactDetail? = nil,
        registrantPrivacy: Bool? = nil,
        registrarName: String? = nil,
        registrarUrl: String? = nil,
        registryDomainId: String? = nil,
        reseller: String? = nil,
        statusList: [String]? = nil,
        techContact: ContactDetail? = nil,
        techPrivacy: Bool? = nil,
        updatedDate: Date? = nil,
        whoIsServer: String? = nil
    )
    {
        self.abuseContactEmail = abuseContactEmail
        self.abuseContactPhone = abuseContactPhone
        self.adminContact = adminContact
        self.adminPrivacy = adminPrivacy
        self.autoRenew = autoRenew
        self.creationDate = creationDate
        self.dnsSec = dnsSec
        self.domainName = domainName
        self.expirationDate = expirationDate
        self.nameservers = nameservers
        self.registrantContact = registrantContact
        self.registrantPrivacy = registrantPrivacy
        self.registrarName = registrarName
        self.registrarUrl = registrarUrl
        self.registryDomainId = registryDomainId
        self.reseller = reseller
        self.statusList = statusList
        self.techContact = techContact
        self.techPrivacy = techPrivacy
        self.updatedDate = updatedDate
        self.whoIsServer = whoIsServer
    }
}
