// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BillingRecord: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case billDate = "BillDate"
        case domainName = "DomainName"
        case invoiceId = "InvoiceId"
        case operation = "Operation"
        case price = "Price"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let billDate = billDate {
            try encodeContainer.encode(billDate.timeIntervalSince1970, forKey: .billDate)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let invoiceId = invoiceId {
            try encodeContainer.encode(invoiceId, forKey: .invoiceId)
        }
        if let operation = operation {
            try encodeContainer.encode(operation.rawValue, forKey: .operation)
        }
        if price != 0.0 {
            try encodeContainer.encode(price, forKey: .price)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let operationDecoded = try containerValues.decodeIfPresent(OperationType.self, forKey: .operation)
        operation = operationDecoded
        let invoiceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .invoiceId)
        invoiceId = invoiceIdDecoded
        let billDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .billDate)
        billDate = billDateDecoded
        let priceDecoded = try containerValues.decode(Double.self, forKey: .price)
        price = priceDecoded
    }
}
