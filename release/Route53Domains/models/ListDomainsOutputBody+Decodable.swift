// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDomainsOutputBody: Equatable {
    public let domains: [DomainSummary]?
    public let nextPageMarker: String?
}

extension ListDomainsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case domains = "Domains"
        case nextPageMarker = "NextPageMarker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainsContainer = try containerValues.decodeIfPresent([DomainSummary].self, forKey: .domains)
        var domainsDecoded0:[DomainSummary]? = nil
        if let domainsContainer = domainsContainer {
            domainsDecoded0 = [DomainSummary]()
            for structure0 in domainsContainer {
                domainsDecoded0?.append(structure0)
            }
        }
        domains = domainsDecoded0
        let nextPageMarkerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextPageMarker)
        nextPageMarker = nextPageMarkerDecoded
    }
}
