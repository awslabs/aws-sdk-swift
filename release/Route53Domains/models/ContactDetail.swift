// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>ContactDetail includes the following elements.</p>
public struct ContactDetail: Equatable {
    /// <p>First line of the contact's address.</p>
    public let addressLine1: String?
    /// <p>Second line of contact's address, if any.</p>
    public let addressLine2: String?
    /// <p>The city of the contact's address.</p>
    public let city: String?
    /// <p>Indicates whether the contact is a person, company, association, or public organization. Note the following:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>If you specify a value other than <code>PERSON</code>, you must also specify a value for
    /// 				<code>OrganizationName</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>For some TLDs, the privacy protection available depends on the value that you specify for
    /// 				<code>Contact Type</code>. For the privacy protection settings for your TLD, see
    /// 				<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains that You Can
    /// 					Register with Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>For .es domains, if you specify <code>PERSON</code>, you must specify <code>INDIVIDUAL</code>
    /// 				for the value of <code>ES_LEGAL_FORM</code>.</p>
    ///             </li>
    ///          </ul>
    public let contactType: ContactType?
    /// <p>Code for the country of the contact's address.</p>
    public let countryCode: CountryCode?
    /// <p>Email address of the contact.</p>
    public let email: String?
    /// <p>A list of name-value pairs for parameters required by certain top-level domains.</p>
    public let extraParams: [ExtraParam]?
    /// <p>Fax number of the contact.</p>
    /// 		       <p>Constraints: Phone number must be specified in the format "+[country dialing code].[number including any area code]".
    /// 			For example, a US phone number might appear as <code>"+1.1234567890"</code>.</p>
    public let fax: String?
    /// <p>First name of contact.</p>
    public let firstName: String?
    /// <p>Last name of contact.</p>
    public let lastName: String?
    /// <p>Name of the organization for contact types other than <code>PERSON</code>.</p>
    public let organizationName: String?
    /// <p>The phone number of the contact.</p>
    /// 		       <p>Constraints: Phone number must be specified in the format "+[country	dialing code].[number including any area code>]".
    /// 			For example, a US phone number might appear as <code>"+1.1234567890"</code>.</p>
    public let phoneNumber: String?
    /// <p>The state or province of the contact's city.</p>
    public let state: String?
    /// <p>The zip or postal code of the contact's address.</p>
    public let zipCode: String?

    public init (
        addressLine1: String? = nil,
        addressLine2: String? = nil,
        city: String? = nil,
        contactType: ContactType? = nil,
        countryCode: CountryCode? = nil,
        email: String? = nil,
        extraParams: [ExtraParam]? = nil,
        fax: String? = nil,
        firstName: String? = nil,
        lastName: String? = nil,
        organizationName: String? = nil,
        phoneNumber: String? = nil,
        state: String? = nil,
        zipCode: String? = nil
    )
    {
        self.addressLine1 = addressLine1
        self.addressLine2 = addressLine2
        self.city = city
        self.contactType = contactType
        self.countryCode = countryCode
        self.email = email
        self.extraParams = extraParams
        self.fax = fax
        self.firstName = firstName
        self.lastName = lastName
        self.organizationName = organizationName
        self.phoneNumber = phoneNumber
        self.state = state
        self.zipCode = zipCode
    }
}
