// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ContactDetail: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addressLine1 = "AddressLine1"
        case addressLine2 = "AddressLine2"
        case city = "City"
        case contactType = "ContactType"
        case countryCode = "CountryCode"
        case email = "Email"
        case extraParams = "ExtraParams"
        case fax = "Fax"
        case firstName = "FirstName"
        case lastName = "LastName"
        case organizationName = "OrganizationName"
        case phoneNumber = "PhoneNumber"
        case state = "State"
        case zipCode = "ZipCode"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addressLine1 = addressLine1 {
            try encodeContainer.encode(addressLine1, forKey: .addressLine1)
        }
        if let addressLine2 = addressLine2 {
            try encodeContainer.encode(addressLine2, forKey: .addressLine2)
        }
        if let city = city {
            try encodeContainer.encode(city, forKey: .city)
        }
        if let contactType = contactType {
            try encodeContainer.encode(contactType.rawValue, forKey: .contactType)
        }
        if let countryCode = countryCode {
            try encodeContainer.encode(countryCode.rawValue, forKey: .countryCode)
        }
        if let email = email {
            try encodeContainer.encode(email, forKey: .email)
        }
        if let extraParams = extraParams {
            var extraParamsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .extraParams)
            for extraparamlist0 in extraParams {
                try extraParamsContainer.encode(extraparamlist0)
            }
        }
        if let fax = fax {
            try encodeContainer.encode(fax, forKey: .fax)
        }
        if let firstName = firstName {
            try encodeContainer.encode(firstName, forKey: .firstName)
        }
        if let lastName = lastName {
            try encodeContainer.encode(lastName, forKey: .lastName)
        }
        if let organizationName = organizationName {
            try encodeContainer.encode(organizationName, forKey: .organizationName)
        }
        if let phoneNumber = phoneNumber {
            try encodeContainer.encode(phoneNumber, forKey: .phoneNumber)
        }
        if let state = state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let zipCode = zipCode {
            try encodeContainer.encode(zipCode, forKey: .zipCode)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firstNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .firstName)
        firstName = firstNameDecoded
        let lastNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastName)
        lastName = lastNameDecoded
        let contactTypeDecoded = try containerValues.decodeIfPresent(ContactType.self, forKey: .contactType)
        contactType = contactTypeDecoded
        let organizationNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .organizationName)
        organizationName = organizationNameDecoded
        let addressLine1Decoded = try containerValues.decodeIfPresent(String.self, forKey: .addressLine1)
        addressLine1 = addressLine1Decoded
        let addressLine2Decoded = try containerValues.decodeIfPresent(String.self, forKey: .addressLine2)
        addressLine2 = addressLine2Decoded
        let cityDecoded = try containerValues.decodeIfPresent(String.self, forKey: .city)
        city = cityDecoded
        let stateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .state)
        state = stateDecoded
        let countryCodeDecoded = try containerValues.decodeIfPresent(CountryCode.self, forKey: .countryCode)
        countryCode = countryCodeDecoded
        let zipCodeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .zipCode)
        zipCode = zipCodeDecoded
        let phoneNumberDecoded = try containerValues.decodeIfPresent(String.self, forKey: .phoneNumber)
        phoneNumber = phoneNumberDecoded
        let emailDecoded = try containerValues.decodeIfPresent(String.self, forKey: .email)
        email = emailDecoded
        let faxDecoded = try containerValues.decodeIfPresent(String.self, forKey: .fax)
        fax = faxDecoded
        let extraParamsContainer = try containerValues.decodeIfPresent([ExtraParam].self, forKey: .extraParams)
        var extraParamsDecoded0:[ExtraParam]? = nil
        if let extraParamsContainer = extraParamsContainer {
            extraParamsDecoded0 = [ExtraParam]()
            for structure0 in extraParamsContainer {
                extraParamsDecoded0?.append(structure0)
            }
        }
        extraParams = extraParamsDecoded0
    }
}
