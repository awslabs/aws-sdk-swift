// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OperationSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case operationId = "OperationId"
        case status = "Status"
        case submittedDate = "SubmittedDate"
        case type = "Type"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let operationId = operationId {
            try encodeContainer.encode(operationId, forKey: .operationId)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let submittedDate = submittedDate {
            try encodeContainer.encode(submittedDate.timeIntervalSince1970, forKey: .submittedDate)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .operationId)
        operationId = operationIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OperationStatus.self, forKey: .status)
        status = statusDecoded
        let typeDecoded = try containerValues.decodeIfPresent(OperationType.self, forKey: .type)
        type = typeDecoded
        let submittedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .submittedDate)
        submittedDate = submittedDateDecoded
    }
}
