// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RegisterDomainInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adminContact = "AdminContact"
        case autoRenew = "AutoRenew"
        case domainName = "DomainName"
        case durationInYears = "DurationInYears"
        case idnLangCode = "IdnLangCode"
        case privacyProtectAdminContact = "PrivacyProtectAdminContact"
        case privacyProtectRegistrantContact = "PrivacyProtectRegistrantContact"
        case privacyProtectTechContact = "PrivacyProtectTechContact"
        case registrantContact = "RegistrantContact"
        case techContact = "TechContact"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adminContact = adminContact {
            try encodeContainer.encode(adminContact, forKey: .adminContact)
        }
        if let autoRenew = autoRenew {
            try encodeContainer.encode(autoRenew, forKey: .autoRenew)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let durationInYears = durationInYears {
            try encodeContainer.encode(durationInYears, forKey: .durationInYears)
        }
        if let idnLangCode = idnLangCode {
            try encodeContainer.encode(idnLangCode, forKey: .idnLangCode)
        }
        if let privacyProtectAdminContact = privacyProtectAdminContact {
            try encodeContainer.encode(privacyProtectAdminContact, forKey: .privacyProtectAdminContact)
        }
        if let privacyProtectRegistrantContact = privacyProtectRegistrantContact {
            try encodeContainer.encode(privacyProtectRegistrantContact, forKey: .privacyProtectRegistrantContact)
        }
        if let privacyProtectTechContact = privacyProtectTechContact {
            try encodeContainer.encode(privacyProtectTechContact, forKey: .privacyProtectTechContact)
        }
        if let registrantContact = registrantContact {
            try encodeContainer.encode(registrantContact, forKey: .registrantContact)
        }
        if let techContact = techContact {
            try encodeContainer.encode(techContact, forKey: .techContact)
        }
    }
}
