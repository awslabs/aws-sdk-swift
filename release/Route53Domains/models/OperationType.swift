// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum OperationType {
    case addDnssec
    case changeDomainOwner
    case changePrivacyProtection
    case deleteDomain
    case disableAutorenew
    case domainLock
    case enableAutorenew
    case expireDomain
    case internalTransferInDomain
    case internalTransferOutDomain
    case pushDomain
    case registerDomain
    case removeDnssec
    case renewDomain
    case transferInDomain
    case transferOutDomain
    case updateDomainContact
    case updateNameserver
    case sdkUnknown(String)
}

extension OperationType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [OperationType] {
        return [
            .addDnssec,
            .changeDomainOwner,
            .changePrivacyProtection,
            .deleteDomain,
            .disableAutorenew,
            .domainLock,
            .enableAutorenew,
            .expireDomain,
            .internalTransferInDomain,
            .internalTransferOutDomain,
            .pushDomain,
            .registerDomain,
            .removeDnssec,
            .renewDomain,
            .transferInDomain,
            .transferOutDomain,
            .updateDomainContact,
            .updateNameserver,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .addDnssec: return "ADD_DNSSEC"
        case .changeDomainOwner: return "CHANGE_DOMAIN_OWNER"
        case .changePrivacyProtection: return "CHANGE_PRIVACY_PROTECTION"
        case .deleteDomain: return "DELETE_DOMAIN"
        case .disableAutorenew: return "DISABLE_AUTORENEW"
        case .domainLock: return "DOMAIN_LOCK"
        case .enableAutorenew: return "ENABLE_AUTORENEW"
        case .expireDomain: return "EXPIRE_DOMAIN"
        case .internalTransferInDomain: return "INTERNAL_TRANSFER_IN_DOMAIN"
        case .internalTransferOutDomain: return "INTERNAL_TRANSFER_OUT_DOMAIN"
        case .pushDomain: return "PUSH_DOMAIN"
        case .registerDomain: return "REGISTER_DOMAIN"
        case .removeDnssec: return "REMOVE_DNSSEC"
        case .renewDomain: return "RENEW_DOMAIN"
        case .transferInDomain: return "TRANSFER_IN_DOMAIN"
        case .transferOutDomain: return "TRANSFER_OUT_DOMAIN"
        case .updateDomainContact: return "UPDATE_DOMAIN_CONTACT"
        case .updateNameserver: return "UPDATE_NAMESERVER"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = OperationType(rawValue: rawValue) ?? OperationType.sdkUnknown(rawValue)
    }
}
