// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetDomainDetailOutputBody: Equatable {
    public let domainName: String?
    public let nameservers: [Nameserver]?
    public let autoRenew: Bool?
    public let adminContact: ContactDetail?
    public let registrantContact: ContactDetail?
    public let techContact: ContactDetail?
    public let adminPrivacy: Bool?
    public let registrantPrivacy: Bool?
    public let techPrivacy: Bool?
    public let registrarName: String?
    public let whoIsServer: String?
    public let registrarUrl: String?
    public let abuseContactEmail: String?
    public let abuseContactPhone: String?
    public let registryDomainId: String?
    public let creationDate: Date?
    public let updatedDate: Date?
    public let expirationDate: Date?
    public let reseller: String?
    public let dnsSec: String?
    public let statusList: [String]?
}

extension GetDomainDetailOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case abuseContactEmail = "AbuseContactEmail"
        case abuseContactPhone = "AbuseContactPhone"
        case adminContact = "AdminContact"
        case adminPrivacy = "AdminPrivacy"
        case autoRenew = "AutoRenew"
        case creationDate = "CreationDate"
        case dnsSec = "DnsSec"
        case domainName = "DomainName"
        case expirationDate = "ExpirationDate"
        case nameservers = "Nameservers"
        case registrantContact = "RegistrantContact"
        case registrantPrivacy = "RegistrantPrivacy"
        case registrarName = "RegistrarName"
        case registrarUrl = "RegistrarUrl"
        case registryDomainId = "RegistryDomainId"
        case reseller = "Reseller"
        case statusList = "StatusList"
        case techContact = "TechContact"
        case techPrivacy = "TechPrivacy"
        case updatedDate = "UpdatedDate"
        case whoIsServer = "WhoIsServer"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let nameserversContainer = try containerValues.decodeIfPresent([Nameserver].self, forKey: .nameservers)
        var nameserversDecoded0:[Nameserver]? = nil
        if let nameserversContainer = nameserversContainer {
            nameserversDecoded0 = [Nameserver]()
            for structure0 in nameserversContainer {
                nameserversDecoded0?.append(structure0)
            }
        }
        nameservers = nameserversDecoded0
        let autoRenewDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .autoRenew)
        autoRenew = autoRenewDecoded
        let adminContactDecoded = try containerValues.decodeIfPresent(ContactDetail.self, forKey: .adminContact)
        adminContact = adminContactDecoded
        let registrantContactDecoded = try containerValues.decodeIfPresent(ContactDetail.self, forKey: .registrantContact)
        registrantContact = registrantContactDecoded
        let techContactDecoded = try containerValues.decodeIfPresent(ContactDetail.self, forKey: .techContact)
        techContact = techContactDecoded
        let adminPrivacyDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .adminPrivacy)
        adminPrivacy = adminPrivacyDecoded
        let registrantPrivacyDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .registrantPrivacy)
        registrantPrivacy = registrantPrivacyDecoded
        let techPrivacyDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .techPrivacy)
        techPrivacy = techPrivacyDecoded
        let registrarNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .registrarName)
        registrarName = registrarNameDecoded
        let whoIsServerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .whoIsServer)
        whoIsServer = whoIsServerDecoded
        let registrarUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .registrarUrl)
        registrarUrl = registrarUrlDecoded
        let abuseContactEmailDecoded = try containerValues.decodeIfPresent(String.self, forKey: .abuseContactEmail)
        abuseContactEmail = abuseContactEmailDecoded
        let abuseContactPhoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .abuseContactPhone)
        abuseContactPhone = abuseContactPhoneDecoded
        let registryDomainIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .registryDomainId)
        registryDomainId = registryDomainIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let updatedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .updatedDate)
        updatedDate = updatedDateDecoded
        let expirationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .expirationDate)
        expirationDate = expirationDateDecoded
        let resellerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reseller)
        reseller = resellerDecoded
        let dnsSecDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dnsSec)
        dnsSec = dnsSecDecoded
        let statusListContainer = try containerValues.decodeIfPresent([String].self, forKey: .statusList)
        var statusListDecoded0:[String]? = nil
        if let statusListContainer = statusListContainer {
            statusListDecoded0 = [String]()
            for string0 in statusListContainer {
                statusListDecoded0?.append(string0)
            }
        }
        statusList = statusListDecoded0
    }
}
