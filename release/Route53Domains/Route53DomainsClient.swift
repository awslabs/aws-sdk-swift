// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation

public class Route53DomainsClient {
    let client: SdkHttpClient
    let config: Route53DomainsClientConfiguration
    let serviceName = "Route 53 Domains"
    let encoder: RequestEncoder
    let decoder: ResponseDecoder

    public init(config: Route53DomainsClientConfiguration) {
        client = SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        self.encoder = config.encoder ?? encoder
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public class Route53DomainsClientConfiguration: ClientRuntime.Configuration, AWSClientConfiguration {

        public var region: String
        public var credentialsProvider: AWSCredentialsProvider
        public var signingRegion: String
        public var endpointResolver: EndpointResolver

        public init (
            credentialsProvider: AWSCredentialsProvider,
            endpointResolver: EndpointResolver,
            region: String,
            signingRegion: String
        ) throws
        {
            self.credentialsProvider = credentialsProvider
            self.endpointResolver = endpointResolver
            self.region = region
            self.signingRegion = signingRegion
        }

        public convenience init(credentialsProvider: AWSCredentialsProvider) throws {
            let region = "us-east-1"
            let signingRegion = "us-east-1"
            let endpointResolver = DefaultEndpointResolver()
            try self.init(
                credentialsProvider: credentialsProvider,
                endpointResolver: endpointResolver,
                region: region,
                signingRegion: signingRegion
            )
        }

        public static func `default`() throws -> Route53DomainsClientConfiguration {
            let awsCredsProvider = try AWSCredentialsProvider.fromEnv()
            return try Route53DomainsClientConfiguration(credentialsProvider: awsCredsProvider)
        }
    }
}

extension Route53DomainsClient: Route53DomainsClientProtocol {
    /// <p>Accepts the transfer of a domain from another AWS account to the current AWS account. You initiate a transfer between AWS accounts using
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount</a>.
    /// 		</p>
    ///
    /// 		       <p>Use either
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html">ListOperations</a> or
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
    /// 			to determine whether the operation succeeded.
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
    /// 			provides additional information, for example, <code>Domain Transfer from Aws Account 111122223333 has been cancelled</code>.
    /// 		</p>
    public func acceptDomainTransferFromAnotherAwsAccount(input: AcceptDomainTransferFromAnotherAwsAccountInput, completion: @escaping (SdkResult<AcceptDomainTransferFromAnotherAwsAccountOutput, AcceptDomainTransferFromAnotherAwsAccountOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "acceptDomainTransferFromAnotherAwsAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<AcceptDomainTransferFromAnotherAwsAccountInput, AcceptDomainTransferFromAnotherAwsAccountOutput, AcceptDomainTransferFromAnotherAwsAccountOutputError>(id: "acceptDomainTransferFromAnotherAwsAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: AcceptDomainTransferFromAnotherAwsAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AcceptDomainTransferFromAnotherAwsAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<AcceptDomainTransferFromAnotherAwsAccountInput, AcceptDomainTransferFromAnotherAwsAccountOutput, AcceptDomainTransferFromAnotherAwsAccountOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: AcceptDomainTransferFromAnotherAwsAccountInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<AcceptDomainTransferFromAnotherAwsAccountInput, AcceptDomainTransferFromAnotherAwsAccountOutput, AcceptDomainTransferFromAnotherAwsAccountOutputError>(xAmzTarget: "Route53Domains_v20140515.AcceptDomainTransferFromAnotherAwsAccount"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Cancels the transfer of a domain from the current AWS account to another AWS account. You initiate a transfer between AWS accounts using
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount</a>.
    /// 		</p>
    /// 		
    /// 		       <important>
    /// 			         <p>You must cancel the transfer before the other AWS account accepts the transfer using
    /// 				<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AcceptDomainTransferFromAnotherAwsAccount.html">AcceptDomainTransferFromAnotherAwsAccount</a>.</p>
    /// 		       </important>
    /// 		
    /// 		       <p>Use either
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html">ListOperations</a> or
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
    /// 			to determine whether the operation succeeded.
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
    /// 			provides additional information, for example, <code>Domain Transfer from Aws Account 111122223333 has been cancelled</code>.
    /// 		</p>
    public func cancelDomainTransferToAnotherAwsAccount(input: CancelDomainTransferToAnotherAwsAccountInput, completion: @escaping (SdkResult<CancelDomainTransferToAnotherAwsAccountOutput, CancelDomainTransferToAnotherAwsAccountOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "cancelDomainTransferToAnotherAwsAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CancelDomainTransferToAnotherAwsAccountInput, CancelDomainTransferToAnotherAwsAccountOutput, CancelDomainTransferToAnotherAwsAccountOutputError>(id: "cancelDomainTransferToAnotherAwsAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CancelDomainTransferToAnotherAwsAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CancelDomainTransferToAnotherAwsAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CancelDomainTransferToAnotherAwsAccountInput, CancelDomainTransferToAnotherAwsAccountOutput, CancelDomainTransferToAnotherAwsAccountOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CancelDomainTransferToAnotherAwsAccountInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CancelDomainTransferToAnotherAwsAccountInput, CancelDomainTransferToAnotherAwsAccountOutput, CancelDomainTransferToAnotherAwsAccountOutputError>(xAmzTarget: "Route53Domains_v20140515.CancelDomainTransferToAnotherAwsAccount"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>This operation checks the availability of one domain name. Note that if the availability status of a domain is pending, you must
    /// 			submit another request to determine the availability of the domain name.</p>
    public func checkDomainAvailability(input: CheckDomainAvailabilityInput, completion: @escaping (SdkResult<CheckDomainAvailabilityOutput, CheckDomainAvailabilityOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "checkDomainAvailability")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CheckDomainAvailabilityInput, CheckDomainAvailabilityOutput, CheckDomainAvailabilityOutputError>(id: "checkDomainAvailability")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CheckDomainAvailabilityInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CheckDomainAvailabilityInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CheckDomainAvailabilityInput, CheckDomainAvailabilityOutput, CheckDomainAvailabilityOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CheckDomainAvailabilityInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CheckDomainAvailabilityInput, CheckDomainAvailabilityOutput, CheckDomainAvailabilityOutputError>(xAmzTarget: "Route53Domains_v20140515.CheckDomainAvailability"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Checks whether a domain name can be transferred to Amazon Route 53. </p>
    public func checkDomainTransferability(input: CheckDomainTransferabilityInput, completion: @escaping (SdkResult<CheckDomainTransferabilityOutput, CheckDomainTransferabilityOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "checkDomainTransferability")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CheckDomainTransferabilityInput, CheckDomainTransferabilityOutput, CheckDomainTransferabilityOutputError>(id: "checkDomainTransferability")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CheckDomainTransferabilityInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CheckDomainTransferabilityInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CheckDomainTransferabilityInput, CheckDomainTransferabilityOutput, CheckDomainTransferabilityOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CheckDomainTransferabilityInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CheckDomainTransferabilityInput, CheckDomainTransferabilityOutput, CheckDomainTransferabilityOutputError>(xAmzTarget: "Route53Domains_v20140515.CheckDomainTransferability"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>This operation deletes the specified tags for a domain.</p>
    /// 		       <p>All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.</p>
    public func deleteTagsForDomain(input: DeleteTagsForDomainInput, completion: @escaping (SdkResult<DeleteTagsForDomainOutput, DeleteTagsForDomainOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteTagsForDomain")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteTagsForDomainInput, DeleteTagsForDomainOutput, DeleteTagsForDomainOutputError>(id: "deleteTagsForDomain")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteTagsForDomainInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteTagsForDomainInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteTagsForDomainInput, DeleteTagsForDomainOutput, DeleteTagsForDomainOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeleteTagsForDomainInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeleteTagsForDomainInput, DeleteTagsForDomainOutput, DeleteTagsForDomainOutputError>(xAmzTarget: "Route53Domains_v20140515.DeleteTagsForDomain"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>This operation disables automatic renewal of domain registration for the specified domain.</p>
    public func disableDomainAutoRenew(input: DisableDomainAutoRenewInput, completion: @escaping (SdkResult<DisableDomainAutoRenewOutput, DisableDomainAutoRenewOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disableDomainAutoRenew")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisableDomainAutoRenewInput, DisableDomainAutoRenewOutput, DisableDomainAutoRenewOutputError>(id: "disableDomainAutoRenew")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisableDomainAutoRenewInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisableDomainAutoRenewInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisableDomainAutoRenewInput, DisableDomainAutoRenewOutput, DisableDomainAutoRenewOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DisableDomainAutoRenewInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DisableDomainAutoRenewInput, DisableDomainAutoRenewOutput, DisableDomainAutoRenewOutputError>(xAmzTarget: "Route53Domains_v20140515.DisableDomainAutoRenew"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>This operation removes the transfer lock on the domain (specifically the
    /// 			<code>clientTransferProhibited</code> status) to allow domain transfers. We recommend
    /// 			you refrain from performing this action unless you intend to transfer the domain to a
    /// 			different registrar. Successful submission returns an operation ID that you can use to track
    /// 			the progress and completion of the action. If the request is not completed successfully, the
    /// 			domain registrant will be notified by email.</p>
    public func disableDomainTransferLock(input: DisableDomainTransferLockInput, completion: @escaping (SdkResult<DisableDomainTransferLockOutput, DisableDomainTransferLockOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "disableDomainTransferLock")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DisableDomainTransferLockInput, DisableDomainTransferLockOutput, DisableDomainTransferLockOutputError>(id: "disableDomainTransferLock")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DisableDomainTransferLockInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DisableDomainTransferLockInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DisableDomainTransferLockInput, DisableDomainTransferLockOutput, DisableDomainTransferLockOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DisableDomainTransferLockInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DisableDomainTransferLockInput, DisableDomainTransferLockOutput, DisableDomainTransferLockOutputError>(xAmzTarget: "Route53Domains_v20140515.DisableDomainTransferLock"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>This operation configures Amazon Route 53 to automatically renew the specified domain before the domain registration expires.
    /// 			The cost of renewing your domain registration is billed to your AWS account.</p>
    /// 		       <p>The period during which you can renew a domain name varies by TLD. For a list of TLDs and their renewal policies, see
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains That You Can Register with Amazon Route 53</a>
    /// 			in the <i>Amazon Route 53 Developer Guide</i>. Route 53 requires that you renew before the end of the renewal period
    /// 			so we can complete processing before the deadline.</p>
    public func enableDomainAutoRenew(input: EnableDomainAutoRenewInput, completion: @escaping (SdkResult<EnableDomainAutoRenewOutput, EnableDomainAutoRenewOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "enableDomainAutoRenew")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<EnableDomainAutoRenewInput, EnableDomainAutoRenewOutput, EnableDomainAutoRenewOutputError>(id: "enableDomainAutoRenew")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: EnableDomainAutoRenewInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: EnableDomainAutoRenewInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<EnableDomainAutoRenewInput, EnableDomainAutoRenewOutput, EnableDomainAutoRenewOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: EnableDomainAutoRenewInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<EnableDomainAutoRenewInput, EnableDomainAutoRenewOutput, EnableDomainAutoRenewOutputError>(xAmzTarget: "Route53Domains_v20140515.EnableDomainAutoRenew"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>This operation sets the transfer lock on the domain (specifically the <code>clientTransferProhibited</code> status)
    /// 			to prevent domain transfers. Successful submission returns an operation ID that you can use to track the progress and
    /// 			completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.</p>
    public func enableDomainTransferLock(input: EnableDomainTransferLockInput, completion: @escaping (SdkResult<EnableDomainTransferLockOutput, EnableDomainTransferLockOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "enableDomainTransferLock")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<EnableDomainTransferLockInput, EnableDomainTransferLockOutput, EnableDomainTransferLockOutputError>(id: "enableDomainTransferLock")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: EnableDomainTransferLockInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: EnableDomainTransferLockInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<EnableDomainTransferLockInput, EnableDomainTransferLockOutput, EnableDomainTransferLockOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: EnableDomainTransferLockInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<EnableDomainTransferLockInput, EnableDomainTransferLockOutput, EnableDomainTransferLockOutputError>(xAmzTarget: "Route53Domains_v20140515.EnableDomainTransferLock"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>For operations that require confirmation that the email address for the registrant contact is valid,
    /// 			such as registering a new domain, this operation returns information about whether the registrant contact has responded.</p>
    /// 		       <p>If you want us to resend the email, use the <code>ResendContactReachabilityEmail</code> operation.</p>
    public func getContactReachabilityStatus(input: GetContactReachabilityStatusInput, completion: @escaping (SdkResult<GetContactReachabilityStatusOutput, GetContactReachabilityStatusOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getContactReachabilityStatus")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetContactReachabilityStatusInput, GetContactReachabilityStatusOutput, GetContactReachabilityStatusOutputError>(id: "getContactReachabilityStatus")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetContactReachabilityStatusInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetContactReachabilityStatusInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetContactReachabilityStatusInput, GetContactReachabilityStatusOutput, GetContactReachabilityStatusOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: GetContactReachabilityStatusInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<GetContactReachabilityStatusInput, GetContactReachabilityStatusOutput, GetContactReachabilityStatusOutputError>(xAmzTarget: "Route53Domains_v20140515.GetContactReachabilityStatus"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>This operation returns detailed information about a specified domain that is associated with the current AWS account.
    /// 			Contact information for the domain is also returned as part of the output.</p>
    public func getDomainDetail(input: GetDomainDetailInput, completion: @escaping (SdkResult<GetDomainDetailOutput, GetDomainDetailOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getDomainDetail")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetDomainDetailInput, GetDomainDetailOutput, GetDomainDetailOutputError>(id: "getDomainDetail")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetDomainDetailInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetDomainDetailInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetDomainDetailInput, GetDomainDetailOutput, GetDomainDetailOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: GetDomainDetailInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<GetDomainDetailInput, GetDomainDetailOutput, GetDomainDetailOutputError>(xAmzTarget: "Route53Domains_v20140515.GetDomainDetail"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>The GetDomainSuggestions operation returns a list of suggested domain names.</p>
    public func getDomainSuggestions(input: GetDomainSuggestionsInput, completion: @escaping (SdkResult<GetDomainSuggestionsOutput, GetDomainSuggestionsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getDomainSuggestions")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetDomainSuggestionsInput, GetDomainSuggestionsOutput, GetDomainSuggestionsOutputError>(id: "getDomainSuggestions")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetDomainSuggestionsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetDomainSuggestionsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetDomainSuggestionsInput, GetDomainSuggestionsOutput, GetDomainSuggestionsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: GetDomainSuggestionsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<GetDomainSuggestionsInput, GetDomainSuggestionsOutput, GetDomainSuggestionsOutputError>(xAmzTarget: "Route53Domains_v20140515.GetDomainSuggestions"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>This operation returns the current status of an operation that is not completed.</p>
    public func getOperationDetail(input: GetOperationDetailInput, completion: @escaping (SdkResult<GetOperationDetailOutput, GetOperationDetailOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getOperationDetail")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetOperationDetailInput, GetOperationDetailOutput, GetOperationDetailOutputError>(id: "getOperationDetail")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetOperationDetailInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetOperationDetailInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetOperationDetailInput, GetOperationDetailOutput, GetOperationDetailOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: GetOperationDetailInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<GetOperationDetailInput, GetOperationDetailOutput, GetOperationDetailOutputError>(xAmzTarget: "Route53Domains_v20140515.GetOperationDetail"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>This operation returns all the domain names registered with Amazon Route 53 for the current AWS account.</p>
    public func listDomains(input: ListDomainsInput, completion: @escaping (SdkResult<ListDomainsOutput, ListDomainsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listDomains")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListDomainsInput, ListDomainsOutput, ListDomainsOutputError>(id: "listDomains")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListDomainsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListDomainsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListDomainsInput, ListDomainsOutput, ListDomainsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListDomainsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListDomainsInput, ListDomainsOutput, ListDomainsOutputError>(xAmzTarget: "Route53Domains_v20140515.ListDomains"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns information about all of the operations that return an operation ID and that have ever been
    /// 			performed on domains that were registered by the current account. </p>
    public func listOperations(input: ListOperationsInput, completion: @escaping (SdkResult<ListOperationsOutput, ListOperationsOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listOperations")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListOperationsInput, ListOperationsOutput, ListOperationsOutputError>(id: "listOperations")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListOperationsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListOperationsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListOperationsInput, ListOperationsOutput, ListOperationsOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListOperationsInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListOperationsInput, ListOperationsOutput, ListOperationsOutputError>(xAmzTarget: "Route53Domains_v20140515.ListOperations"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>This operation returns all of the tags that are associated with the specified domain.</p>
    /// 		       <p>All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.</p>
    public func listTagsForDomain(input: ListTagsForDomainInput, completion: @escaping (SdkResult<ListTagsForDomainOutput, ListTagsForDomainOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listTagsForDomain")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListTagsForDomainInput, ListTagsForDomainOutput, ListTagsForDomainOutputError>(id: "listTagsForDomain")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForDomainInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForDomainInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListTagsForDomainInput, ListTagsForDomainOutput, ListTagsForDomainOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForDomainInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListTagsForDomainInput, ListTagsForDomainOutput, ListTagsForDomainOutputError>(xAmzTarget: "Route53Domains_v20140515.ListTagsForDomain"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>This operation registers a domain. Domains are registered either by Amazon Registrar (for .com, .net, and .org domains) or by
    /// 			our registrar associate, Gandi (for all other domains). For some top-level domains (TLDs), this operation requires extra parameters.</p>
    /// 		       <p>When you register a domain, Amazon Route 53 does the following:</p>
    /// 			      <ul>
    ///             <li>
    ///                <p>Creates a Route 53 hosted zone that has the same name as the domain. Route 53 assigns four name servers
    /// 					to your hosted zone and automatically updates your domain registration with the names of these name servers.</p>
    ///             </li>
    ///             <li>
    ///                <p>Enables autorenew, so your domain registration will renew automatically each year. We'll notify you
    /// 					in advance of the renewal date so you can choose whether to renew the registration.</p>
    ///             </li>
    ///             <li>
    ///                <p>Optionally enables privacy protection, so WHOIS queries return contact information either for Amazon Registrar
    /// 					(for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If you don't enable privacy
    /// 					protection, WHOIS queries return the information that you entered for the registrant, admin, and tech contacts.</p>
    ///             </li>
    ///             <li>
    ///                <p>If registration is successful, returns an operation ID that you can use to track the progress and
    /// 					completion of the action. If the request is not completed successfully, the domain registrant is notified by email.</p>
    ///             </li>
    ///             <li>
    ///                <p>Charges your AWS account an amount based on the top-level domain. For more information, see
    /// 					<a href="http://aws.amazon.com/route53/pricing/">Amazon Route 53 Pricing</a>.</p>
    ///             </li>
    ///          </ul>
    public func registerDomain(input: RegisterDomainInput, completion: @escaping (SdkResult<RegisterDomainOutput, RegisterDomainOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "registerDomain")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RegisterDomainInput, RegisterDomainOutput, RegisterDomainOutputError>(id: "registerDomain")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RegisterDomainInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RegisterDomainInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RegisterDomainInput, RegisterDomainOutput, RegisterDomainOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: RegisterDomainInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<RegisterDomainInput, RegisterDomainOutput, RegisterDomainOutputError>(xAmzTarget: "Route53Domains_v20140515.RegisterDomain"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Rejects the transfer of a domain from another AWS account to the current AWS account. You initiate a transfer between AWS accounts using
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount</a>.
    /// 		</p>
    /// 		
    /// 		       <p>Use either
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html">ListOperations</a> or
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
    /// 			to determine whether the operation succeeded.
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
    /// 			provides additional information, for example, <code>Domain Transfer from Aws Account 111122223333 has been cancelled</code>.
    /// 		</p>
    public func rejectDomainTransferFromAnotherAwsAccount(input: RejectDomainTransferFromAnotherAwsAccountInput, completion: @escaping (SdkResult<RejectDomainTransferFromAnotherAwsAccountOutput, RejectDomainTransferFromAnotherAwsAccountOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "rejectDomainTransferFromAnotherAwsAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RejectDomainTransferFromAnotherAwsAccountInput, RejectDomainTransferFromAnotherAwsAccountOutput, RejectDomainTransferFromAnotherAwsAccountOutputError>(id: "rejectDomainTransferFromAnotherAwsAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RejectDomainTransferFromAnotherAwsAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RejectDomainTransferFromAnotherAwsAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RejectDomainTransferFromAnotherAwsAccountInput, RejectDomainTransferFromAnotherAwsAccountOutput, RejectDomainTransferFromAnotherAwsAccountOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: RejectDomainTransferFromAnotherAwsAccountInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<RejectDomainTransferFromAnotherAwsAccountInput, RejectDomainTransferFromAnotherAwsAccountOutput, RejectDomainTransferFromAnotherAwsAccountOutputError>(xAmzTarget: "Route53Domains_v20140515.RejectDomainTransferFromAnotherAwsAccount"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>This operation renews a domain for the specified number of years. The cost of renewing your domain is billed to your AWS account.</p>
    /// 		       <p>We recommend that you renew your domain several weeks before the expiration date. Some TLD registries delete domains before the
    /// 			expiration date if you haven't renewed far enough in advance. For more information about renewing domain registration, see
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-renew.html">Renewing Registration for a Domain</a>
    /// 			in the <i>Amazon Route 53 Developer Guide</i>.</p>
    public func renewDomain(input: RenewDomainInput, completion: @escaping (SdkResult<RenewDomainOutput, RenewDomainOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "renewDomain")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RenewDomainInput, RenewDomainOutput, RenewDomainOutputError>(id: "renewDomain")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RenewDomainInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RenewDomainInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RenewDomainInput, RenewDomainOutput, RenewDomainOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: RenewDomainInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<RenewDomainInput, RenewDomainOutput, RenewDomainOutputError>(xAmzTarget: "Route53Domains_v20140515.RenewDomain"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>For operations that require confirmation that the email address for the registrant contact is valid,
    /// 			such as registering a new domain, this operation resends the confirmation email to the current email address for the registrant contact.</p>
    public func resendContactReachabilityEmail(input: ResendContactReachabilityEmailInput, completion: @escaping (SdkResult<ResendContactReachabilityEmailOutput, ResendContactReachabilityEmailOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "resendContactReachabilityEmail")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ResendContactReachabilityEmailInput, ResendContactReachabilityEmailOutput, ResendContactReachabilityEmailOutputError>(id: "resendContactReachabilityEmail")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ResendContactReachabilityEmailInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ResendContactReachabilityEmailInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ResendContactReachabilityEmailInput, ResendContactReachabilityEmailOutput, ResendContactReachabilityEmailOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ResendContactReachabilityEmailInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ResendContactReachabilityEmailInput, ResendContactReachabilityEmailOutput, ResendContactReachabilityEmailOutputError>(xAmzTarget: "Route53Domains_v20140515.ResendContactReachabilityEmail"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>This operation returns the AuthCode for the domain. To transfer a domain to another registrar, you provide this value to the new registrar.</p>
    public func retrieveDomainAuthCode(input: RetrieveDomainAuthCodeInput, completion: @escaping (SdkResult<RetrieveDomainAuthCodeOutput, RetrieveDomainAuthCodeOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "retrieveDomainAuthCode")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<RetrieveDomainAuthCodeInput, RetrieveDomainAuthCodeOutput, RetrieveDomainAuthCodeOutputError>(id: "retrieveDomainAuthCode")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: RetrieveDomainAuthCodeInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: RetrieveDomainAuthCodeInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<RetrieveDomainAuthCodeInput, RetrieveDomainAuthCodeOutput, RetrieveDomainAuthCodeOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: RetrieveDomainAuthCodeInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<RetrieveDomainAuthCodeInput, RetrieveDomainAuthCodeOutput, RetrieveDomainAuthCodeOutputError>(xAmzTarget: "Route53Domains_v20140515.RetrieveDomainAuthCode"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Transfers a domain from another registrar to Amazon Route 53. When the transfer is complete, the domain is registered either with
    /// 			Amazon Registrar (for .com, .net, and .org domains) or with our registrar associate, Gandi (for all other TLDs).</p>
    /// 		       <p>For more information about transferring domains, see the following topics:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>For transfer requirements, a detailed procedure, and information about viewing the status of a domain that you're transferring
    /// 				to Route 53, see
    /// 				<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-to-route-53.html">Transferring Registration for a
    /// 				Domain to Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
    ///             </li>
    ///             <li>
    ///                <p>For information about how to transfer a domain from one AWS account to another, see
    /// 				<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount</a>.
    /// 				</p>
    /// 			         </li>
    ///             <li>
    ///                <p>For information about how to transfer a domain to another domain registrar, see
    /// 				<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-from-route-53.html">Transferring a Domain from
    /// 				Amazon Route 53 to Another Registrar</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
    ///             </li>
    ///          </ul>
    /// 		       <p>If the registrar for your domain is also the DNS service provider for the domain, we highly recommend that you
    /// 			transfer your DNS service to Route 53 or to another DNS service provider before you transfer your registration. Some registrars
    /// 			provide free DNS service when you purchase a domain registration. When you transfer the registration, the previous registrar
    /// 			will not renew your domain registration and could end your DNS service at any time.</p>
    /// 		
    /// 			      <important>
    /// 				        <p>If the registrar for your domain is also the DNS service provider for the domain and you don't
    /// 					transfer DNS service to another provider, your website, email, and the web applications associated with the domain
    /// 					might become unavailable.</p>
    /// 			      </important>
    /// 		
    /// 		       <p>If the transfer is successful, this method returns an operation ID that you can use to track the progress and
    /// 			completion of the action. If the transfer doesn't complete successfully, the domain registrant will be notified by email.</p>
    public func transferDomain(input: TransferDomainInput, completion: @escaping (SdkResult<TransferDomainOutput, TransferDomainOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "transferDomain")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<TransferDomainInput, TransferDomainOutput, TransferDomainOutputError>(id: "transferDomain")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: TransferDomainInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: TransferDomainInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<TransferDomainInput, TransferDomainOutput, TransferDomainOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: TransferDomainInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<TransferDomainInput, TransferDomainOutput, TransferDomainOutputError>(xAmzTarget: "Route53Domains_v20140515.TransferDomain"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Transfers a domain from the current AWS account to another AWS account. Note the following:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>The AWS account that you're transferring the domain to must accept the transfer. If the other account
    /// 				doesn't accept the transfer within 3 days, we cancel the transfer. See
    /// 				<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AcceptDomainTransferFromAnotherAwsAccount.html">AcceptDomainTransferFromAnotherAwsAccount</a>.
    /// 				</p>
    /// 			         </li>
    ///             <li>
    ///                <p>You can cancel the transfer before the other account accepts it. See
    /// 				<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_CancelDomainTransferToAnotherAwsAccount.html">CancelDomainTransferToAnotherAwsAccount</a>.
    /// 				</p>
    /// 			         </li>
    ///             <li>
    ///                <p>The other account can reject the transfer. See
    /// 					<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_RejectDomainTransferFromAnotherAwsAccount.html">RejectDomainTransferFromAnotherAwsAccount</a>.
    /// 				</p>
    /// 			         </li>
    ///          </ul>
    /// 		
    /// 		       <important>
    /// 			         <p>When you transfer a domain from one AWS account to another, Route 53 doesn't transfer the hosted zone that is associated
    /// 				with the domain. DNS resolution isn't affected if the domain and the hosted zone are owned by separate accounts,
    /// 				so transferring the hosted zone is optional. For information about transferring the hosted zone to another AWS account, see
    /// 				<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zones-migrating.html">Migrating a Hosted Zone to a
    /// 				Different AWS Account</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
    /// 		       </important>
    /// 		
    /// 		       <p>Use either
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html">ListOperations</a> or
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
    /// 			to determine whether the operation succeeded.
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
    /// 			provides additional information, for example, <code>Domain Transfer from Aws Account 111122223333 has been cancelled</code>.
    /// 		</p>
    public func transferDomainToAnotherAwsAccount(input: TransferDomainToAnotherAwsAccountInput, completion: @escaping (SdkResult<TransferDomainToAnotherAwsAccountOutput, TransferDomainToAnotherAwsAccountOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "transferDomainToAnotherAwsAccount")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<TransferDomainToAnotherAwsAccountInput, TransferDomainToAnotherAwsAccountOutput, TransferDomainToAnotherAwsAccountOutputError>(id: "transferDomainToAnotherAwsAccount")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: TransferDomainToAnotherAwsAccountInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: TransferDomainToAnotherAwsAccountInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<TransferDomainToAnotherAwsAccountInput, TransferDomainToAnotherAwsAccountOutput, TransferDomainToAnotherAwsAccountOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: TransferDomainToAnotherAwsAccountInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<TransferDomainToAnotherAwsAccountInput, TransferDomainToAnotherAwsAccountOutput, TransferDomainToAnotherAwsAccountOutputError>(xAmzTarget: "Route53Domains_v20140515.TransferDomainToAnotherAwsAccount"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>This operation updates the contact information for a particular domain. You must specify information for at least one contact:
    /// 			registrant, administrator, or technical.</p>
    /// 		       <p>If the update is successful, this method returns an operation ID that you can use to track the progress and completion of the action.
    /// 			If the request is not completed successfully, the domain registrant will be notified by email.</p>
    public func updateDomainContact(input: UpdateDomainContactInput, completion: @escaping (SdkResult<UpdateDomainContactOutput, UpdateDomainContactOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateDomainContact")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateDomainContactInput, UpdateDomainContactOutput, UpdateDomainContactOutputError>(id: "updateDomainContact")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateDomainContactInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateDomainContactInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateDomainContactInput, UpdateDomainContactOutput, UpdateDomainContactOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateDomainContactInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UpdateDomainContactInput, UpdateDomainContactOutput, UpdateDomainContactOutputError>(xAmzTarget: "Route53Domains_v20140515.UpdateDomainContact"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>This operation updates the specified domain contact's privacy setting. When privacy protection is enabled,
    /// 			contact information such as email address is replaced either with contact information for Amazon Registrar (for .com, .net, and .org
    /// 			domains) or with contact information for our registrar associate, Gandi.</p>
    /// 		       <p>This operation affects only the contact information for the specified contact type (registrant, administrator, or tech).
    /// 			If the request succeeds, Amazon Route 53 returns an operation ID that you can use with
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a>
    /// 			to track the progress and completion of the action. If the request doesn't complete successfully, the domain registrant will be notified by email.</p>
    /// 		       <important>
    ///             <p>By disabling the privacy service via API, you consent to the publication of the contact information provided for this domain
    /// 			via the public WHOIS database. You certify that you are the registrant of this domain name and have the authority to make this decision.
    /// 			You may withdraw your consent at any time by enabling privacy protection using either <code>UpdateDomainContactPrivacy</code> or the
    /// 			Route 53 console. Enabling privacy protection removes the contact information provided for this domain from the WHOIS database.
    /// 			For more information on our privacy practices, see
    /// 			<a href="https://aws.amazon.com/privacy/">https://aws.amazon.com/privacy/</a>.</p>
    ///          </important>
    public func updateDomainContactPrivacy(input: UpdateDomainContactPrivacyInput, completion: @escaping (SdkResult<UpdateDomainContactPrivacyOutput, UpdateDomainContactPrivacyOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateDomainContactPrivacy")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateDomainContactPrivacyInput, UpdateDomainContactPrivacyOutput, UpdateDomainContactPrivacyOutputError>(id: "updateDomainContactPrivacy")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateDomainContactPrivacyInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateDomainContactPrivacyInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateDomainContactPrivacyInput, UpdateDomainContactPrivacyOutput, UpdateDomainContactPrivacyOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateDomainContactPrivacyInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UpdateDomainContactPrivacyInput, UpdateDomainContactPrivacyOutput, UpdateDomainContactPrivacyOutputError>(xAmzTarget: "Route53Domains_v20140515.UpdateDomainContactPrivacy"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>This operation replaces the current set of name servers for the domain with the specified set of name servers.
    /// 			If you use Amazon Route 53 as your DNS service, specify the four name servers in the delegation set for the hosted zone for the domain.</p>
    /// 		       <p>If successful, this operation returns an operation ID that you can use to track the progress and completion of the action.
    /// 			If the request is not completed successfully, the domain registrant will be notified by email.</p>
    public func updateDomainNameservers(input: UpdateDomainNameserversInput, completion: @escaping (SdkResult<UpdateDomainNameserversOutput, UpdateDomainNameserversOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateDomainNameservers")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateDomainNameserversInput, UpdateDomainNameserversOutput, UpdateDomainNameserversOutputError>(id: "updateDomainNameservers")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateDomainNameserversInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateDomainNameserversInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateDomainNameserversInput, UpdateDomainNameserversOutput, UpdateDomainNameserversOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateDomainNameserversInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UpdateDomainNameserversInput, UpdateDomainNameserversOutput, UpdateDomainNameserversOutputError>(xAmzTarget: "Route53Domains_v20140515.UpdateDomainNameservers"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>This operation adds or updates tags for a specified domain.</p>
    /// 		       <p>All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.</p>
    public func updateTagsForDomain(input: UpdateTagsForDomainInput, completion: @escaping (SdkResult<UpdateTagsForDomainOutput, UpdateTagsForDomainOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateTagsForDomain")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateTagsForDomainInput, UpdateTagsForDomainOutput, UpdateTagsForDomainOutputError>(id: "updateTagsForDomain")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateTagsForDomainInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateTagsForDomainInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateTagsForDomainInput, UpdateTagsForDomainOutput, UpdateTagsForDomainOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateTagsForDomainInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UpdateTagsForDomainInput, UpdateTagsForDomainOutput, UpdateTagsForDomainOutputError>(xAmzTarget: "Route53Domains_v20140515.UpdateTagsForDomain"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// <p>Returns all the domain-related billing records for the current AWS account for a specified period</p>
    public func viewBilling(input: ViewBillingInput, completion: @escaping (SdkResult<ViewBillingOutput, ViewBillingOutputError>) -> Void)
    {
        let urlPath = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: urlPath)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "viewBilling")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "route53domains.\(config.region).amazonaws.com")
                      .withSigningName(value: "route53domains")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ViewBillingInput, ViewBillingOutput, ViewBillingOutputError>(id: "viewBilling")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ViewBillingInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ViewBillingInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ViewBillingInput, ViewBillingOutput, ViewBillingOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ViewBillingInputBodyMiddleware())
        operation.deserializeStep.intercept(position: .before, middleware: LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after, middleware: RetrierMiddleware(retrier: config.retrier))
        let sigv4Config = SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before,
                                                 middleware: SigV4Middleware(config: sigv4Config))
        operation.buildStep.intercept(position: .before, middleware: UserAgentMiddleware(metadata: AWSUserAgentMetadata.fromEnv(apiMetadata: APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ViewBillingInput, ViewBillingOutput, ViewBillingOutputError>(xAmzTarget: "Route53Domains_v20140515.ViewBilling"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
