// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeCertificatesOutputBody: Equatable {
    public let marker: String?
    public let certificates: [Certificate]?
}

extension DescribeCertificatesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case certificates = "Certificates"
        case marker = "Marker"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
        let certificatesContainer = try containerValues.decodeIfPresent([Certificate].self, forKey: .certificates)
        var certificatesDecoded0:[Certificate]? = nil
        if let certificatesContainer = certificatesContainer {
            certificatesDecoded0 = [Certificate]()
            for structure0 in certificatesContainer {
                certificatesDecoded0?.append(structure0)
            }
        }
        certificates = certificatesDecoded0
    }
}
