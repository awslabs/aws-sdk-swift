// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum DatePartitionSequenceValue {
    case ddmmyyyy
    case mmyyyydd
    case yyyymm
    case yyyymmdd
    case yyyymmddhh
    case sdkUnknown(String)
}

extension DatePartitionSequenceValue : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DatePartitionSequenceValue] {
        return [
            .ddmmyyyy,
            .mmyyyydd,
            .yyyymm,
            .yyyymmdd,
            .yyyymmddhh,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .ddmmyyyy: return "DDMMYYYY"
        case .mmyyyydd: return "MMYYYYDD"
        case .yyyymm: return "YYYYMM"
        case .yyyymmdd: return "YYYYMMDD"
        case .yyyymmddhh: return "YYYYMMDDHH"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DatePartitionSequenceValue(rawValue: rawValue) ?? DatePartitionSequenceValue.sdkUnknown(rawValue)
    }
}
