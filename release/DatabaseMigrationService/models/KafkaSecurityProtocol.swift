// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum KafkaSecurityProtocol {
    case plaintext
    case saslSsl
    case sslAuthentication
    case sslEncryption
    case sdkUnknown(String)
}

extension KafkaSecurityProtocol : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [KafkaSecurityProtocol] {
        return [
            .plaintext,
            .saslSsl,
            .sslAuthentication,
            .sslEncryption,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .plaintext: return "plaintext"
        case .saslSsl: return "sasl-ssl"
        case .sslAuthentication: return "ssl-authentication"
        case .sslEncryption: return "ssl-encryption"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = KafkaSecurityProtocol(rawValue: rawValue) ?? KafkaSecurityProtocol.sdkUnknown(rawValue)
    }
}
