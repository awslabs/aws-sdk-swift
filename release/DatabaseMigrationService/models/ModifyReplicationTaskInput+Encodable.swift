// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ModifyReplicationTaskInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cdcStartPosition = "CdcStartPosition"
        case cdcStartTime = "CdcStartTime"
        case cdcStopPosition = "CdcStopPosition"
        case migrationType = "MigrationType"
        case replicationTaskArn = "ReplicationTaskArn"
        case replicationTaskIdentifier = "ReplicationTaskIdentifier"
        case replicationTaskSettings = "ReplicationTaskSettings"
        case tableMappings = "TableMappings"
        case taskData = "TaskData"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cdcStartPosition = cdcStartPosition {
            try encodeContainer.encode(cdcStartPosition, forKey: .cdcStartPosition)
        }
        if let cdcStartTime = cdcStartTime {
            try encodeContainer.encode(cdcStartTime.timeIntervalSince1970, forKey: .cdcStartTime)
        }
        if let cdcStopPosition = cdcStopPosition {
            try encodeContainer.encode(cdcStopPosition, forKey: .cdcStopPosition)
        }
        if let migrationType = migrationType {
            try encodeContainer.encode(migrationType.rawValue, forKey: .migrationType)
        }
        if let replicationTaskArn = replicationTaskArn {
            try encodeContainer.encode(replicationTaskArn, forKey: .replicationTaskArn)
        }
        if let replicationTaskIdentifier = replicationTaskIdentifier {
            try encodeContainer.encode(replicationTaskIdentifier, forKey: .replicationTaskIdentifier)
        }
        if let replicationTaskSettings = replicationTaskSettings {
            try encodeContainer.encode(replicationTaskSettings, forKey: .replicationTaskSettings)
        }
        if let tableMappings = tableMappings {
            try encodeContainer.encode(tableMappings, forKey: .tableMappings)
        }
        if let taskData = taskData {
            try encodeContainer.encode(taskData, forKey: .taskData)
        }
    }
}
