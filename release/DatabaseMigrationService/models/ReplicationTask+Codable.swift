// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ReplicationTask: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cdcStartPosition = "CdcStartPosition"
        case cdcStopPosition = "CdcStopPosition"
        case lastFailureMessage = "LastFailureMessage"
        case migrationType = "MigrationType"
        case recoveryCheckpoint = "RecoveryCheckpoint"
        case replicationInstanceArn = "ReplicationInstanceArn"
        case replicationTaskArn = "ReplicationTaskArn"
        case replicationTaskCreationDate = "ReplicationTaskCreationDate"
        case replicationTaskIdentifier = "ReplicationTaskIdentifier"
        case replicationTaskSettings = "ReplicationTaskSettings"
        case replicationTaskStartDate = "ReplicationTaskStartDate"
        case replicationTaskStats = "ReplicationTaskStats"
        case sourceEndpointArn = "SourceEndpointArn"
        case status = "Status"
        case stopReason = "StopReason"
        case tableMappings = "TableMappings"
        case targetEndpointArn = "TargetEndpointArn"
        case targetReplicationInstanceArn = "TargetReplicationInstanceArn"
        case taskData = "TaskData"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cdcStartPosition = cdcStartPosition {
            try encodeContainer.encode(cdcStartPosition, forKey: .cdcStartPosition)
        }
        if let cdcStopPosition = cdcStopPosition {
            try encodeContainer.encode(cdcStopPosition, forKey: .cdcStopPosition)
        }
        if let lastFailureMessage = lastFailureMessage {
            try encodeContainer.encode(lastFailureMessage, forKey: .lastFailureMessage)
        }
        if let migrationType = migrationType {
            try encodeContainer.encode(migrationType.rawValue, forKey: .migrationType)
        }
        if let recoveryCheckpoint = recoveryCheckpoint {
            try encodeContainer.encode(recoveryCheckpoint, forKey: .recoveryCheckpoint)
        }
        if let replicationInstanceArn = replicationInstanceArn {
            try encodeContainer.encode(replicationInstanceArn, forKey: .replicationInstanceArn)
        }
        if let replicationTaskArn = replicationTaskArn {
            try encodeContainer.encode(replicationTaskArn, forKey: .replicationTaskArn)
        }
        if let replicationTaskCreationDate = replicationTaskCreationDate {
            try encodeContainer.encode(replicationTaskCreationDate.timeIntervalSince1970, forKey: .replicationTaskCreationDate)
        }
        if let replicationTaskIdentifier = replicationTaskIdentifier {
            try encodeContainer.encode(replicationTaskIdentifier, forKey: .replicationTaskIdentifier)
        }
        if let replicationTaskSettings = replicationTaskSettings {
            try encodeContainer.encode(replicationTaskSettings, forKey: .replicationTaskSettings)
        }
        if let replicationTaskStartDate = replicationTaskStartDate {
            try encodeContainer.encode(replicationTaskStartDate.timeIntervalSince1970, forKey: .replicationTaskStartDate)
        }
        if let replicationTaskStats = replicationTaskStats {
            try encodeContainer.encode(replicationTaskStats, forKey: .replicationTaskStats)
        }
        if let sourceEndpointArn = sourceEndpointArn {
            try encodeContainer.encode(sourceEndpointArn, forKey: .sourceEndpointArn)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let stopReason = stopReason {
            try encodeContainer.encode(stopReason, forKey: .stopReason)
        }
        if let tableMappings = tableMappings {
            try encodeContainer.encode(tableMappings, forKey: .tableMappings)
        }
        if let targetEndpointArn = targetEndpointArn {
            try encodeContainer.encode(targetEndpointArn, forKey: .targetEndpointArn)
        }
        if let targetReplicationInstanceArn = targetReplicationInstanceArn {
            try encodeContainer.encode(targetReplicationInstanceArn, forKey: .targetReplicationInstanceArn)
        }
        if let taskData = taskData {
            try encodeContainer.encode(taskData, forKey: .taskData)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationTaskIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replicationTaskIdentifier)
        replicationTaskIdentifier = replicationTaskIdentifierDecoded
        let sourceEndpointArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceEndpointArn)
        sourceEndpointArn = sourceEndpointArnDecoded
        let targetEndpointArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetEndpointArn)
        targetEndpointArn = targetEndpointArnDecoded
        let replicationInstanceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replicationInstanceArn)
        replicationInstanceArn = replicationInstanceArnDecoded
        let migrationTypeDecoded = try containerValues.decodeIfPresent(MigrationTypeValue.self, forKey: .migrationType)
        migrationType = migrationTypeDecoded
        let tableMappingsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableMappings)
        tableMappings = tableMappingsDecoded
        let replicationTaskSettingsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replicationTaskSettings)
        replicationTaskSettings = replicationTaskSettingsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let lastFailureMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastFailureMessage)
        lastFailureMessage = lastFailureMessageDecoded
        let stopReasonDecoded = try containerValues.decodeIfPresent(String.self, forKey: .stopReason)
        stopReason = stopReasonDecoded
        let replicationTaskCreationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .replicationTaskCreationDate)
        replicationTaskCreationDate = replicationTaskCreationDateDecoded
        let replicationTaskStartDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .replicationTaskStartDate)
        replicationTaskStartDate = replicationTaskStartDateDecoded
        let cdcStartPositionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cdcStartPosition)
        cdcStartPosition = cdcStartPositionDecoded
        let cdcStopPositionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .cdcStopPosition)
        cdcStopPosition = cdcStopPositionDecoded
        let recoveryCheckpointDecoded = try containerValues.decodeIfPresent(String.self, forKey: .recoveryCheckpoint)
        recoveryCheckpoint = recoveryCheckpointDecoded
        let replicationTaskArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replicationTaskArn)
        replicationTaskArn = replicationTaskArnDecoded
        let replicationTaskStatsDecoded = try containerValues.decodeIfPresent(ReplicationTaskStats.self, forKey: .replicationTaskStats)
        replicationTaskStats = replicationTaskStatsDecoded
        let taskDataDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskData)
        taskData = taskDataDecoded
        let targetReplicationInstanceArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetReplicationInstanceArn)
        targetReplicationInstanceArn = targetReplicationInstanceArnDecoded
    }
}
