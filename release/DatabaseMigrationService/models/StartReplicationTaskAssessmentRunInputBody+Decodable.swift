// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartReplicationTaskAssessmentRunInputBody: Equatable {
    public let replicationTaskArn: String?
    public let serviceAccessRoleArn: String?
    public let resultLocationBucket: String?
    public let resultLocationFolder: String?
    public let resultEncryptionMode: String?
    public let resultKmsKeyArn: String?
    public let assessmentRunName: String?
    public let includeOnly: [String]?
    public let exclude: [String]?
}

extension StartReplicationTaskAssessmentRunInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case assessmentRunName = "AssessmentRunName"
        case exclude = "Exclude"
        case includeOnly = "IncludeOnly"
        case replicationTaskArn = "ReplicationTaskArn"
        case resultEncryptionMode = "ResultEncryptionMode"
        case resultKmsKeyArn = "ResultKmsKeyArn"
        case resultLocationBucket = "ResultLocationBucket"
        case resultLocationFolder = "ResultLocationFolder"
        case serviceAccessRoleArn = "ServiceAccessRoleArn"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationTaskArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replicationTaskArn)
        replicationTaskArn = replicationTaskArnDecoded
        let serviceAccessRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceAccessRoleArn)
        serviceAccessRoleArn = serviceAccessRoleArnDecoded
        let resultLocationBucketDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resultLocationBucket)
        resultLocationBucket = resultLocationBucketDecoded
        let resultLocationFolderDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resultLocationFolder)
        resultLocationFolder = resultLocationFolderDecoded
        let resultEncryptionModeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resultEncryptionMode)
        resultEncryptionMode = resultEncryptionModeDecoded
        let resultKmsKeyArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resultKmsKeyArn)
        resultKmsKeyArn = resultKmsKeyArnDecoded
        let assessmentRunNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .assessmentRunName)
        assessmentRunName = assessmentRunNameDecoded
        let includeOnlyContainer = try containerValues.decodeIfPresent([String].self, forKey: .includeOnly)
        var includeOnlyDecoded0:[String]? = nil
        if let includeOnlyContainer = includeOnlyContainer {
            includeOnlyDecoded0 = [String]()
            for string0 in includeOnlyContainer {
                includeOnlyDecoded0?.append(string0)
            }
        }
        includeOnly = includeOnlyDecoded0
        let excludeContainer = try containerValues.decodeIfPresent([String].self, forKey: .exclude)
        var excludeDecoded0:[String]? = nil
        if let excludeContainer = excludeContainer {
            excludeDecoded0 = [String]()
            for string0 in excludeContainer {
                excludeDecoded0?.append(string0)
            }
        }
        exclude = excludeDecoded0
    }
}
