// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Endpoint: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case certificateArn = "CertificateArn"
        case databaseName = "DatabaseName"
        case dmsTransferSettings = "DmsTransferSettings"
        case docDbSettings = "DocDbSettings"
        case dynamoDbSettings = "DynamoDbSettings"
        case elasticsearchSettings = "ElasticsearchSettings"
        case endpointArn = "EndpointArn"
        case endpointIdentifier = "EndpointIdentifier"
        case endpointType = "EndpointType"
        case engineDisplayName = "EngineDisplayName"
        case engineName = "EngineName"
        case externalId = "ExternalId"
        case externalTableDefinition = "ExternalTableDefinition"
        case extraConnectionAttributes = "ExtraConnectionAttributes"
        case iBMDb2Settings = "IBMDb2Settings"
        case kafkaSettings = "KafkaSettings"
        case kinesisSettings = "KinesisSettings"
        case kmsKeyId = "KmsKeyId"
        case microsoftSQLServerSettings = "MicrosoftSQLServerSettings"
        case mongoDbSettings = "MongoDbSettings"
        case mySQLSettings = "MySQLSettings"
        case neptuneSettings = "NeptuneSettings"
        case oracleSettings = "OracleSettings"
        case port = "Port"
        case postgreSQLSettings = "PostgreSQLSettings"
        case redshiftSettings = "RedshiftSettings"
        case s3Settings = "S3Settings"
        case serverName = "ServerName"
        case serviceAccessRoleArn = "ServiceAccessRoleArn"
        case sslMode = "SslMode"
        case status = "Status"
        case sybaseSettings = "SybaseSettings"
        case username = "Username"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let dmsTransferSettings = dmsTransferSettings {
            try encodeContainer.encode(dmsTransferSettings, forKey: .dmsTransferSettings)
        }
        if let docDbSettings = docDbSettings {
            try encodeContainer.encode(docDbSettings, forKey: .docDbSettings)
        }
        if let dynamoDbSettings = dynamoDbSettings {
            try encodeContainer.encode(dynamoDbSettings, forKey: .dynamoDbSettings)
        }
        if let elasticsearchSettings = elasticsearchSettings {
            try encodeContainer.encode(elasticsearchSettings, forKey: .elasticsearchSettings)
        }
        if let endpointArn = endpointArn {
            try encodeContainer.encode(endpointArn, forKey: .endpointArn)
        }
        if let endpointIdentifier = endpointIdentifier {
            try encodeContainer.encode(endpointIdentifier, forKey: .endpointIdentifier)
        }
        if let endpointType = endpointType {
            try encodeContainer.encode(endpointType.rawValue, forKey: .endpointType)
        }
        if let engineDisplayName = engineDisplayName {
            try encodeContainer.encode(engineDisplayName, forKey: .engineDisplayName)
        }
        if let engineName = engineName {
            try encodeContainer.encode(engineName, forKey: .engineName)
        }
        if let externalId = externalId {
            try encodeContainer.encode(externalId, forKey: .externalId)
        }
        if let externalTableDefinition = externalTableDefinition {
            try encodeContainer.encode(externalTableDefinition, forKey: .externalTableDefinition)
        }
        if let extraConnectionAttributes = extraConnectionAttributes {
            try encodeContainer.encode(extraConnectionAttributes, forKey: .extraConnectionAttributes)
        }
        if let iBMDb2Settings = iBMDb2Settings {
            try encodeContainer.encode(iBMDb2Settings, forKey: .iBMDb2Settings)
        }
        if let kafkaSettings = kafkaSettings {
            try encodeContainer.encode(kafkaSettings, forKey: .kafkaSettings)
        }
        if let kinesisSettings = kinesisSettings {
            try encodeContainer.encode(kinesisSettings, forKey: .kinesisSettings)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let microsoftSQLServerSettings = microsoftSQLServerSettings {
            try encodeContainer.encode(microsoftSQLServerSettings, forKey: .microsoftSQLServerSettings)
        }
        if let mongoDbSettings = mongoDbSettings {
            try encodeContainer.encode(mongoDbSettings, forKey: .mongoDbSettings)
        }
        if let mySQLSettings = mySQLSettings {
            try encodeContainer.encode(mySQLSettings, forKey: .mySQLSettings)
        }
        if let neptuneSettings = neptuneSettings {
            try encodeContainer.encode(neptuneSettings, forKey: .neptuneSettings)
        }
        if let oracleSettings = oracleSettings {
            try encodeContainer.encode(oracleSettings, forKey: .oracleSettings)
        }
        if let port = port {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let postgreSQLSettings = postgreSQLSettings {
            try encodeContainer.encode(postgreSQLSettings, forKey: .postgreSQLSettings)
        }
        if let redshiftSettings = redshiftSettings {
            try encodeContainer.encode(redshiftSettings, forKey: .redshiftSettings)
        }
        if let s3Settings = s3Settings {
            try encodeContainer.encode(s3Settings, forKey: .s3Settings)
        }
        if let serverName = serverName {
            try encodeContainer.encode(serverName, forKey: .serverName)
        }
        if let serviceAccessRoleArn = serviceAccessRoleArn {
            try encodeContainer.encode(serviceAccessRoleArn, forKey: .serviceAccessRoleArn)
        }
        if let sslMode = sslMode {
            try encodeContainer.encode(sslMode.rawValue, forKey: .sslMode)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let sybaseSettings = sybaseSettings {
            try encodeContainer.encode(sybaseSettings, forKey: .sybaseSettings)
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointIdentifier)
        endpointIdentifier = endpointIdentifierDecoded
        let endpointTypeDecoded = try containerValues.decodeIfPresent(ReplicationEndpointTypeValue.self, forKey: .endpointType)
        endpointType = endpointTypeDecoded
        let engineNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineName)
        engineName = engineNameDecoded
        let engineDisplayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineDisplayName)
        engineDisplayName = engineDisplayNameDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .username)
        username = usernameDecoded
        let serverNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serverName)
        serverName = serverNameDecoded
        let portDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .port)
        port = portDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let extraConnectionAttributesDecoded = try containerValues.decodeIfPresent(String.self, forKey: .extraConnectionAttributes)
        extraConnectionAttributes = extraConnectionAttributesDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let endpointArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointArn)
        endpointArn = endpointArnDecoded
        let certificateArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let sslModeDecoded = try containerValues.decodeIfPresent(DmsSslModeValue.self, forKey: .sslMode)
        sslMode = sslModeDecoded
        let serviceAccessRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceAccessRoleArn)
        serviceAccessRoleArn = serviceAccessRoleArnDecoded
        let externalTableDefinitionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .externalTableDefinition)
        externalTableDefinition = externalTableDefinitionDecoded
        let externalIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .externalId)
        externalId = externalIdDecoded
        let dynamoDbSettingsDecoded = try containerValues.decodeIfPresent(DynamoDbSettings.self, forKey: .dynamoDbSettings)
        dynamoDbSettings = dynamoDbSettingsDecoded
        let s3SettingsDecoded = try containerValues.decodeIfPresent(S3Settings.self, forKey: .s3Settings)
        s3Settings = s3SettingsDecoded
        let dmsTransferSettingsDecoded = try containerValues.decodeIfPresent(DmsTransferSettings.self, forKey: .dmsTransferSettings)
        dmsTransferSettings = dmsTransferSettingsDecoded
        let mongoDbSettingsDecoded = try containerValues.decodeIfPresent(MongoDbSettings.self, forKey: .mongoDbSettings)
        mongoDbSettings = mongoDbSettingsDecoded
        let kinesisSettingsDecoded = try containerValues.decodeIfPresent(KinesisSettings.self, forKey: .kinesisSettings)
        kinesisSettings = kinesisSettingsDecoded
        let kafkaSettingsDecoded = try containerValues.decodeIfPresent(KafkaSettings.self, forKey: .kafkaSettings)
        kafkaSettings = kafkaSettingsDecoded
        let elasticsearchSettingsDecoded = try containerValues.decodeIfPresent(ElasticsearchSettings.self, forKey: .elasticsearchSettings)
        elasticsearchSettings = elasticsearchSettingsDecoded
        let neptuneSettingsDecoded = try containerValues.decodeIfPresent(NeptuneSettings.self, forKey: .neptuneSettings)
        neptuneSettings = neptuneSettingsDecoded
        let redshiftSettingsDecoded = try containerValues.decodeIfPresent(RedshiftSettings.self, forKey: .redshiftSettings)
        redshiftSettings = redshiftSettingsDecoded
        let postgreSQLSettingsDecoded = try containerValues.decodeIfPresent(PostgreSQLSettings.self, forKey: .postgreSQLSettings)
        postgreSQLSettings = postgreSQLSettingsDecoded
        let mySQLSettingsDecoded = try containerValues.decodeIfPresent(MySQLSettings.self, forKey: .mySQLSettings)
        mySQLSettings = mySQLSettingsDecoded
        let oracleSettingsDecoded = try containerValues.decodeIfPresent(OracleSettings.self, forKey: .oracleSettings)
        oracleSettings = oracleSettingsDecoded
        let sybaseSettingsDecoded = try containerValues.decodeIfPresent(SybaseSettings.self, forKey: .sybaseSettings)
        sybaseSettings = sybaseSettingsDecoded
        let microsoftSQLServerSettingsDecoded = try containerValues.decodeIfPresent(MicrosoftSQLServerSettings.self, forKey: .microsoftSQLServerSettings)
        microsoftSQLServerSettings = microsoftSQLServerSettingsDecoded
        let iBMDb2SettingsDecoded = try containerValues.decodeIfPresent(IBMDb2Settings.self, forKey: .iBMDb2Settings)
        iBMDb2Settings = iBMDb2SettingsDecoded
        let docDbSettingsDecoded = try containerValues.decodeIfPresent(DocDbSettings.self, forKey: .docDbSettings)
        docDbSettings = docDbSettingsDecoded
    }
}
