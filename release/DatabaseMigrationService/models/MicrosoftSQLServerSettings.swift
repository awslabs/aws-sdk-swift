// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Provides information that defines a Microsoft SQL Server endpoint.</p>
public struct MicrosoftSQLServerSettings: Equatable {
    /// <p>The maximum size of the packets (in bytes) used to transfer
    ///          data using BCP.</p>
    public let bcpPacketSize: Int?
    /// <p>Specifies a file group for the AWS DMS internal tables. When the replication task
    ///          starts, all the internal AWS DMS control tables (awsdms_ apply_exception, awsdms_apply,
    ///          awsdms_changes) are created for the specified file group.</p>
    public let controlTablesFileGroup: String?
    /// <p>Database name for the endpoint.</p>
    public let databaseName: String?
    /// <p>Endpoint connection password.</p>
    public let password: String?
    /// <p>Endpoint TCP port.</p>
    public let port: Int?
    /// <p>Cleans and recreates table metadata information on the replication instance when
    ///          a mismatch occurs. An example is a situation where running an alter DDL statement on
    ///          a table might result in different information about the table cached in the replication
    ///          instance.</p>
    public let querySingleAlwaysOnNode: Bool?
    /// <p>When this attribute is set to <code>Y</code>, AWS DMS only reads changes
    ///          from transaction log backups and doesn't read from the
    ///          active transaction log file during ongoing replication. Setting
    ///          this parameter to <code>Y</code> enables you to control active transaction
    ///          log file growth during full load and ongoing replication
    ///          tasks. However, it can add some source latency to ongoing
    ///          replication.</p>
    public let readBackupOnly: Bool?
    /// <p>Use this attribute to minimize the need to access the
    ///          backup log and enable AWS DMS to prevent truncation using one of the
    ///          following two methods.</p>
    ///          <p>
    ///             <i>Start transactions in the database:</i> This is the default
    ///          method. When this method is used, AWS DMS prevents
    ///          TLOG truncation by mimicking a transaction in the database.
    ///          As long as such a transaction is open, changes that appear
    ///          after the transaction started aren't truncated. If you need
    ///          Microsoft Replication to be enabled in your database, then
    ///          you must choose this method.</p>
    ///          <p>
    ///             <i>Exclusively use sp_repldone within a single task</i>: When
    ///          this method is used, AWS DMS reads the changes and then
    ///          uses sp_repldone to mark the TLOG transactions as ready
    ///          for truncation. Although this method doesn't involve any
    ///          transactional activities, it can only be used when Microsoft
    ///          Replication isn't running. Also, when using this method, only
    ///          one AWS DMS task can access the database at any given
    ///          time. Therefore, if you need to run parallel AWS DMS tasks
    ///          against the same database, use the default method.</p>
    public let safeguardPolicy: SafeguardPolicy?
    /// <p>The full Amazon Resource Name (ARN) of the IAM role that specifies AWS DMS as the
    ///          trusted entity and grants the required permissions to access the value in
    ///             <code>SecretsManagerSecret</code>. <code>SecretsManagerSecret</code> has the value of the AWS Secrets
    ///          Manager secret that allows access to the SQL Server endpoint.</p>
    ///          <note>
    ///             <p>You can specify one of two sets of values for these permissions. You can specify the
    ///             values for this setting and <code>SecretsManagerSecretId</code>. Or you can specify
    ///             clear-text values for <code>UserName</code>, <code>Password</code>,
    ///                <code>ServerName</code>, and <code>Port</code>. You can't specify both. For more
    ///             information on creating this <code>SecretsManagerSecret</code> and the
    ///                <code>SecretsManagerAccessRoleArn</code> and <code>SecretsManagerSecretId</code>
    ///             required to access it, see <a href="https://docs.aws.amazon.com/https:/docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#security-iam-secretsmanager">Using secrets to access AWS Database Migration Service
    ///                resources</a> in the <i>AWS Database Migration Service User
    ///                Guide</i>.</p>
    ///          </note>
    public let secretsManagerAccessRoleArn: String?
    /// <p>The full ARN, partial ARN, or friendly name of the <code>SecretsManagerSecret</code> that contains the SQL Server endpoint connection details.</p>
    public let secretsManagerSecretId: String?
    /// <p>Fully qualified domain name of the endpoint.</p>
    public let serverName: String?
    /// <p>Use this to attribute to transfer data for full-load operations
    ///          using BCP. When the target table contains an identity
    ///          column that does not exist in the source table, you must
    ///          disable the use BCP for loading table option.</p>
    public let useBcpFullLoad: Bool?
    /// <p>When this attribute is set to <code>Y</code>, DMS processes third-party
    ///          transaction log backups if they are created in native format.</p>
    public let useThirdPartyBackupDevice: Bool?
    /// <p>Endpoint connection user name.</p>
    public let username: String?

    public init (
        bcpPacketSize: Int? = nil,
        controlTablesFileGroup: String? = nil,
        databaseName: String? = nil,
        password: String? = nil,
        port: Int? = nil,
        querySingleAlwaysOnNode: Bool? = nil,
        readBackupOnly: Bool? = nil,
        safeguardPolicy: SafeguardPolicy? = nil,
        secretsManagerAccessRoleArn: String? = nil,
        secretsManagerSecretId: String? = nil,
        serverName: String? = nil,
        useBcpFullLoad: Bool? = nil,
        useThirdPartyBackupDevice: Bool? = nil,
        username: String? = nil
    )
    {
        self.bcpPacketSize = bcpPacketSize
        self.controlTablesFileGroup = controlTablesFileGroup
        self.databaseName = databaseName
        self.password = password
        self.port = port
        self.querySingleAlwaysOnNode = querySingleAlwaysOnNode
        self.readBackupOnly = readBackupOnly
        self.safeguardPolicy = safeguardPolicy
        self.secretsManagerAccessRoleArn = secretsManagerAccessRoleArn
        self.secretsManagerSecretId = secretsManagerSecretId
        self.serverName = serverName
        self.useBcpFullLoad = useBcpFullLoad
        self.useThirdPartyBackupDevice = useThirdPartyBackupDevice
        self.username = username
    }
}
