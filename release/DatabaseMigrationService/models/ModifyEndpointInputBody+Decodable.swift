// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyEndpointInputBody: Equatable {
    public let endpointArn: String?
    public let endpointIdentifier: String?
    public let endpointType: ReplicationEndpointTypeValue?
    public let engineName: String?
    public let username: String?
    public let password: String?
    public let serverName: String?
    public let port: Int?
    public let databaseName: String?
    public let extraConnectionAttributes: String?
    public let certificateArn: String?
    public let sslMode: DmsSslModeValue?
    public let serviceAccessRoleArn: String?
    public let externalTableDefinition: String?
    public let dynamoDbSettings: DynamoDbSettings?
    public let s3Settings: S3Settings?
    public let dmsTransferSettings: DmsTransferSettings?
    public let mongoDbSettings: MongoDbSettings?
    public let kinesisSettings: KinesisSettings?
    public let kafkaSettings: KafkaSettings?
    public let elasticsearchSettings: ElasticsearchSettings?
    public let neptuneSettings: NeptuneSettings?
    public let redshiftSettings: RedshiftSettings?
    public let postgreSQLSettings: PostgreSQLSettings?
    public let mySQLSettings: MySQLSettings?
    public let oracleSettings: OracleSettings?
    public let sybaseSettings: SybaseSettings?
    public let microsoftSQLServerSettings: MicrosoftSQLServerSettings?
    public let iBMDb2Settings: IBMDb2Settings?
    public let docDbSettings: DocDbSettings?
}

extension ModifyEndpointInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case certificateArn = "CertificateArn"
        case databaseName = "DatabaseName"
        case dmsTransferSettings = "DmsTransferSettings"
        case docDbSettings = "DocDbSettings"
        case dynamoDbSettings = "DynamoDbSettings"
        case elasticsearchSettings = "ElasticsearchSettings"
        case endpointArn = "EndpointArn"
        case endpointIdentifier = "EndpointIdentifier"
        case endpointType = "EndpointType"
        case engineName = "EngineName"
        case externalTableDefinition = "ExternalTableDefinition"
        case extraConnectionAttributes = "ExtraConnectionAttributes"
        case iBMDb2Settings = "IBMDb2Settings"
        case kafkaSettings = "KafkaSettings"
        case kinesisSettings = "KinesisSettings"
        case microsoftSQLServerSettings = "MicrosoftSQLServerSettings"
        case mongoDbSettings = "MongoDbSettings"
        case mySQLSettings = "MySQLSettings"
        case neptuneSettings = "NeptuneSettings"
        case oracleSettings = "OracleSettings"
        case password = "Password"
        case port = "Port"
        case postgreSQLSettings = "PostgreSQLSettings"
        case redshiftSettings = "RedshiftSettings"
        case s3Settings = "S3Settings"
        case serverName = "ServerName"
        case serviceAccessRoleArn = "ServiceAccessRoleArn"
        case sslMode = "SslMode"
        case sybaseSettings = "SybaseSettings"
        case username = "Username"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointArn)
        endpointArn = endpointArnDecoded
        let endpointIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endpointIdentifier)
        endpointIdentifier = endpointIdentifierDecoded
        let endpointTypeDecoded = try containerValues.decodeIfPresent(ReplicationEndpointTypeValue.self, forKey: .endpointType)
        endpointType = endpointTypeDecoded
        let engineNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .engineName)
        engineName = engineNameDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .username)
        username = usernameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .password)
        password = passwordDecoded
        let serverNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serverName)
        serverName = serverNameDecoded
        let portDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .port)
        port = portDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let extraConnectionAttributesDecoded = try containerValues.decodeIfPresent(String.self, forKey: .extraConnectionAttributes)
        extraConnectionAttributes = extraConnectionAttributesDecoded
        let certificateArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let sslModeDecoded = try containerValues.decodeIfPresent(DmsSslModeValue.self, forKey: .sslMode)
        sslMode = sslModeDecoded
        let serviceAccessRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceAccessRoleArn)
        serviceAccessRoleArn = serviceAccessRoleArnDecoded
        let externalTableDefinitionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .externalTableDefinition)
        externalTableDefinition = externalTableDefinitionDecoded
        let dynamoDbSettingsDecoded = try containerValues.decodeIfPresent(DynamoDbSettings.self, forKey: .dynamoDbSettings)
        dynamoDbSettings = dynamoDbSettingsDecoded
        let s3SettingsDecoded = try containerValues.decodeIfPresent(S3Settings.self, forKey: .s3Settings)
        s3Settings = s3SettingsDecoded
        let dmsTransferSettingsDecoded = try containerValues.decodeIfPresent(DmsTransferSettings.self, forKey: .dmsTransferSettings)
        dmsTransferSettings = dmsTransferSettingsDecoded
        let mongoDbSettingsDecoded = try containerValues.decodeIfPresent(MongoDbSettings.self, forKey: .mongoDbSettings)
        mongoDbSettings = mongoDbSettingsDecoded
        let kinesisSettingsDecoded = try containerValues.decodeIfPresent(KinesisSettings.self, forKey: .kinesisSettings)
        kinesisSettings = kinesisSettingsDecoded
        let kafkaSettingsDecoded = try containerValues.decodeIfPresent(KafkaSettings.self, forKey: .kafkaSettings)
        kafkaSettings = kafkaSettingsDecoded
        let elasticsearchSettingsDecoded = try containerValues.decodeIfPresent(ElasticsearchSettings.self, forKey: .elasticsearchSettings)
        elasticsearchSettings = elasticsearchSettingsDecoded
        let neptuneSettingsDecoded = try containerValues.decodeIfPresent(NeptuneSettings.self, forKey: .neptuneSettings)
        neptuneSettings = neptuneSettingsDecoded
        let redshiftSettingsDecoded = try containerValues.decodeIfPresent(RedshiftSettings.self, forKey: .redshiftSettings)
        redshiftSettings = redshiftSettingsDecoded
        let postgreSQLSettingsDecoded = try containerValues.decodeIfPresent(PostgreSQLSettings.self, forKey: .postgreSQLSettings)
        postgreSQLSettings = postgreSQLSettingsDecoded
        let mySQLSettingsDecoded = try containerValues.decodeIfPresent(MySQLSettings.self, forKey: .mySQLSettings)
        mySQLSettings = mySQLSettingsDecoded
        let oracleSettingsDecoded = try containerValues.decodeIfPresent(OracleSettings.self, forKey: .oracleSettings)
        oracleSettings = oracleSettingsDecoded
        let sybaseSettingsDecoded = try containerValues.decodeIfPresent(SybaseSettings.self, forKey: .sybaseSettings)
        sybaseSettings = sybaseSettingsDecoded
        let microsoftSQLServerSettingsDecoded = try containerValues.decodeIfPresent(MicrosoftSQLServerSettings.self, forKey: .microsoftSQLServerSettings)
        microsoftSQLServerSettings = microsoftSQLServerSettingsDecoded
        let iBMDb2SettingsDecoded = try containerValues.decodeIfPresent(IBMDb2Settings.self, forKey: .iBMDb2Settings)
        iBMDb2Settings = iBMDb2SettingsDecoded
        let docDbSettingsDecoded = try containerValues.decodeIfPresent(DocDbSettings.self, forKey: .docDbSettings)
        docDbSettings = docDbSettingsDecoded
    }
}
