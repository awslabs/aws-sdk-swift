// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p></p>
public struct CreateEventSubscriptionInput: Equatable {
    /// <p> A Boolean value; set to <code>true</code> to activate the subscription, or set to
    ///             <code>false</code> to create the subscription but not activate it. </p>
    public let enabled: Bool?
    /// <p>A list of event categories for a source type that you want to subscribe to. For more
    ///            information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html">Working with Events and
    ///                Notifications</a> in the <i>AWS Database Migration Service User
    ///                    Guide.</i>
    ///          </p>
    public let eventCategories: [String]?
    /// <p> The Amazon Resource Name (ARN) of the Amazon SNS topic created for event notification.
    ///          The ARN is created by Amazon SNS when you create a topic and subscribe to it. </p>
    public let snsTopicArn: String?
    /// <p>A list of identifiers for which AWS DMS provides notification events.</p>
    ///          <p>If you don't specify a value, notifications are provided for all sources.</p>
    ///         <p>If you specify multiple values, they must be of the same type. For example, if you
    ///             specify a database instance ID, then all of the other values must be database instance
    ///             IDs.</p>
    public let sourceIds: [String]?
    /// <p> The type of AWS DMS resource that generates the events. For example, if you want to be
    ///          notified of events generated by a replication instance, you set this parameter to
    ///             <code>replication-instance</code>. If this value isn't specified, all events are
    ///          returned. </p>
    ///          <p>Valid values: <code>replication-instance</code> | <code>replication-task</code>
    ///          </p>
    public let sourceType: String?
    /// <p>The name of the AWS DMS event notification subscription. This name must be less than 255 characters.</p>
    public let subscriptionName: String?
    /// <p>One or more tags to be assigned to the event subscription.</p>
    public let tags: [Tag]?

    public init (
        enabled: Bool? = nil,
        eventCategories: [String]? = nil,
        snsTopicArn: String? = nil,
        sourceIds: [String]? = nil,
        sourceType: String? = nil,
        subscriptionName: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.enabled = enabled
        self.eventCategories = eventCategories
        self.snsTopicArn = snsTopicArn
        self.sourceIds = sourceIds
        self.sourceType = sourceType
        self.subscriptionName = subscriptionName
        self.tags = tags
    }
}
