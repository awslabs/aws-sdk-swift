// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PostgreSQLSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case afterConnectScript = "AfterConnectScript"
        case captureDdls = "CaptureDdls"
        case databaseName = "DatabaseName"
        case ddlArtifactsSchema = "DdlArtifactsSchema"
        case executeTimeout = "ExecuteTimeout"
        case failTasksOnLobTruncation = "FailTasksOnLobTruncation"
        case maxFileSize = "MaxFileSize"
        case password = "Password"
        case port = "Port"
        case secretsManagerAccessRoleArn = "SecretsManagerAccessRoleArn"
        case secretsManagerSecretId = "SecretsManagerSecretId"
        case serverName = "ServerName"
        case slotName = "SlotName"
        case username = "Username"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let afterConnectScript = afterConnectScript {
            try encodeContainer.encode(afterConnectScript, forKey: .afterConnectScript)
        }
        if let captureDdls = captureDdls {
            try encodeContainer.encode(captureDdls, forKey: .captureDdls)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let ddlArtifactsSchema = ddlArtifactsSchema {
            try encodeContainer.encode(ddlArtifactsSchema, forKey: .ddlArtifactsSchema)
        }
        if let executeTimeout = executeTimeout {
            try encodeContainer.encode(executeTimeout, forKey: .executeTimeout)
        }
        if let failTasksOnLobTruncation = failTasksOnLobTruncation {
            try encodeContainer.encode(failTasksOnLobTruncation, forKey: .failTasksOnLobTruncation)
        }
        if let maxFileSize = maxFileSize {
            try encodeContainer.encode(maxFileSize, forKey: .maxFileSize)
        }
        if let password = password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let port = port {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let secretsManagerAccessRoleArn = secretsManagerAccessRoleArn {
            try encodeContainer.encode(secretsManagerAccessRoleArn, forKey: .secretsManagerAccessRoleArn)
        }
        if let secretsManagerSecretId = secretsManagerSecretId {
            try encodeContainer.encode(secretsManagerSecretId, forKey: .secretsManagerSecretId)
        }
        if let serverName = serverName {
            try encodeContainer.encode(serverName, forKey: .serverName)
        }
        if let slotName = slotName {
            try encodeContainer.encode(slotName, forKey: .slotName)
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let afterConnectScriptDecoded = try containerValues.decodeIfPresent(String.self, forKey: .afterConnectScript)
        afterConnectScript = afterConnectScriptDecoded
        let captureDdlsDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .captureDdls)
        captureDdls = captureDdlsDecoded
        let maxFileSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxFileSize)
        maxFileSize = maxFileSizeDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let ddlArtifactsSchemaDecoded = try containerValues.decodeIfPresent(String.self, forKey: .ddlArtifactsSchema)
        ddlArtifactsSchema = ddlArtifactsSchemaDecoded
        let executeTimeoutDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .executeTimeout)
        executeTimeout = executeTimeoutDecoded
        let failTasksOnLobTruncationDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .failTasksOnLobTruncation)
        failTasksOnLobTruncation = failTasksOnLobTruncationDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .password)
        password = passwordDecoded
        let portDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .port)
        port = portDecoded
        let serverNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serverName)
        serverName = serverNameDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .username)
        username = usernameDecoded
        let slotNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .slotName)
        slotName = slotNameDecoded
        let secretsManagerAccessRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .secretsManagerAccessRoleArn)
        secretsManagerAccessRoleArn = secretsManagerAccessRoleArnDecoded
        let secretsManagerSecretIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .secretsManagerSecretId)
        secretsManagerSecretId = secretsManagerSecretIdDecoded
    }
}
