// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NeptuneSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case errorRetryDuration = "ErrorRetryDuration"
        case iamAuthEnabled = "IamAuthEnabled"
        case maxFileSize = "MaxFileSize"
        case maxRetryCount = "MaxRetryCount"
        case s3BucketFolder = "S3BucketFolder"
        case s3BucketName = "S3BucketName"
        case serviceAccessRoleArn = "ServiceAccessRoleArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorRetryDuration = errorRetryDuration {
            try encodeContainer.encode(errorRetryDuration, forKey: .errorRetryDuration)
        }
        if let iamAuthEnabled = iamAuthEnabled {
            try encodeContainer.encode(iamAuthEnabled, forKey: .iamAuthEnabled)
        }
        if let maxFileSize = maxFileSize {
            try encodeContainer.encode(maxFileSize, forKey: .maxFileSize)
        }
        if let maxRetryCount = maxRetryCount {
            try encodeContainer.encode(maxRetryCount, forKey: .maxRetryCount)
        }
        if let s3BucketFolder = s3BucketFolder {
            try encodeContainer.encode(s3BucketFolder, forKey: .s3BucketFolder)
        }
        if let s3BucketName = s3BucketName {
            try encodeContainer.encode(s3BucketName, forKey: .s3BucketName)
        }
        if let serviceAccessRoleArn = serviceAccessRoleArn {
            try encodeContainer.encode(serviceAccessRoleArn, forKey: .serviceAccessRoleArn)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceAccessRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceAccessRoleArn)
        serviceAccessRoleArn = serviceAccessRoleArnDecoded
        let s3BucketNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3BucketName)
        s3BucketName = s3BucketNameDecoded
        let s3BucketFolderDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3BucketFolder)
        s3BucketFolder = s3BucketFolderDecoded
        let errorRetryDurationDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .errorRetryDuration)
        errorRetryDuration = errorRetryDurationDecoded
        let maxFileSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxFileSize)
        maxFileSize = maxFileSizeDecoded
        let maxRetryCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .maxRetryCount)
        maxRetryCount = maxRetryCountDecoded
        let iamAuthEnabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .iamAuthEnabled)
        iamAuthEnabled = iamAuthEnabledDecoded
    }
}
