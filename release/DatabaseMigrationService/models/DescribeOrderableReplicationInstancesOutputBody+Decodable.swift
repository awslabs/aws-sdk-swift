// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeOrderableReplicationInstancesOutputBody: Equatable {
    public let orderableReplicationInstances: [OrderableReplicationInstance]?
    public let marker: String?
}

extension DescribeOrderableReplicationInstancesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case marker = "Marker"
        case orderableReplicationInstances = "OrderableReplicationInstances"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let orderableReplicationInstancesContainer = try containerValues.decodeIfPresent([OrderableReplicationInstance].self, forKey: .orderableReplicationInstances)
        var orderableReplicationInstancesDecoded0:[OrderableReplicationInstance]? = nil
        if let orderableReplicationInstancesContainer = orderableReplicationInstancesContainer {
            orderableReplicationInstancesDecoded0 = [OrderableReplicationInstance]()
            for structure0 in orderableReplicationInstancesContainer {
                orderableReplicationInstancesDecoded0?.append(structure0)
            }
        }
        orderableReplicationInstances = orderableReplicationInstancesDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .marker)
        marker = markerDecoded
    }
}
