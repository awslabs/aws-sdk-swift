// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResourcePendingMaintenanceActions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case pendingMaintenanceActionDetails = "PendingMaintenanceActionDetails"
        case resourceIdentifier = "ResourceIdentifier"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pendingMaintenanceActionDetails = pendingMaintenanceActionDetails {
            var pendingMaintenanceActionDetailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pendingMaintenanceActionDetails)
            for pendingmaintenanceactiondetails0 in pendingMaintenanceActionDetails {
                try pendingMaintenanceActionDetailsContainer.encode(pendingmaintenanceactiondetails0)
            }
        }
        if let resourceIdentifier = resourceIdentifier {
            try encodeContainer.encode(resourceIdentifier, forKey: .resourceIdentifier)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceIdentifier)
        resourceIdentifier = resourceIdentifierDecoded
        let pendingMaintenanceActionDetailsContainer = try containerValues.decodeIfPresent([PendingMaintenanceAction].self, forKey: .pendingMaintenanceActionDetails)
        var pendingMaintenanceActionDetailsDecoded0:[PendingMaintenanceAction]? = nil
        if let pendingMaintenanceActionDetailsContainer = pendingMaintenanceActionDetailsContainer {
            pendingMaintenanceActionDetailsDecoded0 = [PendingMaintenanceAction]()
            for structure0 in pendingMaintenanceActionDetailsContainer {
                pendingMaintenanceActionDetailsDecoded0?.append(structure0)
            }
        }
        pendingMaintenanceActionDetails = pendingMaintenanceActionDetailsDecoded0
    }
}
