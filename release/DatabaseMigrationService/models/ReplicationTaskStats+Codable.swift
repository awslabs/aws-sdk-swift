// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ReplicationTaskStats: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case elapsedTimeMillis = "ElapsedTimeMillis"
        case freshStartDate = "FreshStartDate"
        case fullLoadFinishDate = "FullLoadFinishDate"
        case fullLoadProgressPercent = "FullLoadProgressPercent"
        case fullLoadStartDate = "FullLoadStartDate"
        case startDate = "StartDate"
        case stopDate = "StopDate"
        case tablesErrored = "TablesErrored"
        case tablesLoaded = "TablesLoaded"
        case tablesLoading = "TablesLoading"
        case tablesQueued = "TablesQueued"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if elapsedTimeMillis != 0 {
            try encodeContainer.encode(elapsedTimeMillis, forKey: .elapsedTimeMillis)
        }
        if let freshStartDate = freshStartDate {
            try encodeContainer.encode(freshStartDate.timeIntervalSince1970, forKey: .freshStartDate)
        }
        if let fullLoadFinishDate = fullLoadFinishDate {
            try encodeContainer.encode(fullLoadFinishDate.timeIntervalSince1970, forKey: .fullLoadFinishDate)
        }
        if fullLoadProgressPercent != 0 {
            try encodeContainer.encode(fullLoadProgressPercent, forKey: .fullLoadProgressPercent)
        }
        if let fullLoadStartDate = fullLoadStartDate {
            try encodeContainer.encode(fullLoadStartDate.timeIntervalSince1970, forKey: .fullLoadStartDate)
        }
        if let startDate = startDate {
            try encodeContainer.encode(startDate.timeIntervalSince1970, forKey: .startDate)
        }
        if let stopDate = stopDate {
            try encodeContainer.encode(stopDate.timeIntervalSince1970, forKey: .stopDate)
        }
        if tablesErrored != 0 {
            try encodeContainer.encode(tablesErrored, forKey: .tablesErrored)
        }
        if tablesLoaded != 0 {
            try encodeContainer.encode(tablesLoaded, forKey: .tablesLoaded)
        }
        if tablesLoading != 0 {
            try encodeContainer.encode(tablesLoading, forKey: .tablesLoading)
        }
        if tablesQueued != 0 {
            try encodeContainer.encode(tablesQueued, forKey: .tablesQueued)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fullLoadProgressPercentDecoded = try containerValues.decode(Int.self, forKey: .fullLoadProgressPercent)
        fullLoadProgressPercent = fullLoadProgressPercentDecoded
        let elapsedTimeMillisDecoded = try containerValues.decode(Int.self, forKey: .elapsedTimeMillis)
        elapsedTimeMillis = elapsedTimeMillisDecoded
        let tablesLoadedDecoded = try containerValues.decode(Int.self, forKey: .tablesLoaded)
        tablesLoaded = tablesLoadedDecoded
        let tablesLoadingDecoded = try containerValues.decode(Int.self, forKey: .tablesLoading)
        tablesLoading = tablesLoadingDecoded
        let tablesQueuedDecoded = try containerValues.decode(Int.self, forKey: .tablesQueued)
        tablesQueued = tablesQueuedDecoded
        let tablesErroredDecoded = try containerValues.decode(Int.self, forKey: .tablesErrored)
        tablesErrored = tablesErroredDecoded
        let freshStartDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .freshStartDate)
        freshStartDate = freshStartDateDecoded
        let startDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startDate)
        startDate = startDateDecoded
        let stopDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .stopDate)
        stopDate = stopDateDecoded
        let fullLoadStartDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .fullLoadStartDate)
        fullLoadStartDate = fullLoadStartDateDecoded
        let fullLoadFinishDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .fullLoadFinishDate)
        fullLoadFinishDate = fullLoadFinishDateDecoded
    }
}
