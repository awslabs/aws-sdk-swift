// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ReplicationTaskAssessmentResult: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case assessmentResults = "AssessmentResults"
        case assessmentResultsFile = "AssessmentResultsFile"
        case assessmentStatus = "AssessmentStatus"
        case replicationTaskArn = "ReplicationTaskArn"
        case replicationTaskIdentifier = "ReplicationTaskIdentifier"
        case replicationTaskLastAssessmentDate = "ReplicationTaskLastAssessmentDate"
        case s3ObjectUrl = "S3ObjectUrl"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assessmentResults = assessmentResults {
            try encodeContainer.encode(assessmentResults, forKey: .assessmentResults)
        }
        if let assessmentResultsFile = assessmentResultsFile {
            try encodeContainer.encode(assessmentResultsFile, forKey: .assessmentResultsFile)
        }
        if let assessmentStatus = assessmentStatus {
            try encodeContainer.encode(assessmentStatus, forKey: .assessmentStatus)
        }
        if let replicationTaskArn = replicationTaskArn {
            try encodeContainer.encode(replicationTaskArn, forKey: .replicationTaskArn)
        }
        if let replicationTaskIdentifier = replicationTaskIdentifier {
            try encodeContainer.encode(replicationTaskIdentifier, forKey: .replicationTaskIdentifier)
        }
        if let replicationTaskLastAssessmentDate = replicationTaskLastAssessmentDate {
            try encodeContainer.encode(replicationTaskLastAssessmentDate.timeIntervalSince1970, forKey: .replicationTaskLastAssessmentDate)
        }
        if let s3ObjectUrl = s3ObjectUrl {
            try encodeContainer.encode(s3ObjectUrl, forKey: .s3ObjectUrl)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationTaskIdentifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replicationTaskIdentifier)
        replicationTaskIdentifier = replicationTaskIdentifierDecoded
        let replicationTaskArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replicationTaskArn)
        replicationTaskArn = replicationTaskArnDecoded
        let replicationTaskLastAssessmentDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .replicationTaskLastAssessmentDate)
        replicationTaskLastAssessmentDate = replicationTaskLastAssessmentDateDecoded
        let assessmentStatusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .assessmentStatus)
        assessmentStatus = assessmentStatusDecoded
        let assessmentResultsFileDecoded = try containerValues.decodeIfPresent(String.self, forKey: .assessmentResultsFile)
        assessmentResultsFile = assessmentResultsFileDecoded
        let assessmentResultsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .assessmentResults)
        assessmentResults = assessmentResultsDecoded
        let s3ObjectUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3ObjectUrl)
        s3ObjectUrl = s3ObjectUrlDecoded
    }
}
