// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Provides a collection of table statistics in response to a request by the
///          <code>DescribeTableStatistics</code> operation.</p>
public struct TableStatistics: Equatable {
    /// <p>The data definition language (DDL) used to build and modify the structure of your tables.</p>
    public let ddls: Int
    /// <p>The number of delete actions performed on a table.</p>
    public let deletes: Int
    /// <p>The number of rows that failed conditional checks during the full load operation (valid
    ///          only for migrations where DynamoDB is the target).</p>
    public let fullLoadCondtnlChkFailedRows: Int
    /// <p>The time when the full load operation completed.</p>
    public let fullLoadEndTime: Date?
    /// <p>The number of rows that failed to load during the full load operation (valid only for
    ///          migrations where DynamoDB is the target).</p>
    public let fullLoadErrorRows: Int
    /// <p>A value that indicates if the table was reloaded (<code>true</code>)
    ///          or loaded as part of a new full load operation (<code>false</code>).</p>
    public let fullLoadReloaded: Bool?
    /// <p>The number of rows added during the full load operation.</p>
    public let fullLoadRows: Int
    /// <p>The time when the full load operation started.</p>
    public let fullLoadStartTime: Date?
    /// <p>The number of insert actions performed on a table.</p>
    public let inserts: Int
    /// <p>The last time a table was updated.</p>
    public let lastUpdateTime: Date?
    /// <p>The schema name.</p>
    public let schemaName: String?
    /// <p>The name of the table.</p>
    public let tableName: String?
    /// <p>The state of the tables described.</p>
    ///          <p>Valid states: Table does not exist | Before load | Full load | Table completed | Table
    ///          cancelled | Table error | Table all | Table updates | Table is being reloaded</p>
    public let tableState: String?
    /// <p>The number of update actions performed on a table.</p>
    public let updates: Int
    /// <p>The number of records that failed validation.</p>
    public let validationFailedRecords: Int
    /// <p>The number of records that have yet to be validated.</p>
    public let validationPendingRecords: Int
    /// <p>The validation state of the table.</p>
    ///          <p>This parameter can have the following values:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Not enabled – Validation isn't enabled for the table in the migration
    ///                task.</p>
    ///             </li>
    ///             <li>
    ///                <p>Pending records – Some records in the table are waiting for validation.</p>
    ///             </li>
    ///             <li>
    ///                <p>Mismatched records – Some records in the table don't match between the source
    ///                and target.</p>
    ///             </li>
    ///             <li>
    ///                <p>Suspended records – Some records in the table couldn't be validated.</p>
    ///             </li>
    ///             <li>
    ///                <p>No primary key  –The table couldn't be validated because it has no primary
    ///                key.</p>
    ///             </li>
    ///             <li>
    ///                <p>Table error – The table wasn't validated because it's in an error state
    ///                and some data wasn't migrated.</p>
    ///             </li>
    ///             <li>
    ///                <p>Validated – All rows in the table are validated. If the table is updated, the
    ///                status can change from Validated.</p>
    ///             </li>
    ///             <li>
    ///                <p>Error – The table couldn't be validated because of an unexpected
    ///                error.</p>
    ///             </li>
    ///             <li>
    ///                <p>Pending validation – The table is waiting validation.</p>
    ///             </li>
    ///             <li>
    ///                <p>Preparing table – Preparing the table enabled in the migration task for validation.</p>
    ///             </li>
    ///             <li>
    ///                <p>Pending revalidation – All rows in the table are pending validation after the table was updated.</p>
    ///             </li>
    ///          </ul>
    public let validationState: String?
    /// <p>Additional details about the state of validation.</p>
    public let validationStateDetails: String?
    /// <p>The number of records that couldn't be validated.</p>
    public let validationSuspendedRecords: Int

    public init (
        ddls: Int = 0,
        deletes: Int = 0,
        fullLoadCondtnlChkFailedRows: Int = 0,
        fullLoadEndTime: Date? = nil,
        fullLoadErrorRows: Int = 0,
        fullLoadReloaded: Bool? = nil,
        fullLoadRows: Int = 0,
        fullLoadStartTime: Date? = nil,
        inserts: Int = 0,
        lastUpdateTime: Date? = nil,
        schemaName: String? = nil,
        tableName: String? = nil,
        tableState: String? = nil,
        updates: Int = 0,
        validationFailedRecords: Int = 0,
        validationPendingRecords: Int = 0,
        validationState: String? = nil,
        validationStateDetails: String? = nil,
        validationSuspendedRecords: Int = 0
    )
    {
        self.ddls = ddls
        self.deletes = deletes
        self.fullLoadCondtnlChkFailedRows = fullLoadCondtnlChkFailedRows
        self.fullLoadEndTime = fullLoadEndTime
        self.fullLoadErrorRows = fullLoadErrorRows
        self.fullLoadReloaded = fullLoadReloaded
        self.fullLoadRows = fullLoadRows
        self.fullLoadStartTime = fullLoadStartTime
        self.inserts = inserts
        self.lastUpdateTime = lastUpdateTime
        self.schemaName = schemaName
        self.tableName = tableName
        self.tableState = tableState
        self.updates = updates
        self.validationFailedRecords = validationFailedRecords
        self.validationPendingRecords = validationPendingRecords
        self.validationState = validationState
        self.validationStateDetails = validationStateDetails
        self.validationSuspendedRecords = validationSuspendedRecords
    }
}
