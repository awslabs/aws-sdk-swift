// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MicrosoftSQLServerSettings: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case bcpPacketSize = "BcpPacketSize"
        case controlTablesFileGroup = "ControlTablesFileGroup"
        case databaseName = "DatabaseName"
        case password = "Password"
        case port = "Port"
        case querySingleAlwaysOnNode = "QuerySingleAlwaysOnNode"
        case readBackupOnly = "ReadBackupOnly"
        case safeguardPolicy = "SafeguardPolicy"
        case secretsManagerAccessRoleArn = "SecretsManagerAccessRoleArn"
        case secretsManagerSecretId = "SecretsManagerSecretId"
        case serverName = "ServerName"
        case useBcpFullLoad = "UseBcpFullLoad"
        case useThirdPartyBackupDevice = "UseThirdPartyBackupDevice"
        case username = "Username"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bcpPacketSize = bcpPacketSize {
            try encodeContainer.encode(bcpPacketSize, forKey: .bcpPacketSize)
        }
        if let controlTablesFileGroup = controlTablesFileGroup {
            try encodeContainer.encode(controlTablesFileGroup, forKey: .controlTablesFileGroup)
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let password = password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let port = port {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let querySingleAlwaysOnNode = querySingleAlwaysOnNode {
            try encodeContainer.encode(querySingleAlwaysOnNode, forKey: .querySingleAlwaysOnNode)
        }
        if let readBackupOnly = readBackupOnly {
            try encodeContainer.encode(readBackupOnly, forKey: .readBackupOnly)
        }
        if let safeguardPolicy = safeguardPolicy {
            try encodeContainer.encode(safeguardPolicy.rawValue, forKey: .safeguardPolicy)
        }
        if let secretsManagerAccessRoleArn = secretsManagerAccessRoleArn {
            try encodeContainer.encode(secretsManagerAccessRoleArn, forKey: .secretsManagerAccessRoleArn)
        }
        if let secretsManagerSecretId = secretsManagerSecretId {
            try encodeContainer.encode(secretsManagerSecretId, forKey: .secretsManagerSecretId)
        }
        if let serverName = serverName {
            try encodeContainer.encode(serverName, forKey: .serverName)
        }
        if let useBcpFullLoad = useBcpFullLoad {
            try encodeContainer.encode(useBcpFullLoad, forKey: .useBcpFullLoad)
        }
        if let useThirdPartyBackupDevice = useThirdPartyBackupDevice {
            try encodeContainer.encode(useThirdPartyBackupDevice, forKey: .useThirdPartyBackupDevice)
        }
        if let username = username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let portDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .port)
        port = portDecoded
        let bcpPacketSizeDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .bcpPacketSize)
        bcpPacketSize = bcpPacketSizeDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let controlTablesFileGroupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .controlTablesFileGroup)
        controlTablesFileGroup = controlTablesFileGroupDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .password)
        password = passwordDecoded
        let querySingleAlwaysOnNodeDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .querySingleAlwaysOnNode)
        querySingleAlwaysOnNode = querySingleAlwaysOnNodeDecoded
        let readBackupOnlyDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .readBackupOnly)
        readBackupOnly = readBackupOnlyDecoded
        let safeguardPolicyDecoded = try containerValues.decodeIfPresent(SafeguardPolicy.self, forKey: .safeguardPolicy)
        safeguardPolicy = safeguardPolicyDecoded
        let serverNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serverName)
        serverName = serverNameDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .username)
        username = usernameDecoded
        let useBcpFullLoadDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .useBcpFullLoad)
        useBcpFullLoad = useBcpFullLoadDecoded
        let useThirdPartyBackupDeviceDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .useThirdPartyBackupDevice)
        useThirdPartyBackupDevice = useThirdPartyBackupDeviceDecoded
        let secretsManagerAccessRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .secretsManagerAccessRoleArn)
        secretsManagerAccessRoleArn = secretsManagerAccessRoleArnDecoded
        let secretsManagerSecretIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .secretsManagerSecretId)
        secretsManagerSecretId = secretsManagerSecretIdDecoded
    }
}
