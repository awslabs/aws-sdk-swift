// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Node: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case availabilityZone = "AvailabilityZone"
        case creationDate = "CreationDate"
        case frameworkAttributes = "FrameworkAttributes"
        case id = "Id"
        case instanceType = "InstanceType"
        case logPublishingConfiguration = "LogPublishingConfiguration"
        case memberId = "MemberId"
        case networkId = "NetworkId"
        case stateDB = "StateDB"
        case status = "Status"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let frameworkAttributes = frameworkAttributes {
            try encodeContainer.encode(frameworkAttributes, forKey: .frameworkAttributes)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let logPublishingConfiguration = logPublishingConfiguration {
            try encodeContainer.encode(logPublishingConfiguration, forKey: .logPublishingConfiguration)
        }
        if let memberId = memberId {
            try encodeContainer.encode(memberId, forKey: .memberId)
        }
        if let networkId = networkId {
            try encodeContainer.encode(networkId, forKey: .networkId)
        }
        if let stateDB = stateDB {
            try encodeContainer.encode(stateDB.rawValue, forKey: .stateDB)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, outputtagmap0) in tags {
                try tagsContainer.encode(outputtagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkId)
        networkId = networkIdDecoded
        let memberIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .memberId)
        memberId = memberIdDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let frameworkAttributesDecoded = try containerValues.decodeIfPresent(NodeFrameworkAttributes.self, forKey: .frameworkAttributes)
        frameworkAttributes = frameworkAttributesDecoded
        let logPublishingConfigurationDecoded = try containerValues.decodeIfPresent(NodeLogPublishingConfiguration.self, forKey: .logPublishingConfiguration)
        logPublishingConfiguration = logPublishingConfigurationDecoded
        let stateDBDecoded = try containerValues.decodeIfPresent(StateDBType.self, forKey: .stateDB)
        stateDB = stateDBDecoded
        let statusDecoded = try containerValues.decodeIfPresent(NodeStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
    }
}
