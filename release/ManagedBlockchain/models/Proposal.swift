// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Properties of a proposal on a Managed Blockchain network.</p>
///          <p>Applies only to Hyperledger Fabric.</p>
public struct Proposal: Equatable {
    /// <p>The actions to perform on the network if the proposal is <code>APPROVED</code>.</p>
    public let actions: ProposalActions?
    /// <p>The Amazon Resource Name (ARN) of the proposal. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    public let arn: String?
    /// <p>
    ///          The date and time that the proposal was created.
    ///       </p>
    public let creationDate: Date?
    /// <p>The description of the proposal.</p>
    public let description: String?
    /// <p>
    ///          The date and time that the proposal expires. This is the <code>CreationDate</code> plus the <code>ProposalDurationInHours</code> that is specified in the <code>ProposalThresholdPolicy</code>. After this date and time, if members have not cast enough votes to determine the outcome according to the voting policy, the proposal is <code>EXPIRED</code> and <code>Actions</code> are not carried out.
    ///       </p>
    public let expirationDate: Date?
    /// <p>The unique identifier of the network for which the proposal is made.</p>
    public let networkId: String?
    /// <p>
    ///          The current total of <code>NO</code> votes cast on the proposal by members.
    ///       </p>
    public let noVoteCount: Int?
    /// <p>
    ///          The number of votes remaining to be cast on the proposal by members. In other words, the number of members minus the sum of <code>YES</code> votes and <code>NO</code> votes.
    ///       </p>
    public let outstandingVoteCount: Int?
    /// <p>The unique identifier of the proposal.</p>
    public let proposalId: String?
    /// <p>The unique identifier of the member that created the proposal.</p>
    public let proposedByMemberId: String?
    /// <p>The name of the member that created the proposal.</p>
    public let proposedByMemberName: String?
    /// <p>The status of the proposal. Values are as follows:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>IN_PROGRESS</code> - The proposal is active and open for member voting.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>APPROVED</code> - The proposal was approved with sufficient <code>YES</code> votes among members according to the <code>VotingPolicy</code> specified for the <code>Network</code>. The specified proposal actions are carried out.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>REJECTED</code> - The proposal was rejected with insufficient <code>YES</code> votes among members according to the <code>VotingPolicy</code> specified for the <code>Network</code>. The specified <code>ProposalActions</code> are not carried out.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>EXPIRED</code> - Members did not cast the number of votes required to determine the proposal outcome before the proposal expired. The specified <code>ProposalActions</code> are not carried out.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ACTION_FAILED</code> - One or more of the specified <code>ProposalActions</code> in a proposal that was approved could not be completed because of an error. The <code>ACTION_FAILED</code> status occurs even if only one ProposalAction fails and other actions are successful.</p>
    ///             </li>
    ///          </ul>
    public let status: ProposalStatus?
    /// <p>Tags assigned to the proposal. Each tag consists of a key and optional value.</p>
    ///          <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    public let tags: [String:String]?
    /// <p>
    ///          The current total of <code>YES</code> votes cast on the proposal by members.
    ///       </p>
    public let yesVoteCount: Int?

    public init (
        actions: ProposalActions? = nil,
        arn: String? = nil,
        creationDate: Date? = nil,
        description: String? = nil,
        expirationDate: Date? = nil,
        networkId: String? = nil,
        noVoteCount: Int? = nil,
        outstandingVoteCount: Int? = nil,
        proposalId: String? = nil,
        proposedByMemberId: String? = nil,
        proposedByMemberName: String? = nil,
        status: ProposalStatus? = nil,
        tags: [String:String]? = nil,
        yesVoteCount: Int? = nil
    )
    {
        self.actions = actions
        self.arn = arn
        self.creationDate = creationDate
        self.description = description
        self.expirationDate = expirationDate
        self.networkId = networkId
        self.noVoteCount = noVoteCount
        self.outstandingVoteCount = outstandingVoteCount
        self.proposalId = proposalId
        self.proposedByMemberId = proposedByMemberId
        self.proposedByMemberName = proposedByMemberName
        self.status = status
        self.tags = tags
        self.yesVoteCount = yesVoteCount
    }
}
