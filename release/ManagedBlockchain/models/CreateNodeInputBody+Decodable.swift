// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateNodeInputBody: Equatable {
    public let clientRequestToken: String?
    public let memberId: String?
    public let nodeConfiguration: NodeConfiguration?
    public let tags: [String:String]?
}

extension CreateNodeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case memberId = "MemberId"
        case nodeConfiguration = "NodeConfiguration"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let memberIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .memberId)
        memberId = memberIdDecoded
        let nodeConfigurationDecoded = try containerValues.decodeIfPresent(NodeConfiguration.self, forKey: .nodeConfiguration)
        nodeConfiguration = nodeConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
