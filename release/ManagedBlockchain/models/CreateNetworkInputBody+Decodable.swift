// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateNetworkInputBody: Equatable {
    public let clientRequestToken: String?
    public let name: String?
    public let description: String?
    public let framework: Framework?
    public let frameworkVersion: String?
    public let frameworkConfiguration: NetworkFrameworkConfiguration?
    public let votingPolicy: VotingPolicy?
    public let memberConfiguration: MemberConfiguration?
    public let tags: [String:String]?
}

extension CreateNetworkInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case description = "Description"
        case framework = "Framework"
        case frameworkConfiguration = "FrameworkConfiguration"
        case frameworkVersion = "FrameworkVersion"
        case memberConfiguration = "MemberConfiguration"
        case name = "Name"
        case tags = "Tags"
        case votingPolicy = "VotingPolicy"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let frameworkDecoded = try containerValues.decodeIfPresent(Framework.self, forKey: .framework)
        framework = frameworkDecoded
        let frameworkVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .frameworkVersion)
        frameworkVersion = frameworkVersionDecoded
        let frameworkConfigurationDecoded = try containerValues.decodeIfPresent(NetworkFrameworkConfiguration.self, forKey: .frameworkConfiguration)
        frameworkConfiguration = frameworkConfigurationDecoded
        let votingPolicyDecoded = try containerValues.decodeIfPresent(VotingPolicy.self, forKey: .votingPolicy)
        votingPolicy = votingPolicyDecoded
        let memberConfigurationDecoded = try containerValues.decodeIfPresent(MemberConfiguration.self, forKey: .memberConfiguration)
        memberConfiguration = memberConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
    }
}
