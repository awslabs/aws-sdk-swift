// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListProposalVotesOutputBody: Equatable {
    public let proposalVotes: [VoteSummary]?
    public let nextToken: String?
}

extension ListProposalVotesOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case proposalVotes = "ProposalVotes"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let proposalVotesContainer = try containerValues.decodeIfPresent([VoteSummary].self, forKey: .proposalVotes)
        var proposalVotesDecoded0:[VoteSummary]? = nil
        if let proposalVotesContainer = proposalVotesContainer {
            proposalVotesDecoded0 = [VoteSummary]()
            for structure0 in proposalVotesContainer {
                proposalVotesDecoded0?.append(structure0)
            }
        }
        proposalVotes = proposalVotesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
