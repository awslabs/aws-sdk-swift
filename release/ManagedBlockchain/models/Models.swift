// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccessDeniedException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AccessDeniedException(message: \(String(describing: message)))"}
}

extension AccessDeniedException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You do not have sufficient access to perform this action.</p>
public struct AccessDeniedException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct AccessDeniedExceptionBody: Equatable {
    public let message: String?
}

extension AccessDeniedExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ApprovalThresholdPolicy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case proposalDurationInHours = "ProposalDurationInHours"
        case thresholdComparator = "ThresholdComparator"
        case thresholdPercentage = "ThresholdPercentage"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let proposalDurationInHours = proposalDurationInHours {
            try encodeContainer.encode(proposalDurationInHours, forKey: .proposalDurationInHours)
        }
        if let thresholdComparator = thresholdComparator {
            try encodeContainer.encode(thresholdComparator.rawValue, forKey: .thresholdComparator)
        }
        if let thresholdPercentage = thresholdPercentage {
            try encodeContainer.encode(thresholdPercentage, forKey: .thresholdPercentage)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thresholdPercentageDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .thresholdPercentage)
        thresholdPercentage = thresholdPercentageDecoded
        let proposalDurationInHoursDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .proposalDurationInHours)
        proposalDurationInHours = proposalDurationInHoursDecoded
        let thresholdComparatorDecoded = try containerValues.decodeIfPresent(ThresholdComparator.self, forKey: .thresholdComparator)
        thresholdComparator = thresholdComparatorDecoded
    }
}

extension ApprovalThresholdPolicy: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ApprovalThresholdPolicy(proposalDurationInHours: \(String(describing: proposalDurationInHours)), thresholdComparator: \(String(describing: thresholdComparator)), thresholdPercentage: \(String(describing: thresholdPercentage)))"}
}

/// <p>A policy type that defines the voting rules for the network. The rules decide if a proposal is approved. Approval may be based on criteria such as the percentage of <code>YES</code> votes and the duration of the proposal. The policy applies to all proposals and is specified when the network is created.</p>
///          <p>Applies only to Hyperledger Fabric.</p>
public struct ApprovalThresholdPolicy: Equatable {
    /// <p>The duration from the time that a proposal is created until it expires. If members cast neither the required number of <code>YES</code> votes to approve the proposal nor the number of <code>NO</code> votes required to reject it before the duration expires, the proposal is <code>EXPIRED</code> and <code>ProposalActions</code> are not carried out.</p>
    public let proposalDurationInHours: Int?
    /// <p>Determines whether the vote percentage must be greater than the <code>ThresholdPercentage</code> or must be greater than or equal to the <code>ThreholdPercentage</code> to be approved.</p>
    public let thresholdComparator: ThresholdComparator?
    /// <p>The percentage of votes among all members that must be <code>YES</code> for a proposal to be approved. For example, a <code>ThresholdPercentage</code> value of <code>50</code> indicates 50%. The <code>ThresholdComparator</code> determines the precise comparison. If a <code>ThresholdPercentage</code> value of <code>50</code> is specified on a network with 10 members, along with a <code>ThresholdComparator</code> value of <code>GREATER_THAN</code>, this indicates that 6 <code>YES</code> votes are required for the proposal to be approved.</p>
    public let thresholdPercentage: Int?

    public init (
        proposalDurationInHours: Int? = nil,
        thresholdComparator: ThresholdComparator? = nil,
        thresholdPercentage: Int? = nil
    )
    {
        self.proposalDurationInHours = proposalDurationInHours
        self.thresholdComparator = thresholdComparator
        self.thresholdPercentage = thresholdPercentage
    }
}

public struct CreateMemberInputBodyMiddleware: Middleware {
    public let id: String = "CreateMemberInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMemberInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMemberInput>
    public typealias MOutput = OperationOutput<CreateMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMemberOutputError>
}

extension CreateMemberInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateMemberInput(clientRequestToken: \(String(describing: clientRequestToken)), invitationId: \(String(describing: invitationId)), memberConfiguration: \(String(describing: memberConfiguration)), networkId: \(String(describing: networkId)))"}
}

extension CreateMemberInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case invitationId = "InvitationId"
        case memberConfiguration = "MemberConfiguration"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let invitationId = invitationId {
            try encodeContainer.encode(invitationId, forKey: .invitationId)
        }
        if let memberConfiguration = memberConfiguration {
            try encodeContainer.encode(memberConfiguration, forKey: .memberConfiguration)
        }
    }
}

public struct CreateMemberInputHeadersMiddleware: Middleware {
    public let id: String = "CreateMemberInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMemberInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMemberInput>
    public typealias MOutput = OperationOutput<CreateMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMemberOutputError>
}

public struct CreateMemberInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateMemberInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateMemberInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateMemberInput>
    public typealias MOutput = OperationOutput<CreateMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateMemberOutputError>
}

public struct CreateMemberInput: Equatable {
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an AWS SDK or the AWS CLI.</p>
    public var clientRequestToken: String?
    /// <p>The unique identifier of the invitation that is sent to the member to join the network.</p>
    public let invitationId: String?
    /// <p>Member configuration parameters.</p>
    public let memberConfiguration: MemberConfiguration?
    /// <p>The unique identifier of the network in which the member is created.</p>
    public let networkId: String?

    public init (
        clientRequestToken: String? = nil,
        invitationId: String? = nil,
        memberConfiguration: MemberConfiguration? = nil,
        networkId: String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.invitationId = invitationId
        self.memberConfiguration = memberConfiguration
        self.networkId = networkId
    }
}

struct CreateMemberInputBody: Equatable {
    public let clientRequestToken: String?
    public let invitationId: String?
    public let memberConfiguration: MemberConfiguration?
}

extension CreateMemberInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case invitationId = "InvitationId"
        case memberConfiguration = "MemberConfiguration"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let invitationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .invitationId)
        invitationId = invitationIdDecoded
        let memberConfigurationDecoded = try containerValues.decodeIfPresent(MemberConfiguration.self, forKey: .memberConfiguration)
        memberConfiguration = memberConfigurationDecoded
    }
}

extension CreateMemberOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateMemberOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceededException" : self = .resourceLimitExceededException(try ResourceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateMemberOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceLimitExceededException(ResourceLimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceNotReadyException(ResourceNotReadyException)
    case throttlingException(ThrottlingException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateMemberOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateMemberOutputResponse(memberId: \(String(describing: memberId)))"}
}

extension CreateMemberOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateMemberOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.memberId = output.memberId
        } else {
            self.memberId = nil
        }
    }
}

public struct CreateMemberOutputResponse: Equatable {
    /// <p>The unique identifier of the member.</p>
    public let memberId: String?

    public init (
        memberId: String? = nil
    )
    {
        self.memberId = memberId
    }
}

struct CreateMemberOutputResponseBody: Equatable {
    public let memberId: String?
}

extension CreateMemberOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case memberId = "MemberId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let memberIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .memberId)
        memberId = memberIdDecoded
    }
}

public struct CreateNetworkInputBodyMiddleware: Middleware {
    public let id: String = "CreateNetworkInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateNetworkInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateNetworkOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateNetworkInput>
    public typealias MOutput = OperationOutput<CreateNetworkOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateNetworkOutputError>
}

extension CreateNetworkInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateNetworkInput(clientRequestToken: \(String(describing: clientRequestToken)), description: \(String(describing: description)), framework: \(String(describing: framework)), frameworkConfiguration: \(String(describing: frameworkConfiguration)), frameworkVersion: \(String(describing: frameworkVersion)), memberConfiguration: \(String(describing: memberConfiguration)), name: \(String(describing: name)), tags: \(String(describing: tags)), votingPolicy: \(String(describing: votingPolicy)))"}
}

extension CreateNetworkInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case description = "Description"
        case framework = "Framework"
        case frameworkConfiguration = "FrameworkConfiguration"
        case frameworkVersion = "FrameworkVersion"
        case memberConfiguration = "MemberConfiguration"
        case name = "Name"
        case tags = "Tags"
        case votingPolicy = "VotingPolicy"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let framework = framework {
            try encodeContainer.encode(framework.rawValue, forKey: .framework)
        }
        if let frameworkConfiguration = frameworkConfiguration {
            try encodeContainer.encode(frameworkConfiguration, forKey: .frameworkConfiguration)
        }
        if let frameworkVersion = frameworkVersion {
            try encodeContainer.encode(frameworkVersion, forKey: .frameworkVersion)
        }
        if let memberConfiguration = memberConfiguration {
            try encodeContainer.encode(memberConfiguration, forKey: .memberConfiguration)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, inputtagmap0) in tags {
                try tagsContainer.encode(inputtagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let votingPolicy = votingPolicy {
            try encodeContainer.encode(votingPolicy, forKey: .votingPolicy)
        }
    }
}

public struct CreateNetworkInputHeadersMiddleware: Middleware {
    public let id: String = "CreateNetworkInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateNetworkInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateNetworkOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateNetworkInput>
    public typealias MOutput = OperationOutput<CreateNetworkOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateNetworkOutputError>
}

public struct CreateNetworkInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateNetworkInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateNetworkInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateNetworkOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateNetworkInput>
    public typealias MOutput = OperationOutput<CreateNetworkOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateNetworkOutputError>
}

public struct CreateNetworkInput: Equatable {
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an AWS SDK or the AWS CLI.</p>
    public var clientRequestToken: String?
    /// <p>An optional description for the network.</p>
    public let description: String?
    /// <p>The blockchain framework that the network uses.</p>
    public let framework: Framework?
    /// <p>
    ///          Configuration properties of the blockchain framework relevant to the network configuration.
    ///       </p>
    public let frameworkConfiguration: NetworkFrameworkConfiguration?
    /// <p>The version of the blockchain framework that the network uses.</p>
    public let frameworkVersion: String?
    /// <p>Configuration properties for the first member within the network.</p>
    public let memberConfiguration: MemberConfiguration?
    /// <p>The name of the network.</p>
    public let name: String?
    /// <p>Tags to assign to the network. Each tag consists of a key and optional value.</p>
    ///          <p>When specifying tags during creation, you can specify multiple key-value pairs in a single request, with an overall maximum of 50 tags added to each resource.</p>
    ///          <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    public let tags: [String:String]?
    /// <p>
    ///          The voting rules used by the network to determine if a proposal is approved.
    ///       </p>
    public let votingPolicy: VotingPolicy?

    public init (
        clientRequestToken: String? = nil,
        description: String? = nil,
        framework: Framework? = nil,
        frameworkConfiguration: NetworkFrameworkConfiguration? = nil,
        frameworkVersion: String? = nil,
        memberConfiguration: MemberConfiguration? = nil,
        name: String? = nil,
        tags: [String:String]? = nil,
        votingPolicy: VotingPolicy? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.description = description
        self.framework = framework
        self.frameworkConfiguration = frameworkConfiguration
        self.frameworkVersion = frameworkVersion
        self.memberConfiguration = memberConfiguration
        self.name = name
        self.tags = tags
        self.votingPolicy = votingPolicy
    }
}

struct CreateNetworkInputBody: Equatable {
    public let clientRequestToken: String?
    public let name: String?
    public let description: String?
    public let framework: Framework?
    public let frameworkVersion: String?
    public let frameworkConfiguration: NetworkFrameworkConfiguration?
    public let votingPolicy: VotingPolicy?
    public let memberConfiguration: MemberConfiguration?
    public let tags: [String:String]?
}

extension CreateNetworkInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case description = "Description"
        case framework = "Framework"
        case frameworkConfiguration = "FrameworkConfiguration"
        case frameworkVersion = "FrameworkVersion"
        case memberConfiguration = "MemberConfiguration"
        case name = "Name"
        case tags = "Tags"
        case votingPolicy = "VotingPolicy"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let frameworkDecoded = try containerValues.decodeIfPresent(Framework.self, forKey: .framework)
        framework = frameworkDecoded
        let frameworkVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .frameworkVersion)
        frameworkVersion = frameworkVersionDecoded
        let frameworkConfigurationDecoded = try containerValues.decodeIfPresent(NetworkFrameworkConfiguration.self, forKey: .frameworkConfiguration)
        frameworkConfiguration = frameworkConfigurationDecoded
        let votingPolicyDecoded = try containerValues.decodeIfPresent(VotingPolicy.self, forKey: .votingPolicy)
        votingPolicy = votingPolicyDecoded
        let memberConfigurationDecoded = try containerValues.decodeIfPresent(MemberConfiguration.self, forKey: .memberConfiguration)
        memberConfiguration = memberConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateNetworkOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateNetworkOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceededException" : self = .resourceLimitExceededException(try ResourceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateNetworkOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceLimitExceededException(ResourceLimitExceededException)
    case throttlingException(ThrottlingException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateNetworkOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateNetworkOutputResponse(memberId: \(String(describing: memberId)), networkId: \(String(describing: networkId)))"}
}

extension CreateNetworkOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateNetworkOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.memberId = output.memberId
            self.networkId = output.networkId
        } else {
            self.memberId = nil
            self.networkId = nil
        }
    }
}

public struct CreateNetworkOutputResponse: Equatable {
    /// <p>The unique identifier for the first member within the network.</p>
    public let memberId: String?
    /// <p>The unique identifier for the network.</p>
    public let networkId: String?

    public init (
        memberId: String? = nil,
        networkId: String? = nil
    )
    {
        self.memberId = memberId
        self.networkId = networkId
    }
}

struct CreateNetworkOutputResponseBody: Equatable {
    public let networkId: String?
    public let memberId: String?
}

extension CreateNetworkOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case memberId = "MemberId"
        case networkId = "NetworkId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkId)
        networkId = networkIdDecoded
        let memberIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .memberId)
        memberId = memberIdDecoded
    }
}

public struct CreateNodeInputBodyMiddleware: Middleware {
    public let id: String = "CreateNodeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateNodeInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateNodeInput>
    public typealias MOutput = OperationOutput<CreateNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateNodeOutputError>
}

extension CreateNodeInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateNodeInput(clientRequestToken: \(String(describing: clientRequestToken)), memberId: \(String(describing: memberId)), networkId: \(String(describing: networkId)), nodeConfiguration: \(String(describing: nodeConfiguration)), tags: \(String(describing: tags)))"}
}

extension CreateNodeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case memberId = "MemberId"
        case nodeConfiguration = "NodeConfiguration"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let memberId = memberId {
            try encodeContainer.encode(memberId, forKey: .memberId)
        }
        if let nodeConfiguration = nodeConfiguration {
            try encodeContainer.encode(nodeConfiguration, forKey: .nodeConfiguration)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, inputtagmap0) in tags {
                try tagsContainer.encode(inputtagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}

public struct CreateNodeInputHeadersMiddleware: Middleware {
    public let id: String = "CreateNodeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateNodeInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateNodeInput>
    public typealias MOutput = OperationOutput<CreateNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateNodeOutputError>
}

public struct CreateNodeInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateNodeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateNodeInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateNodeInput>
    public typealias MOutput = OperationOutput<CreateNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateNodeOutputError>
}

public struct CreateNodeInput: Equatable {
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an AWS SDK or the AWS CLI.</p>
    public var clientRequestToken: String?
    /// <p>The unique identifier of the member that owns this node.</p>
    ///          <p>Applies only to Hyperledger Fabric.</p>
    public let memberId: String?
    /// <p>The unique identifier of the network for the node.</p>
    ///          <p>Ethereum public networks have the following <code>NetworkId</code>s:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>n-ethereum-mainnet</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>n-ethereum-rinkeby</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>n-ethereum-ropsten</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let networkId: String?
    /// <p>The properties of a node configuration.</p>
    public let nodeConfiguration: NodeConfiguration?
    /// <p>Tags to assign to the node. Each tag consists of a key and optional value.</p>
    ///          <p>When specifying tags during creation, you can specify multiple key-value pairs in a single request, with an overall maximum of 50 tags added to each resource.</p>
    ///          <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    public let tags: [String:String]?

    public init (
        clientRequestToken: String? = nil,
        memberId: String? = nil,
        networkId: String? = nil,
        nodeConfiguration: NodeConfiguration? = nil,
        tags: [String:String]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.memberId = memberId
        self.networkId = networkId
        self.nodeConfiguration = nodeConfiguration
        self.tags = tags
    }
}

struct CreateNodeInputBody: Equatable {
    public let clientRequestToken: String?
    public let memberId: String?
    public let nodeConfiguration: NodeConfiguration?
    public let tags: [String:String]?
}

extension CreateNodeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case memberId = "MemberId"
        case nodeConfiguration = "NodeConfiguration"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let memberIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .memberId)
        memberId = memberIdDecoded
        let nodeConfigurationDecoded = try containerValues.decodeIfPresent(NodeConfiguration.self, forKey: .nodeConfiguration)
        nodeConfiguration = nodeConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateNodeOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateNodeOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceededException" : self = .resourceLimitExceededException(try ResourceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateNodeOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceLimitExceededException(ResourceLimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceNotReadyException(ResourceNotReadyException)
    case throttlingException(ThrottlingException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateNodeOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateNodeOutputResponse(nodeId: \(String(describing: nodeId)))"}
}

extension CreateNodeOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateNodeOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nodeId = output.nodeId
        } else {
            self.nodeId = nil
        }
    }
}

public struct CreateNodeOutputResponse: Equatable {
    /// <p>The unique identifier of the node.</p>
    public let nodeId: String?

    public init (
        nodeId: String? = nil
    )
    {
        self.nodeId = nodeId
    }
}

struct CreateNodeOutputResponseBody: Equatable {
    public let nodeId: String?
}

extension CreateNodeOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nodeId = "NodeId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nodeId)
        nodeId = nodeIdDecoded
    }
}

public struct CreateProposalInputBodyMiddleware: Middleware {
    public let id: String = "CreateProposalInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateProposalInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateProposalInput>
    public typealias MOutput = OperationOutput<CreateProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateProposalOutputError>
}

extension CreateProposalInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateProposalInput(actions: \(String(describing: actions)), clientRequestToken: \(String(describing: clientRequestToken)), description: \(String(describing: description)), memberId: \(String(describing: memberId)), networkId: \(String(describing: networkId)), tags: \(String(describing: tags)))"}
}

extension CreateProposalInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actions = "Actions"
        case clientRequestToken = "ClientRequestToken"
        case description = "Description"
        case memberId = "MemberId"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            try encodeContainer.encode(actions, forKey: .actions)
        }
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let memberId = memberId {
            try encodeContainer.encode(memberId, forKey: .memberId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, inputtagmap0) in tags {
                try tagsContainer.encode(inputtagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}

public struct CreateProposalInputHeadersMiddleware: Middleware {
    public let id: String = "CreateProposalInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateProposalInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateProposalInput>
    public typealias MOutput = OperationOutput<CreateProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateProposalOutputError>
}

public struct CreateProposalInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateProposalInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateProposalInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateProposalInput>
    public typealias MOutput = OperationOutput<CreateProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateProposalOutputError>
}

public struct CreateProposalInput: Equatable {
    /// <p>The type of actions proposed, such as inviting a member or removing a member. The types of <code>Actions</code> in a proposal are mutually exclusive. For example, a proposal with <code>Invitations</code> actions cannot also contain <code>Removals</code> actions.</p>
    public let actions: ProposalActions?
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an AWS SDK or the AWS CLI.</p>
    public var clientRequestToken: String?
    /// <p>A description for the proposal that is visible to voting members, for example, "Proposal to add Example Corp. as member."</p>
    public let description: String?
    /// <p>The unique identifier of the member that is creating the proposal. This identifier is especially useful for identifying the member making the proposal when multiple members exist in a single AWS account.</p>
    public let memberId: String?
    /// <p>
    ///          The unique identifier of the network for which the proposal is made.</p>
    public let networkId: String?
    /// <p>Tags to assign to the proposal. Each tag consists of a key and optional value.</p>
    ///          <p>When specifying tags during creation, you can specify multiple key-value pairs in a single request, with an overall maximum of 50 tags added to each resource. If the proposal is for a network invitation, the invitation inherits the tags added to the proposal.</p>
    ///          <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    public let tags: [String:String]?

    public init (
        actions: ProposalActions? = nil,
        clientRequestToken: String? = nil,
        description: String? = nil,
        memberId: String? = nil,
        networkId: String? = nil,
        tags: [String:String]? = nil
    )
    {
        self.actions = actions
        self.clientRequestToken = clientRequestToken
        self.description = description
        self.memberId = memberId
        self.networkId = networkId
        self.tags = tags
    }
}

struct CreateProposalInputBody: Equatable {
    public let clientRequestToken: String?
    public let memberId: String?
    public let actions: ProposalActions?
    public let description: String?
    public let tags: [String:String]?
}

extension CreateProposalInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case actions = "Actions"
        case clientRequestToken = "ClientRequestToken"
        case description = "Description"
        case memberId = "MemberId"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let memberIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .memberId)
        memberId = memberIdDecoded
        let actionsDecoded = try containerValues.decodeIfPresent(ProposalActions.self, forKey: .actions)
        actions = actionsDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateProposalOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateProposalOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateProposalOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceNotReadyException(ResourceNotReadyException)
    case throttlingException(ThrottlingException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateProposalOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateProposalOutputResponse(proposalId: \(String(describing: proposalId)))"}
}

extension CreateProposalOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: CreateProposalOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.proposalId = output.proposalId
        } else {
            self.proposalId = nil
        }
    }
}

public struct CreateProposalOutputResponse: Equatable {
    /// <p>The unique identifier of the proposal.</p>
    public let proposalId: String?

    public init (
        proposalId: String? = nil
    )
    {
        self.proposalId = proposalId
    }
}

struct CreateProposalOutputResponseBody: Equatable {
    public let proposalId: String?
}

extension CreateProposalOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case proposalId = "ProposalId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let proposalIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .proposalId)
        proposalId = proposalIdDecoded
    }
}

extension DeleteMemberInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteMemberInput(memberId: \(String(describing: memberId)), networkId: \(String(describing: networkId)))"}
}

extension DeleteMemberInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DeleteMemberInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteMemberInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMemberInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMemberInput>
    public typealias MOutput = OperationOutput<DeleteMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMemberOutputError>
}

public struct DeleteMemberInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteMemberInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteMemberInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteMemberInput>
    public typealias MOutput = OperationOutput<DeleteMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteMemberOutputError>
}

public struct DeleteMemberInput: Equatable {
    /// <p>The unique identifier of the member to remove.</p>
    public let memberId: String?
    /// <p>The unique identifier of the network from which the member is removed.</p>
    public let networkId: String?

    public init (
        memberId: String? = nil,
        networkId: String? = nil
    )
    {
        self.memberId = memberId
        self.networkId = networkId
    }
}

struct DeleteMemberInputBody: Equatable {
}

extension DeleteMemberInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteMemberOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMemberOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteMemberOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceNotReadyException(ResourceNotReadyException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMemberOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteMemberOutputResponse()"}
}

extension DeleteMemberOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteMemberOutputResponse: Equatable {

    public init() {}
}

struct DeleteMemberOutputResponseBody: Equatable {
}

extension DeleteMemberOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteNodeInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteNodeInput(memberId: \(String(describing: memberId)), networkId: \(String(describing: networkId)), nodeId: \(String(describing: nodeId)))"}
}

extension DeleteNodeInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct DeleteNodeInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteNodeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteNodeInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteNodeInput>
    public typealias MOutput = OperationOutput<DeleteNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteNodeOutputError>
}

public struct DeleteNodeInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteNodeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteNodeInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let memberId = input.operationInput.memberId {
            let memberIdQueryItem = URLQueryItem(name: "memberId".urlPercentEncoding(), value: String(memberId).urlPercentEncoding())
            input.builder.withQueryItem(memberIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteNodeInput>
    public typealias MOutput = OperationOutput<DeleteNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteNodeOutputError>
}

public struct DeleteNodeInput: Equatable {
    /// <p>The unique identifier of the member that owns this node.</p>
    ///          <p>Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.</p>
    public let memberId: String?
    /// <p>The unique identifier of the network that the node is on.</p>
    ///          <p>Ethereum public networks have the following <code>NetworkId</code>s:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>n-ethereum-mainnet</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>n-ethereum-rinkeby</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>n-ethereum-ropsten</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let networkId: String?
    /// <p>The unique identifier of the node.</p>
    public let nodeId: String?

    public init (
        memberId: String? = nil,
        networkId: String? = nil,
        nodeId: String? = nil
    )
    {
        self.memberId = memberId
        self.networkId = networkId
        self.nodeId = nodeId
    }
}

struct DeleteNodeInputBody: Equatable {
}

extension DeleteNodeInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension DeleteNodeOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteNodeOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteNodeOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceNotReadyException(ResourceNotReadyException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteNodeOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeleteNodeOutputResponse()"}
}

extension DeleteNodeOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct DeleteNodeOutputResponse: Equatable {

    public init() {}
}

struct DeleteNodeOutputResponseBody: Equatable {
}

extension DeleteNodeOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public enum Edition {
    case standard
    case starter
    case sdkUnknown(String)
}

extension Edition : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Edition] {
        return [
            .standard,
            .starter,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .standard: return "STANDARD"
        case .starter: return "STARTER"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Edition(rawValue: rawValue) ?? Edition.sdkUnknown(rawValue)
    }
}

public enum Framework {
    case ethereum
    case hyperledgerFabric
    case sdkUnknown(String)
}

extension Framework : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [Framework] {
        return [
            .ethereum,
            .hyperledgerFabric,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .ethereum: return "ETHEREUM"
        case .hyperledgerFabric: return "HYPERLEDGER_FABRIC"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = Framework(rawValue: rawValue) ?? Framework.sdkUnknown(rawValue)
    }
}

extension GetMemberInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetMemberInput(memberId: \(String(describing: memberId)), networkId: \(String(describing: networkId)))"}
}

extension GetMemberInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct GetMemberInputHeadersMiddleware: Middleware {
    public let id: String = "GetMemberInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetMemberInput>,
                  next: H) -> Swift.Result<OperationOutput<GetMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetMemberInput>
    public typealias MOutput = OperationOutput<GetMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetMemberOutputError>
}

public struct GetMemberInputQueryItemMiddleware: Middleware {
    public let id: String = "GetMemberInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetMemberInput>,
                  next: H) -> Swift.Result<OperationOutput<GetMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetMemberInput>
    public typealias MOutput = OperationOutput<GetMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetMemberOutputError>
}

public struct GetMemberInput: Equatable {
    /// <p>The unique identifier of the member.</p>
    public let memberId: String?
    /// <p>The unique identifier of the network to which the member belongs.</p>
    public let networkId: String?

    public init (
        memberId: String? = nil,
        networkId: String? = nil
    )
    {
        self.memberId = memberId
        self.networkId = networkId
    }
}

struct GetMemberInputBody: Equatable {
}

extension GetMemberInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension GetMemberOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetMemberOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetMemberOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMemberOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetMemberOutputResponse(member: \(String(describing: member)))"}
}

extension GetMemberOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetMemberOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.member = output.member
        } else {
            self.member = nil
        }
    }
}

public struct GetMemberOutputResponse: Equatable {
    /// <p>The properties of a member.</p>
    public let member: Member?

    public init (
        member: Member? = nil
    )
    {
        self.member = member
    }
}

struct GetMemberOutputResponseBody: Equatable {
    public let member: Member?
}

extension GetMemberOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case member = "Member"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let memberDecoded = try containerValues.decodeIfPresent(Member.self, forKey: .member)
        member = memberDecoded
    }
}

extension GetNetworkInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetNetworkInput(networkId: \(String(describing: networkId)))"}
}

extension GetNetworkInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct GetNetworkInputHeadersMiddleware: Middleware {
    public let id: String = "GetNetworkInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetNetworkInput>,
                  next: H) -> Swift.Result<OperationOutput<GetNetworkOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetNetworkInput>
    public typealias MOutput = OperationOutput<GetNetworkOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetNetworkOutputError>
}

public struct GetNetworkInputQueryItemMiddleware: Middleware {
    public let id: String = "GetNetworkInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetNetworkInput>,
                  next: H) -> Swift.Result<OperationOutput<GetNetworkOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetNetworkInput>
    public typealias MOutput = OperationOutput<GetNetworkOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetNetworkOutputError>
}

public struct GetNetworkInput: Equatable {
    /// <p>The unique identifier of the network to get information about.</p>
    public let networkId: String?

    public init (
        networkId: String? = nil
    )
    {
        self.networkId = networkId
    }
}

struct GetNetworkInputBody: Equatable {
}

extension GetNetworkInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension GetNetworkOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetNetworkOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetNetworkOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetNetworkOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetNetworkOutputResponse(network: \(String(describing: network)))"}
}

extension GetNetworkOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetNetworkOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.network = output.network
        } else {
            self.network = nil
        }
    }
}

public struct GetNetworkOutputResponse: Equatable {
    /// <p>An object containing network configuration parameters.</p>
    public let network: Network?

    public init (
        network: Network? = nil
    )
    {
        self.network = network
    }
}

struct GetNetworkOutputResponseBody: Equatable {
    public let network: Network?
}

extension GetNetworkOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case network = "Network"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkDecoded = try containerValues.decodeIfPresent(Network.self, forKey: .network)
        network = networkDecoded
    }
}

extension GetNodeInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetNodeInput(memberId: \(String(describing: memberId)), networkId: \(String(describing: networkId)), nodeId: \(String(describing: nodeId)))"}
}

extension GetNodeInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct GetNodeInputHeadersMiddleware: Middleware {
    public let id: String = "GetNodeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetNodeInput>,
                  next: H) -> Swift.Result<OperationOutput<GetNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetNodeInput>
    public typealias MOutput = OperationOutput<GetNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetNodeOutputError>
}

public struct GetNodeInputQueryItemMiddleware: Middleware {
    public let id: String = "GetNodeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetNodeInput>,
                  next: H) -> Swift.Result<OperationOutput<GetNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let memberId = input.operationInput.memberId {
            let memberIdQueryItem = URLQueryItem(name: "memberId".urlPercentEncoding(), value: String(memberId).urlPercentEncoding())
            input.builder.withQueryItem(memberIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetNodeInput>
    public typealias MOutput = OperationOutput<GetNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetNodeOutputError>
}

public struct GetNodeInput: Equatable {
    /// <p>The unique identifier of the member that owns the node.</p>
    ///          <p>Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.</p>
    public let memberId: String?
    /// <p>The unique identifier of the network that the node is on.</p>
    public let networkId: String?
    /// <p>The unique identifier of the node.</p>
    public let nodeId: String?

    public init (
        memberId: String? = nil,
        networkId: String? = nil,
        nodeId: String? = nil
    )
    {
        self.memberId = memberId
        self.networkId = networkId
        self.nodeId = nodeId
    }
}

struct GetNodeInputBody: Equatable {
}

extension GetNodeInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension GetNodeOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetNodeOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetNodeOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetNodeOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetNodeOutputResponse(node: \(String(describing: node)))"}
}

extension GetNodeOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetNodeOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.node = output.node
        } else {
            self.node = nil
        }
    }
}

public struct GetNodeOutputResponse: Equatable {
    /// <p>Properties of the node configuration.</p>
    public let node: Node?

    public init (
        node: Node? = nil
    )
    {
        self.node = node
    }
}

struct GetNodeOutputResponseBody: Equatable {
    public let node: Node?
}

extension GetNodeOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case node = "Node"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeDecoded = try containerValues.decodeIfPresent(Node.self, forKey: .node)
        node = nodeDecoded
    }
}

extension GetProposalInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetProposalInput(networkId: \(String(describing: networkId)), proposalId: \(String(describing: proposalId)))"}
}

extension GetProposalInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct GetProposalInputHeadersMiddleware: Middleware {
    public let id: String = "GetProposalInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetProposalInput>,
                  next: H) -> Swift.Result<OperationOutput<GetProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetProposalInput>
    public typealias MOutput = OperationOutput<GetProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetProposalOutputError>
}

public struct GetProposalInputQueryItemMiddleware: Middleware {
    public let id: String = "GetProposalInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetProposalInput>,
                  next: H) -> Swift.Result<OperationOutput<GetProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetProposalInput>
    public typealias MOutput = OperationOutput<GetProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetProposalOutputError>
}

public struct GetProposalInput: Equatable {
    /// <p>The unique identifier of the network for which the proposal is made.</p>
    public let networkId: String?
    /// <p>The unique identifier of the proposal.</p>
    public let proposalId: String?

    public init (
        networkId: String? = nil,
        proposalId: String? = nil
    )
    {
        self.networkId = networkId
        self.proposalId = proposalId
    }
}

struct GetProposalInputBody: Equatable {
}

extension GetProposalInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension GetProposalOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetProposalOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetProposalOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetProposalOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetProposalOutputResponse(proposal: \(String(describing: proposal)))"}
}

extension GetProposalOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: GetProposalOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.proposal = output.proposal
        } else {
            self.proposal = nil
        }
    }
}

public struct GetProposalOutputResponse: Equatable {
    /// <p>Information about a proposal.</p>
    public let proposal: Proposal?

    public init (
        proposal: Proposal? = nil
    )
    {
        self.proposal = proposal
    }
}

struct GetProposalOutputResponseBody: Equatable {
    public let proposal: Proposal?
}

extension GetProposalOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case proposal = "Proposal"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let proposalDecoded = try containerValues.decodeIfPresent(Proposal.self, forKey: .proposal)
        proposal = proposalDecoded
    }
}

extension IllegalActionException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "IllegalActionException(message: \(String(describing: message)))"}
}

extension IllegalActionException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: IllegalActionExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p></p>
public struct IllegalActionException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct IllegalActionExceptionBody: Equatable {
    public let message: String?
}

extension IllegalActionExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InternalServiceErrorException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InternalServiceErrorException()"}
}

extension InternalServiceErrorException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request processing has failed because of an unknown error, exception or failure.</p>
public struct InternalServiceErrorException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .server

    public init() {}
}

extension InvalidRequestException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InvalidRequestException(message: \(String(describing: message)))"}
}

extension InvalidRequestException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: InvalidRequestExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The action or operation requested is invalid. Verify that the action is typed correctly.</p>
public struct InvalidRequestException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidRequestExceptionBody: Equatable {
    public let message: String?
}

extension InvalidRequestExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Invitation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case creationDate = "CreationDate"
        case expirationDate = "ExpirationDate"
        case invitationId = "InvitationId"
        case networkSummary = "NetworkSummary"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let expirationDate = expirationDate {
            try encodeContainer.encode(expirationDate.timeIntervalSince1970, forKey: .expirationDate)
        }
        if let invitationId = invitationId {
            try encodeContainer.encode(invitationId, forKey: .invitationId)
        }
        if let networkSummary = networkSummary {
            try encodeContainer.encode(networkSummary, forKey: .networkSummary)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let invitationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .invitationId)
        invitationId = invitationIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let expirationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .expirationDate)
        expirationDate = expirationDateDecoded
        let statusDecoded = try containerValues.decodeIfPresent(InvitationStatus.self, forKey: .status)
        status = statusDecoded
        let networkSummaryDecoded = try containerValues.decodeIfPresent(NetworkSummary.self, forKey: .networkSummary)
        networkSummary = networkSummaryDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension Invitation: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Invitation(arn: \(String(describing: arn)), creationDate: \(String(describing: creationDate)), expirationDate: \(String(describing: expirationDate)), invitationId: \(String(describing: invitationId)), networkSummary: \(String(describing: networkSummary)), status: \(String(describing: status)))"}
}

/// <p>An invitation to an AWS account to create a member and join the network.</p>
///          <p>Applies only to Hyperledger Fabric.</p>
public struct Invitation: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the invitation. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    public let arn: String?
    /// <p>The date and time that the invitation was created.</p>
    public let creationDate: Date?
    /// <p>The date and time that the invitation expires. This is the <code>CreationDate</code> plus the <code>ProposalDurationInHours</code> that is specified in the <code>ProposalThresholdPolicy</code>. After this date and time, the invitee can no longer create a member and join the network using this <code>InvitationId</code>.</p>
    public let expirationDate: Date?
    /// <p>The unique identifier for the invitation.</p>
    public let invitationId: String?
    /// <p>A summary of network configuration properties.</p>
    public let networkSummary: NetworkSummary?
    /// <p>The status of the invitation:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>PENDING</code> - The invitee has not created a member to join the network, and the invitation has not yet expired.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ACCEPTING</code> - The invitee has begun creating a member, and creation has not yet completed.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ACCEPTED</code> - The invitee created a member and joined the network using the <code>InvitationID</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>REJECTED</code> - The invitee rejected the invitation.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>EXPIRED</code> - The invitee neither created a member nor rejected the invitation before the <code>ExpirationDate</code>.</p>
    ///             </li>
    ///          </ul>
    public let status: InvitationStatus?

    public init (
        arn: String? = nil,
        creationDate: Date? = nil,
        expirationDate: Date? = nil,
        invitationId: String? = nil,
        networkSummary: NetworkSummary? = nil,
        status: InvitationStatus? = nil
    )
    {
        self.arn = arn
        self.creationDate = creationDate
        self.expirationDate = expirationDate
        self.invitationId = invitationId
        self.networkSummary = networkSummary
        self.status = status
    }
}

public enum InvitationStatus {
    case accepted
    case accepting
    case expired
    case pending
    case rejected
    case sdkUnknown(String)
}

extension InvitationStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [InvitationStatus] {
        return [
            .accepted,
            .accepting,
            .expired,
            .pending,
            .rejected,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .accepted: return "ACCEPTED"
        case .accepting: return "ACCEPTING"
        case .expired: return "EXPIRED"
        case .pending: return "PENDING"
        case .rejected: return "REJECTED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = InvitationStatus(rawValue: rawValue) ?? InvitationStatus.sdkUnknown(rawValue)
    }
}

extension InviteAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case principal = "Principal"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let principal = principal {
            try encodeContainer.encode(principal, forKey: .principal)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let principalDecoded = try containerValues.decodeIfPresent(String.self, forKey: .principal)
        principal = principalDecoded
    }
}

extension InviteAction: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InviteAction(principal: \(String(describing: principal)))"}
}

/// <p>An action to invite a specific AWS account to create a member and join the network. The <code>InviteAction</code> is carried out when a <code>Proposal</code> is <code>APPROVED</code>.</p>
///          <p>Applies only to Hyperledger Fabric.</p>
public struct InviteAction: Equatable {
    /// <p>The AWS account ID to invite.</p>
    public let principal: String?

    public init (
        principal: String? = nil
    )
    {
        self.principal = principal
    }
}

extension ListInvitationsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListInvitationsInput(maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)))"}
}

extension ListInvitationsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListInvitationsInputHeadersMiddleware: Middleware {
    public let id: String = "ListInvitationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListInvitationsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListInvitationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListInvitationsInput>
    public typealias MOutput = OperationOutput<ListInvitationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListInvitationsOutputError>
}

public struct ListInvitationsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListInvitationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListInvitationsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListInvitationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListInvitationsInput>
    public typealias MOutput = OperationOutput<ListInvitationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListInvitationsOutputError>
}

public struct ListInvitationsInput: Equatable {
    /// <p>The maximum number of invitations to return.</p>
    public let maxResults: Int?
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    public let nextToken: String?

    public init (
        maxResults: Int? = nil,
        nextToken: String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListInvitationsInputBody: Equatable {
}

extension ListInvitationsInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListInvitationsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInvitationsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceLimitExceededException" : self = .resourceLimitExceededException(try ResourceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListInvitationsOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceLimitExceededException(ResourceLimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInvitationsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListInvitationsOutputResponse(invitations: \(String(describing: invitations)), nextToken: \(String(describing: nextToken)))"}
}

extension ListInvitationsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListInvitationsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.invitations = output.invitations
            self.nextToken = output.nextToken
        } else {
            self.invitations = nil
            self.nextToken = nil
        }
    }
}

public struct ListInvitationsOutputResponse: Equatable {
    /// <p>The invitations for the network.</p>
    public let invitations: [Invitation]?
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    public let nextToken: String?

    public init (
        invitations: [Invitation]? = nil,
        nextToken: String? = nil
    )
    {
        self.invitations = invitations
        self.nextToken = nextToken
    }
}

struct ListInvitationsOutputResponseBody: Equatable {
    public let invitations: [Invitation]?
    public let nextToken: String?
}

extension ListInvitationsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case invitations = "Invitations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let invitationsContainer = try containerValues.decodeIfPresent([Invitation?].self, forKey: .invitations)
        var invitationsDecoded0:[Invitation]? = nil
        if let invitationsContainer = invitationsContainer {
            invitationsDecoded0 = [Invitation]()
            for structure0 in invitationsContainer {
                if let structure0 = structure0 {
                    invitationsDecoded0?.append(structure0)
                }
            }
        }
        invitations = invitationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListMembersInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListMembersInput(isOwned: \(String(describing: isOwned)), maxResults: \(String(describing: maxResults)), name: \(String(describing: name)), networkId: \(String(describing: networkId)), nextToken: \(String(describing: nextToken)), status: \(String(describing: status)))"}
}

extension ListMembersInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListMembersInputHeadersMiddleware: Middleware {
    public let id: String = "ListMembersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListMembersInput>,
                  next: H) -> Swift.Result<OperationOutput<ListMembersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListMembersInput>
    public typealias MOutput = OperationOutput<ListMembersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListMembersOutputError>
}

public struct ListMembersInputQueryItemMiddleware: Middleware {
    public let id: String = "ListMembersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListMembersInput>,
                  next: H) -> Swift.Result<OperationOutput<ListMembersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let status = input.operationInput.status {
            let statusQueryItem = URLQueryItem(name: "status".urlPercentEncoding(), value: String(status.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(statusQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let isOwned = input.operationInput.isOwned {
            let isOwnedQueryItem = URLQueryItem(name: "isOwned".urlPercentEncoding(), value: String(isOwned).urlPercentEncoding())
            input.builder.withQueryItem(isOwnedQueryItem)
        }
        if let name = input.operationInput.name {
            let nameQueryItem = URLQueryItem(name: "name".urlPercentEncoding(), value: String(name).urlPercentEncoding())
            input.builder.withQueryItem(nameQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListMembersInput>
    public typealias MOutput = OperationOutput<ListMembersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListMembersOutputError>
}

public struct ListMembersInput: Equatable {
    /// <p>An optional Boolean value. If provided, the request is limited either to
    ///          members that the current AWS account owns (<code>true</code>) or that other AWS accounts
    ///          own (<code>false</code>). If omitted, all members are listed.</p>
    public let isOwned: Bool?
    /// <p>The maximum number of members to return in the request.</p>
    public let maxResults: Int?
    /// <p>The optional name of the member to list.</p>
    public let name: String?
    /// <p>The unique identifier of the network for which to list members.</p>
    public let networkId: String?
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    public let nextToken: String?
    /// <p>An optional status specifier. If provided, only members currently in this status are listed.</p>
    public let status: MemberStatus?

    public init (
        isOwned: Bool? = nil,
        maxResults: Int? = nil,
        name: String? = nil,
        networkId: String? = nil,
        nextToken: String? = nil,
        status: MemberStatus? = nil
    )
    {
        self.isOwned = isOwned
        self.maxResults = maxResults
        self.name = name
        self.networkId = networkId
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListMembersInputBody: Equatable {
}

extension ListMembersInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListMembersOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListMembersOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListMembersOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMembersOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListMembersOutputResponse(members: \(String(describing: members)), nextToken: \(String(describing: nextToken)))"}
}

extension ListMembersOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListMembersOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.members = output.members
            self.nextToken = output.nextToken
        } else {
            self.members = nil
            self.nextToken = nil
        }
    }
}

public struct ListMembersOutputResponse: Equatable {
    /// <p>An array of <code>MemberSummary</code> objects. Each object contains details about a network member.</p>
    public let members: [MemberSummary]?
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    public let nextToken: String?

    public init (
        members: [MemberSummary]? = nil,
        nextToken: String? = nil
    )
    {
        self.members = members
        self.nextToken = nextToken
    }
}

struct ListMembersOutputResponseBody: Equatable {
    public let members: [MemberSummary]?
    public let nextToken: String?
}

extension ListMembersOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case members = "Members"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let membersContainer = try containerValues.decodeIfPresent([MemberSummary?].self, forKey: .members)
        var membersDecoded0:[MemberSummary]? = nil
        if let membersContainer = membersContainer {
            membersDecoded0 = [MemberSummary]()
            for structure0 in membersContainer {
                if let structure0 = structure0 {
                    membersDecoded0?.append(structure0)
                }
            }
        }
        members = membersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListNetworksInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListNetworksInput(framework: \(String(describing: framework)), maxResults: \(String(describing: maxResults)), name: \(String(describing: name)), nextToken: \(String(describing: nextToken)), status: \(String(describing: status)))"}
}

extension ListNetworksInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListNetworksInputHeadersMiddleware: Middleware {
    public let id: String = "ListNetworksInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListNetworksInput>,
                  next: H) -> Swift.Result<OperationOutput<ListNetworksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListNetworksInput>
    public typealias MOutput = OperationOutput<ListNetworksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListNetworksOutputError>
}

public struct ListNetworksInputQueryItemMiddleware: Middleware {
    public let id: String = "ListNetworksInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListNetworksInput>,
                  next: H) -> Swift.Result<OperationOutput<ListNetworksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let status = input.operationInput.status {
            let statusQueryItem = URLQueryItem(name: "status".urlPercentEncoding(), value: String(status.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(statusQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if let framework = input.operationInput.framework {
            let frameworkQueryItem = URLQueryItem(name: "framework".urlPercentEncoding(), value: String(framework.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(frameworkQueryItem)
        }
        if let name = input.operationInput.name {
            let nameQueryItem = URLQueryItem(name: "name".urlPercentEncoding(), value: String(name).urlPercentEncoding())
            input.builder.withQueryItem(nameQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListNetworksInput>
    public typealias MOutput = OperationOutput<ListNetworksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListNetworksOutputError>
}

public struct ListNetworksInput: Equatable {
    /// <p>An optional framework specifier. If provided, only networks of this framework type are listed.</p>
    public let framework: Framework?
    /// <p>The maximum number of networks to list.</p>
    public let maxResults: Int?
    /// <p>The name of the network.</p>
    public let name: String?
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    public let nextToken: String?
    /// <p>An optional status specifier. If provided, only networks currently in this status are listed.</p>
    ///          <p>Applies only to Hyperledger Fabric.</p>
    public let status: NetworkStatus?

    public init (
        framework: Framework? = nil,
        maxResults: Int? = nil,
        name: String? = nil,
        nextToken: String? = nil,
        status: NetworkStatus? = nil
    )
    {
        self.framework = framework
        self.maxResults = maxResults
        self.name = name
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListNetworksInputBody: Equatable {
}

extension ListNetworksInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListNetworksOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListNetworksOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListNetworksOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListNetworksOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListNetworksOutputResponse(networks: \(String(describing: networks)), nextToken: \(String(describing: nextToken)))"}
}

extension ListNetworksOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListNetworksOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.networks = output.networks
            self.nextToken = output.nextToken
        } else {
            self.networks = nil
            self.nextToken = nil
        }
    }
}

public struct ListNetworksOutputResponse: Equatable {
    /// <p>An array of <code>NetworkSummary</code> objects that contain configuration properties for each network.</p>
    public let networks: [NetworkSummary]?
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    public let nextToken: String?

    public init (
        networks: [NetworkSummary]? = nil,
        nextToken: String? = nil
    )
    {
        self.networks = networks
        self.nextToken = nextToken
    }
}

struct ListNetworksOutputResponseBody: Equatable {
    public let networks: [NetworkSummary]?
    public let nextToken: String?
}

extension ListNetworksOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case networks = "Networks"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networksContainer = try containerValues.decodeIfPresent([NetworkSummary?].self, forKey: .networks)
        var networksDecoded0:[NetworkSummary]? = nil
        if let networksContainer = networksContainer {
            networksDecoded0 = [NetworkSummary]()
            for structure0 in networksContainer {
                if let structure0 = structure0 {
                    networksDecoded0?.append(structure0)
                }
            }
        }
        networks = networksDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListNodesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListNodesInput(maxResults: \(String(describing: maxResults)), memberId: \(String(describing: memberId)), networkId: \(String(describing: networkId)), nextToken: \(String(describing: nextToken)), status: \(String(describing: status)))"}
}

extension ListNodesInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListNodesInputHeadersMiddleware: Middleware {
    public let id: String = "ListNodesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListNodesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListNodesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListNodesInput>
    public typealias MOutput = OperationOutput<ListNodesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListNodesOutputError>
}

public struct ListNodesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListNodesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListNodesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListNodesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let status = input.operationInput.status {
            let statusQueryItem = URLQueryItem(name: "status".urlPercentEncoding(), value: String(status.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(statusQueryItem)
        }
        if let memberId = input.operationInput.memberId {
            let memberIdQueryItem = URLQueryItem(name: "memberId".urlPercentEncoding(), value: String(memberId).urlPercentEncoding())
            input.builder.withQueryItem(memberIdQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListNodesInput>
    public typealias MOutput = OperationOutput<ListNodesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListNodesOutputError>
}

public struct ListNodesInput: Equatable {
    /// <p>The maximum number of nodes to list.</p>
    public let maxResults: Int?
    /// <p>The unique identifier of the member who owns the nodes to list.</p>
    ///          <p>Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.</p>
    public let memberId: String?
    /// <p>The unique identifier of the network for which to list nodes.</p>
    public let networkId: String?
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    public let nextToken: String?
    /// <p>An optional status specifier. If provided, only nodes currently in this status are listed.</p>
    public let status: NodeStatus?

    public init (
        maxResults: Int? = nil,
        memberId: String? = nil,
        networkId: String? = nil,
        nextToken: String? = nil,
        status: NodeStatus? = nil
    )
    {
        self.maxResults = maxResults
        self.memberId = memberId
        self.networkId = networkId
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListNodesInputBody: Equatable {
}

extension ListNodesInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListNodesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListNodesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListNodesOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListNodesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListNodesOutputResponse(nextToken: \(String(describing: nextToken)), nodes: \(String(describing: nodes)))"}
}

extension ListNodesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListNodesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.nodes = output.nodes
        } else {
            self.nextToken = nil
            self.nodes = nil
        }
    }
}

public struct ListNodesOutputResponse: Equatable {
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    public let nextToken: String?
    /// <p>An array of <code>NodeSummary</code> objects that contain configuration properties for each node.</p>
    public let nodes: [NodeSummary]?

    public init (
        nextToken: String? = nil,
        nodes: [NodeSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.nodes = nodes
    }
}

struct ListNodesOutputResponseBody: Equatable {
    public let nodes: [NodeSummary]?
    public let nextToken: String?
}

extension ListNodesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case nodes = "Nodes"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodesContainer = try containerValues.decodeIfPresent([NodeSummary?].self, forKey: .nodes)
        var nodesDecoded0:[NodeSummary]? = nil
        if let nodesContainer = nodesContainer {
            nodesDecoded0 = [NodeSummary]()
            for structure0 in nodesContainer {
                if let structure0 = structure0 {
                    nodesDecoded0?.append(structure0)
                }
            }
        }
        nodes = nodesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListProposalVotesInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListProposalVotesInput(maxResults: \(String(describing: maxResults)), networkId: \(String(describing: networkId)), nextToken: \(String(describing: nextToken)), proposalId: \(String(describing: proposalId)))"}
}

extension ListProposalVotesInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListProposalVotesInputHeadersMiddleware: Middleware {
    public let id: String = "ListProposalVotesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListProposalVotesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListProposalVotesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListProposalVotesInput>
    public typealias MOutput = OperationOutput<ListProposalVotesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListProposalVotesOutputError>
}

public struct ListProposalVotesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListProposalVotesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListProposalVotesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListProposalVotesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListProposalVotesInput>
    public typealias MOutput = OperationOutput<ListProposalVotesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListProposalVotesOutputError>
}

public struct ListProposalVotesInput: Equatable {
    /// <p>
    ///          The maximum number of votes to return.
    ///       </p>
    public let maxResults: Int?
    /// <p>
    ///          The unique identifier of the network.
    ///       </p>
    public let networkId: String?
    /// <p>
    ///          The pagination token that indicates the next set of results to retrieve.
    ///       </p>
    public let nextToken: String?
    /// <p>
    ///          The unique identifier of the proposal.
    ///       </p>
    public let proposalId: String?

    public init (
        maxResults: Int? = nil,
        networkId: String? = nil,
        nextToken: String? = nil,
        proposalId: String? = nil
    )
    {
        self.maxResults = maxResults
        self.networkId = networkId
        self.nextToken = nextToken
        self.proposalId = proposalId
    }
}

struct ListProposalVotesInputBody: Equatable {
}

extension ListProposalVotesInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListProposalVotesOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListProposalVotesOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListProposalVotesOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListProposalVotesOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListProposalVotesOutputResponse(nextToken: \(String(describing: nextToken)), proposalVotes: \(String(describing: proposalVotes)))"}
}

extension ListProposalVotesOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListProposalVotesOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.proposalVotes = output.proposalVotes
        } else {
            self.nextToken = nil
            self.proposalVotes = nil
        }
    }
}

public struct ListProposalVotesOutputResponse: Equatable {
    /// <p>
    ///          The pagination token that indicates the next set of results to retrieve.
    ///       </p>
    public let nextToken: String?
    /// <p>
    ///          The list of votes.
    ///       </p>
    public let proposalVotes: [VoteSummary]?

    public init (
        nextToken: String? = nil,
        proposalVotes: [VoteSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.proposalVotes = proposalVotes
    }
}

struct ListProposalVotesOutputResponseBody: Equatable {
    public let proposalVotes: [VoteSummary]?
    public let nextToken: String?
}

extension ListProposalVotesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case proposalVotes = "ProposalVotes"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let proposalVotesContainer = try containerValues.decodeIfPresent([VoteSummary?].self, forKey: .proposalVotes)
        var proposalVotesDecoded0:[VoteSummary]? = nil
        if let proposalVotesContainer = proposalVotesContainer {
            proposalVotesDecoded0 = [VoteSummary]()
            for structure0 in proposalVotesContainer {
                if let structure0 = structure0 {
                    proposalVotesDecoded0?.append(structure0)
                }
            }
        }
        proposalVotes = proposalVotesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListProposalsInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListProposalsInput(maxResults: \(String(describing: maxResults)), networkId: \(String(describing: networkId)), nextToken: \(String(describing: nextToken)))"}
}

extension ListProposalsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListProposalsInputHeadersMiddleware: Middleware {
    public let id: String = "ListProposalsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListProposalsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListProposalsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListProposalsInput>
    public typealias MOutput = OperationOutput<ListProposalsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListProposalsOutputError>
}

public struct ListProposalsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListProposalsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListProposalsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListProposalsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "nextToken".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = URLQueryItem(name: "maxResults".urlPercentEncoding(), value: String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListProposalsInput>
    public typealias MOutput = OperationOutput<ListProposalsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListProposalsOutputError>
}

public struct ListProposalsInput: Equatable {
    /// <p>
    ///          The maximum number of proposals to return.
    ///       </p>
    public let maxResults: Int?
    /// <p>
    ///          The unique identifier of the network.
    ///       </p>
    public let networkId: String?
    /// <p>
    ///          The pagination token that indicates the next set of results to retrieve.
    ///       </p>
    public let nextToken: String?

    public init (
        maxResults: Int? = nil,
        networkId: String? = nil,
        nextToken: String? = nil
    )
    {
        self.maxResults = maxResults
        self.networkId = networkId
        self.nextToken = nextToken
    }
}

struct ListProposalsInputBody: Equatable {
}

extension ListProposalsInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListProposalsOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListProposalsOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListProposalsOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListProposalsOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListProposalsOutputResponse(nextToken: \(String(describing: nextToken)), proposals: \(String(describing: proposals)))"}
}

extension ListProposalsOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListProposalsOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.nextToken = output.nextToken
            self.proposals = output.proposals
        } else {
            self.nextToken = nil
            self.proposals = nil
        }
    }
}

public struct ListProposalsOutputResponse: Equatable {
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    public let nextToken: String?
    /// <p>The summary of each proposal made on the network.</p>
    public let proposals: [ProposalSummary]?

    public init (
        nextToken: String? = nil,
        proposals: [ProposalSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.proposals = proposals
    }
}

struct ListProposalsOutputResponseBody: Equatable {
    public let proposals: [ProposalSummary]?
    public let nextToken: String?
}

extension ListProposalsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case proposals = "Proposals"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let proposalsContainer = try containerValues.decodeIfPresent([ProposalSummary?].self, forKey: .proposals)
        var proposalsDecoded0:[ProposalSummary]? = nil
        if let proposalsContainer = proposalsContainer {
            proposalsDecoded0 = [ProposalSummary]()
            for structure0 in proposalsContainer {
                if let structure0 = structure0 {
                    proposalsDecoded0?.append(structure0)
                }
            }
        }
        proposals = proposalsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTagsForResourceInput(resourceArn: \(String(describing: resourceArn)))"}
}

extension ListTagsForResourceInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: Middleware {
    public let id: String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInput: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the resource. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    public let resourceArn: String?

    public init (
        resourceArn: String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Equatable {
}

extension ListTagsForResourceInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Equatable {
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceNotReadyException(ResourceNotReadyException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ListTagsForResourceOutputResponse(tags: \(String(describing: tags)))"}
}

extension ListTagsForResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Equatable {
    /// <p>The tags assigned to the resource.</p>
    public let tags: [String:String]?

    public init (
        tags: [String:String]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Equatable {
    public let tags: [String:String]?
}

extension ListTagsForResourceOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension LogConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case enabled = "Enabled"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension LogConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LogConfiguration(enabled: \(String(describing: enabled)))"}
}

/// <p>A configuration for logging events.</p>
public struct LogConfiguration: Equatable {
    /// <p>Indicates whether logging is enabled.</p>
    public let enabled: Bool?

    public init (
        enabled: Bool? = nil
    )
    {
        self.enabled = enabled
    }
}

extension LogConfigurations: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cloudwatch = "Cloudwatch"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudwatch = cloudwatch {
            try encodeContainer.encode(cloudwatch, forKey: .cloudwatch)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudwatchDecoded = try containerValues.decodeIfPresent(LogConfiguration.self, forKey: .cloudwatch)
        cloudwatch = cloudwatchDecoded
    }
}

extension LogConfigurations: CustomDebugStringConvertible {
    public var debugDescription: String {
        "LogConfigurations(cloudwatch: \(String(describing: cloudwatch)))"}
}

/// <p>A collection of log configurations.</p>
public struct LogConfigurations: Equatable {
    /// <p>Parameters for publishing logs to Amazon CloudWatch Logs.</p>
    public let cloudwatch: LogConfiguration?

    public init (
        cloudwatch: LogConfiguration? = nil
    )
    {
        self.cloudwatch = cloudwatch
    }
}

extension Member: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case creationDate = "CreationDate"
        case description = "Description"
        case frameworkAttributes = "FrameworkAttributes"
        case id = "Id"
        case logPublishingConfiguration = "LogPublishingConfiguration"
        case name = "Name"
        case networkId = "NetworkId"
        case status = "Status"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let frameworkAttributes = frameworkAttributes {
            try encodeContainer.encode(frameworkAttributes, forKey: .frameworkAttributes)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let logPublishingConfiguration = logPublishingConfiguration {
            try encodeContainer.encode(logPublishingConfiguration, forKey: .logPublishingConfiguration)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let networkId = networkId {
            try encodeContainer.encode(networkId, forKey: .networkId)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, outputtagmap0) in tags {
                try tagsContainer.encode(outputtagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkId)
        networkId = networkIdDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let frameworkAttributesDecoded = try containerValues.decodeIfPresent(MemberFrameworkAttributes.self, forKey: .frameworkAttributes)
        frameworkAttributes = frameworkAttributesDecoded
        let logPublishingConfigurationDecoded = try containerValues.decodeIfPresent(MemberLogPublishingConfiguration.self, forKey: .logPublishingConfiguration)
        logPublishingConfiguration = logPublishingConfigurationDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MemberStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension Member: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Member(arn: \(String(describing: arn)), creationDate: \(String(describing: creationDate)), description: \(String(describing: description)), frameworkAttributes: \(String(describing: frameworkAttributes)), id: \(String(describing: id)), logPublishingConfiguration: \(String(describing: logPublishingConfiguration)), name: \(String(describing: name)), networkId: \(String(describing: networkId)), status: \(String(describing: status)), tags: \(String(describing: tags)))"}
}

/// <p>Member configuration properties.</p>
///          <p>Applies only to Hyperledger Fabric.</p>
public struct Member: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the member. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    public let arn: String?
    /// <p>The date and time that the member was created.</p>
    public let creationDate: Date?
    /// <p>An optional description for the member.</p>
    public let description: String?
    /// <p>Attributes relevant to a member for the blockchain framework that the Managed Blockchain network uses.</p>
    public let frameworkAttributes: MemberFrameworkAttributes?
    /// <p>The unique identifier of the member.</p>
    public let id: String?
    /// <p>Configuration properties for logging events associated with a member.</p>
    public let logPublishingConfiguration: MemberLogPublishingConfiguration?
    /// <p>The name of the member.</p>
    public let name: String?
    /// <p>The unique identifier of the network to which the member belongs.</p>
    public let networkId: String?
    /// <p>The status of a member.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CREATING</code> - The AWS account is in the process of creating a member.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>AVAILABLE</code> - The member has been created and can participate in the network.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CREATE_FAILED</code> - The AWS account attempted to create a member and creation failed.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DELETING</code> - The member and all associated resources are in the process of being deleted. Either the AWS account that owns the member deleted it, or the member is being deleted as the result of an <code>APPROVED</code>
    ///                   <code>PROPOSAL</code> to remove the member.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DELETED</code> - The member can no longer participate on the network and all associated resources are deleted. Either the AWS account that owns the member deleted it, or the member is being deleted as the result of an <code>APPROVED</code>
    ///                   <code>PROPOSAL</code> to remove the member.</p>
    ///             </li>
    ///          </ul>
    public let status: MemberStatus?
    /// <p>Tags assigned to the member. Tags consist of a key and optional value. For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    public let tags: [String:String]?

    public init (
        arn: String? = nil,
        creationDate: Date? = nil,
        description: String? = nil,
        frameworkAttributes: MemberFrameworkAttributes? = nil,
        id: String? = nil,
        logPublishingConfiguration: MemberLogPublishingConfiguration? = nil,
        name: String? = nil,
        networkId: String? = nil,
        status: MemberStatus? = nil,
        tags: [String:String]? = nil
    )
    {
        self.arn = arn
        self.creationDate = creationDate
        self.description = description
        self.frameworkAttributes = frameworkAttributes
        self.id = id
        self.logPublishingConfiguration = logPublishingConfiguration
        self.name = name
        self.networkId = networkId
        self.status = status
        self.tags = tags
    }
}

extension MemberConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case frameworkConfiguration = "FrameworkConfiguration"
        case logPublishingConfiguration = "LogPublishingConfiguration"
        case name = "Name"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let frameworkConfiguration = frameworkConfiguration {
            try encodeContainer.encode(frameworkConfiguration, forKey: .frameworkConfiguration)
        }
        if let logPublishingConfiguration = logPublishingConfiguration {
            try encodeContainer.encode(logPublishingConfiguration, forKey: .logPublishingConfiguration)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, inputtagmap0) in tags {
                try tagsContainer.encode(inputtagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let frameworkConfigurationDecoded = try containerValues.decodeIfPresent(MemberFrameworkConfiguration.self, forKey: .frameworkConfiguration)
        frameworkConfiguration = frameworkConfigurationDecoded
        let logPublishingConfigurationDecoded = try containerValues.decodeIfPresent(MemberLogPublishingConfiguration.self, forKey: .logPublishingConfiguration)
        logPublishingConfiguration = logPublishingConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension MemberConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MemberConfiguration(description: \(String(describing: description)), frameworkConfiguration: \(String(describing: frameworkConfiguration)), logPublishingConfiguration: \(String(describing: logPublishingConfiguration)), name: \(String(describing: name)), tags: \(String(describing: tags)))"}
}

/// <p>Configuration properties of the member.</p>
///          <p>Applies only to Hyperledger Fabric.</p>
public struct MemberConfiguration: Equatable {
    /// <p>An optional description of the member.</p>
    public let description: String?
    /// <p>Configuration properties of the blockchain framework relevant to the member.</p>
    public let frameworkConfiguration: MemberFrameworkConfiguration?
    /// <p>Configuration properties for logging events associated with a member of a Managed Blockchain network.</p>
    public let logPublishingConfiguration: MemberLogPublishingConfiguration?
    /// <p>The name of the member.</p>
    public let name: String?
    /// <p>Tags assigned to the member. Tags consist of a key and optional value. For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    ///          <p>When specifying tags during creation, you can specify multiple key-value pairs in a single request, with an overall maximum of 50 tags added to each resource.</p>
    public let tags: [String:String]?

    public init (
        description: String? = nil,
        frameworkConfiguration: MemberFrameworkConfiguration? = nil,
        logPublishingConfiguration: MemberLogPublishingConfiguration? = nil,
        name: String? = nil,
        tags: [String:String]? = nil
    )
    {
        self.description = description
        self.frameworkConfiguration = frameworkConfiguration
        self.logPublishingConfiguration = logPublishingConfiguration
        self.name = name
        self.tags = tags
    }
}

extension MemberFabricAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adminUsername = "AdminUsername"
        case caEndpoint = "CaEndpoint"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adminUsername = adminUsername {
            try encodeContainer.encode(adminUsername, forKey: .adminUsername)
        }
        if let caEndpoint = caEndpoint {
            try encodeContainer.encode(caEndpoint, forKey: .caEndpoint)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adminUsernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .adminUsername)
        adminUsername = adminUsernameDecoded
        let caEndpointDecoded = try containerValues.decodeIfPresent(String.self, forKey: .caEndpoint)
        caEndpoint = caEndpointDecoded
    }
}

extension MemberFabricAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MemberFabricAttributes(adminUsername: \(String(describing: adminUsername)), caEndpoint: \(String(describing: caEndpoint)))"}
}

/// <p>Attributes of Hyperledger Fabric for a member in a Managed Blockchain network using the Hyperledger Fabric framework.</p>
public struct MemberFabricAttributes: Equatable {
    /// <p>The user name for the initial administrator user for the member.</p>
    public let adminUsername: String?
    /// <p>The endpoint used to access the member's certificate authority.</p>
    public let caEndpoint: String?

    public init (
        adminUsername: String? = nil,
        caEndpoint: String? = nil
    )
    {
        self.adminUsername = adminUsername
        self.caEndpoint = caEndpoint
    }
}

extension MemberFabricConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case adminPassword = "AdminPassword"
        case adminUsername = "AdminUsername"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adminPassword = adminPassword {
            try encodeContainer.encode(adminPassword, forKey: .adminPassword)
        }
        if let adminUsername = adminUsername {
            try encodeContainer.encode(adminUsername, forKey: .adminUsername)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adminUsernameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .adminUsername)
        adminUsername = adminUsernameDecoded
        let adminPasswordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .adminPassword)
        adminPassword = adminPasswordDecoded
    }
}

extension MemberFabricConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MemberFabricConfiguration(adminPassword: \(String(describing: adminPassword)), adminUsername: \(String(describing: adminUsername)))"}
}

/// <p>Configuration properties for Hyperledger Fabric for a member in a Managed Blockchain network using the Hyperledger Fabric framework.</p>
public struct MemberFabricConfiguration: Equatable {
    /// <p>The password for the member's initial administrative user. The <code>AdminPassword</code> must be at least eight characters long and no more than 32 characters. It must contain at least one uppercase letter, one lowercase letter, and one digit. It cannot have a single quotation mark (‘), a double quotation marks (“), a forward slash(/), a backward slash(\), @, or a space.</p>
    public let adminPassword: String?
    /// <p>The user name for the member's initial administrative user.</p>
    public let adminUsername: String?

    public init (
        adminPassword: String? = nil,
        adminUsername: String? = nil
    )
    {
        self.adminPassword = adminPassword
        self.adminUsername = adminUsername
    }
}

extension MemberFabricLogPublishingConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case caLogs = "CaLogs"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let caLogs = caLogs {
            try encodeContainer.encode(caLogs, forKey: .caLogs)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let caLogsDecoded = try containerValues.decodeIfPresent(LogConfigurations.self, forKey: .caLogs)
        caLogs = caLogsDecoded
    }
}

extension MemberFabricLogPublishingConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MemberFabricLogPublishingConfiguration(caLogs: \(String(describing: caLogs)))"}
}

/// <p>Configuration properties for logging events associated with a member of a Managed Blockchain network using the Hyperledger Fabric framework.</p>
public struct MemberFabricLogPublishingConfiguration: Equatable {
    /// <p>Configuration properties for logging events associated with a member's Certificate Authority (CA). CA logs help you determine when a member in your account joins the network, or when new peers register with a member CA.</p>
    public let caLogs: LogConfigurations?

    public init (
        caLogs: LogConfigurations? = nil
    )
    {
        self.caLogs = caLogs
    }
}

extension MemberFrameworkAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fabric = "Fabric"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fabric = fabric {
            try encodeContainer.encode(fabric, forKey: .fabric)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fabricDecoded = try containerValues.decodeIfPresent(MemberFabricAttributes.self, forKey: .fabric)
        fabric = fabricDecoded
    }
}

extension MemberFrameworkAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MemberFrameworkAttributes(fabric: \(String(describing: fabric)))"}
}

/// <p>Attributes relevant to a member for the blockchain framework that the Managed Blockchain network uses.</p>
public struct MemberFrameworkAttributes: Equatable {
    /// <p>Attributes of Hyperledger Fabric relevant to a member on a Managed Blockchain network that uses Hyperledger Fabric.</p>
    public let fabric: MemberFabricAttributes?

    public init (
        fabric: MemberFabricAttributes? = nil
    )
    {
        self.fabric = fabric
    }
}

extension MemberFrameworkConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fabric = "Fabric"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fabric = fabric {
            try encodeContainer.encode(fabric, forKey: .fabric)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fabricDecoded = try containerValues.decodeIfPresent(MemberFabricConfiguration.self, forKey: .fabric)
        fabric = fabricDecoded
    }
}

extension MemberFrameworkConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MemberFrameworkConfiguration(fabric: \(String(describing: fabric)))"}
}

/// <p>Configuration properties relevant to a member for the blockchain framework that the Managed Blockchain network uses.</p>
public struct MemberFrameworkConfiguration: Equatable {
    /// <p>Attributes of Hyperledger Fabric for a member on a Managed Blockchain network that uses Hyperledger Fabric.</p>
    public let fabric: MemberFabricConfiguration?

    public init (
        fabric: MemberFabricConfiguration? = nil
    )
    {
        self.fabric = fabric
    }
}

extension MemberLogPublishingConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fabric = "Fabric"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fabric = fabric {
            try encodeContainer.encode(fabric, forKey: .fabric)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fabricDecoded = try containerValues.decodeIfPresent(MemberFabricLogPublishingConfiguration.self, forKey: .fabric)
        fabric = fabricDecoded
    }
}

extension MemberLogPublishingConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MemberLogPublishingConfiguration(fabric: \(String(describing: fabric)))"}
}

/// <p>Configuration properties for logging events associated with a member of a Managed Blockchain network.</p>
public struct MemberLogPublishingConfiguration: Equatable {
    /// <p>Configuration properties for logging events associated with a member of a Managed Blockchain network using the Hyperledger Fabric framework.</p>
    public let fabric: MemberFabricLogPublishingConfiguration?

    public init (
        fabric: MemberFabricLogPublishingConfiguration? = nil
    )
    {
        self.fabric = fabric
    }
}

public enum MemberStatus {
    case available
    case createFailed
    case creating
    case deleted
    case deleting
    case updating
    case sdkUnknown(String)
}

extension MemberStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [MemberStatus] {
        return [
            .available,
            .createFailed,
            .creating,
            .deleted,
            .deleting,
            .updating,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .available: return "AVAILABLE"
        case .createFailed: return "CREATE_FAILED"
        case .creating: return "CREATING"
        case .deleted: return "DELETED"
        case .deleting: return "DELETING"
        case .updating: return "UPDATING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = MemberStatus(rawValue: rawValue) ?? MemberStatus.sdkUnknown(rawValue)
    }
}

extension MemberSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case creationDate = "CreationDate"
        case description = "Description"
        case id = "Id"
        case isOwned = "IsOwned"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let isOwned = isOwned {
            try encodeContainer.encode(isOwned, forKey: .isOwned)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MemberStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let isOwnedDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .isOwned)
        isOwned = isOwnedDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension MemberSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "MemberSummary(arn: \(String(describing: arn)), creationDate: \(String(describing: creationDate)), description: \(String(describing: description)), id: \(String(describing: id)), isOwned: \(String(describing: isOwned)), name: \(String(describing: name)), status: \(String(describing: status)))"}
}

/// <p>A summary of configuration properties for a member.</p>
///          <p>Applies only to Hyperledger Fabric.</p>
public struct MemberSummary: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the member. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    public let arn: String?
    /// <p>The date and time that the member was created.</p>
    public let creationDate: Date?
    /// <p>An optional description of the member.</p>
    public let description: String?
    /// <p>The unique identifier of the member.</p>
    public let id: String?
    /// <p>An indicator of whether the member is owned by your AWS account or a different AWS account.</p>
    public let isOwned: Bool?
    /// <p>The name of the member.</p>
    public let name: String?
    /// <p>The status of the member.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CREATING</code> - The AWS account is in the process of creating a member.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>AVAILABLE</code> - The member has been created and can participate in the network.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CREATE_FAILED</code> - The AWS account attempted to create a member and creation failed.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DELETING</code> - The member and all associated resources are in the process of being deleted. Either the AWS account that owns the member deleted it, or the member is being deleted as the result of an <code>APPROVED</code>
    ///                   <code>PROPOSAL</code> to remove the member.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DELETED</code> - The member can no longer participate on the network and all associated resources are deleted. Either the AWS account that owns the member deleted it, or the member is being deleted as the result of an <code>APPROVED</code>
    ///                   <code>PROPOSAL</code> to remove the member.</p>
    ///             </li>
    ///          </ul>
    public let status: MemberStatus?

    public init (
        arn: String? = nil,
        creationDate: Date? = nil,
        description: String? = nil,
        id: String? = nil,
        isOwned: Bool? = nil,
        name: String? = nil,
        status: MemberStatus? = nil
    )
    {
        self.arn = arn
        self.creationDate = creationDate
        self.description = description
        self.id = id
        self.isOwned = isOwned
        self.name = name
        self.status = status
    }
}

extension Network: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case creationDate = "CreationDate"
        case description = "Description"
        case framework = "Framework"
        case frameworkAttributes = "FrameworkAttributes"
        case frameworkVersion = "FrameworkVersion"
        case id = "Id"
        case name = "Name"
        case status = "Status"
        case tags = "Tags"
        case votingPolicy = "VotingPolicy"
        case vpcEndpointServiceName = "VpcEndpointServiceName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let framework = framework {
            try encodeContainer.encode(framework.rawValue, forKey: .framework)
        }
        if let frameworkAttributes = frameworkAttributes {
            try encodeContainer.encode(frameworkAttributes, forKey: .frameworkAttributes)
        }
        if let frameworkVersion = frameworkVersion {
            try encodeContainer.encode(frameworkVersion, forKey: .frameworkVersion)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, outputtagmap0) in tags {
                try tagsContainer.encode(outputtagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let votingPolicy = votingPolicy {
            try encodeContainer.encode(votingPolicy, forKey: .votingPolicy)
        }
        if let vpcEndpointServiceName = vpcEndpointServiceName {
            try encodeContainer.encode(vpcEndpointServiceName, forKey: .vpcEndpointServiceName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let frameworkDecoded = try containerValues.decodeIfPresent(Framework.self, forKey: .framework)
        framework = frameworkDecoded
        let frameworkVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .frameworkVersion)
        frameworkVersion = frameworkVersionDecoded
        let frameworkAttributesDecoded = try containerValues.decodeIfPresent(NetworkFrameworkAttributes.self, forKey: .frameworkAttributes)
        frameworkAttributes = frameworkAttributesDecoded
        let vpcEndpointServiceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .vpcEndpointServiceName)
        vpcEndpointServiceName = vpcEndpointServiceNameDecoded
        let votingPolicyDecoded = try containerValues.decodeIfPresent(VotingPolicy.self, forKey: .votingPolicy)
        votingPolicy = votingPolicyDecoded
        let statusDecoded = try containerValues.decodeIfPresent(NetworkStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension Network: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Network(arn: \(String(describing: arn)), creationDate: \(String(describing: creationDate)), description: \(String(describing: description)), framework: \(String(describing: framework)), frameworkAttributes: \(String(describing: frameworkAttributes)), frameworkVersion: \(String(describing: frameworkVersion)), id: \(String(describing: id)), name: \(String(describing: name)), status: \(String(describing: status)), tags: \(String(describing: tags)), votingPolicy: \(String(describing: votingPolicy)), vpcEndpointServiceName: \(String(describing: vpcEndpointServiceName)))"}
}

/// <p>Network configuration properties.</p>
public struct Network: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the network. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    public let arn: String?
    /// <p>The date and time that the network was created.</p>
    public let creationDate: Date?
    /// <p>Attributes of the blockchain framework for the network.</p>
    public let description: String?
    /// <p>The blockchain framework that the network uses.</p>
    public let framework: Framework?
    /// <p>Attributes of the blockchain framework that the network uses.</p>
    public let frameworkAttributes: NetworkFrameworkAttributes?
    /// <p>The version of the blockchain framework that the network uses.</p>
    public let frameworkVersion: String?
    /// <p>The unique identifier of the network.</p>
    public let id: String?
    /// <p>The name of the network.</p>
    public let name: String?
    /// <p>The current status of the network.</p>
    public let status: NetworkStatus?
    /// <p>Tags assigned to the network. Each tag consists of a key and optional value.</p>
    ///          <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    public let tags: [String:String]?
    /// <p>The voting rules for the network to decide if a proposal is accepted.</p>
    public let votingPolicy: VotingPolicy?
    /// <p>The VPC endpoint service name of the VPC endpoint service of the network. Members use the VPC endpoint service name to create a VPC endpoint to access network resources.</p>
    public let vpcEndpointServiceName: String?

    public init (
        arn: String? = nil,
        creationDate: Date? = nil,
        description: String? = nil,
        framework: Framework? = nil,
        frameworkAttributes: NetworkFrameworkAttributes? = nil,
        frameworkVersion: String? = nil,
        id: String? = nil,
        name: String? = nil,
        status: NetworkStatus? = nil,
        tags: [String:String]? = nil,
        votingPolicy: VotingPolicy? = nil,
        vpcEndpointServiceName: String? = nil
    )
    {
        self.arn = arn
        self.creationDate = creationDate
        self.description = description
        self.framework = framework
        self.frameworkAttributes = frameworkAttributes
        self.frameworkVersion = frameworkVersion
        self.id = id
        self.name = name
        self.status = status
        self.tags = tags
        self.votingPolicy = votingPolicy
        self.vpcEndpointServiceName = vpcEndpointServiceName
    }
}

extension NetworkEthereumAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case chainId = "ChainId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let chainId = chainId {
            try encodeContainer.encode(chainId, forKey: .chainId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let chainIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .chainId)
        chainId = chainIdDecoded
    }
}

extension NetworkEthereumAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NetworkEthereumAttributes(chainId: \(String(describing: chainId)))"}
}

/// <p>Attributes of Ethereum for a network. </p>
public struct NetworkEthereumAttributes: Equatable {
    /// <p>The Ethereum <code>CHAIN_ID</code> associated with the Ethereum network. Chain IDs are as follows:</p>
    ///          <ul>
    ///             <li>
    ///                <p>mainnet = <code>1</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>rinkeby = <code>4</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>ropsten = <code>3</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let chainId: String?

    public init (
        chainId: String? = nil
    )
    {
        self.chainId = chainId
    }
}

extension NetworkFabricAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case edition = "Edition"
        case orderingServiceEndpoint = "OrderingServiceEndpoint"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let edition = edition {
            try encodeContainer.encode(edition.rawValue, forKey: .edition)
        }
        if let orderingServiceEndpoint = orderingServiceEndpoint {
            try encodeContainer.encode(orderingServiceEndpoint, forKey: .orderingServiceEndpoint)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let orderingServiceEndpointDecoded = try containerValues.decodeIfPresent(String.self, forKey: .orderingServiceEndpoint)
        orderingServiceEndpoint = orderingServiceEndpointDecoded
        let editionDecoded = try containerValues.decodeIfPresent(Edition.self, forKey: .edition)
        edition = editionDecoded
    }
}

extension NetworkFabricAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NetworkFabricAttributes(edition: \(String(describing: edition)), orderingServiceEndpoint: \(String(describing: orderingServiceEndpoint)))"}
}

/// <p>Attributes of Hyperledger Fabric for a network.</p>
public struct NetworkFabricAttributes: Equatable {
    /// <p>The edition of Amazon Managed Blockchain that Hyperledger Fabric uses. For more information, see <a href="http://aws.amazon.com/managed-blockchain/pricing/">Amazon Managed Blockchain Pricing</a>.</p>
    public let edition: Edition?
    /// <p>The endpoint of the ordering service for the network.</p>
    public let orderingServiceEndpoint: String?

    public init (
        edition: Edition? = nil,
        orderingServiceEndpoint: String? = nil
    )
    {
        self.edition = edition
        self.orderingServiceEndpoint = orderingServiceEndpoint
    }
}

extension NetworkFabricConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case edition = "Edition"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let edition = edition {
            try encodeContainer.encode(edition.rawValue, forKey: .edition)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let editionDecoded = try containerValues.decodeIfPresent(Edition.self, forKey: .edition)
        edition = editionDecoded
    }
}

extension NetworkFabricConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NetworkFabricConfiguration(edition: \(String(describing: edition)))"}
}

/// <p>Hyperledger Fabric configuration properties for the network.</p>
public struct NetworkFabricConfiguration: Equatable {
    /// <p>The edition of Amazon Managed Blockchain that the network uses. For more information, see <a href="http://aws.amazon.com/managed-blockchain/pricing/">Amazon Managed Blockchain Pricing</a>.</p>
    public let edition: Edition?

    public init (
        edition: Edition? = nil
    )
    {
        self.edition = edition
    }
}

extension NetworkFrameworkAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ethereum = "Ethereum"
        case fabric = "Fabric"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ethereum = ethereum {
            try encodeContainer.encode(ethereum, forKey: .ethereum)
        }
        if let fabric = fabric {
            try encodeContainer.encode(fabric, forKey: .fabric)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fabricDecoded = try containerValues.decodeIfPresent(NetworkFabricAttributes.self, forKey: .fabric)
        fabric = fabricDecoded
        let ethereumDecoded = try containerValues.decodeIfPresent(NetworkEthereumAttributes.self, forKey: .ethereum)
        ethereum = ethereumDecoded
    }
}

extension NetworkFrameworkAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NetworkFrameworkAttributes(ethereum: \(String(describing: ethereum)), fabric: \(String(describing: fabric)))"}
}

/// <p>Attributes relevant to the network for the blockchain framework that the network uses.</p>
public struct NetworkFrameworkAttributes: Equatable {
    /// <p>Attributes of an Ethereum network for Managed Blockchain resources participating in an Ethereum network. </p>
    public let ethereum: NetworkEthereumAttributes?
    /// <p>Attributes of Hyperledger Fabric for a Managed Blockchain network that uses Hyperledger Fabric.</p>
    public let fabric: NetworkFabricAttributes?

    public init (
        ethereum: NetworkEthereumAttributes? = nil,
        fabric: NetworkFabricAttributes? = nil
    )
    {
        self.ethereum = ethereum
        self.fabric = fabric
    }
}

extension NetworkFrameworkConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fabric = "Fabric"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fabric = fabric {
            try encodeContainer.encode(fabric, forKey: .fabric)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fabricDecoded = try containerValues.decodeIfPresent(NetworkFabricConfiguration.self, forKey: .fabric)
        fabric = fabricDecoded
    }
}

extension NetworkFrameworkConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NetworkFrameworkConfiguration(fabric: \(String(describing: fabric)))"}
}

/// <p>
///          Configuration properties relevant to the network for the blockchain framework that the network uses.
///       </p>
public struct NetworkFrameworkConfiguration: Equatable {
    /// <p>
    ///          Hyperledger Fabric configuration properties for a Managed Blockchain network that uses Hyperledger Fabric.
    ///       </p>
    public let fabric: NetworkFabricConfiguration?

    public init (
        fabric: NetworkFabricConfiguration? = nil
    )
    {
        self.fabric = fabric
    }
}

public enum NetworkStatus {
    case available
    case createFailed
    case creating
    case deleted
    case deleting
    case sdkUnknown(String)
}

extension NetworkStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [NetworkStatus] {
        return [
            .available,
            .createFailed,
            .creating,
            .deleted,
            .deleting,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .available: return "AVAILABLE"
        case .createFailed: return "CREATE_FAILED"
        case .creating: return "CREATING"
        case .deleted: return "DELETED"
        case .deleting: return "DELETING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = NetworkStatus(rawValue: rawValue) ?? NetworkStatus.sdkUnknown(rawValue)
    }
}

extension NetworkSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case creationDate = "CreationDate"
        case description = "Description"
        case framework = "Framework"
        case frameworkVersion = "FrameworkVersion"
        case id = "Id"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let framework = framework {
            try encodeContainer.encode(framework.rawValue, forKey: .framework)
        }
        if let frameworkVersion = frameworkVersion {
            try encodeContainer.encode(frameworkVersion, forKey: .frameworkVersion)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let frameworkDecoded = try containerValues.decodeIfPresent(Framework.self, forKey: .framework)
        framework = frameworkDecoded
        let frameworkVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .frameworkVersion)
        frameworkVersion = frameworkVersionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(NetworkStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension NetworkSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NetworkSummary(arn: \(String(describing: arn)), creationDate: \(String(describing: creationDate)), description: \(String(describing: description)), framework: \(String(describing: framework)), frameworkVersion: \(String(describing: frameworkVersion)), id: \(String(describing: id)), name: \(String(describing: name)), status: \(String(describing: status)))"}
}

/// <p>A summary of network configuration properties.</p>
public struct NetworkSummary: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the network. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    public let arn: String?
    /// <p>The date and time that the network was created.</p>
    public let creationDate: Date?
    /// <p>An optional description of the network.</p>
    public let description: String?
    /// <p>The blockchain framework that the network uses.</p>
    public let framework: Framework?
    /// <p>The version of the blockchain framework that the network uses.</p>
    public let frameworkVersion: String?
    /// <p>The unique identifier of the network.</p>
    public let id: String?
    /// <p>The name of the network.</p>
    public let name: String?
    /// <p>The current status of the network.</p>
    public let status: NetworkStatus?

    public init (
        arn: String? = nil,
        creationDate: Date? = nil,
        description: String? = nil,
        framework: Framework? = nil,
        frameworkVersion: String? = nil,
        id: String? = nil,
        name: String? = nil,
        status: NetworkStatus? = nil
    )
    {
        self.arn = arn
        self.creationDate = creationDate
        self.description = description
        self.framework = framework
        self.frameworkVersion = frameworkVersion
        self.id = id
        self.name = name
        self.status = status
    }
}

extension Node: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case availabilityZone = "AvailabilityZone"
        case creationDate = "CreationDate"
        case frameworkAttributes = "FrameworkAttributes"
        case id = "Id"
        case instanceType = "InstanceType"
        case logPublishingConfiguration = "LogPublishingConfiguration"
        case memberId = "MemberId"
        case networkId = "NetworkId"
        case stateDB = "StateDB"
        case status = "Status"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let frameworkAttributes = frameworkAttributes {
            try encodeContainer.encode(frameworkAttributes, forKey: .frameworkAttributes)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let logPublishingConfiguration = logPublishingConfiguration {
            try encodeContainer.encode(logPublishingConfiguration, forKey: .logPublishingConfiguration)
        }
        if let memberId = memberId {
            try encodeContainer.encode(memberId, forKey: .memberId)
        }
        if let networkId = networkId {
            try encodeContainer.encode(networkId, forKey: .networkId)
        }
        if let stateDB = stateDB {
            try encodeContainer.encode(stateDB.rawValue, forKey: .stateDB)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, outputtagmap0) in tags {
                try tagsContainer.encode(outputtagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkId)
        networkId = networkIdDecoded
        let memberIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .memberId)
        memberId = memberIdDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let frameworkAttributesDecoded = try containerValues.decodeIfPresent(NodeFrameworkAttributes.self, forKey: .frameworkAttributes)
        frameworkAttributes = frameworkAttributesDecoded
        let logPublishingConfigurationDecoded = try containerValues.decodeIfPresent(NodeLogPublishingConfiguration.self, forKey: .logPublishingConfiguration)
        logPublishingConfiguration = logPublishingConfigurationDecoded
        let stateDBDecoded = try containerValues.decodeIfPresent(StateDBType.self, forKey: .stateDB)
        stateDB = stateDBDecoded
        let statusDecoded = try containerValues.decodeIfPresent(NodeStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension Node: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Node(arn: \(String(describing: arn)), availabilityZone: \(String(describing: availabilityZone)), creationDate: \(String(describing: creationDate)), frameworkAttributes: \(String(describing: frameworkAttributes)), id: \(String(describing: id)), instanceType: \(String(describing: instanceType)), logPublishingConfiguration: \(String(describing: logPublishingConfiguration)), memberId: \(String(describing: memberId)), networkId: \(String(describing: networkId)), stateDB: \(String(describing: stateDB)), status: \(String(describing: status)), tags: \(String(describing: tags)))"}
}

/// <p>Configuration properties of a node.</p>
public struct Node: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the node. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    public let arn: String?
    /// <p>The Availability Zone in which the node exists. Required for Ethereum nodes. </p>
    public let availabilityZone: String?
    /// <p>The date and time that the node was created.</p>
    public let creationDate: Date?
    /// <p>Attributes of the blockchain framework being used.</p>
    public let frameworkAttributes: NodeFrameworkAttributes?
    /// <p>The unique identifier of the node.</p>
    public let id: String?
    /// <p>The instance type of the node.</p>
    public let instanceType: String?
    /// <p>Configuration properties for logging events associated with a peer node on a Hyperledger Fabric network on Managed Blockchain.</p>
    public let logPublishingConfiguration: NodeLogPublishingConfiguration?
    /// <p>The unique identifier of the member to which the node belongs.</p>
    ///          <p>Applies only to Hyperledger Fabric.</p>
    public let memberId: String?
    /// <p>The unique identifier of the network that the node is on.</p>
    public let networkId: String?
    /// <p>The state database that the node uses. Values are <code>LevelDB</code> or <code>CouchDB</code>.</p>
    ///          <p>Applies only to Hyperledger Fabric.</p>
    public let stateDB: StateDBType?
    /// <p>The status of the node.</p>
    public let status: NodeStatus?
    /// <p>Tags assigned to the node. Each tag consists of a key and optional value.</p>
    ///          <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    public let tags: [String:String]?

    public init (
        arn: String? = nil,
        availabilityZone: String? = nil,
        creationDate: Date? = nil,
        frameworkAttributes: NodeFrameworkAttributes? = nil,
        id: String? = nil,
        instanceType: String? = nil,
        logPublishingConfiguration: NodeLogPublishingConfiguration? = nil,
        memberId: String? = nil,
        networkId: String? = nil,
        stateDB: StateDBType? = nil,
        status: NodeStatus? = nil,
        tags: [String:String]? = nil
    )
    {
        self.arn = arn
        self.availabilityZone = availabilityZone
        self.creationDate = creationDate
        self.frameworkAttributes = frameworkAttributes
        self.id = id
        self.instanceType = instanceType
        self.logPublishingConfiguration = logPublishingConfiguration
        self.memberId = memberId
        self.networkId = networkId
        self.stateDB = stateDB
        self.status = status
        self.tags = tags
    }
}

extension NodeConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case availabilityZone = "AvailabilityZone"
        case instanceType = "InstanceType"
        case logPublishingConfiguration = "LogPublishingConfiguration"
        case stateDB = "StateDB"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let logPublishingConfiguration = logPublishingConfiguration {
            try encodeContainer.encode(logPublishingConfiguration, forKey: .logPublishingConfiguration)
        }
        if let stateDB = stateDB {
            try encodeContainer.encode(stateDB.rawValue, forKey: .stateDB)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let logPublishingConfigurationDecoded = try containerValues.decodeIfPresent(NodeLogPublishingConfiguration.self, forKey: .logPublishingConfiguration)
        logPublishingConfiguration = logPublishingConfigurationDecoded
        let stateDBDecoded = try containerValues.decodeIfPresent(StateDBType.self, forKey: .stateDB)
        stateDB = stateDBDecoded
    }
}

extension NodeConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NodeConfiguration(availabilityZone: \(String(describing: availabilityZone)), instanceType: \(String(describing: instanceType)), logPublishingConfiguration: \(String(describing: logPublishingConfiguration)), stateDB: \(String(describing: stateDB)))"}
}

/// <p>Configuration properties of a node.</p>
public struct NodeConfiguration: Equatable {
    /// <p>The Availability Zone in which the node exists. Required for Ethereum nodes. </p>
    public let availabilityZone: String?
    /// <p>The Amazon Managed Blockchain instance type for the node.</p>
    public let instanceType: String?
    /// <p>Configuration properties for logging events associated with a peer node on a Hyperledger Fabric network on Managed Blockchain.
    ///       </p>
    public let logPublishingConfiguration: NodeLogPublishingConfiguration?
    /// <p>The state database that the node uses. Values are <code>LevelDB</code> or <code>CouchDB</code>. When using an Amazon Managed Blockchain network with Hyperledger Fabric version 1.4 or later, the default is <code>CouchDB</code>.</p>
    ///          <p>Applies only to Hyperledger Fabric.</p>
    public let stateDB: StateDBType?

    public init (
        availabilityZone: String? = nil,
        instanceType: String? = nil,
        logPublishingConfiguration: NodeLogPublishingConfiguration? = nil,
        stateDB: StateDBType? = nil
    )
    {
        self.availabilityZone = availabilityZone
        self.instanceType = instanceType
        self.logPublishingConfiguration = logPublishingConfiguration
        self.stateDB = stateDB
    }
}

extension NodeEthereumAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case httpEndpoint = "HttpEndpoint"
        case webSocketEndpoint = "WebSocketEndpoint"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let httpEndpoint = httpEndpoint {
            try encodeContainer.encode(httpEndpoint, forKey: .httpEndpoint)
        }
        if let webSocketEndpoint = webSocketEndpoint {
            try encodeContainer.encode(webSocketEndpoint, forKey: .webSocketEndpoint)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let httpEndpointDecoded = try containerValues.decodeIfPresent(String.self, forKey: .httpEndpoint)
        httpEndpoint = httpEndpointDecoded
        let webSocketEndpointDecoded = try containerValues.decodeIfPresent(String.self, forKey: .webSocketEndpoint)
        webSocketEndpoint = webSocketEndpointDecoded
    }
}

extension NodeEthereumAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NodeEthereumAttributes(httpEndpoint: \(String(describing: httpEndpoint)), webSocketEndpoint: \(String(describing: webSocketEndpoint)))"}
}

/// <p>Attributes of an Ethereum node.</p>
public struct NodeEthereumAttributes: Equatable {
    /// <p>The endpoint on which the Ethereum node listens to run Ethereum JSON-RPC methods over HTTP connections from a client. Use this endpoint in client code for smart contracts when using an HTTP connection. Connections to this endpoint are authenticated using <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p>
    public let httpEndpoint: String?
    /// <p>The endpoint on which the Ethereum node listens to run Ethereum JSON-RPC methods over WebSockets connections from a client. Use this endpoint in client code for smart contracts when using a WebSockets connection. Connections to this endpoint are authenticated using <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p>
    public let webSocketEndpoint: String?

    public init (
        httpEndpoint: String? = nil,
        webSocketEndpoint: String? = nil
    )
    {
        self.httpEndpoint = httpEndpoint
        self.webSocketEndpoint = webSocketEndpoint
    }
}

extension NodeFabricAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case peerEndpoint = "PeerEndpoint"
        case peerEventEndpoint = "PeerEventEndpoint"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let peerEndpoint = peerEndpoint {
            try encodeContainer.encode(peerEndpoint, forKey: .peerEndpoint)
        }
        if let peerEventEndpoint = peerEventEndpoint {
            try encodeContainer.encode(peerEventEndpoint, forKey: .peerEventEndpoint)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let peerEndpointDecoded = try containerValues.decodeIfPresent(String.self, forKey: .peerEndpoint)
        peerEndpoint = peerEndpointDecoded
        let peerEventEndpointDecoded = try containerValues.decodeIfPresent(String.self, forKey: .peerEventEndpoint)
        peerEventEndpoint = peerEventEndpointDecoded
    }
}

extension NodeFabricAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NodeFabricAttributes(peerEndpoint: \(String(describing: peerEndpoint)), peerEventEndpoint: \(String(describing: peerEventEndpoint)))"}
}

/// <p>Attributes of Hyperledger Fabric for a peer node on a Hyperledger Fabric network on Managed Blockchain.</p>
public struct NodeFabricAttributes: Equatable {
    /// <p>The endpoint that identifies the peer node for all services except peer channel-based event services.</p>
    public let peerEndpoint: String?
    /// <p>The endpoint that identifies the peer node for peer channel-based event services.</p>
    public let peerEventEndpoint: String?

    public init (
        peerEndpoint: String? = nil,
        peerEventEndpoint: String? = nil
    )
    {
        self.peerEndpoint = peerEndpoint
        self.peerEventEndpoint = peerEventEndpoint
    }
}

extension NodeFabricLogPublishingConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case chaincodeLogs = "ChaincodeLogs"
        case peerLogs = "PeerLogs"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let chaincodeLogs = chaincodeLogs {
            try encodeContainer.encode(chaincodeLogs, forKey: .chaincodeLogs)
        }
        if let peerLogs = peerLogs {
            try encodeContainer.encode(peerLogs, forKey: .peerLogs)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let chaincodeLogsDecoded = try containerValues.decodeIfPresent(LogConfigurations.self, forKey: .chaincodeLogs)
        chaincodeLogs = chaincodeLogsDecoded
        let peerLogsDecoded = try containerValues.decodeIfPresent(LogConfigurations.self, forKey: .peerLogs)
        peerLogs = peerLogsDecoded
    }
}

extension NodeFabricLogPublishingConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NodeFabricLogPublishingConfiguration(chaincodeLogs: \(String(describing: chaincodeLogs)), peerLogs: \(String(describing: peerLogs)))"}
}

/// <p>Configuration properties for logging events associated with a peer node owned by a member in a Managed Blockchain network.</p>
public struct NodeFabricLogPublishingConfiguration: Equatable {
    /// <p>Configuration properties for logging events associated with chaincode execution on a peer node. Chaincode logs contain the results of instantiating, invoking, and querying the chaincode. A peer can run multiple instances of chaincode. When enabled, a log stream is created for all chaincodes, with an individual log stream for each chaincode.</p>
    public let chaincodeLogs: LogConfigurations?
    /// <p>Configuration properties for a peer node log. Peer node logs contain messages generated when your client submits transaction proposals to peer nodes, requests to join channels, enrolls an admin peer, and lists the chaincode instances on a peer node. </p>
    public let peerLogs: LogConfigurations?

    public init (
        chaincodeLogs: LogConfigurations? = nil,
        peerLogs: LogConfigurations? = nil
    )
    {
        self.chaincodeLogs = chaincodeLogs
        self.peerLogs = peerLogs
    }
}

extension NodeFrameworkAttributes: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ethereum = "Ethereum"
        case fabric = "Fabric"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ethereum = ethereum {
            try encodeContainer.encode(ethereum, forKey: .ethereum)
        }
        if let fabric = fabric {
            try encodeContainer.encode(fabric, forKey: .fabric)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fabricDecoded = try containerValues.decodeIfPresent(NodeFabricAttributes.self, forKey: .fabric)
        fabric = fabricDecoded
        let ethereumDecoded = try containerValues.decodeIfPresent(NodeEthereumAttributes.self, forKey: .ethereum)
        ethereum = ethereumDecoded
    }
}

extension NodeFrameworkAttributes: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NodeFrameworkAttributes(ethereum: \(String(describing: ethereum)), fabric: \(String(describing: fabric)))"}
}

/// <p>Attributes relevant to a node on a Managed Blockchain network for the blockchain framework that the network uses.</p>
public struct NodeFrameworkAttributes: Equatable {
    /// <p>Attributes of Ethereum for a node on a Managed Blockchain network that uses Ethereum. </p>
    public let ethereum: NodeEthereumAttributes?
    /// <p>Attributes of Hyperledger Fabric for a peer node on a Managed Blockchain network that uses Hyperledger Fabric.</p>
    public let fabric: NodeFabricAttributes?

    public init (
        ethereum: NodeEthereumAttributes? = nil,
        fabric: NodeFabricAttributes? = nil
    )
    {
        self.ethereum = ethereum
        self.fabric = fabric
    }
}

extension NodeLogPublishingConfiguration: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case fabric = "Fabric"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fabric = fabric {
            try encodeContainer.encode(fabric, forKey: .fabric)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fabricDecoded = try containerValues.decodeIfPresent(NodeFabricLogPublishingConfiguration.self, forKey: .fabric)
        fabric = fabricDecoded
    }
}

extension NodeLogPublishingConfiguration: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NodeLogPublishingConfiguration(fabric: \(String(describing: fabric)))"}
}

/// <p>Configuration properties for logging events associated with a peer node on a Hyperledger Fabric network on Managed Blockchain.</p>
public struct NodeLogPublishingConfiguration: Equatable {
    /// <p>Configuration properties for logging events associated with a node that is owned by a member of a Managed Blockchain network using the Hyperledger Fabric framework.</p>
    public let fabric: NodeFabricLogPublishingConfiguration?

    public init (
        fabric: NodeFabricLogPublishingConfiguration? = nil
    )
    {
        self.fabric = fabric
    }
}

public enum NodeStatus {
    case available
    case createFailed
    case creating
    case deleted
    case deleting
    case failed
    case unhealthy
    case updating
    case sdkUnknown(String)
}

extension NodeStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [NodeStatus] {
        return [
            .available,
            .createFailed,
            .creating,
            .deleted,
            .deleting,
            .failed,
            .unhealthy,
            .updating,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .available: return "AVAILABLE"
        case .createFailed: return "CREATE_FAILED"
        case .creating: return "CREATING"
        case .deleted: return "DELETED"
        case .deleting: return "DELETING"
        case .failed: return "FAILED"
        case .unhealthy: return "UNHEALTHY"
        case .updating: return "UPDATING"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = NodeStatus(rawValue: rawValue) ?? NodeStatus.sdkUnknown(rawValue)
    }
}

extension NodeSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case availabilityZone = "AvailabilityZone"
        case creationDate = "CreationDate"
        case id = "Id"
        case instanceType = "InstanceType"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let statusDecoded = try containerValues.decodeIfPresent(NodeStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension NodeSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NodeSummary(arn: \(String(describing: arn)), availabilityZone: \(String(describing: availabilityZone)), creationDate: \(String(describing: creationDate)), id: \(String(describing: id)), instanceType: \(String(describing: instanceType)), status: \(String(describing: status)))"}
}

/// <p>A summary of configuration properties for a node.</p>
public struct NodeSummary: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the node. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    public let arn: String?
    /// <p>The Availability Zone in which the node exists.</p>
    public let availabilityZone: String?
    /// <p>The date and time that the node was created.</p>
    public let creationDate: Date?
    /// <p>The unique identifier of the node.</p>
    public let id: String?
    /// <p>The EC2 instance type for the node.</p>
    public let instanceType: String?
    /// <p>The status of the node.</p>
    public let status: NodeStatus?

    public init (
        arn: String? = nil,
        availabilityZone: String? = nil,
        creationDate: Date? = nil,
        id: String? = nil,
        instanceType: String? = nil,
        status: NodeStatus? = nil
    )
    {
        self.arn = arn
        self.availabilityZone = availabilityZone
        self.creationDate = creationDate
        self.id = id
        self.instanceType = instanceType
        self.status = status
    }
}

extension Proposal: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case actions = "Actions"
        case arn = "Arn"
        case creationDate = "CreationDate"
        case description = "Description"
        case expirationDate = "ExpirationDate"
        case networkId = "NetworkId"
        case noVoteCount = "NoVoteCount"
        case outstandingVoteCount = "OutstandingVoteCount"
        case proposalId = "ProposalId"
        case proposedByMemberId = "ProposedByMemberId"
        case proposedByMemberName = "ProposedByMemberName"
        case status = "Status"
        case tags = "Tags"
        case yesVoteCount = "YesVoteCount"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            try encodeContainer.encode(actions, forKey: .actions)
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let expirationDate = expirationDate {
            try encodeContainer.encode(expirationDate.timeIntervalSince1970, forKey: .expirationDate)
        }
        if let networkId = networkId {
            try encodeContainer.encode(networkId, forKey: .networkId)
        }
        if let noVoteCount = noVoteCount {
            try encodeContainer.encode(noVoteCount, forKey: .noVoteCount)
        }
        if let outstandingVoteCount = outstandingVoteCount {
            try encodeContainer.encode(outstandingVoteCount, forKey: .outstandingVoteCount)
        }
        if let proposalId = proposalId {
            try encodeContainer.encode(proposalId, forKey: .proposalId)
        }
        if let proposedByMemberId = proposedByMemberId {
            try encodeContainer.encode(proposedByMemberId, forKey: .proposedByMemberId)
        }
        if let proposedByMemberName = proposedByMemberName {
            try encodeContainer.encode(proposedByMemberName, forKey: .proposedByMemberName)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, outputtagmap0) in tags {
                try tagsContainer.encode(outputtagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let yesVoteCount = yesVoteCount {
            try encodeContainer.encode(yesVoteCount, forKey: .yesVoteCount)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let proposalIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .proposalId)
        proposalId = proposalIdDecoded
        let networkIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkId)
        networkId = networkIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let actionsDecoded = try containerValues.decodeIfPresent(ProposalActions.self, forKey: .actions)
        actions = actionsDecoded
        let proposedByMemberIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .proposedByMemberId)
        proposedByMemberId = proposedByMemberIdDecoded
        let proposedByMemberNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .proposedByMemberName)
        proposedByMemberName = proposedByMemberNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ProposalStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let expirationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .expirationDate)
        expirationDate = expirationDateDecoded
        let yesVoteCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .yesVoteCount)
        yesVoteCount = yesVoteCountDecoded
        let noVoteCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .noVoteCount)
        noVoteCount = noVoteCountDecoded
        let outstandingVoteCountDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .outstandingVoteCount)
        outstandingVoteCount = outstandingVoteCountDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension Proposal: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Proposal(actions: \(String(describing: actions)), arn: \(String(describing: arn)), creationDate: \(String(describing: creationDate)), description: \(String(describing: description)), expirationDate: \(String(describing: expirationDate)), networkId: \(String(describing: networkId)), noVoteCount: \(String(describing: noVoteCount)), outstandingVoteCount: \(String(describing: outstandingVoteCount)), proposalId: \(String(describing: proposalId)), proposedByMemberId: \(String(describing: proposedByMemberId)), proposedByMemberName: \(String(describing: proposedByMemberName)), status: \(String(describing: status)), tags: \(String(describing: tags)), yesVoteCount: \(String(describing: yesVoteCount)))"}
}

/// <p>Properties of a proposal on a Managed Blockchain network.</p>
///          <p>Applies only to Hyperledger Fabric.</p>
public struct Proposal: Equatable {
    /// <p>The actions to perform on the network if the proposal is <code>APPROVED</code>.</p>
    public let actions: ProposalActions?
    /// <p>The Amazon Resource Name (ARN) of the proposal. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    public let arn: String?
    /// <p>
    ///          The date and time that the proposal was created.
    ///       </p>
    public let creationDate: Date?
    /// <p>The description of the proposal.</p>
    public let description: String?
    /// <p>
    ///          The date and time that the proposal expires. This is the <code>CreationDate</code> plus the <code>ProposalDurationInHours</code> that is specified in the <code>ProposalThresholdPolicy</code>. After this date and time, if members have not cast enough votes to determine the outcome according to the voting policy, the proposal is <code>EXPIRED</code> and <code>Actions</code> are not carried out.
    ///       </p>
    public let expirationDate: Date?
    /// <p>The unique identifier of the network for which the proposal is made.</p>
    public let networkId: String?
    /// <p>
    ///          The current total of <code>NO</code> votes cast on the proposal by members.
    ///       </p>
    public let noVoteCount: Int?
    /// <p>
    ///          The number of votes remaining to be cast on the proposal by members. In other words, the number of members minus the sum of <code>YES</code> votes and <code>NO</code> votes.
    ///       </p>
    public let outstandingVoteCount: Int?
    /// <p>The unique identifier of the proposal.</p>
    public let proposalId: String?
    /// <p>The unique identifier of the member that created the proposal.</p>
    public let proposedByMemberId: String?
    /// <p>The name of the member that created the proposal.</p>
    public let proposedByMemberName: String?
    /// <p>The status of the proposal. Values are as follows:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>IN_PROGRESS</code> - The proposal is active and open for member voting.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>APPROVED</code> - The proposal was approved with sufficient <code>YES</code> votes among members according to the <code>VotingPolicy</code> specified for the <code>Network</code>. The specified proposal actions are carried out.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>REJECTED</code> - The proposal was rejected with insufficient <code>YES</code> votes among members according to the <code>VotingPolicy</code> specified for the <code>Network</code>. The specified <code>ProposalActions</code> are not carried out.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>EXPIRED</code> - Members did not cast the number of votes required to determine the proposal outcome before the proposal expired. The specified <code>ProposalActions</code> are not carried out.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ACTION_FAILED</code> - One or more of the specified <code>ProposalActions</code> in a proposal that was approved could not be completed because of an error. The <code>ACTION_FAILED</code> status occurs even if only one ProposalAction fails and other actions are successful.</p>
    ///             </li>
    ///          </ul>
    public let status: ProposalStatus?
    /// <p>Tags assigned to the proposal. Each tag consists of a key and optional value.</p>
    ///          <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    public let tags: [String:String]?
    /// <p>
    ///          The current total of <code>YES</code> votes cast on the proposal by members.
    ///       </p>
    public let yesVoteCount: Int?

    public init (
        actions: ProposalActions? = nil,
        arn: String? = nil,
        creationDate: Date? = nil,
        description: String? = nil,
        expirationDate: Date? = nil,
        networkId: String? = nil,
        noVoteCount: Int? = nil,
        outstandingVoteCount: Int? = nil,
        proposalId: String? = nil,
        proposedByMemberId: String? = nil,
        proposedByMemberName: String? = nil,
        status: ProposalStatus? = nil,
        tags: [String:String]? = nil,
        yesVoteCount: Int? = nil
    )
    {
        self.actions = actions
        self.arn = arn
        self.creationDate = creationDate
        self.description = description
        self.expirationDate = expirationDate
        self.networkId = networkId
        self.noVoteCount = noVoteCount
        self.outstandingVoteCount = outstandingVoteCount
        self.proposalId = proposalId
        self.proposedByMemberId = proposedByMemberId
        self.proposedByMemberName = proposedByMemberName
        self.status = status
        self.tags = tags
        self.yesVoteCount = yesVoteCount
    }
}

extension ProposalActions: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case invitations = "Invitations"
        case removals = "Removals"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let invitations = invitations {
            var invitationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .invitations)
            for inviteactionlist0 in invitations {
                try invitationsContainer.encode(inviteactionlist0)
            }
        }
        if let removals = removals {
            var removalsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .removals)
            for removeactionlist0 in removals {
                try removalsContainer.encode(removeactionlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let invitationsContainer = try containerValues.decodeIfPresent([InviteAction?].self, forKey: .invitations)
        var invitationsDecoded0:[InviteAction]? = nil
        if let invitationsContainer = invitationsContainer {
            invitationsDecoded0 = [InviteAction]()
            for structure0 in invitationsContainer {
                if let structure0 = structure0 {
                    invitationsDecoded0?.append(structure0)
                }
            }
        }
        invitations = invitationsDecoded0
        let removalsContainer = try containerValues.decodeIfPresent([RemoveAction?].self, forKey: .removals)
        var removalsDecoded0:[RemoveAction]? = nil
        if let removalsContainer = removalsContainer {
            removalsDecoded0 = [RemoveAction]()
            for structure0 in removalsContainer {
                if let structure0 = structure0 {
                    removalsDecoded0?.append(structure0)
                }
            }
        }
        removals = removalsDecoded0
    }
}

extension ProposalActions: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ProposalActions(invitations: \(String(describing: invitations)), removals: \(String(describing: removals)))"}
}

/// <p>
///          The actions to carry out if a proposal is <code>APPROVED</code>.
///       </p>
///          <p>Applies only to Hyperledger Fabric.</p>
public struct ProposalActions: Equatable {
    /// <p>
    ///          The actions to perform for an <code>APPROVED</code> proposal to invite an AWS account to create a member and join the network.
    ///       </p>
    public let invitations: [InviteAction]?
    /// <p>
    ///          The actions to perform for an <code>APPROVED</code> proposal to remove a member from the network, which deletes the member and all associated member resources from the network.
    ///       </p>
    public let removals: [RemoveAction]?

    public init (
        invitations: [InviteAction]? = nil,
        removals: [RemoveAction]? = nil
    )
    {
        self.invitations = invitations
        self.removals = removals
    }
}

public enum ProposalStatus {
    case actionFailed
    case approved
    case expired
    case inProgress
    case rejected
    case sdkUnknown(String)
}

extension ProposalStatus : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ProposalStatus] {
        return [
            .actionFailed,
            .approved,
            .expired,
            .inProgress,
            .rejected,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .actionFailed: return "ACTION_FAILED"
        case .approved: return "APPROVED"
        case .expired: return "EXPIRED"
        case .inProgress: return "IN_PROGRESS"
        case .rejected: return "REJECTED"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ProposalStatus(rawValue: rawValue) ?? ProposalStatus.sdkUnknown(rawValue)
    }
}

extension ProposalSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case creationDate = "CreationDate"
        case description = "Description"
        case expirationDate = "ExpirationDate"
        case proposalId = "ProposalId"
        case proposedByMemberId = "ProposedByMemberId"
        case proposedByMemberName = "ProposedByMemberName"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let expirationDate = expirationDate {
            try encodeContainer.encode(expirationDate.timeIntervalSince1970, forKey: .expirationDate)
        }
        if let proposalId = proposalId {
            try encodeContainer.encode(proposalId, forKey: .proposalId)
        }
        if let proposedByMemberId = proposedByMemberId {
            try encodeContainer.encode(proposedByMemberId, forKey: .proposedByMemberId)
        }
        if let proposedByMemberName = proposedByMemberName {
            try encodeContainer.encode(proposedByMemberName, forKey: .proposedByMemberName)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let proposalIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .proposalId)
        proposalId = proposalIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let proposedByMemberIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .proposedByMemberId)
        proposedByMemberId = proposedByMemberIdDecoded
        let proposedByMemberNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .proposedByMemberName)
        proposedByMemberName = proposedByMemberNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ProposalStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let expirationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .expirationDate)
        expirationDate = expirationDateDecoded
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension ProposalSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ProposalSummary(arn: \(String(describing: arn)), creationDate: \(String(describing: creationDate)), description: \(String(describing: description)), expirationDate: \(String(describing: expirationDate)), proposalId: \(String(describing: proposalId)), proposedByMemberId: \(String(describing: proposedByMemberId)), proposedByMemberName: \(String(describing: proposedByMemberName)), status: \(String(describing: status)))"}
}

/// <p>Properties of a proposal.</p>
///          <p>Applies only to Hyperledger Fabric.</p>
public struct ProposalSummary: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the proposal. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    public let arn: String?
    /// <p>
    ///          The date and time that the proposal was created.
    ///       </p>
    public let creationDate: Date?
    /// <p>
    ///          The description of the proposal.
    ///       </p>
    public let description: String?
    /// <p>
    ///          The date and time that the proposal expires. This is the <code>CreationDate</code> plus the <code>ProposalDurationInHours</code> that is specified in the <code>ProposalThresholdPolicy</code>.  After this date and time, if members have not cast enough votes to determine the outcome according to the voting policy, the proposal is <code>EXPIRED</code> and <code>Actions</code> are not carried out.
    ///       </p>
    public let expirationDate: Date?
    /// <p>
    ///          The unique identifier of the proposal.
    ///       </p>
    public let proposalId: String?
    /// <p>
    ///          The unique identifier of the member that created the proposal.
    ///       </p>
    public let proposedByMemberId: String?
    /// <p>
    ///          The name of the member that created the proposal.
    ///       </p>
    public let proposedByMemberName: String?
    /// <p>The status of the proposal. Values are as follows:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>IN_PROGRESS</code> - The proposal is active and open for member voting.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>APPROVED</code> - The proposal was approved with sufficient <code>YES</code> votes among members according to the <code>VotingPolicy</code> specified for the <code>Network</code>. The specified proposal actions are carried out.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>REJECTED</code> - The proposal was rejected with insufficient <code>YES</code> votes among members according to the <code>VotingPolicy</code> specified for the <code>Network</code>. The specified <code>ProposalActions</code> are not carried out.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>EXPIRED</code> - Members did not cast the number of votes required to determine the proposal outcome before the proposal expired. The specified <code>ProposalActions</code> are not carried out.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ACTION_FAILED</code> - One or more of the specified <code>ProposalActions</code> in a proposal that was approved could not be completed because of an error.</p>
    ///             </li>
    ///          </ul>
    public let status: ProposalStatus?

    public init (
        arn: String? = nil,
        creationDate: Date? = nil,
        description: String? = nil,
        expirationDate: Date? = nil,
        proposalId: String? = nil,
        proposedByMemberId: String? = nil,
        proposedByMemberName: String? = nil,
        status: ProposalStatus? = nil
    )
    {
        self.arn = arn
        self.creationDate = creationDate
        self.description = description
        self.expirationDate = expirationDate
        self.proposalId = proposalId
        self.proposedByMemberId = proposedByMemberId
        self.proposedByMemberName = proposedByMemberName
        self.status = status
    }
}

extension RejectInvitationInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RejectInvitationInput(invitationId: \(String(describing: invitationId)))"}
}

extension RejectInvitationInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct RejectInvitationInputHeadersMiddleware: Middleware {
    public let id: String = "RejectInvitationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RejectInvitationInput>,
                  next: H) -> Swift.Result<OperationOutput<RejectInvitationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RejectInvitationInput>
    public typealias MOutput = OperationOutput<RejectInvitationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RejectInvitationOutputError>
}

public struct RejectInvitationInputQueryItemMiddleware: Middleware {
    public let id: String = "RejectInvitationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RejectInvitationInput>,
                  next: H) -> Swift.Result<OperationOutput<RejectInvitationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RejectInvitationInput>
    public typealias MOutput = OperationOutput<RejectInvitationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RejectInvitationOutputError>
}

public struct RejectInvitationInput: Equatable {
    /// <p>The unique identifier of the invitation to reject.</p>
    public let invitationId: String?

    public init (
        invitationId: String? = nil
    )
    {
        self.invitationId = invitationId
    }
}

struct RejectInvitationInputBody: Equatable {
}

extension RejectInvitationInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension RejectInvitationOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RejectInvitationOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IllegalActionException" : self = .illegalActionException(try IllegalActionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RejectInvitationOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case illegalActionException(IllegalActionException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RejectInvitationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RejectInvitationOutputResponse()"}
}

extension RejectInvitationOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct RejectInvitationOutputResponse: Equatable {

    public init() {}
}

struct RejectInvitationOutputResponseBody: Equatable {
}

extension RejectInvitationOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension RemoveAction: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case memberId = "MemberId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let memberId = memberId {
            try encodeContainer.encode(memberId, forKey: .memberId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let memberIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .memberId)
        memberId = memberIdDecoded
    }
}

extension RemoveAction: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RemoveAction(memberId: \(String(describing: memberId)))"}
}

/// <p>An action to remove a member from a Managed Blockchain network as the result of a removal proposal that is <code>APPROVED</code>. The member and all associated resources are deleted from the network.</p>
///          <p>Applies only to Hyperledger Fabric.</p>
public struct RemoveAction: Equatable {
    /// <p>The unique identifier of the member to remove.</p>
    public let memberId: String?

    public init (
        memberId: String? = nil
    )
    {
        self.memberId = memberId
    }
}

extension ResourceAlreadyExistsException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResourceAlreadyExistsException(message: \(String(describing: message)))"}
}

extension ResourceAlreadyExistsException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ResourceAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A resource request is issued for a resource that already exists.</p>
public struct ResourceAlreadyExistsException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceAlreadyExistsExceptionBody: Equatable {
    public let message: String?
}

extension ResourceAlreadyExistsExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceLimitExceededException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResourceLimitExceededException(message: \(String(describing: message)))"}
}

extension ResourceLimitExceededException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ResourceLimitExceededExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The maximum number of resources of that type already exist. Ensure the resources requested are within the boundaries of the service edition and your account limits.</p>
public struct ResourceLimitExceededException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceLimitExceededExceptionBody: Equatable {
    public let message: String?
}

extension ResourceLimitExceededExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFoundException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResourceNotFoundException(message: \(String(describing: message)), resourceName: \(String(describing: resourceName)))"}
}

extension ResourceNotFoundException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
            self.resourceName = output.resourceName
        } else {
            self.message = nil
            self.resourceName = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A requested resource does not exist. It may have been deleted or referenced inaccurately.</p>
public struct ResourceNotFoundException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?
    /// <p>A requested resource does not exist. It may have been deleted or referenced inaccurately.</p>
    public var resourceName: String?

    public init (
        message: String? = nil,
        resourceName: String? = nil
    )
    {
        self.message = message
        self.resourceName = resourceName
    }
}

struct ResourceNotFoundExceptionBody: Equatable {
    public let message: String?
    public let resourceName: String?
}

extension ResourceNotFoundExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
        case resourceName = "ResourceName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
    }
}

extension ResourceNotReadyException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ResourceNotReadyException(message: \(String(describing: message)))"}
}

extension ResourceNotReadyException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: ResourceNotReadyExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested resource exists but is not in a status that can complete the operation.</p>
public struct ResourceNotReadyException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?

    public init (
        message: String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotReadyExceptionBody: Equatable {
    public let message: String?
}

extension ResourceNotReadyExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
    }
}

public enum StateDBType {
    case couchdb
    case leveldb
    case sdkUnknown(String)
}

extension StateDBType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [StateDBType] {
        return [
            .couchdb,
            .leveldb,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .couchdb: return "CouchDB"
        case .leveldb: return "LevelDB"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = StateDBType(rawValue: rawValue) ?? StateDBType.sdkUnknown(rawValue)
    }
}

public struct TagResourceInputBodyMiddleware: Middleware {
    public let id: String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagResourceInput>
    public typealias MOutput = OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagResourceOutputError>
}

extension TagResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagResourceInput(resourceArn: \(String(describing: resourceArn)), tags: \(String(describing: tags)))"}
}

extension TagResourceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, inputtagmap0) in tags {
                try tagsContainer.encode(inputtagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}

public struct TagResourceInputHeadersMiddleware: Middleware {
    public let id: String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagResourceInput>
    public typealias MOutput = OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagResourceInput>
    public typealias MOutput = OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagResourceOutputError>
}

public struct TagResourceInput: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the resource. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    public let resourceArn: String?
    /// <p>The tags to assign to the specified resource. Tag values can be empty, for example, <code>"MyTagKey" : ""</code>. You can specify multiple key-value pairs in a single request, with an overall maximum of 50 tags added to each resource.</p>
    public let tags: [String:String]?

    public init (
        resourceArn: String? = nil,
        tags: [String:String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Equatable {
    public let tags: [String:String]?
}

extension TagResourceInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([String: String?].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Equatable {
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceNotReadyException(ResourceNotReadyException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TagResourceOutputResponse()"}
}

extension TagResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Equatable {

    public init() {}
}

struct TagResourceOutputResponseBody: Equatable {
}

extension TagResourceOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public enum ThresholdComparator {
    case greaterThan
    case greaterThanOrEqualTo
    case sdkUnknown(String)
}

extension ThresholdComparator : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [ThresholdComparator] {
        return [
            .greaterThan,
            .greaterThanOrEqualTo,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .greaterThan: return "GREATER_THAN"
        case .greaterThanOrEqualTo: return "GREATER_THAN_OR_EQUAL_TO"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = ThresholdComparator(rawValue: rawValue) ?? ThresholdComparator.sdkUnknown(rawValue)
    }
}

extension ThrottlingException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ThrottlingException()"}
}

extension ThrottlingException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request or operation could not be performed because a service is throttling requests. The most common source of throttling errors is launching EC2 instances such that your service limit for EC2 instances is exceeded. Request a limit increase or delete unused resources if possible.</p>
public struct ThrottlingException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client

    public init() {}
}

extension TooManyTagsException: CustomDebugStringConvertible {
    public var debugDescription: String {
        "TooManyTagsException(message: \(String(describing: message)), resourceName: \(String(describing: resourceName)))"}
}

extension TooManyTagsException: AWSHttpServiceError {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        if case .data(let data) = httpResponse.body,
            let unwrappedData = data,
            let responseDecoder = decoder {
            let output: TooManyTagsExceptionBody = try responseDecoder.decode(responseBody: unwrappedData)
            self.message = output.message
            self.resourceName = output.resourceName
        } else {
            self.message = nil
            self.resourceName = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p></p>
public struct TooManyTagsException: ClientRuntime.ServiceError, Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: HttpStatusCode?
    public var _message: String?
    public var _requestID: String?
    public var _retryable: Bool = false
    public var _isThrottling: Bool = false
    public var _type: ErrorType = .client
    public var message: String?
    /// <p></p>
    public var resourceName: String?

    public init (
        message: String? = nil,
        resourceName: String? = nil
    )
    {
        self.message = message
        self.resourceName = resourceName
    }
}

struct TooManyTagsExceptionBody: Equatable {
    public let message: String?
    public let resourceName: String?
}

extension TooManyTagsExceptionBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case message = "Message"
        case resourceName = "ResourceName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
    }
}

extension UntagResourceInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UntagResourceInput(resourceArn: \(String(describing: resourceArn)), tagKeys: \(String(describing: tagKeys)))"}
}

extension UntagResourceInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}

public struct UntagResourceInputHeadersMiddleware: Middleware {
    public let id: String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagResourceInput>
    public typealias MOutput = OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let tagKeys = input.operationInput.tagKeys {
            tagKeys.forEach { queryItemValue in
                let queryItem = URLQueryItem(name: "tagKeys".urlPercentEncoding(), value: String(queryItemValue).urlPercentEncoding())
                input.builder.withQueryItem(queryItem)
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UntagResourceInput>
    public typealias MOutput = OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UntagResourceOutputError>
}

public struct UntagResourceInput: Equatable {
    /// <p>The Amazon Resource Name (ARN) of the resource. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    public let resourceArn: String?
    /// <p>The tag keys.</p>
    public let tagKeys: [String]?

    public init (
        resourceArn: String? = nil,
        tagKeys: [String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Equatable {
}

extension UntagResourceInputBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension UntagResourceOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotReadyException" : self = .resourceNotReadyException(try ResourceNotReadyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Equatable {
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case resourceNotReadyException(ResourceNotReadyException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UntagResourceOutputResponse()"}
}

extension UntagResourceOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Equatable {

    public init() {}
}

struct UntagResourceOutputResponseBody: Equatable {
}

extension UntagResourceOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct UpdateMemberInputBodyMiddleware: Middleware {
    public let id: String = "UpdateMemberInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateMemberInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateMemberInput>
    public typealias MOutput = OperationOutput<UpdateMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateMemberOutputError>
}

extension UpdateMemberInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateMemberInput(logPublishingConfiguration: \(String(describing: logPublishingConfiguration)), memberId: \(String(describing: memberId)), networkId: \(String(describing: networkId)))"}
}

extension UpdateMemberInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case logPublishingConfiguration = "LogPublishingConfiguration"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logPublishingConfiguration = logPublishingConfiguration {
            try encodeContainer.encode(logPublishingConfiguration, forKey: .logPublishingConfiguration)
        }
    }
}

public struct UpdateMemberInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateMemberInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateMemberInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateMemberInput>
    public typealias MOutput = OperationOutput<UpdateMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateMemberOutputError>
}

public struct UpdateMemberInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateMemberInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateMemberInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateMemberOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateMemberInput>
    public typealias MOutput = OperationOutput<UpdateMemberOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateMemberOutputError>
}

public struct UpdateMemberInput: Equatable {
    /// <p>Configuration properties for publishing to Amazon CloudWatch Logs.</p>
    public let logPublishingConfiguration: MemberLogPublishingConfiguration?
    /// <p>The unique identifier of the member.</p>
    public let memberId: String?
    /// <p>The unique identifier of the Managed Blockchain network to which the member belongs.</p>
    public let networkId: String?

    public init (
        logPublishingConfiguration: MemberLogPublishingConfiguration? = nil,
        memberId: String? = nil,
        networkId: String? = nil
    )
    {
        self.logPublishingConfiguration = logPublishingConfiguration
        self.memberId = memberId
        self.networkId = networkId
    }
}

struct UpdateMemberInputBody: Equatable {
    public let logPublishingConfiguration: MemberLogPublishingConfiguration?
}

extension UpdateMemberInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case logPublishingConfiguration = "LogPublishingConfiguration"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logPublishingConfigurationDecoded = try containerValues.decodeIfPresent(MemberLogPublishingConfiguration.self, forKey: .logPublishingConfiguration)
        logPublishingConfiguration = logPublishingConfigurationDecoded
    }
}

extension UpdateMemberOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateMemberOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateMemberOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateMemberOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateMemberOutputResponse()"}
}

extension UpdateMemberOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct UpdateMemberOutputResponse: Equatable {

    public init() {}
}

struct UpdateMemberOutputResponseBody: Equatable {
}

extension UpdateMemberOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct UpdateNodeInputBodyMiddleware: Middleware {
    public let id: String = "UpdateNodeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateNodeInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateNodeInput>
    public typealias MOutput = OperationOutput<UpdateNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateNodeOutputError>
}

extension UpdateNodeInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateNodeInput(logPublishingConfiguration: \(String(describing: logPublishingConfiguration)), memberId: \(String(describing: memberId)), networkId: \(String(describing: networkId)), nodeId: \(String(describing: nodeId)))"}
}

extension UpdateNodeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case logPublishingConfiguration = "LogPublishingConfiguration"
        case memberId = "MemberId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logPublishingConfiguration = logPublishingConfiguration {
            try encodeContainer.encode(logPublishingConfiguration, forKey: .logPublishingConfiguration)
        }
        if let memberId = memberId {
            try encodeContainer.encode(memberId, forKey: .memberId)
        }
    }
}

public struct UpdateNodeInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateNodeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateNodeInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateNodeInput>
    public typealias MOutput = OperationOutput<UpdateNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateNodeOutputError>
}

public struct UpdateNodeInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateNodeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateNodeInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateNodeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateNodeInput>
    public typealias MOutput = OperationOutput<UpdateNodeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateNodeOutputError>
}

public struct UpdateNodeInput: Equatable {
    /// <p>Configuration properties for publishing to Amazon CloudWatch Logs.</p>
    public let logPublishingConfiguration: NodeLogPublishingConfiguration?
    /// <p>The unique identifier of the member that owns the node.</p>
    ///          <p>Applies only to Hyperledger Fabric.</p>
    public let memberId: String?
    /// <p>The unique identifier of the network that the node is on.</p>
    public let networkId: String?
    /// <p>The unique identifier of the node.</p>
    public let nodeId: String?

    public init (
        logPublishingConfiguration: NodeLogPublishingConfiguration? = nil,
        memberId: String? = nil,
        networkId: String? = nil,
        nodeId: String? = nil
    )
    {
        self.logPublishingConfiguration = logPublishingConfiguration
        self.memberId = memberId
        self.networkId = networkId
        self.nodeId = nodeId
    }
}

struct UpdateNodeInputBody: Equatable {
    public let memberId: String?
    public let logPublishingConfiguration: NodeLogPublishingConfiguration?
}

extension UpdateNodeInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case logPublishingConfiguration = "LogPublishingConfiguration"
        case memberId = "MemberId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let memberIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .memberId)
        memberId = memberIdDecoded
        let logPublishingConfigurationDecoded = try containerValues.decodeIfPresent(NodeLogPublishingConfiguration.self, forKey: .logPublishingConfiguration)
        logPublishingConfiguration = logPublishingConfigurationDecoded
    }
}

extension UpdateNodeOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateNodeOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateNodeOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateNodeOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdateNodeOutputResponse()"}
}

extension UpdateNodeOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct UpdateNodeOutputResponse: Equatable {

    public init() {}
}

struct UpdateNodeOutputResponseBody: Equatable {
}

extension UpdateNodeOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

public struct VoteOnProposalInputBodyMiddleware: Middleware {
    public let id: String = "VoteOnProposalInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<VoteOnProposalInput>,
                  next: H) -> Swift.Result<OperationOutput<VoteOnProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<VoteOnProposalInput>
    public typealias MOutput = OperationOutput<VoteOnProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<VoteOnProposalOutputError>
}

extension VoteOnProposalInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VoteOnProposalInput(networkId: \(String(describing: networkId)), proposalId: \(String(describing: proposalId)), vote: \(String(describing: vote)), voterMemberId: \(String(describing: voterMemberId)))"}
}

extension VoteOnProposalInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case vote = "Vote"
        case voterMemberId = "VoterMemberId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let vote = vote {
            try encodeContainer.encode(vote.rawValue, forKey: .vote)
        }
        if let voterMemberId = voterMemberId {
            try encodeContainer.encode(voterMemberId, forKey: .voterMemberId)
        }
    }
}

public struct VoteOnProposalInputHeadersMiddleware: Middleware {
    public let id: String = "VoteOnProposalInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<VoteOnProposalInput>,
                  next: H) -> Swift.Result<OperationOutput<VoteOnProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<VoteOnProposalInput>
    public typealias MOutput = OperationOutput<VoteOnProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<VoteOnProposalOutputError>
}

public struct VoteOnProposalInputQueryItemMiddleware: Middleware {
    public let id: String = "VoteOnProposalInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<VoteOnProposalInput>,
                  next: H) -> Swift.Result<OperationOutput<VoteOnProposalOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<VoteOnProposalInput>
    public typealias MOutput = OperationOutput<VoteOnProposalOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<VoteOnProposalOutputError>
}

public struct VoteOnProposalInput: Equatable {
    /// <p>
    ///          The unique identifier of the network.
    ///       </p>
    public let networkId: String?
    /// <p>
    ///          The unique identifier of the proposal.
    ///       </p>
    public let proposalId: String?
    /// <p>
    ///          The value of the vote.
    ///       </p>
    public let vote: VoteValue?
    /// <p>The unique identifier of the member casting the vote.
    ///       </p>
    public let voterMemberId: String?

    public init (
        networkId: String? = nil,
        proposalId: String? = nil,
        vote: VoteValue? = nil,
        voterMemberId: String? = nil
    )
    {
        self.networkId = networkId
        self.proposalId = proposalId
        self.vote = vote
        self.voterMemberId = voterMemberId
    }
}

struct VoteOnProposalInputBody: Equatable {
    public let voterMemberId: String?
    public let vote: VoteValue?
}

extension VoteOnProposalInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case vote = "Vote"
        case voterMemberId = "VoterMemberId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let voterMemberIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .voterMemberId)
        voterMemberId = voterMemberIdDecoded
        let voteDecoded = try containerValues.decodeIfPresent(VoteValue.self, forKey: .vote)
        vote = voteDecoded
    }
}

extension VoteOnProposalOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension VoteOnProposalOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IllegalActionException" : self = .illegalActionException(try IllegalActionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceErrorException" : self = .internalServiceErrorException(try InternalServiceErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum VoteOnProposalOutputError: Equatable {
    case accessDeniedException(AccessDeniedException)
    case illegalActionException(IllegalActionException)
    case internalServiceErrorException(InternalServiceErrorException)
    case invalidRequestException(InvalidRequestException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension VoteOnProposalOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VoteOnProposalOutputResponse()"}
}

extension VoteOnProposalOutputResponse: HttpResponseBinding {
    public init (httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
    }
}

public struct VoteOnProposalOutputResponse: Equatable {

    public init() {}
}

struct VoteOnProposalOutputResponseBody: Equatable {
}

extension VoteOnProposalOutputResponseBody: Decodable {

    public init (from decoder: Decoder) throws {
    }
}

extension VoteSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case memberId = "MemberId"
        case memberName = "MemberName"
        case vote = "Vote"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let memberId = memberId {
            try encodeContainer.encode(memberId, forKey: .memberId)
        }
        if let memberName = memberName {
            try encodeContainer.encode(memberName, forKey: .memberName)
        }
        if let vote = vote {
            try encodeContainer.encode(vote.rawValue, forKey: .vote)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let voteDecoded = try containerValues.decodeIfPresent(VoteValue.self, forKey: .vote)
        vote = voteDecoded
        let memberNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .memberName)
        memberName = memberNameDecoded
        let memberIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .memberId)
        memberId = memberIdDecoded
    }
}

extension VoteSummary: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VoteSummary(memberId: \(String(describing: memberId)), memberName: \(String(describing: memberName)), vote: \(String(describing: vote)))"}
}

/// <p>
///          Properties of an individual vote that a member cast for a proposal.
///       </p>
///          <p>Applies only to Hyperledger Fabric.</p>
public struct VoteSummary: Equatable {
    /// <p>
    ///          The unique identifier of the member that cast the vote.
    ///       </p>
    public let memberId: String?
    /// <p>
    ///          The name of the member that cast the vote.
    ///       </p>
    public let memberName: String?
    /// <p>
    ///          The vote value, either <code>YES</code> or <code>NO</code>.
    ///       </p>
    public let vote: VoteValue?

    public init (
        memberId: String? = nil,
        memberName: String? = nil,
        vote: VoteValue? = nil
    )
    {
        self.memberId = memberId
        self.memberName = memberName
        self.vote = vote
    }
}

public enum VoteValue {
    case no
    case yes
    case sdkUnknown(String)
}

extension VoteValue : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [VoteValue] {
        return [
            .no,
            .yes,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .no: return "NO"
        case .yes: return "YES"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = VoteValue(rawValue: rawValue) ?? VoteValue.sdkUnknown(rawValue)
    }
}

extension VotingPolicy: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case approvalThresholdPolicy = "ApprovalThresholdPolicy"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let approvalThresholdPolicy = approvalThresholdPolicy {
            try encodeContainer.encode(approvalThresholdPolicy, forKey: .approvalThresholdPolicy)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let approvalThresholdPolicyDecoded = try containerValues.decodeIfPresent(ApprovalThresholdPolicy.self, forKey: .approvalThresholdPolicy)
        approvalThresholdPolicy = approvalThresholdPolicyDecoded
    }
}

extension VotingPolicy: CustomDebugStringConvertible {
    public var debugDescription: String {
        "VotingPolicy(approvalThresholdPolicy: \(String(describing: approvalThresholdPolicy)))"}
}

/// <p>
///          The voting rules for the network to decide if a proposal is accepted
///       </p>
///          <p>Applies only to Hyperledger Fabric.</p>
public struct VotingPolicy: Equatable {
    /// <p>Defines the rules for the network for voting on proposals, such as the percentage of <code>YES</code> votes required for the proposal to be approved and the duration of the proposal. The policy applies to all proposals and is specified when the network is created.</p>
    public let approvalThresholdPolicy: ApprovalThresholdPolicy?

    public init (
        approvalThresholdPolicy: ApprovalThresholdPolicy? = nil
    )
    {
        self.approvalThresholdPolicy = approvalThresholdPolicy
    }
}
