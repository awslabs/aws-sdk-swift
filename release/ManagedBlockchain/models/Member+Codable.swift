// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Member: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case creationDate = "CreationDate"
        case description = "Description"
        case frameworkAttributes = "FrameworkAttributes"
        case id = "Id"
        case logPublishingConfiguration = "LogPublishingConfiguration"
        case name = "Name"
        case networkId = "NetworkId"
        case status = "Status"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let frameworkAttributes = frameworkAttributes {
            try encodeContainer.encode(frameworkAttributes, forKey: .frameworkAttributes)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let logPublishingConfiguration = logPublishingConfiguration {
            try encodeContainer.encode(logPublishingConfiguration, forKey: .logPublishingConfiguration)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let networkId = networkId {
            try encodeContainer.encode(networkId, forKey: .networkId)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, outputtagmap0) in tags {
                try tagsContainer.encode(outputtagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkId)
        networkId = networkIdDecoded
        let idDecoded = try containerValues.decodeIfPresent(String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let frameworkAttributesDecoded = try containerValues.decodeIfPresent(MemberFrameworkAttributes.self, forKey: .frameworkAttributes)
        frameworkAttributes = frameworkAttributesDecoded
        let logPublishingConfigurationDecoded = try containerValues.decodeIfPresent(MemberLogPublishingConfiguration.self, forKey: .logPublishingConfiguration)
        logPublishingConfiguration = logPublishingConfigurationDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MemberStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .tags)
        var tagsDecoded0: [String:String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [String:String]()
            for (key0, tagvalue0) in tagsContainer {
                tagsDecoded0?[key0] = tagvalue0
            }
        }
        tags = tagsDecoded0
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
    }
}
