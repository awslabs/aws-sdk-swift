// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Amazon WorkLink is a cloud-based service that provides secure access
///             to internal websites and web apps from iOS and Android phones. In a single step, your users, such as
///             employees, can access internal websites as efficiently as they access any other public website.
///             They enter a URL in their web browser, or choose a link to an internal website in an email. Amazon WorkLink
///             authenticates the user's access and securely renders authorized internal web content in a secure
///             rendering service in the AWS cloud. Amazon WorkLink doesn't download or store any internal web content on
///             mobile devices.</p>
public protocol WorkLinkClientProtocol {
    /// <p>Specifies a domain to be associated to Amazon WorkLink.</p>
    func associateDomain(input: AssociateDomainInput, completion: @escaping (SdkResult<AssociateDomainOutputResponse, AssociateDomainOutputError>) -> Void)
    /// <p>Associates a website authorization provider with a specified fleet. This is used to authorize users against associated websites in the company network.</p>
    func associateWebsiteAuthorizationProvider(input: AssociateWebsiteAuthorizationProviderInput, completion: @escaping (SdkResult<AssociateWebsiteAuthorizationProviderOutputResponse, AssociateWebsiteAuthorizationProviderOutputError>) -> Void)
    /// <p>Imports the root certificate of a certificate authority (CA) used to obtain TLS
    ///             certificates used by associated websites within the company network.</p>
    func associateWebsiteCertificateAuthority(input: AssociateWebsiteCertificateAuthorityInput, completion: @escaping (SdkResult<AssociateWebsiteCertificateAuthorityOutputResponse, AssociateWebsiteCertificateAuthorityOutputError>) -> Void)
    /// <p>Creates a fleet. A fleet consists of resources and the configuration that delivers
    ///             associated websites to authorized users who download and set up the Amazon WorkLink app.</p>
    func createFleet(input: CreateFleetInput, completion: @escaping (SdkResult<CreateFleetOutputResponse, CreateFleetOutputError>) -> Void)
    /// <p>Deletes a fleet. Prevents users from accessing previously associated websites. </p>
    func deleteFleet(input: DeleteFleetInput, completion: @escaping (SdkResult<DeleteFleetOutputResponse, DeleteFleetOutputError>) -> Void)
    /// <p>Describes the configuration for delivering audit streams to the customer account.</p>
    func describeAuditStreamConfiguration(input: DescribeAuditStreamConfigurationInput, completion: @escaping (SdkResult<DescribeAuditStreamConfigurationOutputResponse, DescribeAuditStreamConfigurationOutputError>) -> Void)
    /// <p>Describes the networking configuration to access the internal websites associated with
    ///             the specified fleet.</p>
    func describeCompanyNetworkConfiguration(input: DescribeCompanyNetworkConfigurationInput, completion: @escaping (SdkResult<DescribeCompanyNetworkConfigurationOutputResponse, DescribeCompanyNetworkConfigurationOutputError>) -> Void)
    /// <p>Provides information about a user's device.</p>
    func describeDevice(input: DescribeDeviceInput, completion: @escaping (SdkResult<DescribeDeviceOutputResponse, DescribeDeviceOutputError>) -> Void)
    /// <p>Describes the device policy configuration for the specified fleet.</p>
    func describeDevicePolicyConfiguration(input: DescribeDevicePolicyConfigurationInput, completion: @escaping (SdkResult<DescribeDevicePolicyConfigurationOutputResponse, DescribeDevicePolicyConfigurationOutputError>) -> Void)
    /// <p>Provides information about the domain.</p>
    func describeDomain(input: DescribeDomainInput, completion: @escaping (SdkResult<DescribeDomainOutputResponse, DescribeDomainOutputError>) -> Void)
    /// <p>Provides basic information for the specified fleet, excluding identity provider,
    ///             networking, and device configuration details.</p>
    func describeFleetMetadata(input: DescribeFleetMetadataInput, completion: @escaping (SdkResult<DescribeFleetMetadataOutputResponse, DescribeFleetMetadataOutputError>) -> Void)
    /// <p>Describes the identity provider configuration of the specified fleet.</p>
    func describeIdentityProviderConfiguration(input: DescribeIdentityProviderConfigurationInput, completion: @escaping (SdkResult<DescribeIdentityProviderConfigurationOutputResponse, DescribeIdentityProviderConfigurationOutputError>) -> Void)
    /// <p>Provides information about the certificate authority.</p>
    func describeWebsiteCertificateAuthority(input: DescribeWebsiteCertificateAuthorityInput, completion: @escaping (SdkResult<DescribeWebsiteCertificateAuthorityOutputResponse, DescribeWebsiteCertificateAuthorityOutputError>) -> Void)
    /// <p>Disassociates a domain from Amazon WorkLink. End users lose the ability to access the domain with Amazon WorkLink. </p>
    func disassociateDomain(input: DisassociateDomainInput, completion: @escaping (SdkResult<DisassociateDomainOutputResponse, DisassociateDomainOutputError>) -> Void)
    /// <p>Disassociates a website authorization provider from a specified fleet. After the
    ///             disassociation, users can't load any associated websites that require this authorization
    ///             provider.</p>
    func disassociateWebsiteAuthorizationProvider(input: DisassociateWebsiteAuthorizationProviderInput, completion: @escaping (SdkResult<DisassociateWebsiteAuthorizationProviderOutputResponse, DisassociateWebsiteAuthorizationProviderOutputError>) -> Void)
    /// <p>Removes a certificate authority (CA).</p>
    func disassociateWebsiteCertificateAuthority(input: DisassociateWebsiteCertificateAuthorityInput, completion: @escaping (SdkResult<DisassociateWebsiteCertificateAuthorityOutputResponse, DisassociateWebsiteCertificateAuthorityOutputError>) -> Void)
    /// <p>Retrieves a list of devices registered with the specified fleet.</p>
    func listDevices(input: ListDevicesInput, completion: @escaping (SdkResult<ListDevicesOutputResponse, ListDevicesOutputError>) -> Void)
    /// <p>Retrieves a list of domains associated to a specified fleet.</p>
    func listDomains(input: ListDomainsInput, completion: @escaping (SdkResult<ListDomainsOutputResponse, ListDomainsOutputError>) -> Void)
    /// <p>Retrieves a list of fleets for the current account and Region.</p>
    func listFleets(input: ListFleetsInput, completion: @escaping (SdkResult<ListFleetsOutputResponse, ListFleetsOutputError>) -> Void)
    /// <p>Retrieves a list of tags for the specified resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// <p>Retrieves a list of website authorization providers associated with a specified fleet.</p>
    func listWebsiteAuthorizationProviders(input: ListWebsiteAuthorizationProvidersInput, completion: @escaping (SdkResult<ListWebsiteAuthorizationProvidersOutputResponse, ListWebsiteAuthorizationProvidersOutputError>) -> Void)
    /// <p>Retrieves a list of certificate authorities added for the current account and
    ///             Region.</p>
    func listWebsiteCertificateAuthorities(input: ListWebsiteCertificateAuthoritiesInput, completion: @escaping (SdkResult<ListWebsiteCertificateAuthoritiesOutputResponse, ListWebsiteCertificateAuthoritiesOutputError>) -> Void)
    /// <p>Moves a domain to ACTIVE status if it was in the INACTIVE status.</p>
    func restoreDomainAccess(input: RestoreDomainAccessInput, completion: @escaping (SdkResult<RestoreDomainAccessOutputResponse, RestoreDomainAccessOutputError>) -> Void)
    /// <p>Moves a domain to INACTIVE status if it was in the ACTIVE status.</p>
    func revokeDomainAccess(input: RevokeDomainAccessInput, completion: @escaping (SdkResult<RevokeDomainAccessOutputResponse, RevokeDomainAccessOutputError>) -> Void)
    /// <p>Signs the user out from all of their devices. The user can sign in again if they have
    ///             valid credentials.</p>
    func signOutUser(input: SignOutUserInput, completion: @escaping (SdkResult<SignOutUserOutputResponse, SignOutUserOutputError>) -> Void)
    /// <p>Adds or overwrites one or more tags for the specified resource, such as a fleet. Each tag consists of a key and an optional value. If a resource already has a tag with the same key, this operation updates its value.</p>
    func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// <p>Removes one or more tags from the specified resource.</p>
    func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// <p>Updates the audit stream configuration for the fleet.</p>
    func updateAuditStreamConfiguration(input: UpdateAuditStreamConfigurationInput, completion: @escaping (SdkResult<UpdateAuditStreamConfigurationOutputResponse, UpdateAuditStreamConfigurationOutputError>) -> Void)
    /// <p>Updates the company network configuration for the fleet.</p>
    func updateCompanyNetworkConfiguration(input: UpdateCompanyNetworkConfigurationInput, completion: @escaping (SdkResult<UpdateCompanyNetworkConfigurationOutputResponse, UpdateCompanyNetworkConfigurationOutputError>) -> Void)
    /// <p>Updates the device policy configuration for the fleet.</p>
    func updateDevicePolicyConfiguration(input: UpdateDevicePolicyConfigurationInput, completion: @escaping (SdkResult<UpdateDevicePolicyConfigurationOutputResponse, UpdateDevicePolicyConfigurationOutputError>) -> Void)
    /// <p>Updates domain metadata, such as DisplayName.</p>
    func updateDomainMetadata(input: UpdateDomainMetadataInput, completion: @escaping (SdkResult<UpdateDomainMetadataOutputResponse, UpdateDomainMetadataOutputError>) -> Void)
    /// <p>Updates fleet metadata, such as DisplayName.</p>
    func updateFleetMetadata(input: UpdateFleetMetadataInput, completion: @escaping (SdkResult<UpdateFleetMetadataOutputResponse, UpdateFleetMetadataOutputError>) -> Void)
    /// <p>Updates the identity provider configuration for the fleet.</p>
    func updateIdentityProviderConfiguration(input: UpdateIdentityProviderConfigurationInput, completion: @escaping (SdkResult<UpdateIdentityProviderConfigurationOutputResponse, UpdateIdentityProviderConfigurationOutputError>) -> Void)
}
