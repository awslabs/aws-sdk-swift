// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateConferenceProviderInputBody: Equatable {
    public let conferenceProviderName: String?
    public let conferenceProviderType: ConferenceProviderType?
    public let iPDialIn: IPDialIn?
    public let pSTNDialIn: PSTNDialIn?
    public let meetingSetting: MeetingSetting?
    public let clientRequestToken: String?
    public let tags: [Tag]?
}

extension CreateConferenceProviderInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case conferenceProviderName = "ConferenceProviderName"
        case conferenceProviderType = "ConferenceProviderType"
        case iPDialIn = "IPDialIn"
        case meetingSetting = "MeetingSetting"
        case pSTNDialIn = "PSTNDialIn"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conferenceProviderNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .conferenceProviderName)
        conferenceProviderName = conferenceProviderNameDecoded
        let conferenceProviderTypeDecoded = try containerValues.decodeIfPresent(ConferenceProviderType.self, forKey: .conferenceProviderType)
        conferenceProviderType = conferenceProviderTypeDecoded
        let iPDialInDecoded = try containerValues.decodeIfPresent(IPDialIn.self, forKey: .iPDialIn)
        iPDialIn = iPDialInDecoded
        let pSTNDialInDecoded = try containerValues.decodeIfPresent(PSTNDialIn.self, forKey: .pSTNDialIn)
        pSTNDialIn = pSTNDialInDecoded
        let meetingSettingDecoded = try containerValues.decodeIfPresent(MeetingSetting.self, forKey: .meetingSetting)
        meetingSetting = meetingSettingDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
