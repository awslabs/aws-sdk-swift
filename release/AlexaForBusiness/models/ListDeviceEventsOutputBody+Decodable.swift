// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDeviceEventsOutputBody: Equatable {
    public let deviceEvents: [DeviceEvent]?
    public let nextToken: String?
}

extension ListDeviceEventsOutputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case deviceEvents = "DeviceEvents"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceEventsContainer = try containerValues.decodeIfPresent([DeviceEvent].self, forKey: .deviceEvents)
        var deviceEventsDecoded0:[DeviceEvent]? = nil
        if let deviceEventsContainer = deviceEventsContainer {
            deviceEventsDecoded0 = [DeviceEvent]()
            for structure0 in deviceEventsContainer {
                deviceEventsDecoded0?.append(structure0)
            }
        }
        deviceEvents = deviceEventsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
