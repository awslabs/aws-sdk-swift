// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateNetworkProfileInputBody: Equatable {
    public let networkProfileArn: String?
    public let networkProfileName: String?
    public let description: String?
    public let currentPassword: String?
    public let nextPassword: String?
    public let certificateAuthorityArn: String?
    public let trustAnchors: [String]?
}

extension UpdateNetworkProfileInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case certificateAuthorityArn = "CertificateAuthorityArn"
        case currentPassword = "CurrentPassword"
        case description = "Description"
        case networkProfileArn = "NetworkProfileArn"
        case networkProfileName = "NetworkProfileName"
        case nextPassword = "NextPassword"
        case trustAnchors = "TrustAnchors"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkProfileArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkProfileArn)
        networkProfileArn = networkProfileArnDecoded
        let networkProfileNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .networkProfileName)
        networkProfileName = networkProfileNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let currentPasswordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .currentPassword)
        currentPassword = currentPasswordDecoded
        let nextPasswordDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextPassword)
        nextPassword = nextPasswordDecoded
        let certificateAuthorityArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .certificateAuthorityArn)
        certificateAuthorityArn = certificateAuthorityArnDecoded
        let trustAnchorsContainer = try containerValues.decodeIfPresent([String].self, forKey: .trustAnchors)
        var trustAnchorsDecoded0:[String]? = nil
        if let trustAnchorsContainer = trustAnchorsContainer {
            trustAnchorsDecoded0 = [String]()
            for string0 in trustAnchorsContainer {
                trustAnchorsDecoded0?.append(string0)
            }
        }
        trustAnchors = trustAnchorsDecoded0
    }
}
