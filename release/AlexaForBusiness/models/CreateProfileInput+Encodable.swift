// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateProfileInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case address = "Address"
        case clientRequestToken = "ClientRequestToken"
        case dataRetentionOptIn = "DataRetentionOptIn"
        case distanceUnit = "DistanceUnit"
        case locale = "Locale"
        case maxVolumeLimit = "MaxVolumeLimit"
        case meetingRoomConfiguration = "MeetingRoomConfiguration"
        case pSTNEnabled = "PSTNEnabled"
        case profileName = "ProfileName"
        case setupModeDisabled = "SetupModeDisabled"
        case tags = "Tags"
        case temperatureUnit = "TemperatureUnit"
        case timezone = "Timezone"
        case wakeWord = "WakeWord"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let address = address {
            try encodeContainer.encode(address, forKey: .address)
        }
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let dataRetentionOptIn = dataRetentionOptIn {
            try encodeContainer.encode(dataRetentionOptIn, forKey: .dataRetentionOptIn)
        }
        if let distanceUnit = distanceUnit {
            try encodeContainer.encode(distanceUnit.rawValue, forKey: .distanceUnit)
        }
        if let locale = locale {
            try encodeContainer.encode(locale, forKey: .locale)
        }
        if let maxVolumeLimit = maxVolumeLimit {
            try encodeContainer.encode(maxVolumeLimit, forKey: .maxVolumeLimit)
        }
        if let meetingRoomConfiguration = meetingRoomConfiguration {
            try encodeContainer.encode(meetingRoomConfiguration, forKey: .meetingRoomConfiguration)
        }
        if let pSTNEnabled = pSTNEnabled {
            try encodeContainer.encode(pSTNEnabled, forKey: .pSTNEnabled)
        }
        if let profileName = profileName {
            try encodeContainer.encode(profileName, forKey: .profileName)
        }
        if let setupModeDisabled = setupModeDisabled {
            try encodeContainer.encode(setupModeDisabled, forKey: .setupModeDisabled)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let temperatureUnit = temperatureUnit {
            try encodeContainer.encode(temperatureUnit.rawValue, forKey: .temperatureUnit)
        }
        if let timezone = timezone {
            try encodeContainer.encode(timezone, forKey: .timezone)
        }
        if let wakeWord = wakeWord {
            try encodeContainer.encode(wakeWord.rawValue, forKey: .wakeWord)
        }
    }
}
