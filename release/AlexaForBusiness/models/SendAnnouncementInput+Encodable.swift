// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SendAnnouncementInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case content = "Content"
        case roomFilters = "RoomFilters"
        case timeToLiveInSeconds = "TimeToLiveInSeconds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let content = content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let roomFilters = roomFilters {
            var roomFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .roomFilters)
            for filterlist0 in roomFilters {
                try roomFiltersContainer.encode(filterlist0)
            }
        }
        if let timeToLiveInSeconds = timeToLiveInSeconds {
            try encodeContainer.encode(timeToLiveInSeconds, forKey: .timeToLiveInSeconds)
        }
    }
}
