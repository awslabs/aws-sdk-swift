// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateNetworkProfileInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case certificateAuthorityArn = "CertificateAuthorityArn"
        case clientRequestToken = "ClientRequestToken"
        case currentPassword = "CurrentPassword"
        case description = "Description"
        case eapMethod = "EapMethod"
        case networkProfileName = "NetworkProfileName"
        case nextPassword = "NextPassword"
        case securityType = "SecurityType"
        case ssid = "Ssid"
        case tags = "Tags"
        case trustAnchors = "TrustAnchors"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateAuthorityArn = certificateAuthorityArn {
            try encodeContainer.encode(certificateAuthorityArn, forKey: .certificateAuthorityArn)
        }
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let currentPassword = currentPassword {
            try encodeContainer.encode(currentPassword, forKey: .currentPassword)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let eapMethod = eapMethod {
            try encodeContainer.encode(eapMethod.rawValue, forKey: .eapMethod)
        }
        if let networkProfileName = networkProfileName {
            try encodeContainer.encode(networkProfileName, forKey: .networkProfileName)
        }
        if let nextPassword = nextPassword {
            try encodeContainer.encode(nextPassword, forKey: .nextPassword)
        }
        if let securityType = securityType {
            try encodeContainer.encode(securityType.rawValue, forKey: .securityType)
        }
        if let ssid = ssid {
            try encodeContainer.encode(ssid, forKey: .ssid)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let trustAnchors = trustAnchors {
            var trustAnchorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .trustAnchors)
            for trustanchorlist0 in trustAnchors {
                try trustAnchorsContainer.encode(trustanchorlist0)
            }
        }
    }
}
