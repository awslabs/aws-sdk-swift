// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SkillSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case enablementType = "EnablementType"
        case skillId = "SkillId"
        case skillName = "SkillName"
        case skillType = "SkillType"
        case supportsLinking = "SupportsLinking"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enablementType = enablementType {
            try encodeContainer.encode(enablementType.rawValue, forKey: .enablementType)
        }
        if let skillId = skillId {
            try encodeContainer.encode(skillId, forKey: .skillId)
        }
        if let skillName = skillName {
            try encodeContainer.encode(skillName, forKey: .skillName)
        }
        if let skillType = skillType {
            try encodeContainer.encode(skillType.rawValue, forKey: .skillType)
        }
        if supportsLinking != false {
            try encodeContainer.encode(supportsLinking, forKey: .supportsLinking)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let skillIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .skillId)
        skillId = skillIdDecoded
        let skillNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .skillName)
        skillName = skillNameDecoded
        let supportsLinkingDecoded = try containerValues.decode(Bool.self, forKey: .supportsLinking)
        supportsLinking = supportsLinkingDecoded
        let enablementTypeDecoded = try containerValues.decodeIfPresent(EnablementType.self, forKey: .enablementType)
        enablementType = enablementTypeDecoded
        let skillTypeDecoded = try containerValues.decodeIfPresent(SkillType.self, forKey: .skillType)
        skillType = skillTypeDecoded
    }
}
