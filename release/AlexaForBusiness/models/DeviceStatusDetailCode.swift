// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum DeviceStatusDetailCode {
    case associationRejection
    case authenticationFailure
    case certificateAuthorityAccessDenied
    case certificateIssuingLimitExceeded
    case credentialsAccessFailure
    case deviceSoftwareUpdateNeeded
    case deviceWasOffline
    case dhcpFailure
    case dnsFailure
    case internetUnavailable
    case invalidCertificateAuthority
    case invalidPasswordState
    case networkProfileNotFound
    case passwordManagerAccessDenied
    case passwordNotFound
    case tlsVersionMismatch
    case unknownFailure
    case sdkUnknown(String)
}

extension DeviceStatusDetailCode : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [DeviceStatusDetailCode] {
        return [
            .associationRejection,
            .authenticationFailure,
            .certificateAuthorityAccessDenied,
            .certificateIssuingLimitExceeded,
            .credentialsAccessFailure,
            .deviceSoftwareUpdateNeeded,
            .deviceWasOffline,
            .dhcpFailure,
            .dnsFailure,
            .internetUnavailable,
            .invalidCertificateAuthority,
            .invalidPasswordState,
            .networkProfileNotFound,
            .passwordManagerAccessDenied,
            .passwordNotFound,
            .tlsVersionMismatch,
            .unknownFailure,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .associationRejection: return "ASSOCIATION_REJECTION"
        case .authenticationFailure: return "AUTHENTICATION_FAILURE"
        case .certificateAuthorityAccessDenied: return "CERTIFICATE_AUTHORITY_ACCESS_DENIED"
        case .certificateIssuingLimitExceeded: return "CERTIFICATE_ISSUING_LIMIT_EXCEEDED"
        case .credentialsAccessFailure: return "CREDENTIALS_ACCESS_FAILURE"
        case .deviceSoftwareUpdateNeeded: return "DEVICE_SOFTWARE_UPDATE_NEEDED"
        case .deviceWasOffline: return "DEVICE_WAS_OFFLINE"
        case .dhcpFailure: return "DHCP_FAILURE"
        case .dnsFailure: return "DNS_FAILURE"
        case .internetUnavailable: return "INTERNET_UNAVAILABLE"
        case .invalidCertificateAuthority: return "INVALID_CERTIFICATE_AUTHORITY"
        case .invalidPasswordState: return "INVALID_PASSWORD_STATE"
        case .networkProfileNotFound: return "NETWORK_PROFILE_NOT_FOUND"
        case .passwordManagerAccessDenied: return "PASSWORD_MANAGER_ACCESS_DENIED"
        case .passwordNotFound: return "PASSWORD_NOT_FOUND"
        case .tlsVersionMismatch: return "TLS_VERSION_MISMATCH"
        case .unknownFailure: return "UNKNOWN_FAILURE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = DeviceStatusDetailCode(rawValue: rawValue) ?? DeviceStatusDetailCode.sdkUnknown(rawValue)
    }
}
