// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BusinessReportSchedule: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case contentRange = "ContentRange"
        case format = "Format"
        case lastBusinessReport = "LastBusinessReport"
        case recurrence = "Recurrence"
        case s3BucketName = "S3BucketName"
        case s3KeyPrefix = "S3KeyPrefix"
        case scheduleArn = "ScheduleArn"
        case scheduleName = "ScheduleName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contentRange = contentRange {
            try encodeContainer.encode(contentRange, forKey: .contentRange)
        }
        if let format = format {
            try encodeContainer.encode(format.rawValue, forKey: .format)
        }
        if let lastBusinessReport = lastBusinessReport {
            try encodeContainer.encode(lastBusinessReport, forKey: .lastBusinessReport)
        }
        if let recurrence = recurrence {
            try encodeContainer.encode(recurrence, forKey: .recurrence)
        }
        if let s3BucketName = s3BucketName {
            try encodeContainer.encode(s3BucketName, forKey: .s3BucketName)
        }
        if let s3KeyPrefix = s3KeyPrefix {
            try encodeContainer.encode(s3KeyPrefix, forKey: .s3KeyPrefix)
        }
        if let scheduleArn = scheduleArn {
            try encodeContainer.encode(scheduleArn, forKey: .scheduleArn)
        }
        if let scheduleName = scheduleName {
            try encodeContainer.encode(scheduleName, forKey: .scheduleName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scheduleArn)
        scheduleArn = scheduleArnDecoded
        let scheduleNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scheduleName)
        scheduleName = scheduleNameDecoded
        let s3BucketNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3BucketName)
        s3BucketName = s3BucketNameDecoded
        let s3KeyPrefixDecoded = try containerValues.decodeIfPresent(String.self, forKey: .s3KeyPrefix)
        s3KeyPrefix = s3KeyPrefixDecoded
        let formatDecoded = try containerValues.decodeIfPresent(BusinessReportFormat.self, forKey: .format)
        format = formatDecoded
        let contentRangeDecoded = try containerValues.decodeIfPresent(BusinessReportContentRange.self, forKey: .contentRange)
        contentRange = contentRangeDecoded
        let recurrenceDecoded = try containerValues.decodeIfPresent(BusinessReportRecurrence.self, forKey: .recurrence)
        recurrence = recurrenceDecoded
        let lastBusinessReportDecoded = try containerValues.decodeIfPresent(BusinessReport.self, forKey: .lastBusinessReport)
        lastBusinessReport = lastBusinessReportDecoded
    }
}
