// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Content: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case audioList = "AudioList"
        case ssmlList = "SsmlList"
        case textList = "TextList"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioList = audioList {
            var audioListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .audioList)
            for audiolist0 in audioList {
                try audioListContainer.encode(audiolist0)
            }
        }
        if let ssmlList = ssmlList {
            var ssmlListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ssmlList)
            for ssmllist0 in ssmlList {
                try ssmlListContainer.encode(ssmllist0)
            }
        }
        if let textList = textList {
            var textListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .textList)
            for textlist0 in textList {
                try textListContainer.encode(textlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textListContainer = try containerValues.decodeIfPresent([Text].self, forKey: .textList)
        var textListDecoded0:[Text]? = nil
        if let textListContainer = textListContainer {
            textListDecoded0 = [Text]()
            for structure0 in textListContainer {
                textListDecoded0?.append(structure0)
            }
        }
        textList = textListDecoded0
        let ssmlListContainer = try containerValues.decodeIfPresent([Ssml].self, forKey: .ssmlList)
        var ssmlListDecoded0:[Ssml]? = nil
        if let ssmlListContainer = ssmlListContainer {
            ssmlListDecoded0 = [Ssml]()
            for structure0 in ssmlListContainer {
                ssmlListDecoded0?.append(structure0)
            }
        }
        ssmlList = ssmlListDecoded0
        let audioListContainer = try containerValues.decodeIfPresent([Audio].self, forKey: .audioList)
        var audioListDecoded0:[Audio]? = nil
        if let audioListContainer = audioListContainer {
            audioListDecoded0 = [Audio]()
            for structure0 in audioListContainer {
                audioListDecoded0?.append(structure0)
            }
        }
        audioList = audioListDecoded0
    }
}
