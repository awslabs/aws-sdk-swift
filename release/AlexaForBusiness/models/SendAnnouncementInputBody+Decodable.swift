// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SendAnnouncementInputBody: Equatable {
    public let roomFilters: [Filter]?
    public let content: Content?
    public let timeToLiveInSeconds: Int?
    public let clientRequestToken: String?
}

extension SendAnnouncementInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case content = "Content"
        case roomFilters = "RoomFilters"
        case timeToLiveInSeconds = "TimeToLiveInSeconds"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roomFiltersContainer = try containerValues.decodeIfPresent([Filter].self, forKey: .roomFilters)
        var roomFiltersDecoded0:[Filter]? = nil
        if let roomFiltersContainer = roomFiltersContainer {
            roomFiltersDecoded0 = [Filter]()
            for structure0 in roomFiltersContainer {
                roomFiltersDecoded0?.append(structure0)
            }
        }
        roomFilters = roomFiltersDecoded0
        let contentDecoded = try containerValues.decodeIfPresent(Content.self, forKey: .content)
        content = contentDecoded
        let timeToLiveInSecondsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .timeToLiveInSeconds)
        timeToLiveInSeconds = timeToLiveInSecondsDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}
