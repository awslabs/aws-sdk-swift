// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateContactInputBody: Equatable {
    public let displayName: String?
    public let firstName: String?
    public let lastName: String?
    public let phoneNumber: String?
    public let phoneNumbers: [PhoneNumber]?
    public let sipAddresses: [SipAddress]?
    public let clientRequestToken: String?
    public let tags: [Tag]?
}

extension CreateContactInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case displayName = "DisplayName"
        case firstName = "FirstName"
        case lastName = "LastName"
        case phoneNumber = "PhoneNumber"
        case phoneNumbers = "PhoneNumbers"
        case sipAddresses = "SipAddresses"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let displayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let firstNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .firstName)
        firstName = firstNameDecoded
        let lastNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastName)
        lastName = lastNameDecoded
        let phoneNumberDecoded = try containerValues.decodeIfPresent(String.self, forKey: .phoneNumber)
        phoneNumber = phoneNumberDecoded
        let phoneNumbersContainer = try containerValues.decodeIfPresent([PhoneNumber].self, forKey: .phoneNumbers)
        var phoneNumbersDecoded0:[PhoneNumber]? = nil
        if let phoneNumbersContainer = phoneNumbersContainer {
            phoneNumbersDecoded0 = [PhoneNumber]()
            for structure0 in phoneNumbersContainer {
                phoneNumbersDecoded0?.append(structure0)
            }
        }
        phoneNumbers = phoneNumbersDecoded0
        let sipAddressesContainer = try containerValues.decodeIfPresent([SipAddress].self, forKey: .sipAddresses)
        var sipAddressesDecoded0:[SipAddress]? = nil
        if let sipAddressesContainer = sipAddressesContainer {
            sipAddressesDecoded0 = [SipAddress]()
            for structure0 in sipAddressesContainer {
                sipAddressesDecoded0?.append(structure0)
            }
        }
        sipAddresses = sipAddressesDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                tagsDecoded0?.append(structure0)
            }
        }
        tags = tagsDecoded0
    }
}
