// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GatewaySummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn = "Arn"
        case description = "Description"
        case gatewayGroupArn = "GatewayGroupArn"
        case name = "Name"
        case softwareVersion = "SoftwareVersion"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let gatewayGroupArn = gatewayGroupArn {
            try encodeContainer.encode(gatewayGroupArn, forKey: .gatewayGroupArn)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let softwareVersion = softwareVersion {
            try encodeContainer.encode(softwareVersion, forKey: .softwareVersion)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let gatewayGroupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .gatewayGroupArn)
        gatewayGroupArn = gatewayGroupArnDecoded
        let softwareVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .softwareVersion)
        softwareVersion = softwareVersionDecoded
    }
}
