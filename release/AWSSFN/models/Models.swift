// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension ActivityDoesNotExist {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ActivityDoesNotExistBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified activity does not exist.
public struct ActivityDoesNotExist: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ActivityDoesNotExistBody: Swift.Equatable {
    let message: Swift.String?
}

extension ActivityDoesNotExistBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SFNClientTypes.ActivityFailedEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case error
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause, forKey: .cause)
        }
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let causeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cause)
        cause = causeDecoded
    }
}

extension SFNClientTypes.ActivityFailedEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ActivityFailedEventDetails(cause: \"CONTENT_REDACTED\", error: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about an activity that failed during an execution.
    public struct ActivityFailedEventDetails: Swift.Equatable {
        /// A more detailed explanation of the cause of the failure.
        public var cause: Swift.String?
        /// The error code of the failure.
        public var error: Swift.String?

        public init (
            cause: Swift.String? = nil,
            error: Swift.String? = nil
        )
        {
            self.cause = cause
            self.error = error
        }
    }

}

extension ActivityLimitExceeded {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ActivityLimitExceededBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The maximum number of activities has been reached. Existing activities must be deleted before a new activity can be created.
public struct ActivityLimitExceeded: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ActivityLimitExceededBody: Swift.Equatable {
    let message: Swift.String?
}

extension ActivityLimitExceededBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SFNClientTypes.ActivityListItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityArn
        case creationDate
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityArn = self.activityArn {
            try encodeContainer.encode(activityArn, forKey: .activityArn)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encodeTimestamp(creationDate, format: .epochSeconds, forKey: .creationDate)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activityArn)
        activityArn = activityArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}

extension SFNClientTypes {
    /// Contains details about an activity.
    public struct ActivityListItem: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that identifies the activity.
        /// This member is required.
        public var activityArn: Swift.String?
        /// The date the activity is created.
        /// This member is required.
        public var creationDate: ClientRuntime.Date?
        /// The name of the activity. A name must not contain:
        ///
        /// * white space
        ///
        /// * brackets < > { } [ ]
        ///
        /// * wildcard characters ? *
        ///
        /// * special characters " # % \ ^ | ~ ` $ & , ; : /
        ///
        /// * control characters (U+0000-001F, U+007F-009F)
        ///
        ///
        /// To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.
        /// This member is required.
        public var name: Swift.String?

        public init (
            activityArn: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            name: Swift.String? = nil
        )
        {
            self.activityArn = activityArn
            self.creationDate = creationDate
            self.name = name
        }
    }

}

extension SFNClientTypes.ActivityScheduleFailedEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case error
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause, forKey: .cause)
        }
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let causeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cause)
        cause = causeDecoded
    }
}

extension SFNClientTypes.ActivityScheduleFailedEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ActivityScheduleFailedEventDetails(cause: \"CONTENT_REDACTED\", error: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about an activity schedule failure that occurred during an execution.
    public struct ActivityScheduleFailedEventDetails: Swift.Equatable {
        /// A more detailed explanation of the cause of the failure.
        public var cause: Swift.String?
        /// The error code of the failure.
        public var error: Swift.String?

        public init (
            cause: Swift.String? = nil,
            error: Swift.String? = nil
        )
        {
            self.cause = cause
            self.error = error
        }
    }

}

extension SFNClientTypes.ActivityScheduledEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case heartbeatInSeconds
        case input
        case inputDetails
        case resource
        case timeoutInSeconds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let heartbeatInSeconds = self.heartbeatInSeconds {
            try encodeContainer.encode(heartbeatInSeconds, forKey: .heartbeatInSeconds)
        }
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let inputDetails = self.inputDetails {
            try encodeContainer.encode(inputDetails, forKey: .inputDetails)
        }
        if let resource = self.resource {
            try encodeContainer.encode(resource, forKey: .resource)
        }
        if let timeoutInSeconds = self.timeoutInSeconds {
            try encodeContainer.encode(timeoutInSeconds, forKey: .timeoutInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resource)
        resource = resourceDecoded
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
        let inputDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.HistoryEventExecutionDataDetails.self, forKey: .inputDetails)
        inputDetails = inputDetailsDecoded
        let timeoutInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutInSeconds)
        timeoutInSeconds = timeoutInSecondsDecoded
        let heartbeatInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .heartbeatInSeconds)
        heartbeatInSeconds = heartbeatInSecondsDecoded
    }
}

extension SFNClientTypes.ActivityScheduledEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ActivityScheduledEventDetails(heartbeatInSeconds: \(Swift.String(describing: heartbeatInSeconds)), inputDetails: \(Swift.String(describing: inputDetails)), resource: \(Swift.String(describing: resource)), timeoutInSeconds: \(Swift.String(describing: timeoutInSeconds)), input: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about an activity scheduled during an execution.
    public struct ActivityScheduledEventDetails: Swift.Equatable {
        /// The maximum allowed duration between two heartbeats for the activity task.
        public var heartbeatInSeconds: Swift.Int?
        /// The JSON data input to the activity task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.
        public var input: Swift.String?
        /// Contains details about the input for an execution history event.
        public var inputDetails: SFNClientTypes.HistoryEventExecutionDataDetails?
        /// The Amazon Resource Name (ARN) of the scheduled activity.
        /// This member is required.
        public var resource: Swift.String?
        /// The maximum allowed duration of the activity task.
        public var timeoutInSeconds: Swift.Int?

        public init (
            heartbeatInSeconds: Swift.Int? = nil,
            input: Swift.String? = nil,
            inputDetails: SFNClientTypes.HistoryEventExecutionDataDetails? = nil,
            resource: Swift.String? = nil,
            timeoutInSeconds: Swift.Int? = nil
        )
        {
            self.heartbeatInSeconds = heartbeatInSeconds
            self.input = input
            self.inputDetails = inputDetails
            self.resource = resource
            self.timeoutInSeconds = timeoutInSeconds
        }
    }

}

extension SFNClientTypes.ActivityStartedEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case workerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let workerName = self.workerName {
            try encodeContainer.encode(workerName, forKey: .workerName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workerName)
        workerName = workerNameDecoded
    }
}

extension SFNClientTypes {
    /// Contains details about the start of an activity during an execution.
    public struct ActivityStartedEventDetails: Swift.Equatable {
        /// The name of the worker that the task is assigned to. These names are provided by the workers when calling [GetActivityTask].
        public var workerName: Swift.String?

        public init (
            workerName: Swift.String? = nil
        )
        {
            self.workerName = workerName
        }
    }

}

extension SFNClientTypes.ActivitySucceededEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case output
        case outputDetails
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let output = self.output {
            try encodeContainer.encode(output, forKey: .output)
        }
        if let outputDetails = self.outputDetails {
            try encodeContainer.encode(outputDetails, forKey: .outputDetails)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .output)
        output = outputDecoded
        let outputDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.HistoryEventExecutionDataDetails.self, forKey: .outputDetails)
        outputDetails = outputDetailsDecoded
    }
}

extension SFNClientTypes.ActivitySucceededEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ActivitySucceededEventDetails(outputDetails: \(Swift.String(describing: outputDetails)), output: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about an activity that successfully terminated during an execution.
    public struct ActivitySucceededEventDetails: Swift.Equatable {
        /// The JSON data output by the activity task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.
        public var output: Swift.String?
        /// Contains details about the output of an execution history event.
        public var outputDetails: SFNClientTypes.HistoryEventExecutionDataDetails?

        public init (
            output: Swift.String? = nil,
            outputDetails: SFNClientTypes.HistoryEventExecutionDataDetails? = nil
        )
        {
            self.output = output
            self.outputDetails = outputDetails
        }
    }

}

extension SFNClientTypes.ActivityTimedOutEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case error
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause, forKey: .cause)
        }
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let causeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cause)
        cause = causeDecoded
    }
}

extension SFNClientTypes.ActivityTimedOutEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ActivityTimedOutEventDetails(cause: \"CONTENT_REDACTED\", error: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about an activity timeout that occurred during an execution.
    public struct ActivityTimedOutEventDetails: Swift.Equatable {
        /// A more detailed explanation of the cause of the timeout.
        public var cause: Swift.String?
        /// The error code of the failure.
        public var error: Swift.String?

        public init (
            cause: Swift.String? = nil,
            error: Swift.String? = nil
        )
        {
            self.cause = cause
            self.error = error
        }
    }

}

extension ActivityWorkerLimitExceeded {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ActivityWorkerLimitExceededBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The maximum number of workers concurrently polling for activity tasks has been reached.
public struct ActivityWorkerLimitExceeded: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ActivityWorkerLimitExceededBody: Swift.Equatable {
    let message: Swift.String?
}

extension ActivityWorkerLimitExceededBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SFNClientTypes.BillingDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billedDurationInMilliseconds
        case billedMemoryUsedInMB
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if billedDurationInMilliseconds != 0 {
            try encodeContainer.encode(billedDurationInMilliseconds, forKey: .billedDurationInMilliseconds)
        }
        if billedMemoryUsedInMB != 0 {
            try encodeContainer.encode(billedMemoryUsedInMB, forKey: .billedMemoryUsedInMB)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let billedMemoryUsedInMBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .billedMemoryUsedInMB) ?? 0
        billedMemoryUsedInMB = billedMemoryUsedInMBDecoded
        let billedDurationInMillisecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .billedDurationInMilliseconds) ?? 0
        billedDurationInMilliseconds = billedDurationInMillisecondsDecoded
    }
}

extension SFNClientTypes {
    /// An object that describes workflow billing details.
    public struct BillingDetails: Swift.Equatable {
        /// Billed duration of your workflow, in milliseconds.
        public var billedDurationInMilliseconds: Swift.Int
        /// Billed memory consumption of your workflow, in MB.
        public var billedMemoryUsedInMB: Swift.Int

        public init (
            billedDurationInMilliseconds: Swift.Int = 0,
            billedMemoryUsedInMB: Swift.Int = 0
        )
        {
            self.billedDurationInMilliseconds = billedDurationInMilliseconds
            self.billedMemoryUsedInMB = billedMemoryUsedInMB
        }
    }

}

extension SFNClientTypes.CloudWatchEventsExecutionDataDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case included
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if included != false {
            try encodeContainer.encode(included, forKey: .included)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let includedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .included) ?? false
        included = includedDecoded
    }
}

extension SFNClientTypes {
    /// Provides details about execution input or output.
    public struct CloudWatchEventsExecutionDataDetails: Swift.Equatable {
        /// Indicates whether input or output was included in the response. Always true for API calls.
        public var included: Swift.Bool

        public init (
            included: Swift.Bool = false
        )
        {
            self.included = included
        }
    }

}

extension SFNClientTypes.CloudWatchLogsLogGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupArn = self.logGroupArn {
            try encodeContainer.encode(logGroupArn, forKey: .logGroupArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupArn)
        logGroupArn = logGroupArnDecoded
    }
}

extension SFNClientTypes {
    ///
    public struct CloudWatchLogsLogGroup: Swift.Equatable {
        /// The ARN of the the CloudWatch log group to which you want your logs emitted to. The ARN must end with :*
        public var logGroupArn: Swift.String?

        public init (
            logGroupArn: Swift.String? = nil
        )
        {
            self.logGroupArn = logGroupArn
        }
    }

}

extension CreateActivityInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateActivityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateActivityInput: Swift.Equatable {
    /// The name of the activity to create. This name must be unique for your Amazon Web Services account and region for 90 days. For more information, see [ Limits Related to State Machine Executions](https://docs.aws.amazon.com/step-functions/latest/dg/limits.html#service-limits-state-machine-executions) in the Step Functions Developer Guide. A name must not contain:
    ///
    /// * white space
    ///
    /// * brackets < > { } [ ]
    ///
    /// * wildcard characters ? *
    ///
    /// * special characters " # % \ ^ | ~ ` $ & , ; : /
    ///
    /// * control characters (U+0000-001F, U+007F-009F)
    ///
    ///
    /// To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.
    /// This member is required.
    public var name: Swift.String?
    /// The list of tags to add to a resource. An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the Amazon Web Services Billing and Cost Management User Guide, and [Controlling Access Using IAM Tags](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html). Tags may only contain Unicode letters, digits, white space, or these symbols: _ . : / = + - @.
    public var tags: [SFNClientTypes.Tag]?

    public init (
        name: Swift.String? = nil,
        tags: [SFNClientTypes.Tag]? = nil
    )
    {
        self.name = name
        self.tags = tags
    }
}

struct CreateActivityInputBody: Swift.Equatable {
    let name: Swift.String?
    let tags: [SFNClientTypes.Tag]?
}

extension CreateActivityInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SFNClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SFNClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SFNClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateActivityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateActivityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ActivityLimitExceeded" : self = .activityLimitExceeded(try ActivityLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidName" : self = .invalidName(try InvalidName(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTags" : self = .tooManyTags(try TooManyTags(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateActivityOutputError: Swift.Error, Swift.Equatable {
    case activityLimitExceeded(ActivityLimitExceeded)
    case invalidName(InvalidName)
    case tooManyTags(TooManyTags)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateActivityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateActivityOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.activityArn = output.activityArn
            self.creationDate = output.creationDate
        } else {
            self.activityArn = nil
            self.creationDate = nil
        }
    }
}

public struct CreateActivityOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that identifies the created activity.
    /// This member is required.
    public var activityArn: Swift.String?
    /// The date the activity is created.
    /// This member is required.
    public var creationDate: ClientRuntime.Date?

    public init (
        activityArn: Swift.String? = nil,
        creationDate: ClientRuntime.Date? = nil
    )
    {
        self.activityArn = activityArn
        self.creationDate = creationDate
    }
}

struct CreateActivityOutputResponseBody: Swift.Equatable {
    let activityArn: Swift.String?
    let creationDate: ClientRuntime.Date?
}

extension CreateActivityOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityArn
        case creationDate
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activityArn)
        activityArn = activityArnDecoded
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}

extension CreateStateMachineInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateStateMachineInput(loggingConfiguration: \(Swift.String(describing: loggingConfiguration)), name: \(Swift.String(describing: name)), roleArn: \(Swift.String(describing: roleArn)), tags: \(Swift.String(describing: tags)), tracingConfiguration: \(Swift.String(describing: tracingConfiguration)), type: \(Swift.String(describing: type)), definition: \"CONTENT_REDACTED\")"}
}

extension CreateStateMachineInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case definition
        case loggingConfiguration
        case name
        case roleArn
        case tags
        case tracingConfiguration
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let definition = self.definition {
            try encodeContainer.encode(definition, forKey: .definition)
        }
        if let loggingConfiguration = self.loggingConfiguration {
            try encodeContainer.encode(loggingConfiguration, forKey: .loggingConfiguration)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let tracingConfiguration = self.tracingConfiguration {
            try encodeContainer.encode(tracingConfiguration, forKey: .tracingConfiguration)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

extension CreateStateMachineInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateStateMachineInput: Swift.Equatable {
    /// The Amazon States Language definition of the state machine. See [Amazon States Language](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html).
    /// This member is required.
    public var definition: Swift.String?
    /// Defines what execution history events are logged and where they are logged. By default, the level is set to OFF. For more information see [Log Levels](https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html) in the Step Functions User Guide.
    public var loggingConfiguration: SFNClientTypes.LoggingConfiguration?
    /// The name of the state machine. A name must not contain:
    ///
    /// * white space
    ///
    /// * brackets < > { } [ ]
    ///
    /// * wildcard characters ? *
    ///
    /// * special characters " # % \ ^ | ~ ` $ & , ; : /
    ///
    /// * control characters (U+0000-001F, U+007F-009F)
    ///
    ///
    /// To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.
    /// This member is required.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role to use for this state machine.
    /// This member is required.
    public var roleArn: Swift.String?
    /// Tags to be added when creating a state machine. An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the Amazon Web Services Billing and Cost Management User Guide, and [Controlling Access Using IAM Tags](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html). Tags may only contain Unicode letters, digits, white space, or these symbols: _ . : / = + - @.
    public var tags: [SFNClientTypes.Tag]?
    /// Selects whether X-Ray tracing is enabled.
    public var tracingConfiguration: SFNClientTypes.TracingConfiguration?
    /// Determines whether a Standard or Express state machine is created. The default is STANDARD. You cannot update the type of a state machine once it has been created.
    public var type: SFNClientTypes.StateMachineType?

    public init (
        definition: Swift.String? = nil,
        loggingConfiguration: SFNClientTypes.LoggingConfiguration? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        tags: [SFNClientTypes.Tag]? = nil,
        tracingConfiguration: SFNClientTypes.TracingConfiguration? = nil,
        type: SFNClientTypes.StateMachineType? = nil
    )
    {
        self.definition = definition
        self.loggingConfiguration = loggingConfiguration
        self.name = name
        self.roleArn = roleArn
        self.tags = tags
        self.tracingConfiguration = tracingConfiguration
        self.type = type
    }
}

struct CreateStateMachineInputBody: Swift.Equatable {
    let name: Swift.String?
    let definition: Swift.String?
    let roleArn: Swift.String?
    let type: SFNClientTypes.StateMachineType?
    let loggingConfiguration: SFNClientTypes.LoggingConfiguration?
    let tags: [SFNClientTypes.Tag]?
    let tracingConfiguration: SFNClientTypes.TracingConfiguration?
}

extension CreateStateMachineInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case definition
        case loggingConfiguration
        case name
        case roleArn
        case tags
        case tracingConfiguration
        case type
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let definitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .definition)
        definition = definitionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(SFNClientTypes.StateMachineType.self, forKey: .type)
        type = typeDecoded
        let loggingConfigurationDecoded = try containerValues.decodeIfPresent(SFNClientTypes.LoggingConfiguration.self, forKey: .loggingConfiguration)
        loggingConfiguration = loggingConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SFNClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SFNClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SFNClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let tracingConfigurationDecoded = try containerValues.decodeIfPresent(SFNClientTypes.TracingConfiguration.self, forKey: .tracingConfiguration)
        tracingConfiguration = tracingConfigurationDecoded
    }
}

extension CreateStateMachineOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateStateMachineOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArn" : self = .invalidArn(try InvalidArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDefinition" : self = .invalidDefinition(try InvalidDefinition(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLoggingConfiguration" : self = .invalidLoggingConfiguration(try InvalidLoggingConfiguration(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidName" : self = .invalidName(try InvalidName(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTracingConfiguration" : self = .invalidTracingConfiguration(try InvalidTracingConfiguration(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StateMachineAlreadyExists" : self = .stateMachineAlreadyExists(try StateMachineAlreadyExists(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StateMachineDeleting" : self = .stateMachineDeleting(try StateMachineDeleting(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StateMachineLimitExceeded" : self = .stateMachineLimitExceeded(try StateMachineLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StateMachineTypeNotSupported" : self = .stateMachineTypeNotSupported(try StateMachineTypeNotSupported(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTags" : self = .tooManyTags(try TooManyTags(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateStateMachineOutputError: Swift.Error, Swift.Equatable {
    case invalidArn(InvalidArn)
    case invalidDefinition(InvalidDefinition)
    case invalidLoggingConfiguration(InvalidLoggingConfiguration)
    case invalidName(InvalidName)
    case invalidTracingConfiguration(InvalidTracingConfiguration)
    case stateMachineAlreadyExists(StateMachineAlreadyExists)
    case stateMachineDeleting(StateMachineDeleting)
    case stateMachineLimitExceeded(StateMachineLimitExceeded)
    case stateMachineTypeNotSupported(StateMachineTypeNotSupported)
    case tooManyTags(TooManyTags)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateStateMachineOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateStateMachineOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationDate = output.creationDate
            self.stateMachineArn = output.stateMachineArn
        } else {
            self.creationDate = nil
            self.stateMachineArn = nil
        }
    }
}

public struct CreateStateMachineOutputResponse: Swift.Equatable {
    /// The date the state machine is created.
    /// This member is required.
    public var creationDate: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) that identifies the created state machine.
    /// This member is required.
    public var stateMachineArn: Swift.String?

    public init (
        creationDate: ClientRuntime.Date? = nil,
        stateMachineArn: Swift.String? = nil
    )
    {
        self.creationDate = creationDate
        self.stateMachineArn = stateMachineArn
    }
}

struct CreateStateMachineOutputResponseBody: Swift.Equatable {
    let stateMachineArn: Swift.String?
    let creationDate: ClientRuntime.Date?
}

extension CreateStateMachineOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate
        case stateMachineArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateMachineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateMachineArn)
        stateMachineArn = stateMachineArnDecoded
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}

extension DeleteActivityInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityArn = self.activityArn {
            try encodeContainer.encode(activityArn, forKey: .activityArn)
        }
    }
}

extension DeleteActivityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteActivityInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the activity to delete.
    /// This member is required.
    public var activityArn: Swift.String?

    public init (
        activityArn: Swift.String? = nil
    )
    {
        self.activityArn = activityArn
    }
}

struct DeleteActivityInputBody: Swift.Equatable {
    let activityArn: Swift.String?
}

extension DeleteActivityInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activityArn)
        activityArn = activityArnDecoded
    }
}

extension DeleteActivityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteActivityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArn" : self = .invalidArn(try InvalidArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteActivityOutputError: Swift.Error, Swift.Equatable {
    case invalidArn(InvalidArn)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteActivityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteActivityOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteStateMachineInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stateMachineArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let stateMachineArn = self.stateMachineArn {
            try encodeContainer.encode(stateMachineArn, forKey: .stateMachineArn)
        }
    }
}

extension DeleteStateMachineInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteStateMachineInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the state machine to delete.
    /// This member is required.
    public var stateMachineArn: Swift.String?

    public init (
        stateMachineArn: Swift.String? = nil
    )
    {
        self.stateMachineArn = stateMachineArn
    }
}

struct DeleteStateMachineInputBody: Swift.Equatable {
    let stateMachineArn: Swift.String?
}

extension DeleteStateMachineInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stateMachineArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateMachineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateMachineArn)
        stateMachineArn = stateMachineArnDecoded
    }
}

extension DeleteStateMachineOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteStateMachineOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArn" : self = .invalidArn(try InvalidArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteStateMachineOutputError: Swift.Error, Swift.Equatable {
    case invalidArn(InvalidArn)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteStateMachineOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteStateMachineOutputResponse: Swift.Equatable {

    public init () { }
}

extension DescribeActivityInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityArn = self.activityArn {
            try encodeContainer.encode(activityArn, forKey: .activityArn)
        }
    }
}

extension DescribeActivityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeActivityInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the activity to describe.
    /// This member is required.
    public var activityArn: Swift.String?

    public init (
        activityArn: Swift.String? = nil
    )
    {
        self.activityArn = activityArn
    }
}

struct DescribeActivityInputBody: Swift.Equatable {
    let activityArn: Swift.String?
}

extension DescribeActivityInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activityArn)
        activityArn = activityArnDecoded
    }
}

extension DescribeActivityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeActivityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ActivityDoesNotExist" : self = .activityDoesNotExist(try ActivityDoesNotExist(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArn(try InvalidArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeActivityOutputError: Swift.Error, Swift.Equatable {
    case activityDoesNotExist(ActivityDoesNotExist)
    case invalidArn(InvalidArn)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeActivityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeActivityOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.activityArn = output.activityArn
            self.creationDate = output.creationDate
            self.name = output.name
        } else {
            self.activityArn = nil
            self.creationDate = nil
            self.name = nil
        }
    }
}

public struct DescribeActivityOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that identifies the activity.
    /// This member is required.
    public var activityArn: Swift.String?
    /// The date the activity is created.
    /// This member is required.
    public var creationDate: ClientRuntime.Date?
    /// The name of the activity. A name must not contain:
    ///
    /// * white space
    ///
    /// * brackets < > { } [ ]
    ///
    /// * wildcard characters ? *
    ///
    /// * special characters " # % \ ^ | ~ ` $ & , ; : /
    ///
    /// * control characters (U+0000-001F, U+007F-009F)
    ///
    ///
    /// To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.
    /// This member is required.
    public var name: Swift.String?

    public init (
        activityArn: Swift.String? = nil,
        creationDate: ClientRuntime.Date? = nil,
        name: Swift.String? = nil
    )
    {
        self.activityArn = activityArn
        self.creationDate = creationDate
        self.name = name
    }
}

struct DescribeActivityOutputResponseBody: Swift.Equatable {
    let activityArn: Swift.String?
    let name: Swift.String?
    let creationDate: ClientRuntime.Date?
}

extension DescribeActivityOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityArn
        case creationDate
        case name
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activityArn)
        activityArn = activityArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}

extension DescribeExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionArn = self.executionArn {
            try encodeContainer.encode(executionArn, forKey: .executionArn)
        }
    }
}

extension DescribeExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeExecutionInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the execution to describe.
    /// This member is required.
    public var executionArn: Swift.String?

    public init (
        executionArn: Swift.String? = nil
    )
    {
        self.executionArn = executionArn
    }
}

struct DescribeExecutionInputBody: Swift.Equatable {
    let executionArn: Swift.String?
}

extension DescribeExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionArn)
        executionArn = executionArnDecoded
    }
}

extension DescribeExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ExecutionDoesNotExist" : self = .executionDoesNotExist(try ExecutionDoesNotExist(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArn(try InvalidArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeExecutionOutputError: Swift.Error, Swift.Equatable {
    case executionDoesNotExist(ExecutionDoesNotExist)
    case invalidArn(InvalidArn)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeExecutionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeExecutionOutputResponse(executionArn: \(Swift.String(describing: executionArn)), inputDetails: \(Swift.String(describing: inputDetails)), mapRunArn: \(Swift.String(describing: mapRunArn)), name: \(Swift.String(describing: name)), outputDetails: \(Swift.String(describing: outputDetails)), startDate: \(Swift.String(describing: startDate)), stateMachineArn: \(Swift.String(describing: stateMachineArn)), status: \(Swift.String(describing: status)), stopDate: \(Swift.String(describing: stopDate)), traceHeader: \(Swift.String(describing: traceHeader)), cause: \"CONTENT_REDACTED\", error: \"CONTENT_REDACTED\", input: \"CONTENT_REDACTED\", output: \"CONTENT_REDACTED\")"}
}

extension DescribeExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cause = output.cause
            self.error = output.error
            self.executionArn = output.executionArn
            self.input = output.input
            self.inputDetails = output.inputDetails
            self.mapRunArn = output.mapRunArn
            self.name = output.name
            self.output = output.output
            self.outputDetails = output.outputDetails
            self.startDate = output.startDate
            self.stateMachineArn = output.stateMachineArn
            self.status = output.status
            self.stopDate = output.stopDate
            self.traceHeader = output.traceHeader
        } else {
            self.cause = nil
            self.error = nil
            self.executionArn = nil
            self.input = nil
            self.inputDetails = nil
            self.mapRunArn = nil
            self.name = nil
            self.output = nil
            self.outputDetails = nil
            self.startDate = nil
            self.stateMachineArn = nil
            self.status = nil
            self.stopDate = nil
            self.traceHeader = nil
        }
    }
}

public struct DescribeExecutionOutputResponse: Swift.Equatable {
    /// The cause string if the state machine execution failed.
    public var cause: Swift.String?
    /// The error string if the state machine execution failed.
    public var error: Swift.String?
    /// The Amazon Resource Name (ARN) that identifies the execution.
    /// This member is required.
    public var executionArn: Swift.String?
    /// The string that contains the JSON input data of the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.
    public var input: Swift.String?
    /// Provides details about execution input or output.
    public var inputDetails: SFNClientTypes.CloudWatchEventsExecutionDataDetails?
    /// The Amazon Resource Name (ARN) that identifies a Map Run, which dispatched this execution.
    public var mapRunArn: Swift.String?
    /// The name of the execution. A name must not contain:
    ///
    /// * white space
    ///
    /// * brackets < > { } [ ]
    ///
    /// * wildcard characters ? *
    ///
    /// * special characters " # % \ ^ | ~ ` $ & , ; : /
    ///
    /// * control characters (U+0000-001F, U+007F-009F)
    ///
    ///
    /// To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.
    public var name: Swift.String?
    /// The JSON output data of the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding. This field is set only if the execution succeeds. If the execution fails, this field is null.
    public var output: Swift.String?
    /// Provides details about execution input or output.
    public var outputDetails: SFNClientTypes.CloudWatchEventsExecutionDataDetails?
    /// The date the execution is started.
    /// This member is required.
    public var startDate: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the executed stated machine.
    /// This member is required.
    public var stateMachineArn: Swift.String?
    /// The current status of the execution.
    /// This member is required.
    public var status: SFNClientTypes.ExecutionStatus?
    /// If the execution has already ended, the date the execution stopped.
    public var stopDate: ClientRuntime.Date?
    /// The X-Ray trace header that was passed to the execution.
    public var traceHeader: Swift.String?

    public init (
        cause: Swift.String? = nil,
        error: Swift.String? = nil,
        executionArn: Swift.String? = nil,
        input: Swift.String? = nil,
        inputDetails: SFNClientTypes.CloudWatchEventsExecutionDataDetails? = nil,
        mapRunArn: Swift.String? = nil,
        name: Swift.String? = nil,
        output: Swift.String? = nil,
        outputDetails: SFNClientTypes.CloudWatchEventsExecutionDataDetails? = nil,
        startDate: ClientRuntime.Date? = nil,
        stateMachineArn: Swift.String? = nil,
        status: SFNClientTypes.ExecutionStatus? = nil,
        stopDate: ClientRuntime.Date? = nil,
        traceHeader: Swift.String? = nil
    )
    {
        self.cause = cause
        self.error = error
        self.executionArn = executionArn
        self.input = input
        self.inputDetails = inputDetails
        self.mapRunArn = mapRunArn
        self.name = name
        self.output = output
        self.outputDetails = outputDetails
        self.startDate = startDate
        self.stateMachineArn = stateMachineArn
        self.status = status
        self.stopDate = stopDate
        self.traceHeader = traceHeader
    }
}

struct DescribeExecutionOutputResponseBody: Swift.Equatable {
    let executionArn: Swift.String?
    let stateMachineArn: Swift.String?
    let name: Swift.String?
    let status: SFNClientTypes.ExecutionStatus?
    let startDate: ClientRuntime.Date?
    let stopDate: ClientRuntime.Date?
    let input: Swift.String?
    let inputDetails: SFNClientTypes.CloudWatchEventsExecutionDataDetails?
    let output: Swift.String?
    let outputDetails: SFNClientTypes.CloudWatchEventsExecutionDataDetails?
    let traceHeader: Swift.String?
    let mapRunArn: Swift.String?
    let error: Swift.String?
    let cause: Swift.String?
}

extension DescribeExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case error
        case executionArn
        case input
        case inputDetails
        case mapRunArn
        case name
        case output
        case outputDetails
        case startDate
        case stateMachineArn
        case status
        case stopDate
        case traceHeader
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionArn)
        executionArn = executionArnDecoded
        let stateMachineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateMachineArn)
        stateMachineArn = stateMachineArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SFNClientTypes.ExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let startDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startDate)
        startDate = startDateDecoded
        let stopDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .stopDate)
        stopDate = stopDateDecoded
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
        let inputDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.CloudWatchEventsExecutionDataDetails.self, forKey: .inputDetails)
        inputDetails = inputDetailsDecoded
        let outputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .output)
        output = outputDecoded
        let outputDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.CloudWatchEventsExecutionDataDetails.self, forKey: .outputDetails)
        outputDetails = outputDetailsDecoded
        let traceHeaderDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .traceHeader)
        traceHeader = traceHeaderDecoded
        let mapRunArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mapRunArn)
        mapRunArn = mapRunArnDecoded
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let causeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cause)
        cause = causeDecoded
    }
}

extension DescribeMapRunInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mapRunArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mapRunArn = self.mapRunArn {
            try encodeContainer.encode(mapRunArn, forKey: .mapRunArn)
        }
    }
}

extension DescribeMapRunInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeMapRunInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that identifies a Map Run.
    /// This member is required.
    public var mapRunArn: Swift.String?

    public init (
        mapRunArn: Swift.String? = nil
    )
    {
        self.mapRunArn = mapRunArn
    }
}

struct DescribeMapRunInputBody: Swift.Equatable {
    let mapRunArn: Swift.String?
}

extension DescribeMapRunInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mapRunArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mapRunArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mapRunArn)
        mapRunArn = mapRunArnDecoded
    }
}

extension DescribeMapRunOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeMapRunOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArn" : self = .invalidArn(try InvalidArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeMapRunOutputError: Swift.Error, Swift.Equatable {
    case invalidArn(InvalidArn)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeMapRunOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeMapRunOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.executionArn = output.executionArn
            self.executionCounts = output.executionCounts
            self.itemCounts = output.itemCounts
            self.mapRunArn = output.mapRunArn
            self.maxConcurrency = output.maxConcurrency
            self.startDate = output.startDate
            self.status = output.status
            self.stopDate = output.stopDate
            self.toleratedFailureCount = output.toleratedFailureCount
            self.toleratedFailurePercentage = output.toleratedFailurePercentage
        } else {
            self.executionArn = nil
            self.executionCounts = nil
            self.itemCounts = nil
            self.mapRunArn = nil
            self.maxConcurrency = 0
            self.startDate = nil
            self.status = nil
            self.stopDate = nil
            self.toleratedFailureCount = 0
            self.toleratedFailurePercentage = 0.0
        }
    }
}

public struct DescribeMapRunOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that identifies the execution in which the Map Run was started.
    /// This member is required.
    public var executionArn: Swift.String?
    /// A JSON object that contains information about the total number of child workflow executions for the Map Run, and the count of child workflow executions for each status, such as failed and succeeded.
    /// This member is required.
    public var executionCounts: SFNClientTypes.MapRunExecutionCounts?
    /// A JSON object that contains information about the total number of items, and the item count for each processing status, such as pending and failed.
    /// This member is required.
    public var itemCounts: SFNClientTypes.MapRunItemCounts?
    /// The Amazon Resource Name (ARN) that identifies a Map Run.
    /// This member is required.
    public var mapRunArn: Swift.String?
    /// The maximum number of child workflow executions configured to run in parallel for the Map Run at the same time.
    /// This member is required.
    public var maxConcurrency: Swift.Int
    /// The date when the Map Run was started.
    /// This member is required.
    public var startDate: ClientRuntime.Date?
    /// The current status of the Map Run.
    /// This member is required.
    public var status: SFNClientTypes.MapRunStatus?
    /// The date when the Map Run was stopped.
    public var stopDate: ClientRuntime.Date?
    /// The maximum number of failed child workflow executions before the Map Run fails.
    /// This member is required.
    public var toleratedFailureCount: Swift.Int
    /// The maximum percentage of failed child workflow executions before the Map Run fails.
    /// This member is required.
    public var toleratedFailurePercentage: Swift.Float

    public init (
        executionArn: Swift.String? = nil,
        executionCounts: SFNClientTypes.MapRunExecutionCounts? = nil,
        itemCounts: SFNClientTypes.MapRunItemCounts? = nil,
        mapRunArn: Swift.String? = nil,
        maxConcurrency: Swift.Int = 0,
        startDate: ClientRuntime.Date? = nil,
        status: SFNClientTypes.MapRunStatus? = nil,
        stopDate: ClientRuntime.Date? = nil,
        toleratedFailureCount: Swift.Int = 0,
        toleratedFailurePercentage: Swift.Float = 0.0
    )
    {
        self.executionArn = executionArn
        self.executionCounts = executionCounts
        self.itemCounts = itemCounts
        self.mapRunArn = mapRunArn
        self.maxConcurrency = maxConcurrency
        self.startDate = startDate
        self.status = status
        self.stopDate = stopDate
        self.toleratedFailureCount = toleratedFailureCount
        self.toleratedFailurePercentage = toleratedFailurePercentage
    }
}

struct DescribeMapRunOutputResponseBody: Swift.Equatable {
    let mapRunArn: Swift.String?
    let executionArn: Swift.String?
    let status: SFNClientTypes.MapRunStatus?
    let startDate: ClientRuntime.Date?
    let stopDate: ClientRuntime.Date?
    let maxConcurrency: Swift.Int
    let toleratedFailurePercentage: Swift.Float
    let toleratedFailureCount: Swift.Int
    let itemCounts: SFNClientTypes.MapRunItemCounts?
    let executionCounts: SFNClientTypes.MapRunExecutionCounts?
}

extension DescribeMapRunOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionArn
        case executionCounts
        case itemCounts
        case mapRunArn
        case maxConcurrency
        case startDate
        case status
        case stopDate
        case toleratedFailureCount
        case toleratedFailurePercentage
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mapRunArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mapRunArn)
        mapRunArn = mapRunArnDecoded
        let executionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionArn)
        executionArn = executionArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SFNClientTypes.MapRunStatus.self, forKey: .status)
        status = statusDecoded
        let startDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startDate)
        startDate = startDateDecoded
        let stopDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .stopDate)
        stopDate = stopDateDecoded
        let maxConcurrencyDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxConcurrency) ?? 0
        maxConcurrency = maxConcurrencyDecoded
        let toleratedFailurePercentageDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .toleratedFailurePercentage) ?? 0.0
        toleratedFailurePercentage = toleratedFailurePercentageDecoded
        let toleratedFailureCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .toleratedFailureCount) ?? 0
        toleratedFailureCount = toleratedFailureCountDecoded
        let itemCountsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.MapRunItemCounts.self, forKey: .itemCounts)
        itemCounts = itemCountsDecoded
        let executionCountsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.MapRunExecutionCounts.self, forKey: .executionCounts)
        executionCounts = executionCountsDecoded
    }
}

extension DescribeStateMachineForExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionArn = self.executionArn {
            try encodeContainer.encode(executionArn, forKey: .executionArn)
        }
    }
}

extension DescribeStateMachineForExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeStateMachineForExecutionInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the execution you want state machine information for.
    /// This member is required.
    public var executionArn: Swift.String?

    public init (
        executionArn: Swift.String? = nil
    )
    {
        self.executionArn = executionArn
    }
}

struct DescribeStateMachineForExecutionInputBody: Swift.Equatable {
    let executionArn: Swift.String?
}

extension DescribeStateMachineForExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionArn)
        executionArn = executionArnDecoded
    }
}

extension DescribeStateMachineForExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeStateMachineForExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ExecutionDoesNotExist" : self = .executionDoesNotExist(try ExecutionDoesNotExist(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArn(try InvalidArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeStateMachineForExecutionOutputError: Swift.Error, Swift.Equatable {
    case executionDoesNotExist(ExecutionDoesNotExist)
    case invalidArn(InvalidArn)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStateMachineForExecutionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStateMachineForExecutionOutputResponse(label: \(Swift.String(describing: label)), loggingConfiguration: \(Swift.String(describing: loggingConfiguration)), mapRunArn: \(Swift.String(describing: mapRunArn)), name: \(Swift.String(describing: name)), roleArn: \(Swift.String(describing: roleArn)), stateMachineArn: \(Swift.String(describing: stateMachineArn)), tracingConfiguration: \(Swift.String(describing: tracingConfiguration)), updateDate: \(Swift.String(describing: updateDate)), definition: \"CONTENT_REDACTED\")"}
}

extension DescribeStateMachineForExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeStateMachineForExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.definition = output.definition
            self.label = output.label
            self.loggingConfiguration = output.loggingConfiguration
            self.mapRunArn = output.mapRunArn
            self.name = output.name
            self.roleArn = output.roleArn
            self.stateMachineArn = output.stateMachineArn
            self.tracingConfiguration = output.tracingConfiguration
            self.updateDate = output.updateDate
        } else {
            self.definition = nil
            self.label = nil
            self.loggingConfiguration = nil
            self.mapRunArn = nil
            self.name = nil
            self.roleArn = nil
            self.stateMachineArn = nil
            self.tracingConfiguration = nil
            self.updateDate = nil
        }
    }
}

public struct DescribeStateMachineForExecutionOutputResponse: Swift.Equatable {
    /// The Amazon States Language definition of the state machine. See [Amazon States Language](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html).
    /// This member is required.
    public var definition: Swift.String?
    /// A user-defined or an auto-generated string that identifies a Map state. This ﬁeld is returned only if the executionArn is a child workflow execution that was started by a Distributed Map state.
    public var label: Swift.String?
    /// The LoggingConfiguration data type is used to set CloudWatch Logs options.
    public var loggingConfiguration: SFNClientTypes.LoggingConfiguration?
    /// The Amazon Resource Name (ARN) of the Map Run that started the child workflow execution. This field is returned only if the executionArn is a child workflow execution that was started by a Distributed Map state.
    public var mapRunArn: Swift.String?
    /// The name of the state machine associated with the execution.
    /// This member is required.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role of the State Machine for the execution.
    /// This member is required.
    public var roleArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the state machine associated with the execution.
    /// This member is required.
    public var stateMachineArn: Swift.String?
    /// Selects whether X-Ray tracing is enabled.
    public var tracingConfiguration: SFNClientTypes.TracingConfiguration?
    /// The date and time the state machine associated with an execution was updated. For a newly created state machine, this is the creation date.
    /// This member is required.
    public var updateDate: ClientRuntime.Date?

    public init (
        definition: Swift.String? = nil,
        label: Swift.String? = nil,
        loggingConfiguration: SFNClientTypes.LoggingConfiguration? = nil,
        mapRunArn: Swift.String? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        stateMachineArn: Swift.String? = nil,
        tracingConfiguration: SFNClientTypes.TracingConfiguration? = nil,
        updateDate: ClientRuntime.Date? = nil
    )
    {
        self.definition = definition
        self.label = label
        self.loggingConfiguration = loggingConfiguration
        self.mapRunArn = mapRunArn
        self.name = name
        self.roleArn = roleArn
        self.stateMachineArn = stateMachineArn
        self.tracingConfiguration = tracingConfiguration
        self.updateDate = updateDate
    }
}

struct DescribeStateMachineForExecutionOutputResponseBody: Swift.Equatable {
    let stateMachineArn: Swift.String?
    let name: Swift.String?
    let definition: Swift.String?
    let roleArn: Swift.String?
    let updateDate: ClientRuntime.Date?
    let loggingConfiguration: SFNClientTypes.LoggingConfiguration?
    let tracingConfiguration: SFNClientTypes.TracingConfiguration?
    let mapRunArn: Swift.String?
    let label: Swift.String?
}

extension DescribeStateMachineForExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case definition
        case label
        case loggingConfiguration
        case mapRunArn
        case name
        case roleArn
        case stateMachineArn
        case tracingConfiguration
        case updateDate
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateMachineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateMachineArn)
        stateMachineArn = stateMachineArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let definitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .definition)
        definition = definitionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let updateDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updateDate)
        updateDate = updateDateDecoded
        let loggingConfigurationDecoded = try containerValues.decodeIfPresent(SFNClientTypes.LoggingConfiguration.self, forKey: .loggingConfiguration)
        loggingConfiguration = loggingConfigurationDecoded
        let tracingConfigurationDecoded = try containerValues.decodeIfPresent(SFNClientTypes.TracingConfiguration.self, forKey: .tracingConfiguration)
        tracingConfiguration = tracingConfigurationDecoded
        let mapRunArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mapRunArn)
        mapRunArn = mapRunArnDecoded
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
    }
}

extension DescribeStateMachineInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stateMachineArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let stateMachineArn = self.stateMachineArn {
            try encodeContainer.encode(stateMachineArn, forKey: .stateMachineArn)
        }
    }
}

extension DescribeStateMachineInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeStateMachineInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the state machine to describe.
    /// This member is required.
    public var stateMachineArn: Swift.String?

    public init (
        stateMachineArn: Swift.String? = nil
    )
    {
        self.stateMachineArn = stateMachineArn
    }
}

struct DescribeStateMachineInputBody: Swift.Equatable {
    let stateMachineArn: Swift.String?
}

extension DescribeStateMachineInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stateMachineArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateMachineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateMachineArn)
        stateMachineArn = stateMachineArnDecoded
    }
}

extension DescribeStateMachineOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeStateMachineOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArn" : self = .invalidArn(try InvalidArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StateMachineDoesNotExist" : self = .stateMachineDoesNotExist(try StateMachineDoesNotExist(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeStateMachineOutputError: Swift.Error, Swift.Equatable {
    case invalidArn(InvalidArn)
    case stateMachineDoesNotExist(StateMachineDoesNotExist)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStateMachineOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStateMachineOutputResponse(creationDate: \(Swift.String(describing: creationDate)), label: \(Swift.String(describing: label)), loggingConfiguration: \(Swift.String(describing: loggingConfiguration)), name: \(Swift.String(describing: name)), roleArn: \(Swift.String(describing: roleArn)), stateMachineArn: \(Swift.String(describing: stateMachineArn)), status: \(Swift.String(describing: status)), tracingConfiguration: \(Swift.String(describing: tracingConfiguration)), type: \(Swift.String(describing: type)), definition: \"CONTENT_REDACTED\")"}
}

extension DescribeStateMachineOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeStateMachineOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationDate = output.creationDate
            self.definition = output.definition
            self.label = output.label
            self.loggingConfiguration = output.loggingConfiguration
            self.name = output.name
            self.roleArn = output.roleArn
            self.stateMachineArn = output.stateMachineArn
            self.status = output.status
            self.tracingConfiguration = output.tracingConfiguration
            self.type = output.type
        } else {
            self.creationDate = nil
            self.definition = nil
            self.label = nil
            self.loggingConfiguration = nil
            self.name = nil
            self.roleArn = nil
            self.stateMachineArn = nil
            self.status = nil
            self.tracingConfiguration = nil
            self.type = nil
        }
    }
}

public struct DescribeStateMachineOutputResponse: Swift.Equatable {
    /// The date the state machine is created.
    /// This member is required.
    public var creationDate: ClientRuntime.Date?
    /// The Amazon States Language definition of the state machine. See [Amazon States Language](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html).
    /// This member is required.
    public var definition: Swift.String?
    /// A user-defined or an auto-generated string that identifies a Map state. This parameter is present only if the stateMachineArn specified in input is a qualified state machine ARN.
    public var label: Swift.String?
    /// The LoggingConfiguration data type is used to set CloudWatch Logs options.
    public var loggingConfiguration: SFNClientTypes.LoggingConfiguration?
    /// The name of the state machine. A name must not contain:
    ///
    /// * white space
    ///
    /// * brackets < > { } [ ]
    ///
    /// * wildcard characters ? *
    ///
    /// * special characters " # % \ ^ | ~ ` $ & , ; : /
    ///
    /// * control characters (U+0000-001F, U+007F-009F)
    ///
    ///
    /// To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.
    /// This member is required.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role used when creating this state machine. (The IAM role maintains security by granting Step Functions access to Amazon Web Services resources.)
    /// This member is required.
    public var roleArn: Swift.String?
    /// The Amazon Resource Name (ARN) that identifies the state machine.
    /// This member is required.
    public var stateMachineArn: Swift.String?
    /// The current status of the state machine.
    public var status: SFNClientTypes.StateMachineStatus?
    /// Selects whether X-Ray tracing is enabled.
    public var tracingConfiguration: SFNClientTypes.TracingConfiguration?
    /// The type of the state machine (STANDARD or EXPRESS).
    /// This member is required.
    public var type: SFNClientTypes.StateMachineType?

    public init (
        creationDate: ClientRuntime.Date? = nil,
        definition: Swift.String? = nil,
        label: Swift.String? = nil,
        loggingConfiguration: SFNClientTypes.LoggingConfiguration? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        stateMachineArn: Swift.String? = nil,
        status: SFNClientTypes.StateMachineStatus? = nil,
        tracingConfiguration: SFNClientTypes.TracingConfiguration? = nil,
        type: SFNClientTypes.StateMachineType? = nil
    )
    {
        self.creationDate = creationDate
        self.definition = definition
        self.label = label
        self.loggingConfiguration = loggingConfiguration
        self.name = name
        self.roleArn = roleArn
        self.stateMachineArn = stateMachineArn
        self.status = status
        self.tracingConfiguration = tracingConfiguration
        self.type = type
    }
}

struct DescribeStateMachineOutputResponseBody: Swift.Equatable {
    let stateMachineArn: Swift.String?
    let name: Swift.String?
    let status: SFNClientTypes.StateMachineStatus?
    let definition: Swift.String?
    let roleArn: Swift.String?
    let type: SFNClientTypes.StateMachineType?
    let creationDate: ClientRuntime.Date?
    let loggingConfiguration: SFNClientTypes.LoggingConfiguration?
    let tracingConfiguration: SFNClientTypes.TracingConfiguration?
    let label: Swift.String?
}

extension DescribeStateMachineOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate
        case definition
        case label
        case loggingConfiguration
        case name
        case roleArn
        case stateMachineArn
        case status
        case tracingConfiguration
        case type
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateMachineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateMachineArn)
        stateMachineArn = stateMachineArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SFNClientTypes.StateMachineStatus.self, forKey: .status)
        status = statusDecoded
        let definitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .definition)
        definition = definitionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(SFNClientTypes.StateMachineType.self, forKey: .type)
        type = typeDecoded
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
        let loggingConfigurationDecoded = try containerValues.decodeIfPresent(SFNClientTypes.LoggingConfiguration.self, forKey: .loggingConfiguration)
        loggingConfiguration = loggingConfigurationDecoded
        let tracingConfigurationDecoded = try containerValues.decodeIfPresent(SFNClientTypes.TracingConfiguration.self, forKey: .tracingConfiguration)
        tracingConfiguration = tracingConfigurationDecoded
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
    }
}

extension SFNClientTypes.ExecutionAbortedEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case error
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause, forKey: .cause)
        }
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let causeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cause)
        cause = causeDecoded
    }
}

extension SFNClientTypes.ExecutionAbortedEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExecutionAbortedEventDetails(cause: \"CONTENT_REDACTED\", error: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about an abort of an execution.
    public struct ExecutionAbortedEventDetails: Swift.Equatable {
        /// A more detailed explanation of the cause of the failure.
        public var cause: Swift.String?
        /// The error code of the failure.
        public var error: Swift.String?

        public init (
            cause: Swift.String? = nil,
            error: Swift.String? = nil
        )
        {
            self.cause = cause
            self.error = error
        }
    }

}

extension ExecutionAlreadyExists {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ExecutionAlreadyExistsBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The execution has the same name as another execution (but a different input). Executions with the same name and input are considered idempotent.
public struct ExecutionAlreadyExists: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ExecutionAlreadyExistsBody: Swift.Equatable {
    let message: Swift.String?
}

extension ExecutionAlreadyExistsBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ExecutionDoesNotExist {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ExecutionDoesNotExistBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified execution does not exist.
public struct ExecutionDoesNotExist: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ExecutionDoesNotExistBody: Swift.Equatable {
    let message: Swift.String?
}

extension ExecutionDoesNotExistBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SFNClientTypes.ExecutionFailedEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case error
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause, forKey: .cause)
        }
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let causeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cause)
        cause = causeDecoded
    }
}

extension SFNClientTypes.ExecutionFailedEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExecutionFailedEventDetails(cause: \"CONTENT_REDACTED\", error: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about an execution failure event.
    public struct ExecutionFailedEventDetails: Swift.Equatable {
        /// A more detailed explanation of the cause of the failure.
        public var cause: Swift.String?
        /// The error code of the failure.
        public var error: Swift.String?

        public init (
            cause: Swift.String? = nil,
            error: Swift.String? = nil
        )
        {
            self.cause = cause
            self.error = error
        }
    }

}

extension ExecutionLimitExceeded {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ExecutionLimitExceededBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The maximum number of running executions has been reached. Running executions must end or be stopped before a new execution can be started.
public struct ExecutionLimitExceeded: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ExecutionLimitExceededBody: Swift.Equatable {
    let message: Swift.String?
}

extension ExecutionLimitExceededBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SFNClientTypes.ExecutionListItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionArn
        case itemCount
        case mapRunArn
        case name
        case startDate
        case stateMachineArn
        case status
        case stopDate
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionArn = self.executionArn {
            try encodeContainer.encode(executionArn, forKey: .executionArn)
        }
        if let itemCount = self.itemCount {
            try encodeContainer.encode(itemCount, forKey: .itemCount)
        }
        if let mapRunArn = self.mapRunArn {
            try encodeContainer.encode(mapRunArn, forKey: .mapRunArn)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let startDate = self.startDate {
            try encodeContainer.encodeTimestamp(startDate, format: .epochSeconds, forKey: .startDate)
        }
        if let stateMachineArn = self.stateMachineArn {
            try encodeContainer.encode(stateMachineArn, forKey: .stateMachineArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let stopDate = self.stopDate {
            try encodeContainer.encodeTimestamp(stopDate, format: .epochSeconds, forKey: .stopDate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionArn)
        executionArn = executionArnDecoded
        let stateMachineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateMachineArn)
        stateMachineArn = stateMachineArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SFNClientTypes.ExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let startDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startDate)
        startDate = startDateDecoded
        let stopDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .stopDate)
        stopDate = stopDateDecoded
        let mapRunArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mapRunArn)
        mapRunArn = mapRunArnDecoded
        let itemCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .itemCount)
        itemCount = itemCountDecoded
    }
}

extension SFNClientTypes {
    /// Contains details about an execution.
    public struct ExecutionListItem: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that identifies the execution.
        /// This member is required.
        public var executionArn: Swift.String?
        /// The total number of items processed in a child workflow execution. This field is returned only if mapRunArn was specified in the ListExecutions API action. If stateMachineArn was specified in ListExecutions, the itemCount field isn't returned.
        public var itemCount: Swift.Int?
        /// The Amazon Resource Name (ARN) of a Map Run. This field is returned only if mapRunArn was specified in the ListExecutions API action. If stateMachineArn was specified in ListExecutions, the mapRunArn isn't returned.
        public var mapRunArn: Swift.String?
        /// The name of the execution. A name must not contain:
        ///
        /// * white space
        ///
        /// * brackets < > { } [ ]
        ///
        /// * wildcard characters ? *
        ///
        /// * special characters " # % \ ^ | ~ ` $ & , ; : /
        ///
        /// * control characters (U+0000-001F, U+007F-009F)
        ///
        ///
        /// To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.
        /// This member is required.
        public var name: Swift.String?
        /// The date the execution started.
        /// This member is required.
        public var startDate: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the executed state machine.
        /// This member is required.
        public var stateMachineArn: Swift.String?
        /// The current status of the execution.
        /// This member is required.
        public var status: SFNClientTypes.ExecutionStatus?
        /// If the execution already ended, the date the execution stopped.
        public var stopDate: ClientRuntime.Date?

        public init (
            executionArn: Swift.String? = nil,
            itemCount: Swift.Int? = nil,
            mapRunArn: Swift.String? = nil,
            name: Swift.String? = nil,
            startDate: ClientRuntime.Date? = nil,
            stateMachineArn: Swift.String? = nil,
            status: SFNClientTypes.ExecutionStatus? = nil,
            stopDate: ClientRuntime.Date? = nil
        )
        {
            self.executionArn = executionArn
            self.itemCount = itemCount
            self.mapRunArn = mapRunArn
            self.name = name
            self.startDate = startDate
            self.stateMachineArn = stateMachineArn
            self.status = status
            self.stopDate = stopDate
        }
    }

}

extension SFNClientTypes.ExecutionStartedEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case input
        case inputDetails
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let inputDetails = self.inputDetails {
            try encodeContainer.encode(inputDetails, forKey: .inputDetails)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
        let inputDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.HistoryEventExecutionDataDetails.self, forKey: .inputDetails)
        inputDetails = inputDetailsDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension SFNClientTypes.ExecutionStartedEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExecutionStartedEventDetails(inputDetails: \(Swift.String(describing: inputDetails)), roleArn: \(Swift.String(describing: roleArn)), input: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about the start of the execution.
    public struct ExecutionStartedEventDetails: Swift.Equatable {
        /// The JSON data input to the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.
        public var input: Swift.String?
        /// Contains details about the input for an execution history event.
        public var inputDetails: SFNClientTypes.HistoryEventExecutionDataDetails?
        /// The Amazon Resource Name (ARN) of the IAM role used for executing Lambda tasks.
        public var roleArn: Swift.String?

        public init (
            input: Swift.String? = nil,
            inputDetails: SFNClientTypes.HistoryEventExecutionDataDetails? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.input = input
            self.inputDetails = inputDetails
            self.roleArn = roleArn
        }
    }

}

extension SFNClientTypes {
    public enum ExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aborted
        case failed
        case running
        case succeeded
        case timedOut
        case sdkUnknown(Swift.String)

        public static var allCases: [ExecutionStatus] {
            return [
                .aborted,
                .failed,
                .running,
                .succeeded,
                .timedOut,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aborted: return "ABORTED"
            case .failed: return "FAILED"
            case .running: return "RUNNING"
            case .succeeded: return "SUCCEEDED"
            case .timedOut: return "TIMED_OUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExecutionStatus(rawValue: rawValue) ?? ExecutionStatus.sdkUnknown(rawValue)
        }
    }
}

extension SFNClientTypes.ExecutionSucceededEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case output
        case outputDetails
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let output = self.output {
            try encodeContainer.encode(output, forKey: .output)
        }
        if let outputDetails = self.outputDetails {
            try encodeContainer.encode(outputDetails, forKey: .outputDetails)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .output)
        output = outputDecoded
        let outputDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.HistoryEventExecutionDataDetails.self, forKey: .outputDetails)
        outputDetails = outputDetailsDecoded
    }
}

extension SFNClientTypes.ExecutionSucceededEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExecutionSucceededEventDetails(outputDetails: \(Swift.String(describing: outputDetails)), output: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about the successful termination of the execution.
    public struct ExecutionSucceededEventDetails: Swift.Equatable {
        /// The JSON data output by the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.
        public var output: Swift.String?
        /// Contains details about the output of an execution history event.
        public var outputDetails: SFNClientTypes.HistoryEventExecutionDataDetails?

        public init (
            output: Swift.String? = nil,
            outputDetails: SFNClientTypes.HistoryEventExecutionDataDetails? = nil
        )
        {
            self.output = output
            self.outputDetails = outputDetails
        }
    }

}

extension SFNClientTypes.ExecutionTimedOutEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case error
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause, forKey: .cause)
        }
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let causeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cause)
        cause = causeDecoded
    }
}

extension SFNClientTypes.ExecutionTimedOutEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExecutionTimedOutEventDetails(cause: \"CONTENT_REDACTED\", error: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about the execution timeout that occurred during the execution.
    public struct ExecutionTimedOutEventDetails: Swift.Equatable {
        /// A more detailed explanation of the cause of the timeout.
        public var cause: Swift.String?
        /// The error code of the failure.
        public var error: Swift.String?

        public init (
            cause: Swift.String? = nil,
            error: Swift.String? = nil
        )
        {
            self.cause = cause
            self.error = error
        }
    }

}

extension GetActivityTaskInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityArn
        case workerName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityArn = self.activityArn {
            try encodeContainer.encode(activityArn, forKey: .activityArn)
        }
        if let workerName = self.workerName {
            try encodeContainer.encode(workerName, forKey: .workerName)
        }
    }
}

extension GetActivityTaskInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetActivityTaskInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the activity to retrieve tasks from (assigned when you create the task using [CreateActivity].)
    /// This member is required.
    public var activityArn: Swift.String?
    /// You can provide an arbitrary name in order to identify the worker that the task is assigned to. This name is used when it is logged in the execution history.
    public var workerName: Swift.String?

    public init (
        activityArn: Swift.String? = nil,
        workerName: Swift.String? = nil
    )
    {
        self.activityArn = activityArn
        self.workerName = workerName
    }
}

struct GetActivityTaskInputBody: Swift.Equatable {
    let activityArn: Swift.String?
    let workerName: Swift.String?
}

extension GetActivityTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityArn
        case workerName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activityArn)
        activityArn = activityArnDecoded
        let workerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workerName)
        workerName = workerNameDecoded
    }
}

extension GetActivityTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetActivityTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ActivityDoesNotExist" : self = .activityDoesNotExist(try ActivityDoesNotExist(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ActivityWorkerLimitExceeded" : self = .activityWorkerLimitExceeded(try ActivityWorkerLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArn(try InvalidArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetActivityTaskOutputError: Swift.Error, Swift.Equatable {
    case activityDoesNotExist(ActivityDoesNotExist)
    case activityWorkerLimitExceeded(ActivityWorkerLimitExceeded)
    case invalidArn(InvalidArn)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetActivityTaskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetActivityTaskOutputResponse(taskToken: \(Swift.String(describing: taskToken)), input: \"CONTENT_REDACTED\")"}
}

extension GetActivityTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetActivityTaskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.input = output.input
            self.taskToken = output.taskToken
        } else {
            self.input = nil
            self.taskToken = nil
        }
    }
}

public struct GetActivityTaskOutputResponse: Swift.Equatable {
    /// The string that contains the JSON input data for the task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.
    public var input: Swift.String?
    /// A token that identifies the scheduled task. This token must be copied and included in subsequent calls to [SendTaskHeartbeat], [SendTaskSuccess] or [SendTaskFailure] in order to report the progress or completion of the task.
    public var taskToken: Swift.String?

    public init (
        input: Swift.String? = nil,
        taskToken: Swift.String? = nil
    )
    {
        self.input = input
        self.taskToken = taskToken
    }
}

struct GetActivityTaskOutputResponseBody: Swift.Equatable {
    let taskToken: Swift.String?
    let input: Swift.String?
}

extension GetActivityTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case input
        case taskToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskToken)
        taskToken = taskTokenDecoded
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
    }
}

extension GetExecutionHistoryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionArn
        case includeExecutionData
        case maxResults
        case nextToken
        case reverseOrder
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionArn = self.executionArn {
            try encodeContainer.encode(executionArn, forKey: .executionArn)
        }
        if let includeExecutionData = self.includeExecutionData {
            try encodeContainer.encode(includeExecutionData, forKey: .includeExecutionData)
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if reverseOrder != false {
            try encodeContainer.encode(reverseOrder, forKey: .reverseOrder)
        }
    }
}

extension GetExecutionHistoryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetExecutionHistoryInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the execution.
    /// This member is required.
    public var executionArn: Swift.String?
    /// You can select whether execution data (input or output of a history event) is returned. The default is true.
    public var includeExecutionData: Swift.Bool?
    /// The maximum number of results that are returned per call. You can use nextToken to obtain further pages of results. The default is 100 and the maximum allowed page size is 1000. A value of 0 uses the default. This is only an upper limit. The actual number of results returned per call might be fewer than the specified maximum.
    public var maxResults: Swift.Int
    /// If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.
    public var nextToken: Swift.String?
    /// Lists events in descending order of their timeStamp.
    public var reverseOrder: Swift.Bool

    public init (
        executionArn: Swift.String? = nil,
        includeExecutionData: Swift.Bool? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        reverseOrder: Swift.Bool = false
    )
    {
        self.executionArn = executionArn
        self.includeExecutionData = includeExecutionData
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.reverseOrder = reverseOrder
    }
}

struct GetExecutionHistoryInputBody: Swift.Equatable {
    let executionArn: Swift.String?
    let maxResults: Swift.Int
    let reverseOrder: Swift.Bool
    let nextToken: Swift.String?
    let includeExecutionData: Swift.Bool?
}

extension GetExecutionHistoryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionArn
        case includeExecutionData
        case maxResults
        case nextToken
        case reverseOrder
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionArn)
        executionArn = executionArnDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults) ?? 0
        maxResults = maxResultsDecoded
        let reverseOrderDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .reverseOrder) ?? false
        reverseOrder = reverseOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let includeExecutionDataDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeExecutionData)
        includeExecutionData = includeExecutionDataDecoded
    }
}

extension GetExecutionHistoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetExecutionHistoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ExecutionDoesNotExist" : self = .executionDoesNotExist(try ExecutionDoesNotExist(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArn(try InvalidArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidToken" : self = .invalidToken(try InvalidToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetExecutionHistoryOutputError: Swift.Error, Swift.Equatable {
    case executionDoesNotExist(ExecutionDoesNotExist)
    case invalidArn(InvalidArn)
    case invalidToken(InvalidToken)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetExecutionHistoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetExecutionHistoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.events = output.events
            self.nextToken = output.nextToken
        } else {
            self.events = nil
            self.nextToken = nil
        }
    }
}

public struct GetExecutionHistoryOutputResponse: Swift.Equatable {
    /// The list of events that occurred in the execution.
    /// This member is required.
    public var events: [SFNClientTypes.HistoryEvent]?
    /// If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.
    public var nextToken: Swift.String?

    public init (
        events: [SFNClientTypes.HistoryEvent]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.events = events
        self.nextToken = nextToken
    }
}

struct GetExecutionHistoryOutputResponseBody: Swift.Equatable {
    let events: [SFNClientTypes.HistoryEvent]?
    let nextToken: Swift.String?
}

extension GetExecutionHistoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventsContainer = try containerValues.decodeIfPresent([SFNClientTypes.HistoryEvent?].self, forKey: .events)
        var eventsDecoded0:[SFNClientTypes.HistoryEvent]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [SFNClientTypes.HistoryEvent]()
            for structure0 in eventsContainer {
                if let structure0 = structure0 {
                    eventsDecoded0?.append(structure0)
                }
            }
        }
        events = eventsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension SFNClientTypes.HistoryEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityFailedEventDetails
        case activityScheduleFailedEventDetails
        case activityScheduledEventDetails
        case activityStartedEventDetails
        case activitySucceededEventDetails
        case activityTimedOutEventDetails
        case executionAbortedEventDetails
        case executionFailedEventDetails
        case executionStartedEventDetails
        case executionSucceededEventDetails
        case executionTimedOutEventDetails
        case id
        case lambdaFunctionFailedEventDetails
        case lambdaFunctionScheduleFailedEventDetails
        case lambdaFunctionScheduledEventDetails
        case lambdaFunctionStartFailedEventDetails
        case lambdaFunctionSucceededEventDetails
        case lambdaFunctionTimedOutEventDetails
        case mapIterationAbortedEventDetails
        case mapIterationFailedEventDetails
        case mapIterationStartedEventDetails
        case mapIterationSucceededEventDetails
        case mapRunFailedEventDetails
        case mapRunStartedEventDetails
        case mapStateStartedEventDetails
        case previousEventId
        case stateEnteredEventDetails
        case stateExitedEventDetails
        case taskFailedEventDetails
        case taskScheduledEventDetails
        case taskStartFailedEventDetails
        case taskStartedEventDetails
        case taskSubmitFailedEventDetails
        case taskSubmittedEventDetails
        case taskSucceededEventDetails
        case taskTimedOutEventDetails
        case timestamp
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityFailedEventDetails = self.activityFailedEventDetails {
            try encodeContainer.encode(activityFailedEventDetails, forKey: .activityFailedEventDetails)
        }
        if let activityScheduleFailedEventDetails = self.activityScheduleFailedEventDetails {
            try encodeContainer.encode(activityScheduleFailedEventDetails, forKey: .activityScheduleFailedEventDetails)
        }
        if let activityScheduledEventDetails = self.activityScheduledEventDetails {
            try encodeContainer.encode(activityScheduledEventDetails, forKey: .activityScheduledEventDetails)
        }
        if let activityStartedEventDetails = self.activityStartedEventDetails {
            try encodeContainer.encode(activityStartedEventDetails, forKey: .activityStartedEventDetails)
        }
        if let activitySucceededEventDetails = self.activitySucceededEventDetails {
            try encodeContainer.encode(activitySucceededEventDetails, forKey: .activitySucceededEventDetails)
        }
        if let activityTimedOutEventDetails = self.activityTimedOutEventDetails {
            try encodeContainer.encode(activityTimedOutEventDetails, forKey: .activityTimedOutEventDetails)
        }
        if let executionAbortedEventDetails = self.executionAbortedEventDetails {
            try encodeContainer.encode(executionAbortedEventDetails, forKey: .executionAbortedEventDetails)
        }
        if let executionFailedEventDetails = self.executionFailedEventDetails {
            try encodeContainer.encode(executionFailedEventDetails, forKey: .executionFailedEventDetails)
        }
        if let executionStartedEventDetails = self.executionStartedEventDetails {
            try encodeContainer.encode(executionStartedEventDetails, forKey: .executionStartedEventDetails)
        }
        if let executionSucceededEventDetails = self.executionSucceededEventDetails {
            try encodeContainer.encode(executionSucceededEventDetails, forKey: .executionSucceededEventDetails)
        }
        if let executionTimedOutEventDetails = self.executionTimedOutEventDetails {
            try encodeContainer.encode(executionTimedOutEventDetails, forKey: .executionTimedOutEventDetails)
        }
        if id != 0 {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lambdaFunctionFailedEventDetails = self.lambdaFunctionFailedEventDetails {
            try encodeContainer.encode(lambdaFunctionFailedEventDetails, forKey: .lambdaFunctionFailedEventDetails)
        }
        if let lambdaFunctionScheduleFailedEventDetails = self.lambdaFunctionScheduleFailedEventDetails {
            try encodeContainer.encode(lambdaFunctionScheduleFailedEventDetails, forKey: .lambdaFunctionScheduleFailedEventDetails)
        }
        if let lambdaFunctionScheduledEventDetails = self.lambdaFunctionScheduledEventDetails {
            try encodeContainer.encode(lambdaFunctionScheduledEventDetails, forKey: .lambdaFunctionScheduledEventDetails)
        }
        if let lambdaFunctionStartFailedEventDetails = self.lambdaFunctionStartFailedEventDetails {
            try encodeContainer.encode(lambdaFunctionStartFailedEventDetails, forKey: .lambdaFunctionStartFailedEventDetails)
        }
        if let lambdaFunctionSucceededEventDetails = self.lambdaFunctionSucceededEventDetails {
            try encodeContainer.encode(lambdaFunctionSucceededEventDetails, forKey: .lambdaFunctionSucceededEventDetails)
        }
        if let lambdaFunctionTimedOutEventDetails = self.lambdaFunctionTimedOutEventDetails {
            try encodeContainer.encode(lambdaFunctionTimedOutEventDetails, forKey: .lambdaFunctionTimedOutEventDetails)
        }
        if let mapIterationAbortedEventDetails = self.mapIterationAbortedEventDetails {
            try encodeContainer.encode(mapIterationAbortedEventDetails, forKey: .mapIterationAbortedEventDetails)
        }
        if let mapIterationFailedEventDetails = self.mapIterationFailedEventDetails {
            try encodeContainer.encode(mapIterationFailedEventDetails, forKey: .mapIterationFailedEventDetails)
        }
        if let mapIterationStartedEventDetails = self.mapIterationStartedEventDetails {
            try encodeContainer.encode(mapIterationStartedEventDetails, forKey: .mapIterationStartedEventDetails)
        }
        if let mapIterationSucceededEventDetails = self.mapIterationSucceededEventDetails {
            try encodeContainer.encode(mapIterationSucceededEventDetails, forKey: .mapIterationSucceededEventDetails)
        }
        if let mapRunFailedEventDetails = self.mapRunFailedEventDetails {
            try encodeContainer.encode(mapRunFailedEventDetails, forKey: .mapRunFailedEventDetails)
        }
        if let mapRunStartedEventDetails = self.mapRunStartedEventDetails {
            try encodeContainer.encode(mapRunStartedEventDetails, forKey: .mapRunStartedEventDetails)
        }
        if let mapStateStartedEventDetails = self.mapStateStartedEventDetails {
            try encodeContainer.encode(mapStateStartedEventDetails, forKey: .mapStateStartedEventDetails)
        }
        if previousEventId != 0 {
            try encodeContainer.encode(previousEventId, forKey: .previousEventId)
        }
        if let stateEnteredEventDetails = self.stateEnteredEventDetails {
            try encodeContainer.encode(stateEnteredEventDetails, forKey: .stateEnteredEventDetails)
        }
        if let stateExitedEventDetails = self.stateExitedEventDetails {
            try encodeContainer.encode(stateExitedEventDetails, forKey: .stateExitedEventDetails)
        }
        if let taskFailedEventDetails = self.taskFailedEventDetails {
            try encodeContainer.encode(taskFailedEventDetails, forKey: .taskFailedEventDetails)
        }
        if let taskScheduledEventDetails = self.taskScheduledEventDetails {
            try encodeContainer.encode(taskScheduledEventDetails, forKey: .taskScheduledEventDetails)
        }
        if let taskStartFailedEventDetails = self.taskStartFailedEventDetails {
            try encodeContainer.encode(taskStartFailedEventDetails, forKey: .taskStartFailedEventDetails)
        }
        if let taskStartedEventDetails = self.taskStartedEventDetails {
            try encodeContainer.encode(taskStartedEventDetails, forKey: .taskStartedEventDetails)
        }
        if let taskSubmitFailedEventDetails = self.taskSubmitFailedEventDetails {
            try encodeContainer.encode(taskSubmitFailedEventDetails, forKey: .taskSubmitFailedEventDetails)
        }
        if let taskSubmittedEventDetails = self.taskSubmittedEventDetails {
            try encodeContainer.encode(taskSubmittedEventDetails, forKey: .taskSubmittedEventDetails)
        }
        if let taskSucceededEventDetails = self.taskSucceededEventDetails {
            try encodeContainer.encode(taskSucceededEventDetails, forKey: .taskSucceededEventDetails)
        }
        if let taskTimedOutEventDetails = self.taskTimedOutEventDetails {
            try encodeContainer.encode(taskTimedOutEventDetails, forKey: .taskTimedOutEventDetails)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encodeTimestamp(timestamp, format: .epochSeconds, forKey: .timestamp)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .timestamp)
        timestamp = timestampDecoded
        let typeDecoded = try containerValues.decodeIfPresent(SFNClientTypes.HistoryEventType.self, forKey: .type)
        type = typeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .id) ?? 0
        id = idDecoded
        let previousEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .previousEventId) ?? 0
        previousEventId = previousEventIdDecoded
        let activityFailedEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.ActivityFailedEventDetails.self, forKey: .activityFailedEventDetails)
        activityFailedEventDetails = activityFailedEventDetailsDecoded
        let activityScheduleFailedEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.ActivityScheduleFailedEventDetails.self, forKey: .activityScheduleFailedEventDetails)
        activityScheduleFailedEventDetails = activityScheduleFailedEventDetailsDecoded
        let activityScheduledEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.ActivityScheduledEventDetails.self, forKey: .activityScheduledEventDetails)
        activityScheduledEventDetails = activityScheduledEventDetailsDecoded
        let activityStartedEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.ActivityStartedEventDetails.self, forKey: .activityStartedEventDetails)
        activityStartedEventDetails = activityStartedEventDetailsDecoded
        let activitySucceededEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.ActivitySucceededEventDetails.self, forKey: .activitySucceededEventDetails)
        activitySucceededEventDetails = activitySucceededEventDetailsDecoded
        let activityTimedOutEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.ActivityTimedOutEventDetails.self, forKey: .activityTimedOutEventDetails)
        activityTimedOutEventDetails = activityTimedOutEventDetailsDecoded
        let taskFailedEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.TaskFailedEventDetails.self, forKey: .taskFailedEventDetails)
        taskFailedEventDetails = taskFailedEventDetailsDecoded
        let taskScheduledEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.TaskScheduledEventDetails.self, forKey: .taskScheduledEventDetails)
        taskScheduledEventDetails = taskScheduledEventDetailsDecoded
        let taskStartFailedEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.TaskStartFailedEventDetails.self, forKey: .taskStartFailedEventDetails)
        taskStartFailedEventDetails = taskStartFailedEventDetailsDecoded
        let taskStartedEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.TaskStartedEventDetails.self, forKey: .taskStartedEventDetails)
        taskStartedEventDetails = taskStartedEventDetailsDecoded
        let taskSubmitFailedEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.TaskSubmitFailedEventDetails.self, forKey: .taskSubmitFailedEventDetails)
        taskSubmitFailedEventDetails = taskSubmitFailedEventDetailsDecoded
        let taskSubmittedEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.TaskSubmittedEventDetails.self, forKey: .taskSubmittedEventDetails)
        taskSubmittedEventDetails = taskSubmittedEventDetailsDecoded
        let taskSucceededEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.TaskSucceededEventDetails.self, forKey: .taskSucceededEventDetails)
        taskSucceededEventDetails = taskSucceededEventDetailsDecoded
        let taskTimedOutEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.TaskTimedOutEventDetails.self, forKey: .taskTimedOutEventDetails)
        taskTimedOutEventDetails = taskTimedOutEventDetailsDecoded
        let executionFailedEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.ExecutionFailedEventDetails.self, forKey: .executionFailedEventDetails)
        executionFailedEventDetails = executionFailedEventDetailsDecoded
        let executionStartedEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.ExecutionStartedEventDetails.self, forKey: .executionStartedEventDetails)
        executionStartedEventDetails = executionStartedEventDetailsDecoded
        let executionSucceededEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.ExecutionSucceededEventDetails.self, forKey: .executionSucceededEventDetails)
        executionSucceededEventDetails = executionSucceededEventDetailsDecoded
        let executionAbortedEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.ExecutionAbortedEventDetails.self, forKey: .executionAbortedEventDetails)
        executionAbortedEventDetails = executionAbortedEventDetailsDecoded
        let executionTimedOutEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.ExecutionTimedOutEventDetails.self, forKey: .executionTimedOutEventDetails)
        executionTimedOutEventDetails = executionTimedOutEventDetailsDecoded
        let mapStateStartedEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.MapStateStartedEventDetails.self, forKey: .mapStateStartedEventDetails)
        mapStateStartedEventDetails = mapStateStartedEventDetailsDecoded
        let mapIterationStartedEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.MapIterationEventDetails.self, forKey: .mapIterationStartedEventDetails)
        mapIterationStartedEventDetails = mapIterationStartedEventDetailsDecoded
        let mapIterationSucceededEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.MapIterationEventDetails.self, forKey: .mapIterationSucceededEventDetails)
        mapIterationSucceededEventDetails = mapIterationSucceededEventDetailsDecoded
        let mapIterationFailedEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.MapIterationEventDetails.self, forKey: .mapIterationFailedEventDetails)
        mapIterationFailedEventDetails = mapIterationFailedEventDetailsDecoded
        let mapIterationAbortedEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.MapIterationEventDetails.self, forKey: .mapIterationAbortedEventDetails)
        mapIterationAbortedEventDetails = mapIterationAbortedEventDetailsDecoded
        let lambdaFunctionFailedEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.LambdaFunctionFailedEventDetails.self, forKey: .lambdaFunctionFailedEventDetails)
        lambdaFunctionFailedEventDetails = lambdaFunctionFailedEventDetailsDecoded
        let lambdaFunctionScheduleFailedEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.LambdaFunctionScheduleFailedEventDetails.self, forKey: .lambdaFunctionScheduleFailedEventDetails)
        lambdaFunctionScheduleFailedEventDetails = lambdaFunctionScheduleFailedEventDetailsDecoded
        let lambdaFunctionScheduledEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.LambdaFunctionScheduledEventDetails.self, forKey: .lambdaFunctionScheduledEventDetails)
        lambdaFunctionScheduledEventDetails = lambdaFunctionScheduledEventDetailsDecoded
        let lambdaFunctionStartFailedEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.LambdaFunctionStartFailedEventDetails.self, forKey: .lambdaFunctionStartFailedEventDetails)
        lambdaFunctionStartFailedEventDetails = lambdaFunctionStartFailedEventDetailsDecoded
        let lambdaFunctionSucceededEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.LambdaFunctionSucceededEventDetails.self, forKey: .lambdaFunctionSucceededEventDetails)
        lambdaFunctionSucceededEventDetails = lambdaFunctionSucceededEventDetailsDecoded
        let lambdaFunctionTimedOutEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.LambdaFunctionTimedOutEventDetails.self, forKey: .lambdaFunctionTimedOutEventDetails)
        lambdaFunctionTimedOutEventDetails = lambdaFunctionTimedOutEventDetailsDecoded
        let stateEnteredEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.StateEnteredEventDetails.self, forKey: .stateEnteredEventDetails)
        stateEnteredEventDetails = stateEnteredEventDetailsDecoded
        let stateExitedEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.StateExitedEventDetails.self, forKey: .stateExitedEventDetails)
        stateExitedEventDetails = stateExitedEventDetailsDecoded
        let mapRunStartedEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.MapRunStartedEventDetails.self, forKey: .mapRunStartedEventDetails)
        mapRunStartedEventDetails = mapRunStartedEventDetailsDecoded
        let mapRunFailedEventDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.MapRunFailedEventDetails.self, forKey: .mapRunFailedEventDetails)
        mapRunFailedEventDetails = mapRunFailedEventDetailsDecoded
    }
}

extension SFNClientTypes {
    /// Contains details about the events of an execution.
    public struct HistoryEvent: Swift.Equatable {
        /// Contains details about an activity that failed during an execution.
        public var activityFailedEventDetails: SFNClientTypes.ActivityFailedEventDetails?
        /// Contains details about an activity schedule event that failed during an execution.
        public var activityScheduleFailedEventDetails: SFNClientTypes.ActivityScheduleFailedEventDetails?
        /// Contains details about an activity scheduled during an execution.
        public var activityScheduledEventDetails: SFNClientTypes.ActivityScheduledEventDetails?
        /// Contains details about the start of an activity during an execution.
        public var activityStartedEventDetails: SFNClientTypes.ActivityStartedEventDetails?
        /// Contains details about an activity that successfully terminated during an execution.
        public var activitySucceededEventDetails: SFNClientTypes.ActivitySucceededEventDetails?
        /// Contains details about an activity timeout that occurred during an execution.
        public var activityTimedOutEventDetails: SFNClientTypes.ActivityTimedOutEventDetails?
        /// Contains details about an abort of an execution.
        public var executionAbortedEventDetails: SFNClientTypes.ExecutionAbortedEventDetails?
        /// Contains details about an execution failure event.
        public var executionFailedEventDetails: SFNClientTypes.ExecutionFailedEventDetails?
        /// Contains details about the start of the execution.
        public var executionStartedEventDetails: SFNClientTypes.ExecutionStartedEventDetails?
        /// Contains details about the successful termination of the execution.
        public var executionSucceededEventDetails: SFNClientTypes.ExecutionSucceededEventDetails?
        /// Contains details about the execution timeout that occurred during the execution.
        public var executionTimedOutEventDetails: SFNClientTypes.ExecutionTimedOutEventDetails?
        /// The id of the event. Events are numbered sequentially, starting at one.
        /// This member is required.
        public var id: Swift.Int
        /// Contains details about a Lambda function that failed during an execution.
        public var lambdaFunctionFailedEventDetails: SFNClientTypes.LambdaFunctionFailedEventDetails?
        /// Contains details about a failed Lambda function schedule event that occurred during an execution.
        public var lambdaFunctionScheduleFailedEventDetails: SFNClientTypes.LambdaFunctionScheduleFailedEventDetails?
        /// Contains details about a Lambda function scheduled during an execution.
        public var lambdaFunctionScheduledEventDetails: SFNClientTypes.LambdaFunctionScheduledEventDetails?
        /// Contains details about a lambda function that failed to start during an execution.
        public var lambdaFunctionStartFailedEventDetails: SFNClientTypes.LambdaFunctionStartFailedEventDetails?
        /// Contains details about a Lambda function that terminated successfully during an execution.
        public var lambdaFunctionSucceededEventDetails: SFNClientTypes.LambdaFunctionSucceededEventDetails?
        /// Contains details about a Lambda function timeout that occurred during an execution.
        public var lambdaFunctionTimedOutEventDetails: SFNClientTypes.LambdaFunctionTimedOutEventDetails?
        /// Contains details about an iteration of a Map state that was aborted.
        public var mapIterationAbortedEventDetails: SFNClientTypes.MapIterationEventDetails?
        /// Contains details about an iteration of a Map state that failed.
        public var mapIterationFailedEventDetails: SFNClientTypes.MapIterationEventDetails?
        /// Contains details about an iteration of a Map state that was started.
        public var mapIterationStartedEventDetails: SFNClientTypes.MapIterationEventDetails?
        /// Contains details about an iteration of a Map state that succeeded.
        public var mapIterationSucceededEventDetails: SFNClientTypes.MapIterationEventDetails?
        /// Contains error and cause details about a Map Run that failed.
        public var mapRunFailedEventDetails: SFNClientTypes.MapRunFailedEventDetails?
        /// Contains details, such as mapRunArn, and the start date and time of a Map Run. mapRunArn is the Amazon Resource Name (ARN) of the Map Run that was started.
        public var mapRunStartedEventDetails: SFNClientTypes.MapRunStartedEventDetails?
        /// Contains details about Map state that was started.
        public var mapStateStartedEventDetails: SFNClientTypes.MapStateStartedEventDetails?
        /// The id of the previous event.
        public var previousEventId: Swift.Int
        /// Contains details about a state entered during an execution.
        public var stateEnteredEventDetails: SFNClientTypes.StateEnteredEventDetails?
        /// Contains details about an exit from a state during an execution.
        public var stateExitedEventDetails: SFNClientTypes.StateExitedEventDetails?
        /// Contains details about the failure of a task.
        public var taskFailedEventDetails: SFNClientTypes.TaskFailedEventDetails?
        /// Contains details about a task that was scheduled.
        public var taskScheduledEventDetails: SFNClientTypes.TaskScheduledEventDetails?
        /// Contains details about a task that failed to start.
        public var taskStartFailedEventDetails: SFNClientTypes.TaskStartFailedEventDetails?
        /// Contains details about a task that was started.
        public var taskStartedEventDetails: SFNClientTypes.TaskStartedEventDetails?
        /// Contains details about a task that where the submit failed.
        public var taskSubmitFailedEventDetails: SFNClientTypes.TaskSubmitFailedEventDetails?
        /// Contains details about a submitted task.
        public var taskSubmittedEventDetails: SFNClientTypes.TaskSubmittedEventDetails?
        /// Contains details about a task that succeeded.
        public var taskSucceededEventDetails: SFNClientTypes.TaskSucceededEventDetails?
        /// Contains details about a task that timed out.
        public var taskTimedOutEventDetails: SFNClientTypes.TaskTimedOutEventDetails?
        /// The date and time the event occurred.
        /// This member is required.
        public var timestamp: ClientRuntime.Date?
        /// The type of the event.
        /// This member is required.
        public var type: SFNClientTypes.HistoryEventType?

        public init (
            activityFailedEventDetails: SFNClientTypes.ActivityFailedEventDetails? = nil,
            activityScheduleFailedEventDetails: SFNClientTypes.ActivityScheduleFailedEventDetails? = nil,
            activityScheduledEventDetails: SFNClientTypes.ActivityScheduledEventDetails? = nil,
            activityStartedEventDetails: SFNClientTypes.ActivityStartedEventDetails? = nil,
            activitySucceededEventDetails: SFNClientTypes.ActivitySucceededEventDetails? = nil,
            activityTimedOutEventDetails: SFNClientTypes.ActivityTimedOutEventDetails? = nil,
            executionAbortedEventDetails: SFNClientTypes.ExecutionAbortedEventDetails? = nil,
            executionFailedEventDetails: SFNClientTypes.ExecutionFailedEventDetails? = nil,
            executionStartedEventDetails: SFNClientTypes.ExecutionStartedEventDetails? = nil,
            executionSucceededEventDetails: SFNClientTypes.ExecutionSucceededEventDetails? = nil,
            executionTimedOutEventDetails: SFNClientTypes.ExecutionTimedOutEventDetails? = nil,
            id: Swift.Int = 0,
            lambdaFunctionFailedEventDetails: SFNClientTypes.LambdaFunctionFailedEventDetails? = nil,
            lambdaFunctionScheduleFailedEventDetails: SFNClientTypes.LambdaFunctionScheduleFailedEventDetails? = nil,
            lambdaFunctionScheduledEventDetails: SFNClientTypes.LambdaFunctionScheduledEventDetails? = nil,
            lambdaFunctionStartFailedEventDetails: SFNClientTypes.LambdaFunctionStartFailedEventDetails? = nil,
            lambdaFunctionSucceededEventDetails: SFNClientTypes.LambdaFunctionSucceededEventDetails? = nil,
            lambdaFunctionTimedOutEventDetails: SFNClientTypes.LambdaFunctionTimedOutEventDetails? = nil,
            mapIterationAbortedEventDetails: SFNClientTypes.MapIterationEventDetails? = nil,
            mapIterationFailedEventDetails: SFNClientTypes.MapIterationEventDetails? = nil,
            mapIterationStartedEventDetails: SFNClientTypes.MapIterationEventDetails? = nil,
            mapIterationSucceededEventDetails: SFNClientTypes.MapIterationEventDetails? = nil,
            mapRunFailedEventDetails: SFNClientTypes.MapRunFailedEventDetails? = nil,
            mapRunStartedEventDetails: SFNClientTypes.MapRunStartedEventDetails? = nil,
            mapStateStartedEventDetails: SFNClientTypes.MapStateStartedEventDetails? = nil,
            previousEventId: Swift.Int = 0,
            stateEnteredEventDetails: SFNClientTypes.StateEnteredEventDetails? = nil,
            stateExitedEventDetails: SFNClientTypes.StateExitedEventDetails? = nil,
            taskFailedEventDetails: SFNClientTypes.TaskFailedEventDetails? = nil,
            taskScheduledEventDetails: SFNClientTypes.TaskScheduledEventDetails? = nil,
            taskStartFailedEventDetails: SFNClientTypes.TaskStartFailedEventDetails? = nil,
            taskStartedEventDetails: SFNClientTypes.TaskStartedEventDetails? = nil,
            taskSubmitFailedEventDetails: SFNClientTypes.TaskSubmitFailedEventDetails? = nil,
            taskSubmittedEventDetails: SFNClientTypes.TaskSubmittedEventDetails? = nil,
            taskSucceededEventDetails: SFNClientTypes.TaskSucceededEventDetails? = nil,
            taskTimedOutEventDetails: SFNClientTypes.TaskTimedOutEventDetails? = nil,
            timestamp: ClientRuntime.Date? = nil,
            type: SFNClientTypes.HistoryEventType? = nil
        )
        {
            self.activityFailedEventDetails = activityFailedEventDetails
            self.activityScheduleFailedEventDetails = activityScheduleFailedEventDetails
            self.activityScheduledEventDetails = activityScheduledEventDetails
            self.activityStartedEventDetails = activityStartedEventDetails
            self.activitySucceededEventDetails = activitySucceededEventDetails
            self.activityTimedOutEventDetails = activityTimedOutEventDetails
            self.executionAbortedEventDetails = executionAbortedEventDetails
            self.executionFailedEventDetails = executionFailedEventDetails
            self.executionStartedEventDetails = executionStartedEventDetails
            self.executionSucceededEventDetails = executionSucceededEventDetails
            self.executionTimedOutEventDetails = executionTimedOutEventDetails
            self.id = id
            self.lambdaFunctionFailedEventDetails = lambdaFunctionFailedEventDetails
            self.lambdaFunctionScheduleFailedEventDetails = lambdaFunctionScheduleFailedEventDetails
            self.lambdaFunctionScheduledEventDetails = lambdaFunctionScheduledEventDetails
            self.lambdaFunctionStartFailedEventDetails = lambdaFunctionStartFailedEventDetails
            self.lambdaFunctionSucceededEventDetails = lambdaFunctionSucceededEventDetails
            self.lambdaFunctionTimedOutEventDetails = lambdaFunctionTimedOutEventDetails
            self.mapIterationAbortedEventDetails = mapIterationAbortedEventDetails
            self.mapIterationFailedEventDetails = mapIterationFailedEventDetails
            self.mapIterationStartedEventDetails = mapIterationStartedEventDetails
            self.mapIterationSucceededEventDetails = mapIterationSucceededEventDetails
            self.mapRunFailedEventDetails = mapRunFailedEventDetails
            self.mapRunStartedEventDetails = mapRunStartedEventDetails
            self.mapStateStartedEventDetails = mapStateStartedEventDetails
            self.previousEventId = previousEventId
            self.stateEnteredEventDetails = stateEnteredEventDetails
            self.stateExitedEventDetails = stateExitedEventDetails
            self.taskFailedEventDetails = taskFailedEventDetails
            self.taskScheduledEventDetails = taskScheduledEventDetails
            self.taskStartFailedEventDetails = taskStartFailedEventDetails
            self.taskStartedEventDetails = taskStartedEventDetails
            self.taskSubmitFailedEventDetails = taskSubmitFailedEventDetails
            self.taskSubmittedEventDetails = taskSubmittedEventDetails
            self.taskSucceededEventDetails = taskSucceededEventDetails
            self.taskTimedOutEventDetails = taskTimedOutEventDetails
            self.timestamp = timestamp
            self.type = type
        }
    }

}

extension SFNClientTypes.HistoryEventExecutionDataDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case truncated
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if truncated != false {
            try encodeContainer.encode(truncated, forKey: .truncated)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let truncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .truncated) ?? false
        truncated = truncatedDecoded
    }
}

extension SFNClientTypes {
    /// Provides details about input or output in an execution history event.
    public struct HistoryEventExecutionDataDetails: Swift.Equatable {
        /// Indicates whether input or output was truncated in the response. Always false for API calls.
        public var truncated: Swift.Bool

        public init (
            truncated: Swift.Bool = false
        )
        {
            self.truncated = truncated
        }
    }

}

extension SFNClientTypes {
    public enum HistoryEventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case activityfailed
        case activityschedulefailed
        case activityscheduled
        case activitystarted
        case activitysucceeded
        case activitytimedout
        case choicestateentered
        case choicestateexited
        case executionaborted
        case executionfailed
        case executionstarted
        case executionsucceeded
        case executiontimedout
        case failstateentered
        case lambdafunctionfailed
        case lambdafunctionschedulefailed
        case lambdafunctionscheduled
        case lambdafunctionstartfailed
        case lambdafunctionstarted
        case lambdafunctionsucceeded
        case lambdafunctiontimedout
        case mapiterationaborted
        case mapiterationfailed
        case mapiterationstarted
        case mapiterationsucceeded
        case maprunaborted
        case maprunfailed
        case maprunstarted
        case maprunsucceeded
        case mapstateaborted
        case mapstateentered
        case mapstateexited
        case mapstatefailed
        case mapstatestarted
        case mapstatesucceeded
        case parallelstateaborted
        case parallelstateentered
        case parallelstateexited
        case parallelstatefailed
        case parallelstatestarted
        case parallelstatesucceeded
        case passstateentered
        case passstateexited
        case succeedstateentered
        case succeedstateexited
        case taskfailed
        case taskscheduled
        case taskstartfailed
        case taskstarted
        case taskstateaborted
        case taskstateentered
        case taskstateexited
        case tasksubmitfailed
        case tasksubmitted
        case tasksucceeded
        case tasktimedout
        case waitstateaborted
        case waitstateentered
        case waitstateexited
        case sdkUnknown(Swift.String)

        public static var allCases: [HistoryEventType] {
            return [
                .activityfailed,
                .activityschedulefailed,
                .activityscheduled,
                .activitystarted,
                .activitysucceeded,
                .activitytimedout,
                .choicestateentered,
                .choicestateexited,
                .executionaborted,
                .executionfailed,
                .executionstarted,
                .executionsucceeded,
                .executiontimedout,
                .failstateentered,
                .lambdafunctionfailed,
                .lambdafunctionschedulefailed,
                .lambdafunctionscheduled,
                .lambdafunctionstartfailed,
                .lambdafunctionstarted,
                .lambdafunctionsucceeded,
                .lambdafunctiontimedout,
                .mapiterationaborted,
                .mapiterationfailed,
                .mapiterationstarted,
                .mapiterationsucceeded,
                .maprunaborted,
                .maprunfailed,
                .maprunstarted,
                .maprunsucceeded,
                .mapstateaborted,
                .mapstateentered,
                .mapstateexited,
                .mapstatefailed,
                .mapstatestarted,
                .mapstatesucceeded,
                .parallelstateaborted,
                .parallelstateentered,
                .parallelstateexited,
                .parallelstatefailed,
                .parallelstatestarted,
                .parallelstatesucceeded,
                .passstateentered,
                .passstateexited,
                .succeedstateentered,
                .succeedstateexited,
                .taskfailed,
                .taskscheduled,
                .taskstartfailed,
                .taskstarted,
                .taskstateaborted,
                .taskstateentered,
                .taskstateexited,
                .tasksubmitfailed,
                .tasksubmitted,
                .tasksucceeded,
                .tasktimedout,
                .waitstateaborted,
                .waitstateentered,
                .waitstateexited,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .activityfailed: return "ActivityFailed"
            case .activityschedulefailed: return "ActivityScheduleFailed"
            case .activityscheduled: return "ActivityScheduled"
            case .activitystarted: return "ActivityStarted"
            case .activitysucceeded: return "ActivitySucceeded"
            case .activitytimedout: return "ActivityTimedOut"
            case .choicestateentered: return "ChoiceStateEntered"
            case .choicestateexited: return "ChoiceStateExited"
            case .executionaborted: return "ExecutionAborted"
            case .executionfailed: return "ExecutionFailed"
            case .executionstarted: return "ExecutionStarted"
            case .executionsucceeded: return "ExecutionSucceeded"
            case .executiontimedout: return "ExecutionTimedOut"
            case .failstateentered: return "FailStateEntered"
            case .lambdafunctionfailed: return "LambdaFunctionFailed"
            case .lambdafunctionschedulefailed: return "LambdaFunctionScheduleFailed"
            case .lambdafunctionscheduled: return "LambdaFunctionScheduled"
            case .lambdafunctionstartfailed: return "LambdaFunctionStartFailed"
            case .lambdafunctionstarted: return "LambdaFunctionStarted"
            case .lambdafunctionsucceeded: return "LambdaFunctionSucceeded"
            case .lambdafunctiontimedout: return "LambdaFunctionTimedOut"
            case .mapiterationaborted: return "MapIterationAborted"
            case .mapiterationfailed: return "MapIterationFailed"
            case .mapiterationstarted: return "MapIterationStarted"
            case .mapiterationsucceeded: return "MapIterationSucceeded"
            case .maprunaborted: return "MapRunAborted"
            case .maprunfailed: return "MapRunFailed"
            case .maprunstarted: return "MapRunStarted"
            case .maprunsucceeded: return "MapRunSucceeded"
            case .mapstateaborted: return "MapStateAborted"
            case .mapstateentered: return "MapStateEntered"
            case .mapstateexited: return "MapStateExited"
            case .mapstatefailed: return "MapStateFailed"
            case .mapstatestarted: return "MapStateStarted"
            case .mapstatesucceeded: return "MapStateSucceeded"
            case .parallelstateaborted: return "ParallelStateAborted"
            case .parallelstateentered: return "ParallelStateEntered"
            case .parallelstateexited: return "ParallelStateExited"
            case .parallelstatefailed: return "ParallelStateFailed"
            case .parallelstatestarted: return "ParallelStateStarted"
            case .parallelstatesucceeded: return "ParallelStateSucceeded"
            case .passstateentered: return "PassStateEntered"
            case .passstateexited: return "PassStateExited"
            case .succeedstateentered: return "SucceedStateEntered"
            case .succeedstateexited: return "SucceedStateExited"
            case .taskfailed: return "TaskFailed"
            case .taskscheduled: return "TaskScheduled"
            case .taskstartfailed: return "TaskStartFailed"
            case .taskstarted: return "TaskStarted"
            case .taskstateaborted: return "TaskStateAborted"
            case .taskstateentered: return "TaskStateEntered"
            case .taskstateexited: return "TaskStateExited"
            case .tasksubmitfailed: return "TaskSubmitFailed"
            case .tasksubmitted: return "TaskSubmitted"
            case .tasksucceeded: return "TaskSucceeded"
            case .tasktimedout: return "TaskTimedOut"
            case .waitstateaborted: return "WaitStateAborted"
            case .waitstateentered: return "WaitStateEntered"
            case .waitstateexited: return "WaitStateExited"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HistoryEventType(rawValue: rawValue) ?? HistoryEventType.sdkUnknown(rawValue)
        }
    }
}

extension InvalidArn {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidArnBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The provided Amazon Resource Name (ARN) is not valid.
public struct InvalidArn: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidArnBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidArnBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDefinition {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidDefinitionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The provided Amazon States Language definition is not valid.
public struct InvalidDefinition: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDefinitionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidDefinitionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidExecutionInput {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidExecutionInputBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The provided JSON input data is not valid.
public struct InvalidExecutionInput: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidExecutionInputBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidLoggingConfiguration {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidLoggingConfigurationBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///
public struct InvalidLoggingConfiguration: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidLoggingConfigurationBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidLoggingConfigurationBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidName {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidNameBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The provided name is not valid.
public struct InvalidName: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidNameBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidNameBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidOutput {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidOutputBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The provided JSON output data is not valid.
public struct InvalidOutput: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidOutputBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidToken {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidTokenBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The provided token is not valid.
public struct InvalidToken: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTokenBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidTokenBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTracingConfiguration {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidTracingConfigurationBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Your tracingConfiguration key does not match, or enabled has not been set to true or false.
public struct InvalidTracingConfiguration: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTracingConfigurationBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidTracingConfigurationBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SFNClientTypes.LambdaFunctionFailedEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case error
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause, forKey: .cause)
        }
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let causeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cause)
        cause = causeDecoded
    }
}

extension SFNClientTypes.LambdaFunctionFailedEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LambdaFunctionFailedEventDetails(cause: \"CONTENT_REDACTED\", error: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about a Lambda function that failed during an execution.
    public struct LambdaFunctionFailedEventDetails: Swift.Equatable {
        /// A more detailed explanation of the cause of the failure.
        public var cause: Swift.String?
        /// The error code of the failure.
        public var error: Swift.String?

        public init (
            cause: Swift.String? = nil,
            error: Swift.String? = nil
        )
        {
            self.cause = cause
            self.error = error
        }
    }

}

extension SFNClientTypes.LambdaFunctionScheduleFailedEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case error
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause, forKey: .cause)
        }
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let causeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cause)
        cause = causeDecoded
    }
}

extension SFNClientTypes.LambdaFunctionScheduleFailedEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LambdaFunctionScheduleFailedEventDetails(cause: \"CONTENT_REDACTED\", error: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about a failed Lambda function schedule event that occurred during an execution.
    public struct LambdaFunctionScheduleFailedEventDetails: Swift.Equatable {
        /// A more detailed explanation of the cause of the failure.
        public var cause: Swift.String?
        /// The error code of the failure.
        public var error: Swift.String?

        public init (
            cause: Swift.String? = nil,
            error: Swift.String? = nil
        )
        {
            self.cause = cause
            self.error = error
        }
    }

}

extension SFNClientTypes.LambdaFunctionScheduledEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case input
        case inputDetails
        case resource
        case taskCredentials
        case timeoutInSeconds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let inputDetails = self.inputDetails {
            try encodeContainer.encode(inputDetails, forKey: .inputDetails)
        }
        if let resource = self.resource {
            try encodeContainer.encode(resource, forKey: .resource)
        }
        if let taskCredentials = self.taskCredentials {
            try encodeContainer.encode(taskCredentials, forKey: .taskCredentials)
        }
        if let timeoutInSeconds = self.timeoutInSeconds {
            try encodeContainer.encode(timeoutInSeconds, forKey: .timeoutInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resource)
        resource = resourceDecoded
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
        let inputDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.HistoryEventExecutionDataDetails.self, forKey: .inputDetails)
        inputDetails = inputDetailsDecoded
        let timeoutInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutInSeconds)
        timeoutInSeconds = timeoutInSecondsDecoded
        let taskCredentialsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.TaskCredentials.self, forKey: .taskCredentials)
        taskCredentials = taskCredentialsDecoded
    }
}

extension SFNClientTypes.LambdaFunctionScheduledEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LambdaFunctionScheduledEventDetails(inputDetails: \(Swift.String(describing: inputDetails)), resource: \(Swift.String(describing: resource)), taskCredentials: \(Swift.String(describing: taskCredentials)), timeoutInSeconds: \(Swift.String(describing: timeoutInSeconds)), input: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about a Lambda function scheduled during an execution.
    public struct LambdaFunctionScheduledEventDetails: Swift.Equatable {
        /// The JSON data input to the Lambda function. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.
        public var input: Swift.String?
        /// Contains details about input for an execution history event.
        public var inputDetails: SFNClientTypes.HistoryEventExecutionDataDetails?
        /// The Amazon Resource Name (ARN) of the scheduled Lambda function.
        /// This member is required.
        public var resource: Swift.String?
        /// The credentials that Step Functions uses for the task.
        public var taskCredentials: SFNClientTypes.TaskCredentials?
        /// The maximum allowed duration of the Lambda function.
        public var timeoutInSeconds: Swift.Int?

        public init (
            input: Swift.String? = nil,
            inputDetails: SFNClientTypes.HistoryEventExecutionDataDetails? = nil,
            resource: Swift.String? = nil,
            taskCredentials: SFNClientTypes.TaskCredentials? = nil,
            timeoutInSeconds: Swift.Int? = nil
        )
        {
            self.input = input
            self.inputDetails = inputDetails
            self.resource = resource
            self.taskCredentials = taskCredentials
            self.timeoutInSeconds = timeoutInSeconds
        }
    }

}

extension SFNClientTypes.LambdaFunctionStartFailedEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case error
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause, forKey: .cause)
        }
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let causeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cause)
        cause = causeDecoded
    }
}

extension SFNClientTypes.LambdaFunctionStartFailedEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LambdaFunctionStartFailedEventDetails(cause: \"CONTENT_REDACTED\", error: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about a lambda function that failed to start during an execution.
    public struct LambdaFunctionStartFailedEventDetails: Swift.Equatable {
        /// A more detailed explanation of the cause of the failure.
        public var cause: Swift.String?
        /// The error code of the failure.
        public var error: Swift.String?

        public init (
            cause: Swift.String? = nil,
            error: Swift.String? = nil
        )
        {
            self.cause = cause
            self.error = error
        }
    }

}

extension SFNClientTypes.LambdaFunctionSucceededEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case output
        case outputDetails
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let output = self.output {
            try encodeContainer.encode(output, forKey: .output)
        }
        if let outputDetails = self.outputDetails {
            try encodeContainer.encode(outputDetails, forKey: .outputDetails)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .output)
        output = outputDecoded
        let outputDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.HistoryEventExecutionDataDetails.self, forKey: .outputDetails)
        outputDetails = outputDetailsDecoded
    }
}

extension SFNClientTypes.LambdaFunctionSucceededEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LambdaFunctionSucceededEventDetails(outputDetails: \(Swift.String(describing: outputDetails)), output: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about a Lambda function that successfully terminated during an execution.
    public struct LambdaFunctionSucceededEventDetails: Swift.Equatable {
        /// The JSON data output by the Lambda function. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.
        public var output: Swift.String?
        /// Contains details about the output of an execution history event.
        public var outputDetails: SFNClientTypes.HistoryEventExecutionDataDetails?

        public init (
            output: Swift.String? = nil,
            outputDetails: SFNClientTypes.HistoryEventExecutionDataDetails? = nil
        )
        {
            self.output = output
            self.outputDetails = outputDetails
        }
    }

}

extension SFNClientTypes.LambdaFunctionTimedOutEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case error
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause, forKey: .cause)
        }
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let causeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cause)
        cause = causeDecoded
    }
}

extension SFNClientTypes.LambdaFunctionTimedOutEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LambdaFunctionTimedOutEventDetails(cause: \"CONTENT_REDACTED\", error: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about a Lambda function timeout that occurred during an execution.
    public struct LambdaFunctionTimedOutEventDetails: Swift.Equatable {
        /// A more detailed explanation of the cause of the timeout.
        public var cause: Swift.String?
        /// The error code of the failure.
        public var error: Swift.String?

        public init (
            cause: Swift.String? = nil,
            error: Swift.String? = nil
        )
        {
            self.cause = cause
            self.error = error
        }
    }

}

extension ListActivitiesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListActivitiesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListActivitiesInput: Swift.Equatable {
    /// The maximum number of results that are returned per call. You can use nextToken to obtain further pages of results. The default is 100 and the maximum allowed page size is 1000. A value of 0 uses the default. This is only an upper limit. The actual number of results returned per call might be fewer than the specified maximum.
    public var maxResults: Swift.Int
    /// If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListActivitiesInputBody: Swift.Equatable {
    let maxResults: Swift.Int
    let nextToken: Swift.String?
}

extension ListActivitiesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults) ?? 0
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListActivitiesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListActivitiesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidToken" : self = .invalidToken(try InvalidToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListActivitiesOutputError: Swift.Error, Swift.Equatable {
    case invalidToken(InvalidToken)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListActivitiesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListActivitiesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.activities = output.activities
            self.nextToken = output.nextToken
        } else {
            self.activities = nil
            self.nextToken = nil
        }
    }
}

public struct ListActivitiesOutputResponse: Swift.Equatable {
    /// The list of activities.
    /// This member is required.
    public var activities: [SFNClientTypes.ActivityListItem]?
    /// If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.
    public var nextToken: Swift.String?

    public init (
        activities: [SFNClientTypes.ActivityListItem]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.activities = activities
        self.nextToken = nextToken
    }
}

struct ListActivitiesOutputResponseBody: Swift.Equatable {
    let activities: [SFNClientTypes.ActivityListItem]?
    let nextToken: Swift.String?
}

extension ListActivitiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activities
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activitiesContainer = try containerValues.decodeIfPresent([SFNClientTypes.ActivityListItem?].self, forKey: .activities)
        var activitiesDecoded0:[SFNClientTypes.ActivityListItem]? = nil
        if let activitiesContainer = activitiesContainer {
            activitiesDecoded0 = [SFNClientTypes.ActivityListItem]()
            for structure0 in activitiesContainer {
                if let structure0 = structure0 {
                    activitiesDecoded0?.append(structure0)
                }
            }
        }
        activities = activitiesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListExecutionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mapRunArn
        case maxResults
        case nextToken
        case stateMachineArn
        case statusFilter
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mapRunArn = self.mapRunArn {
            try encodeContainer.encode(mapRunArn, forKey: .mapRunArn)
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let stateMachineArn = self.stateMachineArn {
            try encodeContainer.encode(stateMachineArn, forKey: .stateMachineArn)
        }
        if let statusFilter = self.statusFilter {
            try encodeContainer.encode(statusFilter.rawValue, forKey: .statusFilter)
        }
    }
}

extension ListExecutionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListExecutionsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the Map Run that started the child workflow executions. If the mapRunArn field is specified, a list of all of the child workflow executions started by a Map Run is returned. For more information, see [Examining Map Run](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-examine-map-run.html) in the Step Functions Developer Guide. You can specify either a mapRunArn or a stateMachineArn, but not both.
    public var mapRunArn: Swift.String?
    /// The maximum number of results that are returned per call. You can use nextToken to obtain further pages of results. The default is 100 and the maximum allowed page size is 1000. A value of 0 uses the default. This is only an upper limit. The actual number of results returned per call might be fewer than the specified maximum.
    public var maxResults: Swift.Int
    /// If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the state machine whose executions is listed. You can specify either a mapRunArn or a stateMachineArn, but not both.
    public var stateMachineArn: Swift.String?
    /// If specified, only list the executions whose current execution status matches the given filter.
    public var statusFilter: SFNClientTypes.ExecutionStatus?

    public init (
        mapRunArn: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        stateMachineArn: Swift.String? = nil,
        statusFilter: SFNClientTypes.ExecutionStatus? = nil
    )
    {
        self.mapRunArn = mapRunArn
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.stateMachineArn = stateMachineArn
        self.statusFilter = statusFilter
    }
}

struct ListExecutionsInputBody: Swift.Equatable {
    let stateMachineArn: Swift.String?
    let statusFilter: SFNClientTypes.ExecutionStatus?
    let maxResults: Swift.Int
    let nextToken: Swift.String?
    let mapRunArn: Swift.String?
}

extension ListExecutionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mapRunArn
        case maxResults
        case nextToken
        case stateMachineArn
        case statusFilter
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateMachineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateMachineArn)
        stateMachineArn = stateMachineArnDecoded
        let statusFilterDecoded = try containerValues.decodeIfPresent(SFNClientTypes.ExecutionStatus.self, forKey: .statusFilter)
        statusFilter = statusFilterDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults) ?? 0
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let mapRunArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mapRunArn)
        mapRunArn = mapRunArnDecoded
    }
}

extension ListExecutionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListExecutionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArn" : self = .invalidArn(try InvalidArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidToken" : self = .invalidToken(try InvalidToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StateMachineDoesNotExist" : self = .stateMachineDoesNotExist(try StateMachineDoesNotExist(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StateMachineTypeNotSupported" : self = .stateMachineTypeNotSupported(try StateMachineTypeNotSupported(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListExecutionsOutputError: Swift.Error, Swift.Equatable {
    case invalidArn(InvalidArn)
    case invalidToken(InvalidToken)
    case resourceNotFound(ResourceNotFound)
    case stateMachineDoesNotExist(StateMachineDoesNotExist)
    case stateMachineTypeNotSupported(StateMachineTypeNotSupported)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListExecutionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListExecutionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.executions = output.executions
            self.nextToken = output.nextToken
        } else {
            self.executions = nil
            self.nextToken = nil
        }
    }
}

public struct ListExecutionsOutputResponse: Swift.Equatable {
    /// The list of matching executions.
    /// This member is required.
    public var executions: [SFNClientTypes.ExecutionListItem]?
    /// If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.
    public var nextToken: Swift.String?

    public init (
        executions: [SFNClientTypes.ExecutionListItem]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.executions = executions
        self.nextToken = nextToken
    }
}

struct ListExecutionsOutputResponseBody: Swift.Equatable {
    let executions: [SFNClientTypes.ExecutionListItem]?
    let nextToken: Swift.String?
}

extension ListExecutionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executions
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionsContainer = try containerValues.decodeIfPresent([SFNClientTypes.ExecutionListItem?].self, forKey: .executions)
        var executionsDecoded0:[SFNClientTypes.ExecutionListItem]? = nil
        if let executionsContainer = executionsContainer {
            executionsDecoded0 = [SFNClientTypes.ExecutionListItem]()
            for structure0 in executionsContainer {
                if let structure0 = structure0 {
                    executionsDecoded0?.append(structure0)
                }
            }
        }
        executions = executionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListMapRunsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionArn
        case maxResults
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionArn = self.executionArn {
            try encodeContainer.encode(executionArn, forKey: .executionArn)
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListMapRunsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListMapRunsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the execution for which the Map Runs must be listed.
    /// This member is required.
    public var executionArn: Swift.String?
    /// The maximum number of results that are returned per call. You can use nextToken to obtain further pages of results. The default is 100 and the maximum allowed page size is 1000. A value of 0 uses the default. This is only an upper limit. The actual number of results returned per call might be fewer than the specified maximum.
    public var maxResults: Swift.Int
    /// If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.
    public var nextToken: Swift.String?

    public init (
        executionArn: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.executionArn = executionArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListMapRunsInputBody: Swift.Equatable {
    let executionArn: Swift.String?
    let maxResults: Swift.Int
    let nextToken: Swift.String?
}

extension ListMapRunsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionArn
        case maxResults
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionArn)
        executionArn = executionArnDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults) ?? 0
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListMapRunsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListMapRunsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ExecutionDoesNotExist" : self = .executionDoesNotExist(try ExecutionDoesNotExist(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArn(try InvalidArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidToken" : self = .invalidToken(try InvalidToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListMapRunsOutputError: Swift.Error, Swift.Equatable {
    case executionDoesNotExist(ExecutionDoesNotExist)
    case invalidArn(InvalidArn)
    case invalidToken(InvalidToken)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMapRunsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListMapRunsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.mapRuns = output.mapRuns
            self.nextToken = output.nextToken
        } else {
            self.mapRuns = nil
            self.nextToken = nil
        }
    }
}

public struct ListMapRunsOutputResponse: Swift.Equatable {
    /// An array that lists information related to a Map Run, such as the Amazon Resource Name (ARN) of the Map Run and the ARN of the state machine that started the Map Run.
    /// This member is required.
    public var mapRuns: [SFNClientTypes.MapRunListItem]?
    /// If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.
    public var nextToken: Swift.String?

    public init (
        mapRuns: [SFNClientTypes.MapRunListItem]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.mapRuns = mapRuns
        self.nextToken = nextToken
    }
}

struct ListMapRunsOutputResponseBody: Swift.Equatable {
    let mapRuns: [SFNClientTypes.MapRunListItem]?
    let nextToken: Swift.String?
}

extension ListMapRunsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mapRuns
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mapRunsContainer = try containerValues.decodeIfPresent([SFNClientTypes.MapRunListItem?].self, forKey: .mapRuns)
        var mapRunsDecoded0:[SFNClientTypes.MapRunListItem]? = nil
        if let mapRunsContainer = mapRunsContainer {
            mapRunsDecoded0 = [SFNClientTypes.MapRunListItem]()
            for structure0 in mapRunsContainer {
                if let structure0 = structure0 {
                    mapRunsDecoded0?.append(structure0)
                }
            }
        }
        mapRuns = mapRunsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListStateMachinesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListStateMachinesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListStateMachinesInput: Swift.Equatable {
    /// The maximum number of results that are returned per call. You can use nextToken to obtain further pages of results. The default is 100 and the maximum allowed page size is 1000. A value of 0 uses the default. This is only an upper limit. The actual number of results returned per call might be fewer than the specified maximum.
    public var maxResults: Swift.Int
    /// If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListStateMachinesInputBody: Swift.Equatable {
    let maxResults: Swift.Int
    let nextToken: Swift.String?
}

extension ListStateMachinesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults) ?? 0
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListStateMachinesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListStateMachinesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidToken" : self = .invalidToken(try InvalidToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListStateMachinesOutputError: Swift.Error, Swift.Equatable {
    case invalidToken(InvalidToken)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListStateMachinesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListStateMachinesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.stateMachines = output.stateMachines
        } else {
            self.nextToken = nil
            self.stateMachines = nil
        }
    }
}

public struct ListStateMachinesOutputResponse: Swift.Equatable {
    /// If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.
    public var nextToken: Swift.String?
    /// This member is required.
    public var stateMachines: [SFNClientTypes.StateMachineListItem]?

    public init (
        nextToken: Swift.String? = nil,
        stateMachines: [SFNClientTypes.StateMachineListItem]? = nil
    )
    {
        self.nextToken = nextToken
        self.stateMachines = stateMachines
    }
}

struct ListStateMachinesOutputResponseBody: Swift.Equatable {
    let stateMachines: [SFNClientTypes.StateMachineListItem]?
    let nextToken: Swift.String?
}

extension ListStateMachinesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case stateMachines
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateMachinesContainer = try containerValues.decodeIfPresent([SFNClientTypes.StateMachineListItem?].self, forKey: .stateMachines)
        var stateMachinesDecoded0:[SFNClientTypes.StateMachineListItem]? = nil
        if let stateMachinesContainer = stateMachinesContainer {
            stateMachinesDecoded0 = [SFNClientTypes.StateMachineListItem]()
            for structure0 in stateMachinesContainer {
                if let structure0 = structure0 {
                    stateMachinesDecoded0?.append(structure0)
                }
            }
        }
        stateMachines = stateMachinesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) for the Step Functions state machine or activity.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArn" : self = .invalidArn(try InvalidArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case invalidArn(InvalidArn)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// An array of tags associated with the resource.
    public var tags: [SFNClientTypes.Tag]?

    public init (
        tags: [SFNClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [SFNClientTypes.Tag]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([SFNClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SFNClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SFNClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension SFNClientTypes.LogDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogsLogGroup
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLogsLogGroup = self.cloudWatchLogsLogGroup {
            try encodeContainer.encode(cloudWatchLogsLogGroup, forKey: .cloudWatchLogsLogGroup)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudWatchLogsLogGroupDecoded = try containerValues.decodeIfPresent(SFNClientTypes.CloudWatchLogsLogGroup.self, forKey: .cloudWatchLogsLogGroup)
        cloudWatchLogsLogGroup = cloudWatchLogsLogGroupDecoded
    }
}

extension SFNClientTypes {
    ///
    public struct LogDestination: Swift.Equatable {
        /// An object describing a CloudWatch log group. For more information, see [AWS::Logs::LogGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html) in the CloudFormation User Guide.
        public var cloudWatchLogsLogGroup: SFNClientTypes.CloudWatchLogsLogGroup?

        public init (
            cloudWatchLogsLogGroup: SFNClientTypes.CloudWatchLogsLogGroup? = nil
        )
        {
            self.cloudWatchLogsLogGroup = cloudWatchLogsLogGroup
        }
    }

}

extension SFNClientTypes {
    public enum LogLevel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case error
        case fatal
        case off
        case sdkUnknown(Swift.String)

        public static var allCases: [LogLevel] {
            return [
                .all,
                .error,
                .fatal,
                .off,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .error: return "ERROR"
            case .fatal: return "FATAL"
            case .off: return "OFF"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LogLevel(rawValue: rawValue) ?? LogLevel.sdkUnknown(rawValue)
        }
    }
}

extension SFNClientTypes.LoggingConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinations
        case includeExecutionData
        case level
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for logdestination0 in destinations {
                try destinationsContainer.encode(logdestination0)
            }
        }
        if includeExecutionData != false {
            try encodeContainer.encode(includeExecutionData, forKey: .includeExecutionData)
        }
        if let level = self.level {
            try encodeContainer.encode(level.rawValue, forKey: .level)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let levelDecoded = try containerValues.decodeIfPresent(SFNClientTypes.LogLevel.self, forKey: .level)
        level = levelDecoded
        let includeExecutionDataDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeExecutionData) ?? false
        includeExecutionData = includeExecutionDataDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([SFNClientTypes.LogDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[SFNClientTypes.LogDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [SFNClientTypes.LogDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
    }
}

extension SFNClientTypes {
    /// The LoggingConfiguration data type is used to set CloudWatch Logs options.
    public struct LoggingConfiguration: Swift.Equatable {
        /// An array of objects that describes where your execution history events will be logged. Limited to size 1. Required, if your log level is not set to OFF.
        public var destinations: [SFNClientTypes.LogDestination]?
        /// Determines whether execution data is included in your log. When set to false, data is excluded.
        public var includeExecutionData: Swift.Bool
        /// Defines which category of execution history events are logged.
        public var level: SFNClientTypes.LogLevel?

        public init (
            destinations: [SFNClientTypes.LogDestination]? = nil,
            includeExecutionData: Swift.Bool = false,
            level: SFNClientTypes.LogLevel? = nil
        )
        {
            self.destinations = destinations
            self.includeExecutionData = includeExecutionData
            self.level = level
        }
    }

}

extension SFNClientTypes.MapIterationEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case index
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if index != 0 {
            try encodeContainer.encode(index, forKey: .index)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let indexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .index) ?? 0
        index = indexDecoded
    }
}

extension SFNClientTypes {
    /// Contains details about an iteration of a Map state.
    public struct MapIterationEventDetails: Swift.Equatable {
        /// The index of the array belonging to the Map state iteration.
        public var index: Swift.Int
        /// The name of the iteration’s parent Map state.
        public var name: Swift.String?

        public init (
            index: Swift.Int = 0,
            name: Swift.String? = nil
        )
        {
            self.index = index
            self.name = name
        }
    }

}

extension SFNClientTypes.MapRunExecutionCounts: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aborted
        case failed
        case pending
        case resultsWritten
        case running
        case succeeded
        case timedOut
        case total
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if aborted != 0 {
            try encodeContainer.encode(aborted, forKey: .aborted)
        }
        if failed != 0 {
            try encodeContainer.encode(failed, forKey: .failed)
        }
        if pending != 0 {
            try encodeContainer.encode(pending, forKey: .pending)
        }
        if resultsWritten != 0 {
            try encodeContainer.encode(resultsWritten, forKey: .resultsWritten)
        }
        if running != 0 {
            try encodeContainer.encode(running, forKey: .running)
        }
        if succeeded != 0 {
            try encodeContainer.encode(succeeded, forKey: .succeeded)
        }
        if timedOut != 0 {
            try encodeContainer.encode(timedOut, forKey: .timedOut)
        }
        if total != 0 {
            try encodeContainer.encode(total, forKey: .total)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pendingDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pending) ?? 0
        pending = pendingDecoded
        let runningDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .running) ?? 0
        running = runningDecoded
        let succeededDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .succeeded) ?? 0
        succeeded = succeededDecoded
        let failedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failed) ?? 0
        failed = failedDecoded
        let timedOutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timedOut) ?? 0
        timedOut = timedOutDecoded
        let abortedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .aborted) ?? 0
        aborted = abortedDecoded
        let totalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .total) ?? 0
        total = totalDecoded
        let resultsWrittenDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .resultsWritten) ?? 0
        resultsWritten = resultsWrittenDecoded
    }
}

extension SFNClientTypes {
    /// Contains details about all of the child workflow executions started by a Map Run.
    public struct MapRunExecutionCounts: Swift.Equatable {
        /// The total number of child workflow executions that were started by a Map Run and were running, but were either stopped by the user or by Step Functions because the Map Run failed.
        /// This member is required.
        public var aborted: Swift.Int
        /// The total number of child workflow executions that were started by a Map Run, but have failed.
        /// This member is required.
        public var failed: Swift.Int
        /// The total number of child workflow executions that were started by a Map Run, but haven't started executing yet.
        /// This member is required.
        public var pending: Swift.Int
        /// Returns the count of child workflow executions whose results were written by ResultWriter. For more information, see [ResultWriter](https://docs.aws.amazon.com/step-functions/latest/dg/input-output-resultwriter.html) in the Step Functions Developer Guide.
        /// This member is required.
        public var resultsWritten: Swift.Int
        /// The total number of child workflow executions that were started by a Map Run and are currently in-progress.
        /// This member is required.
        public var running: Swift.Int
        /// The total number of child workflow executions that were started by a Map Run and have completed successfully.
        /// This member is required.
        public var succeeded: Swift.Int
        /// The total number of child workflow executions that were started by a Map Run and have timed out.
        /// This member is required.
        public var timedOut: Swift.Int
        /// The total number of child workflow executions that were started by a Map Run.
        /// This member is required.
        public var total: Swift.Int

        public init (
            aborted: Swift.Int = 0,
            failed: Swift.Int = 0,
            pending: Swift.Int = 0,
            resultsWritten: Swift.Int = 0,
            running: Swift.Int = 0,
            succeeded: Swift.Int = 0,
            timedOut: Swift.Int = 0,
            total: Swift.Int = 0
        )
        {
            self.aborted = aborted
            self.failed = failed
            self.pending = pending
            self.resultsWritten = resultsWritten
            self.running = running
            self.succeeded = succeeded
            self.timedOut = timedOut
            self.total = total
        }
    }

}

extension SFNClientTypes.MapRunFailedEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case error
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause, forKey: .cause)
        }
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let causeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cause)
        cause = causeDecoded
    }
}

extension SFNClientTypes.MapRunFailedEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MapRunFailedEventDetails(cause: \"CONTENT_REDACTED\", error: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about a Map Run failure event that occurred during a state machine execution.
    public struct MapRunFailedEventDetails: Swift.Equatable {
        /// A more detailed explanation of the cause of the failure.
        public var cause: Swift.String?
        /// The error code of the Map Run failure.
        public var error: Swift.String?

        public init (
            cause: Swift.String? = nil,
            error: Swift.String? = nil
        )
        {
            self.cause = cause
            self.error = error
        }
    }

}

extension SFNClientTypes.MapRunItemCounts: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aborted
        case failed
        case pending
        case resultsWritten
        case running
        case succeeded
        case timedOut
        case total
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if aborted != 0 {
            try encodeContainer.encode(aborted, forKey: .aborted)
        }
        if failed != 0 {
            try encodeContainer.encode(failed, forKey: .failed)
        }
        if pending != 0 {
            try encodeContainer.encode(pending, forKey: .pending)
        }
        if resultsWritten != 0 {
            try encodeContainer.encode(resultsWritten, forKey: .resultsWritten)
        }
        if running != 0 {
            try encodeContainer.encode(running, forKey: .running)
        }
        if succeeded != 0 {
            try encodeContainer.encode(succeeded, forKey: .succeeded)
        }
        if timedOut != 0 {
            try encodeContainer.encode(timedOut, forKey: .timedOut)
        }
        if total != 0 {
            try encodeContainer.encode(total, forKey: .total)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pendingDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pending) ?? 0
        pending = pendingDecoded
        let runningDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .running) ?? 0
        running = runningDecoded
        let succeededDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .succeeded) ?? 0
        succeeded = succeededDecoded
        let failedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failed) ?? 0
        failed = failedDecoded
        let timedOutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timedOut) ?? 0
        timedOut = timedOutDecoded
        let abortedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .aborted) ?? 0
        aborted = abortedDecoded
        let totalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .total) ?? 0
        total = totalDecoded
        let resultsWrittenDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .resultsWritten) ?? 0
        resultsWritten = resultsWrittenDecoded
    }
}

extension SFNClientTypes {
    /// Contains details about items that were processed in all of the child workflow executions that were started by a Map Run.
    public struct MapRunItemCounts: Swift.Equatable {
        /// The total number of items processed in child workflow executions that were either stopped by the user or by Step Functions, because the Map Run failed.
        /// This member is required.
        public var aborted: Swift.Int
        /// The total number of items processed in child workflow executions that have failed.
        /// This member is required.
        public var failed: Swift.Int
        /// The total number of items to process in child workflow executions that haven't started running yet.
        /// This member is required.
        public var pending: Swift.Int
        /// Returns the count of items whose results were written by ResultWriter. For more information, see [ResultWriter](https://docs.aws.amazon.com/step-functions/latest/dg/input-output-resultwriter.html) in the Step Functions Developer Guide.
        /// This member is required.
        public var resultsWritten: Swift.Int
        /// The total number of items being processed in child workflow executions that are currently in-progress.
        /// This member is required.
        public var running: Swift.Int
        /// The total number of items processed in child workflow executions that have completed successfully.
        /// This member is required.
        public var succeeded: Swift.Int
        /// The total number of items processed in child workflow executions that have timed out.
        /// This member is required.
        public var timedOut: Swift.Int
        /// The total number of items processed in all the child workflow executions started by a Map Run.
        /// This member is required.
        public var total: Swift.Int

        public init (
            aborted: Swift.Int = 0,
            failed: Swift.Int = 0,
            pending: Swift.Int = 0,
            resultsWritten: Swift.Int = 0,
            running: Swift.Int = 0,
            succeeded: Swift.Int = 0,
            timedOut: Swift.Int = 0,
            total: Swift.Int = 0
        )
        {
            self.aborted = aborted
            self.failed = failed
            self.pending = pending
            self.resultsWritten = resultsWritten
            self.running = running
            self.succeeded = succeeded
            self.timedOut = timedOut
            self.total = total
        }
    }

}

extension SFNClientTypes.MapRunListItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionArn
        case mapRunArn
        case startDate
        case stateMachineArn
        case stopDate
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionArn = self.executionArn {
            try encodeContainer.encode(executionArn, forKey: .executionArn)
        }
        if let mapRunArn = self.mapRunArn {
            try encodeContainer.encode(mapRunArn, forKey: .mapRunArn)
        }
        if let startDate = self.startDate {
            try encodeContainer.encodeTimestamp(startDate, format: .epochSeconds, forKey: .startDate)
        }
        if let stateMachineArn = self.stateMachineArn {
            try encodeContainer.encode(stateMachineArn, forKey: .stateMachineArn)
        }
        if let stopDate = self.stopDate {
            try encodeContainer.encodeTimestamp(stopDate, format: .epochSeconds, forKey: .stopDate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionArn)
        executionArn = executionArnDecoded
        let mapRunArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mapRunArn)
        mapRunArn = mapRunArnDecoded
        let stateMachineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateMachineArn)
        stateMachineArn = stateMachineArnDecoded
        let startDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startDate)
        startDate = startDateDecoded
        let stopDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .stopDate)
        stopDate = stopDateDecoded
    }
}

extension SFNClientTypes {
    /// Contains details about a specific Map Run.
    public struct MapRunListItem: Swift.Equatable {
        /// The executionArn of the execution from which the Map Run was started.
        /// This member is required.
        public var executionArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the Map Run.
        /// This member is required.
        public var mapRunArn: Swift.String?
        /// The date on which the Map Run started.
        /// This member is required.
        public var startDate: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the executed state machine.
        /// This member is required.
        public var stateMachineArn: Swift.String?
        /// The date on which the Map Run stopped.
        public var stopDate: ClientRuntime.Date?

        public init (
            executionArn: Swift.String? = nil,
            mapRunArn: Swift.String? = nil,
            startDate: ClientRuntime.Date? = nil,
            stateMachineArn: Swift.String? = nil,
            stopDate: ClientRuntime.Date? = nil
        )
        {
            self.executionArn = executionArn
            self.mapRunArn = mapRunArn
            self.startDate = startDate
            self.stateMachineArn = stateMachineArn
            self.stopDate = stopDate
        }
    }

}

extension SFNClientTypes.MapRunStartedEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mapRunArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mapRunArn = self.mapRunArn {
            try encodeContainer.encode(mapRunArn, forKey: .mapRunArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mapRunArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mapRunArn)
        mapRunArn = mapRunArnDecoded
    }
}

extension SFNClientTypes {
    /// Contains details about a Map Run that was started during a state machine execution.
    public struct MapRunStartedEventDetails: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of a Map Run that was started.
        public var mapRunArn: Swift.String?

        public init (
            mapRunArn: Swift.String? = nil
        )
        {
            self.mapRunArn = mapRunArn
        }
    }

}

extension SFNClientTypes {
    public enum MapRunStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aborted
        case failed
        case running
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [MapRunStatus] {
            return [
                .aborted,
                .failed,
                .running,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aborted: return "ABORTED"
            case .failed: return "FAILED"
            case .running: return "RUNNING"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MapRunStatus(rawValue: rawValue) ?? MapRunStatus.sdkUnknown(rawValue)
        }
    }
}

extension SFNClientTypes.MapStateStartedEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case length
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if length != 0 {
            try encodeContainer.encode(length, forKey: .length)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .length) ?? 0
        length = lengthDecoded
    }
}

extension SFNClientTypes {
    /// Details about a Map state that was started.
    public struct MapStateStartedEventDetails: Swift.Equatable {
        /// The size of the array for Map state iterations.
        public var length: Swift.Int

        public init (
            length: Swift.Int = 0
        )
        {
            self.length = length
        }
    }

}

extension MissingRequiredParameter {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: MissingRequiredParameterBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Request is missing a required parameter. This error occurs if both definition and roleArn are not specified.
public struct MissingRequiredParameter: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MissingRequiredParameterBody: Swift.Equatable {
    let message: Swift.String?
}

extension MissingRequiredParameterBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFound {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceNotFoundBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.resourceName = output.resourceName
        } else {
            self.message = nil
            self.resourceName = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Could not find the referenced resource. Only state machine and activity ARNs are supported.
public struct ResourceNotFound: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    public var resourceName: Swift.String?

    public init (
        message: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.message = message
        self.resourceName = resourceName
    }
}

struct ResourceNotFoundBody: Swift.Equatable {
    let message: Swift.String?
    let resourceName: Swift.String?
}

extension ResourceNotFoundBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case resourceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
    }
}

extension SendTaskFailureInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendTaskFailureInput(taskToken: \(Swift.String(describing: taskToken)), cause: \"CONTENT_REDACTED\", error: \"CONTENT_REDACTED\")"}
}

extension SendTaskFailureInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case error
        case taskToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause, forKey: .cause)
        }
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
        if let taskToken = self.taskToken {
            try encodeContainer.encode(taskToken, forKey: .taskToken)
        }
    }
}

extension SendTaskFailureInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SendTaskFailureInput: Swift.Equatable {
    /// A more detailed explanation of the cause of the failure.
    public var cause: Swift.String?
    /// The error code of the failure.
    public var error: Swift.String?
    /// The token that represents this task. Task tokens are generated by Step Functions when tasks are assigned to a worker, or in the [context object](https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html) when a workflow enters a task state. See [GetActivityTaskOutput$taskToken].
    /// This member is required.
    public var taskToken: Swift.String?

    public init (
        cause: Swift.String? = nil,
        error: Swift.String? = nil,
        taskToken: Swift.String? = nil
    )
    {
        self.cause = cause
        self.error = error
        self.taskToken = taskToken
    }
}

struct SendTaskFailureInputBody: Swift.Equatable {
    let taskToken: Swift.String?
    let error: Swift.String?
    let cause: Swift.String?
}

extension SendTaskFailureInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case error
        case taskToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskToken)
        taskToken = taskTokenDecoded
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let causeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cause)
        cause = causeDecoded
    }
}

extension SendTaskFailureOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SendTaskFailureOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidToken" : self = .invalidToken(try InvalidToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaskDoesNotExist" : self = .taskDoesNotExist(try TaskDoesNotExist(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaskTimedOut" : self = .taskTimedOut(try TaskTimedOut(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SendTaskFailureOutputError: Swift.Error, Swift.Equatable {
    case invalidToken(InvalidToken)
    case taskDoesNotExist(TaskDoesNotExist)
    case taskTimedOut(TaskTimedOut)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendTaskFailureOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SendTaskFailureOutputResponse: Swift.Equatable {

    public init () { }
}

extension SendTaskHeartbeatInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let taskToken = self.taskToken {
            try encodeContainer.encode(taskToken, forKey: .taskToken)
        }
    }
}

extension SendTaskHeartbeatInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SendTaskHeartbeatInput: Swift.Equatable {
    /// The token that represents this task. Task tokens are generated by Step Functions when tasks are assigned to a worker, or in the [context object](https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html) when a workflow enters a task state. See [GetActivityTaskOutput$taskToken].
    /// This member is required.
    public var taskToken: Swift.String?

    public init (
        taskToken: Swift.String? = nil
    )
    {
        self.taskToken = taskToken
    }
}

struct SendTaskHeartbeatInputBody: Swift.Equatable {
    let taskToken: Swift.String?
}

extension SendTaskHeartbeatInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskToken)
        taskToken = taskTokenDecoded
    }
}

extension SendTaskHeartbeatOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SendTaskHeartbeatOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidToken" : self = .invalidToken(try InvalidToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaskDoesNotExist" : self = .taskDoesNotExist(try TaskDoesNotExist(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaskTimedOut" : self = .taskTimedOut(try TaskTimedOut(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SendTaskHeartbeatOutputError: Swift.Error, Swift.Equatable {
    case invalidToken(InvalidToken)
    case taskDoesNotExist(TaskDoesNotExist)
    case taskTimedOut(TaskTimedOut)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendTaskHeartbeatOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SendTaskHeartbeatOutputResponse: Swift.Equatable {

    public init () { }
}

extension SendTaskSuccessInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SendTaskSuccessInput(taskToken: \(Swift.String(describing: taskToken)), output: \"CONTENT_REDACTED\")"}
}

extension SendTaskSuccessInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case output
        case taskToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let output = self.output {
            try encodeContainer.encode(output, forKey: .output)
        }
        if let taskToken = self.taskToken {
            try encodeContainer.encode(taskToken, forKey: .taskToken)
        }
    }
}

extension SendTaskSuccessInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SendTaskSuccessInput: Swift.Equatable {
    /// The JSON output of the task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.
    /// This member is required.
    public var output: Swift.String?
    /// The token that represents this task. Task tokens are generated by Step Functions when tasks are assigned to a worker, or in the [context object](https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html) when a workflow enters a task state. See [GetActivityTaskOutput$taskToken].
    /// This member is required.
    public var taskToken: Swift.String?

    public init (
        output: Swift.String? = nil,
        taskToken: Swift.String? = nil
    )
    {
        self.output = output
        self.taskToken = taskToken
    }
}

struct SendTaskSuccessInputBody: Swift.Equatable {
    let taskToken: Swift.String?
    let output: Swift.String?
}

extension SendTaskSuccessInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case output
        case taskToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskToken)
        taskToken = taskTokenDecoded
        let outputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .output)
        output = outputDecoded
    }
}

extension SendTaskSuccessOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SendTaskSuccessOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidOutput" : self = .invalidOutput(try InvalidOutput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidToken" : self = .invalidToken(try InvalidToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaskDoesNotExist" : self = .taskDoesNotExist(try TaskDoesNotExist(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaskTimedOut" : self = .taskTimedOut(try TaskTimedOut(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SendTaskSuccessOutputError: Swift.Error, Swift.Equatable {
    case invalidOutput(InvalidOutput)
    case invalidToken(InvalidToken)
    case taskDoesNotExist(TaskDoesNotExist)
    case taskTimedOut(TaskTimedOut)
    case unknown(UnknownAWSHttpServiceError)
}

extension SendTaskSuccessOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SendTaskSuccessOutputResponse: Swift.Equatable {

    public init () { }
}

extension StartExecutionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartExecutionInput(name: \(Swift.String(describing: name)), stateMachineArn: \(Swift.String(describing: stateMachineArn)), traceHeader: \(Swift.String(describing: traceHeader)), input: \"CONTENT_REDACTED\")"}
}

extension StartExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case input
        case name
        case stateMachineArn
        case traceHeader
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let stateMachineArn = self.stateMachineArn {
            try encodeContainer.encode(stateMachineArn, forKey: .stateMachineArn)
        }
        if let traceHeader = self.traceHeader {
            try encodeContainer.encode(traceHeader, forKey: .traceHeader)
        }
    }
}

extension StartExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartExecutionInput: Swift.Equatable {
    /// The string that contains the JSON input data for the execution, for example: "input": "{\"first_name\" : \"test\"}" If you don't include any JSON input data, you still must include the two braces, for example: "input": "{}" Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.
    public var input: Swift.String?
    /// The name of the execution. This name must be unique for your Amazon Web Services account, region, and state machine for 90 days. For more information, see [ Limits Related to State Machine Executions](https://docs.aws.amazon.com/step-functions/latest/dg/limits.html#service-limits-state-machine-executions) in the Step Functions Developer Guide. A name must not contain:
    ///
    /// * white space
    ///
    /// * brackets < > { } [ ]
    ///
    /// * wildcard characters ? *
    ///
    /// * special characters " # % \ ^ | ~ ` $ & , ; : /
    ///
    /// * control characters (U+0000-001F, U+007F-009F)
    ///
    ///
    /// To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the state machine to execute.
    /// This member is required.
    public var stateMachineArn: Swift.String?
    /// Passes the X-Ray trace header. The trace header can also be passed in the request payload.
    public var traceHeader: Swift.String?

    public init (
        input: Swift.String? = nil,
        name: Swift.String? = nil,
        stateMachineArn: Swift.String? = nil,
        traceHeader: Swift.String? = nil
    )
    {
        self.input = input
        self.name = name
        self.stateMachineArn = stateMachineArn
        self.traceHeader = traceHeader
    }
}

struct StartExecutionInputBody: Swift.Equatable {
    let stateMachineArn: Swift.String?
    let name: Swift.String?
    let input: Swift.String?
    let traceHeader: Swift.String?
}

extension StartExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case input
        case name
        case stateMachineArn
        case traceHeader
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateMachineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateMachineArn)
        stateMachineArn = stateMachineArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
        let traceHeaderDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .traceHeader)
        traceHeader = traceHeaderDecoded
    }
}

extension StartExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ExecutionAlreadyExists" : self = .executionAlreadyExists(try ExecutionAlreadyExists(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ExecutionLimitExceeded" : self = .executionLimitExceeded(try ExecutionLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArn(try InvalidArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidExecutionInput" : self = .invalidExecutionInput(try InvalidExecutionInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidName" : self = .invalidName(try InvalidName(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StateMachineDeleting" : self = .stateMachineDeleting(try StateMachineDeleting(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StateMachineDoesNotExist" : self = .stateMachineDoesNotExist(try StateMachineDoesNotExist(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartExecutionOutputError: Swift.Error, Swift.Equatable {
    case executionAlreadyExists(ExecutionAlreadyExists)
    case executionLimitExceeded(ExecutionLimitExceeded)
    case invalidArn(InvalidArn)
    case invalidExecutionInput(InvalidExecutionInput)
    case invalidName(InvalidName)
    case stateMachineDeleting(StateMachineDeleting)
    case stateMachineDoesNotExist(StateMachineDoesNotExist)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.executionArn = output.executionArn
            self.startDate = output.startDate
        } else {
            self.executionArn = nil
            self.startDate = nil
        }
    }
}

public struct StartExecutionOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that identifies the execution.
    /// This member is required.
    public var executionArn: Swift.String?
    /// The date the execution is started.
    /// This member is required.
    public var startDate: ClientRuntime.Date?

    public init (
        executionArn: Swift.String? = nil,
        startDate: ClientRuntime.Date? = nil
    )
    {
        self.executionArn = executionArn
        self.startDate = startDate
    }
}

struct StartExecutionOutputResponseBody: Swift.Equatable {
    let executionArn: Swift.String?
    let startDate: ClientRuntime.Date?
}

extension StartExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionArn
        case startDate
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionArn)
        executionArn = executionArnDecoded
        let startDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startDate)
        startDate = startDateDecoded
    }
}

extension StartSyncExecutionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartSyncExecutionInput(name: \(Swift.String(describing: name)), stateMachineArn: \(Swift.String(describing: stateMachineArn)), traceHeader: \(Swift.String(describing: traceHeader)), input: \"CONTENT_REDACTED\")"}
}

extension StartSyncExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case input
        case name
        case stateMachineArn
        case traceHeader
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let stateMachineArn = self.stateMachineArn {
            try encodeContainer.encode(stateMachineArn, forKey: .stateMachineArn)
        }
        if let traceHeader = self.traceHeader {
            try encodeContainer.encode(traceHeader, forKey: .traceHeader)
        }
    }
}

extension StartSyncExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartSyncExecutionInput: Swift.Equatable {
    /// The string that contains the JSON input data for the execution, for example: "input": "{\"first_name\" : \"test\"}" If you don't include any JSON input data, you still must include the two braces, for example: "input": "{}" Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.
    public var input: Swift.String?
    /// The name of the execution.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the state machine to execute.
    /// This member is required.
    public var stateMachineArn: Swift.String?
    /// Passes the X-Ray trace header. The trace header can also be passed in the request payload.
    public var traceHeader: Swift.String?

    public init (
        input: Swift.String? = nil,
        name: Swift.String? = nil,
        stateMachineArn: Swift.String? = nil,
        traceHeader: Swift.String? = nil
    )
    {
        self.input = input
        self.name = name
        self.stateMachineArn = stateMachineArn
        self.traceHeader = traceHeader
    }
}

struct StartSyncExecutionInputBody: Swift.Equatable {
    let stateMachineArn: Swift.String?
    let name: Swift.String?
    let input: Swift.String?
    let traceHeader: Swift.String?
}

extension StartSyncExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case input
        case name
        case stateMachineArn
        case traceHeader
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateMachineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateMachineArn)
        stateMachineArn = stateMachineArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
        let traceHeaderDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .traceHeader)
        traceHeader = traceHeaderDecoded
    }
}

extension StartSyncExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartSyncExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArn" : self = .invalidArn(try InvalidArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidExecutionInput" : self = .invalidExecutionInput(try InvalidExecutionInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidName" : self = .invalidName(try InvalidName(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StateMachineDeleting" : self = .stateMachineDeleting(try StateMachineDeleting(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StateMachineDoesNotExist" : self = .stateMachineDoesNotExist(try StateMachineDoesNotExist(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StateMachineTypeNotSupported" : self = .stateMachineTypeNotSupported(try StateMachineTypeNotSupported(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartSyncExecutionOutputError: Swift.Error, Swift.Equatable {
    case invalidArn(InvalidArn)
    case invalidExecutionInput(InvalidExecutionInput)
    case invalidName(InvalidName)
    case stateMachineDeleting(StateMachineDeleting)
    case stateMachineDoesNotExist(StateMachineDoesNotExist)
    case stateMachineTypeNotSupported(StateMachineTypeNotSupported)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartSyncExecutionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartSyncExecutionOutputResponse(billingDetails: \(Swift.String(describing: billingDetails)), executionArn: \(Swift.String(describing: executionArn)), inputDetails: \(Swift.String(describing: inputDetails)), name: \(Swift.String(describing: name)), outputDetails: \(Swift.String(describing: outputDetails)), startDate: \(Swift.String(describing: startDate)), stateMachineArn: \(Swift.String(describing: stateMachineArn)), status: \(Swift.String(describing: status)), stopDate: \(Swift.String(describing: stopDate)), traceHeader: \(Swift.String(describing: traceHeader)), cause: \"CONTENT_REDACTED\", error: \"CONTENT_REDACTED\", input: \"CONTENT_REDACTED\", output: \"CONTENT_REDACTED\")"}
}

extension StartSyncExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartSyncExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.billingDetails = output.billingDetails
            self.cause = output.cause
            self.error = output.error
            self.executionArn = output.executionArn
            self.input = output.input
            self.inputDetails = output.inputDetails
            self.name = output.name
            self.output = output.output
            self.outputDetails = output.outputDetails
            self.startDate = output.startDate
            self.stateMachineArn = output.stateMachineArn
            self.status = output.status
            self.stopDate = output.stopDate
            self.traceHeader = output.traceHeader
        } else {
            self.billingDetails = nil
            self.cause = nil
            self.error = nil
            self.executionArn = nil
            self.input = nil
            self.inputDetails = nil
            self.name = nil
            self.output = nil
            self.outputDetails = nil
            self.startDate = nil
            self.stateMachineArn = nil
            self.status = nil
            self.stopDate = nil
            self.traceHeader = nil
        }
    }
}

public struct StartSyncExecutionOutputResponse: Swift.Equatable {
    /// An object that describes workflow billing details, including billed duration and memory use.
    public var billingDetails: SFNClientTypes.BillingDetails?
    /// A more detailed explanation of the cause of the failure.
    public var cause: Swift.String?
    /// The error code of the failure.
    public var error: Swift.String?
    /// The Amazon Resource Name (ARN) that identifies the execution.
    /// This member is required.
    public var executionArn: Swift.String?
    /// The string that contains the JSON input data of the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.
    public var input: Swift.String?
    /// Provides details about execution input or output.
    public var inputDetails: SFNClientTypes.CloudWatchEventsExecutionDataDetails?
    /// The name of the execution.
    public var name: Swift.String?
    /// The JSON output data of the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding. This field is set only if the execution succeeds. If the execution fails, this field is null.
    public var output: Swift.String?
    /// Provides details about execution input or output.
    public var outputDetails: SFNClientTypes.CloudWatchEventsExecutionDataDetails?
    /// The date the execution is started.
    /// This member is required.
    public var startDate: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) that identifies the state machine.
    public var stateMachineArn: Swift.String?
    /// The current status of the execution.
    /// This member is required.
    public var status: SFNClientTypes.SyncExecutionStatus?
    /// If the execution has already ended, the date the execution stopped.
    /// This member is required.
    public var stopDate: ClientRuntime.Date?
    /// The X-Ray trace header that was passed to the execution.
    public var traceHeader: Swift.String?

    public init (
        billingDetails: SFNClientTypes.BillingDetails? = nil,
        cause: Swift.String? = nil,
        error: Swift.String? = nil,
        executionArn: Swift.String? = nil,
        input: Swift.String? = nil,
        inputDetails: SFNClientTypes.CloudWatchEventsExecutionDataDetails? = nil,
        name: Swift.String? = nil,
        output: Swift.String? = nil,
        outputDetails: SFNClientTypes.CloudWatchEventsExecutionDataDetails? = nil,
        startDate: ClientRuntime.Date? = nil,
        stateMachineArn: Swift.String? = nil,
        status: SFNClientTypes.SyncExecutionStatus? = nil,
        stopDate: ClientRuntime.Date? = nil,
        traceHeader: Swift.String? = nil
    )
    {
        self.billingDetails = billingDetails
        self.cause = cause
        self.error = error
        self.executionArn = executionArn
        self.input = input
        self.inputDetails = inputDetails
        self.name = name
        self.output = output
        self.outputDetails = outputDetails
        self.startDate = startDate
        self.stateMachineArn = stateMachineArn
        self.status = status
        self.stopDate = stopDate
        self.traceHeader = traceHeader
    }
}

struct StartSyncExecutionOutputResponseBody: Swift.Equatable {
    let executionArn: Swift.String?
    let stateMachineArn: Swift.String?
    let name: Swift.String?
    let startDate: ClientRuntime.Date?
    let stopDate: ClientRuntime.Date?
    let status: SFNClientTypes.SyncExecutionStatus?
    let error: Swift.String?
    let cause: Swift.String?
    let input: Swift.String?
    let inputDetails: SFNClientTypes.CloudWatchEventsExecutionDataDetails?
    let output: Swift.String?
    let outputDetails: SFNClientTypes.CloudWatchEventsExecutionDataDetails?
    let traceHeader: Swift.String?
    let billingDetails: SFNClientTypes.BillingDetails?
}

extension StartSyncExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billingDetails
        case cause
        case error
        case executionArn
        case input
        case inputDetails
        case name
        case output
        case outputDetails
        case startDate
        case stateMachineArn
        case status
        case stopDate
        case traceHeader
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionArn)
        executionArn = executionArnDecoded
        let stateMachineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateMachineArn)
        stateMachineArn = stateMachineArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let startDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startDate)
        startDate = startDateDecoded
        let stopDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .stopDate)
        stopDate = stopDateDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SFNClientTypes.SyncExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let causeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cause)
        cause = causeDecoded
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
        let inputDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.CloudWatchEventsExecutionDataDetails.self, forKey: .inputDetails)
        inputDetails = inputDetailsDecoded
        let outputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .output)
        output = outputDecoded
        let outputDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.CloudWatchEventsExecutionDataDetails.self, forKey: .outputDetails)
        outputDetails = outputDetailsDecoded
        let traceHeaderDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .traceHeader)
        traceHeader = traceHeaderDecoded
        let billingDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.BillingDetails.self, forKey: .billingDetails)
        billingDetails = billingDetailsDecoded
    }
}

extension SFNClientTypes.StateEnteredEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case input
        case inputDetails
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let inputDetails = self.inputDetails {
            try encodeContainer.encode(inputDetails, forKey: .inputDetails)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
        let inputDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.HistoryEventExecutionDataDetails.self, forKey: .inputDetails)
        inputDetails = inputDetailsDecoded
    }
}

extension SFNClientTypes.StateEnteredEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StateEnteredEventDetails(inputDetails: \(Swift.String(describing: inputDetails)), name: \(Swift.String(describing: name)), input: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about a state entered during an execution.
    public struct StateEnteredEventDetails: Swift.Equatable {
        /// The string that contains the JSON input data for the state. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.
        public var input: Swift.String?
        /// Contains details about the input for an execution history event.
        public var inputDetails: SFNClientTypes.HistoryEventExecutionDataDetails?
        /// The name of the state.
        /// This member is required.
        public var name: Swift.String?

        public init (
            input: Swift.String? = nil,
            inputDetails: SFNClientTypes.HistoryEventExecutionDataDetails? = nil,
            name: Swift.String? = nil
        )
        {
            self.input = input
            self.inputDetails = inputDetails
            self.name = name
        }
    }

}

extension SFNClientTypes.StateExitedEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case output
        case outputDetails
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let output = self.output {
            try encodeContainer.encode(output, forKey: .output)
        }
        if let outputDetails = self.outputDetails {
            try encodeContainer.encode(outputDetails, forKey: .outputDetails)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let outputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .output)
        output = outputDecoded
        let outputDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.HistoryEventExecutionDataDetails.self, forKey: .outputDetails)
        outputDetails = outputDetailsDecoded
    }
}

extension SFNClientTypes.StateExitedEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StateExitedEventDetails(name: \(Swift.String(describing: name)), outputDetails: \(Swift.String(describing: outputDetails)), output: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about an exit from a state during an execution.
    public struct StateExitedEventDetails: Swift.Equatable {
        /// The name of the state. A name must not contain:
        ///
        /// * white space
        ///
        /// * brackets < > { } [ ]
        ///
        /// * wildcard characters ? *
        ///
        /// * special characters " # % \ ^ | ~ ` $ & , ; : /
        ///
        /// * control characters (U+0000-001F, U+007F-009F)
        ///
        ///
        /// To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.
        /// This member is required.
        public var name: Swift.String?
        /// The JSON output data of the state. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.
        public var output: Swift.String?
        /// Contains details about the output of an execution history event.
        public var outputDetails: SFNClientTypes.HistoryEventExecutionDataDetails?

        public init (
            name: Swift.String? = nil,
            output: Swift.String? = nil,
            outputDetails: SFNClientTypes.HistoryEventExecutionDataDetails? = nil
        )
        {
            self.name = name
            self.output = output
            self.outputDetails = outputDetails
        }
    }

}

extension StateMachineAlreadyExists {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StateMachineAlreadyExistsBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A state machine with the same name but a different definition or role ARN already exists.
public struct StateMachineAlreadyExists: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct StateMachineAlreadyExistsBody: Swift.Equatable {
    let message: Swift.String?
}

extension StateMachineAlreadyExistsBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension StateMachineDeleting {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StateMachineDeletingBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified state machine is being deleted.
public struct StateMachineDeleting: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct StateMachineDeletingBody: Swift.Equatable {
    let message: Swift.String?
}

extension StateMachineDeletingBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension StateMachineDoesNotExist {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StateMachineDoesNotExistBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified state machine does not exist.
public struct StateMachineDoesNotExist: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct StateMachineDoesNotExistBody: Swift.Equatable {
    let message: Swift.String?
}

extension StateMachineDoesNotExistBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension StateMachineLimitExceeded {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StateMachineLimitExceededBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The maximum number of state machines has been reached. Existing state machines must be deleted before a new state machine can be created.
public struct StateMachineLimitExceeded: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct StateMachineLimitExceededBody: Swift.Equatable {
    let message: Swift.String?
}

extension StateMachineLimitExceededBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SFNClientTypes.StateMachineListItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate
        case name
        case stateMachineArn
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = self.creationDate {
            try encodeContainer.encodeTimestamp(creationDate, format: .epochSeconds, forKey: .creationDate)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let stateMachineArn = self.stateMachineArn {
            try encodeContainer.encode(stateMachineArn, forKey: .stateMachineArn)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateMachineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateMachineArn)
        stateMachineArn = stateMachineArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(SFNClientTypes.StateMachineType.self, forKey: .type)
        type = typeDecoded
        let creationDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}

extension SFNClientTypes {
    /// Contains details about the state machine.
    public struct StateMachineListItem: Swift.Equatable {
        /// The date the state machine is created.
        /// This member is required.
        public var creationDate: ClientRuntime.Date?
        /// The name of the state machine. A name must not contain:
        ///
        /// * white space
        ///
        /// * brackets < > { } [ ]
        ///
        /// * wildcard characters ? *
        ///
        /// * special characters " # % \ ^ | ~ ` $ & , ; : /
        ///
        /// * control characters (U+0000-001F, U+007F-009F)
        ///
        ///
        /// To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.
        /// This member is required.
        public var name: Swift.String?
        /// The Amazon Resource Name (ARN) that identifies the state machine.
        /// This member is required.
        public var stateMachineArn: Swift.String?
        ///
        /// This member is required.
        public var type: SFNClientTypes.StateMachineType?

        public init (
            creationDate: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            stateMachineArn: Swift.String? = nil,
            type: SFNClientTypes.StateMachineType? = nil
        )
        {
            self.creationDate = creationDate
            self.name = name
            self.stateMachineArn = stateMachineArn
            self.type = type
        }
    }

}

extension SFNClientTypes {
    public enum StateMachineStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [StateMachineStatus] {
            return [
                .active,
                .deleting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StateMachineStatus(rawValue: rawValue) ?? StateMachineStatus.sdkUnknown(rawValue)
        }
    }
}

extension SFNClientTypes {
    public enum StateMachineType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case express
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [StateMachineType] {
            return [
                .express,
                .standard,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .express: return "EXPRESS"
            case .standard: return "STANDARD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StateMachineType(rawValue: rawValue) ?? StateMachineType.sdkUnknown(rawValue)
        }
    }
}

extension StateMachineTypeNotSupported {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StateMachineTypeNotSupportedBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///
public struct StateMachineTypeNotSupported: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct StateMachineTypeNotSupportedBody: Swift.Equatable {
    let message: Swift.String?
}

extension StateMachineTypeNotSupportedBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension StopExecutionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopExecutionInput(executionArn: \(Swift.String(describing: executionArn)), cause: \"CONTENT_REDACTED\", error: \"CONTENT_REDACTED\")"}
}

extension StopExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case error
        case executionArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause, forKey: .cause)
        }
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
        if let executionArn = self.executionArn {
            try encodeContainer.encode(executionArn, forKey: .executionArn)
        }
    }
}

extension StopExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopExecutionInput: Swift.Equatable {
    /// A more detailed explanation of the cause of the failure.
    public var cause: Swift.String?
    /// The error code of the failure.
    public var error: Swift.String?
    /// The Amazon Resource Name (ARN) of the execution to stop.
    /// This member is required.
    public var executionArn: Swift.String?

    public init (
        cause: Swift.String? = nil,
        error: Swift.String? = nil,
        executionArn: Swift.String? = nil
    )
    {
        self.cause = cause
        self.error = error
        self.executionArn = executionArn
    }
}

struct StopExecutionInputBody: Swift.Equatable {
    let executionArn: Swift.String?
    let error: Swift.String?
    let cause: Swift.String?
}

extension StopExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case error
        case executionArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionArn)
        executionArn = executionArnDecoded
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let causeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cause)
        cause = causeDecoded
    }
}

extension StopExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ExecutionDoesNotExist" : self = .executionDoesNotExist(try ExecutionDoesNotExist(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArn" : self = .invalidArn(try InvalidArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopExecutionOutputError: Swift.Error, Swift.Equatable {
    case executionDoesNotExist(ExecutionDoesNotExist)
    case invalidArn(InvalidArn)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StopExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stopDate = output.stopDate
        } else {
            self.stopDate = nil
        }
    }
}

public struct StopExecutionOutputResponse: Swift.Equatable {
    /// The date the execution is stopped.
    /// This member is required.
    public var stopDate: ClientRuntime.Date?

    public init (
        stopDate: ClientRuntime.Date? = nil
    )
    {
        self.stopDate = stopDate
    }
}

struct StopExecutionOutputResponseBody: Swift.Equatable {
    let stopDate: ClientRuntime.Date?
}

extension StopExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stopDate
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stopDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .stopDate)
        stopDate = stopDateDecoded
    }
}

extension SFNClientTypes {
    public enum SyncExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case succeeded
        case timedOut
        case sdkUnknown(Swift.String)

        public static var allCases: [SyncExecutionStatus] {
            return [
                .failed,
                .succeeded,
                .timedOut,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .succeeded: return "SUCCEEDED"
            case .timedOut: return "TIMED_OUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SyncExecutionStatus(rawValue: rawValue) ?? SyncExecutionStatus.sdkUnknown(rawValue)
        }
    }
}

extension SFNClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension SFNClientTypes {
    /// Tags are key-value pairs that can be associated with Step Functions state machines and activities. An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the Amazon Web Services Billing and Cost Management User Guide, and [Controlling Access Using IAM Tags](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html). Tags may only contain Unicode letters, digits, white space, or these symbols: _ . : / = + - @.
    public struct Tag: Swift.Equatable {
        /// The key of a tag.
        public var key: Swift.String?
        /// The value of a tag.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) for the Step Functions state machine or activity.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The list of tags to add to a resource. Tags may only contain Unicode letters, digits, white space, or these symbols: _ . : / = + - @.
    /// This member is required.
    public var tags: [SFNClientTypes.Tag]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [SFNClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tags: [SFNClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SFNClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SFNClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SFNClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArn" : self = .invalidArn(try InvalidArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTags" : self = .tooManyTags(try TooManyTags(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case invalidArn(InvalidArn)
    case resourceNotFound(ResourceNotFound)
    case tooManyTags(TooManyTags)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension SFNClientTypes.TaskCredentials: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension SFNClientTypes {
    /// Contains details about the credentials that Step Functions uses for a task.
    public struct TaskCredentials: Swift.Equatable {
        /// The ARN of an IAM role that Step Functions assumes for the task. The role can allow cross-account access to resources.
        public var roleArn: Swift.String?

        public init (
            roleArn: Swift.String? = nil
        )
        {
            self.roleArn = roleArn
        }
    }

}

extension TaskDoesNotExist {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TaskDoesNotExistBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

public struct TaskDoesNotExist: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TaskDoesNotExistBody: Swift.Equatable {
    let message: Swift.String?
}

extension TaskDoesNotExistBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SFNClientTypes.TaskFailedEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case error
        case resource
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause, forKey: .cause)
        }
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
        if let resource = self.resource {
            try encodeContainer.encode(resource, forKey: .resource)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resource)
        resource = resourceDecoded
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let causeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cause)
        cause = causeDecoded
    }
}

extension SFNClientTypes.TaskFailedEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TaskFailedEventDetails(resource: \(Swift.String(describing: resource)), resourceType: \(Swift.String(describing: resourceType)), cause: \"CONTENT_REDACTED\", error: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about a task failure event.
    public struct TaskFailedEventDetails: Swift.Equatable {
        /// A more detailed explanation of the cause of the failure.
        public var cause: Swift.String?
        /// The error code of the failure.
        public var error: Swift.String?
        /// The action of the resource called by a task state.
        /// This member is required.
        public var resource: Swift.String?
        /// The service name of the resource in a task state.
        /// This member is required.
        public var resourceType: Swift.String?

        public init (
            cause: Swift.String? = nil,
            error: Swift.String? = nil,
            resource: Swift.String? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.cause = cause
            self.error = error
            self.resource = resource
            self.resourceType = resourceType
        }
    }

}

extension SFNClientTypes.TaskScheduledEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case heartbeatInSeconds
        case parameters
        case region
        case resource
        case resourceType
        case taskCredentials
        case timeoutInSeconds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let heartbeatInSeconds = self.heartbeatInSeconds {
            try encodeContainer.encode(heartbeatInSeconds, forKey: .heartbeatInSeconds)
        }
        if let parameters = self.parameters {
            try encodeContainer.encode(parameters, forKey: .parameters)
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let resource = self.resource {
            try encodeContainer.encode(resource, forKey: .resource)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
        if let taskCredentials = self.taskCredentials {
            try encodeContainer.encode(taskCredentials, forKey: .taskCredentials)
        }
        if let timeoutInSeconds = self.timeoutInSeconds {
            try encodeContainer.encode(timeoutInSeconds, forKey: .timeoutInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resource)
        resource = resourceDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let parametersDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameters)
        parameters = parametersDecoded
        let timeoutInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutInSeconds)
        timeoutInSeconds = timeoutInSecondsDecoded
        let heartbeatInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .heartbeatInSeconds)
        heartbeatInSeconds = heartbeatInSecondsDecoded
        let taskCredentialsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.TaskCredentials.self, forKey: .taskCredentials)
        taskCredentials = taskCredentialsDecoded
    }
}

extension SFNClientTypes.TaskScheduledEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TaskScheduledEventDetails(heartbeatInSeconds: \(Swift.String(describing: heartbeatInSeconds)), region: \(Swift.String(describing: region)), resource: \(Swift.String(describing: resource)), resourceType: \(Swift.String(describing: resourceType)), taskCredentials: \(Swift.String(describing: taskCredentials)), timeoutInSeconds: \(Swift.String(describing: timeoutInSeconds)), parameters: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about a task scheduled during an execution.
    public struct TaskScheduledEventDetails: Swift.Equatable {
        /// The maximum allowed duration between two heartbeats for the task.
        public var heartbeatInSeconds: Swift.Int?
        /// The JSON data passed to the resource referenced in a task state. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.
        /// This member is required.
        public var parameters: Swift.String?
        /// The region of the scheduled task
        /// This member is required.
        public var region: Swift.String?
        /// The action of the resource called by a task state.
        /// This member is required.
        public var resource: Swift.String?
        /// The service name of the resource in a task state.
        /// This member is required.
        public var resourceType: Swift.String?
        /// The credentials that Step Functions uses for the task.
        public var taskCredentials: SFNClientTypes.TaskCredentials?
        /// The maximum allowed duration of the task.
        public var timeoutInSeconds: Swift.Int?

        public init (
            heartbeatInSeconds: Swift.Int? = nil,
            parameters: Swift.String? = nil,
            region: Swift.String? = nil,
            resource: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            taskCredentials: SFNClientTypes.TaskCredentials? = nil,
            timeoutInSeconds: Swift.Int? = nil
        )
        {
            self.heartbeatInSeconds = heartbeatInSeconds
            self.parameters = parameters
            self.region = region
            self.resource = resource
            self.resourceType = resourceType
            self.taskCredentials = taskCredentials
            self.timeoutInSeconds = timeoutInSeconds
        }
    }

}

extension SFNClientTypes.TaskStartFailedEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case error
        case resource
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause, forKey: .cause)
        }
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
        if let resource = self.resource {
            try encodeContainer.encode(resource, forKey: .resource)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resource)
        resource = resourceDecoded
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let causeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cause)
        cause = causeDecoded
    }
}

extension SFNClientTypes.TaskStartFailedEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TaskStartFailedEventDetails(resource: \(Swift.String(describing: resource)), resourceType: \(Swift.String(describing: resourceType)), cause: \"CONTENT_REDACTED\", error: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about a task that failed to start during an execution.
    public struct TaskStartFailedEventDetails: Swift.Equatable {
        /// A more detailed explanation of the cause of the failure.
        public var cause: Swift.String?
        /// The error code of the failure.
        public var error: Swift.String?
        /// The action of the resource called by a task state.
        /// This member is required.
        public var resource: Swift.String?
        /// The service name of the resource in a task state.
        /// This member is required.
        public var resourceType: Swift.String?

        public init (
            cause: Swift.String? = nil,
            error: Swift.String? = nil,
            resource: Swift.String? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.cause = cause
            self.error = error
            self.resource = resource
            self.resourceType = resourceType
        }
    }

}

extension SFNClientTypes.TaskStartedEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resource
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resource = self.resource {
            try encodeContainer.encode(resource, forKey: .resource)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resource)
        resource = resourceDecoded
    }
}

extension SFNClientTypes {
    /// Contains details about the start of a task during an execution.
    public struct TaskStartedEventDetails: Swift.Equatable {
        /// The action of the resource called by a task state.
        /// This member is required.
        public var resource: Swift.String?
        /// The service name of the resource in a task state.
        /// This member is required.
        public var resourceType: Swift.String?

        public init (
            resource: Swift.String? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.resource = resource
            self.resourceType = resourceType
        }
    }

}

extension SFNClientTypes.TaskSubmitFailedEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case error
        case resource
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause, forKey: .cause)
        }
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
        if let resource = self.resource {
            try encodeContainer.encode(resource, forKey: .resource)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resource)
        resource = resourceDecoded
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let causeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cause)
        cause = causeDecoded
    }
}

extension SFNClientTypes.TaskSubmitFailedEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TaskSubmitFailedEventDetails(resource: \(Swift.String(describing: resource)), resourceType: \(Swift.String(describing: resourceType)), cause: \"CONTENT_REDACTED\", error: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about a task that failed to submit during an execution.
    public struct TaskSubmitFailedEventDetails: Swift.Equatable {
        /// A more detailed explanation of the cause of the failure.
        public var cause: Swift.String?
        /// The error code of the failure.
        public var error: Swift.String?
        /// The action of the resource called by a task state.
        /// This member is required.
        public var resource: Swift.String?
        /// The service name of the resource in a task state.
        /// This member is required.
        public var resourceType: Swift.String?

        public init (
            cause: Swift.String? = nil,
            error: Swift.String? = nil,
            resource: Swift.String? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.cause = cause
            self.error = error
            self.resource = resource
            self.resourceType = resourceType
        }
    }

}

extension SFNClientTypes.TaskSubmittedEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case output
        case outputDetails
        case resource
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let output = self.output {
            try encodeContainer.encode(output, forKey: .output)
        }
        if let outputDetails = self.outputDetails {
            try encodeContainer.encode(outputDetails, forKey: .outputDetails)
        }
        if let resource = self.resource {
            try encodeContainer.encode(resource, forKey: .resource)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resource)
        resource = resourceDecoded
        let outputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .output)
        output = outputDecoded
        let outputDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.HistoryEventExecutionDataDetails.self, forKey: .outputDetails)
        outputDetails = outputDetailsDecoded
    }
}

extension SFNClientTypes.TaskSubmittedEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TaskSubmittedEventDetails(outputDetails: \(Swift.String(describing: outputDetails)), resource: \(Swift.String(describing: resource)), resourceType: \(Swift.String(describing: resourceType)), output: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about a task submitted to a resource .
    public struct TaskSubmittedEventDetails: Swift.Equatable {
        /// The response from a resource when a task has started. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.
        public var output: Swift.String?
        /// Contains details about the output of an execution history event.
        public var outputDetails: SFNClientTypes.HistoryEventExecutionDataDetails?
        /// The action of the resource called by a task state.
        /// This member is required.
        public var resource: Swift.String?
        /// The service name of the resource in a task state.
        /// This member is required.
        public var resourceType: Swift.String?

        public init (
            output: Swift.String? = nil,
            outputDetails: SFNClientTypes.HistoryEventExecutionDataDetails? = nil,
            resource: Swift.String? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.output = output
            self.outputDetails = outputDetails
            self.resource = resource
            self.resourceType = resourceType
        }
    }

}

extension SFNClientTypes.TaskSucceededEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case output
        case outputDetails
        case resource
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let output = self.output {
            try encodeContainer.encode(output, forKey: .output)
        }
        if let outputDetails = self.outputDetails {
            try encodeContainer.encode(outputDetails, forKey: .outputDetails)
        }
        if let resource = self.resource {
            try encodeContainer.encode(resource, forKey: .resource)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resource)
        resource = resourceDecoded
        let outputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .output)
        output = outputDecoded
        let outputDetailsDecoded = try containerValues.decodeIfPresent(SFNClientTypes.HistoryEventExecutionDataDetails.self, forKey: .outputDetails)
        outputDetails = outputDetailsDecoded
    }
}

extension SFNClientTypes.TaskSucceededEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TaskSucceededEventDetails(outputDetails: \(Swift.String(describing: outputDetails)), resource: \(Swift.String(describing: resource)), resourceType: \(Swift.String(describing: resourceType)), output: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about the successful completion of a task state.
    public struct TaskSucceededEventDetails: Swift.Equatable {
        /// The full JSON response from a resource when a task has succeeded. This response becomes the output of the related task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.
        public var output: Swift.String?
        /// Contains details about the output of an execution history event.
        public var outputDetails: SFNClientTypes.HistoryEventExecutionDataDetails?
        /// The action of the resource called by a task state.
        /// This member is required.
        public var resource: Swift.String?
        /// The service name of the resource in a task state.
        /// This member is required.
        public var resourceType: Swift.String?

        public init (
            output: Swift.String? = nil,
            outputDetails: SFNClientTypes.HistoryEventExecutionDataDetails? = nil,
            resource: Swift.String? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.output = output
            self.outputDetails = outputDetails
            self.resource = resource
            self.resourceType = resourceType
        }
    }

}

extension TaskTimedOut {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TaskTimedOutBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

public struct TaskTimedOut: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TaskTimedOutBody: Swift.Equatable {
    let message: Swift.String?
}

extension TaskTimedOutBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SFNClientTypes.TaskTimedOutEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cause
        case error
        case resource
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cause = self.cause {
            try encodeContainer.encode(cause, forKey: .cause)
        }
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
        if let resource = self.resource {
            try encodeContainer.encode(resource, forKey: .resource)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resource)
        resource = resourceDecoded
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let causeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cause)
        cause = causeDecoded
    }
}

extension SFNClientTypes.TaskTimedOutEventDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TaskTimedOutEventDetails(resource: \(Swift.String(describing: resource)), resourceType: \(Swift.String(describing: resourceType)), cause: \"CONTENT_REDACTED\", error: \"CONTENT_REDACTED\")"}
}

extension SFNClientTypes {
    /// Contains details about a resource timeout that occurred during an execution.
    public struct TaskTimedOutEventDetails: Swift.Equatable {
        /// A more detailed explanation of the cause of the failure.
        public var cause: Swift.String?
        /// The error code of the failure.
        public var error: Swift.String?
        /// The action of the resource called by a task state.
        /// This member is required.
        public var resource: Swift.String?
        /// The service name of the resource in a task state.
        /// This member is required.
        public var resourceType: Swift.String?

        public init (
            cause: Swift.String? = nil,
            error: Swift.String? = nil,
            resource: Swift.String? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.cause = cause
            self.error = error
            self.resource = resource
            self.resourceType = resourceType
        }
    }

}

extension TooManyTags {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TooManyTagsBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.resourceName = output.resourceName
        } else {
            self.message = nil
            self.resourceName = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You've exceeded the number of tags allowed for a resource. See the [ Limits Topic](https://docs.aws.amazon.com/step-functions/latest/dg/limits.html) in the Step Functions Developer Guide.
public struct TooManyTags: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    public var resourceName: Swift.String?

    public init (
        message: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.message = message
        self.resourceName = resourceName
    }
}

struct TooManyTagsBody: Swift.Equatable {
    let message: Swift.String?
    let resourceName: Swift.String?
}

extension TooManyTagsBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case resourceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
    }
}

extension SFNClientTypes.TracingConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled) ?? false
        enabled = enabledDecoded
    }
}

extension SFNClientTypes {
    /// Selects whether or not the state machine's X-Ray tracing is enabled. Default is false
    public struct TracingConfiguration: Swift.Equatable {
        /// When set to true, X-Ray tracing is enabled.
        public var enabled: Swift.Bool

        public init (
            enabled: Swift.Bool = false
        )
        {
            self.enabled = enabled
        }
    }

}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tagKeys
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkey0 in tagKeys {
                try tagKeysContainer.encode(tagkey0)
            }
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) for the Step Functions state machine or activity.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The list of tags to remove from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tagKeys
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArn" : self = .invalidArn(try InvalidArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case invalidArn(InvalidArn)
    case resourceNotFound(ResourceNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateMapRunInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mapRunArn
        case maxConcurrency
        case toleratedFailureCount
        case toleratedFailurePercentage
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mapRunArn = self.mapRunArn {
            try encodeContainer.encode(mapRunArn, forKey: .mapRunArn)
        }
        if let maxConcurrency = self.maxConcurrency {
            try encodeContainer.encode(maxConcurrency, forKey: .maxConcurrency)
        }
        if let toleratedFailureCount = self.toleratedFailureCount {
            try encodeContainer.encode(toleratedFailureCount, forKey: .toleratedFailureCount)
        }
        if let toleratedFailurePercentage = self.toleratedFailurePercentage {
            try encodeContainer.encode(toleratedFailurePercentage, forKey: .toleratedFailurePercentage)
        }
    }
}

extension UpdateMapRunInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateMapRunInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of a Map Run.
    /// This member is required.
    public var mapRunArn: Swift.String?
    /// The maximum number of child workflow executions that can be specified to run in parallel for the Map Run at the same time.
    public var maxConcurrency: Swift.Int?
    /// The maximum number of failed items before the Map Run fails.
    public var toleratedFailureCount: Swift.Int?
    /// The maximum percentage of failed items before the Map Run fails.
    public var toleratedFailurePercentage: Swift.Float?

    public init (
        mapRunArn: Swift.String? = nil,
        maxConcurrency: Swift.Int? = nil,
        toleratedFailureCount: Swift.Int? = nil,
        toleratedFailurePercentage: Swift.Float? = nil
    )
    {
        self.mapRunArn = mapRunArn
        self.maxConcurrency = maxConcurrency
        self.toleratedFailureCount = toleratedFailureCount
        self.toleratedFailurePercentage = toleratedFailurePercentage
    }
}

struct UpdateMapRunInputBody: Swift.Equatable {
    let mapRunArn: Swift.String?
    let maxConcurrency: Swift.Int?
    let toleratedFailurePercentage: Swift.Float?
    let toleratedFailureCount: Swift.Int?
}

extension UpdateMapRunInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mapRunArn
        case maxConcurrency
        case toleratedFailureCount
        case toleratedFailurePercentage
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mapRunArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mapRunArn)
        mapRunArn = mapRunArnDecoded
        let maxConcurrencyDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxConcurrency)
        maxConcurrency = maxConcurrencyDecoded
        let toleratedFailurePercentageDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .toleratedFailurePercentage)
        toleratedFailurePercentage = toleratedFailurePercentageDecoded
        let toleratedFailureCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .toleratedFailureCount)
        toleratedFailureCount = toleratedFailureCountDecoded
    }
}

extension UpdateMapRunOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateMapRunOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArn" : self = .invalidArn(try InvalidArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFound" : self = .resourceNotFound(try ResourceNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateMapRunOutputError: Swift.Error, Swift.Equatable {
    case invalidArn(InvalidArn)
    case resourceNotFound(ResourceNotFound)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateMapRunOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateMapRunOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateStateMachineInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateStateMachineInput(loggingConfiguration: \(Swift.String(describing: loggingConfiguration)), roleArn: \(Swift.String(describing: roleArn)), stateMachineArn: \(Swift.String(describing: stateMachineArn)), tracingConfiguration: \(Swift.String(describing: tracingConfiguration)), definition: \"CONTENT_REDACTED\")"}
}

extension UpdateStateMachineInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case definition
        case loggingConfiguration
        case roleArn
        case stateMachineArn
        case tracingConfiguration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let definition = self.definition {
            try encodeContainer.encode(definition, forKey: .definition)
        }
        if let loggingConfiguration = self.loggingConfiguration {
            try encodeContainer.encode(loggingConfiguration, forKey: .loggingConfiguration)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stateMachineArn = self.stateMachineArn {
            try encodeContainer.encode(stateMachineArn, forKey: .stateMachineArn)
        }
        if let tracingConfiguration = self.tracingConfiguration {
            try encodeContainer.encode(tracingConfiguration, forKey: .tracingConfiguration)
        }
    }
}

extension UpdateStateMachineInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateStateMachineInput: Swift.Equatable {
    /// The Amazon States Language definition of the state machine. See [Amazon States Language](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html).
    public var definition: Swift.String?
    /// The LoggingConfiguration data type is used to set CloudWatch Logs options.
    public var loggingConfiguration: SFNClientTypes.LoggingConfiguration?
    /// The Amazon Resource Name (ARN) of the IAM role of the state machine.
    public var roleArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the state machine.
    /// This member is required.
    public var stateMachineArn: Swift.String?
    /// Selects whether X-Ray tracing is enabled.
    public var tracingConfiguration: SFNClientTypes.TracingConfiguration?

    public init (
        definition: Swift.String? = nil,
        loggingConfiguration: SFNClientTypes.LoggingConfiguration? = nil,
        roleArn: Swift.String? = nil,
        stateMachineArn: Swift.String? = nil,
        tracingConfiguration: SFNClientTypes.TracingConfiguration? = nil
    )
    {
        self.definition = definition
        self.loggingConfiguration = loggingConfiguration
        self.roleArn = roleArn
        self.stateMachineArn = stateMachineArn
        self.tracingConfiguration = tracingConfiguration
    }
}

struct UpdateStateMachineInputBody: Swift.Equatable {
    let stateMachineArn: Swift.String?
    let definition: Swift.String?
    let roleArn: Swift.String?
    let loggingConfiguration: SFNClientTypes.LoggingConfiguration?
    let tracingConfiguration: SFNClientTypes.TracingConfiguration?
}

extension UpdateStateMachineInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case definition
        case loggingConfiguration
        case roleArn
        case stateMachineArn
        case tracingConfiguration
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateMachineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateMachineArn)
        stateMachineArn = stateMachineArnDecoded
        let definitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .definition)
        definition = definitionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let loggingConfigurationDecoded = try containerValues.decodeIfPresent(SFNClientTypes.LoggingConfiguration.self, forKey: .loggingConfiguration)
        loggingConfiguration = loggingConfigurationDecoded
        let tracingConfigurationDecoded = try containerValues.decodeIfPresent(SFNClientTypes.TracingConfiguration.self, forKey: .tracingConfiguration)
        tracingConfiguration = tracingConfigurationDecoded
    }
}

extension UpdateStateMachineOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateStateMachineOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArn" : self = .invalidArn(try InvalidArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDefinition" : self = .invalidDefinition(try InvalidDefinition(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLoggingConfiguration" : self = .invalidLoggingConfiguration(try InvalidLoggingConfiguration(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTracingConfiguration" : self = .invalidTracingConfiguration(try InvalidTracingConfiguration(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingRequiredParameter" : self = .missingRequiredParameter(try MissingRequiredParameter(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StateMachineDeleting" : self = .stateMachineDeleting(try StateMachineDeleting(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StateMachineDoesNotExist" : self = .stateMachineDoesNotExist(try StateMachineDoesNotExist(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateStateMachineOutputError: Swift.Error, Swift.Equatable {
    case invalidArn(InvalidArn)
    case invalidDefinition(InvalidDefinition)
    case invalidLoggingConfiguration(InvalidLoggingConfiguration)
    case invalidTracingConfiguration(InvalidTracingConfiguration)
    case missingRequiredParameter(MissingRequiredParameter)
    case stateMachineDeleting(StateMachineDeleting)
    case stateMachineDoesNotExist(StateMachineDoesNotExist)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateStateMachineOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateStateMachineOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.updateDate = output.updateDate
        } else {
            self.updateDate = nil
        }
    }
}

public struct UpdateStateMachineOutputResponse: Swift.Equatable {
    /// The date and time the state machine was updated.
    /// This member is required.
    public var updateDate: ClientRuntime.Date?

    public init (
        updateDate: ClientRuntime.Date? = nil
    )
    {
        self.updateDate = updateDate
    }
}

struct UpdateStateMachineOutputResponseBody: Swift.Equatable {
    let updateDate: ClientRuntime.Date?
}

extension UpdateStateMachineOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case updateDate
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateDateDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updateDate)
        updateDate = updateDateDecoded
    }
}

extension ValidationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.reason = output.reason
        } else {
            self.message = nil
            self.reason = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The input does not satisfy the constraints specified by an Amazon Web Services service.
public struct ValidationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    /// The input does not satisfy the constraints specified by an Amazon Web Services service.
    public var reason: SFNClientTypes.ValidationExceptionReason?

    public init (
        message: Swift.String? = nil,
        reason: SFNClientTypes.ValidationExceptionReason? = nil
    )
    {
        self.message = message
        self.reason = reason
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let reason: SFNClientTypes.ValidationExceptionReason?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case reason
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(SFNClientTypes.ValidationExceptionReason.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension SFNClientTypes {
    public enum ValidationExceptionReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case apiDoesNotSupportLabeledArns
        case cannotUpdateCompletedMapRun
        case missingRequiredParameter
        case sdkUnknown(Swift.String)

        public static var allCases: [ValidationExceptionReason] {
            return [
                .apiDoesNotSupportLabeledArns,
                .cannotUpdateCompletedMapRun,
                .missingRequiredParameter,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .apiDoesNotSupportLabeledArns: return "API_DOES_NOT_SUPPORT_LABELED_ARNS"
            case .cannotUpdateCompletedMapRun: return "CANNOT_UPDATE_COMPLETED_MAP_RUN"
            case .missingRequiredParameter: return "MISSING_REQUIRED_PARAMETER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ValidationExceptionReason(rawValue: rawValue) ?? ValidationExceptionReason.sdkUnknown(rawValue)
        }
    }
}
